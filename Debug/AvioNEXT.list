
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bf48  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000684  0801c218  0801c218  0002c218  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801c89c  0801c89c  0002c89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801c8a4  0801c8a4  0002c8a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801c8a8  0801c8a8  0002c8a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002c8  24000000  0801c8ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000031ac  240002c8  0801cb74  000302c8  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  24003474  0801cb74  00033474  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000302c8  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000302f6  2**0
                  CONTENTS, READONLY
 11 .debug_info   00035a3c  00000000  00000000  00030339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000063d4  00000000  00000000  00065d75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002b70  00000000  00000000  0006c150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000021ab  00000000  00000000  0006ecc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003ec42  00000000  00000000  00070e6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003b165  00000000  00000000  000afaad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017ef59  00000000  00000000  000eac12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000d238  00000000  00000000  00269b6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  00276da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002c8 	.word	0x240002c8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801c200 	.word	0x0801c200

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002cc 	.word	0x240002cc
 800030c:	0801c200 	.word	0x0801c200

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	; 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295
 8000768:	f04f 30ff 	movne.w	r0, #4294967295
 800076c:	f000 b9a8 	b.w	8000ac0 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f83e 	bl	80007f8 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__aeabi_d2lz>:
 8000788:	b508      	push	{r3, lr}
 800078a:	4602      	mov	r2, r0
 800078c:	460b      	mov	r3, r1
 800078e:	ec43 2b17 	vmov	d7, r2, r3
 8000792:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079a:	d403      	bmi.n	80007a4 <__aeabi_d2lz+0x1c>
 800079c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007a0:	f000 b80a 	b.w	80007b8 <__aeabi_d2ulz>
 80007a4:	eeb1 7b47 	vneg.f64	d7, d7
 80007a8:	ec51 0b17 	vmov	r0, r1, d7
 80007ac:	f000 f804 	bl	80007b8 <__aeabi_d2ulz>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	bd08      	pop	{r3, pc}

080007b8 <__aeabi_d2ulz>:
 80007b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007e8 <__aeabi_d2ulz+0x30>
 80007bc:	ec41 0b17 	vmov	d7, r0, r1
 80007c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007f0 <__aeabi_d2ulz+0x38>
 80007c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007d8:	ee16 1a10 	vmov	r1, s12
 80007dc:	ee17 0a90 	vmov	r0, s15
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	f3af 8000 	nop.w
 80007e8:	00000000 	.word	0x00000000
 80007ec:	3df00000 	.word	0x3df00000
 80007f0:	00000000 	.word	0x00000000
 80007f4:	41f00000 	.word	0x41f00000

080007f8 <__udivmoddi4>:
 80007f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007fc:	9e08      	ldr	r6, [sp, #32]
 80007fe:	460d      	mov	r5, r1
 8000800:	4604      	mov	r4, r0
 8000802:	460f      	mov	r7, r1
 8000804:	2b00      	cmp	r3, #0
 8000806:	d14a      	bne.n	800089e <__udivmoddi4+0xa6>
 8000808:	428a      	cmp	r2, r1
 800080a:	4694      	mov	ip, r2
 800080c:	d965      	bls.n	80008da <__udivmoddi4+0xe2>
 800080e:	fab2 f382 	clz	r3, r2
 8000812:	b143      	cbz	r3, 8000826 <__udivmoddi4+0x2e>
 8000814:	fa02 fc03 	lsl.w	ip, r2, r3
 8000818:	f1c3 0220 	rsb	r2, r3, #32
 800081c:	409f      	lsls	r7, r3
 800081e:	fa20 f202 	lsr.w	r2, r0, r2
 8000822:	4317      	orrs	r7, r2
 8000824:	409c      	lsls	r4, r3
 8000826:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800082a:	fa1f f58c 	uxth.w	r5, ip
 800082e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000832:	0c22      	lsrs	r2, r4, #16
 8000834:	fb0e 7711 	mls	r7, lr, r1, r7
 8000838:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800083c:	fb01 f005 	mul.w	r0, r1, r5
 8000840:	4290      	cmp	r0, r2
 8000842:	d90a      	bls.n	800085a <__udivmoddi4+0x62>
 8000844:	eb1c 0202 	adds.w	r2, ip, r2
 8000848:	f101 37ff 	add.w	r7, r1, #4294967295
 800084c:	f080 811c 	bcs.w	8000a88 <__udivmoddi4+0x290>
 8000850:	4290      	cmp	r0, r2
 8000852:	f240 8119 	bls.w	8000a88 <__udivmoddi4+0x290>
 8000856:	3902      	subs	r1, #2
 8000858:	4462      	add	r2, ip
 800085a:	1a12      	subs	r2, r2, r0
 800085c:	b2a4      	uxth	r4, r4
 800085e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000862:	fb0e 2210 	mls	r2, lr, r0, r2
 8000866:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800086a:	fb00 f505 	mul.w	r5, r0, r5
 800086e:	42a5      	cmp	r5, r4
 8000870:	d90a      	bls.n	8000888 <__udivmoddi4+0x90>
 8000872:	eb1c 0404 	adds.w	r4, ip, r4
 8000876:	f100 32ff 	add.w	r2, r0, #4294967295
 800087a:	f080 8107 	bcs.w	8000a8c <__udivmoddi4+0x294>
 800087e:	42a5      	cmp	r5, r4
 8000880:	f240 8104 	bls.w	8000a8c <__udivmoddi4+0x294>
 8000884:	4464      	add	r4, ip
 8000886:	3802      	subs	r0, #2
 8000888:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800088c:	1b64      	subs	r4, r4, r5
 800088e:	2100      	movs	r1, #0
 8000890:	b11e      	cbz	r6, 800089a <__udivmoddi4+0xa2>
 8000892:	40dc      	lsrs	r4, r3
 8000894:	2300      	movs	r3, #0
 8000896:	e9c6 4300 	strd	r4, r3, [r6]
 800089a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800089e:	428b      	cmp	r3, r1
 80008a0:	d908      	bls.n	80008b4 <__udivmoddi4+0xbc>
 80008a2:	2e00      	cmp	r6, #0
 80008a4:	f000 80ed 	beq.w	8000a82 <__udivmoddi4+0x28a>
 80008a8:	2100      	movs	r1, #0
 80008aa:	e9c6 0500 	strd	r0, r5, [r6]
 80008ae:	4608      	mov	r0, r1
 80008b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008b4:	fab3 f183 	clz	r1, r3
 80008b8:	2900      	cmp	r1, #0
 80008ba:	d149      	bne.n	8000950 <__udivmoddi4+0x158>
 80008bc:	42ab      	cmp	r3, r5
 80008be:	d302      	bcc.n	80008c6 <__udivmoddi4+0xce>
 80008c0:	4282      	cmp	r2, r0
 80008c2:	f200 80f8 	bhi.w	8000ab6 <__udivmoddi4+0x2be>
 80008c6:	1a84      	subs	r4, r0, r2
 80008c8:	eb65 0203 	sbc.w	r2, r5, r3
 80008cc:	2001      	movs	r0, #1
 80008ce:	4617      	mov	r7, r2
 80008d0:	2e00      	cmp	r6, #0
 80008d2:	d0e2      	beq.n	800089a <__udivmoddi4+0xa2>
 80008d4:	e9c6 4700 	strd	r4, r7, [r6]
 80008d8:	e7df      	b.n	800089a <__udivmoddi4+0xa2>
 80008da:	b902      	cbnz	r2, 80008de <__udivmoddi4+0xe6>
 80008dc:	deff      	udf	#255	; 0xff
 80008de:	fab2 f382 	clz	r3, r2
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	f040 8090 	bne.w	8000a08 <__udivmoddi4+0x210>
 80008e8:	1a8a      	subs	r2, r1, r2
 80008ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008ee:	fa1f fe8c 	uxth.w	lr, ip
 80008f2:	2101      	movs	r1, #1
 80008f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008f8:	fb07 2015 	mls	r0, r7, r5, r2
 80008fc:	0c22      	lsrs	r2, r4, #16
 80008fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000902:	fb0e f005 	mul.w	r0, lr, r5
 8000906:	4290      	cmp	r0, r2
 8000908:	d908      	bls.n	800091c <__udivmoddi4+0x124>
 800090a:	eb1c 0202 	adds.w	r2, ip, r2
 800090e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000912:	d202      	bcs.n	800091a <__udivmoddi4+0x122>
 8000914:	4290      	cmp	r0, r2
 8000916:	f200 80cb 	bhi.w	8000ab0 <__udivmoddi4+0x2b8>
 800091a:	4645      	mov	r5, r8
 800091c:	1a12      	subs	r2, r2, r0
 800091e:	b2a4      	uxth	r4, r4
 8000920:	fbb2 f0f7 	udiv	r0, r2, r7
 8000924:	fb07 2210 	mls	r2, r7, r0, r2
 8000928:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800092c:	fb0e fe00 	mul.w	lr, lr, r0
 8000930:	45a6      	cmp	lr, r4
 8000932:	d908      	bls.n	8000946 <__udivmoddi4+0x14e>
 8000934:	eb1c 0404 	adds.w	r4, ip, r4
 8000938:	f100 32ff 	add.w	r2, r0, #4294967295
 800093c:	d202      	bcs.n	8000944 <__udivmoddi4+0x14c>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f200 80bb 	bhi.w	8000aba <__udivmoddi4+0x2c2>
 8000944:	4610      	mov	r0, r2
 8000946:	eba4 040e 	sub.w	r4, r4, lr
 800094a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800094e:	e79f      	b.n	8000890 <__udivmoddi4+0x98>
 8000950:	f1c1 0720 	rsb	r7, r1, #32
 8000954:	408b      	lsls	r3, r1
 8000956:	fa22 fc07 	lsr.w	ip, r2, r7
 800095a:	ea4c 0c03 	orr.w	ip, ip, r3
 800095e:	fa05 f401 	lsl.w	r4, r5, r1
 8000962:	fa20 f307 	lsr.w	r3, r0, r7
 8000966:	40fd      	lsrs	r5, r7
 8000968:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800096c:	4323      	orrs	r3, r4
 800096e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000972:	fa1f fe8c 	uxth.w	lr, ip
 8000976:	fb09 5518 	mls	r5, r9, r8, r5
 800097a:	0c1c      	lsrs	r4, r3, #16
 800097c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000980:	fb08 f50e 	mul.w	r5, r8, lr
 8000984:	42a5      	cmp	r5, r4
 8000986:	fa02 f201 	lsl.w	r2, r2, r1
 800098a:	fa00 f001 	lsl.w	r0, r0, r1
 800098e:	d90b      	bls.n	80009a8 <__udivmoddi4+0x1b0>
 8000990:	eb1c 0404 	adds.w	r4, ip, r4
 8000994:	f108 3aff 	add.w	sl, r8, #4294967295
 8000998:	f080 8088 	bcs.w	8000aac <__udivmoddi4+0x2b4>
 800099c:	42a5      	cmp	r5, r4
 800099e:	f240 8085 	bls.w	8000aac <__udivmoddi4+0x2b4>
 80009a2:	f1a8 0802 	sub.w	r8, r8, #2
 80009a6:	4464      	add	r4, ip
 80009a8:	1b64      	subs	r4, r4, r5
 80009aa:	b29d      	uxth	r5, r3
 80009ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80009b0:	fb09 4413 	mls	r4, r9, r3, r4
 80009b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80009bc:	45a6      	cmp	lr, r4
 80009be:	d908      	bls.n	80009d2 <__udivmoddi4+0x1da>
 80009c0:	eb1c 0404 	adds.w	r4, ip, r4
 80009c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80009c8:	d26c      	bcs.n	8000aa4 <__udivmoddi4+0x2ac>
 80009ca:	45a6      	cmp	lr, r4
 80009cc:	d96a      	bls.n	8000aa4 <__udivmoddi4+0x2ac>
 80009ce:	3b02      	subs	r3, #2
 80009d0:	4464      	add	r4, ip
 80009d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009d6:	fba3 9502 	umull	r9, r5, r3, r2
 80009da:	eba4 040e 	sub.w	r4, r4, lr
 80009de:	42ac      	cmp	r4, r5
 80009e0:	46c8      	mov	r8, r9
 80009e2:	46ae      	mov	lr, r5
 80009e4:	d356      	bcc.n	8000a94 <__udivmoddi4+0x29c>
 80009e6:	d053      	beq.n	8000a90 <__udivmoddi4+0x298>
 80009e8:	b156      	cbz	r6, 8000a00 <__udivmoddi4+0x208>
 80009ea:	ebb0 0208 	subs.w	r2, r0, r8
 80009ee:	eb64 040e 	sbc.w	r4, r4, lr
 80009f2:	fa04 f707 	lsl.w	r7, r4, r7
 80009f6:	40ca      	lsrs	r2, r1
 80009f8:	40cc      	lsrs	r4, r1
 80009fa:	4317      	orrs	r7, r2
 80009fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000a00:	4618      	mov	r0, r3
 8000a02:	2100      	movs	r1, #0
 8000a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a08:	f1c3 0120 	rsb	r1, r3, #32
 8000a0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a10:	fa20 f201 	lsr.w	r2, r0, r1
 8000a14:	fa25 f101 	lsr.w	r1, r5, r1
 8000a18:	409d      	lsls	r5, r3
 8000a1a:	432a      	orrs	r2, r5
 8000a1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a20:	fa1f fe8c 	uxth.w	lr, ip
 8000a24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a28:	fb07 1510 	mls	r5, r7, r0, r1
 8000a2c:	0c11      	lsrs	r1, r2, #16
 8000a2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a32:	fb00 f50e 	mul.w	r5, r0, lr
 8000a36:	428d      	cmp	r5, r1
 8000a38:	fa04 f403 	lsl.w	r4, r4, r3
 8000a3c:	d908      	bls.n	8000a50 <__udivmoddi4+0x258>
 8000a3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000a42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a46:	d22f      	bcs.n	8000aa8 <__udivmoddi4+0x2b0>
 8000a48:	428d      	cmp	r5, r1
 8000a4a:	d92d      	bls.n	8000aa8 <__udivmoddi4+0x2b0>
 8000a4c:	3802      	subs	r0, #2
 8000a4e:	4461      	add	r1, ip
 8000a50:	1b49      	subs	r1, r1, r5
 8000a52:	b292      	uxth	r2, r2
 8000a54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a58:	fb07 1115 	mls	r1, r7, r5, r1
 8000a5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a60:	fb05 f10e 	mul.w	r1, r5, lr
 8000a64:	4291      	cmp	r1, r2
 8000a66:	d908      	bls.n	8000a7a <__udivmoddi4+0x282>
 8000a68:	eb1c 0202 	adds.w	r2, ip, r2
 8000a6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a70:	d216      	bcs.n	8000aa0 <__udivmoddi4+0x2a8>
 8000a72:	4291      	cmp	r1, r2
 8000a74:	d914      	bls.n	8000aa0 <__udivmoddi4+0x2a8>
 8000a76:	3d02      	subs	r5, #2
 8000a78:	4462      	add	r2, ip
 8000a7a:	1a52      	subs	r2, r2, r1
 8000a7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a80:	e738      	b.n	80008f4 <__udivmoddi4+0xfc>
 8000a82:	4631      	mov	r1, r6
 8000a84:	4630      	mov	r0, r6
 8000a86:	e708      	b.n	800089a <__udivmoddi4+0xa2>
 8000a88:	4639      	mov	r1, r7
 8000a8a:	e6e6      	b.n	800085a <__udivmoddi4+0x62>
 8000a8c:	4610      	mov	r0, r2
 8000a8e:	e6fb      	b.n	8000888 <__udivmoddi4+0x90>
 8000a90:	4548      	cmp	r0, r9
 8000a92:	d2a9      	bcs.n	80009e8 <__udivmoddi4+0x1f0>
 8000a94:	ebb9 0802 	subs.w	r8, r9, r2
 8000a98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a9c:	3b01      	subs	r3, #1
 8000a9e:	e7a3      	b.n	80009e8 <__udivmoddi4+0x1f0>
 8000aa0:	4645      	mov	r5, r8
 8000aa2:	e7ea      	b.n	8000a7a <__udivmoddi4+0x282>
 8000aa4:	462b      	mov	r3, r5
 8000aa6:	e794      	b.n	80009d2 <__udivmoddi4+0x1da>
 8000aa8:	4640      	mov	r0, r8
 8000aaa:	e7d1      	b.n	8000a50 <__udivmoddi4+0x258>
 8000aac:	46d0      	mov	r8, sl
 8000aae:	e77b      	b.n	80009a8 <__udivmoddi4+0x1b0>
 8000ab0:	3d02      	subs	r5, #2
 8000ab2:	4462      	add	r2, ip
 8000ab4:	e732      	b.n	800091c <__udivmoddi4+0x124>
 8000ab6:	4608      	mov	r0, r1
 8000ab8:	e70a      	b.n	80008d0 <__udivmoddi4+0xd8>
 8000aba:	4464      	add	r4, ip
 8000abc:	3802      	subs	r0, #2
 8000abe:	e742      	b.n	8000946 <__udivmoddi4+0x14e>

08000ac0 <__aeabi_idiv0>:
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <HG2_Write_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);

	return reg_value;
}

void HG2_Write_Register(uint8_t addr, uint8_t data){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	460a      	mov	r2, r1
 8000ace:	71fb      	strb	r3, [r7, #7]
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ada:	480c      	ldr	r0, [pc, #48]	; (8000b0c <HG2_Write_Register+0x48>)
 8000adc:	f007 fca4 	bl	8008428 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000ae0:	1df9      	adds	r1, r7, #7
 8000ae2:	2364      	movs	r3, #100	; 0x64
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	480a      	ldr	r0, [pc, #40]	; (8000b10 <HG2_Write_Register+0x4c>)
 8000ae8:	f00e fa20 	bl	800ef2c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000aec:	1db9      	adds	r1, r7, #6
 8000aee:	2364      	movs	r3, #100	; 0x64
 8000af0:	2201      	movs	r2, #1
 8000af2:	4807      	ldr	r0, [pc, #28]	; (8000b10 <HG2_Write_Register+0x4c>)
 8000af4:	f00e fa1a 	bl	800ef2c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 8000af8:	2201      	movs	r2, #1
 8000afa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000afe:	4803      	ldr	r0, [pc, #12]	; (8000b0c <HG2_Write_Register+0x48>)
 8000b00:	f007 fc92 	bl	8008428 <HAL_GPIO_WritePin>

}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	58020c00 	.word	0x58020c00
 8000b10:	24001138 	.word	0x24001138

08000b14 <LG2_Read_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
}



uint8_t LG2_Read_Register(uint8_t addr){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	addr |= (1<<7);
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b2e:	480d      	ldr	r0, [pc, #52]	; (8000b64 <LG2_Read_Register+0x50>)
 8000b30:	f007 fc7a 	bl	8008428 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000b34:	1df9      	adds	r1, r7, #7
 8000b36:	2364      	movs	r3, #100	; 0x64
 8000b38:	2201      	movs	r2, #1
 8000b3a:	480b      	ldr	r0, [pc, #44]	; (8000b68 <LG2_Read_Register+0x54>)
 8000b3c:	f00e f9f6 	bl	800ef2c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &reg_value, 1, 100);
 8000b40:	f107 010f 	add.w	r1, r7, #15
 8000b44:	2364      	movs	r3, #100	; 0x64
 8000b46:	2201      	movs	r2, #1
 8000b48:	4807      	ldr	r0, [pc, #28]	; (8000b68 <LG2_Read_Register+0x54>)
 8000b4a:	f00e fbeb 	bl	800f324 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b54:	4803      	ldr	r0, [pc, #12]	; (8000b64 <LG2_Read_Register+0x50>)
 8000b56:	f007 fc67 	bl	8008428 <HAL_GPIO_WritePin>

	return reg_value;
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	58020c00 	.word	0x58020c00
 8000b68:	24001138 	.word	0x24001138

08000b6c <LG2_Write_Register>:

void LG2_Write_Register(uint8_t addr, uint8_t data){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	460a      	mov	r2, r1
 8000b76:	71fb      	strb	r3, [r7, #7]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b82:	480c      	ldr	r0, [pc, #48]	; (8000bb4 <LG2_Write_Register+0x48>)
 8000b84:	f007 fc50 	bl	8008428 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000b88:	1df9      	adds	r1, r7, #7
 8000b8a:	2364      	movs	r3, #100	; 0x64
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	480a      	ldr	r0, [pc, #40]	; (8000bb8 <LG2_Write_Register+0x4c>)
 8000b90:	f00e f9cc 	bl	800ef2c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000b94:	1db9      	adds	r1, r7, #6
 8000b96:	2364      	movs	r3, #100	; 0x64
 8000b98:	2201      	movs	r2, #1
 8000b9a:	4807      	ldr	r0, [pc, #28]	; (8000bb8 <LG2_Write_Register+0x4c>)
 8000b9c:	f00e f9c6 	bl	800ef2c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ba6:	4803      	ldr	r0, [pc, #12]	; (8000bb4 <LG2_Write_Register+0x48>)
 8000ba8:	f007 fc3e 	bl	8008428 <HAL_GPIO_WritePin>

}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	58020c00 	.word	0x58020c00
 8000bb8:	24001138 	.word	0x24001138

08000bbc <LG2_Get_Gyro_X>:

float LG2_Get_Gyro_X(){
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x22);
 8000bc2:	2022      	movs	r0, #34	; 0x22
 8000bc4:	f7ff ffa6 	bl	8000b14 <LG2_Read_Register>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x23);
 8000bcc:	2023      	movs	r0, #35	; 0x23
 8000bce:	f7ff ffa1 	bl	8000b14 <LG2_Read_Register>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 8000bd6:	79bb      	ldrb	r3, [r7, #6]
 8000bd8:	021b      	lsls	r3, r3, #8
 8000bda:	b21a      	sxth	r2, r3
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	b21b      	sxth	r3, r3
 8000be0:	4313      	orrs	r3, r2
 8000be2:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 8000be4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000be8:	ee07 3a90 	vmov	s15, r3
 8000bec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bf0:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000c14 <LG2_Get_Gyro_X+0x58>
 8000bf4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bf8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000c18 <LG2_Get_Gyro_X+0x5c>
 8000bfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c00:	edc7 7a00 	vstr	s15, [r7]
	return omega;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	ee07 3a90 	vmov	s15, r3
}
 8000c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	46fffe00 	.word	0x46fffe00
 8000c18:	437a0000 	.word	0x437a0000

08000c1c <LG2_Get_Gyro_Y>:

float LG2_Get_Gyro_Y(){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x24);
 8000c22:	2024      	movs	r0, #36	; 0x24
 8000c24:	f7ff ff76 	bl	8000b14 <LG2_Read_Register>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x25);
 8000c2c:	2025      	movs	r0, #37	; 0x25
 8000c2e:	f7ff ff71 	bl	8000b14 <LG2_Read_Register>
 8000c32:	4603      	mov	r3, r0
 8000c34:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 8000c36:	79bb      	ldrb	r3, [r7, #6]
 8000c38:	021b      	lsls	r3, r3, #8
 8000c3a:	b21a      	sxth	r2, r3
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	b21b      	sxth	r3, r3
 8000c40:	4313      	orrs	r3, r2
 8000c42:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 8000c44:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c48:	ee07 3a90 	vmov	s15, r3
 8000c4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c50:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000c74 <LG2_Get_Gyro_Y+0x58>
 8000c54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c58:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000c78 <LG2_Get_Gyro_Y+0x5c>
 8000c5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c60:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	ee07 3a90 	vmov	s15, r3
}
 8000c6a:	eeb0 0a67 	vmov.f32	s0, s15
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	46fffe00 	.word	0x46fffe00
 8000c78:	437a0000 	.word	0x437a0000
 8000c7c:	00000000 	.word	0x00000000

08000c80 <LG2_Get_Gyro_Z>:

float LG2_Get_Gyro_Z(){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x26);
 8000c86:	2026      	movs	r0, #38	; 0x26
 8000c88:	f7ff ff44 	bl	8000b14 <LG2_Read_Register>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x27);
 8000c90:	2027      	movs	r0, #39	; 0x27
 8000c92:	f7ff ff3f 	bl	8000b14 <LG2_Read_Register>
 8000c96:	4603      	mov	r3, r0
 8000c98:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 8000c9a:	79bb      	ldrb	r3, [r7, #6]
 8000c9c:	021b      	lsls	r3, r3, #8
 8000c9e:	b21a      	sxth	r2, r3
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	b21b      	sxth	r3, r3
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767.0) * 250.0;
 8000ca8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000cac:	ee07 3a90 	vmov	s15, r3
 8000cb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cb4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000cb8:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000ce0 <LG2_Get_Gyro_Z+0x60>
 8000cbc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cc0:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000ce8 <LG2_Get_Gyro_Z+0x68>
 8000cc4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000cc8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ccc:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	ee07 3a90 	vmov	s15, r3
}
 8000cd6:	eeb0 0a67 	vmov.f32	s0, s15
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	00000000 	.word	0x00000000
 8000ce4:	40dfffc0 	.word	0x40dfffc0
 8000ce8:	00000000 	.word	0x00000000
 8000cec:	406f4000 	.word	0x406f4000

08000cf0 <setServo>:
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;


void setServo(int servoNum, float angle){
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal =(int)( 3000 + (4000 * (angle/180)));
 8000cfc:	ed97 7a00 	vldr	s14, [r7]
 8000d00:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000d70 <setServo+0x80>
 8000d04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d08:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000d74 <setServo+0x84>
 8000d0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d10:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000d78 <setServo+0x88>
 8000d14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d1c:	ee17 3a90 	vmov	r3, s15
 8000d20:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	3b01      	subs	r3, #1
 8000d26:	2b03      	cmp	r3, #3
 8000d28:	d81a      	bhi.n	8000d60 <setServo+0x70>
 8000d2a:	a201      	add	r2, pc, #4	; (adr r2, 8000d30 <setServo+0x40>)
 8000d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d30:	08000d41 	.word	0x08000d41
 8000d34:	08000d49 	.word	0x08000d49
 8000d38:	08000d51 	.word	0x08000d51
 8000d3c:	08000d59 	.word	0x08000d59
		case 1:
			TIM4->CCR4 = timerVal;
 8000d40:	4a0e      	ldr	r2, [pc, #56]	; (8000d7c <setServo+0x8c>)
 8000d42:	89fb      	ldrh	r3, [r7, #14]
 8000d44:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 8000d46:	e00c      	b.n	8000d62 <setServo+0x72>
		case 2:
			TIM4->CCR3 = timerVal;
 8000d48:	4a0c      	ldr	r2, [pc, #48]	; (8000d7c <setServo+0x8c>)
 8000d4a:	89fb      	ldrh	r3, [r7, #14]
 8000d4c:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 8000d4e:	e008      	b.n	8000d62 <setServo+0x72>
		case 3:
			TIM4->CCR2 = timerVal;
 8000d50:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <setServo+0x8c>)
 8000d52:	89fb      	ldrh	r3, [r7, #14]
 8000d54:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 8000d56:	e004      	b.n	8000d62 <setServo+0x72>
		case 4:
			TIM4->CCR1 = timerVal;
 8000d58:	4a08      	ldr	r2, [pc, #32]	; (8000d7c <setServo+0x8c>)
 8000d5a:	89fb      	ldrh	r3, [r7, #14]
 8000d5c:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8000d5e:	e000      	b.n	8000d62 <setServo+0x72>

		default:
			break;
 8000d60:	bf00      	nop
	}
}
 8000d62:	bf00      	nop
 8000d64:	3714      	adds	r7, #20
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	43340000 	.word	0x43340000
 8000d74:	457a0000 	.word	0x457a0000
 8000d78:	453b8000 	.word	0x453b8000
 8000d7c:	40000800 	.word	0x40000800

08000d80 <setLEDs>:

void setLEDs(void) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08e      	sub	sp, #56	; 0x38
 8000d84:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 8000d86:	2300      	movs	r3, #0
 8000d88:	637b      	str	r3, [r7, #52]	; 0x34
 8000d8a:	e181      	b.n	8001090 <setLEDs+0x310>
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 8000d8c:	4aa1      	ldr	r2, [pc, #644]	; (8001014 <setLEDs+0x294>)
 8000d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000d94:	2b03      	cmp	r3, #3
 8000d96:	f200 8177 	bhi.w	8001088 <setLEDs+0x308>
 8000d9a:	a201      	add	r2, pc, #4	; (adr r2, 8000da0 <setLEDs+0x20>)
 8000d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da0:	08000db1 	.word	0x08000db1
 8000da4:	08000e61 	.word	0x08000e61
 8000da8:	08000f11 	.word	0x08000f11
 8000dac:	08000fc1 	.word	0x08000fc1
		case 0:
			for (int j = 0; j < 3; j++) {
 8000db0:	2300      	movs	r3, #0
 8000db2:	633b      	str	r3, [r7, #48]	; 0x30
 8000db4:	e042      	b.n	8000e3c <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 8000db6:	2300      	movs	r3, #0
 8000db8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000dba:	e039      	b.n	8000e30 <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000dbc:	4996      	ldr	r1, [pc, #600]	; (8001018 <setLEDs+0x298>)
 8000dbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	4413      	add	r3, r2
 8000dc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000dc8:	4413      	add	r3, r2
 8000dca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000dce:	2180      	movs	r1, #128	; 0x80
 8000dd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000dd2:	fa41 f202 	asr.w	r2, r1, r2
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d013      	beq.n	8000e04 <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dde:	00da      	lsls	r2, r3, #3
 8000de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000de2:	18d1      	adds	r1, r2, r3
 8000de4:	4a8b      	ldr	r2, [pc, #556]	; (8001014 <setLEDs+0x294>)
 8000de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000de8:	00db      	lsls	r3, r3, #3
 8000dea:	4413      	add	r3, r2
 8000dec:	685a      	ldr	r2, [r3, #4]
 8000dee:	4613      	mov	r3, r2
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	4413      	add	r3, r2
 8000df4:	00db      	lsls	r3, r3, #3
 8000df6:	440b      	add	r3, r1
 8000df8:	3308      	adds	r3, #8
 8000dfa:	4a88      	ldr	r2, [pc, #544]	; (800101c <setLEDs+0x29c>)
 8000dfc:	213c      	movs	r1, #60	; 0x3c
 8000dfe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000e02:	e012      	b.n	8000e2a <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e06:	00da      	lsls	r2, r3, #3
 8000e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e0a:	18d1      	adds	r1, r2, r3
 8000e0c:	4a81      	ldr	r2, [pc, #516]	; (8001014 <setLEDs+0x294>)
 8000e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e10:	00db      	lsls	r3, r3, #3
 8000e12:	4413      	add	r3, r2
 8000e14:	685a      	ldr	r2, [r3, #4]
 8000e16:	4613      	mov	r3, r2
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	4413      	add	r3, r2
 8000e1c:	00db      	lsls	r3, r3, #3
 8000e1e:	440b      	add	r3, r1
 8000e20:	3308      	adds	r3, #8
 8000e22:	4a7e      	ldr	r2, [pc, #504]	; (800101c <setLEDs+0x29c>)
 8000e24:	211e      	movs	r1, #30
 8000e26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e32:	2b07      	cmp	r3, #7
 8000e34:	ddc2      	ble.n	8000dbc <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 8000e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e38:	3301      	adds	r3, #1
 8000e3a:	633b      	str	r3, [r7, #48]	; 0x30
 8000e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	ddb9      	ble.n	8000db6 <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000e42:	2380      	movs	r3, #128	; 0x80
 8000e44:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e46:	e007      	b.n	8000e58 <setLEDs+0xd8>
				LED_PWM_Data_0[i] = 0;
 8000e48:	4a74      	ldr	r2, [pc, #464]	; (800101c <setLEDs+0x29c>)
 8000e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e54:	3301      	adds	r3, #1
 8000e56:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e5a:	2bb1      	cmp	r3, #177	; 0xb1
 8000e5c:	ddf4      	ble.n	8000e48 <setLEDs+0xc8>
			}
			break;
 8000e5e:	e114      	b.n	800108a <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 8000e60:	2300      	movs	r3, #0
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
 8000e64:	e042      	b.n	8000eec <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 8000e66:	2300      	movs	r3, #0
 8000e68:	623b      	str	r3, [r7, #32]
 8000e6a:	e039      	b.n	8000ee0 <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000e6c:	496a      	ldr	r1, [pc, #424]	; (8001018 <setLEDs+0x298>)
 8000e6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e70:	4613      	mov	r3, r2
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	4413      	add	r3, r2
 8000e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e78:	4413      	add	r3, r2
 8000e7a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e7e:	2180      	movs	r1, #128	; 0x80
 8000e80:	6a3a      	ldr	r2, [r7, #32]
 8000e82:	fa41 f202 	asr.w	r2, r1, r2
 8000e86:	4013      	ands	r3, r2
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d013      	beq.n	8000eb4 <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8e:	00da      	lsls	r2, r3, #3
 8000e90:	6a3b      	ldr	r3, [r7, #32]
 8000e92:	18d1      	adds	r1, r2, r3
 8000e94:	4a5f      	ldr	r2, [pc, #380]	; (8001014 <setLEDs+0x294>)
 8000e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	4413      	add	r3, r2
 8000e9c:	685a      	ldr	r2, [r3, #4]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	4413      	add	r3, r2
 8000ea4:	00db      	lsls	r3, r3, #3
 8000ea6:	440b      	add	r3, r1
 8000ea8:	3308      	adds	r3, #8
 8000eaa:	4a5d      	ldr	r2, [pc, #372]	; (8001020 <setLEDs+0x2a0>)
 8000eac:	213c      	movs	r1, #60	; 0x3c
 8000eae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000eb2:	e012      	b.n	8000eda <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb6:	00da      	lsls	r2, r3, #3
 8000eb8:	6a3b      	ldr	r3, [r7, #32]
 8000eba:	18d1      	adds	r1, r2, r3
 8000ebc:	4a55      	ldr	r2, [pc, #340]	; (8001014 <setLEDs+0x294>)
 8000ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	4413      	add	r3, r2
 8000ec4:	685a      	ldr	r2, [r3, #4]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	4413      	add	r3, r2
 8000ecc:	00db      	lsls	r3, r3, #3
 8000ece:	440b      	add	r3, r1
 8000ed0:	3308      	adds	r3, #8
 8000ed2:	4a53      	ldr	r2, [pc, #332]	; (8001020 <setLEDs+0x2a0>)
 8000ed4:	211e      	movs	r1, #30
 8000ed6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000eda:	6a3b      	ldr	r3, [r7, #32]
 8000edc:	3301      	adds	r3, #1
 8000ede:	623b      	str	r3, [r7, #32]
 8000ee0:	6a3b      	ldr	r3, [r7, #32]
 8000ee2:	2b07      	cmp	r3, #7
 8000ee4:	ddc2      	ble.n	8000e6c <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 8000ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee8:	3301      	adds	r3, #1
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
 8000eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	ddb9      	ble.n	8000e66 <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000ef2:	2380      	movs	r3, #128	; 0x80
 8000ef4:	61fb      	str	r3, [r7, #28]
 8000ef6:	e007      	b.n	8000f08 <setLEDs+0x188>
				LED_PWM_Data_1[i] = 0;
 8000ef8:	4a49      	ldr	r2, [pc, #292]	; (8001020 <setLEDs+0x2a0>)
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	2100      	movs	r1, #0
 8000efe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3301      	adds	r3, #1
 8000f06:	61fb      	str	r3, [r7, #28]
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	2bb1      	cmp	r3, #177	; 0xb1
 8000f0c:	ddf4      	ble.n	8000ef8 <setLEDs+0x178>
			}
			break;
 8000f0e:	e0bc      	b.n	800108a <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 8000f10:	2300      	movs	r3, #0
 8000f12:	61bb      	str	r3, [r7, #24]
 8000f14:	e042      	b.n	8000f9c <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
 8000f1a:	e039      	b.n	8000f90 <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000f1c:	493e      	ldr	r1, [pc, #248]	; (8001018 <setLEDs+0x298>)
 8000f1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f20:	4613      	mov	r3, r2
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	4413      	add	r3, r2
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4413      	add	r3, r2
 8000f2a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f2e:	2180      	movs	r1, #128	; 0x80
 8000f30:	697a      	ldr	r2, [r7, #20]
 8000f32:	fa41 f202 	asr.w	r2, r1, r2
 8000f36:	4013      	ands	r3, r2
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d013      	beq.n	8000f64 <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	00da      	lsls	r2, r3, #3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	18d1      	adds	r1, r2, r3
 8000f44:	4a33      	ldr	r2, [pc, #204]	; (8001014 <setLEDs+0x294>)
 8000f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	4413      	add	r3, r2
 8000f4c:	685a      	ldr	r2, [r3, #4]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	4413      	add	r3, r2
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	440b      	add	r3, r1
 8000f58:	3308      	adds	r3, #8
 8000f5a:	4a32      	ldr	r2, [pc, #200]	; (8001024 <setLEDs+0x2a4>)
 8000f5c:	213c      	movs	r1, #60	; 0x3c
 8000f5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000f62:	e012      	b.n	8000f8a <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	00da      	lsls	r2, r3, #3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	18d1      	adds	r1, r2, r3
 8000f6c:	4a29      	ldr	r2, [pc, #164]	; (8001014 <setLEDs+0x294>)
 8000f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f70:	00db      	lsls	r3, r3, #3
 8000f72:	4413      	add	r3, r2
 8000f74:	685a      	ldr	r2, [r3, #4]
 8000f76:	4613      	mov	r3, r2
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	4413      	add	r3, r2
 8000f7c:	00db      	lsls	r3, r3, #3
 8000f7e:	440b      	add	r3, r1
 8000f80:	3308      	adds	r3, #8
 8000f82:	4a28      	ldr	r2, [pc, #160]	; (8001024 <setLEDs+0x2a4>)
 8000f84:	211e      	movs	r1, #30
 8000f86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	617b      	str	r3, [r7, #20]
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	2b07      	cmp	r3, #7
 8000f94:	ddc2      	ble.n	8000f1c <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	61bb      	str	r3, [r7, #24]
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	ddb9      	ble.n	8000f16 <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000fa2:	2338      	movs	r3, #56	; 0x38
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	e007      	b.n	8000fb8 <setLEDs+0x238>
				LED_PWM_Data_2[i] = 0;
 8000fa8:	4a1e      	ldr	r2, [pc, #120]	; (8001024 <setLEDs+0x2a4>)
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	2100      	movs	r1, #0
 8000fae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	2b69      	cmp	r3, #105	; 0x69
 8000fbc:	ddf4      	ble.n	8000fa8 <setLEDs+0x228>
			}
			break;
 8000fbe:	e064      	b.n	800108a <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	e04e      	b.n	8001064 <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	e045      	b.n	8001058 <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000fcc:	4912      	ldr	r1, [pc, #72]	; (8001018 <setLEDs+0x298>)
 8000fce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	4413      	add	r3, r2
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	4413      	add	r3, r2
 8000fda:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000fde:	2180      	movs	r1, #128	; 0x80
 8000fe0:	68ba      	ldr	r2, [r7, #8]
 8000fe2:	fa41 f202 	asr.w	r2, r1, r2
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d01f      	beq.n	800102c <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	00da      	lsls	r2, r3, #3
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	18d1      	adds	r1, r2, r3
 8000ff4:	4a07      	ldr	r2, [pc, #28]	; (8001014 <setLEDs+0x294>)
 8000ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	4413      	add	r3, r2
 8000ffc:	685a      	ldr	r2, [r3, #4]
 8000ffe:	4613      	mov	r3, r2
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	4413      	add	r3, r2
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	440b      	add	r3, r1
 8001008:	3308      	adds	r3, #8
 800100a:	4a07      	ldr	r2, [pc, #28]	; (8001028 <setLEDs+0x2a8>)
 800100c:	213c      	movs	r1, #60	; 0x3c
 800100e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001012:	e01e      	b.n	8001052 <setLEDs+0x2d2>
 8001014:	0801c390 	.word	0x0801c390
 8001018:	24000cc8 	.word	0x24000cc8
 800101c:	240003e8 	.word	0x240003e8
 8001020:	240006b0 	.word	0x240006b0
 8001024:	24000978 	.word	0x24000978
 8001028:	24000b20 	.word	0x24000b20
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	00da      	lsls	r2, r3, #3
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	18d1      	adds	r1, r2, r3
 8001034:	4a26      	ldr	r2, [pc, #152]	; (80010d0 <setLEDs+0x350>)
 8001036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	4413      	add	r3, r2
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	4613      	mov	r3, r2
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	4413      	add	r3, r2
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	440b      	add	r3, r1
 8001048:	3308      	adds	r3, #8
 800104a:	4a22      	ldr	r2, [pc, #136]	; (80010d4 <setLEDs+0x354>)
 800104c:	211e      	movs	r1, #30
 800104e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	3301      	adds	r3, #1
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	2b07      	cmp	r3, #7
 800105c:	ddb6      	ble.n	8000fcc <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	3301      	adds	r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2b02      	cmp	r3, #2
 8001068:	ddad      	ble.n	8000fc6 <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 800106a:	2338      	movs	r3, #56	; 0x38
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	e007      	b.n	8001080 <setLEDs+0x300>
				LED_PWM_Data_3[i] = 0;
 8001070:	4a18      	ldr	r2, [pc, #96]	; (80010d4 <setLEDs+0x354>)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2100      	movs	r1, #0
 8001076:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	3301      	adds	r3, #1
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b69      	cmp	r3, #105	; 0x69
 8001084:	ddf4      	ble.n	8001070 <setLEDs+0x2f0>
			}
			break;
 8001086:	e000      	b.n	800108a <setLEDs+0x30a>
		default:
			break;
 8001088:	bf00      	nop
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 800108a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800108c:	3301      	adds	r3, #1
 800108e:	637b      	str	r3, [r7, #52]	; 0x34
 8001090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001092:	2b0d      	cmp	r3, #13
 8001094:	f77f ae7a 	ble.w	8000d8c <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0, (NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
 8001098:	23b2      	movs	r3, #178	; 0xb2
 800109a:	4a0f      	ldr	r2, [pc, #60]	; (80010d8 <setLEDs+0x358>)
 800109c:	210c      	movs	r1, #12
 800109e:	480f      	ldr	r0, [pc, #60]	; (80010dc <setLEDs+0x35c>)
 80010a0:	f00e fd2c 	bl	800fafc <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1, (NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
 80010a4:	23b2      	movs	r3, #178	; 0xb2
 80010a6:	4a0e      	ldr	r2, [pc, #56]	; (80010e0 <setLEDs+0x360>)
 80010a8:	2108      	movs	r1, #8
 80010aa:	480e      	ldr	r0, [pc, #56]	; (80010e4 <setLEDs+0x364>)
 80010ac:	f00e fd26 	bl	800fafc <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2, (NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
 80010b0:	236a      	movs	r3, #106	; 0x6a
 80010b2:	4a0d      	ldr	r2, [pc, #52]	; (80010e8 <setLEDs+0x368>)
 80010b4:	2104      	movs	r1, #4
 80010b6:	480d      	ldr	r0, [pc, #52]	; (80010ec <setLEDs+0x36c>)
 80010b8:	f00e fd20 	bl	800fafc <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3, (NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3
 80010bc:	236a      	movs	r3, #106	; 0x6a
 80010be:	4a05      	ldr	r2, [pc, #20]	; (80010d4 <setLEDs+0x354>)
 80010c0:	2100      	movs	r1, #0
 80010c2:	480a      	ldr	r0, [pc, #40]	; (80010ec <setLEDs+0x36c>)
 80010c4:	f00e fd1a 	bl	800fafc <HAL_TIM_PWM_Start_DMA>

}
 80010c8:	bf00      	nop
 80010ca:	3738      	adds	r7, #56	; 0x38
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	0801c390 	.word	0x0801c390
 80010d4:	24000b20 	.word	0x24000b20
 80010d8:	240003e8 	.word	0x240003e8
 80010dc:	2400132c 	.word	0x2400132c
 80010e0:	240006b0 	.word	0x240006b0
 80010e4:	24001248 	.word	0x24001248
 80010e8:	24000978 	.word	0x24000978
 80010ec:	24001294 	.word	0x24001294

080010f0 <LoRA_Read_Register>:
	}
}



uint8_t LoRA_Read_Register(uint8_t addr){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001100:	480d      	ldr	r0, [pc, #52]	; (8001138 <LoRA_Read_Register+0x48>)
 8001102:	f007 f991 	bl	8008428 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8001106:	1df9      	adds	r1, r7, #7
 8001108:	2364      	movs	r3, #100	; 0x64
 800110a:	2201      	movs	r2, #1
 800110c:	480b      	ldr	r0, [pc, #44]	; (800113c <LoRA_Read_Register+0x4c>)
 800110e:	f00d ff0d 	bl	800ef2c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 8001112:	f107 010f 	add.w	r1, r7, #15
 8001116:	2364      	movs	r3, #100	; 0x64
 8001118:	2201      	movs	r2, #1
 800111a:	4808      	ldr	r0, [pc, #32]	; (800113c <LoRA_Read_Register+0x4c>)
 800111c:	f00e f902 	bl	800f324 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8001120:	2201      	movs	r2, #1
 8001122:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001126:	4804      	ldr	r0, [pc, #16]	; (8001138 <LoRA_Read_Register+0x48>)
 8001128:	f007 f97e 	bl	8008428 <HAL_GPIO_WritePin>

	return reg_value;
 800112c:	7bfb      	ldrb	r3, [r7, #15]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	58020000 	.word	0x58020000
 800113c:	240011c0 	.word	0x240011c0

08001140 <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data){
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	460a      	mov	r2, r1
 800114a:	71fb      	strb	r3, [r7, #7]
 800114c:	4613      	mov	r3, r2
 800114e:	71bb      	strb	r3, [r7, #6]
	addr |= (1<<7);
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001156:	b2db      	uxtb	r3, r3
 8001158:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 800115a:	2200      	movs	r2, #0
 800115c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001160:	480c      	ldr	r0, [pc, #48]	; (8001194 <LoRA_Write_Register+0x54>)
 8001162:	f007 f961 	bl	8008428 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8001166:	1df9      	adds	r1, r7, #7
 8001168:	2364      	movs	r3, #100	; 0x64
 800116a:	2201      	movs	r2, #1
 800116c:	480a      	ldr	r0, [pc, #40]	; (8001198 <LoRA_Write_Register+0x58>)
 800116e:	f00d fedd 	bl	800ef2c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8001172:	1db9      	adds	r1, r7, #6
 8001174:	2364      	movs	r3, #100	; 0x64
 8001176:	2201      	movs	r2, #1
 8001178:	4807      	ldr	r0, [pc, #28]	; (8001198 <LoRA_Write_Register+0x58>)
 800117a:	f00d fed7 	bl	800ef2c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 800117e:	2201      	movs	r2, #1
 8001180:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001184:	4803      	ldr	r0, [pc, #12]	; (8001194 <LoRA_Write_Register+0x54>)
 8001186:	f007 f94f 	bl	8008428 <HAL_GPIO_WritePin>

}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	58020000 	.word	0x58020000
 8001198:	240011c0 	.word	0x240011c0

0800119c <LoRA_sleep>:


void LoRA_sleep(void){
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 80011a0:	2180      	movs	r1, #128	; 0x80
 80011a2:	2001      	movs	r0, #1
 80011a4:	f7ff ffcc 	bl	8001140 <LoRA_Write_Register>
}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}

080011ac <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency){
 80011ac:	b5b0      	push	{r4, r5, r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 80011b4:	6879      	ldr	r1, [r7, #4]
 80011b6:	17c8      	asrs	r0, r1, #31
 80011b8:	460a      	mov	r2, r1
 80011ba:	4603      	mov	r3, r0
 80011bc:	1355      	asrs	r5, r2, #13
 80011be:	04d4      	lsls	r4, r2, #19
 80011c0:	4a18      	ldr	r2, [pc, #96]	; (8001224 <LoRA_set_frequency+0x78>)
 80011c2:	f04f 0300 	mov.w	r3, #0
 80011c6:	4620      	mov	r0, r4
 80011c8:	4629      	mov	r1, r5
 80011ca:	f7ff fac5 	bl	8000758 <__aeabi_uldivmod>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t)(frf >> 16));
 80011d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	f04f 0300 	mov.w	r3, #0
 80011e2:	0c02      	lsrs	r2, r0, #16
 80011e4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80011e8:	0c0b      	lsrs	r3, r1, #16
 80011ea:	b2d3      	uxtb	r3, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	2006      	movs	r0, #6
 80011f0:	f7ff ffa6 	bl	8001140 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t)(frf >> 8));
 80011f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011f8:	f04f 0200 	mov.w	r2, #0
 80011fc:	f04f 0300 	mov.w	r3, #0
 8001200:	0a02      	lsrs	r2, r0, #8
 8001202:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001206:	0a0b      	lsrs	r3, r1, #8
 8001208:	b2d3      	uxtb	r3, r2
 800120a:	4619      	mov	r1, r3
 800120c:	2007      	movs	r0, #7
 800120e:	f7ff ff97 	bl	8001140 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8001212:	7a3b      	ldrb	r3, [r7, #8]
 8001214:	4619      	mov	r1, r3
 8001216:	2008      	movs	r0, #8
 8001218:	f7ff ff92 	bl	8001140 <LoRA_Write_Register>
}
 800121c:	bf00      	nop
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bdb0      	pop	{r4, r5, r7, pc}
 8001224:	01e84800 	.word	0x01e84800

08001228 <LoRA_idle>:

void LoRA_idle(){
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 800122c:	2181      	movs	r1, #129	; 0x81
 800122e:	2001      	movs	r0, #1
 8001230:	f7ff ff86 	bl	8001140 <LoRA_Write_Register>
}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}

08001238 <LoRA_setOCP>:

void LoRA_setOCP(uint8_t mA){
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
	  uint8_t ocpTrim = 27;
 8001242:	231b      	movs	r3, #27
 8001244:	73fb      	strb	r3, [r7, #15]

	  if (mA <= 120) {
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	2b78      	cmp	r3, #120	; 0x78
 800124a:	d809      	bhi.n	8001260 <LoRA_setOCP+0x28>
	    ocpTrim = (mA - 45) / 5;
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	3b2d      	subs	r3, #45	; 0x2d
 8001250:	4a11      	ldr	r2, [pc, #68]	; (8001298 <LoRA_setOCP+0x60>)
 8001252:	fb82 1203 	smull	r1, r2, r2, r3
 8001256:	1052      	asrs	r2, r2, #1
 8001258:	17db      	asrs	r3, r3, #31
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	73fb      	strb	r3, [r7, #15]
 800125e:	e00b      	b.n	8001278 <LoRA_setOCP+0x40>
	  } else if (mA <=240) {
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	2bf0      	cmp	r3, #240	; 0xf0
 8001264:	d808      	bhi.n	8001278 <LoRA_setOCP+0x40>
	    ocpTrim = (mA + 30) / 10;
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	331e      	adds	r3, #30
 800126a:	4a0b      	ldr	r2, [pc, #44]	; (8001298 <LoRA_setOCP+0x60>)
 800126c:	fb82 1203 	smull	r1, r2, r2, r3
 8001270:	1092      	asrs	r2, r2, #2
 8001272:	17db      	asrs	r3, r3, #31
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	73fb      	strb	r3, [r7, #15]
	  }

	  LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	f003 031f 	and.w	r3, r3, #31
 800127e:	b2db      	uxtb	r3, r3
 8001280:	f043 0320 	orr.w	r3, r3, #32
 8001284:	b2db      	uxtb	r3, r3
 8001286:	4619      	mov	r1, r3
 8001288:	200b      	movs	r0, #11
 800128a:	f7ff ff59 	bl	8001140 <LoRA_Write_Register>
}
 800128e:	bf00      	nop
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	66666667 	.word	0x66666667

0800129c <LoRA_setTxPower>:

void LoRA_setTxPower(int level){
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
    // PA BOOST
    if (level > 17) {
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b11      	cmp	r3, #17
 80012a8:	dd0f      	ble.n	80012ca <LoRA_setTxPower+0x2e>
      if (level > 20) {
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b14      	cmp	r3, #20
 80012ae:	dd01      	ble.n	80012b4 <LoRA_setTxPower+0x18>
        level = 20;
 80012b0:	2314      	movs	r3, #20
 80012b2:	607b      	str	r3, [r7, #4]
      }

      // subtract 3 from level, so 18 - 20 maps to 15 - 17
      level -= 3;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3b03      	subs	r3, #3
 80012b8:	607b      	str	r3, [r7, #4]

      // High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
      LoRA_Write_Register(REG_PA_DAC, 0x87);
 80012ba:	2187      	movs	r1, #135	; 0x87
 80012bc:	204d      	movs	r0, #77	; 0x4d
 80012be:	f7ff ff3f 	bl	8001140 <LoRA_Write_Register>
      LoRA_setOCP(140);
 80012c2:	208c      	movs	r0, #140	; 0x8c
 80012c4:	f7ff ffb8 	bl	8001238 <LoRA_setOCP>
 80012c8:	e00b      	b.n	80012e2 <LoRA_setTxPower+0x46>
    } else {
      if (level < 2) {
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	dc01      	bgt.n	80012d4 <LoRA_setTxPower+0x38>
        level = 2;
 80012d0:	2302      	movs	r3, #2
 80012d2:	607b      	str	r3, [r7, #4]
      }
      //Default value PA_HF/LF or +17dBm
      LoRA_Write_Register(REG_PA_DAC, 0x84);
 80012d4:	2184      	movs	r1, #132	; 0x84
 80012d6:	204d      	movs	r0, #77	; 0x4d
 80012d8:	f7ff ff32 	bl	8001140 <LoRA_Write_Register>
      LoRA_setOCP(100);
 80012dc:	2064      	movs	r0, #100	; 0x64
 80012de:	f7ff ffab 	bl	8001238 <LoRA_setOCP>
    }

    LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	3b02      	subs	r3, #2
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	b25b      	sxtb	r3, r3
 80012ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012f0:	b25b      	sxtb	r3, r3
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	4619      	mov	r1, r3
 80012f6:	2009      	movs	r0, #9
 80012f8:	f7ff ff22 	bl	8001140 <LoRA_Write_Register>
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <LoRA_explicit_header_mode>:

void LoRA_explicit_header_mode(){
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_MODEM_CONFIG_1, LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
 8001308:	201d      	movs	r0, #29
 800130a:	f7ff fef1 	bl	80010f0 <LoRA_Read_Register>
 800130e:	4603      	mov	r3, r0
 8001310:	f023 0301 	bic.w	r3, r3, #1
 8001314:	b2db      	uxtb	r3, r3
 8001316:	4619      	mov	r1, r3
 8001318:	201d      	movs	r0, #29
 800131a:	f7ff ff11 	bl	8001140 <LoRA_Write_Register>
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <LoRA_begin>:

void LoRA_begin(long frequency){
 8001324:	b580      	push	{r7, lr}
 8001326:	b09c      	sub	sp, #112	; 0x70
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 800132c:	2201      	movs	r2, #1
 800132e:	2101      	movs	r1, #1
 8001330:	4822      	ldr	r0, [pc, #136]	; (80013bc <LoRA_begin+0x98>)
 8001332:	f007 f879 	bl	8008428 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8001336:	2201      	movs	r2, #1
 8001338:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800133c:	4820      	ldr	r0, [pc, #128]	; (80013c0 <LoRA_begin+0x9c>)
 800133e:	f007 f873 	bl	8008428 <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 8001342:	2042      	movs	r0, #66	; 0x42
 8001344:	f7ff fed4 	bl	80010f0 <LoRA_Read_Register>
 8001348:	4603      	mov	r3, r0
 800134a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    char data_debug[100];
	sprintf( data_debug,  "%x\n", version);
 800134e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001352:	f107 0308 	add.w	r3, r7, #8
 8001356:	491b      	ldr	r1, [pc, #108]	; (80013c4 <LoRA_begin+0xa0>)
 8001358:	4618      	mov	r0, r3
 800135a:	f016 ff3d 	bl	80181d8 <siprintf>
	CDC_Transmit_HS(data_debug, strlen(data_debug));
 800135e:	f107 0308 	add.w	r3, r7, #8
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff f834 	bl	80003d0 <strlen>
 8001368:	4602      	mov	r2, r0
 800136a:	f107 0308 	add.w	r3, r7, #8
 800136e:	4611      	mov	r1, r2
 8001370:	4618      	mov	r0, r3
 8001372:	f015 fbdb 	bl	8016b2c <CDC_Transmit_HS>

	LoRA_sleep();
 8001376:	f7ff ff11 	bl	800119c <LoRA_sleep>
	LoRA_set_frequency(868000000);
 800137a:	4813      	ldr	r0, [pc, #76]	; (80013c8 <LoRA_begin+0xa4>)
 800137c:	f7ff ff16 	bl	80011ac <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 8001380:	2100      	movs	r1, #0
 8001382:	200f      	movs	r0, #15
 8001384:	f7ff fedc 	bl	8001140 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 8001388:	2100      	movs	r1, #0
 800138a:	200e      	movs	r0, #14
 800138c:	f7ff fed8 	bl	8001140 <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 8001390:	200c      	movs	r0, #12
 8001392:	f7ff fead 	bl	80010f0 <LoRA_Read_Register>
 8001396:	4603      	mov	r3, r0
 8001398:	f043 0303 	orr.w	r3, r3, #3
 800139c:	b2db      	uxtb	r3, r3
 800139e:	4619      	mov	r1, r3
 80013a0:	200c      	movs	r0, #12
 80013a2:	f7ff fecd 	bl	8001140 <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 80013a6:	2104      	movs	r1, #4
 80013a8:	2026      	movs	r0, #38	; 0x26
 80013aa:	f7ff fec9 	bl	8001140 <LoRA_Write_Register>

	LoRA_setTxPower(17);
 80013ae:	2011      	movs	r0, #17
 80013b0:	f7ff ff74 	bl	800129c <LoRA_setTxPower>

}
 80013b4:	bf00      	nop
 80013b6:	3770      	adds	r7, #112	; 0x70
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	58020c00 	.word	0x58020c00
 80013c0:	58020000 	.word	0x58020000
 80013c4:	0801c218 	.word	0x0801c218
 80013c8:	33bca100 	.word	0x33bca100

080013cc <LoRA_beginPacket>:


void LoRA_beginPacket(){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
	LoRA_explicit_header_mode();
 80013d0:	f7ff ff98 	bl	8001304 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 80013d4:	2100      	movs	r1, #0
 80013d6:	200d      	movs	r0, #13
 80013d8:	f7ff feb2 	bl	8001140 <LoRA_Write_Register>
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, 0);
 80013dc:	2100      	movs	r1, #0
 80013de:	2022      	movs	r0, #34	; 0x22
 80013e0:	f7ff feae 	bl	8001140 <LoRA_Write_Register>
}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <LoRA_endPacket>:

void LoRA_endPacket(){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 80013ee:	2183      	movs	r1, #131	; 0x83
 80013f0:	2001      	movs	r0, #1
 80013f2:	f7ff fea5 	bl	8001140 <LoRA_Write_Register>

	while((LoRA_Read_Register(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0){
 80013f6:	bf00      	nop
 80013f8:	2012      	movs	r0, #18
 80013fa:	f7ff fe79 	bl	80010f0 <LoRA_Read_Register>
 80013fe:	4603      	mov	r3, r0
 8001400:	f003 0308 	and.w	r3, r3, #8
 8001404:	2b00      	cmp	r3, #0
 8001406:	d0f7      	beq.n	80013f8 <LoRA_endPacket+0x10>

	}

	LoRA_Write_Register(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8001408:	2108      	movs	r1, #8
 800140a:	2012      	movs	r0, #18
 800140c:	f7ff fe98 	bl	8001140 <LoRA_Write_Register>

	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 8001410:	2012      	movs	r0, #18
 8001412:	f7ff fe6d 	bl	80010f0 <LoRA_Read_Register>
 8001416:	4603      	mov	r3, r0
 8001418:	607b      	str	r3, [r7, #4]

	LoRA_explicit_header_mode();
 800141a:	f7ff ff73 	bl	8001304 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	4619      	mov	r1, r3
 8001424:	2012      	movs	r0, #18
 8001426:	f7ff fe8b 	bl	8001140 <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001430:	2b00      	cmp	r3, #0
 8001432:	d00f      	beq.n	8001454 <LoRA_endPacket+0x6c>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f003 0320 	and.w	r3, r3, #32
 800143a:	2b00      	cmp	r3, #0
 800143c:	d10a      	bne.n	8001454 <LoRA_endPacket+0x6c>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 800143e:	2010      	movs	r0, #16
 8001440:	f7ff fe56 	bl	80010f0 <LoRA_Read_Register>
 8001444:	4603      	mov	r3, r0
 8001446:	4619      	mov	r1, r3
 8001448:	200d      	movs	r0, #13
 800144a:	f7ff fe79 	bl	8001140 <LoRA_Write_Register>
		LoRA_idle();
 800144e:	f7ff feeb 	bl	8001228 <LoRA_idle>
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)){
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
	}
}
 8001452:	e00d      	b.n	8001470 <LoRA_endPacket+0x88>
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)){
 8001454:	2001      	movs	r0, #1
 8001456:	f7ff fe4b 	bl	80010f0 <LoRA_Read_Register>
 800145a:	4603      	mov	r3, r0
 800145c:	2b86      	cmp	r3, #134	; 0x86
 800145e:	d007      	beq.n	8001470 <LoRA_endPacket+0x88>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8001460:	2100      	movs	r1, #0
 8001462:	200d      	movs	r0, #13
 8001464:	f7ff fe6c 	bl	8001140 <LoRA_Write_Register>
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 8001468:	2186      	movs	r1, #134	; 0x86
 800146a:	2001      	movs	r0, #1
 800146c:	f7ff fe68 	bl	8001140 <LoRA_Write_Register>
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <LoRA_parsePacket>:


int LoRA_parsePacket(){
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
	int packetLenght = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 8001482:	2012      	movs	r0, #18
 8001484:	f7ff fe34 	bl	80010f0 <LoRA_Read_Register>
 8001488:	4603      	mov	r3, r0
 800148a:	603b      	str	r3, [r7, #0]

	LoRA_explicit_header_mode();
 800148c:	f7ff ff3a 	bl	8001304 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	b2db      	uxtb	r3, r3
 8001494:	4619      	mov	r1, r3
 8001496:	2012      	movs	r0, #18
 8001498:	f7ff fe52 	bl	8001140 <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d014      	beq.n	80014d0 <LoRA_parsePacket+0x58>
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	f003 0320 	and.w	r3, r3, #32
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d10f      	bne.n	80014d0 <LoRA_parsePacket+0x58>
		packetLenght = LoRA_Read_Register(REG_RX_NB_BYTES);
 80014b0:	2013      	movs	r0, #19
 80014b2:	f7ff fe1d 	bl	80010f0 <LoRA_Read_Register>
 80014b6:	4603      	mov	r3, r0
 80014b8:	607b      	str	r3, [r7, #4]
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 80014ba:	2010      	movs	r0, #16
 80014bc:	f7ff fe18 	bl	80010f0 <LoRA_Read_Register>
 80014c0:	4603      	mov	r3, r0
 80014c2:	4619      	mov	r1, r3
 80014c4:	200d      	movs	r0, #13
 80014c6:	f7ff fe3b 	bl	8001140 <LoRA_Write_Register>
		LoRA_idle();
 80014ca:	f7ff fead 	bl	8001228 <LoRA_idle>
 80014ce:	e00d      	b.n	80014ec <LoRA_parsePacket+0x74>
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)){
 80014d0:	2001      	movs	r0, #1
 80014d2:	f7ff fe0d 	bl	80010f0 <LoRA_Read_Register>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b86      	cmp	r3, #134	; 0x86
 80014da:	d007      	beq.n	80014ec <LoRA_parsePacket+0x74>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 80014dc:	2100      	movs	r1, #0
 80014de:	200d      	movs	r0, #13
 80014e0:	f7ff fe2e 	bl	8001140 <LoRA_Write_Register>

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 80014e4:	2186      	movs	r1, #134	; 0x86
 80014e6:	2001      	movs	r0, #1
 80014e8:	f7ff fe2a 	bl	8001140 <LoRA_Write_Register>
	}
	return packetLenght;
 80014ec:	687b      	ldr	r3, [r7, #4]

}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <LoRA_sendPacket>:

void LoRA_sendPacket(char * data){
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b084      	sub	sp, #16
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
    LoRA_beginPacket();
 80014fe:	f7ff ff65 	bl	80013cc <LoRA_beginPacket>
    for(int i = 0; i < strlen(data); i++){
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	e00a      	b.n	800151e <LoRA_sendPacket+0x28>
    	LoRA_Write_Register(REG_FIFO, data[i]);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	4413      	add	r3, r2
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	4619      	mov	r1, r3
 8001512:	2000      	movs	r0, #0
 8001514:	f7ff fe14 	bl	8001140 <LoRA_Write_Register>
    for(int i = 0; i < strlen(data); i++){
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	3301      	adds	r3, #1
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7fe ff56 	bl	80003d0 <strlen>
 8001524:	4602      	mov	r2, r0
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	429a      	cmp	r2, r3
 800152a:	d8ed      	bhi.n	8001508 <LoRA_sendPacket+0x12>
    }
    LoRA_Write_Register(REG_PAYLOAD_LENGTH, strlen(data));
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7fe ff4f 	bl	80003d0 <strlen>
 8001532:	4603      	mov	r3, r0
 8001534:	b2db      	uxtb	r3, r3
 8001536:	4619      	mov	r1, r3
 8001538:	2022      	movs	r0, #34	; 0x22
 800153a:	f7ff fe01 	bl	8001140 <LoRA_Write_Register>
    LoRA_endPacket();
 800153e:	f7ff ff53 	bl	80013e8 <LoRA_endPacket>
}
 8001542:	bf00      	nop
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <disarm>:
	int status = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
	return status;
}

int disarm(char* state)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 8001554:	2200      	movs	r2, #0
 8001556:	2102      	movs	r1, #2
 8001558:	4827      	ldr	r0, [pc, #156]	; (80015f8 <disarm+0xac>)
 800155a:	f006 ff65 	bl	8008428 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);
 800155e:	2200      	movs	r2, #0
 8001560:	2104      	movs	r1, #4
 8001562:	4825      	ldr	r0, [pc, #148]	; (80015f8 <disarm+0xac>)
 8001564:	f006 ff60 	bl	8008428 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 8001568:	2200      	movs	r2, #0
 800156a:	2102      	movs	r1, #2
 800156c:	4823      	ldr	r0, [pc, #140]	; (80015fc <disarm+0xb0>)
 800156e:	f006 ff5b 	bl	8008428 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001578:	4821      	ldr	r0, [pc, #132]	; (8001600 <disarm+0xb4>)
 800157a:	f006 ff55 	bl	8008428 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 800157e:	2200      	movs	r2, #0
 8001580:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001584:	481e      	ldr	r0, [pc, #120]	; (8001600 <disarm+0xb4>)
 8001586:	f006 ff4f 	bl	8008428 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001590:	481b      	ldr	r0, [pc, #108]	; (8001600 <disarm+0xb4>)
 8001592:	f006 ff49 	bl	8008428 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	2102      	movs	r1, #2
 800159a:	481a      	ldr	r0, [pc, #104]	; (8001604 <disarm+0xb8>)
 800159c:	f006 ff44 	bl	8008428 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 80015a0:	2200      	movs	r2, #0
 80015a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015a6:	4818      	ldr	r0, [pc, #96]	; (8001608 <disarm+0xbc>)
 80015a8:	f006 ff3e 	bl	8008428 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 80015ac:	2200      	movs	r2, #0
 80015ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015b2:	4815      	ldr	r0, [pc, #84]	; (8001608 <disarm+0xbc>)
 80015b4:	f006 ff38 	bl	8008428 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 80015b8:	2200      	movs	r2, #0
 80015ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015be:	4812      	ldr	r0, [pc, #72]	; (8001608 <disarm+0xbc>)
 80015c0:	f006 ff32 	bl	8008428 <HAL_GPIO_WritePin>

  LED_Color_Data[7][0] = 255;
 80015c4:	4b11      	ldr	r3, [pc, #68]	; (800160c <disarm+0xc0>)
 80015c6:	22ff      	movs	r2, #255	; 0xff
 80015c8:	655a      	str	r2, [r3, #84]	; 0x54
  LED_Color_Data[7][1] = 0;
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <disarm+0xc0>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	659a      	str	r2, [r3, #88]	; 0x58
  LED_Color_Data[7][2] = 0;
 80015d0:	4b0e      	ldr	r3, [pc, #56]	; (800160c <disarm+0xc0>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	65da      	str	r2, [r3, #92]	; 0x5c
  setLEDs();
 80015d6:	f7ff fbd3 	bl	8000d80 <setLEDs>

  strcpy(state,"DISARMED");
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	490c      	ldr	r1, [pc, #48]	; (8001610 <disarm+0xc4>)
 80015de:	461a      	mov	r2, r3
 80015e0:	460b      	mov	r3, r1
 80015e2:	cb03      	ldmia	r3!, {r0, r1}
 80015e4:	6010      	str	r0, [r2, #0]
 80015e6:	6051      	str	r1, [r2, #4]
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	7213      	strb	r3, [r2, #8]
  return 0;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	58020000 	.word	0x58020000
 80015fc:	58020400 	.word	0x58020400
 8001600:	58021400 	.word	0x58021400
 8001604:	58021800 	.word	0x58021800
 8001608:	58021000 	.word	0x58021000
 800160c:	24000cc8 	.word	0x24000cc8
 8001610:	0801c21c 	.word	0x0801c21c

08001614 <recv_packet>:
  setLEDs();
  return 0;
}

int recv_packet(char* LoRA_data, int max_length)
{
 8001614:	b590      	push	{r4, r7, lr}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  int packet_length = LoRA_parsePacket();
 800161e:	f7ff ff2b 	bl	8001478 <LoRA_parsePacket>
 8001622:	60b8      	str	r0, [r7, #8]
  if(max_length-1 < packet_length) //-1 for the null terminator
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	429a      	cmp	r2, r3
 800162a:	dc01      	bgt.n	8001630 <recv_packet+0x1c>
  {
    return 0;
 800162c:	2300      	movs	r3, #0
 800162e:	e01c      	b.n	800166a <recv_packet+0x56>
  }
  if(packet_length){
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d018      	beq.n	8001668 <recv_packet+0x54>
    for(int i = 0; i < packet_length; i++){
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	e00a      	b.n	8001652 <recv_packet+0x3e>
      LoRA_data[i] = LoRA_Read_Register(0x00);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	18d4      	adds	r4, r2, r3
 8001642:	2000      	movs	r0, #0
 8001644:	f7ff fd54 	bl	80010f0 <LoRA_Read_Register>
 8001648:	4603      	mov	r3, r0
 800164a:	7023      	strb	r3, [r4, #0]
    for(int i = 0; i < packet_length; i++){
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	3301      	adds	r3, #1
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	429a      	cmp	r2, r3
 8001658:	dbf0      	blt.n	800163c <recv_packet+0x28>
    }
    LoRA_data[packet_length] = '\0';
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	4413      	add	r3, r2
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
    return packet_length;
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	e000      	b.n	800166a <recv_packet+0x56>
  }
  else{
    return 0;
 8001668:	2300      	movs	r3, #0
  }
}
 800166a:	4618      	mov	r0, r3
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	bd90      	pop	{r4, r7, pc}

08001672 <reliable_send_packet>:

void reliable_send_packet(char *LoRA_data) {
 8001672:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001676:	b087      	sub	sp, #28
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	466b      	mov	r3, sp
 800167e:	461e      	mov	r6, r3
	uint16_t length = strlen(LoRA_data) + 1; //+1 for the \0
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7fe fea5 	bl	80003d0 <strlen>
 8001686:	4603      	mov	r3, r0
 8001688:	b29b      	uxth	r3, r3
 800168a:	3301      	adds	r3, #1
 800168c:	827b      	strh	r3, [r7, #18]
	char acknowledge[length];
 800168e:	8a79      	ldrh	r1, [r7, #18]
 8001690:	460b      	mov	r3, r1
 8001692:	3b01      	subs	r3, #1
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	b28b      	uxth	r3, r1
 8001698:	2200      	movs	r2, #0
 800169a:	4698      	mov	r8, r3
 800169c:	4691      	mov	r9, r2
 800169e:	f04f 0200 	mov.w	r2, #0
 80016a2:	f04f 0300 	mov.w	r3, #0
 80016a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016b2:	b28b      	uxth	r3, r1
 80016b4:	2200      	movs	r2, #0
 80016b6:	461c      	mov	r4, r3
 80016b8:	4615      	mov	r5, r2
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	f04f 0300 	mov.w	r3, #0
 80016c2:	00eb      	lsls	r3, r5, #3
 80016c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016c8:	00e2      	lsls	r2, r4, #3
 80016ca:	460b      	mov	r3, r1
 80016cc:	3307      	adds	r3, #7
 80016ce:	08db      	lsrs	r3, r3, #3
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	ebad 0d03 	sub.w	sp, sp, r3
 80016d6:	466b      	mov	r3, sp
 80016d8:	3300      	adds	r3, #0
 80016da:	60bb      	str	r3, [r7, #8]
	uint32_t lastTime = HAL_GetTick();
 80016dc:	f002 fbe6 	bl	8003eac <HAL_GetTick>
 80016e0:	6178      	str	r0, [r7, #20]
	LoRA_sendPacket(LoRA_data);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff ff07 	bl	80014f6 <LoRA_sendPacket>
	while (1) {

		if (recv_packet(acknowledge, length)) {
 80016e8:	8a7b      	ldrh	r3, [r7, #18]
 80016ea:	4619      	mov	r1, r3
 80016ec:	68b8      	ldr	r0, [r7, #8]
 80016ee:	f7ff ff91 	bl	8001614 <recv_packet>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d009      	beq.n	800170c <reliable_send_packet+0x9a>
			//cehck crc
			if (strcmp(acknowledge, LoRA_data) != 0) {
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	68b8      	ldr	r0, [r7, #8]
 80016fc:	f7fe fe08 	bl	8000310 <strcmp>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d011      	beq.n	800172a <reliable_send_packet+0xb8>
				LoRA_sendPacket(LoRA_data);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff fef5 	bl	80014f6 <LoRA_sendPacket>
			} else {
				break;
			}
		}

		if (HAL_GetTick() - lastTime > 1000) {
 800170c:	f002 fbce 	bl	8003eac <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800171a:	d9e5      	bls.n	80016e8 <reliable_send_packet+0x76>
			LoRA_sendPacket(LoRA_data);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff feea 	bl	80014f6 <LoRA_sendPacket>
			lastTime = HAL_GetTick();
 8001722:	f002 fbc3 	bl	8003eac <HAL_GetTick>
 8001726:	6178      	str	r0, [r7, #20]
		if (recv_packet(acknowledge, length)) {
 8001728:	e7de      	b.n	80016e8 <reliable_send_packet+0x76>
				break;
 800172a:	bf00      	nop
 800172c:	46b5      	mov	sp, r6
		}
	}
}
 800172e:	bf00      	nop
 8001730:	371c      	adds	r7, #28
 8001732:	46bd      	mov	sp, r7
 8001734:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001738 <usbReceiveHandle>:

		reliable_send_packet(message);
	}
}

int usbReceiveHandle(char* output){
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	uint32_t temp = usbBytesReady;
 8001740:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <usbReceiveHandle+0x40>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	60fb      	str	r3, [r7, #12]
	if(usbBytesReady > 0){
 8001746:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <usbReceiveHandle+0x40>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d00f      	beq.n	800176e <usbReceiveHandle+0x36>
		if(usbBytesReady > 256){
			//crash(2);
		}
		memcpy(output, usbDataBuffer, usbBytesReady);
 800174e:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <usbReceiveHandle+0x40>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	461a      	mov	r2, r3
 8001754:	4909      	ldr	r1, [pc, #36]	; (800177c <usbReceiveHandle+0x44>)
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f016 fe57 	bl	801840a <memcpy>
		output[usbBytesReady] = '\0';
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <usbReceiveHandle+0x40>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	4413      	add	r3, r2
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]
		usbBytesReady = 0;
 8001768:	4b03      	ldr	r3, [pc, #12]	; (8001778 <usbReceiveHandle+0x40>)
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
	}
	return temp;
 800176e:	68fb      	ldr	r3, [r7, #12]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	240003e4 	.word	0x240003e4
 800177c:	240002e4 	.word	0x240002e4

08001780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001782:	f6ad 4d0c 	subw	sp, sp, #3084	; 0xc0c
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 8001788:	4be1      	ldr	r3, [pc, #900]	; (8001b10 <main+0x390>)
 800178a:	f607 348c 	addw	r4, r7, #2956	; 0xb8c
 800178e:	461d      	mov	r5, r3
 8001790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001794:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001798:	c403      	stmia	r4!, {r0, r1}
 800179a:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800179c:	f002 fb00 	bl	8003da0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017a0:	f000 fb40 	bl	8001e24 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80017a4:	f000 fbba 	bl	8001f1c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017a8:	f001 f91e 	bl	80029e8 <MX_GPIO_Init>
  MX_DMA_Init();
 80017ac:	f001 f8bc 	bl	8002928 <MX_DMA_Init>
  MX_SPI3_Init();
 80017b0:	f000 fe3a 	bl	8002428 <MX_SPI3_Init>
  MX_FDCAN3_Init();
 80017b4:	f000 fcca 	bl	800214c <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 80017b8:	f001 f86a 	bl	8002890 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80017bc:	f000 fbe0 	bl	8001f80 <MX_ADC1_Init>
  MX_TIM4_Init();
 80017c0:	f000 ff44 	bl	800264c <MX_TIM4_Init>
  MX_ADC3_Init();
 80017c4:	f000 fc54 	bl	8002070 <MX_ADC3_Init>
  MX_SPI2_Init();
 80017c8:	f000 fdd8 	bl	800237c <MX_SPI2_Init>
  MX_I2C2_Init();
 80017cc:	f000 fd22 	bl	8002214 <MX_I2C2_Init>
  MX_TIM2_Init();
 80017d0:	f000 fe80 	bl	80024d4 <MX_TIM2_Init>
  MX_TIM5_Init();
 80017d4:	f000 ffb6 	bl	8002744 <MX_TIM5_Init>
  MX_TIM3_Init();
 80017d8:	f000 fed4 	bl	8002584 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 80017dc:	f015 f8d0 	bl	8016980 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 80017e0:	f000 fd76 	bl	80022d0 <MX_SPI1_Init>
  MX_UART4_Init();
 80017e4:	f001 f808 	bl	80027f8 <MX_UART4_Init>
  MX_FATFS_Init();
 80017e8:	f012 fe5e 	bl	80144a8 <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 80017ec:	f000 fd52 	bl	8002294 <MX_SDMMC2_SD_Init>
  /* USER CODE BEGIN 2 */

	const int MAX = 50;
 80017f0:	2332      	movs	r3, #50	; 0x32
 80017f2:	f8c7 3be8 	str.w	r3, [r7, #3048]	; 0xbe8
	const double SPEED = 2.0/2000;
 80017f6:	a3c4      	add	r3, pc, #784	; (adr r3, 8001b08 <main+0x388>)
 80017f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fc:	f507 613e 	add.w	r1, r7, #3040	; 0xbe0
 8001800:	e9c1 2300 	strd	r2, r3, [r1]
	const double r_offset = 0;
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	f04f 0300 	mov.w	r3, #0
 800180c:	f607 31d8 	addw	r1, r7, #3032	; 0xbd8
 8001810:	e9c1 2300 	strd	r2, r3, [r1]
	const double g_offset = 1;
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	4bbe      	ldr	r3, [pc, #760]	; (8001b14 <main+0x394>)
 800181a:	f507 613d 	add.w	r1, r7, #3024	; 0xbd0
 800181e:	e9c1 2300 	strd	r2, r3, [r1]
	const double b_offset = 2;
 8001822:	f04f 0200 	mov.w	r2, #0
 8001826:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800182a:	f607 31c8 	addw	r1, r7, #3016	; 0xbc8
 800182e:	e9c1 2300 	strd	r2, r3, [r1]

	LG2_Write_Register(0x10, 0b00111100); //Accelerometer setup - CTRL1_XL
 8001832:	213c      	movs	r1, #60	; 0x3c
 8001834:	2010      	movs	r0, #16
 8001836:	f7ff f999 	bl	8000b6c <LG2_Write_Register>
	LG2_Write_Register(0x11, 0b00110000); //Gyroscope setup - CTRL2_G
 800183a:	2130      	movs	r1, #48	; 0x30
 800183c:	2011      	movs	r0, #17
 800183e:	f7ff f995 	bl	8000b6c <LG2_Write_Register>
	LG2_Write_Register(0x13, 0b00000100); //disables I2C - CTRL4_C
 8001842:	2104      	movs	r1, #4
 8001844:	2013      	movs	r0, #19
 8001846:	f7ff f991 	bl	8000b6c <LG2_Write_Register>

	HAL_Delay(3000);
 800184a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800184e:	f002 fb39 	bl	8003ec4 <HAL_Delay>
	HG2_Write_Register(0x1C, 0b10111111);
 8001852:	21bf      	movs	r1, #191	; 0xbf
 8001854:	201c      	movs	r0, #28
 8001856:	f7ff f935 	bl	8000ac4 <HG2_Write_Register>
	HAL_Delay(2);
 800185a:	2002      	movs	r0, #2
 800185c:	f002 fb32 	bl	8003ec4 <HAL_Delay>

	HG2_Write_Register(0x1B, 0b01011000);
 8001860:	2158      	movs	r1, #88	; 0x58
 8001862:	201b      	movs	r0, #27
 8001864:	f7ff f92e 	bl	8000ac4 <HG2_Write_Register>
	HG2_Write_Register(0x1B, 0b11011000);
 8001868:	21d8      	movs	r1, #216	; 0xd8
 800186a:	201b      	movs	r0, #27
 800186c:	f7ff f92a 	bl	8000ac4 <HG2_Write_Register>

	float rotZ = 0;
 8001870:	f04f 0300 	mov.w	r3, #0
 8001874:	f607 32c4 	addw	r2, r7, #3012	; 0xbc4
 8001878:	6013      	str	r3, [r2, #0]
	uint32_t lastTime = 0;
 800187a:	2300      	movs	r3, #0
 800187c:	f8c7 3c04 	str.w	r3, [r7, #3076]	; 0xc04

	float calOmegaX = 0;
 8001880:	f04f 0300 	mov.w	r3, #0
 8001884:	f507 6240 	add.w	r2, r7, #3072	; 0xc00
 8001888:	6013      	str	r3, [r2, #0]
	float calOmegaY = 0;
 800188a:	f04f 0300 	mov.w	r3, #0
 800188e:	f607 32fc 	addw	r2, r7, #3068	; 0xbfc
 8001892:	6013      	str	r3, [r2, #0]
	float calOmegaZ = 0;
 8001894:	f04f 0300 	mov.w	r3, #0
 8001898:	f607 32f8 	addw	r2, r7, #3064	; 0xbf8
 800189c:	6013      	str	r3, [r2, #0]
	//HAL_Delay(2000);
	for(int i = 0; i < 500; i++){
 800189e:	2300      	movs	r3, #0
 80018a0:	f8c7 3bf4 	str.w	r3, [r7, #3060]	; 0xbf4
 80018a4:	e02e      	b.n	8001904 <main+0x184>
		calOmegaX += LG2_Get_Gyro_X();
 80018a6:	f7ff f989 	bl	8000bbc <LG2_Get_Gyro_X>
 80018aa:	eeb0 7a40 	vmov.f32	s14, s0
 80018ae:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80018b2:	edd3 7a00 	vldr	s15, [r3]
 80018b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018ba:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80018be:	edc3 7a00 	vstr	s15, [r3]
		calOmegaY += LG2_Get_Gyro_Y();
 80018c2:	f7ff f9ab 	bl	8000c1c <LG2_Get_Gyro_Y>
 80018c6:	eeb0 7a40 	vmov.f32	s14, s0
 80018ca:	f607 33fc 	addw	r3, r7, #3068	; 0xbfc
 80018ce:	edd3 7a00 	vldr	s15, [r3]
 80018d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018d6:	f607 33fc 	addw	r3, r7, #3068	; 0xbfc
 80018da:	edc3 7a00 	vstr	s15, [r3]
		calOmegaZ += LG2_Get_Gyro_Z();
 80018de:	f7ff f9cf 	bl	8000c80 <LG2_Get_Gyro_Z>
 80018e2:	eeb0 7a40 	vmov.f32	s14, s0
 80018e6:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 80018ea:	edd3 7a00 	vldr	s15, [r3]
 80018ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018f2:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 80018f6:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < 500; i++){
 80018fa:	f8d7 3bf4 	ldr.w	r3, [r7, #3060]	; 0xbf4
 80018fe:	3301      	adds	r3, #1
 8001900:	f8c7 3bf4 	str.w	r3, [r7, #3060]	; 0xbf4
 8001904:	f8d7 3bf4 	ldr.w	r3, [r7, #3060]	; 0xbf4
 8001908:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800190c:	dbcb      	blt.n	80018a6 <main+0x126>

		//HAL_Delay(20);
	}
	calOmegaX /= 500;
 800190e:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8001912:	ed93 7a00 	vldr	s14, [r3]
 8001916:	eddf 6a80 	vldr	s13, [pc, #512]	; 8001b18 <main+0x398>
 800191a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800191e:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8001922:	edc3 7a00 	vstr	s15, [r3]
	calOmegaY /= 500;
 8001926:	f607 33fc 	addw	r3, r7, #3068	; 0xbfc
 800192a:	ed93 7a00 	vldr	s14, [r3]
 800192e:	eddf 6a7a 	vldr	s13, [pc, #488]	; 8001b18 <main+0x398>
 8001932:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001936:	f607 33fc 	addw	r3, r7, #3068	; 0xbfc
 800193a:	edc3 7a00 	vstr	s15, [r3]
	calOmegaZ /= 500;
 800193e:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001942:	ed93 7a00 	vldr	s14, [r3]
 8001946:	eddf 6a74 	vldr	s13, [pc, #464]	; 8001b18 <main+0x398>
 800194a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800194e:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8001952:	edc3 7a00 	vstr	s15, [r3]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001956:	2201      	movs	r2, #1
 8001958:	2101      	movs	r1, #1
 800195a:	4870      	ldr	r0, [pc, #448]	; (8001b1c <main+0x39c>)
 800195c:	f006 fd64 	bl	8008428 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001960:	20c8      	movs	r0, #200	; 0xc8
 8001962:	f002 faaf 	bl	8003ec4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);
 8001966:	2200      	movs	r2, #0
 8001968:	2101      	movs	r1, #1
 800196a:	486c      	ldr	r0, [pc, #432]	; (8001b1c <main+0x39c>)
 800196c:	f006 fd5c 	bl	8008428 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001970:	20c8      	movs	r0, #200	; 0xc8
 8001972:	f002 faa7 	bl	8003ec4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001976:	2201      	movs	r2, #1
 8001978:	2101      	movs	r1, #1
 800197a:	4868      	ldr	r0, [pc, #416]	; (8001b1c <main+0x39c>)
 800197c:	f006 fd54 	bl	8008428 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001980:	20c8      	movs	r0, #200	; 0xc8
 8001982:	f002 fa9f 	bl	8003ec4 <HAL_Delay>


	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 8001986:	2201      	movs	r2, #1
 8001988:	2104      	movs	r1, #4
 800198a:	4865      	ldr	r0, [pc, #404]	; (8001b20 <main+0x3a0>)
 800198c:	f006 fd4c 	bl	8008428 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 8001990:	2201      	movs	r2, #1
 8001992:	2108      	movs	r1, #8
 8001994:	4862      	ldr	r0, [pc, #392]	; (8001b20 <main+0x3a0>)
 8001996:	f006 fd47 	bl	8008428 <HAL_GPIO_WritePin>


    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800199a:	2100      	movs	r1, #0
 800199c:	4861      	ldr	r0, [pc, #388]	; (8001b24 <main+0x3a4>)
 800199e:	f00d ff91 	bl	800f8c4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80019a2:	2104      	movs	r1, #4
 80019a4:	485f      	ldr	r0, [pc, #380]	; (8001b24 <main+0x3a4>)
 80019a6:	f00d ff8d 	bl	800f8c4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80019aa:	2108      	movs	r1, #8
 80019ac:	485d      	ldr	r0, [pc, #372]	; (8001b24 <main+0x3a4>)
 80019ae:	f00d ff89 	bl	800f8c4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80019b2:	210c      	movs	r1, #12
 80019b4:	485b      	ldr	r0, [pc, #364]	; (8001b24 <main+0x3a4>)
 80019b6:	f00d ff85 	bl	800f8c4 <HAL_TIM_PWM_Start>

    setServo(1, 90);
 80019ba:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 8001b28 <main+0x3a8>
 80019be:	2001      	movs	r0, #1
 80019c0:	f7ff f996 	bl	8000cf0 <setServo>
    setServo(2, 180);
 80019c4:	ed9f 0a59 	vldr	s0, [pc, #356]	; 8001b2c <main+0x3ac>
 80019c8:	2002      	movs	r0, #2
 80019ca:	f7ff f991 	bl	8000cf0 <setServo>
    setServo(3, 0);
 80019ce:	ed9f 0a58 	vldr	s0, [pc, #352]	; 8001b30 <main+0x3b0>
 80019d2:	2003      	movs	r0, #3
 80019d4:	f7ff f98c 	bl	8000cf0 <setServo>
    setServo(4, 45);
 80019d8:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8001b34 <main+0x3b4>
 80019dc:	2004      	movs	r0, #4
 80019de:	f7ff f987 	bl	8000cf0 <setServo>
//    				}
//    			}
//    		}
//    	}
//    	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
	  LoRA_begin(868000000);
 80019e2:	4855      	ldr	r0, [pc, #340]	; (8001b38 <main+0x3b8>)
 80019e4:	f7ff fc9e 	bl	8001324 <LoRA_begin>
		LoRA_sendPacket("whatever");
		HAL_Delay(1000);
	}
*/

	int connected = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	f8c7 3bc0 	str.w	r3, [r7, #3008]	; 0xbc0
	long last_packet = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	f8c7 3bbc 	str.w	r3, [r7, #3004]	; 0xbbc
	int ARMED = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	f8c7 3bb8 	str.w	r3, [r7, #3000]	; 0xbb8

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//HAL_ADC_Start_DMA(&hadc3, &read_Data, 1);

  int max_packet_count = 0;
 80019fa:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 80019fe:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
  int stream_counter = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	f8c7 3bb4 	str.w	r3, [r7, #2996]	; 0xbb4
  char state[MAX_PAYLOAD_LENGHT] = "";
 8001a0c:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 8001a10:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	22f6      	movs	r2, #246	; 0xf6
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f016 fc6b 	bl	80182fa <memset>
  char acknowledge[MAX_PAYLOAD_LENGHT];
  char previous_packet[MAX_PAYLOAD_LENGHT];
  char recieved_packet[MAX_PAYLOAD_LENGHT];
  char response_packet[MAX_PAYLOAD_LENGHT];
  char sendMessage[MAX_PAYLOAD_LENGHT];
  int last = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
  int packets_streamed = 50;
 8001a2a:	2332      	movs	r3, #50	; 0x32
 8001a2c:	f8c7 3bac 	str.w	r3, [r7, #2988]	; 0xbac
  int packetId;
  int have_recieved_anything = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	f8c7 3bf0 	str.w	r3, [r7, #3056]	; 0xbf0
  char communication_state[50] = "SENDING RELIABLE";
 8001a36:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 8001a3a:	f6a3 16fc 	subw	r6, r3, #2556	; 0x9fc
 8001a3e:	4b3f      	ldr	r3, [pc, #252]	; (8001b3c <main+0x3bc>)
 8001a40:	4634      	mov	r4, r6
 8001a42:	461d      	mov	r5, r3
 8001a44:	6828      	ldr	r0, [r5, #0]
 8001a46:	6869      	ldr	r1, [r5, #4]
 8001a48:	68aa      	ldr	r2, [r5, #8]
 8001a4a:	68eb      	ldr	r3, [r5, #12]
 8001a4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a4e:	7c2b      	ldrb	r3, [r5, #16]
 8001a50:	7023      	strb	r3, [r4, #0]
 8001a52:	f106 0311 	add.w	r3, r6, #17
 8001a56:	2221      	movs	r2, #33	; 0x21
 8001a58:	2100      	movs	r1, #0
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f016 fc4d 	bl	80182fa <memset>
  uint32_t previousTime = HAL_GetTick();
 8001a60:	f002 fa24 	bl	8003eac <HAL_GetTick>
 8001a64:	f8c7 0bec 	str.w	r0, [r7, #3052]	; 0xbec
  disarm(state);
 8001a68:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff fd6d 	bl	800154c <disarm>
  LoRA_begin(868000000);
 8001a72:	4831      	ldr	r0, [pc, #196]	; (8001b38 <main+0x3b8>)
 8001a74:	f7ff fc56 	bl	8001324 <LoRA_begin>


while (1) {
    if(strcmp(communication_state,"RECEIVING RELIABLE") == 0)
 8001a78:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001a7c:	4930      	ldr	r1, [pc, #192]	; (8001b40 <main+0x3c0>)
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7fe fc46 	bl	8000310 <strcmp>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f040 80b2 	bne.w	8001bf0 <main+0x470>
    {
      if(recv_packet(recieved_packet, MAX_PAYLOAD_LENGHT))
 8001a8c:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001a90:	21fa      	movs	r1, #250	; 0xfa
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fdbe 	bl	8001614 <recv_packet>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f000 8083 	beq.w	8001ba6 <main+0x426>
      {
    	  have_recieved_anything = 1;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	f8c7 3bf0 	str.w	r3, [r7, #3056]	; 0xbf0
        previousTime = HAL_GetTick();
 8001aa6:	f002 fa01 	bl	8003eac <HAL_GetTick>
 8001aaa:	f8c7 0bec 	str.w	r0, [r7, #3052]	; 0xbec
        //HAL_Delay(100);
        //CDC_Transmit_HS("is arm 0succ\n", strlen("is arm 0succ\n"));
        //HAL_Delay(100);
        if(sscanf(recieved_packet, "$ %s", state) == 1)
 8001aae:	f607 0228 	addw	r2, r7, #2088	; 0x828
 8001ab2:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001ab6:	4923      	ldr	r1, [pc, #140]	; (8001b44 <main+0x3c4>)
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f016 fbad 	bl	8018218 <siscanf>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d109      	bne.n	8001ad8 <main+0x358>
        {
          strcpy(communication_state,"SENDING RELIABLE");
 8001ac4:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001ac8:	4a1c      	ldr	r2, [pc, #112]	; (8001b3c <main+0x3bc>)
 8001aca:	461c      	mov	r4, r3
 8001acc:	4615      	mov	r5, r2
 8001ace:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ad0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ad2:	682b      	ldr	r3, [r5, #0]
 8001ad4:	7023      	strb	r3, [r4, #0]
 8001ad6:	e179      	b.n	8001dcc <main+0x64c>
        }
        else if(sscanf(recieved_packet, "! %d", &max_packet_count) == 1)
 8001ad8:	f607 1224 	addw	r2, r7, #2340	; 0x924
 8001adc:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001ae0:	4919      	ldr	r1, [pc, #100]	; (8001b48 <main+0x3c8>)
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f016 fb98 	bl	8018218 <siscanf>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d130      	bne.n	8001b50 <main+0x3d0>
        {
          strcpy(communication_state,"SENDING STREAM");
 8001aee:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001af2:	4a16      	ldr	r2, [pc, #88]	; (8001b4c <main+0x3cc>)
 8001af4:	461c      	mov	r4, r3
 8001af6:	4613      	mov	r3, r2
 8001af8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001afa:	c407      	stmia	r4!, {r0, r1, r2}
 8001afc:	8023      	strh	r3, [r4, #0]
 8001afe:	3402      	adds	r4, #2
 8001b00:	0c1b      	lsrs	r3, r3, #16
 8001b02:	7023      	strb	r3, [r4, #0]
 8001b04:	e162      	b.n	8001dcc <main+0x64c>
 8001b06:	bf00      	nop
 8001b08:	d2f1a9fc 	.word	0xd2f1a9fc
 8001b0c:	3f50624d 	.word	0x3f50624d
 8001b10:	0801c2dc 	.word	0x0801c2dc
 8001b14:	3ff00000 	.word	0x3ff00000
 8001b18:	43fa0000 	.word	0x43fa0000
 8001b1c:	58020c00 	.word	0x58020c00
 8001b20:	58021800 	.word	0x58021800
 8001b24:	240012e0 	.word	0x240012e0
 8001b28:	42b40000 	.word	0x42b40000
 8001b2c:	43340000 	.word	0x43340000
 8001b30:	00000000 	.word	0x00000000
 8001b34:	42340000 	.word	0x42340000
 8001b38:	33bca100 	.word	0x33bca100
 8001b3c:	0801c284 	.word	0x0801c284
 8001b40:	0801c268 	.word	0x0801c268
 8001b44:	0801c27c 	.word	0x0801c27c
 8001b48:	0801c298 	.word	0x0801c298
 8001b4c:	0801c2a0 	.word	0x0801c2a0
        }
        else if(strcmp(recieved_packet, previous_packet)==0)
 8001b50:	f207 5234 	addw	r2, r7, #1332	; 0x534
 8001b54:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001b58:	4611      	mov	r1, r2
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7fe fbd8 	bl	8000310 <strcmp>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d105      	bne.n	8001b72 <main+0x3f2>
        {
          //send acknowledge again
          LoRA_sendPacket(recieved_packet);
 8001b66:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff fcc3 	bl	80014f6 <LoRA_sendPacket>
 8001b70:	e12c      	b.n	8001dcc <main+0x64c>
        }
        else
        {
          //CDC_Transmit_HS("is arm 1succ\n", strlen("is arm 1succ\n"));
          //HAL_Delay(100);
          strcpy(previous_packet, recieved_packet);
 8001b72:	f507 6287 	add.w	r2, r7, #1080	; 0x438
 8001b76:	f207 5334 	addw	r3, r7, #1332	; 0x534
 8001b7a:	4611      	mov	r1, r2
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f016 fc3c 	bl	80183fa <strcpy>
          LoRA_sendPacket(recieved_packet);
 8001b82:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff fcb5 	bl	80014f6 <LoRA_sendPacket>
          //HAL_Delay(100);
          CDC_Transmit_HS(recieved_packet, strlen(recieved_packet));
 8001b8c:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fc1d 	bl	80003d0 <strlen>
 8001b96:	4602      	mov	r2, r0
 8001b98:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001b9c:	4611      	mov	r1, r2
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f014 ffc4 	bl	8016b2c <CDC_Transmit_HS>
 8001ba4:	e112      	b.n	8001dcc <main+0x64c>
        }
      }
      else if((!have_recieved_anything && HAL_GetTick()-previousTime > 1000) ||
 8001ba6:	f8d7 3bf0 	ldr.w	r3, [r7, #3056]	; 0xbf0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d108      	bne.n	8001bc0 <main+0x440>
 8001bae:	f002 f97d 	bl	8003eac <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	f8d7 3bec 	ldr.w	r3, [r7, #3052]	; 0xbec
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bbe:	d80f      	bhi.n	8001be0 <main+0x460>
 8001bc0:	f8d7 3bf0 	ldr.w	r3, [r7, #3056]	; 0xbf0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 8101 	beq.w	8001dcc <main+0x64c>
    		  (have_recieved_anything && HAL_GetTick()-previousTime > 5000))
 8001bca:	f002 f96f 	bl	8003eac <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	f8d7 3bec 	ldr.w	r3, [r7, #3052]	; 0xbec
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	f240 80f6 	bls.w	8001dcc <main+0x64c>
      {
        previousTime = HAL_GetTick();
 8001be0:	f002 f964 	bl	8003eac <HAL_GetTick>
 8001be4:	f8c7 0bec 	str.w	r0, [r7, #3052]	; 0xbec
        //give up SENDING
        LoRA_sendPacket("$");
 8001be8:	4884      	ldr	r0, [pc, #528]	; (8001dfc <main+0x67c>)
 8001bea:	f7ff fc84 	bl	80014f6 <LoRA_sendPacket>
 8001bee:	e0ed      	b.n	8001dcc <main+0x64c>
      }
    }
    else if(strcmp(communication_state,"RECEIVING STREAM") == 0)
 8001bf0:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001bf4:	4982      	ldr	r1, [pc, #520]	; (8001e00 <main+0x680>)
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe fb8a 	bl	8000310 <strcmp>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d14a      	bne.n	8001c98 <main+0x518>
    {
      if(recv_packet(recieved_packet, MAX_PAYLOAD_LENGHT))
 8001c02:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001c06:	21fa      	movs	r1, #250	; 0xfa
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff fd03 	bl	8001614 <recv_packet>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d025      	beq.n	8001c60 <main+0x4e0>
      {
        previousTime = HAL_GetTick();
 8001c14:	f002 f94a 	bl	8003eac <HAL_GetTick>
 8001c18:	f8c7 0bec 	str.w	r0, [r7, #3052]	; 0xbec
        if(sscanf(recieved_packet, "$ %s", state) == 1)
 8001c1c:	f607 0228 	addw	r2, r7, #2088	; 0x828
 8001c20:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001c24:	4977      	ldr	r1, [pc, #476]	; (8001e04 <main+0x684>)
 8001c26:	4618      	mov	r0, r3
 8001c28:	f016 faf6 	bl	8018218 <siscanf>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d109      	bne.n	8001c46 <main+0x4c6>
        {
          strcpy(communication_state,"SENDING RELIABLE");
 8001c32:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001c36:	4a74      	ldr	r2, [pc, #464]	; (8001e08 <main+0x688>)
 8001c38:	461c      	mov	r4, r3
 8001c3a:	4615      	mov	r5, r2
 8001c3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c40:	682b      	ldr	r3, [r5, #0]
 8001c42:	7023      	strb	r3, [r4, #0]
 8001c44:	e0c2      	b.n	8001dcc <main+0x64c>
        }
        else
        {
          CDC_Transmit_HS(recieved_packet, strlen(recieved_packet));
 8001c46:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7fe fbc0 	bl	80003d0 <strlen>
 8001c50:	4602      	mov	r2, r0
 8001c52:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001c56:	4611      	mov	r1, r2
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f014 ff67 	bl	8016b2c <CDC_Transmit_HS>
 8001c5e:	e0b5      	b.n	8001dcc <main+0x64c>
        }
      }
      else if(HAL_GetTick()-previousTime > 1000)
 8001c60:	f002 f924 	bl	8003eac <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	f8d7 3bec 	ldr.w	r3, [r7, #3052]	; 0xbec
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c70:	f240 80ac 	bls.w	8001dcc <main+0x64c>
      {
        previousTime = HAL_GetTick();
 8001c74:	f002 f91a 	bl	8003eac <HAL_GetTick>
 8001c78:	f8c7 0bec 	str.w	r0, [r7, #3052]	; 0xbec
        //give up SENDING
        sprintf(sendMessage, "! %d", packets_streamed);
 8001c7c:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001c80:	f8d7 2bac 	ldr.w	r2, [r7, #2988]	; 0xbac
 8001c84:	4961      	ldr	r1, [pc, #388]	; (8001e0c <main+0x68c>)
 8001c86:	4618      	mov	r0, r3
 8001c88:	f016 faa6 	bl	80181d8 <siprintf>
        LoRA_sendPacket(sendMessage);
 8001c8c:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff fc30 	bl	80014f6 <LoRA_sendPacket>
 8001c96:	e099      	b.n	8001dcc <main+0x64c>
      }
    }
    else if(strcmp(communication_state,"SENDING STREAM") == 0)
 8001c98:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001c9c:	495c      	ldr	r1, [pc, #368]	; (8001e10 <main+0x690>)
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe fb36 	bl	8000310 <strcmp>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d126      	bne.n	8001cf8 <main+0x578>
    {
      if(max_packet_count == 0)
 8001caa:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 8001cae:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d113      	bne.n	8001ce0 <main+0x560>
      {
        strcpy(communication_state,"RECEIVING RELIABLE");
 8001cb8:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001cbc:	4a55      	ldr	r2, [pc, #340]	; (8001e14 <main+0x694>)
 8001cbe:	461c      	mov	r4, r3
 8001cc0:	4615      	mov	r5, r2
 8001cc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cc6:	682b      	ldr	r3, [r5, #0]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	8022      	strh	r2, [r4, #0]
 8001ccc:	3402      	adds	r4, #2
 8001cce:	0c1b      	lsrs	r3, r3, #16
 8001cd0:	7023      	strb	r3, [r4, #0]
        have_recieved_anything = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	f8c7 3bf0 	str.w	r3, [r7, #3056]	; 0xbf0
        LoRA_sendPacket("$");
 8001cd8:	4848      	ldr	r0, [pc, #288]	; (8001dfc <main+0x67c>)
 8001cda:	f7ff fc0c 	bl	80014f6 <LoRA_sendPacket>
 8001cde:	e075      	b.n	8001dcc <main+0x64c>
      }
      else
      {
        //send whatever
        max_packet_count--;
 8001ce0:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 8001ce4:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	1e5a      	subs	r2, r3, #1
 8001cec:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 8001cf0:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	e069      	b.n	8001dcc <main+0x64c>
      }

    }
    else if(strcmp(communication_state,"SENDING RELIABLE") == 0)
 8001cf8:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001cfc:	4942      	ldr	r1, [pc, #264]	; (8001e08 <main+0x688>)
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7fe fb06 	bl	8000310 <strcmp>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d160      	bne.n	8001dcc <main+0x64c>
    {
	  	  CDC_Transmit_HS(state, strlen(state));
 8001d0a:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe fb5e 	bl	80003d0 <strlen>
 8001d14:	4602      	mov	r2, r0
 8001d16:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f014 ff05 	bl	8016b2c <CDC_Transmit_HS>

    	//get input
    	char input[usbBufferLen];
    	usbReceiveHandle(input);
 8001d22:	463b      	mov	r3, r7
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff fd07 	bl	8001738 <usbReceiveHandle>

    	while(!usbReceiveHandle(input))
 8001d2a:	bf00      	nop
 8001d2c:	463b      	mov	r3, r7
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff fd02 	bl	8001738 <usbReceiveHandle>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0f8      	beq.n	8001d2c <main+0x5ac>
    	{}

      reliable_send_packet(input);
 8001d3a:	463b      	mov	r3, r7
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff fc98 	bl	8001672 <reliable_send_packet>

	  	char debug[usbBufferLen+10];
	  	sprintf(debug, "Debug: %s\n", input);
 8001d42:	463a      	mov	r2, r7
 8001d44:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001d48:	4933      	ldr	r1, [pc, #204]	; (8001e18 <main+0x698>)
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f016 fa44 	bl	80181d8 <siprintf>
	  	CDC_Transmit_HS(debug, strlen(debug));
 8001d50:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe fb3b 	bl	80003d0 <strlen>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001d60:	4611      	mov	r1, r2
 8001d62:	4618      	mov	r0, r3
 8001d64:	f014 fee2 	bl	8016b2c <CDC_Transmit_HS>

      if(strcmp(input,"FIRE")==0)
 8001d68:	463b      	mov	r3, r7
 8001d6a:	492c      	ldr	r1, [pc, #176]	; (8001e1c <main+0x69c>)
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe facf 	bl	8000310 <strcmp>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d116      	bne.n	8001da6 <main+0x626>
      {
        strcpy(communication_state,"RECEIVING STREAM");
 8001d78:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001d7c:	4a20      	ldr	r2, [pc, #128]	; (8001e00 <main+0x680>)
 8001d7e:	461c      	mov	r4, r3
 8001d80:	4615      	mov	r5, r2
 8001d82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d86:	682b      	ldr	r3, [r5, #0]
 8001d88:	7023      	strb	r3, [r4, #0]
        sprintf(sendMessage, "! %d", packets_streamed);
 8001d8a:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001d8e:	f8d7 2bac 	ldr.w	r2, [r7, #2988]	; 0xbac
 8001d92:	491e      	ldr	r1, [pc, #120]	; (8001e0c <main+0x68c>)
 8001d94:	4618      	mov	r0, r3
 8001d96:	f016 fa1f 	bl	80181d8 <siprintf>
        LoRA_sendPacket(sendMessage);
 8001d9a:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff fba9 	bl	80014f6 <LoRA_sendPacket>
 8001da4:	e012      	b.n	8001dcc <main+0x64c>
      }
      else
      {
        strcpy(communication_state,"RECEIVING RELIABLE");
 8001da6:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001daa:	4a1a      	ldr	r2, [pc, #104]	; (8001e14 <main+0x694>)
 8001dac:	461c      	mov	r4, r3
 8001dae:	4615      	mov	r5, r2
 8001db0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001db2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001db4:	682b      	ldr	r3, [r5, #0]
 8001db6:	461a      	mov	r2, r3
 8001db8:	8022      	strh	r2, [r4, #0]
 8001dba:	3402      	adds	r4, #2
 8001dbc:	0c1b      	lsrs	r3, r3, #16
 8001dbe:	7023      	strb	r3, [r4, #0]
        have_recieved_anything = 0;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f8c7 3bf0 	str.w	r3, [r7, #3056]	; 0xbf0
        LoRA_sendPacket("$");
 8001dc6:	480d      	ldr	r0, [pc, #52]	; (8001dfc <main+0x67c>)
 8001dc8:	f7ff fb95 	bl	80014f6 <LoRA_sendPacket>
//			LED_Color_Data[i][0] = (uint32_t)MAX*triangle_space(color_offset+r_offset);
//			LED_Color_Data[i][1] = (uint32_t)MAX*triangle_space(color_offset+g_offset);
//			LED_Color_Data[i][2] = (uint32_t)MAX*triangle_space(color_offset+b_offset);
//		}

		float timeElapsed = ((float)(HAL_GetTick() - lastTime)) / 1000;
 8001dcc:	f002 f86e 	bl	8003eac <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	f8d7 3c04 	ldr.w	r3, [r7, #3076]	; 0xc04
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	ee07 3a90 	vmov	s15, r3
 8001ddc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001de0:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001e20 <main+0x6a0>
 8001de4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001de8:	f607 33a8 	addw	r3, r7, #2984	; 0xba8
 8001dec:	edc3 7a00 	vstr	s15, [r3]

		//float GyroX = LG2_Get_Gyro_X() - calOmegaX;
		//float GyroY = LG2_Get_Gyro_Y() - calOmegaY;
		//float GyroZ = LG2_Get_Gyro_Z() - calOmegaZ;

		lastTime = HAL_GetTick();
 8001df0:	f002 f85c 	bl	8003eac <HAL_GetTick>
 8001df4:	f8c7 0c04 	str.w	r0, [r7, #3076]	; 0xc04
while (1) {
 8001df8:	e63e      	b.n	8001a78 <main+0x2f8>
 8001dfa:	bf00      	nop
 8001dfc:	0801c2b0 	.word	0x0801c2b0
 8001e00:	0801c2b4 	.word	0x0801c2b4
 8001e04:	0801c27c 	.word	0x0801c27c
 8001e08:	0801c284 	.word	0x0801c284
 8001e0c:	0801c298 	.word	0x0801c298
 8001e10:	0801c2a0 	.word	0x0801c2a0
 8001e14:	0801c268 	.word	0x0801c268
 8001e18:	0801c2c8 	.word	0x0801c2c8
 8001e1c:	0801c2d4 	.word	0x0801c2d4
 8001e20:	447a0000 	.word	0x447a0000

08001e24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b09c      	sub	sp, #112	; 0x70
 8001e28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e2e:	224c      	movs	r2, #76	; 0x4c
 8001e30:	2100      	movs	r1, #0
 8001e32:	4618      	mov	r0, r3
 8001e34:	f016 fa61 	bl	80182fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e38:	1d3b      	adds	r3, r7, #4
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f016 fa5b 	bl	80182fa <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001e44:	2002      	movs	r0, #2
 8001e46:	f007 fee9 	bl	8009c1c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	603b      	str	r3, [r7, #0]
 8001e4e:	4b32      	ldr	r3, [pc, #200]	; (8001f18 <SystemClock_Config+0xf4>)
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e56:	4a30      	ldr	r2, [pc, #192]	; (8001f18 <SystemClock_Config+0xf4>)
 8001e58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e5c:	6193      	str	r3, [r2, #24]
 8001e5e:	4b2e      	ldr	r3, [pc, #184]	; (8001f18 <SystemClock_Config+0xf4>)
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e66:	603b      	str	r3, [r7, #0]
 8001e68:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001e6a:	bf00      	nop
 8001e6c:	4b2a      	ldr	r3, [pc, #168]	; (8001f18 <SystemClock_Config+0xf4>)
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e78:	d1f8      	bne.n	8001e6c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8001e7a:	2323      	movs	r3, #35	; 0x23
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e82:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001e84:	2301      	movs	r3, #1
 8001e86:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001e88:	2340      	movs	r3, #64	; 0x40
 8001e8a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e90:	2302      	movs	r3, #2
 8001e92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e94:	2300      	movs	r3, #0
 8001e96:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001e98:	2304      	movs	r3, #4
 8001e9a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001e9c:	230c      	movs	r3, #12
 8001e9e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8001ea4:	230c      	movs	r3, #12
 8001ea6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001eac:	230c      	movs	r3, #12
 8001eae:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f007 fef7 	bl	8009cb0 <HAL_RCC_OscConfig>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001ec8:	f000 ff02 	bl	8002cd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ecc:	233f      	movs	r3, #63	; 0x3f
 8001ece:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001ed8:	2308      	movs	r3, #8
 8001eda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001edc:	2340      	movs	r3, #64	; 0x40
 8001ede:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001ee0:	2340      	movs	r3, #64	; 0x40
 8001ee2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001ee4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ee8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001eea:	2340      	movs	r3, #64	; 0x40
 8001eec:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001eee:	1d3b      	adds	r3, r7, #4
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f008 fab6 	bl	800a464 <HAL_RCC_ClockConfig>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8001efe:	f000 fee7 	bl	8002cd0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001f02:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001f06:	2100      	movs	r1, #0
 8001f08:	2000      	movs	r0, #0
 8001f0a:	f008 fc61 	bl	800a7d0 <HAL_RCC_MCOConfig>
}
 8001f0e:	bf00      	nop
 8001f10:	3770      	adds	r7, #112	; 0x70
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	58024800 	.word	0x58024800

08001f1c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b0ae      	sub	sp, #184	; 0xb8
 8001f20:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f22:	463b      	mov	r3, r7
 8001f24:	22b8      	movs	r2, #184	; 0xb8
 8001f26:	2100      	movs	r1, #0
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f016 f9e6 	bl	80182fa <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 8001f2e:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8001f32:	f04f 0300 	mov.w	r3, #0
 8001f36:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001f3a:	2304      	movs	r3, #4
 8001f3c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001f3e:	230c      	movs	r3, #12
 8001f40:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001f42:	2304      	movs	r3, #4
 8001f44:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001f46:	2302      	movs	r3, #2
 8001f48:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001f4e:	23c0      	movs	r3, #192	; 0xc0
 8001f50:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001f52:	2300      	movs	r3, #0
 8001f54:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001f5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f5e:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001f60:	2300      	movs	r3, #0
 8001f62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f66:	463b      	mov	r3, r7
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f008 fe71 	bl	800ac50 <HAL_RCCEx_PeriphCLKConfig>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8001f74:	f000 feac 	bl	8002cd0 <Error_Handler>
  }
}
 8001f78:	bf00      	nop
 8001f7a:	37b8      	adds	r7, #184	; 0xb8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08c      	sub	sp, #48	; 0x30
 8001f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001f86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	605a      	str	r2, [r3, #4]
 8001f90:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001f92:	463b      	mov	r3, r7
 8001f94:	2224      	movs	r2, #36	; 0x24
 8001f96:	2100      	movs	r1, #0
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f016 f9ae 	bl	80182fa <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001f9e:	4b31      	ldr	r3, [pc, #196]	; (8002064 <MX_ADC1_Init+0xe4>)
 8001fa0:	4a31      	ldr	r2, [pc, #196]	; (8002068 <MX_ADC1_Init+0xe8>)
 8001fa2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001fa4:	4b2f      	ldr	r3, [pc, #188]	; (8002064 <MX_ADC1_Init+0xe4>)
 8001fa6:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001faa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001fac:	4b2d      	ldr	r3, [pc, #180]	; (8002064 <MX_ADC1_Init+0xe4>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001fb2:	4b2c      	ldr	r3, [pc, #176]	; (8002064 <MX_ADC1_Init+0xe4>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fb8:	4b2a      	ldr	r3, [pc, #168]	; (8002064 <MX_ADC1_Init+0xe4>)
 8001fba:	2204      	movs	r2, #4
 8001fbc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001fbe:	4b29      	ldr	r3, [pc, #164]	; (8002064 <MX_ADC1_Init+0xe4>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001fc4:	4b27      	ldr	r3, [pc, #156]	; (8002064 <MX_ADC1_Init+0xe4>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001fca:	4b26      	ldr	r3, [pc, #152]	; (8002064 <MX_ADC1_Init+0xe4>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fd0:	4b24      	ldr	r3, [pc, #144]	; (8002064 <MX_ADC1_Init+0xe4>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fd8:	4b22      	ldr	r3, [pc, #136]	; (8002064 <MX_ADC1_Init+0xe4>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fde:	4b21      	ldr	r3, [pc, #132]	; (8002064 <MX_ADC1_Init+0xe4>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001fe4:	4b1f      	ldr	r3, [pc, #124]	; (8002064 <MX_ADC1_Init+0xe4>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001fea:	4b1e      	ldr	r3, [pc, #120]	; (8002064 <MX_ADC1_Init+0xe4>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001ff0:	4b1c      	ldr	r3, [pc, #112]	; (8002064 <MX_ADC1_Init+0xe4>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001ff6:	4b1b      	ldr	r3, [pc, #108]	; (8002064 <MX_ADC1_Init+0xe4>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ffe:	4819      	ldr	r0, [pc, #100]	; (8002064 <MX_ADC1_Init+0xe4>)
 8002000:	f002 f9e0 	bl	80043c4 <HAL_ADC_Init>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800200a:	f000 fe61 	bl	8002cd0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800200e:	2300      	movs	r3, #0
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002016:	4619      	mov	r1, r3
 8002018:	4812      	ldr	r0, [pc, #72]	; (8002064 <MX_ADC1_Init+0xe4>)
 800201a:	f003 fa1b 	bl	8005454 <HAL_ADCEx_MultiModeConfigChannel>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8002024:	f000 fe54 	bl	8002cd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002028:	4b10      	ldr	r3, [pc, #64]	; (800206c <MX_ADC1_Init+0xec>)
 800202a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800202c:	2306      	movs	r3, #6
 800202e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8002030:	2303      	movs	r3, #3
 8002032:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002034:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002038:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800203a:	2304      	movs	r3, #4
 800203c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8002042:	2300      	movs	r3, #0
 8002044:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002048:	463b      	mov	r3, r7
 800204a:	4619      	mov	r1, r3
 800204c:	4805      	ldr	r0, [pc, #20]	; (8002064 <MX_ADC1_Init+0xe4>)
 800204e:	f002 fbc1 	bl	80047d4 <HAL_ADC_ConfigChannel>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8002058:	f000 fe3a 	bl	8002cd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800205c:	bf00      	nop
 800205e:	3730      	adds	r7, #48	; 0x30
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	24000d70 	.word	0x24000d70
 8002068:	40022000 	.word	0x40022000
 800206c:	2a000400 	.word	0x2a000400

08002070 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08a      	sub	sp, #40	; 0x28
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002076:	1d3b      	adds	r3, r7, #4
 8002078:	2224      	movs	r2, #36	; 0x24
 800207a:	2100      	movs	r1, #0
 800207c:	4618      	mov	r0, r3
 800207e:	f016 f93c 	bl	80182fa <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8002082:	4b2f      	ldr	r3, [pc, #188]	; (8002140 <MX_ADC3_Init+0xd0>)
 8002084:	4a2f      	ldr	r2, [pc, #188]	; (8002144 <MX_ADC3_Init+0xd4>)
 8002086:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8002088:	4b2d      	ldr	r3, [pc, #180]	; (8002140 <MX_ADC3_Init+0xd0>)
 800208a:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 800208e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002090:	4b2b      	ldr	r3, [pc, #172]	; (8002140 <MX_ADC3_Init+0xd0>)
 8002092:	2208      	movs	r2, #8
 8002094:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8002096:	4b2a      	ldr	r3, [pc, #168]	; (8002140 <MX_ADC3_Init+0xd0>)
 8002098:	2200      	movs	r2, #0
 800209a:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800209c:	4b28      	ldr	r3, [pc, #160]	; (8002140 <MX_ADC3_Init+0xd0>)
 800209e:	2200      	movs	r2, #0
 80020a0:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80020a2:	4b27      	ldr	r3, [pc, #156]	; (8002140 <MX_ADC3_Init+0xd0>)
 80020a4:	2204      	movs	r2, #4
 80020a6:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80020a8:	4b25      	ldr	r3, [pc, #148]	; (8002140 <MX_ADC3_Init+0xd0>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80020ae:	4b24      	ldr	r3, [pc, #144]	; (8002140 <MX_ADC3_Init+0xd0>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80020b4:	4b22      	ldr	r3, [pc, #136]	; (8002140 <MX_ADC3_Init+0xd0>)
 80020b6:	2201      	movs	r2, #1
 80020b8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80020ba:	4b21      	ldr	r3, [pc, #132]	; (8002140 <MX_ADC3_Init+0xd0>)
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020c2:	4b1f      	ldr	r3, [pc, #124]	; (8002140 <MX_ADC3_Init+0xd0>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80020c8:	4b1d      	ldr	r3, [pc, #116]	; (8002140 <MX_ADC3_Init+0xd0>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80020ce:	4b1c      	ldr	r3, [pc, #112]	; (8002140 <MX_ADC3_Init+0xd0>)
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80020d6:	4b1a      	ldr	r3, [pc, #104]	; (8002140 <MX_ADC3_Init+0xd0>)
 80020d8:	2200      	movs	r2, #0
 80020da:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80020dc:	4b18      	ldr	r3, [pc, #96]	; (8002140 <MX_ADC3_Init+0xd0>)
 80020de:	2200      	movs	r2, #0
 80020e0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80020e2:	4b17      	ldr	r3, [pc, #92]	; (8002140 <MX_ADC3_Init+0xd0>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80020e8:	4b15      	ldr	r3, [pc, #84]	; (8002140 <MX_ADC3_Init+0xd0>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 80020ee:	4b14      	ldr	r3, [pc, #80]	; (8002140 <MX_ADC3_Init+0xd0>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80020f6:	4812      	ldr	r0, [pc, #72]	; (8002140 <MX_ADC3_Init+0xd0>)
 80020f8:	f002 f964 	bl	80043c4 <HAL_ADC_Init>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8002102:	f000 fde5 	bl	8002cd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002106:	4b10      	ldr	r3, [pc, #64]	; (8002148 <MX_ADC3_Init+0xd8>)
 8002108:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800210a:	2306      	movs	r3, #6
 800210c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 800210e:	2300      	movs	r3, #0
 8002110:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002112:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002116:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002118:	2304      	movs	r3, #4
 800211a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800211c:	2300      	movs	r3, #0
 800211e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8002120:	2300      	movs	r3, #0
 8002122:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002124:	1d3b      	adds	r3, r7, #4
 8002126:	4619      	mov	r1, r3
 8002128:	4805      	ldr	r0, [pc, #20]	; (8002140 <MX_ADC3_Init+0xd0>)
 800212a:	f002 fb53 	bl	80047d4 <HAL_ADC_ConfigChannel>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8002134:	f000 fdcc 	bl	8002cd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002138:	bf00      	nop
 800213a:	3728      	adds	r7, #40	; 0x28
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	24000de0 	.word	0x24000de0
 8002144:	58026000 	.word	0x58026000
 8002148:	04300002 	.word	0x04300002

0800214c <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8002150:	4b2e      	ldr	r3, [pc, #184]	; (800220c <MX_FDCAN3_Init+0xc0>)
 8002152:	4a2f      	ldr	r2, [pc, #188]	; (8002210 <MX_FDCAN3_Init+0xc4>)
 8002154:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002156:	4b2d      	ldr	r3, [pc, #180]	; (800220c <MX_FDCAN3_Init+0xc0>)
 8002158:	2200      	movs	r2, #0
 800215a:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 800215c:	4b2b      	ldr	r3, [pc, #172]	; (800220c <MX_FDCAN3_Init+0xc0>)
 800215e:	2200      	movs	r2, #0
 8002160:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8002162:	4b2a      	ldr	r3, [pc, #168]	; (800220c <MX_FDCAN3_Init+0xc0>)
 8002164:	2200      	movs	r2, #0
 8002166:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8002168:	4b28      	ldr	r3, [pc, #160]	; (800220c <MX_FDCAN3_Init+0xc0>)
 800216a:	2200      	movs	r2, #0
 800216c:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 800216e:	4b27      	ldr	r3, [pc, #156]	; (800220c <MX_FDCAN3_Init+0xc0>)
 8002170:	2200      	movs	r2, #0
 8002172:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8002174:	4b25      	ldr	r3, [pc, #148]	; (800220c <MX_FDCAN3_Init+0xc0>)
 8002176:	2210      	movs	r2, #16
 8002178:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 800217a:	4b24      	ldr	r3, [pc, #144]	; (800220c <MX_FDCAN3_Init+0xc0>)
 800217c:	2201      	movs	r2, #1
 800217e:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8002180:	4b22      	ldr	r3, [pc, #136]	; (800220c <MX_FDCAN3_Init+0xc0>)
 8002182:	2202      	movs	r2, #2
 8002184:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8002186:	4b21      	ldr	r3, [pc, #132]	; (800220c <MX_FDCAN3_Init+0xc0>)
 8002188:	2202      	movs	r2, #2
 800218a:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 800218c:	4b1f      	ldr	r3, [pc, #124]	; (800220c <MX_FDCAN3_Init+0xc0>)
 800218e:	2201      	movs	r2, #1
 8002190:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8002192:	4b1e      	ldr	r3, [pc, #120]	; (800220c <MX_FDCAN3_Init+0xc0>)
 8002194:	2201      	movs	r2, #1
 8002196:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8002198:	4b1c      	ldr	r3, [pc, #112]	; (800220c <MX_FDCAN3_Init+0xc0>)
 800219a:	2201      	movs	r2, #1
 800219c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 800219e:	4b1b      	ldr	r3, [pc, #108]	; (800220c <MX_FDCAN3_Init+0xc0>)
 80021a0:	2201      	movs	r2, #1
 80021a2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 80021a4:	4b19      	ldr	r3, [pc, #100]	; (800220c <MX_FDCAN3_Init+0xc0>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 80021aa:	4b18      	ldr	r3, [pc, #96]	; (800220c <MX_FDCAN3_Init+0xc0>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 80021b0:	4b16      	ldr	r3, [pc, #88]	; (800220c <MX_FDCAN3_Init+0xc0>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 80021b6:	4b15      	ldr	r3, [pc, #84]	; (800220c <MX_FDCAN3_Init+0xc0>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80021bc:	4b13      	ldr	r3, [pc, #76]	; (800220c <MX_FDCAN3_Init+0xc0>)
 80021be:	2204      	movs	r2, #4
 80021c0:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 80021c2:	4b12      	ldr	r3, [pc, #72]	; (800220c <MX_FDCAN3_Init+0xc0>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80021c8:	4b10      	ldr	r3, [pc, #64]	; (800220c <MX_FDCAN3_Init+0xc0>)
 80021ca:	2204      	movs	r2, #4
 80021cc:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 80021ce:	4b0f      	ldr	r3, [pc, #60]	; (800220c <MX_FDCAN3_Init+0xc0>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80021d4:	4b0d      	ldr	r3, [pc, #52]	; (800220c <MX_FDCAN3_Init+0xc0>)
 80021d6:	2204      	movs	r2, #4
 80021d8:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 80021da:	4b0c      	ldr	r3, [pc, #48]	; (800220c <MX_FDCAN3_Init+0xc0>)
 80021dc:	2200      	movs	r2, #0
 80021de:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 80021e0:	4b0a      	ldr	r3, [pc, #40]	; (800220c <MX_FDCAN3_Init+0xc0>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 80021e6:	4b09      	ldr	r3, [pc, #36]	; (800220c <MX_FDCAN3_Init+0xc0>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80021ec:	4b07      	ldr	r3, [pc, #28]	; (800220c <MX_FDCAN3_Init+0xc0>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80021f2:	4b06      	ldr	r3, [pc, #24]	; (800220c <MX_FDCAN3_Init+0xc0>)
 80021f4:	2204      	movs	r2, #4
 80021f6:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 80021f8:	4804      	ldr	r0, [pc, #16]	; (800220c <MX_FDCAN3_Init+0xc0>)
 80021fa:	f005 fbf1 	bl	80079e0 <HAL_FDCAN_Init>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8002204:	f000 fd64 	bl	8002cd0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8002208:	bf00      	nop
 800220a:	bd80      	pop	{r7, pc}
 800220c:	24000f40 	.word	0x24000f40
 8002210:	4000d400 	.word	0x4000d400

08002214 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002218:	4b1b      	ldr	r3, [pc, #108]	; (8002288 <MX_I2C2_Init+0x74>)
 800221a:	4a1c      	ldr	r2, [pc, #112]	; (800228c <MX_I2C2_Init+0x78>)
 800221c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 800221e:	4b1a      	ldr	r3, [pc, #104]	; (8002288 <MX_I2C2_Init+0x74>)
 8002220:	4a1b      	ldr	r2, [pc, #108]	; (8002290 <MX_I2C2_Init+0x7c>)
 8002222:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002224:	4b18      	ldr	r3, [pc, #96]	; (8002288 <MX_I2C2_Init+0x74>)
 8002226:	2200      	movs	r2, #0
 8002228:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800222a:	4b17      	ldr	r3, [pc, #92]	; (8002288 <MX_I2C2_Init+0x74>)
 800222c:	2201      	movs	r2, #1
 800222e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002230:	4b15      	ldr	r3, [pc, #84]	; (8002288 <MX_I2C2_Init+0x74>)
 8002232:	2200      	movs	r2, #0
 8002234:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002236:	4b14      	ldr	r3, [pc, #80]	; (8002288 <MX_I2C2_Init+0x74>)
 8002238:	2200      	movs	r2, #0
 800223a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800223c:	4b12      	ldr	r3, [pc, #72]	; (8002288 <MX_I2C2_Init+0x74>)
 800223e:	2200      	movs	r2, #0
 8002240:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002242:	4b11      	ldr	r3, [pc, #68]	; (8002288 <MX_I2C2_Init+0x74>)
 8002244:	2200      	movs	r2, #0
 8002246:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002248:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <MX_I2C2_Init+0x74>)
 800224a:	2200      	movs	r2, #0
 800224c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800224e:	480e      	ldr	r0, [pc, #56]	; (8002288 <MX_I2C2_Init+0x74>)
 8002250:	f006 f904 	bl	800845c <HAL_I2C_Init>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800225a:	f000 fd39 	bl	8002cd0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800225e:	2100      	movs	r1, #0
 8002260:	4809      	ldr	r0, [pc, #36]	; (8002288 <MX_I2C2_Init+0x74>)
 8002262:	f006 f98b 	bl	800857c <HAL_I2CEx_ConfigAnalogFilter>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800226c:	f000 fd30 	bl	8002cd0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002270:	2100      	movs	r1, #0
 8002272:	4805      	ldr	r0, [pc, #20]	; (8002288 <MX_I2C2_Init+0x74>)
 8002274:	f006 f9cd 	bl	8008612 <HAL_I2CEx_ConfigDigitalFilter>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800227e:	f000 fd27 	bl	8002cd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	24000fe0 	.word	0x24000fe0
 800228c:	40005800 	.word	0x40005800
 8002290:	20303e5d 	.word	0x20303e5d

08002294 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8002298:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <MX_SDMMC2_SD_Init+0x34>)
 800229a:	4a0c      	ldr	r2, [pc, #48]	; (80022cc <MX_SDMMC2_SD_Init+0x38>)
 800229c:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800229e:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <MX_SDMMC2_SD_Init+0x34>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80022a4:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <MX_SDMMC2_SD_Init+0x34>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80022aa:	4b07      	ldr	r3, [pc, #28]	; (80022c8 <MX_SDMMC2_SD_Init+0x34>)
 80022ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022b0:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80022b2:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <MX_SDMMC2_SD_Init+0x34>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 80022b8:	4b03      	ldr	r3, [pc, #12]	; (80022c8 <MX_SDMMC2_SD_Init+0x34>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 80022be:	bf00      	nop
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	24001034 	.word	0x24001034
 80022cc:	48022400 	.word	0x48022400

080022d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80022d4:	4b27      	ldr	r3, [pc, #156]	; (8002374 <MX_SPI1_Init+0xa4>)
 80022d6:	4a28      	ldr	r2, [pc, #160]	; (8002378 <MX_SPI1_Init+0xa8>)
 80022d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80022da:	4b26      	ldr	r3, [pc, #152]	; (8002374 <MX_SPI1_Init+0xa4>)
 80022dc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80022e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022e2:	4b24      	ldr	r3, [pc, #144]	; (8002374 <MX_SPI1_Init+0xa4>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80022e8:	4b22      	ldr	r3, [pc, #136]	; (8002374 <MX_SPI1_Init+0xa4>)
 80022ea:	2207      	movs	r2, #7
 80022ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022ee:	4b21      	ldr	r3, [pc, #132]	; (8002374 <MX_SPI1_Init+0xa4>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022f4:	4b1f      	ldr	r3, [pc, #124]	; (8002374 <MX_SPI1_Init+0xa4>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80022fa:	4b1e      	ldr	r3, [pc, #120]	; (8002374 <MX_SPI1_Init+0xa4>)
 80022fc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002300:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002302:	4b1c      	ldr	r3, [pc, #112]	; (8002374 <MX_SPI1_Init+0xa4>)
 8002304:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002308:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800230a:	4b1a      	ldr	r3, [pc, #104]	; (8002374 <MX_SPI1_Init+0xa4>)
 800230c:	2200      	movs	r2, #0
 800230e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002310:	4b18      	ldr	r3, [pc, #96]	; (8002374 <MX_SPI1_Init+0xa4>)
 8002312:	2200      	movs	r2, #0
 8002314:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002316:	4b17      	ldr	r3, [pc, #92]	; (8002374 <MX_SPI1_Init+0xa4>)
 8002318:	2200      	movs	r2, #0
 800231a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800231c:	4b15      	ldr	r3, [pc, #84]	; (8002374 <MX_SPI1_Init+0xa4>)
 800231e:	2200      	movs	r2, #0
 8002320:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002322:	4b14      	ldr	r3, [pc, #80]	; (8002374 <MX_SPI1_Init+0xa4>)
 8002324:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002328:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800232a:	4b12      	ldr	r3, [pc, #72]	; (8002374 <MX_SPI1_Init+0xa4>)
 800232c:	2200      	movs	r2, #0
 800232e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002330:	4b10      	ldr	r3, [pc, #64]	; (8002374 <MX_SPI1_Init+0xa4>)
 8002332:	2200      	movs	r2, #0
 8002334:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002336:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <MX_SPI1_Init+0xa4>)
 8002338:	2200      	movs	r2, #0
 800233a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800233c:	4b0d      	ldr	r3, [pc, #52]	; (8002374 <MX_SPI1_Init+0xa4>)
 800233e:	2200      	movs	r2, #0
 8002340:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002342:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <MX_SPI1_Init+0xa4>)
 8002344:	2200      	movs	r2, #0
 8002346:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002348:	4b0a      	ldr	r3, [pc, #40]	; (8002374 <MX_SPI1_Init+0xa4>)
 800234a:	2200      	movs	r2, #0
 800234c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800234e:	4b09      	ldr	r3, [pc, #36]	; (8002374 <MX_SPI1_Init+0xa4>)
 8002350:	2200      	movs	r2, #0
 8002352:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002354:	4b07      	ldr	r3, [pc, #28]	; (8002374 <MX_SPI1_Init+0xa4>)
 8002356:	2200      	movs	r2, #0
 8002358:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800235a:	4b06      	ldr	r3, [pc, #24]	; (8002374 <MX_SPI1_Init+0xa4>)
 800235c:	2200      	movs	r2, #0
 800235e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002360:	4804      	ldr	r0, [pc, #16]	; (8002374 <MX_SPI1_Init+0xa4>)
 8002362:	f00c fcbf 	bl	800ece4 <HAL_SPI_Init>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800236c:	f000 fcb0 	bl	8002cd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002370:	bf00      	nop
 8002372:	bd80      	pop	{r7, pc}
 8002374:	240010b0 	.word	0x240010b0
 8002378:	40013000 	.word	0x40013000

0800237c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002380:	4b27      	ldr	r3, [pc, #156]	; (8002420 <MX_SPI2_Init+0xa4>)
 8002382:	4a28      	ldr	r2, [pc, #160]	; (8002424 <MX_SPI2_Init+0xa8>)
 8002384:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002386:	4b26      	ldr	r3, [pc, #152]	; (8002420 <MX_SPI2_Init+0xa4>)
 8002388:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800238c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800238e:	4b24      	ldr	r3, [pc, #144]	; (8002420 <MX_SPI2_Init+0xa4>)
 8002390:	2200      	movs	r2, #0
 8002392:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002394:	4b22      	ldr	r3, [pc, #136]	; (8002420 <MX_SPI2_Init+0xa4>)
 8002396:	2207      	movs	r2, #7
 8002398:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800239a:	4b21      	ldr	r3, [pc, #132]	; (8002420 <MX_SPI2_Init+0xa4>)
 800239c:	2200      	movs	r2, #0
 800239e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023a0:	4b1f      	ldr	r3, [pc, #124]	; (8002420 <MX_SPI2_Init+0xa4>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80023a6:	4b1e      	ldr	r3, [pc, #120]	; (8002420 <MX_SPI2_Init+0xa4>)
 80023a8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80023ac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80023ae:	4b1c      	ldr	r3, [pc, #112]	; (8002420 <MX_SPI2_Init+0xa4>)
 80023b0:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80023b4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023b6:	4b1a      	ldr	r3, [pc, #104]	; (8002420 <MX_SPI2_Init+0xa4>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80023bc:	4b18      	ldr	r3, [pc, #96]	; (8002420 <MX_SPI2_Init+0xa4>)
 80023be:	2200      	movs	r2, #0
 80023c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023c2:	4b17      	ldr	r3, [pc, #92]	; (8002420 <MX_SPI2_Init+0xa4>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80023c8:	4b15      	ldr	r3, [pc, #84]	; (8002420 <MX_SPI2_Init+0xa4>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80023ce:	4b14      	ldr	r3, [pc, #80]	; (8002420 <MX_SPI2_Init+0xa4>)
 80023d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023d4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80023d6:	4b12      	ldr	r3, [pc, #72]	; (8002420 <MX_SPI2_Init+0xa4>)
 80023d8:	2200      	movs	r2, #0
 80023da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80023dc:	4b10      	ldr	r3, [pc, #64]	; (8002420 <MX_SPI2_Init+0xa4>)
 80023de:	2200      	movs	r2, #0
 80023e0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80023e2:	4b0f      	ldr	r3, [pc, #60]	; (8002420 <MX_SPI2_Init+0xa4>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80023e8:	4b0d      	ldr	r3, [pc, #52]	; (8002420 <MX_SPI2_Init+0xa4>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80023ee:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <MX_SPI2_Init+0xa4>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80023f4:	4b0a      	ldr	r3, [pc, #40]	; (8002420 <MX_SPI2_Init+0xa4>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80023fa:	4b09      	ldr	r3, [pc, #36]	; (8002420 <MX_SPI2_Init+0xa4>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002400:	4b07      	ldr	r3, [pc, #28]	; (8002420 <MX_SPI2_Init+0xa4>)
 8002402:	2200      	movs	r2, #0
 8002404:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002406:	4b06      	ldr	r3, [pc, #24]	; (8002420 <MX_SPI2_Init+0xa4>)
 8002408:	2200      	movs	r2, #0
 800240a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800240c:	4804      	ldr	r0, [pc, #16]	; (8002420 <MX_SPI2_Init+0xa4>)
 800240e:	f00c fc69 	bl	800ece4 <HAL_SPI_Init>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8002418:	f000 fc5a 	bl	8002cd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800241c:	bf00      	nop
 800241e:	bd80      	pop	{r7, pc}
 8002420:	24001138 	.word	0x24001138
 8002424:	40003800 	.word	0x40003800

08002428 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800242c:	4b27      	ldr	r3, [pc, #156]	; (80024cc <MX_SPI3_Init+0xa4>)
 800242e:	4a28      	ldr	r2, [pc, #160]	; (80024d0 <MX_SPI3_Init+0xa8>)
 8002430:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002432:	4b26      	ldr	r3, [pc, #152]	; (80024cc <MX_SPI3_Init+0xa4>)
 8002434:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002438:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800243a:	4b24      	ldr	r3, [pc, #144]	; (80024cc <MX_SPI3_Init+0xa4>)
 800243c:	2200      	movs	r2, #0
 800243e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002440:	4b22      	ldr	r3, [pc, #136]	; (80024cc <MX_SPI3_Init+0xa4>)
 8002442:	2207      	movs	r2, #7
 8002444:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002446:	4b21      	ldr	r3, [pc, #132]	; (80024cc <MX_SPI3_Init+0xa4>)
 8002448:	2200      	movs	r2, #0
 800244a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800244c:	4b1f      	ldr	r3, [pc, #124]	; (80024cc <MX_SPI3_Init+0xa4>)
 800244e:	2200      	movs	r2, #0
 8002450:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002452:	4b1e      	ldr	r3, [pc, #120]	; (80024cc <MX_SPI3_Init+0xa4>)
 8002454:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002458:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800245a:	4b1c      	ldr	r3, [pc, #112]	; (80024cc <MX_SPI3_Init+0xa4>)
 800245c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002460:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002462:	4b1a      	ldr	r3, [pc, #104]	; (80024cc <MX_SPI3_Init+0xa4>)
 8002464:	2200      	movs	r2, #0
 8002466:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002468:	4b18      	ldr	r3, [pc, #96]	; (80024cc <MX_SPI3_Init+0xa4>)
 800246a:	2200      	movs	r2, #0
 800246c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800246e:	4b17      	ldr	r3, [pc, #92]	; (80024cc <MX_SPI3_Init+0xa4>)
 8002470:	2200      	movs	r2, #0
 8002472:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8002474:	4b15      	ldr	r3, [pc, #84]	; (80024cc <MX_SPI3_Init+0xa4>)
 8002476:	2200      	movs	r2, #0
 8002478:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800247a:	4b14      	ldr	r3, [pc, #80]	; (80024cc <MX_SPI3_Init+0xa4>)
 800247c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002480:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002482:	4b12      	ldr	r3, [pc, #72]	; (80024cc <MX_SPI3_Init+0xa4>)
 8002484:	2200      	movs	r2, #0
 8002486:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002488:	4b10      	ldr	r3, [pc, #64]	; (80024cc <MX_SPI3_Init+0xa4>)
 800248a:	2200      	movs	r2, #0
 800248c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800248e:	4b0f      	ldr	r3, [pc, #60]	; (80024cc <MX_SPI3_Init+0xa4>)
 8002490:	2200      	movs	r2, #0
 8002492:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002494:	4b0d      	ldr	r3, [pc, #52]	; (80024cc <MX_SPI3_Init+0xa4>)
 8002496:	2200      	movs	r2, #0
 8002498:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800249a:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <MX_SPI3_Init+0xa4>)
 800249c:	2200      	movs	r2, #0
 800249e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80024a0:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <MX_SPI3_Init+0xa4>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80024a6:	4b09      	ldr	r3, [pc, #36]	; (80024cc <MX_SPI3_Init+0xa4>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80024ac:	4b07      	ldr	r3, [pc, #28]	; (80024cc <MX_SPI3_Init+0xa4>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80024b2:	4b06      	ldr	r3, [pc, #24]	; (80024cc <MX_SPI3_Init+0xa4>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80024b8:	4804      	ldr	r0, [pc, #16]	; (80024cc <MX_SPI3_Init+0xa4>)
 80024ba:	f00c fc13 	bl	800ece4 <HAL_SPI_Init>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 80024c4:	f000 fc04 	bl	8002cd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80024c8:	bf00      	nop
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	240011c0 	.word	0x240011c0
 80024d0:	40003c00 	.word	0x40003c00

080024d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08a      	sub	sp, #40	; 0x28
 80024d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024da:	f107 031c 	add.w	r3, r7, #28
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	605a      	str	r2, [r3, #4]
 80024e4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024e6:	463b      	mov	r3, r7
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	605a      	str	r2, [r3, #4]
 80024ee:	609a      	str	r2, [r3, #8]
 80024f0:	60da      	str	r2, [r3, #12]
 80024f2:	611a      	str	r2, [r3, #16]
 80024f4:	615a      	str	r2, [r3, #20]
 80024f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024f8:	4b21      	ldr	r3, [pc, #132]	; (8002580 <MX_TIM2_Init+0xac>)
 80024fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002500:	4b1f      	ldr	r3, [pc, #124]	; (8002580 <MX_TIM2_Init+0xac>)
 8002502:	2200      	movs	r2, #0
 8002504:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002506:	4b1e      	ldr	r3, [pc, #120]	; (8002580 <MX_TIM2_Init+0xac>)
 8002508:	2200      	movs	r2, #0
 800250a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 800250c:	4b1c      	ldr	r3, [pc, #112]	; (8002580 <MX_TIM2_Init+0xac>)
 800250e:	225a      	movs	r2, #90	; 0x5a
 8002510:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002512:	4b1b      	ldr	r3, [pc, #108]	; (8002580 <MX_TIM2_Init+0xac>)
 8002514:	2200      	movs	r2, #0
 8002516:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002518:	4b19      	ldr	r3, [pc, #100]	; (8002580 <MX_TIM2_Init+0xac>)
 800251a:	2200      	movs	r2, #0
 800251c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800251e:	4818      	ldr	r0, [pc, #96]	; (8002580 <MX_TIM2_Init+0xac>)
 8002520:	f00d f979 	bl	800f816 <HAL_TIM_PWM_Init>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800252a:	f000 fbd1 	bl	8002cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800252e:	2300      	movs	r3, #0
 8002530:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002532:	2300      	movs	r3, #0
 8002534:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002536:	f107 031c 	add.w	r3, r7, #28
 800253a:	4619      	mov	r1, r3
 800253c:	4810      	ldr	r0, [pc, #64]	; (8002580 <MX_TIM2_Init+0xac>)
 800253e:	f00e fbff 	bl	8010d40 <HAL_TIMEx_MasterConfigSynchronization>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002548:	f000 fbc2 	bl	8002cd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800254c:	2360      	movs	r3, #96	; 0x60
 800254e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002550:	2300      	movs	r3, #0
 8002552:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002554:	2300      	movs	r3, #0
 8002556:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002558:	2300      	movs	r3, #0
 800255a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800255c:	463b      	mov	r3, r7
 800255e:	2208      	movs	r2, #8
 8002560:	4619      	mov	r1, r3
 8002562:	4807      	ldr	r0, [pc, #28]	; (8002580 <MX_TIM2_Init+0xac>)
 8002564:	f00d fe1e 	bl	80101a4 <HAL_TIM_PWM_ConfigChannel>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800256e:	f000 fbaf 	bl	8002cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002572:	4803      	ldr	r0, [pc, #12]	; (8002580 <MX_TIM2_Init+0xac>)
 8002574:	f001 f8a0 	bl	80036b8 <HAL_TIM_MspPostInit>

}
 8002578:	bf00      	nop
 800257a:	3728      	adds	r7, #40	; 0x28
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	24001248 	.word	0x24001248

08002584 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b08a      	sub	sp, #40	; 0x28
 8002588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800258a:	f107 031c 	add.w	r3, r7, #28
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	605a      	str	r2, [r3, #4]
 8002594:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002596:	463b      	mov	r3, r7
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	609a      	str	r2, [r3, #8]
 80025a0:	60da      	str	r2, [r3, #12]
 80025a2:	611a      	str	r2, [r3, #16]
 80025a4:	615a      	str	r2, [r3, #20]
 80025a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025a8:	4b26      	ldr	r3, [pc, #152]	; (8002644 <MX_TIM3_Init+0xc0>)
 80025aa:	4a27      	ldr	r2, [pc, #156]	; (8002648 <MX_TIM3_Init+0xc4>)
 80025ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80025ae:	4b25      	ldr	r3, [pc, #148]	; (8002644 <MX_TIM3_Init+0xc0>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025b4:	4b23      	ldr	r3, [pc, #140]	; (8002644 <MX_TIM3_Init+0xc0>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 80025ba:	4b22      	ldr	r3, [pc, #136]	; (8002644 <MX_TIM3_Init+0xc0>)
 80025bc:	225a      	movs	r2, #90	; 0x5a
 80025be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025c0:	4b20      	ldr	r3, [pc, #128]	; (8002644 <MX_TIM3_Init+0xc0>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025c6:	4b1f      	ldr	r3, [pc, #124]	; (8002644 <MX_TIM3_Init+0xc0>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80025cc:	481d      	ldr	r0, [pc, #116]	; (8002644 <MX_TIM3_Init+0xc0>)
 80025ce:	f00d f922 	bl	800f816 <HAL_TIM_PWM_Init>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80025d8:	f000 fb7a 	bl	8002cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025dc:	2300      	movs	r3, #0
 80025de:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025e0:	2300      	movs	r3, #0
 80025e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025e4:	f107 031c 	add.w	r3, r7, #28
 80025e8:	4619      	mov	r1, r3
 80025ea:	4816      	ldr	r0, [pc, #88]	; (8002644 <MX_TIM3_Init+0xc0>)
 80025ec:	f00e fba8 	bl	8010d40 <HAL_TIMEx_MasterConfigSynchronization>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80025f6:	f000 fb6b 	bl	8002cd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025fa:	2360      	movs	r3, #96	; 0x60
 80025fc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80025fe:	2300      	movs	r3, #0
 8002600:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002602:	2300      	movs	r3, #0
 8002604:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002606:	2300      	movs	r3, #0
 8002608:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800260a:	463b      	mov	r3, r7
 800260c:	2200      	movs	r2, #0
 800260e:	4619      	mov	r1, r3
 8002610:	480c      	ldr	r0, [pc, #48]	; (8002644 <MX_TIM3_Init+0xc0>)
 8002612:	f00d fdc7 	bl	80101a4 <HAL_TIM_PWM_ConfigChannel>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800261c:	f000 fb58 	bl	8002cd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002620:	463b      	mov	r3, r7
 8002622:	2204      	movs	r2, #4
 8002624:	4619      	mov	r1, r3
 8002626:	4807      	ldr	r0, [pc, #28]	; (8002644 <MX_TIM3_Init+0xc0>)
 8002628:	f00d fdbc 	bl	80101a4 <HAL_TIM_PWM_ConfigChannel>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002632:	f000 fb4d 	bl	8002cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002636:	4803      	ldr	r0, [pc, #12]	; (8002644 <MX_TIM3_Init+0xc0>)
 8002638:	f001 f83e 	bl	80036b8 <HAL_TIM_MspPostInit>

}
 800263c:	bf00      	nop
 800263e:	3728      	adds	r7, #40	; 0x28
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	24001294 	.word	0x24001294
 8002648:	40000400 	.word	0x40000400

0800264c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08a      	sub	sp, #40	; 0x28
 8002650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002652:	f107 031c 	add.w	r3, r7, #28
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	605a      	str	r2, [r3, #4]
 800265c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800265e:	463b      	mov	r3, r7
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	605a      	str	r2, [r3, #4]
 8002666:	609a      	str	r2, [r3, #8]
 8002668:	60da      	str	r2, [r3, #12]
 800266a:	611a      	str	r2, [r3, #16]
 800266c:	615a      	str	r2, [r3, #20]
 800266e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002670:	4b32      	ldr	r3, [pc, #200]	; (800273c <MX_TIM4_Init+0xf0>)
 8002672:	4a33      	ldr	r2, [pc, #204]	; (8002740 <MX_TIM4_Init+0xf4>)
 8002674:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 28;
 8002676:	4b31      	ldr	r3, [pc, #196]	; (800273c <MX_TIM4_Init+0xf0>)
 8002678:	221c      	movs	r2, #28
 800267a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800267c:	4b2f      	ldr	r3, [pc, #188]	; (800273c <MX_TIM4_Init+0xf0>)
 800267e:	2200      	movs	r2, #0
 8002680:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8002682:	4b2e      	ldr	r3, [pc, #184]	; (800273c <MX_TIM4_Init+0xf0>)
 8002684:	f242 720f 	movw	r2, #9999	; 0x270f
 8002688:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800268a:	4b2c      	ldr	r3, [pc, #176]	; (800273c <MX_TIM4_Init+0xf0>)
 800268c:	2200      	movs	r2, #0
 800268e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002690:	4b2a      	ldr	r3, [pc, #168]	; (800273c <MX_TIM4_Init+0xf0>)
 8002692:	2200      	movs	r2, #0
 8002694:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002696:	4829      	ldr	r0, [pc, #164]	; (800273c <MX_TIM4_Init+0xf0>)
 8002698:	f00d f8bd 	bl	800f816 <HAL_TIM_PWM_Init>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80026a2:	f000 fb15 	bl	8002cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026a6:	2300      	movs	r3, #0
 80026a8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026aa:	2300      	movs	r3, #0
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026ae:	f107 031c 	add.w	r3, r7, #28
 80026b2:	4619      	mov	r1, r3
 80026b4:	4821      	ldr	r0, [pc, #132]	; (800273c <MX_TIM4_Init+0xf0>)
 80026b6:	f00e fb43 	bl	8010d40 <HAL_TIMEx_MasterConfigSynchronization>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80026c0:	f000 fb06 	bl	8002cd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026c4:	2360      	movs	r3, #96	; 0x60
 80026c6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80026c8:	2300      	movs	r3, #0
 80026ca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026d0:	2300      	movs	r3, #0
 80026d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026d4:	463b      	mov	r3, r7
 80026d6:	2200      	movs	r2, #0
 80026d8:	4619      	mov	r1, r3
 80026da:	4818      	ldr	r0, [pc, #96]	; (800273c <MX_TIM4_Init+0xf0>)
 80026dc:	f00d fd62 	bl	80101a4 <HAL_TIM_PWM_ConfigChannel>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80026e6:	f000 faf3 	bl	8002cd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026ea:	463b      	mov	r3, r7
 80026ec:	2204      	movs	r2, #4
 80026ee:	4619      	mov	r1, r3
 80026f0:	4812      	ldr	r0, [pc, #72]	; (800273c <MX_TIM4_Init+0xf0>)
 80026f2:	f00d fd57 	bl	80101a4 <HAL_TIM_PWM_ConfigChannel>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80026fc:	f000 fae8 	bl	8002cd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002700:	463b      	mov	r3, r7
 8002702:	2208      	movs	r2, #8
 8002704:	4619      	mov	r1, r3
 8002706:	480d      	ldr	r0, [pc, #52]	; (800273c <MX_TIM4_Init+0xf0>)
 8002708:	f00d fd4c 	bl	80101a4 <HAL_TIM_PWM_ConfigChannel>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8002712:	f000 fadd 	bl	8002cd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002716:	463b      	mov	r3, r7
 8002718:	220c      	movs	r2, #12
 800271a:	4619      	mov	r1, r3
 800271c:	4807      	ldr	r0, [pc, #28]	; (800273c <MX_TIM4_Init+0xf0>)
 800271e:	f00d fd41 	bl	80101a4 <HAL_TIM_PWM_ConfigChannel>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8002728:	f000 fad2 	bl	8002cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800272c:	4803      	ldr	r0, [pc, #12]	; (800273c <MX_TIM4_Init+0xf0>)
 800272e:	f000 ffc3 	bl	80036b8 <HAL_TIM_MspPostInit>

}
 8002732:	bf00      	nop
 8002734:	3728      	adds	r7, #40	; 0x28
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	240012e0 	.word	0x240012e0
 8002740:	40000800 	.word	0x40000800

08002744 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b08a      	sub	sp, #40	; 0x28
 8002748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800274a:	f107 031c 	add.w	r3, r7, #28
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	605a      	str	r2, [r3, #4]
 8002754:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002756:	463b      	mov	r3, r7
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	605a      	str	r2, [r3, #4]
 800275e:	609a      	str	r2, [r3, #8]
 8002760:	60da      	str	r2, [r3, #12]
 8002762:	611a      	str	r2, [r3, #16]
 8002764:	615a      	str	r2, [r3, #20]
 8002766:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002768:	4b21      	ldr	r3, [pc, #132]	; (80027f0 <MX_TIM5_Init+0xac>)
 800276a:	4a22      	ldr	r2, [pc, #136]	; (80027f4 <MX_TIM5_Init+0xb0>)
 800276c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800276e:	4b20      	ldr	r3, [pc, #128]	; (80027f0 <MX_TIM5_Init+0xac>)
 8002770:	2200      	movs	r2, #0
 8002772:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002774:	4b1e      	ldr	r3, [pc, #120]	; (80027f0 <MX_TIM5_Init+0xac>)
 8002776:	2200      	movs	r2, #0
 8002778:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 800277a:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <MX_TIM5_Init+0xac>)
 800277c:	225a      	movs	r2, #90	; 0x5a
 800277e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002780:	4b1b      	ldr	r3, [pc, #108]	; (80027f0 <MX_TIM5_Init+0xac>)
 8002782:	2200      	movs	r2, #0
 8002784:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002786:	4b1a      	ldr	r3, [pc, #104]	; (80027f0 <MX_TIM5_Init+0xac>)
 8002788:	2200      	movs	r2, #0
 800278a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800278c:	4818      	ldr	r0, [pc, #96]	; (80027f0 <MX_TIM5_Init+0xac>)
 800278e:	f00d f842 	bl	800f816 <HAL_TIM_PWM_Init>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002798:	f000 fa9a 	bl	8002cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800279c:	2300      	movs	r3, #0
 800279e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027a0:	2300      	movs	r3, #0
 80027a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80027a4:	f107 031c 	add.w	r3, r7, #28
 80027a8:	4619      	mov	r1, r3
 80027aa:	4811      	ldr	r0, [pc, #68]	; (80027f0 <MX_TIM5_Init+0xac>)
 80027ac:	f00e fac8 	bl	8010d40 <HAL_TIMEx_MasterConfigSynchronization>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80027b6:	f000 fa8b 	bl	8002cd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027ba:	2360      	movs	r3, #96	; 0x60
 80027bc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80027be:	2300      	movs	r3, #0
 80027c0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027c2:	2300      	movs	r3, #0
 80027c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027c6:	2300      	movs	r3, #0
 80027c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80027ca:	463b      	mov	r3, r7
 80027cc:	220c      	movs	r2, #12
 80027ce:	4619      	mov	r1, r3
 80027d0:	4807      	ldr	r0, [pc, #28]	; (80027f0 <MX_TIM5_Init+0xac>)
 80027d2:	f00d fce7 	bl	80101a4 <HAL_TIM_PWM_ConfigChannel>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80027dc:	f000 fa78 	bl	8002cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80027e0:	4803      	ldr	r0, [pc, #12]	; (80027f0 <MX_TIM5_Init+0xac>)
 80027e2:	f000 ff69 	bl	80036b8 <HAL_TIM_MspPostInit>

}
 80027e6:	bf00      	nop
 80027e8:	3728      	adds	r7, #40	; 0x28
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	2400132c 	.word	0x2400132c
 80027f4:	40000c00 	.word	0x40000c00

080027f8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80027fc:	4b22      	ldr	r3, [pc, #136]	; (8002888 <MX_UART4_Init+0x90>)
 80027fe:	4a23      	ldr	r2, [pc, #140]	; (800288c <MX_UART4_Init+0x94>)
 8002800:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002802:	4b21      	ldr	r3, [pc, #132]	; (8002888 <MX_UART4_Init+0x90>)
 8002804:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002808:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800280a:	4b1f      	ldr	r3, [pc, #124]	; (8002888 <MX_UART4_Init+0x90>)
 800280c:	2200      	movs	r2, #0
 800280e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002810:	4b1d      	ldr	r3, [pc, #116]	; (8002888 <MX_UART4_Init+0x90>)
 8002812:	2200      	movs	r2, #0
 8002814:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002816:	4b1c      	ldr	r3, [pc, #112]	; (8002888 <MX_UART4_Init+0x90>)
 8002818:	2200      	movs	r2, #0
 800281a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800281c:	4b1a      	ldr	r3, [pc, #104]	; (8002888 <MX_UART4_Init+0x90>)
 800281e:	220c      	movs	r2, #12
 8002820:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002822:	4b19      	ldr	r3, [pc, #100]	; (8002888 <MX_UART4_Init+0x90>)
 8002824:	2200      	movs	r2, #0
 8002826:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002828:	4b17      	ldr	r3, [pc, #92]	; (8002888 <MX_UART4_Init+0x90>)
 800282a:	2200      	movs	r2, #0
 800282c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800282e:	4b16      	ldr	r3, [pc, #88]	; (8002888 <MX_UART4_Init+0x90>)
 8002830:	2200      	movs	r2, #0
 8002832:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002834:	4b14      	ldr	r3, [pc, #80]	; (8002888 <MX_UART4_Init+0x90>)
 8002836:	2200      	movs	r2, #0
 8002838:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800283a:	4b13      	ldr	r3, [pc, #76]	; (8002888 <MX_UART4_Init+0x90>)
 800283c:	2200      	movs	r2, #0
 800283e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002840:	4811      	ldr	r0, [pc, #68]	; (8002888 <MX_UART4_Init+0x90>)
 8002842:	f00e fb37 	bl	8010eb4 <HAL_UART_Init>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800284c:	f000 fa40 	bl	8002cd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002850:	2100      	movs	r1, #0
 8002852:	480d      	ldr	r0, [pc, #52]	; (8002888 <MX_UART4_Init+0x90>)
 8002854:	f00f fc3d 	bl	80120d2 <HAL_UARTEx_SetTxFifoThreshold>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800285e:	f000 fa37 	bl	8002cd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002862:	2100      	movs	r1, #0
 8002864:	4808      	ldr	r0, [pc, #32]	; (8002888 <MX_UART4_Init+0x90>)
 8002866:	f00f fc72 	bl	801214e <HAL_UARTEx_SetRxFifoThreshold>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002870:	f000 fa2e 	bl	8002cd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002874:	4804      	ldr	r0, [pc, #16]	; (8002888 <MX_UART4_Init+0x90>)
 8002876:	f00f fbf3 	bl	8012060 <HAL_UARTEx_DisableFifoMode>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002880:	f000 fa26 	bl	8002cd0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002884:	bf00      	nop
 8002886:	bd80      	pop	{r7, pc}
 8002888:	240015d0 	.word	0x240015d0
 800288c:	40004c00 	.word	0x40004c00

08002890 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002894:	4b22      	ldr	r3, [pc, #136]	; (8002920 <MX_USART6_UART_Init+0x90>)
 8002896:	4a23      	ldr	r2, [pc, #140]	; (8002924 <MX_USART6_UART_Init+0x94>)
 8002898:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800289a:	4b21      	ldr	r3, [pc, #132]	; (8002920 <MX_USART6_UART_Init+0x90>)
 800289c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028a0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80028a2:	4b1f      	ldr	r3, [pc, #124]	; (8002920 <MX_USART6_UART_Init+0x90>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80028a8:	4b1d      	ldr	r3, [pc, #116]	; (8002920 <MX_USART6_UART_Init+0x90>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80028ae:	4b1c      	ldr	r3, [pc, #112]	; (8002920 <MX_USART6_UART_Init+0x90>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80028b4:	4b1a      	ldr	r3, [pc, #104]	; (8002920 <MX_USART6_UART_Init+0x90>)
 80028b6:	220c      	movs	r2, #12
 80028b8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ba:	4b19      	ldr	r3, [pc, #100]	; (8002920 <MX_USART6_UART_Init+0x90>)
 80028bc:	2200      	movs	r2, #0
 80028be:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80028c0:	4b17      	ldr	r3, [pc, #92]	; (8002920 <MX_USART6_UART_Init+0x90>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028c6:	4b16      	ldr	r3, [pc, #88]	; (8002920 <MX_USART6_UART_Init+0x90>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028cc:	4b14      	ldr	r3, [pc, #80]	; (8002920 <MX_USART6_UART_Init+0x90>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028d2:	4b13      	ldr	r3, [pc, #76]	; (8002920 <MX_USART6_UART_Init+0x90>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80028d8:	4811      	ldr	r0, [pc, #68]	; (8002920 <MX_USART6_UART_Init+0x90>)
 80028da:	f00e faeb 	bl	8010eb4 <HAL_UART_Init>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80028e4:	f000 f9f4 	bl	8002cd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028e8:	2100      	movs	r1, #0
 80028ea:	480d      	ldr	r0, [pc, #52]	; (8002920 <MX_USART6_UART_Init+0x90>)
 80028ec:	f00f fbf1 	bl	80120d2 <HAL_UARTEx_SetTxFifoThreshold>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80028f6:	f000 f9eb 	bl	8002cd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028fa:	2100      	movs	r1, #0
 80028fc:	4808      	ldr	r0, [pc, #32]	; (8002920 <MX_USART6_UART_Init+0x90>)
 80028fe:	f00f fc26 	bl	801214e <HAL_UARTEx_SetRxFifoThreshold>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8002908:	f000 f9e2 	bl	8002cd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 800290c:	4804      	ldr	r0, [pc, #16]	; (8002920 <MX_USART6_UART_Init+0x90>)
 800290e:	f00f fba7 	bl	8012060 <HAL_UARTEx_DisableFifoMode>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002918:	f000 f9da 	bl	8002cd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800291c:	bf00      	nop
 800291e:	bd80      	pop	{r7, pc}
 8002920:	24001664 	.word	0x24001664
 8002924:	40011400 	.word	0x40011400

08002928 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800292e:	4b2d      	ldr	r3, [pc, #180]	; (80029e4 <MX_DMA_Init+0xbc>)
 8002930:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002934:	4a2b      	ldr	r2, [pc, #172]	; (80029e4 <MX_DMA_Init+0xbc>)
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800293e:	4b29      	ldr	r3, [pc, #164]	; (80029e4 <MX_DMA_Init+0xbc>)
 8002940:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	607b      	str	r3, [r7, #4]
 800294a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800294c:	4b25      	ldr	r3, [pc, #148]	; (80029e4 <MX_DMA_Init+0xbc>)
 800294e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002952:	4a24      	ldr	r2, [pc, #144]	; (80029e4 <MX_DMA_Init+0xbc>)
 8002954:	f043 0302 	orr.w	r3, r3, #2
 8002958:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800295c:	4b21      	ldr	r3, [pc, #132]	; (80029e4 <MX_DMA_Init+0xbc>)
 800295e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	603b      	str	r3, [r7, #0]
 8002968:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800296a:	2200      	movs	r2, #0
 800296c:	2100      	movs	r1, #0
 800296e:	200b      	movs	r0, #11
 8002970:	f002 ff2d 	bl	80057ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002974:	200b      	movs	r0, #11
 8002976:	f002 ff44 	bl	8005802 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800297a:	2200      	movs	r2, #0
 800297c:	2100      	movs	r1, #0
 800297e:	200c      	movs	r0, #12
 8002980:	f002 ff25 	bl	80057ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002984:	200c      	movs	r0, #12
 8002986:	f002 ff3c 	bl	8005802 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800298a:	2200      	movs	r2, #0
 800298c:	2100      	movs	r1, #0
 800298e:	200d      	movs	r0, #13
 8002990:	f002 ff1d 	bl	80057ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002994:	200d      	movs	r0, #13
 8002996:	f002 ff34 	bl	8005802 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800299a:	2200      	movs	r2, #0
 800299c:	2100      	movs	r1, #0
 800299e:	200e      	movs	r0, #14
 80029a0:	f002 ff15 	bl	80057ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80029a4:	200e      	movs	r0, #14
 80029a6:	f002 ff2c 	bl	8005802 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80029aa:	2200      	movs	r2, #0
 80029ac:	2100      	movs	r1, #0
 80029ae:	200f      	movs	r0, #15
 80029b0:	f002 ff0d 	bl	80057ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80029b4:	200f      	movs	r0, #15
 80029b6:	f002 ff24 	bl	8005802 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80029ba:	2200      	movs	r2, #0
 80029bc:	2100      	movs	r1, #0
 80029be:	2010      	movs	r0, #16
 80029c0:	f002 ff05 	bl	80057ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80029c4:	2010      	movs	r0, #16
 80029c6:	f002 ff1c 	bl	8005802 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80029ca:	2200      	movs	r2, #0
 80029cc:	2100      	movs	r1, #0
 80029ce:	2046      	movs	r0, #70	; 0x46
 80029d0:	f002 fefd 	bl	80057ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80029d4:	2046      	movs	r0, #70	; 0x46
 80029d6:	f002 ff14 	bl	8005802 <HAL_NVIC_EnableIRQ>

}
 80029da:	bf00      	nop
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	58024400 	.word	0x58024400

080029e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08e      	sub	sp, #56	; 0x38
 80029ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	605a      	str	r2, [r3, #4]
 80029f8:	609a      	str	r2, [r3, #8]
 80029fa:	60da      	str	r2, [r3, #12]
 80029fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80029fe:	4bac      	ldr	r3, [pc, #688]	; (8002cb0 <MX_GPIO_Init+0x2c8>)
 8002a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a04:	4aaa      	ldr	r2, [pc, #680]	; (8002cb0 <MX_GPIO_Init+0x2c8>)
 8002a06:	f043 0310 	orr.w	r3, r3, #16
 8002a0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a0e:	4ba8      	ldr	r3, [pc, #672]	; (8002cb0 <MX_GPIO_Init+0x2c8>)
 8002a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a14:	f003 0310 	and.w	r3, r3, #16
 8002a18:	623b      	str	r3, [r7, #32]
 8002a1a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a1c:	4ba4      	ldr	r3, [pc, #656]	; (8002cb0 <MX_GPIO_Init+0x2c8>)
 8002a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a22:	4aa3      	ldr	r2, [pc, #652]	; (8002cb0 <MX_GPIO_Init+0x2c8>)
 8002a24:	f043 0320 	orr.w	r3, r3, #32
 8002a28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a2c:	4ba0      	ldr	r3, [pc, #640]	; (8002cb0 <MX_GPIO_Init+0x2c8>)
 8002a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a32:	f003 0320 	and.w	r3, r3, #32
 8002a36:	61fb      	str	r3, [r7, #28]
 8002a38:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a3a:	4b9d      	ldr	r3, [pc, #628]	; (8002cb0 <MX_GPIO_Init+0x2c8>)
 8002a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a40:	4a9b      	ldr	r2, [pc, #620]	; (8002cb0 <MX_GPIO_Init+0x2c8>)
 8002a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a4a:	4b99      	ldr	r3, [pc, #612]	; (8002cb0 <MX_GPIO_Init+0x2c8>)
 8002a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a54:	61bb      	str	r3, [r7, #24]
 8002a56:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a58:	4b95      	ldr	r3, [pc, #596]	; (8002cb0 <MX_GPIO_Init+0x2c8>)
 8002a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a5e:	4a94      	ldr	r2, [pc, #592]	; (8002cb0 <MX_GPIO_Init+0x2c8>)
 8002a60:	f043 0304 	orr.w	r3, r3, #4
 8002a64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a68:	4b91      	ldr	r3, [pc, #580]	; (8002cb0 <MX_GPIO_Init+0x2c8>)
 8002a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a6e:	f003 0304 	and.w	r3, r3, #4
 8002a72:	617b      	str	r3, [r7, #20]
 8002a74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a76:	4b8e      	ldr	r3, [pc, #568]	; (8002cb0 <MX_GPIO_Init+0x2c8>)
 8002a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a7c:	4a8c      	ldr	r2, [pc, #560]	; (8002cb0 <MX_GPIO_Init+0x2c8>)
 8002a7e:	f043 0301 	orr.w	r3, r3, #1
 8002a82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a86:	4b8a      	ldr	r3, [pc, #552]	; (8002cb0 <MX_GPIO_Init+0x2c8>)
 8002a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	613b      	str	r3, [r7, #16]
 8002a92:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a94:	4b86      	ldr	r3, [pc, #536]	; (8002cb0 <MX_GPIO_Init+0x2c8>)
 8002a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a9a:	4a85      	ldr	r2, [pc, #532]	; (8002cb0 <MX_GPIO_Init+0x2c8>)
 8002a9c:	f043 0302 	orr.w	r3, r3, #2
 8002aa0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002aa4:	4b82      	ldr	r3, [pc, #520]	; (8002cb0 <MX_GPIO_Init+0x2c8>)
 8002aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ab2:	4b7f      	ldr	r3, [pc, #508]	; (8002cb0 <MX_GPIO_Init+0x2c8>)
 8002ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ab8:	4a7d      	ldr	r2, [pc, #500]	; (8002cb0 <MX_GPIO_Init+0x2c8>)
 8002aba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002abe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ac2:	4b7b      	ldr	r3, [pc, #492]	; (8002cb0 <MX_GPIO_Init+0x2c8>)
 8002ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002acc:	60bb      	str	r3, [r7, #8]
 8002ace:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ad0:	4b77      	ldr	r3, [pc, #476]	; (8002cb0 <MX_GPIO_Init+0x2c8>)
 8002ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ad6:	4a76      	ldr	r2, [pc, #472]	; (8002cb0 <MX_GPIO_Init+0x2c8>)
 8002ad8:	f043 0308 	orr.w	r3, r3, #8
 8002adc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ae0:	4b73      	ldr	r3, [pc, #460]	; (8002cb0 <MX_GPIO_Init+0x2c8>)
 8002ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	607b      	str	r3, [r7, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 8002aee:	2200      	movs	r2, #0
 8002af0:	f241 5104 	movw	r1, #5380	; 0x1504
 8002af4:	486f      	ldr	r0, [pc, #444]	; (8002cb4 <MX_GPIO_Init+0x2cc>)
 8002af6:	f005 fc97 	bl	8008428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|ARM2_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8002afa:	2200      	movs	r2, #0
 8002afc:	f248 0106 	movw	r1, #32774	; 0x8006
 8002b00:	486d      	ldr	r0, [pc, #436]	; (8002cb8 <MX_GPIO_Init+0x2d0>)
 8002b02:	f005 fc91 	bl	8008428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002b06:	2200      	movs	r2, #0
 8002b08:	2130      	movs	r1, #48	; 0x30
 8002b0a:	486c      	ldr	r0, [pc, #432]	; (8002cbc <MX_GPIO_Init+0x2d4>)
 8002b0c:	f005 fc8c 	bl	8008428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, GPIO_PIN_RESET);
 8002b10:	2200      	movs	r2, #0
 8002b12:	2102      	movs	r1, #2
 8002b14:	486a      	ldr	r0, [pc, #424]	; (8002cc0 <MX_GPIO_Init+0x2d8>)
 8002b16:	f005 fc87 	bl	8008428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8002b20:	4868      	ldr	r0, [pc, #416]	; (8002cc4 <MX_GPIO_Init+0x2dc>)
 8002b22:	f005 fc81 	bl	8008428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8002b26:	2200      	movs	r2, #0
 8002b28:	210e      	movs	r1, #14
 8002b2a:	4867      	ldr	r0, [pc, #412]	; (8002cc8 <MX_GPIO_Init+0x2e0>)
 8002b2c:	f005 fc7c 	bl	8008428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0, GPIO_PIN_RESET);
 8002b30:	2200      	movs	r2, #0
 8002b32:	f240 3101 	movw	r1, #769	; 0x301
 8002b36:	4865      	ldr	r0, [pc, #404]	; (8002ccc <MX_GPIO_Init+0x2e4>)
 8002b38:	f005 fc76 	bl	8008428 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 8002b3c:	f241 5304 	movw	r3, #5380	; 0x1504
 8002b40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b42:	2301      	movs	r3, #1
 8002b44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b46:	2300      	movs	r3, #0
 8002b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b52:	4619      	mov	r1, r3
 8002b54:	4857      	ldr	r0, [pc, #348]	; (8002cb4 <MX_GPIO_Init+0x2cc>)
 8002b56:	f005 faa7 	bl	80080a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin ARM2_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|ARM2_Pin|GPIO_PIN_15;
 8002b5a:	f248 0306 	movw	r3, #32774	; 0x8006
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b60:	2301      	movs	r3, #1
 8002b62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b70:	4619      	mov	r1, r3
 8002b72:	4851      	ldr	r0, [pc, #324]	; (8002cb8 <MX_GPIO_Init+0x2d0>)
 8002b74:	f005 fa98 	bl	80080a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002b78:	2330      	movs	r3, #48	; 0x30
 8002b7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b84:	2300      	movs	r3, #0
 8002b86:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	484b      	ldr	r0, [pc, #300]	; (8002cbc <MX_GPIO_Init+0x2d4>)
 8002b90:	f005 fa8a 	bl	80080a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PYRO1_Pin */
  GPIO_InitStruct.Pin = PYRO1_Pin;
 8002b94:	2302      	movs	r3, #2
 8002b96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PYRO1_GPIO_Port, &GPIO_InitStruct);
 8002ba4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4845      	ldr	r0, [pc, #276]	; (8002cc0 <MX_GPIO_Init+0x2d8>)
 8002bac:	f005 fa7c 	bl	80080a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 8002bb0:	2304      	movs	r3, #4
 8002bb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 8002bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	483f      	ldr	r0, [pc, #252]	; (8002cc0 <MX_GPIO_Init+0x2d8>)
 8002bc4:	f005 fa70 	bl	80080a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 8002bc8:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bde:	4619      	mov	r1, r3
 8002be0:	4838      	ldr	r0, [pc, #224]	; (8002cc4 <MX_GPIO_Init+0x2dc>)
 8002be2:	f005 fa61 	bl	80080a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 8002be6:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002bea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bec:	2300      	movs	r3, #0
 8002bee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4832      	ldr	r0, [pc, #200]	; (8002cc4 <MX_GPIO_Init+0x2dc>)
 8002bfc:	f005 fa54 	bl	80080a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 8002c00:	2301      	movs	r3, #1
 8002c02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c04:	2300      	movs	r3, #0
 8002c06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 8002c0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c10:	4619      	mov	r1, r3
 8002c12:	482d      	ldr	r0, [pc, #180]	; (8002cc8 <MX_GPIO_Init+0x2e0>)
 8002c14:	f005 fa48 	bl	80080a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 8002c18:	230e      	movs	r3, #14
 8002c1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c20:	2300      	movs	r3, #0
 8002c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c24:	2300      	movs	r3, #0
 8002c26:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4826      	ldr	r0, [pc, #152]	; (8002cc8 <MX_GPIO_Init+0x2e0>)
 8002c30:	f005 fa3a 	bl	80080a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 8002c34:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c46:	4619      	mov	r1, r3
 8002c48:	481a      	ldr	r0, [pc, #104]	; (8002cb4 <MX_GPIO_Init+0x2cc>)
 8002c4a:	f005 fa2d 	bl	80080a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0;
 8002c4e:	f240 3301 	movw	r3, #769	; 0x301
 8002c52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c54:	2301      	movs	r3, #1
 8002c56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c64:	4619      	mov	r1, r3
 8002c66:	4819      	ldr	r0, [pc, #100]	; (8002ccc <MX_GPIO_Init+0x2e4>)
 8002c68:	f005 fa1e 	bl	80080a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 8002c6c:	2310      	movs	r3, #16
 8002c6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c70:	2300      	movs	r3, #0
 8002c72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c74:	2300      	movs	r3, #0
 8002c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4812      	ldr	r0, [pc, #72]	; (8002cc8 <MX_GPIO_Init+0x2e0>)
 8002c80:	f005 fa12 	bl	80080a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c92:	2300      	movs	r3, #0
 8002c94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002c96:	2300      	movs	r3, #0
 8002c98:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4805      	ldr	r0, [pc, #20]	; (8002cb8 <MX_GPIO_Init+0x2d0>)
 8002ca2:	f005 fa01 	bl	80080a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002ca6:	bf00      	nop
 8002ca8:	3738      	adds	r7, #56	; 0x38
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	58024400 	.word	0x58024400
 8002cb4:	58021000 	.word	0x58021000
 8002cb8:	58020000 	.word	0x58020000
 8002cbc:	58020800 	.word	0x58020800
 8002cc0:	58020400 	.word	0x58020400
 8002cc4:	58021400 	.word	0x58021400
 8002cc8:	58021800 	.word	0x58021800
 8002ccc:	58020c00 	.word	0x58020c00

08002cd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cd4:	b672      	cpsid	i
}
 8002cd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002cd8:	e7fe      	b.n	8002cd8 <Error_Handler+0x8>
	...

08002cdc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ce2:	4b0a      	ldr	r3, [pc, #40]	; (8002d0c <HAL_MspInit+0x30>)
 8002ce4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ce8:	4a08      	ldr	r2, [pc, #32]	; (8002d0c <HAL_MspInit+0x30>)
 8002cea:	f043 0302 	orr.w	r3, r3, #2
 8002cee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002cf2:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <HAL_MspInit+0x30>)
 8002cf4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	607b      	str	r3, [r7, #4]
 8002cfe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	58024400 	.word	0x58024400

08002d10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08c      	sub	sp, #48	; 0x30
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d18:	f107 031c 	add.w	r3, r7, #28
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	605a      	str	r2, [r3, #4]
 8002d22:	609a      	str	r2, [r3, #8]
 8002d24:	60da      	str	r2, [r3, #12]
 8002d26:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a5d      	ldr	r2, [pc, #372]	; (8002ea4 <HAL_ADC_MspInit+0x194>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d159      	bne.n	8002de6 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002d32:	4b5d      	ldr	r3, [pc, #372]	; (8002ea8 <HAL_ADC_MspInit+0x198>)
 8002d34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002d38:	4a5b      	ldr	r2, [pc, #364]	; (8002ea8 <HAL_ADC_MspInit+0x198>)
 8002d3a:	f043 0320 	orr.w	r3, r3, #32
 8002d3e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002d42:	4b59      	ldr	r3, [pc, #356]	; (8002ea8 <HAL_ADC_MspInit+0x198>)
 8002d44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002d48:	f003 0320 	and.w	r3, r3, #32
 8002d4c:	61bb      	str	r3, [r7, #24]
 8002d4e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d50:	4b55      	ldr	r3, [pc, #340]	; (8002ea8 <HAL_ADC_MspInit+0x198>)
 8002d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d56:	4a54      	ldr	r2, [pc, #336]	; (8002ea8 <HAL_ADC_MspInit+0x198>)
 8002d58:	f043 0304 	orr.w	r3, r3, #4
 8002d5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d60:	4b51      	ldr	r3, [pc, #324]	; (8002ea8 <HAL_ADC_MspInit+0x198>)
 8002d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d66:	f003 0304 	and.w	r3, r3, #4
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = ARM_CHECK_Pin;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d72:	2303      	movs	r3, #3
 8002d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002d7a:	f107 031c 	add.w	r3, r7, #28
 8002d7e:	4619      	mov	r1, r3
 8002d80:	484a      	ldr	r0, [pc, #296]	; (8002eac <HAL_ADC_MspInit+0x19c>)
 8002d82:	f005 f991 	bl	80080a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 8002d86:	4b4a      	ldr	r3, [pc, #296]	; (8002eb0 <HAL_ADC_MspInit+0x1a0>)
 8002d88:	4a4a      	ldr	r2, [pc, #296]	; (8002eb4 <HAL_ADC_MspInit+0x1a4>)
 8002d8a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002d8c:	4b48      	ldr	r3, [pc, #288]	; (8002eb0 <HAL_ADC_MspInit+0x1a0>)
 8002d8e:	2209      	movs	r2, #9
 8002d90:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d92:	4b47      	ldr	r3, [pc, #284]	; (8002eb0 <HAL_ADC_MspInit+0x1a0>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d98:	4b45      	ldr	r3, [pc, #276]	; (8002eb0 <HAL_ADC_MspInit+0x1a0>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002d9e:	4b44      	ldr	r3, [pc, #272]	; (8002eb0 <HAL_ADC_MspInit+0x1a0>)
 8002da0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002da4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002da6:	4b42      	ldr	r3, [pc, #264]	; (8002eb0 <HAL_ADC_MspInit+0x1a0>)
 8002da8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002dae:	4b40      	ldr	r3, [pc, #256]	; (8002eb0 <HAL_ADC_MspInit+0x1a0>)
 8002db0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002db4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002db6:	4b3e      	ldr	r3, [pc, #248]	; (8002eb0 <HAL_ADC_MspInit+0x1a0>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002dbc:	4b3c      	ldr	r3, [pc, #240]	; (8002eb0 <HAL_ADC_MspInit+0x1a0>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dc2:	4b3b      	ldr	r3, [pc, #236]	; (8002eb0 <HAL_ADC_MspInit+0x1a0>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002dc8:	4839      	ldr	r0, [pc, #228]	; (8002eb0 <HAL_ADC_MspInit+0x1a0>)
 8002dca:	f002 fd35 	bl	8005838 <HAL_DMA_Init>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002dd4:	f7ff ff7c 	bl	8002cd0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a35      	ldr	r2, [pc, #212]	; (8002eb0 <HAL_ADC_MspInit+0x1a0>)
 8002ddc:	659a      	str	r2, [r3, #88]	; 0x58
 8002dde:	4a34      	ldr	r2, [pc, #208]	; (8002eb0 <HAL_ADC_MspInit+0x1a0>)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002de4:	e059      	b.n	8002e9a <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a33      	ldr	r2, [pc, #204]	; (8002eb8 <HAL_ADC_MspInit+0x1a8>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d154      	bne.n	8002e9a <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002df0:	4b2d      	ldr	r3, [pc, #180]	; (8002ea8 <HAL_ADC_MspInit+0x198>)
 8002df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002df6:	4a2c      	ldr	r2, [pc, #176]	; (8002ea8 <HAL_ADC_MspInit+0x198>)
 8002df8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e00:	4b29      	ldr	r3, [pc, #164]	; (8002ea8 <HAL_ADC_MspInit+0x198>)
 8002e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e0a:	613b      	str	r3, [r7, #16]
 8002e0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e0e:	4b26      	ldr	r3, [pc, #152]	; (8002ea8 <HAL_ADC_MspInit+0x198>)
 8002e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e14:	4a24      	ldr	r2, [pc, #144]	; (8002ea8 <HAL_ADC_MspInit+0x198>)
 8002e16:	f043 0304 	orr.w	r3, r3, #4
 8002e1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e1e:	4b22      	ldr	r3, [pc, #136]	; (8002ea8 <HAL_ADC_MspInit+0x198>)
 8002e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002e2c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002e30:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002e34:	f001 f86a 	bl	8003f0c <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8002e38:	4b20      	ldr	r3, [pc, #128]	; (8002ebc <HAL_ADC_MspInit+0x1ac>)
 8002e3a:	4a21      	ldr	r2, [pc, #132]	; (8002ec0 <HAL_ADC_MspInit+0x1b0>)
 8002e3c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002e3e:	4b1f      	ldr	r3, [pc, #124]	; (8002ebc <HAL_ADC_MspInit+0x1ac>)
 8002e40:	2273      	movs	r2, #115	; 0x73
 8002e42:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e44:	4b1d      	ldr	r3, [pc, #116]	; (8002ebc <HAL_ADC_MspInit+0x1ac>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e4a:	4b1c      	ldr	r3, [pc, #112]	; (8002ebc <HAL_ADC_MspInit+0x1ac>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002e50:	4b1a      	ldr	r3, [pc, #104]	; (8002ebc <HAL_ADC_MspInit+0x1ac>)
 8002e52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e56:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e58:	4b18      	ldr	r3, [pc, #96]	; (8002ebc <HAL_ADC_MspInit+0x1ac>)
 8002e5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e5e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e60:	4b16      	ldr	r3, [pc, #88]	; (8002ebc <HAL_ADC_MspInit+0x1ac>)
 8002e62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e66:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002e68:	4b14      	ldr	r3, [pc, #80]	; (8002ebc <HAL_ADC_MspInit+0x1ac>)
 8002e6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e6e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002e70:	4b12      	ldr	r3, [pc, #72]	; (8002ebc <HAL_ADC_MspInit+0x1ac>)
 8002e72:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e76:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e78:	4b10      	ldr	r3, [pc, #64]	; (8002ebc <HAL_ADC_MspInit+0x1ac>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002e7e:	480f      	ldr	r0, [pc, #60]	; (8002ebc <HAL_ADC_MspInit+0x1ac>)
 8002e80:	f002 fcda 	bl	8005838 <HAL_DMA_Init>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 8002e8a:	f7ff ff21 	bl	8002cd0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a0a      	ldr	r2, [pc, #40]	; (8002ebc <HAL_ADC_MspInit+0x1ac>)
 8002e92:	659a      	str	r2, [r3, #88]	; 0x58
 8002e94:	4a09      	ldr	r2, [pc, #36]	; (8002ebc <HAL_ADC_MspInit+0x1ac>)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002e9a:	bf00      	nop
 8002e9c:	3730      	adds	r7, #48	; 0x30
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40022000 	.word	0x40022000
 8002ea8:	58024400 	.word	0x58024400
 8002eac:	58020800 	.word	0x58020800
 8002eb0:	24000e50 	.word	0x24000e50
 8002eb4:	40020088 	.word	0x40020088
 8002eb8:	58026000 	.word	0x58026000
 8002ebc:	24000ec8 	.word	0x24000ec8
 8002ec0:	400204b8 	.word	0x400204b8

08002ec4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b0b8      	sub	sp, #224	; 0xe0
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ecc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	605a      	str	r2, [r3, #4]
 8002ed6:	609a      	str	r2, [r3, #8]
 8002ed8:	60da      	str	r2, [r3, #12]
 8002eda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002edc:	f107 0310 	add.w	r3, r7, #16
 8002ee0:	22b8      	movs	r2, #184	; 0xb8
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f015 fa08 	bl	80182fa <memset>
  if(hfdcan->Instance==FDCAN3)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a26      	ldr	r2, [pc, #152]	; (8002f88 <HAL_FDCAN_MspInit+0xc4>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d144      	bne.n	8002f7e <HAL_FDCAN_MspInit+0xba>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002ef4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002ef8:	f04f 0300 	mov.w	r3, #0
 8002efc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002f00:	2300      	movs	r3, #0
 8002f02:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f04:	f107 0310 	add.w	r3, r7, #16
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f007 fea1 	bl	800ac50 <HAL_RCCEx_PeriphCLKConfig>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <HAL_FDCAN_MspInit+0x54>
    {
      Error_Handler();
 8002f14:	f7ff fedc 	bl	8002cd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002f18:	4b1c      	ldr	r3, [pc, #112]	; (8002f8c <HAL_FDCAN_MspInit+0xc8>)
 8002f1a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002f1e:	4a1b      	ldr	r2, [pc, #108]	; (8002f8c <HAL_FDCAN_MspInit+0xc8>)
 8002f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f24:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002f28:	4b18      	ldr	r3, [pc, #96]	; (8002f8c <HAL_FDCAN_MspInit+0xc8>)
 8002f2a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f36:	4b15      	ldr	r3, [pc, #84]	; (8002f8c <HAL_FDCAN_MspInit+0xc8>)
 8002f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f3c:	4a13      	ldr	r2, [pc, #76]	; (8002f8c <HAL_FDCAN_MspInit+0xc8>)
 8002f3e:	f043 0320 	orr.w	r3, r3, #32
 8002f42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f46:	4b11      	ldr	r3, [pc, #68]	; (8002f8c <HAL_FDCAN_MspInit+0xc8>)
 8002f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f4c:	f003 0320 	and.w	r3, r3, #32
 8002f50:	60bb      	str	r3, [r7, #8]
 8002f52:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f54:	23c0      	movs	r3, #192	; 0xc0
 8002f56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f60:	2300      	movs	r3, #0
 8002f62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f66:	2300      	movs	r3, #0
 8002f68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f72:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002f76:	4619      	mov	r1, r3
 8002f78:	4805      	ldr	r0, [pc, #20]	; (8002f90 <HAL_FDCAN_MspInit+0xcc>)
 8002f7a:	f005 f895 	bl	80080a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8002f7e:	bf00      	nop
 8002f80:	37e0      	adds	r7, #224	; 0xe0
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	4000d400 	.word	0x4000d400
 8002f8c:	58024400 	.word	0x58024400
 8002f90:	58021400 	.word	0x58021400

08002f94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b0b8      	sub	sp, #224	; 0xe0
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f9c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	605a      	str	r2, [r3, #4]
 8002fa6:	609a      	str	r2, [r3, #8]
 8002fa8:	60da      	str	r2, [r3, #12]
 8002faa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fac:	f107 0310 	add.w	r3, r7, #16
 8002fb0:	22b8      	movs	r2, #184	; 0xb8
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f015 f9a0 	bl	80182fa <memset>
  if(hi2c->Instance==I2C2)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a26      	ldr	r2, [pc, #152]	; (8003058 <HAL_I2C_MspInit+0xc4>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d145      	bne.n	8003050 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002fc4:	f04f 0208 	mov.w	r2, #8
 8002fc8:	f04f 0300 	mov.w	r3, #0
 8002fcc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fd6:	f107 0310 	add.w	r3, r7, #16
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f007 fe38 	bl	800ac50 <HAL_RCCEx_PeriphCLKConfig>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002fe6:	f7ff fe73 	bl	8002cd0 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002fea:	4b1c      	ldr	r3, [pc, #112]	; (800305c <HAL_I2C_MspInit+0xc8>)
 8002fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ff0:	4a1a      	ldr	r2, [pc, #104]	; (800305c <HAL_I2C_MspInit+0xc8>)
 8002ff2:	f043 0320 	orr.w	r3, r3, #32
 8002ff6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ffa:	4b18      	ldr	r3, [pc, #96]	; (800305c <HAL_I2C_MspInit+0xc8>)
 8002ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003000:	f003 0320 	and.w	r3, r3, #32
 8003004:	60fb      	str	r3, [r7, #12]
 8003006:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003008:	2303      	movs	r3, #3
 800300a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800300e:	2312      	movs	r3, #18
 8003010:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003014:	2300      	movs	r3, #0
 8003016:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800301a:	2300      	movs	r3, #0
 800301c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003020:	2304      	movs	r3, #4
 8003022:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003026:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800302a:	4619      	mov	r1, r3
 800302c:	480c      	ldr	r0, [pc, #48]	; (8003060 <HAL_I2C_MspInit+0xcc>)
 800302e:	f005 f83b 	bl	80080a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003032:	4b0a      	ldr	r3, [pc, #40]	; (800305c <HAL_I2C_MspInit+0xc8>)
 8003034:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003038:	4a08      	ldr	r2, [pc, #32]	; (800305c <HAL_I2C_MspInit+0xc8>)
 800303a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800303e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003042:	4b06      	ldr	r3, [pc, #24]	; (800305c <HAL_I2C_MspInit+0xc8>)
 8003044:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003048:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800304c:	60bb      	str	r3, [r7, #8]
 800304e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003050:	bf00      	nop
 8003052:	37e0      	adds	r7, #224	; 0xe0
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40005800 	.word	0x40005800
 800305c:	58024400 	.word	0x58024400
 8003060:	58021400 	.word	0x58021400

08003064 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b0ba      	sub	sp, #232	; 0xe8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800306c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	605a      	str	r2, [r3, #4]
 8003076:	609a      	str	r2, [r3, #8]
 8003078:	60da      	str	r2, [r3, #12]
 800307a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800307c:	f107 0318 	add.w	r3, r7, #24
 8003080:	22b8      	movs	r2, #184	; 0xb8
 8003082:	2100      	movs	r1, #0
 8003084:	4618      	mov	r0, r3
 8003086:	f015 f938 	bl	80182fa <memset>
  if(hsd->Instance==SDMMC2)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a5d      	ldr	r2, [pc, #372]	; (8003204 <HAL_SD_MspInit+0x1a0>)
 8003090:	4293      	cmp	r3, r2
 8003092:	f040 80b3 	bne.w	80031fc <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8003096:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800309a:	f04f 0300 	mov.w	r3, #0
 800309e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80030a2:	2300      	movs	r3, #0
 80030a4:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030a6:	f107 0318 	add.w	r3, r7, #24
 80030aa:	4618      	mov	r0, r3
 80030ac:	f007 fdd0 	bl	800ac50 <HAL_RCCEx_PeriphCLKConfig>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 80030b6:	f7ff fe0b 	bl	8002cd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 80030ba:	4b53      	ldr	r3, [pc, #332]	; (8003208 <HAL_SD_MspInit+0x1a4>)
 80030bc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80030c0:	4a51      	ldr	r2, [pc, #324]	; (8003208 <HAL_SD_MspInit+0x1a4>)
 80030c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030c6:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80030ca:	4b4f      	ldr	r3, [pc, #316]	; (8003208 <HAL_SD_MspInit+0x1a4>)
 80030cc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80030d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030d4:	617b      	str	r3, [r7, #20]
 80030d6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030d8:	4b4b      	ldr	r3, [pc, #300]	; (8003208 <HAL_SD_MspInit+0x1a4>)
 80030da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030de:	4a4a      	ldr	r2, [pc, #296]	; (8003208 <HAL_SD_MspInit+0x1a4>)
 80030e0:	f043 0308 	orr.w	r3, r3, #8
 80030e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030e8:	4b47      	ldr	r3, [pc, #284]	; (8003208 <HAL_SD_MspInit+0x1a4>)
 80030ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030ee:	f003 0308 	and.w	r3, r3, #8
 80030f2:	613b      	str	r3, [r7, #16]
 80030f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80030f6:	4b44      	ldr	r3, [pc, #272]	; (8003208 <HAL_SD_MspInit+0x1a4>)
 80030f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030fc:	4a42      	ldr	r2, [pc, #264]	; (8003208 <HAL_SD_MspInit+0x1a4>)
 80030fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003102:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003106:	4b40      	ldr	r3, [pc, #256]	; (8003208 <HAL_SD_MspInit+0x1a4>)
 8003108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800310c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003114:	2340      	movs	r3, #64	; 0x40
 8003116:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800311a:	2302      	movs	r3, #2
 800311c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003120:	2300      	movs	r3, #0
 8003122:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003126:	2303      	movs	r3, #3
 8003128:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800312c:	230b      	movs	r3, #11
 800312e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003132:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003136:	4619      	mov	r1, r3
 8003138:	4834      	ldr	r0, [pc, #208]	; (800320c <HAL_SD_MspInit+0x1a8>)
 800313a:	f004 ffb5 	bl	80080a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800313e:	2380      	movs	r3, #128	; 0x80
 8003140:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003144:	2302      	movs	r3, #2
 8003146:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800314a:	2301      	movs	r3, #1
 800314c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003150:	2303      	movs	r3, #3
 8003152:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003156:	230b      	movs	r3, #11
 8003158:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800315c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003160:	4619      	mov	r1, r3
 8003162:	482a      	ldr	r0, [pc, #168]	; (800320c <HAL_SD_MspInit+0x1a8>)
 8003164:	f004 ffa0 	bl	80080a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003168:	f44f 7300 	mov.w	r3, #512	; 0x200
 800316c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003170:	2302      	movs	r3, #2
 8003172:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003176:	2301      	movs	r3, #1
 8003178:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800317c:	2303      	movs	r3, #3
 800317e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003182:	230b      	movs	r3, #11
 8003184:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003188:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800318c:	4619      	mov	r1, r3
 800318e:	4820      	ldr	r0, [pc, #128]	; (8003210 <HAL_SD_MspInit+0x1ac>)
 8003190:	f004 ff8a 	bl	80080a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003194:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003198:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319c:	2302      	movs	r3, #2
 800319e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a2:	2300      	movs	r3, #0
 80031a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031a8:	2303      	movs	r3, #3
 80031aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80031ae:	230b      	movs	r3, #11
 80031b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80031b4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80031b8:	4619      	mov	r1, r3
 80031ba:	4815      	ldr	r0, [pc, #84]	; (8003210 <HAL_SD_MspInit+0x1ac>)
 80031bc:	f004 ff74 	bl	80080a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80031c0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80031c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c8:	2302      	movs	r3, #2
 80031ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ce:	2300      	movs	r3, #0
 80031d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031d4:	2303      	movs	r3, #3
 80031d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 80031da:	230a      	movs	r3, #10
 80031dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80031e0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80031e4:	4619      	mov	r1, r3
 80031e6:	480a      	ldr	r0, [pc, #40]	; (8003210 <HAL_SD_MspInit+0x1ac>)
 80031e8:	f004 ff5e 	bl	80080a8 <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 80031ec:	2200      	movs	r2, #0
 80031ee:	2100      	movs	r1, #0
 80031f0:	207c      	movs	r0, #124	; 0x7c
 80031f2:	f002 faec 	bl	80057ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 80031f6:	207c      	movs	r0, #124	; 0x7c
 80031f8:	f002 fb03 	bl	8005802 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 80031fc:	bf00      	nop
 80031fe:	37e8      	adds	r7, #232	; 0xe8
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	48022400 	.word	0x48022400
 8003208:	58024400 	.word	0x58024400
 800320c:	58020c00 	.word	0x58020c00
 8003210:	58021800 	.word	0x58021800

08003214 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b08e      	sub	sp, #56	; 0x38
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800321c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	605a      	str	r2, [r3, #4]
 8003226:	609a      	str	r2, [r3, #8]
 8003228:	60da      	str	r2, [r3, #12]
 800322a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a4f      	ldr	r2, [pc, #316]	; (8003370 <HAL_SPI_MspInit+0x15c>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d12e      	bne.n	8003294 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003236:	4b4f      	ldr	r3, [pc, #316]	; (8003374 <HAL_SPI_MspInit+0x160>)
 8003238:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800323c:	4a4d      	ldr	r2, [pc, #308]	; (8003374 <HAL_SPI_MspInit+0x160>)
 800323e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003242:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003246:	4b4b      	ldr	r3, [pc, #300]	; (8003374 <HAL_SPI_MspInit+0x160>)
 8003248:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800324c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003250:	623b      	str	r3, [r7, #32]
 8003252:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003254:	4b47      	ldr	r3, [pc, #284]	; (8003374 <HAL_SPI_MspInit+0x160>)
 8003256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800325a:	4a46      	ldr	r2, [pc, #280]	; (8003374 <HAL_SPI_MspInit+0x160>)
 800325c:	f043 0301 	orr.w	r3, r3, #1
 8003260:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003264:	4b43      	ldr	r3, [pc, #268]	; (8003374 <HAL_SPI_MspInit+0x160>)
 8003266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	61fb      	str	r3, [r7, #28]
 8003270:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003272:	23e0      	movs	r3, #224	; 0xe0
 8003274:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003276:	2302      	movs	r3, #2
 8003278:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327a:	2300      	movs	r3, #0
 800327c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800327e:	2300      	movs	r3, #0
 8003280:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003282:	2305      	movs	r3, #5
 8003284:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800328a:	4619      	mov	r1, r3
 800328c:	483a      	ldr	r0, [pc, #232]	; (8003378 <HAL_SPI_MspInit+0x164>)
 800328e:	f004 ff0b 	bl	80080a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003292:	e068      	b.n	8003366 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a38      	ldr	r2, [pc, #224]	; (800337c <HAL_SPI_MspInit+0x168>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d12f      	bne.n	80032fe <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800329e:	4b35      	ldr	r3, [pc, #212]	; (8003374 <HAL_SPI_MspInit+0x160>)
 80032a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032a4:	4a33      	ldr	r2, [pc, #204]	; (8003374 <HAL_SPI_MspInit+0x160>)
 80032a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80032ae:	4b31      	ldr	r3, [pc, #196]	; (8003374 <HAL_SPI_MspInit+0x160>)
 80032b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032b8:	61bb      	str	r3, [r7, #24]
 80032ba:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032bc:	4b2d      	ldr	r3, [pc, #180]	; (8003374 <HAL_SPI_MspInit+0x160>)
 80032be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032c2:	4a2c      	ldr	r2, [pc, #176]	; (8003374 <HAL_SPI_MspInit+0x160>)
 80032c4:	f043 0302 	orr.w	r3, r3, #2
 80032c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032cc:	4b29      	ldr	r3, [pc, #164]	; (8003374 <HAL_SPI_MspInit+0x160>)
 80032ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80032da:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80032de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e0:	2302      	movs	r3, #2
 80032e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e4:	2300      	movs	r3, #0
 80032e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e8:	2300      	movs	r3, #0
 80032ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80032ec:	2305      	movs	r3, #5
 80032ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032f4:	4619      	mov	r1, r3
 80032f6:	4822      	ldr	r0, [pc, #136]	; (8003380 <HAL_SPI_MspInit+0x16c>)
 80032f8:	f004 fed6 	bl	80080a8 <HAL_GPIO_Init>
}
 80032fc:	e033      	b.n	8003366 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a20      	ldr	r2, [pc, #128]	; (8003384 <HAL_SPI_MspInit+0x170>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d12e      	bne.n	8003366 <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003308:	4b1a      	ldr	r3, [pc, #104]	; (8003374 <HAL_SPI_MspInit+0x160>)
 800330a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800330e:	4a19      	ldr	r2, [pc, #100]	; (8003374 <HAL_SPI_MspInit+0x160>)
 8003310:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003314:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003318:	4b16      	ldr	r3, [pc, #88]	; (8003374 <HAL_SPI_MspInit+0x160>)
 800331a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800331e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003322:	613b      	str	r3, [r7, #16]
 8003324:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003326:	4b13      	ldr	r3, [pc, #76]	; (8003374 <HAL_SPI_MspInit+0x160>)
 8003328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800332c:	4a11      	ldr	r2, [pc, #68]	; (8003374 <HAL_SPI_MspInit+0x160>)
 800332e:	f043 0304 	orr.w	r3, r3, #4
 8003332:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003336:	4b0f      	ldr	r3, [pc, #60]	; (8003374 <HAL_SPI_MspInit+0x160>)
 8003338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	60fb      	str	r3, [r7, #12]
 8003342:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003344:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334a:	2302      	movs	r3, #2
 800334c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334e:	2300      	movs	r3, #0
 8003350:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003352:	2300      	movs	r3, #0
 8003354:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003356:	2306      	movs	r3, #6
 8003358:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800335a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800335e:	4619      	mov	r1, r3
 8003360:	4809      	ldr	r0, [pc, #36]	; (8003388 <HAL_SPI_MspInit+0x174>)
 8003362:	f004 fea1 	bl	80080a8 <HAL_GPIO_Init>
}
 8003366:	bf00      	nop
 8003368:	3738      	adds	r7, #56	; 0x38
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40013000 	.word	0x40013000
 8003374:	58024400 	.word	0x58024400
 8003378:	58020000 	.word	0x58020000
 800337c:	40003800 	.word	0x40003800
 8003380:	58020400 	.word	0x58020400
 8003384:	40003c00 	.word	0x40003c00
 8003388:	58020800 	.word	0x58020800

0800338c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b08c      	sub	sp, #48	; 0x30
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003394:	f107 031c 	add.w	r3, r7, #28
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	605a      	str	r2, [r3, #4]
 800339e:	609a      	str	r2, [r3, #8]
 80033a0:	60da      	str	r2, [r3, #12]
 80033a2:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ac:	d15d      	bne.n	800346a <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033ae:	4b8e      	ldr	r3, [pc, #568]	; (80035e8 <HAL_TIM_PWM_MspInit+0x25c>)
 80033b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033b4:	4a8c      	ldr	r2, [pc, #560]	; (80035e8 <HAL_TIM_PWM_MspInit+0x25c>)
 80033b6:	f043 0301 	orr.w	r3, r3, #1
 80033ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80033be:	4b8a      	ldr	r3, [pc, #552]	; (80035e8 <HAL_TIM_PWM_MspInit+0x25c>)
 80033c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	61bb      	str	r3, [r7, #24]
 80033ca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033cc:	4b86      	ldr	r3, [pc, #536]	; (80035e8 <HAL_TIM_PWM_MspInit+0x25c>)
 80033ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033d2:	4a85      	ldr	r2, [pc, #532]	; (80035e8 <HAL_TIM_PWM_MspInit+0x25c>)
 80033d4:	f043 0301 	orr.w	r3, r3, #1
 80033d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033dc:	4b82      	ldr	r3, [pc, #520]	; (80035e8 <HAL_TIM_PWM_MspInit+0x25c>)
 80033de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	617b      	str	r3, [r7, #20]
 80033e8:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80033ea:	2301      	movs	r3, #1
 80033ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ee:	2302      	movs	r3, #2
 80033f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f2:	2300      	movs	r3, #0
 80033f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f6:	2300      	movs	r3, #0
 80033f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80033fa:	2301      	movs	r3, #1
 80033fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033fe:	f107 031c 	add.w	r3, r7, #28
 8003402:	4619      	mov	r1, r3
 8003404:	4879      	ldr	r0, [pc, #484]	; (80035ec <HAL_TIM_PWM_MspInit+0x260>)
 8003406:	f004 fe4f 	bl	80080a8 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 800340a:	4b79      	ldr	r3, [pc, #484]	; (80035f0 <HAL_TIM_PWM_MspInit+0x264>)
 800340c:	4a79      	ldr	r2, [pc, #484]	; (80035f4 <HAL_TIM_PWM_MspInit+0x268>)
 800340e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 8003410:	4b77      	ldr	r3, [pc, #476]	; (80035f0 <HAL_TIM_PWM_MspInit+0x264>)
 8003412:	2214      	movs	r2, #20
 8003414:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003416:	4b76      	ldr	r3, [pc, #472]	; (80035f0 <HAL_TIM_PWM_MspInit+0x264>)
 8003418:	2240      	movs	r2, #64	; 0x40
 800341a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800341c:	4b74      	ldr	r3, [pc, #464]	; (80035f0 <HAL_TIM_PWM_MspInit+0x264>)
 800341e:	2200      	movs	r2, #0
 8003420:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003422:	4b73      	ldr	r3, [pc, #460]	; (80035f0 <HAL_TIM_PWM_MspInit+0x264>)
 8003424:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003428:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800342a:	4b71      	ldr	r3, [pc, #452]	; (80035f0 <HAL_TIM_PWM_MspInit+0x264>)
 800342c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003430:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003432:	4b6f      	ldr	r3, [pc, #444]	; (80035f0 <HAL_TIM_PWM_MspInit+0x264>)
 8003434:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003438:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 800343a:	4b6d      	ldr	r3, [pc, #436]	; (80035f0 <HAL_TIM_PWM_MspInit+0x264>)
 800343c:	2200      	movs	r2, #0
 800343e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003440:	4b6b      	ldr	r3, [pc, #428]	; (80035f0 <HAL_TIM_PWM_MspInit+0x264>)
 8003442:	2200      	movs	r2, #0
 8003444:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003446:	4b6a      	ldr	r3, [pc, #424]	; (80035f0 <HAL_TIM_PWM_MspInit+0x264>)
 8003448:	2200      	movs	r2, #0
 800344a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 800344c:	4868      	ldr	r0, [pc, #416]	; (80035f0 <HAL_TIM_PWM_MspInit+0x264>)
 800344e:	f002 f9f3 	bl	8005838 <HAL_DMA_Init>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 8003458:	f7ff fc3a 	bl	8002cd0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a64      	ldr	r2, [pc, #400]	; (80035f0 <HAL_TIM_PWM_MspInit+0x264>)
 8003460:	62da      	str	r2, [r3, #44]	; 0x2c
 8003462:	4a63      	ldr	r2, [pc, #396]	; (80035f0 <HAL_TIM_PWM_MspInit+0x264>)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003468:	e119      	b.n	800369e <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a62      	ldr	r2, [pc, #392]	; (80035f8 <HAL_TIM_PWM_MspInit+0x26c>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d16d      	bne.n	8003550 <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003474:	4b5c      	ldr	r3, [pc, #368]	; (80035e8 <HAL_TIM_PWM_MspInit+0x25c>)
 8003476:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800347a:	4a5b      	ldr	r2, [pc, #364]	; (80035e8 <HAL_TIM_PWM_MspInit+0x25c>)
 800347c:	f043 0302 	orr.w	r3, r3, #2
 8003480:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003484:	4b58      	ldr	r3, [pc, #352]	; (80035e8 <HAL_TIM_PWM_MspInit+0x25c>)
 8003486:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	613b      	str	r3, [r7, #16]
 8003490:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 8003492:	4b5a      	ldr	r3, [pc, #360]	; (80035fc <HAL_TIM_PWM_MspInit+0x270>)
 8003494:	4a5a      	ldr	r2, [pc, #360]	; (8003600 <HAL_TIM_PWM_MspInit+0x274>)
 8003496:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8003498:	4b58      	ldr	r3, [pc, #352]	; (80035fc <HAL_TIM_PWM_MspInit+0x270>)
 800349a:	2218      	movs	r2, #24
 800349c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800349e:	4b57      	ldr	r3, [pc, #348]	; (80035fc <HAL_TIM_PWM_MspInit+0x270>)
 80034a0:	2240      	movs	r2, #64	; 0x40
 80034a2:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80034a4:	4b55      	ldr	r3, [pc, #340]	; (80035fc <HAL_TIM_PWM_MspInit+0x270>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80034aa:	4b54      	ldr	r3, [pc, #336]	; (80035fc <HAL_TIM_PWM_MspInit+0x270>)
 80034ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034b0:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80034b2:	4b52      	ldr	r3, [pc, #328]	; (80035fc <HAL_TIM_PWM_MspInit+0x270>)
 80034b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034b8:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80034ba:	4b50      	ldr	r3, [pc, #320]	; (80035fc <HAL_TIM_PWM_MspInit+0x270>)
 80034bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034c0:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 80034c2:	4b4e      	ldr	r3, [pc, #312]	; (80035fc <HAL_TIM_PWM_MspInit+0x270>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80034c8:	4b4c      	ldr	r3, [pc, #304]	; (80035fc <HAL_TIM_PWM_MspInit+0x270>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034ce:	4b4b      	ldr	r3, [pc, #300]	; (80035fc <HAL_TIM_PWM_MspInit+0x270>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 80034d4:	4849      	ldr	r0, [pc, #292]	; (80035fc <HAL_TIM_PWM_MspInit+0x270>)
 80034d6:	f002 f9af 	bl	8005838 <HAL_DMA_Init>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 80034e0:	f7ff fbf6 	bl	8002cd0 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a45      	ldr	r2, [pc, #276]	; (80035fc <HAL_TIM_PWM_MspInit+0x270>)
 80034e8:	629a      	str	r2, [r3, #40]	; 0x28
 80034ea:	4a44      	ldr	r2, [pc, #272]	; (80035fc <HAL_TIM_PWM_MspInit+0x270>)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 80034f0:	4b44      	ldr	r3, [pc, #272]	; (8003604 <HAL_TIM_PWM_MspInit+0x278>)
 80034f2:	4a45      	ldr	r2, [pc, #276]	; (8003608 <HAL_TIM_PWM_MspInit+0x27c>)
 80034f4:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 80034f6:	4b43      	ldr	r3, [pc, #268]	; (8003604 <HAL_TIM_PWM_MspInit+0x278>)
 80034f8:	2217      	movs	r2, #23
 80034fa:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034fc:	4b41      	ldr	r3, [pc, #260]	; (8003604 <HAL_TIM_PWM_MspInit+0x278>)
 80034fe:	2240      	movs	r2, #64	; 0x40
 8003500:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003502:	4b40      	ldr	r3, [pc, #256]	; (8003604 <HAL_TIM_PWM_MspInit+0x278>)
 8003504:	2200      	movs	r2, #0
 8003506:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003508:	4b3e      	ldr	r3, [pc, #248]	; (8003604 <HAL_TIM_PWM_MspInit+0x278>)
 800350a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800350e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003510:	4b3c      	ldr	r3, [pc, #240]	; (8003604 <HAL_TIM_PWM_MspInit+0x278>)
 8003512:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003516:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003518:	4b3a      	ldr	r3, [pc, #232]	; (8003604 <HAL_TIM_PWM_MspInit+0x278>)
 800351a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800351e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8003520:	4b38      	ldr	r3, [pc, #224]	; (8003604 <HAL_TIM_PWM_MspInit+0x278>)
 8003522:	2200      	movs	r2, #0
 8003524:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003526:	4b37      	ldr	r3, [pc, #220]	; (8003604 <HAL_TIM_PWM_MspInit+0x278>)
 8003528:	2200      	movs	r2, #0
 800352a:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800352c:	4b35      	ldr	r3, [pc, #212]	; (8003604 <HAL_TIM_PWM_MspInit+0x278>)
 800352e:	2200      	movs	r2, #0
 8003530:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8003532:	4834      	ldr	r0, [pc, #208]	; (8003604 <HAL_TIM_PWM_MspInit+0x278>)
 8003534:	f002 f980 	bl	8005838 <HAL_DMA_Init>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 800353e:	f7ff fbc7 	bl	8002cd0 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a2f      	ldr	r2, [pc, #188]	; (8003604 <HAL_TIM_PWM_MspInit+0x278>)
 8003546:	625a      	str	r2, [r3, #36]	; 0x24
 8003548:	4a2e      	ldr	r2, [pc, #184]	; (8003604 <HAL_TIM_PWM_MspInit+0x278>)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800354e:	e0a6      	b.n	800369e <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a2d      	ldr	r2, [pc, #180]	; (800360c <HAL_TIM_PWM_MspInit+0x280>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d15e      	bne.n	8003618 <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800355a:	4b23      	ldr	r3, [pc, #140]	; (80035e8 <HAL_TIM_PWM_MspInit+0x25c>)
 800355c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003560:	4a21      	ldr	r2, [pc, #132]	; (80035e8 <HAL_TIM_PWM_MspInit+0x25c>)
 8003562:	f043 0304 	orr.w	r3, r3, #4
 8003566:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800356a:	4b1f      	ldr	r3, [pc, #124]	; (80035e8 <HAL_TIM_PWM_MspInit+0x25c>)
 800356c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003570:	f003 0304 	and.w	r3, r3, #4
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 8003578:	4b25      	ldr	r3, [pc, #148]	; (8003610 <HAL_TIM_PWM_MspInit+0x284>)
 800357a:	4a26      	ldr	r2, [pc, #152]	; (8003614 <HAL_TIM_PWM_MspInit+0x288>)
 800357c:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 800357e:	4b24      	ldr	r3, [pc, #144]	; (8003610 <HAL_TIM_PWM_MspInit+0x284>)
 8003580:	221f      	movs	r2, #31
 8003582:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003584:	4b22      	ldr	r3, [pc, #136]	; (8003610 <HAL_TIM_PWM_MspInit+0x284>)
 8003586:	2240      	movs	r2, #64	; 0x40
 8003588:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800358a:	4b21      	ldr	r3, [pc, #132]	; (8003610 <HAL_TIM_PWM_MspInit+0x284>)
 800358c:	2200      	movs	r2, #0
 800358e:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003590:	4b1f      	ldr	r3, [pc, #124]	; (8003610 <HAL_TIM_PWM_MspInit+0x284>)
 8003592:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003596:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003598:	4b1d      	ldr	r3, [pc, #116]	; (8003610 <HAL_TIM_PWM_MspInit+0x284>)
 800359a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800359e:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80035a0:	4b1b      	ldr	r3, [pc, #108]	; (8003610 <HAL_TIM_PWM_MspInit+0x284>)
 80035a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80035a6:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 80035a8:	4b19      	ldr	r3, [pc, #100]	; (8003610 <HAL_TIM_PWM_MspInit+0x284>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80035ae:	4b18      	ldr	r3, [pc, #96]	; (8003610 <HAL_TIM_PWM_MspInit+0x284>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035b4:	4b16      	ldr	r3, [pc, #88]	; (8003610 <HAL_TIM_PWM_MspInit+0x284>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 80035ba:	4815      	ldr	r0, [pc, #84]	; (8003610 <HAL_TIM_PWM_MspInit+0x284>)
 80035bc:	f002 f93c 	bl	8005838 <HAL_DMA_Init>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 80035c6:	f7ff fb83 	bl	8002cd0 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a10      	ldr	r2, [pc, #64]	; (8003610 <HAL_TIM_PWM_MspInit+0x284>)
 80035ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80035d0:	4a0f      	ldr	r2, [pc, #60]	; (8003610 <HAL_TIM_PWM_MspInit+0x284>)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80035d6:	2200      	movs	r2, #0
 80035d8:	2100      	movs	r1, #0
 80035da:	201e      	movs	r0, #30
 80035dc:	f002 f8f7 	bl	80057ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80035e0:	201e      	movs	r0, #30
 80035e2:	f002 f90e 	bl	8005802 <HAL_NVIC_EnableIRQ>
}
 80035e6:	e05a      	b.n	800369e <HAL_TIM_PWM_MspInit+0x312>
 80035e8:	58024400 	.word	0x58024400
 80035ec:	58020000 	.word	0x58020000
 80035f0:	24001378 	.word	0x24001378
 80035f4:	40020028 	.word	0x40020028
 80035f8:	40000400 	.word	0x40000400
 80035fc:	240013f0 	.word	0x240013f0
 8003600:	40020058 	.word	0x40020058
 8003604:	24001468 	.word	0x24001468
 8003608:	40020070 	.word	0x40020070
 800360c:	40000800 	.word	0x40000800
 8003610:	240014e0 	.word	0x240014e0
 8003614:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a22      	ldr	r2, [pc, #136]	; (80036a8 <HAL_TIM_PWM_MspInit+0x31c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d13d      	bne.n	800369e <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003622:	4b22      	ldr	r3, [pc, #136]	; (80036ac <HAL_TIM_PWM_MspInit+0x320>)
 8003624:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003628:	4a20      	ldr	r2, [pc, #128]	; (80036ac <HAL_TIM_PWM_MspInit+0x320>)
 800362a:	f043 0308 	orr.w	r3, r3, #8
 800362e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003632:	4b1e      	ldr	r3, [pc, #120]	; (80036ac <HAL_TIM_PWM_MspInit+0x320>)
 8003634:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003638:	f003 0308 	and.w	r3, r3, #8
 800363c:	60bb      	str	r3, [r7, #8]
 800363e:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 8003640:	4b1b      	ldr	r3, [pc, #108]	; (80036b0 <HAL_TIM_PWM_MspInit+0x324>)
 8003642:	4a1c      	ldr	r2, [pc, #112]	; (80036b4 <HAL_TIM_PWM_MspInit+0x328>)
 8003644:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 8003646:	4b1a      	ldr	r3, [pc, #104]	; (80036b0 <HAL_TIM_PWM_MspInit+0x324>)
 8003648:	223a      	movs	r2, #58	; 0x3a
 800364a:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800364c:	4b18      	ldr	r3, [pc, #96]	; (80036b0 <HAL_TIM_PWM_MspInit+0x324>)
 800364e:	2240      	movs	r2, #64	; 0x40
 8003650:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8003652:	4b17      	ldr	r3, [pc, #92]	; (80036b0 <HAL_TIM_PWM_MspInit+0x324>)
 8003654:	2200      	movs	r2, #0
 8003656:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8003658:	4b15      	ldr	r3, [pc, #84]	; (80036b0 <HAL_TIM_PWM_MspInit+0x324>)
 800365a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800365e:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003660:	4b13      	ldr	r3, [pc, #76]	; (80036b0 <HAL_TIM_PWM_MspInit+0x324>)
 8003662:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003666:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003668:	4b11      	ldr	r3, [pc, #68]	; (80036b0 <HAL_TIM_PWM_MspInit+0x324>)
 800366a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800366e:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 8003670:	4b0f      	ldr	r3, [pc, #60]	; (80036b0 <HAL_TIM_PWM_MspInit+0x324>)
 8003672:	2200      	movs	r2, #0
 8003674:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8003676:	4b0e      	ldr	r3, [pc, #56]	; (80036b0 <HAL_TIM_PWM_MspInit+0x324>)
 8003678:	2200      	movs	r2, #0
 800367a:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800367c:	4b0c      	ldr	r3, [pc, #48]	; (80036b0 <HAL_TIM_PWM_MspInit+0x324>)
 800367e:	2200      	movs	r2, #0
 8003680:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 8003682:	480b      	ldr	r0, [pc, #44]	; (80036b0 <HAL_TIM_PWM_MspInit+0x324>)
 8003684:	f002 f8d8 	bl	8005838 <HAL_DMA_Init>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 800368e:	f7ff fb1f 	bl	8002cd0 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a06      	ldr	r2, [pc, #24]	; (80036b0 <HAL_TIM_PWM_MspInit+0x324>)
 8003696:	631a      	str	r2, [r3, #48]	; 0x30
 8003698:	4a05      	ldr	r2, [pc, #20]	; (80036b0 <HAL_TIM_PWM_MspInit+0x324>)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800369e:	bf00      	nop
 80036a0:	3730      	adds	r7, #48	; 0x30
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	40000c00 	.word	0x40000c00
 80036ac:	58024400 	.word	0x58024400
 80036b0:	24001558 	.word	0x24001558
 80036b4:	40020040 	.word	0x40020040

080036b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b08c      	sub	sp, #48	; 0x30
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036c0:	f107 031c 	add.w	r3, r7, #28
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]
 80036c8:	605a      	str	r2, [r3, #4]
 80036ca:	609a      	str	r2, [r3, #8]
 80036cc:	60da      	str	r2, [r3, #12]
 80036ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d8:	d120      	bne.n	800371c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036da:	4b52      	ldr	r3, [pc, #328]	; (8003824 <HAL_TIM_MspPostInit+0x16c>)
 80036dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036e0:	4a50      	ldr	r2, [pc, #320]	; (8003824 <HAL_TIM_MspPostInit+0x16c>)
 80036e2:	f043 0302 	orr.w	r3, r3, #2
 80036e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036ea:	4b4e      	ldr	r3, [pc, #312]	; (8003824 <HAL_TIM_MspPostInit+0x16c>)
 80036ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	61bb      	str	r3, [r7, #24]
 80036f6:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80036f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036fe:	2302      	movs	r3, #2
 8003700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003702:	2302      	movs	r3, #2
 8003704:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003706:	2300      	movs	r3, #0
 8003708:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800370a:	2301      	movs	r3, #1
 800370c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800370e:	f107 031c 	add.w	r3, r7, #28
 8003712:	4619      	mov	r1, r3
 8003714:	4844      	ldr	r0, [pc, #272]	; (8003828 <HAL_TIM_MspPostInit+0x170>)
 8003716:	f004 fcc7 	bl	80080a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800371a:	e07f      	b.n	800381c <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a42      	ldr	r2, [pc, #264]	; (800382c <HAL_TIM_MspPostInit+0x174>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d11f      	bne.n	8003766 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003726:	4b3f      	ldr	r3, [pc, #252]	; (8003824 <HAL_TIM_MspPostInit+0x16c>)
 8003728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800372c:	4a3d      	ldr	r2, [pc, #244]	; (8003824 <HAL_TIM_MspPostInit+0x16c>)
 800372e:	f043 0302 	orr.w	r3, r3, #2
 8003732:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003736:	4b3b      	ldr	r3, [pc, #236]	; (8003824 <HAL_TIM_MspPostInit+0x16c>)
 8003738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	617b      	str	r3, [r7, #20]
 8003742:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003744:	2330      	movs	r3, #48	; 0x30
 8003746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003748:	2302      	movs	r3, #2
 800374a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800374c:	2302      	movs	r3, #2
 800374e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003750:	2300      	movs	r3, #0
 8003752:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003754:	2302      	movs	r3, #2
 8003756:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003758:	f107 031c 	add.w	r3, r7, #28
 800375c:	4619      	mov	r1, r3
 800375e:	4832      	ldr	r0, [pc, #200]	; (8003828 <HAL_TIM_MspPostInit+0x170>)
 8003760:	f004 fca2 	bl	80080a8 <HAL_GPIO_Init>
}
 8003764:	e05a      	b.n	800381c <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a31      	ldr	r2, [pc, #196]	; (8003830 <HAL_TIM_MspPostInit+0x178>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d131      	bne.n	80037d4 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003770:	4b2c      	ldr	r3, [pc, #176]	; (8003824 <HAL_TIM_MspPostInit+0x16c>)
 8003772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003776:	4a2b      	ldr	r2, [pc, #172]	; (8003824 <HAL_TIM_MspPostInit+0x16c>)
 8003778:	f043 0308 	orr.w	r3, r3, #8
 800377c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003780:	4b28      	ldr	r3, [pc, #160]	; (8003824 <HAL_TIM_MspPostInit+0x16c>)
 8003782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003786:	f003 0308 	and.w	r3, r3, #8
 800378a:	613b      	str	r3, [r7, #16]
 800378c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800378e:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8003792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003794:	2302      	movs	r3, #2
 8003796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003798:	2300      	movs	r3, #0
 800379a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800379c:	2300      	movs	r3, #0
 800379e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80037a0:	2302      	movs	r3, #2
 80037a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037a4:	f107 031c 	add.w	r3, r7, #28
 80037a8:	4619      	mov	r1, r3
 80037aa:	4822      	ldr	r0, [pc, #136]	; (8003834 <HAL_TIM_MspPostInit+0x17c>)
 80037ac:	f004 fc7c 	bl	80080a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80037b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80037b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b6:	2302      	movs	r3, #2
 80037b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80037ba:	2302      	movs	r3, #2
 80037bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037be:	2300      	movs	r3, #0
 80037c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80037c2:	2302      	movs	r3, #2
 80037c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037c6:	f107 031c 	add.w	r3, r7, #28
 80037ca:	4619      	mov	r1, r3
 80037cc:	4819      	ldr	r0, [pc, #100]	; (8003834 <HAL_TIM_MspPostInit+0x17c>)
 80037ce:	f004 fc6b 	bl	80080a8 <HAL_GPIO_Init>
}
 80037d2:	e023      	b.n	800381c <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a17      	ldr	r2, [pc, #92]	; (8003838 <HAL_TIM_MspPostInit+0x180>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d11e      	bne.n	800381c <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037de:	4b11      	ldr	r3, [pc, #68]	; (8003824 <HAL_TIM_MspPostInit+0x16c>)
 80037e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037e4:	4a0f      	ldr	r2, [pc, #60]	; (8003824 <HAL_TIM_MspPostInit+0x16c>)
 80037e6:	f043 0301 	orr.w	r3, r3, #1
 80037ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037ee:	4b0d      	ldr	r3, [pc, #52]	; (8003824 <HAL_TIM_MspPostInit+0x16c>)
 80037f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	60fb      	str	r3, [r7, #12]
 80037fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80037fc:	2308      	movs	r3, #8
 80037fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003800:	2302      	movs	r3, #2
 8003802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003804:	2302      	movs	r3, #2
 8003806:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003808:	2300      	movs	r3, #0
 800380a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800380c:	2302      	movs	r3, #2
 800380e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003810:	f107 031c 	add.w	r3, r7, #28
 8003814:	4619      	mov	r1, r3
 8003816:	4809      	ldr	r0, [pc, #36]	; (800383c <HAL_TIM_MspPostInit+0x184>)
 8003818:	f004 fc46 	bl	80080a8 <HAL_GPIO_Init>
}
 800381c:	bf00      	nop
 800381e:	3730      	adds	r7, #48	; 0x30
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	58024400 	.word	0x58024400
 8003828:	58020400 	.word	0x58020400
 800382c:	40000400 	.word	0x40000400
 8003830:	40000800 	.word	0x40000800
 8003834:	58020c00 	.word	0x58020c00
 8003838:	40000c00 	.word	0x40000c00
 800383c:	58020000 	.word	0x58020000

08003840 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b0ba      	sub	sp, #232	; 0xe8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003848:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	605a      	str	r2, [r3, #4]
 8003852:	609a      	str	r2, [r3, #8]
 8003854:	60da      	str	r2, [r3, #12]
 8003856:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003858:	f107 0318 	add.w	r3, r7, #24
 800385c:	22b8      	movs	r2, #184	; 0xb8
 800385e:	2100      	movs	r1, #0
 8003860:	4618      	mov	r0, r3
 8003862:	f014 fd4a 	bl	80182fa <memset>
  if(huart->Instance==UART4)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a4d      	ldr	r2, [pc, #308]	; (80039a0 <HAL_UART_MspInit+0x160>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d147      	bne.n	8003900 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003870:	f04f 0202 	mov.w	r2, #2
 8003874:	f04f 0300 	mov.w	r3, #0
 8003878:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800387c:	2300      	movs	r3, #0
 800387e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003882:	f107 0318 	add.w	r3, r7, #24
 8003886:	4618      	mov	r0, r3
 8003888:	f007 f9e2 	bl	800ac50 <HAL_RCCEx_PeriphCLKConfig>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003892:	f7ff fa1d 	bl	8002cd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003896:	4b43      	ldr	r3, [pc, #268]	; (80039a4 <HAL_UART_MspInit+0x164>)
 8003898:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800389c:	4a41      	ldr	r2, [pc, #260]	; (80039a4 <HAL_UART_MspInit+0x164>)
 800389e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80038a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80038a6:	4b3f      	ldr	r3, [pc, #252]	; (80039a4 <HAL_UART_MspInit+0x164>)
 80038a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038b0:	617b      	str	r3, [r7, #20]
 80038b2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038b4:	4b3b      	ldr	r3, [pc, #236]	; (80039a4 <HAL_UART_MspInit+0x164>)
 80038b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038ba:	4a3a      	ldr	r2, [pc, #232]	; (80039a4 <HAL_UART_MspInit+0x164>)
 80038bc:	f043 0302 	orr.w	r3, r3, #2
 80038c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038c4:	4b37      	ldr	r3, [pc, #220]	; (80039a4 <HAL_UART_MspInit+0x164>)
 80038c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	613b      	str	r3, [r7, #16]
 80038d0:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80038d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80038d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038da:	2302      	movs	r3, #2
 80038dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e0:	2300      	movs	r3, #0
 80038e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038e6:	2300      	movs	r3, #0
 80038e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80038ec:	2308      	movs	r3, #8
 80038ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038f2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80038f6:	4619      	mov	r1, r3
 80038f8:	482b      	ldr	r0, [pc, #172]	; (80039a8 <HAL_UART_MspInit+0x168>)
 80038fa:	f004 fbd5 	bl	80080a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80038fe:	e04a      	b.n	8003996 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a29      	ldr	r2, [pc, #164]	; (80039ac <HAL_UART_MspInit+0x16c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d145      	bne.n	8003996 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800390a:	f04f 0201 	mov.w	r2, #1
 800390e:	f04f 0300 	mov.w	r3, #0
 8003912:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003916:	2300      	movs	r3, #0
 8003918:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800391c:	f107 0318 	add.w	r3, r7, #24
 8003920:	4618      	mov	r0, r3
 8003922:	f007 f995 	bl	800ac50 <HAL_RCCEx_PeriphCLKConfig>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 800392c:	f7ff f9d0 	bl	8002cd0 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003930:	4b1c      	ldr	r3, [pc, #112]	; (80039a4 <HAL_UART_MspInit+0x164>)
 8003932:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003936:	4a1b      	ldr	r2, [pc, #108]	; (80039a4 <HAL_UART_MspInit+0x164>)
 8003938:	f043 0320 	orr.w	r3, r3, #32
 800393c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003940:	4b18      	ldr	r3, [pc, #96]	; (80039a4 <HAL_UART_MspInit+0x164>)
 8003942:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003946:	f003 0320 	and.w	r3, r3, #32
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800394e:	4b15      	ldr	r3, [pc, #84]	; (80039a4 <HAL_UART_MspInit+0x164>)
 8003950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003954:	4a13      	ldr	r2, [pc, #76]	; (80039a4 <HAL_UART_MspInit+0x164>)
 8003956:	f043 0304 	orr.w	r3, r3, #4
 800395a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800395e:	4b11      	ldr	r3, [pc, #68]	; (80039a4 <HAL_UART_MspInit+0x164>)
 8003960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	60bb      	str	r3, [r7, #8]
 800396a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800396c:	23c0      	movs	r3, #192	; 0xc0
 800396e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003972:	2302      	movs	r3, #2
 8003974:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003978:	2300      	movs	r3, #0
 800397a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800397e:	2300      	movs	r3, #0
 8003980:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8003984:	2307      	movs	r3, #7
 8003986:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800398a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800398e:	4619      	mov	r1, r3
 8003990:	4807      	ldr	r0, [pc, #28]	; (80039b0 <HAL_UART_MspInit+0x170>)
 8003992:	f004 fb89 	bl	80080a8 <HAL_GPIO_Init>
}
 8003996:	bf00      	nop
 8003998:	37e8      	adds	r7, #232	; 0xe8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	40004c00 	.word	0x40004c00
 80039a4:	58024400 	.word	0x58024400
 80039a8:	58020400 	.word	0x58020400
 80039ac:	40011400 	.word	0x40011400
 80039b0:	58020800 	.word	0x58020800

080039b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039b8:	e7fe      	b.n	80039b8 <NMI_Handler+0x4>

080039ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039ba:	b480      	push	{r7}
 80039bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039be:	e7fe      	b.n	80039be <HardFault_Handler+0x4>

080039c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039c4:	e7fe      	b.n	80039c4 <MemManage_Handler+0x4>

080039c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039c6:	b480      	push	{r7}
 80039c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039ca:	e7fe      	b.n	80039ca <BusFault_Handler+0x4>

080039cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039d0:	e7fe      	b.n	80039d0 <UsageFault_Handler+0x4>

080039d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039d2:	b480      	push	{r7}
 80039d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039d6:	bf00      	nop
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039e4:	bf00      	nop
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039ee:	b480      	push	{r7}
 80039f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039f2:	bf00      	nop
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a00:	f000 fa40 	bl	8003e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a04:	bf00      	nop
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8003a0c:	4802      	ldr	r0, [pc, #8]	; (8003a18 <DMA1_Stream0_IRQHandler+0x10>)
 8003a0e:	f002 fcd5 	bl	80063bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003a12:	bf00      	nop
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	240014e0 	.word	0x240014e0

08003a1c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8003a20:	4802      	ldr	r0, [pc, #8]	; (8003a2c <DMA1_Stream1_IRQHandler+0x10>)
 8003a22:	f002 fccb 	bl	80063bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003a26:	bf00      	nop
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	24001378 	.word	0x24001378

08003a30 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8003a34:	4802      	ldr	r0, [pc, #8]	; (8003a40 <DMA1_Stream2_IRQHandler+0x10>)
 8003a36:	f002 fcc1 	bl	80063bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003a3a:	bf00      	nop
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	24001558 	.word	0x24001558

08003a44 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003a48:	4802      	ldr	r0, [pc, #8]	; (8003a54 <DMA1_Stream3_IRQHandler+0x10>)
 8003a4a:	f002 fcb7 	bl	80063bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003a4e:	bf00      	nop
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	240013f0 	.word	0x240013f0

08003a58 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8003a5c:	4802      	ldr	r0, [pc, #8]	; (8003a68 <DMA1_Stream4_IRQHandler+0x10>)
 8003a5e:	f002 fcad 	bl	80063bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003a62:	bf00      	nop
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	24001468 	.word	0x24001468

08003a6c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003a70:	4802      	ldr	r0, [pc, #8]	; (8003a7c <DMA1_Stream5_IRQHandler+0x10>)
 8003a72:	f002 fca3 	bl	80063bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003a76:	bf00      	nop
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	24000e50 	.word	0x24000e50

08003a80 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003a84:	4802      	ldr	r0, [pc, #8]	; (8003a90 <TIM4_IRQHandler+0x10>)
 8003a86:	f00c fa6d 	bl	800ff64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003a8a:	bf00      	nop
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	240012e0 	.word	0x240012e0

08003a94 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003a98:	4802      	ldr	r0, [pc, #8]	; (8003aa4 <DMA2_Stream7_IRQHandler+0x10>)
 8003a9a:	f002 fc8f 	bl	80063bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003a9e:	bf00      	nop
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	24000ec8 	.word	0x24000ec8

08003aa8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003aac:	4802      	ldr	r0, [pc, #8]	; (8003ab8 <OTG_HS_IRQHandler+0x10>)
 8003aae:	f004 ff55 	bl	800895c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8003ab2:	bf00      	nop
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	24002bfc 	.word	0x24002bfc

08003abc <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8003ac0:	4802      	ldr	r0, [pc, #8]	; (8003acc <SDMMC2_IRQHandler+0x10>)
 8003ac2:	f009 ff1b 	bl	800d8fc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 8003ac6:	bf00      	nop
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	24001034 	.word	0x24001034

08003ad0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
  return 1;
 8003ad4:	2301      	movs	r3, #1
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <_kill>:

int _kill(int pid, int sig)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003aea:	f014 fc59 	bl	80183a0 <__errno>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2216      	movs	r2, #22
 8003af2:	601a      	str	r2, [r3, #0]
  return -1;
 8003af4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <_exit>:

void _exit (int status)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003b08:	f04f 31ff 	mov.w	r1, #4294967295
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f7ff ffe7 	bl	8003ae0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003b12:	e7fe      	b.n	8003b12 <_exit+0x12>

08003b14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b20:	2300      	movs	r3, #0
 8003b22:	617b      	str	r3, [r7, #20]
 8003b24:	e00a      	b.n	8003b3c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003b26:	f3af 8000 	nop.w
 8003b2a:	4601      	mov	r1, r0
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	1c5a      	adds	r2, r3, #1
 8003b30:	60ba      	str	r2, [r7, #8]
 8003b32:	b2ca      	uxtb	r2, r1
 8003b34:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	dbf0      	blt.n	8003b26 <_read+0x12>
  }

  return len;
 8003b44:	687b      	ldr	r3, [r7, #4]
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b086      	sub	sp, #24
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	617b      	str	r3, [r7, #20]
 8003b5e:	e009      	b.n	8003b74 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	1c5a      	adds	r2, r3, #1
 8003b64:	60ba      	str	r2, [r7, #8]
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	3301      	adds	r3, #1
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	dbf1      	blt.n	8003b60 <_write+0x12>
  }
  return len;
 8003b7c:	687b      	ldr	r3, [r7, #4]
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3718      	adds	r7, #24
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <_close>:

int _close(int file)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003b8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b083      	sub	sp, #12
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
 8003ba6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003bae:	605a      	str	r2, [r3, #4]
  return 0;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <_isatty>:

int _isatty(int file)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b083      	sub	sp, #12
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003bc6:	2301      	movs	r3, #1
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
	...

08003bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003bf8:	4a14      	ldr	r2, [pc, #80]	; (8003c4c <_sbrk+0x5c>)
 8003bfa:	4b15      	ldr	r3, [pc, #84]	; (8003c50 <_sbrk+0x60>)
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c04:	4b13      	ldr	r3, [pc, #76]	; (8003c54 <_sbrk+0x64>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d102      	bne.n	8003c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c0c:	4b11      	ldr	r3, [pc, #68]	; (8003c54 <_sbrk+0x64>)
 8003c0e:	4a12      	ldr	r2, [pc, #72]	; (8003c58 <_sbrk+0x68>)
 8003c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c12:	4b10      	ldr	r3, [pc, #64]	; (8003c54 <_sbrk+0x64>)
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4413      	add	r3, r2
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d207      	bcs.n	8003c30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c20:	f014 fbbe 	bl	80183a0 <__errno>
 8003c24:	4603      	mov	r3, r0
 8003c26:	220c      	movs	r2, #12
 8003c28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c2e:	e009      	b.n	8003c44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c30:	4b08      	ldr	r3, [pc, #32]	; (8003c54 <_sbrk+0x64>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c36:	4b07      	ldr	r3, [pc, #28]	; (8003c54 <_sbrk+0x64>)
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	4a05      	ldr	r2, [pc, #20]	; (8003c54 <_sbrk+0x64>)
 8003c40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c42:	68fb      	ldr	r3, [r7, #12]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3718      	adds	r7, #24
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	24050000 	.word	0x24050000
 8003c50:	00000800 	.word	0x00000800
 8003c54:	240016f8 	.word	0x240016f8
 8003c58:	24003478 	.word	0x24003478

08003c5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003c60:	4b32      	ldr	r3, [pc, #200]	; (8003d2c <SystemInit+0xd0>)
 8003c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c66:	4a31      	ldr	r2, [pc, #196]	; (8003d2c <SystemInit+0xd0>)
 8003c68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003c70:	4b2f      	ldr	r3, [pc, #188]	; (8003d30 <SystemInit+0xd4>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 030f 	and.w	r3, r3, #15
 8003c78:	2b06      	cmp	r3, #6
 8003c7a:	d807      	bhi.n	8003c8c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003c7c:	4b2c      	ldr	r3, [pc, #176]	; (8003d30 <SystemInit+0xd4>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f023 030f 	bic.w	r3, r3, #15
 8003c84:	4a2a      	ldr	r2, [pc, #168]	; (8003d30 <SystemInit+0xd4>)
 8003c86:	f043 0307 	orr.w	r3, r3, #7
 8003c8a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003c8c:	4b29      	ldr	r3, [pc, #164]	; (8003d34 <SystemInit+0xd8>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a28      	ldr	r2, [pc, #160]	; (8003d34 <SystemInit+0xd8>)
 8003c92:	f043 0301 	orr.w	r3, r3, #1
 8003c96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003c98:	4b26      	ldr	r3, [pc, #152]	; (8003d34 <SystemInit+0xd8>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003c9e:	4b25      	ldr	r3, [pc, #148]	; (8003d34 <SystemInit+0xd8>)
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	4924      	ldr	r1, [pc, #144]	; (8003d34 <SystemInit+0xd8>)
 8003ca4:	4b24      	ldr	r3, [pc, #144]	; (8003d38 <SystemInit+0xdc>)
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003caa:	4b21      	ldr	r3, [pc, #132]	; (8003d30 <SystemInit+0xd4>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0308 	and.w	r3, r3, #8
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d007      	beq.n	8003cc6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003cb6:	4b1e      	ldr	r3, [pc, #120]	; (8003d30 <SystemInit+0xd4>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f023 030f 	bic.w	r3, r3, #15
 8003cbe:	4a1c      	ldr	r2, [pc, #112]	; (8003d30 <SystemInit+0xd4>)
 8003cc0:	f043 0307 	orr.w	r3, r3, #7
 8003cc4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003cc6:	4b1b      	ldr	r3, [pc, #108]	; (8003d34 <SystemInit+0xd8>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003ccc:	4b19      	ldr	r3, [pc, #100]	; (8003d34 <SystemInit+0xd8>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003cd2:	4b18      	ldr	r3, [pc, #96]	; (8003d34 <SystemInit+0xd8>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003cd8:	4b16      	ldr	r3, [pc, #88]	; (8003d34 <SystemInit+0xd8>)
 8003cda:	4a18      	ldr	r2, [pc, #96]	; (8003d3c <SystemInit+0xe0>)
 8003cdc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003cde:	4b15      	ldr	r3, [pc, #84]	; (8003d34 <SystemInit+0xd8>)
 8003ce0:	4a17      	ldr	r2, [pc, #92]	; (8003d40 <SystemInit+0xe4>)
 8003ce2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003ce4:	4b13      	ldr	r3, [pc, #76]	; (8003d34 <SystemInit+0xd8>)
 8003ce6:	4a17      	ldr	r2, [pc, #92]	; (8003d44 <SystemInit+0xe8>)
 8003ce8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003cea:	4b12      	ldr	r3, [pc, #72]	; (8003d34 <SystemInit+0xd8>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003cf0:	4b10      	ldr	r3, [pc, #64]	; (8003d34 <SystemInit+0xd8>)
 8003cf2:	4a14      	ldr	r2, [pc, #80]	; (8003d44 <SystemInit+0xe8>)
 8003cf4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003cf6:	4b0f      	ldr	r3, [pc, #60]	; (8003d34 <SystemInit+0xd8>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003cfc:	4b0d      	ldr	r3, [pc, #52]	; (8003d34 <SystemInit+0xd8>)
 8003cfe:	4a11      	ldr	r2, [pc, #68]	; (8003d44 <SystemInit+0xe8>)
 8003d00:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003d02:	4b0c      	ldr	r3, [pc, #48]	; (8003d34 <SystemInit+0xd8>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003d08:	4b0a      	ldr	r3, [pc, #40]	; (8003d34 <SystemInit+0xd8>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a09      	ldr	r2, [pc, #36]	; (8003d34 <SystemInit+0xd8>)
 8003d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d12:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003d14:	4b07      	ldr	r3, [pc, #28]	; (8003d34 <SystemInit+0xd8>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003d1a:	4b0b      	ldr	r3, [pc, #44]	; (8003d48 <SystemInit+0xec>)
 8003d1c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003d20:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003d22:	bf00      	nop
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	e000ed00 	.word	0xe000ed00
 8003d30:	52002000 	.word	0x52002000
 8003d34:	58024400 	.word	0x58024400
 8003d38:	eaf6ed7f 	.word	0xeaf6ed7f
 8003d3c:	02020200 	.word	0x02020200
 8003d40:	01ff0000 	.word	0x01ff0000
 8003d44:	01010280 	.word	0x01010280
 8003d48:	52004000 	.word	0x52004000

08003d4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003d4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003d50:	f7ff ff84 	bl	8003c5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d54:	480c      	ldr	r0, [pc, #48]	; (8003d88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003d56:	490d      	ldr	r1, [pc, #52]	; (8003d8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003d58:	4a0d      	ldr	r2, [pc, #52]	; (8003d90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d5c:	e002      	b.n	8003d64 <LoopCopyDataInit>

08003d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d62:	3304      	adds	r3, #4

08003d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d68:	d3f9      	bcc.n	8003d5e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d6a:	4a0a      	ldr	r2, [pc, #40]	; (8003d94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003d6c:	4c0a      	ldr	r4, [pc, #40]	; (8003d98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d70:	e001      	b.n	8003d76 <LoopFillZerobss>

08003d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d74:	3204      	adds	r2, #4

08003d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d78:	d3fb      	bcc.n	8003d72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d7a:	f014 fb17 	bl	80183ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d7e:	f7fd fcff 	bl	8001780 <main>
  bx  lr
 8003d82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003d84:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003d88:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003d8c:	240002c8 	.word	0x240002c8
  ldr r2, =_sidata
 8003d90:	0801c8ac 	.word	0x0801c8ac
  ldr r2, =_sbss
 8003d94:	240002c8 	.word	0x240002c8
  ldr r4, =_ebss
 8003d98:	24003474 	.word	0x24003474

08003d9c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d9c:	e7fe      	b.n	8003d9c <ADC3_IRQHandler>
	...

08003da0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003da6:	2003      	movs	r0, #3
 8003da8:	f001 fd06 	bl	80057b8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003dac:	f006 fd7a 	bl	800a8a4 <HAL_RCC_GetSysClockFreq>
 8003db0:	4602      	mov	r2, r0
 8003db2:	4b15      	ldr	r3, [pc, #84]	; (8003e08 <HAL_Init+0x68>)
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	0a1b      	lsrs	r3, r3, #8
 8003db8:	f003 030f 	and.w	r3, r3, #15
 8003dbc:	4913      	ldr	r1, [pc, #76]	; (8003e0c <HAL_Init+0x6c>)
 8003dbe:	5ccb      	ldrb	r3, [r1, r3]
 8003dc0:	f003 031f 	and.w	r3, r3, #31
 8003dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003dca:	4b0f      	ldr	r3, [pc, #60]	; (8003e08 <HAL_Init+0x68>)
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	f003 030f 	and.w	r3, r3, #15
 8003dd2:	4a0e      	ldr	r2, [pc, #56]	; (8003e0c <HAL_Init+0x6c>)
 8003dd4:	5cd3      	ldrb	r3, [r2, r3]
 8003dd6:	f003 031f 	and.w	r3, r3, #31
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8003de0:	4a0b      	ldr	r2, [pc, #44]	; (8003e10 <HAL_Init+0x70>)
 8003de2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003de4:	4a0b      	ldr	r2, [pc, #44]	; (8003e14 <HAL_Init+0x74>)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003dea:	200f      	movs	r0, #15
 8003dec:	f000 f814 	bl	8003e18 <HAL_InitTick>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e002      	b.n	8003e00 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003dfa:	f7fe ff6f 	bl	8002cdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	58024400 	.word	0x58024400
 8003e0c:	0801c400 	.word	0x0801c400
 8003e10:	24000004 	.word	0x24000004
 8003e14:	24000000 	.word	0x24000000

08003e18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003e20:	4b15      	ldr	r3, [pc, #84]	; (8003e78 <HAL_InitTick+0x60>)
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e021      	b.n	8003e70 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003e2c:	4b13      	ldr	r3, [pc, #76]	; (8003e7c <HAL_InitTick+0x64>)
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	4b11      	ldr	r3, [pc, #68]	; (8003e78 <HAL_InitTick+0x60>)
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	4619      	mov	r1, r3
 8003e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e42:	4618      	mov	r0, r3
 8003e44:	f001 fceb 	bl	800581e <HAL_SYSTICK_Config>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e00e      	b.n	8003e70 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b0f      	cmp	r3, #15
 8003e56:	d80a      	bhi.n	8003e6e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e58:	2200      	movs	r2, #0
 8003e5a:	6879      	ldr	r1, [r7, #4]
 8003e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e60:	f001 fcb5 	bl	80057ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e64:	4a06      	ldr	r2, [pc, #24]	; (8003e80 <HAL_InitTick+0x68>)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	e000      	b.n	8003e70 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	2400000c 	.word	0x2400000c
 8003e7c:	24000000 	.word	0x24000000
 8003e80:	24000008 	.word	0x24000008

08003e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003e88:	4b06      	ldr	r3, [pc, #24]	; (8003ea4 <HAL_IncTick+0x20>)
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	4b06      	ldr	r3, [pc, #24]	; (8003ea8 <HAL_IncTick+0x24>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4413      	add	r3, r2
 8003e94:	4a04      	ldr	r2, [pc, #16]	; (8003ea8 <HAL_IncTick+0x24>)
 8003e96:	6013      	str	r3, [r2, #0]
}
 8003e98:	bf00      	nop
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	2400000c 	.word	0x2400000c
 8003ea8:	240016fc 	.word	0x240016fc

08003eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  return uwTick;
 8003eb0:	4b03      	ldr	r3, [pc, #12]	; (8003ec0 <HAL_GetTick+0x14>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	240016fc 	.word	0x240016fc

08003ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ecc:	f7ff ffee 	bl	8003eac <HAL_GetTick>
 8003ed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003edc:	d005      	beq.n	8003eea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ede:	4b0a      	ldr	r3, [pc, #40]	; (8003f08 <HAL_Delay+0x44>)
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003eea:	bf00      	nop
 8003eec:	f7ff ffde 	bl	8003eac <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d8f7      	bhi.n	8003eec <HAL_Delay+0x28>
  {
  }
}
 8003efc:	bf00      	nop
 8003efe:	bf00      	nop
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	2400000c 	.word	0x2400000c

08003f0c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003f16:	4b07      	ldr	r3, [pc, #28]	; (8003f34 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	401a      	ands	r2, r3
 8003f20:	4904      	ldr	r1, [pc, #16]	; (8003f34 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	604b      	str	r3, [r1, #4]
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr
 8003f34:	58000400 	.word	0x58000400

08003f38 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	609a      	str	r2, [r3, #8]
}
 8003f52:	bf00      	nop
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b083      	sub	sp, #12
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
 8003f66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	609a      	str	r2, [r3, #8]
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b087      	sub	sp, #28
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
 8003fac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	3360      	adds	r3, #96	; 0x60
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4413      	add	r3, r2
 8003fba:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4a10      	ldr	r2, [pc, #64]	; (8004000 <LL_ADC_SetOffset+0x60>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d10b      	bne.n	8003fdc <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003fda:	e00b      	b.n	8003ff4 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	430b      	orrs	r3, r1
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	601a      	str	r2, [r3, #0]
}
 8003ff4:	bf00      	nop
 8003ff6:	371c      	adds	r7, #28
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	58026000 	.word	0x58026000

08004004 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	3360      	adds	r3, #96	; 0x60
 8004012:	461a      	mov	r2, r3
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004024:	4618      	mov	r0, r3
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	f003 031f 	and.w	r3, r3, #31
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	fa01 f303 	lsl.w	r3, r1, r3
 8004050:	431a      	orrs	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	611a      	str	r2, [r3, #16]
}
 8004056:	bf00      	nop
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
	...

08004064 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004064:	b480      	push	{r7}
 8004066:	b087      	sub	sp, #28
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	4a0c      	ldr	r2, [pc, #48]	; (80040a4 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d00e      	beq.n	8004096 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	3360      	adds	r3, #96	; 0x60
 800407c:	461a      	mov	r2, r3
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	4413      	add	r3, r2
 8004084:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	431a      	orrs	r2, r3
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	601a      	str	r2, [r3, #0]
  }
}
 8004096:	bf00      	nop
 8004098:	371c      	adds	r7, #28
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	58026000 	.word	0x58026000

080040a8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	4a0c      	ldr	r2, [pc, #48]	; (80040e8 <LL_ADC_SetOffsetSaturation+0x40>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d10e      	bne.n	80040da <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	3360      	adds	r3, #96	; 0x60
 80040c0:	461a      	mov	r2, r3
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	4413      	add	r3, r2
 80040c8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	431a      	orrs	r2, r3
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80040da:	bf00      	nop
 80040dc:	371c      	adds	r7, #28
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	58026000 	.word	0x58026000

080040ec <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4a0c      	ldr	r2, [pc, #48]	; (800412c <LL_ADC_SetOffsetSign+0x40>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d10e      	bne.n	800411e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	3360      	adds	r3, #96	; 0x60
 8004104:	461a      	mov	r2, r3
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4413      	add	r3, r2
 800410c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	431a      	orrs	r2, r3
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800411e:	bf00      	nop
 8004120:	371c      	adds	r7, #28
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	58026000 	.word	0x58026000

08004130 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004130:	b480      	push	{r7}
 8004132:	b087      	sub	sp, #28
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	3360      	adds	r3, #96	; 0x60
 8004140:	461a      	mov	r2, r3
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	4413      	add	r3, r2
 8004148:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	4a0c      	ldr	r2, [pc, #48]	; (8004180 <LL_ADC_SetOffsetState+0x50>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d108      	bne.n	8004164 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	431a      	orrs	r2, r3
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8004162:	e007      	b.n	8004174 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	431a      	orrs	r2, r3
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	601a      	str	r2, [r3, #0]
}
 8004174:	bf00      	nop
 8004176:	371c      	adds	r7, #28
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr
 8004180:	58026000 	.word	0x58026000

08004184 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004184:	b480      	push	{r7}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	3330      	adds	r3, #48	; 0x30
 8004194:	461a      	mov	r2, r3
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	0a1b      	lsrs	r3, r3, #8
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	f003 030c 	and.w	r3, r3, #12
 80041a0:	4413      	add	r3, r2
 80041a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	f003 031f 	and.w	r3, r3, #31
 80041ae:	211f      	movs	r1, #31
 80041b0:	fa01 f303 	lsl.w	r3, r1, r3
 80041b4:	43db      	mvns	r3, r3
 80041b6:	401a      	ands	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	0e9b      	lsrs	r3, r3, #26
 80041bc:	f003 011f 	and.w	r1, r3, #31
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	f003 031f 	and.w	r3, r3, #31
 80041c6:	fa01 f303 	lsl.w	r3, r1, r3
 80041ca:	431a      	orrs	r2, r3
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80041d0:	bf00      	nop
 80041d2:	371c      	adds	r7, #28
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80041dc:	b480      	push	{r7}
 80041de:	b087      	sub	sp, #28
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	3314      	adds	r3, #20
 80041ec:	461a      	mov	r2, r3
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	0e5b      	lsrs	r3, r3, #25
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	f003 0304 	and.w	r3, r3, #4
 80041f8:	4413      	add	r3, r2
 80041fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	0d1b      	lsrs	r3, r3, #20
 8004204:	f003 031f 	and.w	r3, r3, #31
 8004208:	2107      	movs	r1, #7
 800420a:	fa01 f303 	lsl.w	r3, r1, r3
 800420e:	43db      	mvns	r3, r3
 8004210:	401a      	ands	r2, r3
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	0d1b      	lsrs	r3, r3, #20
 8004216:	f003 031f 	and.w	r3, r3, #31
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	fa01 f303 	lsl.w	r3, r1, r3
 8004220:	431a      	orrs	r2, r3
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004226:	bf00      	nop
 8004228:	371c      	adds	r7, #28
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
	...

08004234 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	4a1a      	ldr	r2, [pc, #104]	; (80042ac <LL_ADC_SetChannelSingleDiff+0x78>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d115      	bne.n	8004274 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004254:	43db      	mvns	r3, r3
 8004256:	401a      	ands	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f003 0318 	and.w	r3, r3, #24
 800425e:	4914      	ldr	r1, [pc, #80]	; (80042b0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004260:	40d9      	lsrs	r1, r3
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	400b      	ands	r3, r1
 8004266:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800426a:	431a      	orrs	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8004272:	e014      	b.n	800429e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004280:	43db      	mvns	r3, r3
 8004282:	401a      	ands	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f003 0318 	and.w	r3, r3, #24
 800428a:	4909      	ldr	r1, [pc, #36]	; (80042b0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 800428c:	40d9      	lsrs	r1, r3
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	400b      	ands	r3, r1
 8004292:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004296:	431a      	orrs	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 800429e:	bf00      	nop
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	58026000 	.word	0x58026000
 80042b0:	000fffff 	.word	0x000fffff

080042b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	4b04      	ldr	r3, [pc, #16]	; (80042d4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80042c2:	4013      	ands	r3, r2
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6093      	str	r3, [r2, #8]
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr
 80042d4:	5fffffc0 	.word	0x5fffffc0

080042d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042ec:	d101      	bne.n	80042f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80042ee:	2301      	movs	r3, #1
 80042f0:	e000      	b.n	80042f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	4b05      	ldr	r3, [pc, #20]	; (8004324 <LL_ADC_EnableInternalRegulator+0x24>)
 800430e:	4013      	ands	r3, r2
 8004310:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004318:	bf00      	nop
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr
 8004324:	6fffffc0 	.word	0x6fffffc0

08004328 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004338:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800433c:	d101      	bne.n	8004342 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800433e:	2301      	movs	r3, #1
 8004340:	e000      	b.n	8004344 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	2b01      	cmp	r3, #1
 8004362:	d101      	bne.n	8004368 <LL_ADC_IsEnabled+0x18>
 8004364:	2301      	movs	r3, #1
 8004366:	e000      	b.n	800436a <LL_ADC_IsEnabled+0x1a>
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004376:	b480      	push	{r7}
 8004378:	b083      	sub	sp, #12
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 0304 	and.w	r3, r3, #4
 8004386:	2b04      	cmp	r3, #4
 8004388:	d101      	bne.n	800438e <LL_ADC_REG_IsConversionOngoing+0x18>
 800438a:	2301      	movs	r3, #1
 800438c:	e000      	b.n	8004390 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f003 0308 	and.w	r3, r3, #8
 80043ac:	2b08      	cmp	r3, #8
 80043ae:	d101      	bne.n	80043b4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80043b0:	2301      	movs	r3, #1
 80043b2:	e000      	b.n	80043b6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
	...

080043c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80043c4:	b590      	push	{r4, r7, lr}
 80043c6:	b089      	sub	sp, #36	; 0x24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043cc:	2300      	movs	r3, #0
 80043ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80043d0:	2300      	movs	r3, #0
 80043d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e1ee      	b.n	80047bc <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d109      	bne.n	8004400 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f7fe fc8f 	bl	8002d10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4618      	mov	r0, r3
 8004406:	f7ff ff67 	bl	80042d8 <LL_ADC_IsDeepPowerDownEnabled>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d004      	beq.n	800441a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4618      	mov	r0, r3
 8004416:	f7ff ff4d 	bl	80042b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f7ff ff82 	bl	8004328 <LL_ADC_IsInternalRegulatorEnabled>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d114      	bne.n	8004454 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4618      	mov	r0, r3
 8004430:	f7ff ff66 	bl	8004300 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004434:	4b8e      	ldr	r3, [pc, #568]	; (8004670 <HAL_ADC_Init+0x2ac>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	099b      	lsrs	r3, r3, #6
 800443a:	4a8e      	ldr	r2, [pc, #568]	; (8004674 <HAL_ADC_Init+0x2b0>)
 800443c:	fba2 2303 	umull	r2, r3, r2, r3
 8004440:	099b      	lsrs	r3, r3, #6
 8004442:	3301      	adds	r3, #1
 8004444:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004446:	e002      	b.n	800444e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	3b01      	subs	r3, #1
 800444c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1f9      	bne.n	8004448 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4618      	mov	r0, r3
 800445a:	f7ff ff65 	bl	8004328 <LL_ADC_IsInternalRegulatorEnabled>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d10d      	bne.n	8004480 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004468:	f043 0210 	orr.w	r2, r3, #16
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004474:	f043 0201 	orr.w	r2, r3, #1
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff ff76 	bl	8004376 <LL_ADC_REG_IsConversionOngoing>
 800448a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004490:	f003 0310 	and.w	r3, r3, #16
 8004494:	2b00      	cmp	r3, #0
 8004496:	f040 8188 	bne.w	80047aa <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	2b00      	cmp	r3, #0
 800449e:	f040 8184 	bne.w	80047aa <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80044aa:	f043 0202 	orr.w	r2, r3, #2
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7ff ff4a 	bl	8004350 <LL_ADC_IsEnabled>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d136      	bne.n	8004530 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a6c      	ldr	r2, [pc, #432]	; (8004678 <HAL_ADC_Init+0x2b4>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d004      	beq.n	80044d6 <HAL_ADC_Init+0x112>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a6a      	ldr	r2, [pc, #424]	; (800467c <HAL_ADC_Init+0x2b8>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d10e      	bne.n	80044f4 <HAL_ADC_Init+0x130>
 80044d6:	4868      	ldr	r0, [pc, #416]	; (8004678 <HAL_ADC_Init+0x2b4>)
 80044d8:	f7ff ff3a 	bl	8004350 <LL_ADC_IsEnabled>
 80044dc:	4604      	mov	r4, r0
 80044de:	4867      	ldr	r0, [pc, #412]	; (800467c <HAL_ADC_Init+0x2b8>)
 80044e0:	f7ff ff36 	bl	8004350 <LL_ADC_IsEnabled>
 80044e4:	4603      	mov	r3, r0
 80044e6:	4323      	orrs	r3, r4
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	bf0c      	ite	eq
 80044ec:	2301      	moveq	r3, #1
 80044ee:	2300      	movne	r3, #0
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	e008      	b.n	8004506 <HAL_ADC_Init+0x142>
 80044f4:	4862      	ldr	r0, [pc, #392]	; (8004680 <HAL_ADC_Init+0x2bc>)
 80044f6:	f7ff ff2b 	bl	8004350 <LL_ADC_IsEnabled>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	bf0c      	ite	eq
 8004500:	2301      	moveq	r3, #1
 8004502:	2300      	movne	r3, #0
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d012      	beq.n	8004530 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a5a      	ldr	r2, [pc, #360]	; (8004678 <HAL_ADC_Init+0x2b4>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d004      	beq.n	800451e <HAL_ADC_Init+0x15a>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a58      	ldr	r2, [pc, #352]	; (800467c <HAL_ADC_Init+0x2b8>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d101      	bne.n	8004522 <HAL_ADC_Init+0x15e>
 800451e:	4a59      	ldr	r2, [pc, #356]	; (8004684 <HAL_ADC_Init+0x2c0>)
 8004520:	e000      	b.n	8004524 <HAL_ADC_Init+0x160>
 8004522:	4a59      	ldr	r2, [pc, #356]	; (8004688 <HAL_ADC_Init+0x2c4>)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	4619      	mov	r1, r3
 800452a:	4610      	mov	r0, r2
 800452c:	f7ff fd04 	bl	8003f38 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a52      	ldr	r2, [pc, #328]	; (8004680 <HAL_ADC_Init+0x2bc>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d129      	bne.n	800458e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	7e5b      	ldrb	r3, [r3, #25]
 800453e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004544:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800454a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	2b08      	cmp	r3, #8
 8004552:	d013      	beq.n	800457c <HAL_ADC_Init+0x1b8>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	2b0c      	cmp	r3, #12
 800455a:	d00d      	beq.n	8004578 <HAL_ADC_Init+0x1b4>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	2b1c      	cmp	r3, #28
 8004562:	d007      	beq.n	8004574 <HAL_ADC_Init+0x1b0>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	2b18      	cmp	r3, #24
 800456a:	d101      	bne.n	8004570 <HAL_ADC_Init+0x1ac>
 800456c:	2318      	movs	r3, #24
 800456e:	e006      	b.n	800457e <HAL_ADC_Init+0x1ba>
 8004570:	2300      	movs	r3, #0
 8004572:	e004      	b.n	800457e <HAL_ADC_Init+0x1ba>
 8004574:	2310      	movs	r3, #16
 8004576:	e002      	b.n	800457e <HAL_ADC_Init+0x1ba>
 8004578:	2308      	movs	r3, #8
 800457a:	e000      	b.n	800457e <HAL_ADC_Init+0x1ba>
 800457c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800457e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004586:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004588:	4313      	orrs	r3, r2
 800458a:	61bb      	str	r3, [r7, #24]
 800458c:	e00e      	b.n	80045ac <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	7e5b      	ldrb	r3, [r3, #25]
 8004592:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004598:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800459e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045a6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80045a8:	4313      	orrs	r3, r2
 80045aa:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d106      	bne.n	80045c4 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ba:	3b01      	subs	r3, #1
 80045bc:	045b      	lsls	r3, r3, #17
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d009      	beq.n	80045e0 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	4313      	orrs	r3, r2
 80045de:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a26      	ldr	r2, [pc, #152]	; (8004680 <HAL_ADC_Init+0x2bc>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d115      	bne.n	8004616 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68da      	ldr	r2, [r3, #12]
 80045f0:	4b26      	ldr	r3, [pc, #152]	; (800468c <HAL_ADC_Init+0x2c8>)
 80045f2:	4013      	ands	r3, r2
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6812      	ldr	r2, [r2, #0]
 80045f8:	69b9      	ldr	r1, [r7, #24]
 80045fa:	430b      	orrs	r3, r1
 80045fc:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	611a      	str	r2, [r3, #16]
 8004614:	e009      	b.n	800462a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68da      	ldr	r2, [r3, #12]
 800461c:	4b1c      	ldr	r3, [pc, #112]	; (8004690 <HAL_ADC_Init+0x2cc>)
 800461e:	4013      	ands	r3, r2
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	6812      	ldr	r2, [r2, #0]
 8004624:	69b9      	ldr	r1, [r7, #24]
 8004626:	430b      	orrs	r3, r1
 8004628:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4618      	mov	r0, r3
 8004630:	f7ff fea1 	bl	8004376 <LL_ADC_REG_IsConversionOngoing>
 8004634:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f7ff feae 	bl	800439c <LL_ADC_INJ_IsConversionOngoing>
 8004640:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	2b00      	cmp	r3, #0
 8004646:	f040 808e 	bne.w	8004766 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2b00      	cmp	r3, #0
 800464e:	f040 808a 	bne.w	8004766 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a0a      	ldr	r2, [pc, #40]	; (8004680 <HAL_ADC_Init+0x2bc>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d11b      	bne.n	8004694 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	7e1b      	ldrb	r3, [r3, #24]
 8004660:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004668:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800466a:	4313      	orrs	r3, r2
 800466c:	61bb      	str	r3, [r7, #24]
 800466e:	e018      	b.n	80046a2 <HAL_ADC_Init+0x2de>
 8004670:	24000000 	.word	0x24000000
 8004674:	053e2d63 	.word	0x053e2d63
 8004678:	40022000 	.word	0x40022000
 800467c:	40022100 	.word	0x40022100
 8004680:	58026000 	.word	0x58026000
 8004684:	40022300 	.word	0x40022300
 8004688:	58026300 	.word	0x58026300
 800468c:	fff04007 	.word	0xfff04007
 8004690:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	7e1b      	ldrb	r3, [r3, #24]
 8004698:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 800469e:	4313      	orrs	r3, r2
 80046a0:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68da      	ldr	r2, [r3, #12]
 80046a8:	4b46      	ldr	r3, [pc, #280]	; (80047c4 <HAL_ADC_Init+0x400>)
 80046aa:	4013      	ands	r3, r2
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	6812      	ldr	r2, [r2, #0]
 80046b0:	69b9      	ldr	r1, [r7, #24]
 80046b2:	430b      	orrs	r3, r1
 80046b4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d137      	bne.n	8004730 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c4:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a3f      	ldr	r2, [pc, #252]	; (80047c8 <HAL_ADC_Init+0x404>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d116      	bne.n	80046fe <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	691a      	ldr	r2, [r3, #16]
 80046d6:	4b3d      	ldr	r3, [pc, #244]	; (80047cc <HAL_ADC_Init+0x408>)
 80046d8:	4013      	ands	r3, r2
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80046e2:	4311      	orrs	r1, r2
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80046e8:	4311      	orrs	r1, r2
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80046ee:	430a      	orrs	r2, r1
 80046f0:	431a      	orrs	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f042 0201 	orr.w	r2, r2, #1
 80046fa:	611a      	str	r2, [r3, #16]
 80046fc:	e020      	b.n	8004740 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	691a      	ldr	r2, [r3, #16]
 8004704:	4b32      	ldr	r3, [pc, #200]	; (80047d0 <HAL_ADC_Init+0x40c>)
 8004706:	4013      	ands	r3, r2
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800470c:	3a01      	subs	r2, #1
 800470e:	0411      	lsls	r1, r2, #16
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004714:	4311      	orrs	r1, r2
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800471a:	4311      	orrs	r1, r2
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004720:	430a      	orrs	r2, r1
 8004722:	431a      	orrs	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f042 0201 	orr.w	r2, r2, #1
 800472c:	611a      	str	r2, [r3, #16]
 800472e:	e007      	b.n	8004740 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	691a      	ldr	r2, [r3, #16]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 0201 	bic.w	r2, r2, #1
 800473e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a1b      	ldr	r2, [pc, #108]	; (80047c8 <HAL_ADC_Init+0x404>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d002      	beq.n	8004766 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 fd63 	bl	800522c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d10c      	bne.n	8004788 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004774:	f023 010f 	bic.w	r1, r3, #15
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	1e5a      	subs	r2, r3, #1
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	430a      	orrs	r2, r1
 8004784:	631a      	str	r2, [r3, #48]	; 0x30
 8004786:	e007      	b.n	8004798 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 020f 	bic.w	r2, r2, #15
 8004796:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800479c:	f023 0303 	bic.w	r3, r3, #3
 80047a0:	f043 0201 	orr.w	r2, r3, #1
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	661a      	str	r2, [r3, #96]	; 0x60
 80047a8:	e007      	b.n	80047ba <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ae:	f043 0210 	orr.w	r2, r3, #16
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80047ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3724      	adds	r7, #36	; 0x24
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd90      	pop	{r4, r7, pc}
 80047c4:	ffffbffc 	.word	0xffffbffc
 80047c8:	58026000 	.word	0x58026000
 80047cc:	fc00f81f 	.word	0xfc00f81f
 80047d0:	fc00f81e 	.word	0xfc00f81e

080047d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80047d4:	b590      	push	{r4, r7, lr}
 80047d6:	b0b9      	sub	sp, #228	; 0xe4
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047de:	2300      	movs	r3, #0
 80047e0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80047e4:	2300      	movs	r3, #0
 80047e6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047ee:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	4aa9      	ldr	r2, [pc, #676]	; (8004a9c <HAL_ADC_ConfigChannel+0x2c8>)
 80047f6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d102      	bne.n	8004808 <HAL_ADC_ConfigChannel+0x34>
 8004802:	2302      	movs	r3, #2
 8004804:	f000 bcfa 	b.w	80051fc <HAL_ADC_ConfigChannel+0xa28>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4618      	mov	r0, r3
 8004816:	f7ff fdae 	bl	8004376 <LL_ADC_REG_IsConversionOngoing>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	f040 84de 	bne.w	80051de <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a9e      	ldr	r2, [pc, #632]	; (8004aa0 <HAL_ADC_ConfigChannel+0x2cc>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d033      	beq.n	8004894 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004834:	2b00      	cmp	r3, #0
 8004836:	d108      	bne.n	800484a <HAL_ADC_ConfigChannel+0x76>
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	0e9b      	lsrs	r3, r3, #26
 800483e:	f003 031f 	and.w	r3, r3, #31
 8004842:	2201      	movs	r2, #1
 8004844:	fa02 f303 	lsl.w	r3, r2, r3
 8004848:	e01d      	b.n	8004886 <HAL_ADC_ConfigChannel+0xb2>
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004852:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004856:	fa93 f3a3 	rbit	r3, r3
 800485a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800485e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004862:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004866:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 800486e:	2320      	movs	r3, #32
 8004870:	e004      	b.n	800487c <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8004872:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004876:	fab3 f383 	clz	r3, r3
 800487a:	b2db      	uxtb	r3, r3
 800487c:	f003 031f 	and.w	r3, r3, #31
 8004880:	2201      	movs	r2, #1
 8004882:	fa02 f303 	lsl.w	r3, r2, r3
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	6812      	ldr	r2, [r2, #0]
 800488a:	69d1      	ldr	r1, [r2, #28]
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6812      	ldr	r2, [r2, #0]
 8004890:	430b      	orrs	r3, r1
 8004892:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6818      	ldr	r0, [r3, #0]
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	6859      	ldr	r1, [r3, #4]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	461a      	mov	r2, r3
 80048a2:	f7ff fc6f 	bl	8004184 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff fd63 	bl	8004376 <LL_ADC_REG_IsConversionOngoing>
 80048b0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7ff fd6f 	bl	800439c <LL_ADC_INJ_IsConversionOngoing>
 80048be:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80048c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f040 8270 	bne.w	8004dac <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80048cc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f040 826b 	bne.w	8004dac <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6818      	ldr	r0, [r3, #0]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	6819      	ldr	r1, [r3, #0]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	461a      	mov	r2, r3
 80048e4:	f7ff fc7a 	bl	80041dc <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a6c      	ldr	r2, [pc, #432]	; (8004aa0 <HAL_ADC_ConfigChannel+0x2cc>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d10d      	bne.n	800490e <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	695a      	ldr	r2, [r3, #20]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	08db      	lsrs	r3, r3, #3
 80048fe:	f003 0303 	and.w	r3, r3, #3
 8004902:	005b      	lsls	r3, r3, #1
 8004904:	fa02 f303 	lsl.w	r3, r2, r3
 8004908:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800490c:	e032      	b.n	8004974 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800490e:	4b65      	ldr	r3, [pc, #404]	; (8004aa4 <HAL_ADC_ConfigChannel+0x2d0>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004916:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800491a:	d10b      	bne.n	8004934 <HAL_ADC_ConfigChannel+0x160>
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	695a      	ldr	r2, [r3, #20]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	089b      	lsrs	r3, r3, #2
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	fa02 f303 	lsl.w	r3, r2, r3
 8004932:	e01d      	b.n	8004970 <HAL_ADC_ConfigChannel+0x19c>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	f003 0310 	and.w	r3, r3, #16
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10b      	bne.n	800495a <HAL_ADC_ConfigChannel+0x186>
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	695a      	ldr	r2, [r3, #20]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	089b      	lsrs	r3, r3, #2
 800494e:	f003 0307 	and.w	r3, r3, #7
 8004952:	005b      	lsls	r3, r3, #1
 8004954:	fa02 f303 	lsl.w	r3, r2, r3
 8004958:	e00a      	b.n	8004970 <HAL_ADC_ConfigChannel+0x19c>
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	695a      	ldr	r2, [r3, #20]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	089b      	lsrs	r3, r3, #2
 8004966:	f003 0304 	and.w	r3, r3, #4
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	fa02 f303 	lsl.w	r3, r2, r3
 8004970:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	2b04      	cmp	r3, #4
 800497a:	d048      	beq.n	8004a0e <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6818      	ldr	r0, [r3, #0]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	6919      	ldr	r1, [r3, #16]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800498c:	f7ff fb08 	bl	8003fa0 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a42      	ldr	r2, [pc, #264]	; (8004aa0 <HAL_ADC_ConfigChannel+0x2cc>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d119      	bne.n	80049ce <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6818      	ldr	r0, [r3, #0]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	6919      	ldr	r1, [r3, #16]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	461a      	mov	r2, r3
 80049a8:	f7ff fba0 	bl	80040ec <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6818      	ldr	r0, [r3, #0]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	6919      	ldr	r1, [r3, #16]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d102      	bne.n	80049c4 <HAL_ADC_ConfigChannel+0x1f0>
 80049be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049c2:	e000      	b.n	80049c6 <HAL_ADC_ConfigChannel+0x1f2>
 80049c4:	2300      	movs	r3, #0
 80049c6:	461a      	mov	r2, r3
 80049c8:	f7ff fb6e 	bl	80040a8 <LL_ADC_SetOffsetSaturation>
 80049cc:	e1ee      	b.n	8004dac <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6818      	ldr	r0, [r3, #0]
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	6919      	ldr	r1, [r3, #16]
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d102      	bne.n	80049e6 <HAL_ADC_ConfigChannel+0x212>
 80049e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80049e4:	e000      	b.n	80049e8 <HAL_ADC_ConfigChannel+0x214>
 80049e6:	2300      	movs	r3, #0
 80049e8:	461a      	mov	r2, r3
 80049ea:	f7ff fb3b 	bl	8004064 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6818      	ldr	r0, [r3, #0]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	6919      	ldr	r1, [r3, #16]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	7e1b      	ldrb	r3, [r3, #24]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d102      	bne.n	8004a04 <HAL_ADC_ConfigChannel+0x230>
 80049fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a02:	e000      	b.n	8004a06 <HAL_ADC_ConfigChannel+0x232>
 8004a04:	2300      	movs	r3, #0
 8004a06:	461a      	mov	r2, r3
 8004a08:	f7ff fb12 	bl	8004030 <LL_ADC_SetDataRightShift>
 8004a0c:	e1ce      	b.n	8004dac <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a23      	ldr	r2, [pc, #140]	; (8004aa0 <HAL_ADC_ConfigChannel+0x2cc>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	f040 8181 	bne.w	8004d1c <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2100      	movs	r1, #0
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7ff faef 	bl	8004004 <LL_ADC_GetOffsetChannel>
 8004a26:	4603      	mov	r3, r0
 8004a28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10a      	bne.n	8004a46 <HAL_ADC_ConfigChannel+0x272>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2100      	movs	r1, #0
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7ff fae4 	bl	8004004 <LL_ADC_GetOffsetChannel>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	0e9b      	lsrs	r3, r3, #26
 8004a40:	f003 021f 	and.w	r2, r3, #31
 8004a44:	e01e      	b.n	8004a84 <HAL_ADC_ConfigChannel+0x2b0>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7ff fad9 	bl	8004004 <LL_ADC_GetOffsetChannel>
 8004a52:	4603      	mov	r3, r0
 8004a54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a5c:	fa93 f3a3 	rbit	r3, r3
 8004a60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8004a64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004a68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8004a6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d101      	bne.n	8004a78 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8004a74:	2320      	movs	r3, #32
 8004a76:	e004      	b.n	8004a82 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8004a78:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a7c:	fab3 f383 	clz	r3, r3
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	461a      	mov	r2, r3
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10b      	bne.n	8004aa8 <HAL_ADC_ConfigChannel+0x2d4>
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	0e9b      	lsrs	r3, r3, #26
 8004a96:	f003 031f 	and.w	r3, r3, #31
 8004a9a:	e01e      	b.n	8004ada <HAL_ADC_ConfigChannel+0x306>
 8004a9c:	47ff0000 	.word	0x47ff0000
 8004aa0:	58026000 	.word	0x58026000
 8004aa4:	5c001000 	.word	0x5c001000
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ab4:	fa93 f3a3 	rbit	r3, r3
 8004ab8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004abc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004ac0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004ac4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d101      	bne.n	8004ad0 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8004acc:	2320      	movs	r3, #32
 8004ace:	e004      	b.n	8004ada <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8004ad0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004ad4:	fab3 f383 	clz	r3, r3
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d106      	bne.n	8004aec <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7ff fb22 	bl	8004130 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2101      	movs	r1, #1
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7ff fa86 	bl	8004004 <LL_ADC_GetOffsetChannel>
 8004af8:	4603      	mov	r3, r0
 8004afa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10a      	bne.n	8004b18 <HAL_ADC_ConfigChannel+0x344>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2101      	movs	r1, #1
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7ff fa7b 	bl	8004004 <LL_ADC_GetOffsetChannel>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	0e9b      	lsrs	r3, r3, #26
 8004b12:	f003 021f 	and.w	r2, r3, #31
 8004b16:	e01e      	b.n	8004b56 <HAL_ADC_ConfigChannel+0x382>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7ff fa70 	bl	8004004 <LL_ADC_GetOffsetChannel>
 8004b24:	4603      	mov	r3, r0
 8004b26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b2e:	fa93 f3a3 	rbit	r3, r3
 8004b32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004b36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004b3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d101      	bne.n	8004b4a <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8004b46:	2320      	movs	r3, #32
 8004b48:	e004      	b.n	8004b54 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8004b4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004b4e:	fab3 f383 	clz	r3, r3
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	461a      	mov	r2, r3
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d105      	bne.n	8004b6e <HAL_ADC_ConfigChannel+0x39a>
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	0e9b      	lsrs	r3, r3, #26
 8004b68:	f003 031f 	and.w	r3, r3, #31
 8004b6c:	e018      	b.n	8004ba0 <HAL_ADC_ConfigChannel+0x3cc>
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b76:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004b7a:	fa93 f3a3 	rbit	r3, r3
 8004b7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004b82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b86:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004b8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8004b92:	2320      	movs	r3, #32
 8004b94:	e004      	b.n	8004ba0 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8004b96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b9a:	fab3 f383 	clz	r3, r3
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d106      	bne.n	8004bb2 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	2101      	movs	r1, #1
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7ff fabf 	bl	8004130 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2102      	movs	r1, #2
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7ff fa23 	bl	8004004 <LL_ADC_GetOffsetChannel>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10a      	bne.n	8004bde <HAL_ADC_ConfigChannel+0x40a>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2102      	movs	r1, #2
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7ff fa18 	bl	8004004 <LL_ADC_GetOffsetChannel>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	0e9b      	lsrs	r3, r3, #26
 8004bd8:	f003 021f 	and.w	r2, r3, #31
 8004bdc:	e01e      	b.n	8004c1c <HAL_ADC_ConfigChannel+0x448>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2102      	movs	r1, #2
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7ff fa0d 	bl	8004004 <LL_ADC_GetOffsetChannel>
 8004bea:	4603      	mov	r3, r0
 8004bec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bf4:	fa93 f3a3 	rbit	r3, r3
 8004bf8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004bfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004c04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d101      	bne.n	8004c10 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8004c0c:	2320      	movs	r3, #32
 8004c0e:	e004      	b.n	8004c1a <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8004c10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c14:	fab3 f383 	clz	r3, r3
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d105      	bne.n	8004c34 <HAL_ADC_ConfigChannel+0x460>
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	0e9b      	lsrs	r3, r3, #26
 8004c2e:	f003 031f 	and.w	r3, r3, #31
 8004c32:	e014      	b.n	8004c5e <HAL_ADC_ConfigChannel+0x48a>
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c3c:	fa93 f3a3 	rbit	r3, r3
 8004c40:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004c42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004c48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8004c50:	2320      	movs	r3, #32
 8004c52:	e004      	b.n	8004c5e <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8004c54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c58:	fab3 f383 	clz	r3, r3
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d106      	bne.n	8004c70 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2200      	movs	r2, #0
 8004c68:	2102      	movs	r1, #2
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7ff fa60 	bl	8004130 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2103      	movs	r1, #3
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7ff f9c4 	bl	8004004 <LL_ADC_GetOffsetChannel>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10a      	bne.n	8004c9c <HAL_ADC_ConfigChannel+0x4c8>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2103      	movs	r1, #3
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7ff f9b9 	bl	8004004 <LL_ADC_GetOffsetChannel>
 8004c92:	4603      	mov	r3, r0
 8004c94:	0e9b      	lsrs	r3, r3, #26
 8004c96:	f003 021f 	and.w	r2, r3, #31
 8004c9a:	e017      	b.n	8004ccc <HAL_ADC_ConfigChannel+0x4f8>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2103      	movs	r1, #3
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7ff f9ae 	bl	8004004 <LL_ADC_GetOffsetChannel>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cae:	fa93 f3a3 	rbit	r3, r3
 8004cb2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004cb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cb6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004cb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004cbe:	2320      	movs	r3, #32
 8004cc0:	e003      	b.n	8004cca <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004cc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cc4:	fab3 f383 	clz	r3, r3
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	461a      	mov	r2, r3
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d105      	bne.n	8004ce4 <HAL_ADC_ConfigChannel+0x510>
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	0e9b      	lsrs	r3, r3, #26
 8004cde:	f003 031f 	and.w	r3, r3, #31
 8004ce2:	e011      	b.n	8004d08 <HAL_ADC_ConfigChannel+0x534>
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cec:	fa93 f3a3 	rbit	r3, r3
 8004cf0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004cf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cf4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004cf6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d101      	bne.n	8004d00 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8004cfc:	2320      	movs	r3, #32
 8004cfe:	e003      	b.n	8004d08 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8004d00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d02:	fab3 f383 	clz	r3, r3
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d14f      	bne.n	8004dac <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2200      	movs	r2, #0
 8004d12:	2103      	movs	r1, #3
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7ff fa0b 	bl	8004130 <LL_ADC_SetOffsetState>
 8004d1a:	e047      	b.n	8004dac <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	069b      	lsls	r3, r3, #26
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d107      	bne.n	8004d40 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004d3e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	069b      	lsls	r3, r3, #26
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d107      	bne.n	8004d64 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004d62:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	069b      	lsls	r3, r3, #26
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d107      	bne.n	8004d88 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004d86:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	069b      	lsls	r3, r3, #26
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d107      	bne.n	8004dac <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004daa:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7ff facd 	bl	8004350 <LL_ADC_IsEnabled>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f040 8219 	bne.w	80051f0 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6818      	ldr	r0, [r3, #0]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	6819      	ldr	r1, [r3, #0]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	f7ff fa32 	bl	8004234 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	4aa1      	ldr	r2, [pc, #644]	; (800505c <HAL_ADC_ConfigChannel+0x888>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	f040 812e 	bne.w	8005038 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10b      	bne.n	8004e04 <HAL_ADC_ConfigChannel+0x630>
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	0e9b      	lsrs	r3, r3, #26
 8004df2:	3301      	adds	r3, #1
 8004df4:	f003 031f 	and.w	r3, r3, #31
 8004df8:	2b09      	cmp	r3, #9
 8004dfa:	bf94      	ite	ls
 8004dfc:	2301      	movls	r3, #1
 8004dfe:	2300      	movhi	r3, #0
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	e019      	b.n	8004e38 <HAL_ADC_ConfigChannel+0x664>
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e0c:	fa93 f3a3 	rbit	r3, r3
 8004e10:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004e12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e14:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004e16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8004e1c:	2320      	movs	r3, #32
 8004e1e:	e003      	b.n	8004e28 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8004e20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e22:	fab3 f383 	clz	r3, r3
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	3301      	adds	r3, #1
 8004e2a:	f003 031f 	and.w	r3, r3, #31
 8004e2e:	2b09      	cmp	r3, #9
 8004e30:	bf94      	ite	ls
 8004e32:	2301      	movls	r3, #1
 8004e34:	2300      	movhi	r3, #0
 8004e36:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d079      	beq.n	8004f30 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d107      	bne.n	8004e58 <HAL_ADC_ConfigChannel+0x684>
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	0e9b      	lsrs	r3, r3, #26
 8004e4e:	3301      	adds	r3, #1
 8004e50:	069b      	lsls	r3, r3, #26
 8004e52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e56:	e015      	b.n	8004e84 <HAL_ADC_ConfigChannel+0x6b0>
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e60:	fa93 f3a3 	rbit	r3, r3
 8004e64:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004e66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e68:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d101      	bne.n	8004e74 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004e70:	2320      	movs	r3, #32
 8004e72:	e003      	b.n	8004e7c <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004e74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e76:	fab3 f383 	clz	r3, r3
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	069b      	lsls	r3, r3, #26
 8004e80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d109      	bne.n	8004ea4 <HAL_ADC_ConfigChannel+0x6d0>
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	0e9b      	lsrs	r3, r3, #26
 8004e96:	3301      	adds	r3, #1
 8004e98:	f003 031f 	and.w	r3, r3, #31
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea2:	e017      	b.n	8004ed4 <HAL_ADC_ConfigChannel+0x700>
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eac:	fa93 f3a3 	rbit	r3, r3
 8004eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eb4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004eb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d101      	bne.n	8004ec0 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004ebc:	2320      	movs	r3, #32
 8004ebe:	e003      	b.n	8004ec8 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8004ec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ec2:	fab3 f383 	clz	r3, r3
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	3301      	adds	r3, #1
 8004eca:	f003 031f 	and.w	r3, r3, #31
 8004ece:	2101      	movs	r1, #1
 8004ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ed4:	ea42 0103 	orr.w	r1, r2, r3
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d10a      	bne.n	8004efa <HAL_ADC_ConfigChannel+0x726>
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	0e9b      	lsrs	r3, r3, #26
 8004eea:	3301      	adds	r3, #1
 8004eec:	f003 021f 	and.w	r2, r3, #31
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	005b      	lsls	r3, r3, #1
 8004ef4:	4413      	add	r3, r2
 8004ef6:	051b      	lsls	r3, r3, #20
 8004ef8:	e018      	b.n	8004f2c <HAL_ADC_ConfigChannel+0x758>
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f02:	fa93 f3a3 	rbit	r3, r3
 8004f06:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8004f12:	2320      	movs	r3, #32
 8004f14:	e003      	b.n	8004f1e <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8004f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f18:	fab3 f383 	clz	r3, r3
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	3301      	adds	r3, #1
 8004f20:	f003 021f 	and.w	r2, r3, #31
 8004f24:	4613      	mov	r3, r2
 8004f26:	005b      	lsls	r3, r3, #1
 8004f28:	4413      	add	r3, r2
 8004f2a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f2c:	430b      	orrs	r3, r1
 8004f2e:	e07e      	b.n	800502e <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d107      	bne.n	8004f4c <HAL_ADC_ConfigChannel+0x778>
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	0e9b      	lsrs	r3, r3, #26
 8004f42:	3301      	adds	r3, #1
 8004f44:	069b      	lsls	r3, r3, #26
 8004f46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f4a:	e015      	b.n	8004f78 <HAL_ADC_ConfigChannel+0x7a4>
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f54:	fa93 f3a3 	rbit	r3, r3
 8004f58:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004f64:	2320      	movs	r3, #32
 8004f66:	e003      	b.n	8004f70 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f6a:	fab3 f383 	clz	r3, r3
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	3301      	adds	r3, #1
 8004f72:	069b      	lsls	r3, r3, #26
 8004f74:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d109      	bne.n	8004f98 <HAL_ADC_ConfigChannel+0x7c4>
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	0e9b      	lsrs	r3, r3, #26
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	f003 031f 	and.w	r3, r3, #31
 8004f90:	2101      	movs	r1, #1
 8004f92:	fa01 f303 	lsl.w	r3, r1, r3
 8004f96:	e017      	b.n	8004fc8 <HAL_ADC_ConfigChannel+0x7f4>
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	fa93 f3a3 	rbit	r3, r3
 8004fa4:	61bb      	str	r3, [r7, #24]
  return result;
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004fb0:	2320      	movs	r3, #32
 8004fb2:	e003      	b.n	8004fbc <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004fb4:	6a3b      	ldr	r3, [r7, #32]
 8004fb6:	fab3 f383 	clz	r3, r3
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	f003 031f 	and.w	r3, r3, #31
 8004fc2:	2101      	movs	r1, #1
 8004fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc8:	ea42 0103 	orr.w	r1, r2, r3
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10d      	bne.n	8004ff4 <HAL_ADC_ConfigChannel+0x820>
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	0e9b      	lsrs	r3, r3, #26
 8004fde:	3301      	adds	r3, #1
 8004fe0:	f003 021f 	and.w	r2, r3, #31
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	005b      	lsls	r3, r3, #1
 8004fe8:	4413      	add	r3, r2
 8004fea:	3b1e      	subs	r3, #30
 8004fec:	051b      	lsls	r3, r3, #20
 8004fee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ff2:	e01b      	b.n	800502c <HAL_ADC_ConfigChannel+0x858>
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	fa93 f3a3 	rbit	r3, r3
 8005000:	60fb      	str	r3, [r7, #12]
  return result;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d101      	bne.n	8005010 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 800500c:	2320      	movs	r3, #32
 800500e:	e003      	b.n	8005018 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	fab3 f383 	clz	r3, r3
 8005016:	b2db      	uxtb	r3, r3
 8005018:	3301      	adds	r3, #1
 800501a:	f003 021f 	and.w	r2, r3, #31
 800501e:	4613      	mov	r3, r2
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	4413      	add	r3, r2
 8005024:	3b1e      	subs	r3, #30
 8005026:	051b      	lsls	r3, r3, #20
 8005028:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800502c:	430b      	orrs	r3, r1
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	6892      	ldr	r2, [r2, #8]
 8005032:	4619      	mov	r1, r3
 8005034:	f7ff f8d2 	bl	80041dc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	f280 80d7 	bge.w	80051f0 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a06      	ldr	r2, [pc, #24]	; (8005060 <HAL_ADC_ConfigChannel+0x88c>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d004      	beq.n	8005056 <HAL_ADC_ConfigChannel+0x882>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a04      	ldr	r2, [pc, #16]	; (8005064 <HAL_ADC_ConfigChannel+0x890>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d10a      	bne.n	800506c <HAL_ADC_ConfigChannel+0x898>
 8005056:	4b04      	ldr	r3, [pc, #16]	; (8005068 <HAL_ADC_ConfigChannel+0x894>)
 8005058:	e009      	b.n	800506e <HAL_ADC_ConfigChannel+0x89a>
 800505a:	bf00      	nop
 800505c:	47ff0000 	.word	0x47ff0000
 8005060:	40022000 	.word	0x40022000
 8005064:	40022100 	.word	0x40022100
 8005068:	40022300 	.word	0x40022300
 800506c:	4b65      	ldr	r3, [pc, #404]	; (8005204 <HAL_ADC_ConfigChannel+0xa30>)
 800506e:	4618      	mov	r0, r3
 8005070:	f7fe ff88 	bl	8003f84 <LL_ADC_GetCommonPathInternalCh>
 8005074:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a62      	ldr	r2, [pc, #392]	; (8005208 <HAL_ADC_ConfigChannel+0xa34>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d004      	beq.n	800508c <HAL_ADC_ConfigChannel+0x8b8>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a61      	ldr	r2, [pc, #388]	; (800520c <HAL_ADC_ConfigChannel+0xa38>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d10e      	bne.n	80050aa <HAL_ADC_ConfigChannel+0x8d6>
 800508c:	485e      	ldr	r0, [pc, #376]	; (8005208 <HAL_ADC_ConfigChannel+0xa34>)
 800508e:	f7ff f95f 	bl	8004350 <LL_ADC_IsEnabled>
 8005092:	4604      	mov	r4, r0
 8005094:	485d      	ldr	r0, [pc, #372]	; (800520c <HAL_ADC_ConfigChannel+0xa38>)
 8005096:	f7ff f95b 	bl	8004350 <LL_ADC_IsEnabled>
 800509a:	4603      	mov	r3, r0
 800509c:	4323      	orrs	r3, r4
 800509e:	2b00      	cmp	r3, #0
 80050a0:	bf0c      	ite	eq
 80050a2:	2301      	moveq	r3, #1
 80050a4:	2300      	movne	r3, #0
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	e008      	b.n	80050bc <HAL_ADC_ConfigChannel+0x8e8>
 80050aa:	4859      	ldr	r0, [pc, #356]	; (8005210 <HAL_ADC_ConfigChannel+0xa3c>)
 80050ac:	f7ff f950 	bl	8004350 <LL_ADC_IsEnabled>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	bf0c      	ite	eq
 80050b6:	2301      	moveq	r3, #1
 80050b8:	2300      	movne	r3, #0
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f000 8084 	beq.w	80051ca <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a53      	ldr	r2, [pc, #332]	; (8005214 <HAL_ADC_ConfigChannel+0xa40>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d132      	bne.n	8005132 <HAL_ADC_ConfigChannel+0x95e>
 80050cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80050d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d12c      	bne.n	8005132 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a4c      	ldr	r2, [pc, #304]	; (8005210 <HAL_ADC_ConfigChannel+0xa3c>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	f040 8086 	bne.w	80051f0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a47      	ldr	r2, [pc, #284]	; (8005208 <HAL_ADC_ConfigChannel+0xa34>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d004      	beq.n	80050f8 <HAL_ADC_ConfigChannel+0x924>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a46      	ldr	r2, [pc, #280]	; (800520c <HAL_ADC_ConfigChannel+0xa38>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d101      	bne.n	80050fc <HAL_ADC_ConfigChannel+0x928>
 80050f8:	4a47      	ldr	r2, [pc, #284]	; (8005218 <HAL_ADC_ConfigChannel+0xa44>)
 80050fa:	e000      	b.n	80050fe <HAL_ADC_ConfigChannel+0x92a>
 80050fc:	4a41      	ldr	r2, [pc, #260]	; (8005204 <HAL_ADC_ConfigChannel+0xa30>)
 80050fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005102:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005106:	4619      	mov	r1, r3
 8005108:	4610      	mov	r0, r2
 800510a:	f7fe ff28 	bl	8003f5e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800510e:	4b43      	ldr	r3, [pc, #268]	; (800521c <HAL_ADC_ConfigChannel+0xa48>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	099b      	lsrs	r3, r3, #6
 8005114:	4a42      	ldr	r2, [pc, #264]	; (8005220 <HAL_ADC_ConfigChannel+0xa4c>)
 8005116:	fba2 2303 	umull	r2, r3, r2, r3
 800511a:	099b      	lsrs	r3, r3, #6
 800511c:	3301      	adds	r3, #1
 800511e:	005b      	lsls	r3, r3, #1
 8005120:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005122:	e002      	b.n	800512a <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	3b01      	subs	r3, #1
 8005128:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1f9      	bne.n	8005124 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005130:	e05e      	b.n	80051f0 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a3b      	ldr	r2, [pc, #236]	; (8005224 <HAL_ADC_ConfigChannel+0xa50>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d120      	bne.n	800517e <HAL_ADC_ConfigChannel+0x9aa>
 800513c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005140:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d11a      	bne.n	800517e <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a30      	ldr	r2, [pc, #192]	; (8005210 <HAL_ADC_ConfigChannel+0xa3c>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d14e      	bne.n	80051f0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a2c      	ldr	r2, [pc, #176]	; (8005208 <HAL_ADC_ConfigChannel+0xa34>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d004      	beq.n	8005166 <HAL_ADC_ConfigChannel+0x992>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a2a      	ldr	r2, [pc, #168]	; (800520c <HAL_ADC_ConfigChannel+0xa38>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d101      	bne.n	800516a <HAL_ADC_ConfigChannel+0x996>
 8005166:	4a2c      	ldr	r2, [pc, #176]	; (8005218 <HAL_ADC_ConfigChannel+0xa44>)
 8005168:	e000      	b.n	800516c <HAL_ADC_ConfigChannel+0x998>
 800516a:	4a26      	ldr	r2, [pc, #152]	; (8005204 <HAL_ADC_ConfigChannel+0xa30>)
 800516c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005170:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005174:	4619      	mov	r1, r3
 8005176:	4610      	mov	r0, r2
 8005178:	f7fe fef1 	bl	8003f5e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800517c:	e038      	b.n	80051f0 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a29      	ldr	r2, [pc, #164]	; (8005228 <HAL_ADC_ConfigChannel+0xa54>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d133      	bne.n	80051f0 <HAL_ADC_ConfigChannel+0xa1c>
 8005188:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800518c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d12d      	bne.n	80051f0 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a1d      	ldr	r2, [pc, #116]	; (8005210 <HAL_ADC_ConfigChannel+0xa3c>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d128      	bne.n	80051f0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a19      	ldr	r2, [pc, #100]	; (8005208 <HAL_ADC_ConfigChannel+0xa34>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d004      	beq.n	80051b2 <HAL_ADC_ConfigChannel+0x9de>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a17      	ldr	r2, [pc, #92]	; (800520c <HAL_ADC_ConfigChannel+0xa38>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d101      	bne.n	80051b6 <HAL_ADC_ConfigChannel+0x9e2>
 80051b2:	4a19      	ldr	r2, [pc, #100]	; (8005218 <HAL_ADC_ConfigChannel+0xa44>)
 80051b4:	e000      	b.n	80051b8 <HAL_ADC_ConfigChannel+0x9e4>
 80051b6:	4a13      	ldr	r2, [pc, #76]	; (8005204 <HAL_ADC_ConfigChannel+0xa30>)
 80051b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80051bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80051c0:	4619      	mov	r1, r3
 80051c2:	4610      	mov	r0, r2
 80051c4:	f7fe fecb 	bl	8003f5e <LL_ADC_SetCommonPathInternalCh>
 80051c8:	e012      	b.n	80051f0 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ce:	f043 0220 	orr.w	r2, r3, #32
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80051dc:	e008      	b.n	80051f0 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051e2:	f043 0220 	orr.w	r2, r3, #32
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80051f8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	37e4      	adds	r7, #228	; 0xe4
 8005200:	46bd      	mov	sp, r7
 8005202:	bd90      	pop	{r4, r7, pc}
 8005204:	58026300 	.word	0x58026300
 8005208:	40022000 	.word	0x40022000
 800520c:	40022100 	.word	0x40022100
 8005210:	58026000 	.word	0x58026000
 8005214:	c7520000 	.word	0xc7520000
 8005218:	40022300 	.word	0x40022300
 800521c:	24000000 	.word	0x24000000
 8005220:	053e2d63 	.word	0x053e2d63
 8005224:	c3210000 	.word	0xc3210000
 8005228:	cb840000 	.word	0xcb840000

0800522c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a6c      	ldr	r2, [pc, #432]	; (80053ec <ADC_ConfigureBoostMode+0x1c0>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d004      	beq.n	8005248 <ADC_ConfigureBoostMode+0x1c>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a6b      	ldr	r2, [pc, #428]	; (80053f0 <ADC_ConfigureBoostMode+0x1c4>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d109      	bne.n	800525c <ADC_ConfigureBoostMode+0x30>
 8005248:	4b6a      	ldr	r3, [pc, #424]	; (80053f4 <ADC_ConfigureBoostMode+0x1c8>)
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005250:	2b00      	cmp	r3, #0
 8005252:	bf14      	ite	ne
 8005254:	2301      	movne	r3, #1
 8005256:	2300      	moveq	r3, #0
 8005258:	b2db      	uxtb	r3, r3
 800525a:	e008      	b.n	800526e <ADC_ConfigureBoostMode+0x42>
 800525c:	4b66      	ldr	r3, [pc, #408]	; (80053f8 <ADC_ConfigureBoostMode+0x1cc>)
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005264:	2b00      	cmp	r3, #0
 8005266:	bf14      	ite	ne
 8005268:	2301      	movne	r3, #1
 800526a:	2300      	moveq	r3, #0
 800526c:	b2db      	uxtb	r3, r3
 800526e:	2b00      	cmp	r3, #0
 8005270:	d01c      	beq.n	80052ac <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005272:	f005 fc91 	bl	800ab98 <HAL_RCC_GetHCLKFreq>
 8005276:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005280:	d010      	beq.n	80052a4 <ADC_ConfigureBoostMode+0x78>
 8005282:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005286:	d873      	bhi.n	8005370 <ADC_ConfigureBoostMode+0x144>
 8005288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800528c:	d002      	beq.n	8005294 <ADC_ConfigureBoostMode+0x68>
 800528e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005292:	d16d      	bne.n	8005370 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	0c1b      	lsrs	r3, r3, #16
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a0:	60fb      	str	r3, [r7, #12]
        break;
 80052a2:	e068      	b.n	8005376 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	089b      	lsrs	r3, r3, #2
 80052a8:	60fb      	str	r3, [r7, #12]
        break;
 80052aa:	e064      	b.n	8005376 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80052ac:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80052b0:	f04f 0100 	mov.w	r1, #0
 80052b4:	f006 fe6c 	bl	800bf90 <HAL_RCCEx_GetPeriphCLKFreq>
 80052b8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80052c2:	d051      	beq.n	8005368 <ADC_ConfigureBoostMode+0x13c>
 80052c4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80052c8:	d854      	bhi.n	8005374 <ADC_ConfigureBoostMode+0x148>
 80052ca:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80052ce:	d047      	beq.n	8005360 <ADC_ConfigureBoostMode+0x134>
 80052d0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80052d4:	d84e      	bhi.n	8005374 <ADC_ConfigureBoostMode+0x148>
 80052d6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80052da:	d03d      	beq.n	8005358 <ADC_ConfigureBoostMode+0x12c>
 80052dc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80052e0:	d848      	bhi.n	8005374 <ADC_ConfigureBoostMode+0x148>
 80052e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052e6:	d033      	beq.n	8005350 <ADC_ConfigureBoostMode+0x124>
 80052e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052ec:	d842      	bhi.n	8005374 <ADC_ConfigureBoostMode+0x148>
 80052ee:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80052f2:	d029      	beq.n	8005348 <ADC_ConfigureBoostMode+0x11c>
 80052f4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80052f8:	d83c      	bhi.n	8005374 <ADC_ConfigureBoostMode+0x148>
 80052fa:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80052fe:	d01a      	beq.n	8005336 <ADC_ConfigureBoostMode+0x10a>
 8005300:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005304:	d836      	bhi.n	8005374 <ADC_ConfigureBoostMode+0x148>
 8005306:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800530a:	d014      	beq.n	8005336 <ADC_ConfigureBoostMode+0x10a>
 800530c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005310:	d830      	bhi.n	8005374 <ADC_ConfigureBoostMode+0x148>
 8005312:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005316:	d00e      	beq.n	8005336 <ADC_ConfigureBoostMode+0x10a>
 8005318:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800531c:	d82a      	bhi.n	8005374 <ADC_ConfigureBoostMode+0x148>
 800531e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005322:	d008      	beq.n	8005336 <ADC_ConfigureBoostMode+0x10a>
 8005324:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005328:	d824      	bhi.n	8005374 <ADC_ConfigureBoostMode+0x148>
 800532a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800532e:	d002      	beq.n	8005336 <ADC_ConfigureBoostMode+0x10a>
 8005330:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005334:	d11e      	bne.n	8005374 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	0c9b      	lsrs	r3, r3, #18
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	fbb2 f3f3 	udiv	r3, r2, r3
 8005344:	60fb      	str	r3, [r7, #12]
        break;
 8005346:	e016      	b.n	8005376 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	091b      	lsrs	r3, r3, #4
 800534c:	60fb      	str	r3, [r7, #12]
        break;
 800534e:	e012      	b.n	8005376 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	095b      	lsrs	r3, r3, #5
 8005354:	60fb      	str	r3, [r7, #12]
        break;
 8005356:	e00e      	b.n	8005376 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	099b      	lsrs	r3, r3, #6
 800535c:	60fb      	str	r3, [r7, #12]
        break;
 800535e:	e00a      	b.n	8005376 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	09db      	lsrs	r3, r3, #7
 8005364:	60fb      	str	r3, [r7, #12]
        break;
 8005366:	e006      	b.n	8005376 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	0a1b      	lsrs	r3, r3, #8
 800536c:	60fb      	str	r3, [r7, #12]
        break;
 800536e:	e002      	b.n	8005376 <ADC_ConfigureBoostMode+0x14a>
        break;
 8005370:	bf00      	nop
 8005372:	e000      	b.n	8005376 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005374:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	085b      	lsrs	r3, r3, #1
 800537a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	4a1f      	ldr	r2, [pc, #124]	; (80053fc <ADC_ConfigureBoostMode+0x1d0>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d808      	bhi.n	8005396 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	689a      	ldr	r2, [r3, #8]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005392:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005394:	e025      	b.n	80053e2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	4a19      	ldr	r2, [pc, #100]	; (8005400 <ADC_ConfigureBoostMode+0x1d4>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d80a      	bhi.n	80053b4 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053b0:	609a      	str	r2, [r3, #8]
}
 80053b2:	e016      	b.n	80053e2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	4a13      	ldr	r2, [pc, #76]	; (8005404 <ADC_ConfigureBoostMode+0x1d8>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d80a      	bhi.n	80053d2 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ce:	609a      	str	r2, [r3, #8]
}
 80053d0:	e007      	b.n	80053e2 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	689a      	ldr	r2, [r3, #8]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80053e0:	609a      	str	r2, [r3, #8]
}
 80053e2:	bf00      	nop
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	40022000 	.word	0x40022000
 80053f0:	40022100 	.word	0x40022100
 80053f4:	40022300 	.word	0x40022300
 80053f8:	58026300 	.word	0x58026300
 80053fc:	005f5e10 	.word	0x005f5e10
 8005400:	00bebc20 	.word	0x00bebc20
 8005404:	017d7840 	.word	0x017d7840

08005408 <LL_ADC_IsEnabled>:
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b01      	cmp	r3, #1
 800541a:	d101      	bne.n	8005420 <LL_ADC_IsEnabled+0x18>
 800541c:	2301      	movs	r3, #1
 800541e:	e000      	b.n	8005422 <LL_ADC_IsEnabled+0x1a>
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <LL_ADC_REG_IsConversionOngoing>:
{
 800542e:	b480      	push	{r7}
 8005430:	b083      	sub	sp, #12
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f003 0304 	and.w	r3, r3, #4
 800543e:	2b04      	cmp	r3, #4
 8005440:	d101      	bne.n	8005446 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005442:	2301      	movs	r3, #1
 8005444:	e000      	b.n	8005448 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005454:	b590      	push	{r4, r7, lr}
 8005456:	b0a3      	sub	sp, #140	; 0x8c
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800545e:	2300      	movs	r3, #0
 8005460:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800546a:	2b01      	cmp	r3, #1
 800546c:	d101      	bne.n	8005472 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800546e:	2302      	movs	r3, #2
 8005470:	e0c1      	b.n	80055f6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800547a:	2300      	movs	r3, #0
 800547c:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800547e:	2300      	movs	r3, #0
 8005480:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a5e      	ldr	r2, [pc, #376]	; (8005600 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d102      	bne.n	8005492 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800548c:	4b5d      	ldr	r3, [pc, #372]	; (8005604 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800548e:	60fb      	str	r3, [r7, #12]
 8005490:	e001      	b.n	8005496 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005492:	2300      	movs	r3, #0
 8005494:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d10b      	bne.n	80054b4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054a0:	f043 0220 	orr.w	r2, r3, #32
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e0a0      	b.n	80055f6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7ff ffb9 	bl	800542e <LL_ADC_REG_IsConversionOngoing>
 80054bc:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7ff ffb2 	bl	800542e <LL_ADC_REG_IsConversionOngoing>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f040 8081 	bne.w	80055d4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80054d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d17c      	bne.n	80055d4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a48      	ldr	r2, [pc, #288]	; (8005600 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d004      	beq.n	80054ee <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a46      	ldr	r2, [pc, #280]	; (8005604 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d101      	bne.n	80054f2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80054ee:	4b46      	ldr	r3, [pc, #280]	; (8005608 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80054f0:	e000      	b.n	80054f4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80054f2:	4b46      	ldr	r3, [pc, #280]	; (800560c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80054f4:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d039      	beq.n	8005572 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80054fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	431a      	orrs	r2, r3
 800550c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800550e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a3a      	ldr	r2, [pc, #232]	; (8005600 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d004      	beq.n	8005524 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a39      	ldr	r2, [pc, #228]	; (8005604 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d10e      	bne.n	8005542 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005524:	4836      	ldr	r0, [pc, #216]	; (8005600 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005526:	f7ff ff6f 	bl	8005408 <LL_ADC_IsEnabled>
 800552a:	4604      	mov	r4, r0
 800552c:	4835      	ldr	r0, [pc, #212]	; (8005604 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800552e:	f7ff ff6b 	bl	8005408 <LL_ADC_IsEnabled>
 8005532:	4603      	mov	r3, r0
 8005534:	4323      	orrs	r3, r4
 8005536:	2b00      	cmp	r3, #0
 8005538:	bf0c      	ite	eq
 800553a:	2301      	moveq	r3, #1
 800553c:	2300      	movne	r3, #0
 800553e:	b2db      	uxtb	r3, r3
 8005540:	e008      	b.n	8005554 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8005542:	4833      	ldr	r0, [pc, #204]	; (8005610 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005544:	f7ff ff60 	bl	8005408 <LL_ADC_IsEnabled>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	bf0c      	ite	eq
 800554e:	2301      	moveq	r3, #1
 8005550:	2300      	movne	r3, #0
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b00      	cmp	r3, #0
 8005556:	d047      	beq.n	80055e8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005558:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800555a:	689a      	ldr	r2, [r3, #8]
 800555c:	4b2d      	ldr	r3, [pc, #180]	; (8005614 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800555e:	4013      	ands	r3, r2
 8005560:	683a      	ldr	r2, [r7, #0]
 8005562:	6811      	ldr	r1, [r2, #0]
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	6892      	ldr	r2, [r2, #8]
 8005568:	430a      	orrs	r2, r1
 800556a:	431a      	orrs	r2, r3
 800556c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800556e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005570:	e03a      	b.n	80055e8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005572:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800557a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800557c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a1f      	ldr	r2, [pc, #124]	; (8005600 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d004      	beq.n	8005592 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a1d      	ldr	r2, [pc, #116]	; (8005604 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d10e      	bne.n	80055b0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8005592:	481b      	ldr	r0, [pc, #108]	; (8005600 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005594:	f7ff ff38 	bl	8005408 <LL_ADC_IsEnabled>
 8005598:	4604      	mov	r4, r0
 800559a:	481a      	ldr	r0, [pc, #104]	; (8005604 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800559c:	f7ff ff34 	bl	8005408 <LL_ADC_IsEnabled>
 80055a0:	4603      	mov	r3, r0
 80055a2:	4323      	orrs	r3, r4
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	bf0c      	ite	eq
 80055a8:	2301      	moveq	r3, #1
 80055aa:	2300      	movne	r3, #0
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	e008      	b.n	80055c2 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80055b0:	4817      	ldr	r0, [pc, #92]	; (8005610 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80055b2:	f7ff ff29 	bl	8005408 <LL_ADC_IsEnabled>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	bf0c      	ite	eq
 80055bc:	2301      	moveq	r3, #1
 80055be:	2300      	movne	r3, #0
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d010      	beq.n	80055e8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80055c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055c8:	689a      	ldr	r2, [r3, #8]
 80055ca:	4b12      	ldr	r3, [pc, #72]	; (8005614 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80055cc:	4013      	ands	r3, r2
 80055ce:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80055d0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80055d2:	e009      	b.n	80055e8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055d8:	f043 0220 	orr.w	r2, r3, #32
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80055e6:	e000      	b.n	80055ea <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80055e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80055f2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	378c      	adds	r7, #140	; 0x8c
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd90      	pop	{r4, r7, pc}
 80055fe:	bf00      	nop
 8005600:	40022000 	.word	0x40022000
 8005604:	40022100 	.word	0x40022100
 8005608:	40022300 	.word	0x40022300
 800560c:	58026300 	.word	0x58026300
 8005610:	58026000 	.word	0x58026000
 8005614:	fffff0e0 	.word	0xfffff0e0

08005618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f003 0307 	and.w	r3, r3, #7
 8005626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005628:	4b0b      	ldr	r3, [pc, #44]	; (8005658 <__NVIC_SetPriorityGrouping+0x40>)
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005634:	4013      	ands	r3, r2
 8005636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005640:	4b06      	ldr	r3, [pc, #24]	; (800565c <__NVIC_SetPriorityGrouping+0x44>)
 8005642:	4313      	orrs	r3, r2
 8005644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005646:	4a04      	ldr	r2, [pc, #16]	; (8005658 <__NVIC_SetPriorityGrouping+0x40>)
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	60d3      	str	r3, [r2, #12]
}
 800564c:	bf00      	nop
 800564e:	3714      	adds	r7, #20
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr
 8005658:	e000ed00 	.word	0xe000ed00
 800565c:	05fa0000 	.word	0x05fa0000

08005660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005660:	b480      	push	{r7}
 8005662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005664:	4b04      	ldr	r3, [pc, #16]	; (8005678 <__NVIC_GetPriorityGrouping+0x18>)
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	0a1b      	lsrs	r3, r3, #8
 800566a:	f003 0307 	and.w	r3, r3, #7
}
 800566e:	4618      	mov	r0, r3
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr
 8005678:	e000ed00 	.word	0xe000ed00

0800567c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	4603      	mov	r3, r0
 8005684:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005686:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800568a:	2b00      	cmp	r3, #0
 800568c:	db0b      	blt.n	80056a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800568e:	88fb      	ldrh	r3, [r7, #6]
 8005690:	f003 021f 	and.w	r2, r3, #31
 8005694:	4907      	ldr	r1, [pc, #28]	; (80056b4 <__NVIC_EnableIRQ+0x38>)
 8005696:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800569a:	095b      	lsrs	r3, r3, #5
 800569c:	2001      	movs	r0, #1
 800569e:	fa00 f202 	lsl.w	r2, r0, r2
 80056a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80056a6:	bf00      	nop
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	e000e100 	.word	0xe000e100

080056b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	4603      	mov	r3, r0
 80056c0:	6039      	str	r1, [r7, #0]
 80056c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80056c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	db0a      	blt.n	80056e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	b2da      	uxtb	r2, r3
 80056d0:	490c      	ldr	r1, [pc, #48]	; (8005704 <__NVIC_SetPriority+0x4c>)
 80056d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056d6:	0112      	lsls	r2, r2, #4
 80056d8:	b2d2      	uxtb	r2, r2
 80056da:	440b      	add	r3, r1
 80056dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80056e0:	e00a      	b.n	80056f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	b2da      	uxtb	r2, r3
 80056e6:	4908      	ldr	r1, [pc, #32]	; (8005708 <__NVIC_SetPriority+0x50>)
 80056e8:	88fb      	ldrh	r3, [r7, #6]
 80056ea:	f003 030f 	and.w	r3, r3, #15
 80056ee:	3b04      	subs	r3, #4
 80056f0:	0112      	lsls	r2, r2, #4
 80056f2:	b2d2      	uxtb	r2, r2
 80056f4:	440b      	add	r3, r1
 80056f6:	761a      	strb	r2, [r3, #24]
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	e000e100 	.word	0xe000e100
 8005708:	e000ed00 	.word	0xe000ed00

0800570c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800570c:	b480      	push	{r7}
 800570e:	b089      	sub	sp, #36	; 0x24
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f003 0307 	and.w	r3, r3, #7
 800571e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	f1c3 0307 	rsb	r3, r3, #7
 8005726:	2b04      	cmp	r3, #4
 8005728:	bf28      	it	cs
 800572a:	2304      	movcs	r3, #4
 800572c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	3304      	adds	r3, #4
 8005732:	2b06      	cmp	r3, #6
 8005734:	d902      	bls.n	800573c <NVIC_EncodePriority+0x30>
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	3b03      	subs	r3, #3
 800573a:	e000      	b.n	800573e <NVIC_EncodePriority+0x32>
 800573c:	2300      	movs	r3, #0
 800573e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005740:	f04f 32ff 	mov.w	r2, #4294967295
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	fa02 f303 	lsl.w	r3, r2, r3
 800574a:	43da      	mvns	r2, r3
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	401a      	ands	r2, r3
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005754:	f04f 31ff 	mov.w	r1, #4294967295
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	fa01 f303 	lsl.w	r3, r1, r3
 800575e:	43d9      	mvns	r1, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005764:	4313      	orrs	r3, r2
         );
}
 8005766:	4618      	mov	r0, r3
 8005768:	3724      	adds	r7, #36	; 0x24
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
	...

08005774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	3b01      	subs	r3, #1
 8005780:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005784:	d301      	bcc.n	800578a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005786:	2301      	movs	r3, #1
 8005788:	e00f      	b.n	80057aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800578a:	4a0a      	ldr	r2, [pc, #40]	; (80057b4 <SysTick_Config+0x40>)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	3b01      	subs	r3, #1
 8005790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005792:	210f      	movs	r1, #15
 8005794:	f04f 30ff 	mov.w	r0, #4294967295
 8005798:	f7ff ff8e 	bl	80056b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800579c:	4b05      	ldr	r3, [pc, #20]	; (80057b4 <SysTick_Config+0x40>)
 800579e:	2200      	movs	r2, #0
 80057a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057a2:	4b04      	ldr	r3, [pc, #16]	; (80057b4 <SysTick_Config+0x40>)
 80057a4:	2207      	movs	r2, #7
 80057a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	e000e010 	.word	0xe000e010

080057b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f7ff ff29 	bl	8005618 <__NVIC_SetPriorityGrouping>
}
 80057c6:	bf00      	nop
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b086      	sub	sp, #24
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	4603      	mov	r3, r0
 80057d6:	60b9      	str	r1, [r7, #8]
 80057d8:	607a      	str	r2, [r7, #4]
 80057da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80057dc:	f7ff ff40 	bl	8005660 <__NVIC_GetPriorityGrouping>
 80057e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	68b9      	ldr	r1, [r7, #8]
 80057e6:	6978      	ldr	r0, [r7, #20]
 80057e8:	f7ff ff90 	bl	800570c <NVIC_EncodePriority>
 80057ec:	4602      	mov	r2, r0
 80057ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80057f2:	4611      	mov	r1, r2
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7ff ff5f 	bl	80056b8 <__NVIC_SetPriority>
}
 80057fa:	bf00      	nop
 80057fc:	3718      	adds	r7, #24
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b082      	sub	sp, #8
 8005806:	af00      	add	r7, sp, #0
 8005808:	4603      	mov	r3, r0
 800580a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800580c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005810:	4618      	mov	r0, r3
 8005812:	f7ff ff33 	bl	800567c <__NVIC_EnableIRQ>
}
 8005816:	bf00      	nop
 8005818:	3708      	adds	r7, #8
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b082      	sub	sp, #8
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7ff ffa4 	bl	8005774 <SysTick_Config>
 800582c:	4603      	mov	r3, r0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3708      	adds	r7, #8
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
	...

08005838 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005840:	f7fe fb34 	bl	8003eac <HAL_GetTick>
 8005844:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e312      	b.n	8005e76 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a66      	ldr	r2, [pc, #408]	; (80059f0 <HAL_DMA_Init+0x1b8>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d04a      	beq.n	80058f0 <HAL_DMA_Init+0xb8>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a65      	ldr	r2, [pc, #404]	; (80059f4 <HAL_DMA_Init+0x1bc>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d045      	beq.n	80058f0 <HAL_DMA_Init+0xb8>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a63      	ldr	r2, [pc, #396]	; (80059f8 <HAL_DMA_Init+0x1c0>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d040      	beq.n	80058f0 <HAL_DMA_Init+0xb8>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a62      	ldr	r2, [pc, #392]	; (80059fc <HAL_DMA_Init+0x1c4>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d03b      	beq.n	80058f0 <HAL_DMA_Init+0xb8>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a60      	ldr	r2, [pc, #384]	; (8005a00 <HAL_DMA_Init+0x1c8>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d036      	beq.n	80058f0 <HAL_DMA_Init+0xb8>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a5f      	ldr	r2, [pc, #380]	; (8005a04 <HAL_DMA_Init+0x1cc>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d031      	beq.n	80058f0 <HAL_DMA_Init+0xb8>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a5d      	ldr	r2, [pc, #372]	; (8005a08 <HAL_DMA_Init+0x1d0>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d02c      	beq.n	80058f0 <HAL_DMA_Init+0xb8>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a5c      	ldr	r2, [pc, #368]	; (8005a0c <HAL_DMA_Init+0x1d4>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d027      	beq.n	80058f0 <HAL_DMA_Init+0xb8>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a5a      	ldr	r2, [pc, #360]	; (8005a10 <HAL_DMA_Init+0x1d8>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d022      	beq.n	80058f0 <HAL_DMA_Init+0xb8>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a59      	ldr	r2, [pc, #356]	; (8005a14 <HAL_DMA_Init+0x1dc>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d01d      	beq.n	80058f0 <HAL_DMA_Init+0xb8>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a57      	ldr	r2, [pc, #348]	; (8005a18 <HAL_DMA_Init+0x1e0>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d018      	beq.n	80058f0 <HAL_DMA_Init+0xb8>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a56      	ldr	r2, [pc, #344]	; (8005a1c <HAL_DMA_Init+0x1e4>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d013      	beq.n	80058f0 <HAL_DMA_Init+0xb8>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a54      	ldr	r2, [pc, #336]	; (8005a20 <HAL_DMA_Init+0x1e8>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d00e      	beq.n	80058f0 <HAL_DMA_Init+0xb8>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a53      	ldr	r2, [pc, #332]	; (8005a24 <HAL_DMA_Init+0x1ec>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d009      	beq.n	80058f0 <HAL_DMA_Init+0xb8>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a51      	ldr	r2, [pc, #324]	; (8005a28 <HAL_DMA_Init+0x1f0>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d004      	beq.n	80058f0 <HAL_DMA_Init+0xb8>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a50      	ldr	r2, [pc, #320]	; (8005a2c <HAL_DMA_Init+0x1f4>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d101      	bne.n	80058f4 <HAL_DMA_Init+0xbc>
 80058f0:	2301      	movs	r3, #1
 80058f2:	e000      	b.n	80058f6 <HAL_DMA_Init+0xbe>
 80058f4:	2300      	movs	r3, #0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 813c 	beq.w	8005b74 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2202      	movs	r2, #2
 8005900:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a37      	ldr	r2, [pc, #220]	; (80059f0 <HAL_DMA_Init+0x1b8>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d04a      	beq.n	80059ac <HAL_DMA_Init+0x174>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a36      	ldr	r2, [pc, #216]	; (80059f4 <HAL_DMA_Init+0x1bc>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d045      	beq.n	80059ac <HAL_DMA_Init+0x174>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a34      	ldr	r2, [pc, #208]	; (80059f8 <HAL_DMA_Init+0x1c0>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d040      	beq.n	80059ac <HAL_DMA_Init+0x174>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a33      	ldr	r2, [pc, #204]	; (80059fc <HAL_DMA_Init+0x1c4>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d03b      	beq.n	80059ac <HAL_DMA_Init+0x174>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a31      	ldr	r2, [pc, #196]	; (8005a00 <HAL_DMA_Init+0x1c8>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d036      	beq.n	80059ac <HAL_DMA_Init+0x174>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a30      	ldr	r2, [pc, #192]	; (8005a04 <HAL_DMA_Init+0x1cc>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d031      	beq.n	80059ac <HAL_DMA_Init+0x174>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a2e      	ldr	r2, [pc, #184]	; (8005a08 <HAL_DMA_Init+0x1d0>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d02c      	beq.n	80059ac <HAL_DMA_Init+0x174>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a2d      	ldr	r2, [pc, #180]	; (8005a0c <HAL_DMA_Init+0x1d4>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d027      	beq.n	80059ac <HAL_DMA_Init+0x174>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a2b      	ldr	r2, [pc, #172]	; (8005a10 <HAL_DMA_Init+0x1d8>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d022      	beq.n	80059ac <HAL_DMA_Init+0x174>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a2a      	ldr	r2, [pc, #168]	; (8005a14 <HAL_DMA_Init+0x1dc>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d01d      	beq.n	80059ac <HAL_DMA_Init+0x174>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a28      	ldr	r2, [pc, #160]	; (8005a18 <HAL_DMA_Init+0x1e0>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d018      	beq.n	80059ac <HAL_DMA_Init+0x174>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a27      	ldr	r2, [pc, #156]	; (8005a1c <HAL_DMA_Init+0x1e4>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d013      	beq.n	80059ac <HAL_DMA_Init+0x174>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a25      	ldr	r2, [pc, #148]	; (8005a20 <HAL_DMA_Init+0x1e8>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d00e      	beq.n	80059ac <HAL_DMA_Init+0x174>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a24      	ldr	r2, [pc, #144]	; (8005a24 <HAL_DMA_Init+0x1ec>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d009      	beq.n	80059ac <HAL_DMA_Init+0x174>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a22      	ldr	r2, [pc, #136]	; (8005a28 <HAL_DMA_Init+0x1f0>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d004      	beq.n	80059ac <HAL_DMA_Init+0x174>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a21      	ldr	r2, [pc, #132]	; (8005a2c <HAL_DMA_Init+0x1f4>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d108      	bne.n	80059be <HAL_DMA_Init+0x186>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f022 0201 	bic.w	r2, r2, #1
 80059ba:	601a      	str	r2, [r3, #0]
 80059bc:	e007      	b.n	80059ce <HAL_DMA_Init+0x196>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 0201 	bic.w	r2, r2, #1
 80059cc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80059ce:	e02f      	b.n	8005a30 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059d0:	f7fe fa6c 	bl	8003eac <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	2b05      	cmp	r3, #5
 80059dc:	d928      	bls.n	8005a30 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2220      	movs	r2, #32
 80059e2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2203      	movs	r2, #3
 80059e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e242      	b.n	8005e76 <HAL_DMA_Init+0x63e>
 80059f0:	40020010 	.word	0x40020010
 80059f4:	40020028 	.word	0x40020028
 80059f8:	40020040 	.word	0x40020040
 80059fc:	40020058 	.word	0x40020058
 8005a00:	40020070 	.word	0x40020070
 8005a04:	40020088 	.word	0x40020088
 8005a08:	400200a0 	.word	0x400200a0
 8005a0c:	400200b8 	.word	0x400200b8
 8005a10:	40020410 	.word	0x40020410
 8005a14:	40020428 	.word	0x40020428
 8005a18:	40020440 	.word	0x40020440
 8005a1c:	40020458 	.word	0x40020458
 8005a20:	40020470 	.word	0x40020470
 8005a24:	40020488 	.word	0x40020488
 8005a28:	400204a0 	.word	0x400204a0
 8005a2c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1c8      	bne.n	80059d0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	4b83      	ldr	r3, [pc, #524]	; (8005c58 <HAL_DMA_Init+0x420>)
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005a56:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a62:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	699b      	ldr	r3, [r3, #24]
 8005a68:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a6e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a1b      	ldr	r3, [r3, #32]
 8005a74:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a80:	2b04      	cmp	r3, #4
 8005a82:	d107      	bne.n	8005a94 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	2b28      	cmp	r3, #40	; 0x28
 8005a9a:	d903      	bls.n	8005aa4 <HAL_DMA_Init+0x26c>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	2b2e      	cmp	r3, #46	; 0x2e
 8005aa2:	d91f      	bls.n	8005ae4 <HAL_DMA_Init+0x2ac>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	2b3e      	cmp	r3, #62	; 0x3e
 8005aaa:	d903      	bls.n	8005ab4 <HAL_DMA_Init+0x27c>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	2b42      	cmp	r3, #66	; 0x42
 8005ab2:	d917      	bls.n	8005ae4 <HAL_DMA_Init+0x2ac>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	2b46      	cmp	r3, #70	; 0x46
 8005aba:	d903      	bls.n	8005ac4 <HAL_DMA_Init+0x28c>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	2b48      	cmp	r3, #72	; 0x48
 8005ac2:	d90f      	bls.n	8005ae4 <HAL_DMA_Init+0x2ac>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	2b4e      	cmp	r3, #78	; 0x4e
 8005aca:	d903      	bls.n	8005ad4 <HAL_DMA_Init+0x29c>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	2b52      	cmp	r3, #82	; 0x52
 8005ad2:	d907      	bls.n	8005ae4 <HAL_DMA_Init+0x2ac>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	2b73      	cmp	r3, #115	; 0x73
 8005ada:	d905      	bls.n	8005ae8 <HAL_DMA_Init+0x2b0>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	2b77      	cmp	r3, #119	; 0x77
 8005ae2:	d801      	bhi.n	8005ae8 <HAL_DMA_Init+0x2b0>
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e000      	b.n	8005aea <HAL_DMA_Init+0x2b2>
 8005ae8:	2300      	movs	r3, #0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d003      	beq.n	8005af6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005af4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f023 0307 	bic.w	r3, r3, #7
 8005b0c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1c:	2b04      	cmp	r3, #4
 8005b1e:	d117      	bne.n	8005b50 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00e      	beq.n	8005b50 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f001 fdca 	bl	80076cc <DMA_CheckFifoParam>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d008      	beq.n	8005b50 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2240      	movs	r2, #64	; 0x40
 8005b42:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e192      	b.n	8005e76 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f001 fd05 	bl	8007568 <DMA_CalcBaseAndBitshift>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b66:	f003 031f 	and.w	r3, r3, #31
 8005b6a:	223f      	movs	r2, #63	; 0x3f
 8005b6c:	409a      	lsls	r2, r3
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	609a      	str	r2, [r3, #8]
 8005b72:	e0c8      	b.n	8005d06 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a38      	ldr	r2, [pc, #224]	; (8005c5c <HAL_DMA_Init+0x424>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d022      	beq.n	8005bc4 <HAL_DMA_Init+0x38c>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a37      	ldr	r2, [pc, #220]	; (8005c60 <HAL_DMA_Init+0x428>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d01d      	beq.n	8005bc4 <HAL_DMA_Init+0x38c>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a35      	ldr	r2, [pc, #212]	; (8005c64 <HAL_DMA_Init+0x42c>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d018      	beq.n	8005bc4 <HAL_DMA_Init+0x38c>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a34      	ldr	r2, [pc, #208]	; (8005c68 <HAL_DMA_Init+0x430>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d013      	beq.n	8005bc4 <HAL_DMA_Init+0x38c>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a32      	ldr	r2, [pc, #200]	; (8005c6c <HAL_DMA_Init+0x434>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d00e      	beq.n	8005bc4 <HAL_DMA_Init+0x38c>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a31      	ldr	r2, [pc, #196]	; (8005c70 <HAL_DMA_Init+0x438>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d009      	beq.n	8005bc4 <HAL_DMA_Init+0x38c>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a2f      	ldr	r2, [pc, #188]	; (8005c74 <HAL_DMA_Init+0x43c>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d004      	beq.n	8005bc4 <HAL_DMA_Init+0x38c>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a2e      	ldr	r2, [pc, #184]	; (8005c78 <HAL_DMA_Init+0x440>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d101      	bne.n	8005bc8 <HAL_DMA_Init+0x390>
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e000      	b.n	8005bca <HAL_DMA_Init+0x392>
 8005bc8:	2300      	movs	r3, #0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f000 8092 	beq.w	8005cf4 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a21      	ldr	r2, [pc, #132]	; (8005c5c <HAL_DMA_Init+0x424>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d021      	beq.n	8005c1e <HAL_DMA_Init+0x3e6>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a20      	ldr	r2, [pc, #128]	; (8005c60 <HAL_DMA_Init+0x428>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d01c      	beq.n	8005c1e <HAL_DMA_Init+0x3e6>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a1e      	ldr	r2, [pc, #120]	; (8005c64 <HAL_DMA_Init+0x42c>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d017      	beq.n	8005c1e <HAL_DMA_Init+0x3e6>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a1d      	ldr	r2, [pc, #116]	; (8005c68 <HAL_DMA_Init+0x430>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d012      	beq.n	8005c1e <HAL_DMA_Init+0x3e6>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a1b      	ldr	r2, [pc, #108]	; (8005c6c <HAL_DMA_Init+0x434>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d00d      	beq.n	8005c1e <HAL_DMA_Init+0x3e6>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a1a      	ldr	r2, [pc, #104]	; (8005c70 <HAL_DMA_Init+0x438>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d008      	beq.n	8005c1e <HAL_DMA_Init+0x3e6>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a18      	ldr	r2, [pc, #96]	; (8005c74 <HAL_DMA_Init+0x43c>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d003      	beq.n	8005c1e <HAL_DMA_Init+0x3e6>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a17      	ldr	r2, [pc, #92]	; (8005c78 <HAL_DMA_Init+0x440>)
 8005c1c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2202      	movs	r2, #2
 8005c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	4b10      	ldr	r3, [pc, #64]	; (8005c7c <HAL_DMA_Init+0x444>)
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	2b40      	cmp	r3, #64	; 0x40
 8005c44:	d01c      	beq.n	8005c80 <HAL_DMA_Init+0x448>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	2b80      	cmp	r3, #128	; 0x80
 8005c4c:	d102      	bne.n	8005c54 <HAL_DMA_Init+0x41c>
 8005c4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c52:	e016      	b.n	8005c82 <HAL_DMA_Init+0x44a>
 8005c54:	2300      	movs	r3, #0
 8005c56:	e014      	b.n	8005c82 <HAL_DMA_Init+0x44a>
 8005c58:	fe10803f 	.word	0xfe10803f
 8005c5c:	58025408 	.word	0x58025408
 8005c60:	5802541c 	.word	0x5802541c
 8005c64:	58025430 	.word	0x58025430
 8005c68:	58025444 	.word	0x58025444
 8005c6c:	58025458 	.word	0x58025458
 8005c70:	5802546c 	.word	0x5802546c
 8005c74:	58025480 	.word	0x58025480
 8005c78:	58025494 	.word	0x58025494
 8005c7c:	fffe000f 	.word	0xfffe000f
 8005c80:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	68d2      	ldr	r2, [r2, #12]
 8005c86:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005c88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005c90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005c98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005ca0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	69db      	ldr	r3, [r3, #28]
 8005ca6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005ca8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005cb0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	4b6e      	ldr	r3, [pc, #440]	; (8005e80 <HAL_DMA_Init+0x648>)
 8005cc8:	4413      	add	r3, r2
 8005cca:	4a6e      	ldr	r2, [pc, #440]	; (8005e84 <HAL_DMA_Init+0x64c>)
 8005ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd0:	091b      	lsrs	r3, r3, #4
 8005cd2:	009a      	lsls	r2, r3, #2
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f001 fc45 	bl	8007568 <DMA_CalcBaseAndBitshift>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ce6:	f003 031f 	and.w	r3, r3, #31
 8005cea:	2201      	movs	r2, #1
 8005cec:	409a      	lsls	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	605a      	str	r2, [r3, #4]
 8005cf2:	e008      	b.n	8005d06 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2240      	movs	r2, #64	; 0x40
 8005cf8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2203      	movs	r2, #3
 8005cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e0b7      	b.n	8005e76 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a5f      	ldr	r2, [pc, #380]	; (8005e88 <HAL_DMA_Init+0x650>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d072      	beq.n	8005df6 <HAL_DMA_Init+0x5be>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a5d      	ldr	r2, [pc, #372]	; (8005e8c <HAL_DMA_Init+0x654>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d06d      	beq.n	8005df6 <HAL_DMA_Init+0x5be>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a5c      	ldr	r2, [pc, #368]	; (8005e90 <HAL_DMA_Init+0x658>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d068      	beq.n	8005df6 <HAL_DMA_Init+0x5be>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a5a      	ldr	r2, [pc, #360]	; (8005e94 <HAL_DMA_Init+0x65c>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d063      	beq.n	8005df6 <HAL_DMA_Init+0x5be>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a59      	ldr	r2, [pc, #356]	; (8005e98 <HAL_DMA_Init+0x660>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d05e      	beq.n	8005df6 <HAL_DMA_Init+0x5be>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a57      	ldr	r2, [pc, #348]	; (8005e9c <HAL_DMA_Init+0x664>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d059      	beq.n	8005df6 <HAL_DMA_Init+0x5be>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a56      	ldr	r2, [pc, #344]	; (8005ea0 <HAL_DMA_Init+0x668>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d054      	beq.n	8005df6 <HAL_DMA_Init+0x5be>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a54      	ldr	r2, [pc, #336]	; (8005ea4 <HAL_DMA_Init+0x66c>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d04f      	beq.n	8005df6 <HAL_DMA_Init+0x5be>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a53      	ldr	r2, [pc, #332]	; (8005ea8 <HAL_DMA_Init+0x670>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d04a      	beq.n	8005df6 <HAL_DMA_Init+0x5be>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a51      	ldr	r2, [pc, #324]	; (8005eac <HAL_DMA_Init+0x674>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d045      	beq.n	8005df6 <HAL_DMA_Init+0x5be>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a50      	ldr	r2, [pc, #320]	; (8005eb0 <HAL_DMA_Init+0x678>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d040      	beq.n	8005df6 <HAL_DMA_Init+0x5be>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a4e      	ldr	r2, [pc, #312]	; (8005eb4 <HAL_DMA_Init+0x67c>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d03b      	beq.n	8005df6 <HAL_DMA_Init+0x5be>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a4d      	ldr	r2, [pc, #308]	; (8005eb8 <HAL_DMA_Init+0x680>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d036      	beq.n	8005df6 <HAL_DMA_Init+0x5be>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a4b      	ldr	r2, [pc, #300]	; (8005ebc <HAL_DMA_Init+0x684>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d031      	beq.n	8005df6 <HAL_DMA_Init+0x5be>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a4a      	ldr	r2, [pc, #296]	; (8005ec0 <HAL_DMA_Init+0x688>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d02c      	beq.n	8005df6 <HAL_DMA_Init+0x5be>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a48      	ldr	r2, [pc, #288]	; (8005ec4 <HAL_DMA_Init+0x68c>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d027      	beq.n	8005df6 <HAL_DMA_Init+0x5be>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a47      	ldr	r2, [pc, #284]	; (8005ec8 <HAL_DMA_Init+0x690>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d022      	beq.n	8005df6 <HAL_DMA_Init+0x5be>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a45      	ldr	r2, [pc, #276]	; (8005ecc <HAL_DMA_Init+0x694>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d01d      	beq.n	8005df6 <HAL_DMA_Init+0x5be>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a44      	ldr	r2, [pc, #272]	; (8005ed0 <HAL_DMA_Init+0x698>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d018      	beq.n	8005df6 <HAL_DMA_Init+0x5be>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a42      	ldr	r2, [pc, #264]	; (8005ed4 <HAL_DMA_Init+0x69c>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d013      	beq.n	8005df6 <HAL_DMA_Init+0x5be>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a41      	ldr	r2, [pc, #260]	; (8005ed8 <HAL_DMA_Init+0x6a0>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d00e      	beq.n	8005df6 <HAL_DMA_Init+0x5be>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a3f      	ldr	r2, [pc, #252]	; (8005edc <HAL_DMA_Init+0x6a4>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d009      	beq.n	8005df6 <HAL_DMA_Init+0x5be>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a3e      	ldr	r2, [pc, #248]	; (8005ee0 <HAL_DMA_Init+0x6a8>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d004      	beq.n	8005df6 <HAL_DMA_Init+0x5be>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a3c      	ldr	r2, [pc, #240]	; (8005ee4 <HAL_DMA_Init+0x6ac>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d101      	bne.n	8005dfa <HAL_DMA_Init+0x5c2>
 8005df6:	2301      	movs	r3, #1
 8005df8:	e000      	b.n	8005dfc <HAL_DMA_Init+0x5c4>
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d032      	beq.n	8005e66 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f001 fcdf 	bl	80077c4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	2b80      	cmp	r3, #128	; 0x80
 8005e0c:	d102      	bne.n	8005e14 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685a      	ldr	r2, [r3, #4]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e1c:	b2d2      	uxtb	r2, r2
 8005e1e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005e28:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d010      	beq.n	8005e54 <HAL_DMA_Init+0x61c>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	2b08      	cmp	r3, #8
 8005e38:	d80c      	bhi.n	8005e54 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f001 fd5c 	bl	80078f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e44:	2200      	movs	r2, #0
 8005e46:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005e50:	605a      	str	r2, [r3, #4]
 8005e52:	e008      	b.n	8005e66 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3718      	adds	r7, #24
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	a7fdabf8 	.word	0xa7fdabf8
 8005e84:	cccccccd 	.word	0xcccccccd
 8005e88:	40020010 	.word	0x40020010
 8005e8c:	40020028 	.word	0x40020028
 8005e90:	40020040 	.word	0x40020040
 8005e94:	40020058 	.word	0x40020058
 8005e98:	40020070 	.word	0x40020070
 8005e9c:	40020088 	.word	0x40020088
 8005ea0:	400200a0 	.word	0x400200a0
 8005ea4:	400200b8 	.word	0x400200b8
 8005ea8:	40020410 	.word	0x40020410
 8005eac:	40020428 	.word	0x40020428
 8005eb0:	40020440 	.word	0x40020440
 8005eb4:	40020458 	.word	0x40020458
 8005eb8:	40020470 	.word	0x40020470
 8005ebc:	40020488 	.word	0x40020488
 8005ec0:	400204a0 	.word	0x400204a0
 8005ec4:	400204b8 	.word	0x400204b8
 8005ec8:	58025408 	.word	0x58025408
 8005ecc:	5802541c 	.word	0x5802541c
 8005ed0:	58025430 	.word	0x58025430
 8005ed4:	58025444 	.word	0x58025444
 8005ed8:	58025458 	.word	0x58025458
 8005edc:	5802546c 	.word	0x5802546c
 8005ee0:	58025480 	.word	0x58025480
 8005ee4:	58025494 	.word	0x58025494

08005ee8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b086      	sub	sp, #24
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	607a      	str	r2, [r7, #4]
 8005ef4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d101      	bne.n	8005f04 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	e226      	b.n	8006352 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d101      	bne.n	8005f12 <HAL_DMA_Start_IT+0x2a>
 8005f0e:	2302      	movs	r3, #2
 8005f10:	e21f      	b.n	8006352 <HAL_DMA_Start_IT+0x46a>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	f040 820a 	bne.w	800633c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a68      	ldr	r2, [pc, #416]	; (80060dc <HAL_DMA_Start_IT+0x1f4>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d04a      	beq.n	8005fd6 <HAL_DMA_Start_IT+0xee>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a66      	ldr	r2, [pc, #408]	; (80060e0 <HAL_DMA_Start_IT+0x1f8>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d045      	beq.n	8005fd6 <HAL_DMA_Start_IT+0xee>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a65      	ldr	r2, [pc, #404]	; (80060e4 <HAL_DMA_Start_IT+0x1fc>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d040      	beq.n	8005fd6 <HAL_DMA_Start_IT+0xee>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a63      	ldr	r2, [pc, #396]	; (80060e8 <HAL_DMA_Start_IT+0x200>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d03b      	beq.n	8005fd6 <HAL_DMA_Start_IT+0xee>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a62      	ldr	r2, [pc, #392]	; (80060ec <HAL_DMA_Start_IT+0x204>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d036      	beq.n	8005fd6 <HAL_DMA_Start_IT+0xee>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a60      	ldr	r2, [pc, #384]	; (80060f0 <HAL_DMA_Start_IT+0x208>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d031      	beq.n	8005fd6 <HAL_DMA_Start_IT+0xee>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a5f      	ldr	r2, [pc, #380]	; (80060f4 <HAL_DMA_Start_IT+0x20c>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d02c      	beq.n	8005fd6 <HAL_DMA_Start_IT+0xee>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a5d      	ldr	r2, [pc, #372]	; (80060f8 <HAL_DMA_Start_IT+0x210>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d027      	beq.n	8005fd6 <HAL_DMA_Start_IT+0xee>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a5c      	ldr	r2, [pc, #368]	; (80060fc <HAL_DMA_Start_IT+0x214>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d022      	beq.n	8005fd6 <HAL_DMA_Start_IT+0xee>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a5a      	ldr	r2, [pc, #360]	; (8006100 <HAL_DMA_Start_IT+0x218>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d01d      	beq.n	8005fd6 <HAL_DMA_Start_IT+0xee>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a59      	ldr	r2, [pc, #356]	; (8006104 <HAL_DMA_Start_IT+0x21c>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d018      	beq.n	8005fd6 <HAL_DMA_Start_IT+0xee>
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a57      	ldr	r2, [pc, #348]	; (8006108 <HAL_DMA_Start_IT+0x220>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d013      	beq.n	8005fd6 <HAL_DMA_Start_IT+0xee>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a56      	ldr	r2, [pc, #344]	; (800610c <HAL_DMA_Start_IT+0x224>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d00e      	beq.n	8005fd6 <HAL_DMA_Start_IT+0xee>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a54      	ldr	r2, [pc, #336]	; (8006110 <HAL_DMA_Start_IT+0x228>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d009      	beq.n	8005fd6 <HAL_DMA_Start_IT+0xee>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a53      	ldr	r2, [pc, #332]	; (8006114 <HAL_DMA_Start_IT+0x22c>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d004      	beq.n	8005fd6 <HAL_DMA_Start_IT+0xee>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a51      	ldr	r2, [pc, #324]	; (8006118 <HAL_DMA_Start_IT+0x230>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d108      	bne.n	8005fe8 <HAL_DMA_Start_IT+0x100>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f022 0201 	bic.w	r2, r2, #1
 8005fe4:	601a      	str	r2, [r3, #0]
 8005fe6:	e007      	b.n	8005ff8 <HAL_DMA_Start_IT+0x110>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f022 0201 	bic.w	r2, r2, #1
 8005ff6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	68b9      	ldr	r1, [r7, #8]
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f001 f906 	bl	8007210 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a34      	ldr	r2, [pc, #208]	; (80060dc <HAL_DMA_Start_IT+0x1f4>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d04a      	beq.n	80060a4 <HAL_DMA_Start_IT+0x1bc>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a33      	ldr	r2, [pc, #204]	; (80060e0 <HAL_DMA_Start_IT+0x1f8>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d045      	beq.n	80060a4 <HAL_DMA_Start_IT+0x1bc>
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a31      	ldr	r2, [pc, #196]	; (80060e4 <HAL_DMA_Start_IT+0x1fc>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d040      	beq.n	80060a4 <HAL_DMA_Start_IT+0x1bc>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a30      	ldr	r2, [pc, #192]	; (80060e8 <HAL_DMA_Start_IT+0x200>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d03b      	beq.n	80060a4 <HAL_DMA_Start_IT+0x1bc>
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a2e      	ldr	r2, [pc, #184]	; (80060ec <HAL_DMA_Start_IT+0x204>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d036      	beq.n	80060a4 <HAL_DMA_Start_IT+0x1bc>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a2d      	ldr	r2, [pc, #180]	; (80060f0 <HAL_DMA_Start_IT+0x208>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d031      	beq.n	80060a4 <HAL_DMA_Start_IT+0x1bc>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a2b      	ldr	r2, [pc, #172]	; (80060f4 <HAL_DMA_Start_IT+0x20c>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d02c      	beq.n	80060a4 <HAL_DMA_Start_IT+0x1bc>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a2a      	ldr	r2, [pc, #168]	; (80060f8 <HAL_DMA_Start_IT+0x210>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d027      	beq.n	80060a4 <HAL_DMA_Start_IT+0x1bc>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a28      	ldr	r2, [pc, #160]	; (80060fc <HAL_DMA_Start_IT+0x214>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d022      	beq.n	80060a4 <HAL_DMA_Start_IT+0x1bc>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a27      	ldr	r2, [pc, #156]	; (8006100 <HAL_DMA_Start_IT+0x218>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d01d      	beq.n	80060a4 <HAL_DMA_Start_IT+0x1bc>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a25      	ldr	r2, [pc, #148]	; (8006104 <HAL_DMA_Start_IT+0x21c>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d018      	beq.n	80060a4 <HAL_DMA_Start_IT+0x1bc>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a24      	ldr	r2, [pc, #144]	; (8006108 <HAL_DMA_Start_IT+0x220>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d013      	beq.n	80060a4 <HAL_DMA_Start_IT+0x1bc>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a22      	ldr	r2, [pc, #136]	; (800610c <HAL_DMA_Start_IT+0x224>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d00e      	beq.n	80060a4 <HAL_DMA_Start_IT+0x1bc>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a21      	ldr	r2, [pc, #132]	; (8006110 <HAL_DMA_Start_IT+0x228>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d009      	beq.n	80060a4 <HAL_DMA_Start_IT+0x1bc>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a1f      	ldr	r2, [pc, #124]	; (8006114 <HAL_DMA_Start_IT+0x22c>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d004      	beq.n	80060a4 <HAL_DMA_Start_IT+0x1bc>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a1e      	ldr	r2, [pc, #120]	; (8006118 <HAL_DMA_Start_IT+0x230>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d101      	bne.n	80060a8 <HAL_DMA_Start_IT+0x1c0>
 80060a4:	2301      	movs	r3, #1
 80060a6:	e000      	b.n	80060aa <HAL_DMA_Start_IT+0x1c2>
 80060a8:	2300      	movs	r3, #0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d036      	beq.n	800611c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f023 021e 	bic.w	r2, r3, #30
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f042 0216 	orr.w	r2, r2, #22
 80060c0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d03e      	beq.n	8006148 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f042 0208 	orr.w	r2, r2, #8
 80060d8:	601a      	str	r2, [r3, #0]
 80060da:	e035      	b.n	8006148 <HAL_DMA_Start_IT+0x260>
 80060dc:	40020010 	.word	0x40020010
 80060e0:	40020028 	.word	0x40020028
 80060e4:	40020040 	.word	0x40020040
 80060e8:	40020058 	.word	0x40020058
 80060ec:	40020070 	.word	0x40020070
 80060f0:	40020088 	.word	0x40020088
 80060f4:	400200a0 	.word	0x400200a0
 80060f8:	400200b8 	.word	0x400200b8
 80060fc:	40020410 	.word	0x40020410
 8006100:	40020428 	.word	0x40020428
 8006104:	40020440 	.word	0x40020440
 8006108:	40020458 	.word	0x40020458
 800610c:	40020470 	.word	0x40020470
 8006110:	40020488 	.word	0x40020488
 8006114:	400204a0 	.word	0x400204a0
 8006118:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f023 020e 	bic.w	r2, r3, #14
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f042 020a 	orr.w	r2, r2, #10
 800612e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006134:	2b00      	cmp	r3, #0
 8006136:	d007      	beq.n	8006148 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f042 0204 	orr.w	r2, r2, #4
 8006146:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a83      	ldr	r2, [pc, #524]	; (800635c <HAL_DMA_Start_IT+0x474>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d072      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a82      	ldr	r2, [pc, #520]	; (8006360 <HAL_DMA_Start_IT+0x478>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d06d      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a80      	ldr	r2, [pc, #512]	; (8006364 <HAL_DMA_Start_IT+0x47c>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d068      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a7f      	ldr	r2, [pc, #508]	; (8006368 <HAL_DMA_Start_IT+0x480>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d063      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a7d      	ldr	r2, [pc, #500]	; (800636c <HAL_DMA_Start_IT+0x484>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d05e      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a7c      	ldr	r2, [pc, #496]	; (8006370 <HAL_DMA_Start_IT+0x488>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d059      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a7a      	ldr	r2, [pc, #488]	; (8006374 <HAL_DMA_Start_IT+0x48c>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d054      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a79      	ldr	r2, [pc, #484]	; (8006378 <HAL_DMA_Start_IT+0x490>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d04f      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a77      	ldr	r2, [pc, #476]	; (800637c <HAL_DMA_Start_IT+0x494>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d04a      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a76      	ldr	r2, [pc, #472]	; (8006380 <HAL_DMA_Start_IT+0x498>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d045      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a74      	ldr	r2, [pc, #464]	; (8006384 <HAL_DMA_Start_IT+0x49c>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d040      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a73      	ldr	r2, [pc, #460]	; (8006388 <HAL_DMA_Start_IT+0x4a0>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d03b      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a71      	ldr	r2, [pc, #452]	; (800638c <HAL_DMA_Start_IT+0x4a4>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d036      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a70      	ldr	r2, [pc, #448]	; (8006390 <HAL_DMA_Start_IT+0x4a8>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d031      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a6e      	ldr	r2, [pc, #440]	; (8006394 <HAL_DMA_Start_IT+0x4ac>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d02c      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a6d      	ldr	r2, [pc, #436]	; (8006398 <HAL_DMA_Start_IT+0x4b0>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d027      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a6b      	ldr	r2, [pc, #428]	; (800639c <HAL_DMA_Start_IT+0x4b4>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d022      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a6a      	ldr	r2, [pc, #424]	; (80063a0 <HAL_DMA_Start_IT+0x4b8>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d01d      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a68      	ldr	r2, [pc, #416]	; (80063a4 <HAL_DMA_Start_IT+0x4bc>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d018      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a67      	ldr	r2, [pc, #412]	; (80063a8 <HAL_DMA_Start_IT+0x4c0>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d013      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a65      	ldr	r2, [pc, #404]	; (80063ac <HAL_DMA_Start_IT+0x4c4>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d00e      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a64      	ldr	r2, [pc, #400]	; (80063b0 <HAL_DMA_Start_IT+0x4c8>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d009      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a62      	ldr	r2, [pc, #392]	; (80063b4 <HAL_DMA_Start_IT+0x4cc>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d004      	beq.n	8006238 <HAL_DMA_Start_IT+0x350>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a61      	ldr	r2, [pc, #388]	; (80063b8 <HAL_DMA_Start_IT+0x4d0>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d101      	bne.n	800623c <HAL_DMA_Start_IT+0x354>
 8006238:	2301      	movs	r3, #1
 800623a:	e000      	b.n	800623e <HAL_DMA_Start_IT+0x356>
 800623c:	2300      	movs	r3, #0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d01a      	beq.n	8006278 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d007      	beq.n	8006260 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800625a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800625e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006264:	2b00      	cmp	r3, #0
 8006266:	d007      	beq.n	8006278 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006272:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006276:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a37      	ldr	r2, [pc, #220]	; (800635c <HAL_DMA_Start_IT+0x474>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d04a      	beq.n	8006318 <HAL_DMA_Start_IT+0x430>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a36      	ldr	r2, [pc, #216]	; (8006360 <HAL_DMA_Start_IT+0x478>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d045      	beq.n	8006318 <HAL_DMA_Start_IT+0x430>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a34      	ldr	r2, [pc, #208]	; (8006364 <HAL_DMA_Start_IT+0x47c>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d040      	beq.n	8006318 <HAL_DMA_Start_IT+0x430>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a33      	ldr	r2, [pc, #204]	; (8006368 <HAL_DMA_Start_IT+0x480>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d03b      	beq.n	8006318 <HAL_DMA_Start_IT+0x430>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a31      	ldr	r2, [pc, #196]	; (800636c <HAL_DMA_Start_IT+0x484>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d036      	beq.n	8006318 <HAL_DMA_Start_IT+0x430>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a30      	ldr	r2, [pc, #192]	; (8006370 <HAL_DMA_Start_IT+0x488>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d031      	beq.n	8006318 <HAL_DMA_Start_IT+0x430>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a2e      	ldr	r2, [pc, #184]	; (8006374 <HAL_DMA_Start_IT+0x48c>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d02c      	beq.n	8006318 <HAL_DMA_Start_IT+0x430>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a2d      	ldr	r2, [pc, #180]	; (8006378 <HAL_DMA_Start_IT+0x490>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d027      	beq.n	8006318 <HAL_DMA_Start_IT+0x430>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a2b      	ldr	r2, [pc, #172]	; (800637c <HAL_DMA_Start_IT+0x494>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d022      	beq.n	8006318 <HAL_DMA_Start_IT+0x430>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a2a      	ldr	r2, [pc, #168]	; (8006380 <HAL_DMA_Start_IT+0x498>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d01d      	beq.n	8006318 <HAL_DMA_Start_IT+0x430>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a28      	ldr	r2, [pc, #160]	; (8006384 <HAL_DMA_Start_IT+0x49c>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d018      	beq.n	8006318 <HAL_DMA_Start_IT+0x430>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a27      	ldr	r2, [pc, #156]	; (8006388 <HAL_DMA_Start_IT+0x4a0>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d013      	beq.n	8006318 <HAL_DMA_Start_IT+0x430>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a25      	ldr	r2, [pc, #148]	; (800638c <HAL_DMA_Start_IT+0x4a4>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d00e      	beq.n	8006318 <HAL_DMA_Start_IT+0x430>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a24      	ldr	r2, [pc, #144]	; (8006390 <HAL_DMA_Start_IT+0x4a8>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d009      	beq.n	8006318 <HAL_DMA_Start_IT+0x430>
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a22      	ldr	r2, [pc, #136]	; (8006394 <HAL_DMA_Start_IT+0x4ac>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d004      	beq.n	8006318 <HAL_DMA_Start_IT+0x430>
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a21      	ldr	r2, [pc, #132]	; (8006398 <HAL_DMA_Start_IT+0x4b0>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d108      	bne.n	800632a <HAL_DMA_Start_IT+0x442>
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f042 0201 	orr.w	r2, r2, #1
 8006326:	601a      	str	r2, [r3, #0]
 8006328:	e012      	b.n	8006350 <HAL_DMA_Start_IT+0x468>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f042 0201 	orr.w	r2, r2, #1
 8006338:	601a      	str	r2, [r3, #0]
 800633a:	e009      	b.n	8006350 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006342:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006350:	7dfb      	ldrb	r3, [r7, #23]
}
 8006352:	4618      	mov	r0, r3
 8006354:	3718      	adds	r7, #24
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	40020010 	.word	0x40020010
 8006360:	40020028 	.word	0x40020028
 8006364:	40020040 	.word	0x40020040
 8006368:	40020058 	.word	0x40020058
 800636c:	40020070 	.word	0x40020070
 8006370:	40020088 	.word	0x40020088
 8006374:	400200a0 	.word	0x400200a0
 8006378:	400200b8 	.word	0x400200b8
 800637c:	40020410 	.word	0x40020410
 8006380:	40020428 	.word	0x40020428
 8006384:	40020440 	.word	0x40020440
 8006388:	40020458 	.word	0x40020458
 800638c:	40020470 	.word	0x40020470
 8006390:	40020488 	.word	0x40020488
 8006394:	400204a0 	.word	0x400204a0
 8006398:	400204b8 	.word	0x400204b8
 800639c:	58025408 	.word	0x58025408
 80063a0:	5802541c 	.word	0x5802541c
 80063a4:	58025430 	.word	0x58025430
 80063a8:	58025444 	.word	0x58025444
 80063ac:	58025458 	.word	0x58025458
 80063b0:	5802546c 	.word	0x5802546c
 80063b4:	58025480 	.word	0x58025480
 80063b8:	58025494 	.word	0x58025494

080063bc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b08a      	sub	sp, #40	; 0x28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80063c4:	2300      	movs	r3, #0
 80063c6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80063c8:	4b67      	ldr	r3, [pc, #412]	; (8006568 <HAL_DMA_IRQHandler+0x1ac>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a67      	ldr	r2, [pc, #412]	; (800656c <HAL_DMA_IRQHandler+0x1b0>)
 80063ce:	fba2 2303 	umull	r2, r3, r2, r3
 80063d2:	0a9b      	lsrs	r3, r3, #10
 80063d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063da:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063e0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80063e2:	6a3b      	ldr	r3, [r7, #32]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a5f      	ldr	r2, [pc, #380]	; (8006570 <HAL_DMA_IRQHandler+0x1b4>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d04a      	beq.n	800648e <HAL_DMA_IRQHandler+0xd2>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a5d      	ldr	r2, [pc, #372]	; (8006574 <HAL_DMA_IRQHandler+0x1b8>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d045      	beq.n	800648e <HAL_DMA_IRQHandler+0xd2>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a5c      	ldr	r2, [pc, #368]	; (8006578 <HAL_DMA_IRQHandler+0x1bc>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d040      	beq.n	800648e <HAL_DMA_IRQHandler+0xd2>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a5a      	ldr	r2, [pc, #360]	; (800657c <HAL_DMA_IRQHandler+0x1c0>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d03b      	beq.n	800648e <HAL_DMA_IRQHandler+0xd2>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a59      	ldr	r2, [pc, #356]	; (8006580 <HAL_DMA_IRQHandler+0x1c4>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d036      	beq.n	800648e <HAL_DMA_IRQHandler+0xd2>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a57      	ldr	r2, [pc, #348]	; (8006584 <HAL_DMA_IRQHandler+0x1c8>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d031      	beq.n	800648e <HAL_DMA_IRQHandler+0xd2>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a56      	ldr	r2, [pc, #344]	; (8006588 <HAL_DMA_IRQHandler+0x1cc>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d02c      	beq.n	800648e <HAL_DMA_IRQHandler+0xd2>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a54      	ldr	r2, [pc, #336]	; (800658c <HAL_DMA_IRQHandler+0x1d0>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d027      	beq.n	800648e <HAL_DMA_IRQHandler+0xd2>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a53      	ldr	r2, [pc, #332]	; (8006590 <HAL_DMA_IRQHandler+0x1d4>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d022      	beq.n	800648e <HAL_DMA_IRQHandler+0xd2>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a51      	ldr	r2, [pc, #324]	; (8006594 <HAL_DMA_IRQHandler+0x1d8>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d01d      	beq.n	800648e <HAL_DMA_IRQHandler+0xd2>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a50      	ldr	r2, [pc, #320]	; (8006598 <HAL_DMA_IRQHandler+0x1dc>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d018      	beq.n	800648e <HAL_DMA_IRQHandler+0xd2>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a4e      	ldr	r2, [pc, #312]	; (800659c <HAL_DMA_IRQHandler+0x1e0>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d013      	beq.n	800648e <HAL_DMA_IRQHandler+0xd2>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a4d      	ldr	r2, [pc, #308]	; (80065a0 <HAL_DMA_IRQHandler+0x1e4>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d00e      	beq.n	800648e <HAL_DMA_IRQHandler+0xd2>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a4b      	ldr	r2, [pc, #300]	; (80065a4 <HAL_DMA_IRQHandler+0x1e8>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d009      	beq.n	800648e <HAL_DMA_IRQHandler+0xd2>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a4a      	ldr	r2, [pc, #296]	; (80065a8 <HAL_DMA_IRQHandler+0x1ec>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d004      	beq.n	800648e <HAL_DMA_IRQHandler+0xd2>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a48      	ldr	r2, [pc, #288]	; (80065ac <HAL_DMA_IRQHandler+0x1f0>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d101      	bne.n	8006492 <HAL_DMA_IRQHandler+0xd6>
 800648e:	2301      	movs	r3, #1
 8006490:	e000      	b.n	8006494 <HAL_DMA_IRQHandler+0xd8>
 8006492:	2300      	movs	r3, #0
 8006494:	2b00      	cmp	r3, #0
 8006496:	f000 842b 	beq.w	8006cf0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800649e:	f003 031f 	and.w	r3, r3, #31
 80064a2:	2208      	movs	r2, #8
 80064a4:	409a      	lsls	r2, r3
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	4013      	ands	r3, r2
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f000 80a2 	beq.w	80065f4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a2e      	ldr	r2, [pc, #184]	; (8006570 <HAL_DMA_IRQHandler+0x1b4>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d04a      	beq.n	8006550 <HAL_DMA_IRQHandler+0x194>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a2d      	ldr	r2, [pc, #180]	; (8006574 <HAL_DMA_IRQHandler+0x1b8>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d045      	beq.n	8006550 <HAL_DMA_IRQHandler+0x194>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a2b      	ldr	r2, [pc, #172]	; (8006578 <HAL_DMA_IRQHandler+0x1bc>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d040      	beq.n	8006550 <HAL_DMA_IRQHandler+0x194>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a2a      	ldr	r2, [pc, #168]	; (800657c <HAL_DMA_IRQHandler+0x1c0>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d03b      	beq.n	8006550 <HAL_DMA_IRQHandler+0x194>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a28      	ldr	r2, [pc, #160]	; (8006580 <HAL_DMA_IRQHandler+0x1c4>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d036      	beq.n	8006550 <HAL_DMA_IRQHandler+0x194>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a27      	ldr	r2, [pc, #156]	; (8006584 <HAL_DMA_IRQHandler+0x1c8>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d031      	beq.n	8006550 <HAL_DMA_IRQHandler+0x194>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a25      	ldr	r2, [pc, #148]	; (8006588 <HAL_DMA_IRQHandler+0x1cc>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d02c      	beq.n	8006550 <HAL_DMA_IRQHandler+0x194>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a24      	ldr	r2, [pc, #144]	; (800658c <HAL_DMA_IRQHandler+0x1d0>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d027      	beq.n	8006550 <HAL_DMA_IRQHandler+0x194>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a22      	ldr	r2, [pc, #136]	; (8006590 <HAL_DMA_IRQHandler+0x1d4>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d022      	beq.n	8006550 <HAL_DMA_IRQHandler+0x194>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a21      	ldr	r2, [pc, #132]	; (8006594 <HAL_DMA_IRQHandler+0x1d8>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d01d      	beq.n	8006550 <HAL_DMA_IRQHandler+0x194>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a1f      	ldr	r2, [pc, #124]	; (8006598 <HAL_DMA_IRQHandler+0x1dc>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d018      	beq.n	8006550 <HAL_DMA_IRQHandler+0x194>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a1e      	ldr	r2, [pc, #120]	; (800659c <HAL_DMA_IRQHandler+0x1e0>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d013      	beq.n	8006550 <HAL_DMA_IRQHandler+0x194>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a1c      	ldr	r2, [pc, #112]	; (80065a0 <HAL_DMA_IRQHandler+0x1e4>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d00e      	beq.n	8006550 <HAL_DMA_IRQHandler+0x194>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a1b      	ldr	r2, [pc, #108]	; (80065a4 <HAL_DMA_IRQHandler+0x1e8>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d009      	beq.n	8006550 <HAL_DMA_IRQHandler+0x194>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a19      	ldr	r2, [pc, #100]	; (80065a8 <HAL_DMA_IRQHandler+0x1ec>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d004      	beq.n	8006550 <HAL_DMA_IRQHandler+0x194>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a18      	ldr	r2, [pc, #96]	; (80065ac <HAL_DMA_IRQHandler+0x1f0>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d12f      	bne.n	80065b0 <HAL_DMA_IRQHandler+0x1f4>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0304 	and.w	r3, r3, #4
 800655a:	2b00      	cmp	r3, #0
 800655c:	bf14      	ite	ne
 800655e:	2301      	movne	r3, #1
 8006560:	2300      	moveq	r3, #0
 8006562:	b2db      	uxtb	r3, r3
 8006564:	e02e      	b.n	80065c4 <HAL_DMA_IRQHandler+0x208>
 8006566:	bf00      	nop
 8006568:	24000000 	.word	0x24000000
 800656c:	1b4e81b5 	.word	0x1b4e81b5
 8006570:	40020010 	.word	0x40020010
 8006574:	40020028 	.word	0x40020028
 8006578:	40020040 	.word	0x40020040
 800657c:	40020058 	.word	0x40020058
 8006580:	40020070 	.word	0x40020070
 8006584:	40020088 	.word	0x40020088
 8006588:	400200a0 	.word	0x400200a0
 800658c:	400200b8 	.word	0x400200b8
 8006590:	40020410 	.word	0x40020410
 8006594:	40020428 	.word	0x40020428
 8006598:	40020440 	.word	0x40020440
 800659c:	40020458 	.word	0x40020458
 80065a0:	40020470 	.word	0x40020470
 80065a4:	40020488 	.word	0x40020488
 80065a8:	400204a0 	.word	0x400204a0
 80065ac:	400204b8 	.word	0x400204b8
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0308 	and.w	r3, r3, #8
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	bf14      	ite	ne
 80065be:	2301      	movne	r3, #1
 80065c0:	2300      	moveq	r3, #0
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d015      	beq.n	80065f4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f022 0204 	bic.w	r2, r2, #4
 80065d6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065dc:	f003 031f 	and.w	r3, r3, #31
 80065e0:	2208      	movs	r2, #8
 80065e2:	409a      	lsls	r2, r3
 80065e4:	6a3b      	ldr	r3, [r7, #32]
 80065e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ec:	f043 0201 	orr.w	r2, r3, #1
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065f8:	f003 031f 	and.w	r3, r3, #31
 80065fc:	69ba      	ldr	r2, [r7, #24]
 80065fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	2b00      	cmp	r3, #0
 8006608:	d06e      	beq.n	80066e8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a69      	ldr	r2, [pc, #420]	; (80067b4 <HAL_DMA_IRQHandler+0x3f8>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d04a      	beq.n	80066aa <HAL_DMA_IRQHandler+0x2ee>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a67      	ldr	r2, [pc, #412]	; (80067b8 <HAL_DMA_IRQHandler+0x3fc>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d045      	beq.n	80066aa <HAL_DMA_IRQHandler+0x2ee>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a66      	ldr	r2, [pc, #408]	; (80067bc <HAL_DMA_IRQHandler+0x400>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d040      	beq.n	80066aa <HAL_DMA_IRQHandler+0x2ee>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a64      	ldr	r2, [pc, #400]	; (80067c0 <HAL_DMA_IRQHandler+0x404>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d03b      	beq.n	80066aa <HAL_DMA_IRQHandler+0x2ee>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a63      	ldr	r2, [pc, #396]	; (80067c4 <HAL_DMA_IRQHandler+0x408>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d036      	beq.n	80066aa <HAL_DMA_IRQHandler+0x2ee>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a61      	ldr	r2, [pc, #388]	; (80067c8 <HAL_DMA_IRQHandler+0x40c>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d031      	beq.n	80066aa <HAL_DMA_IRQHandler+0x2ee>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a60      	ldr	r2, [pc, #384]	; (80067cc <HAL_DMA_IRQHandler+0x410>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d02c      	beq.n	80066aa <HAL_DMA_IRQHandler+0x2ee>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a5e      	ldr	r2, [pc, #376]	; (80067d0 <HAL_DMA_IRQHandler+0x414>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d027      	beq.n	80066aa <HAL_DMA_IRQHandler+0x2ee>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a5d      	ldr	r2, [pc, #372]	; (80067d4 <HAL_DMA_IRQHandler+0x418>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d022      	beq.n	80066aa <HAL_DMA_IRQHandler+0x2ee>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a5b      	ldr	r2, [pc, #364]	; (80067d8 <HAL_DMA_IRQHandler+0x41c>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d01d      	beq.n	80066aa <HAL_DMA_IRQHandler+0x2ee>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a5a      	ldr	r2, [pc, #360]	; (80067dc <HAL_DMA_IRQHandler+0x420>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d018      	beq.n	80066aa <HAL_DMA_IRQHandler+0x2ee>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a58      	ldr	r2, [pc, #352]	; (80067e0 <HAL_DMA_IRQHandler+0x424>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d013      	beq.n	80066aa <HAL_DMA_IRQHandler+0x2ee>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a57      	ldr	r2, [pc, #348]	; (80067e4 <HAL_DMA_IRQHandler+0x428>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d00e      	beq.n	80066aa <HAL_DMA_IRQHandler+0x2ee>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a55      	ldr	r2, [pc, #340]	; (80067e8 <HAL_DMA_IRQHandler+0x42c>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d009      	beq.n	80066aa <HAL_DMA_IRQHandler+0x2ee>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a54      	ldr	r2, [pc, #336]	; (80067ec <HAL_DMA_IRQHandler+0x430>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d004      	beq.n	80066aa <HAL_DMA_IRQHandler+0x2ee>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a52      	ldr	r2, [pc, #328]	; (80067f0 <HAL_DMA_IRQHandler+0x434>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d10a      	bne.n	80066c0 <HAL_DMA_IRQHandler+0x304>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	bf14      	ite	ne
 80066b8:	2301      	movne	r3, #1
 80066ba:	2300      	moveq	r3, #0
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	e003      	b.n	80066c8 <HAL_DMA_IRQHandler+0x30c>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2300      	movs	r3, #0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00d      	beq.n	80066e8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066d0:	f003 031f 	and.w	r3, r3, #31
 80066d4:	2201      	movs	r2, #1
 80066d6:	409a      	lsls	r2, r3
 80066d8:	6a3b      	ldr	r3, [r7, #32]
 80066da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e0:	f043 0202 	orr.w	r2, r3, #2
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ec:	f003 031f 	and.w	r3, r3, #31
 80066f0:	2204      	movs	r2, #4
 80066f2:	409a      	lsls	r2, r3
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	4013      	ands	r3, r2
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f000 808f 	beq.w	800681c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a2c      	ldr	r2, [pc, #176]	; (80067b4 <HAL_DMA_IRQHandler+0x3f8>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d04a      	beq.n	800679e <HAL_DMA_IRQHandler+0x3e2>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a2a      	ldr	r2, [pc, #168]	; (80067b8 <HAL_DMA_IRQHandler+0x3fc>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d045      	beq.n	800679e <HAL_DMA_IRQHandler+0x3e2>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a29      	ldr	r2, [pc, #164]	; (80067bc <HAL_DMA_IRQHandler+0x400>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d040      	beq.n	800679e <HAL_DMA_IRQHandler+0x3e2>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a27      	ldr	r2, [pc, #156]	; (80067c0 <HAL_DMA_IRQHandler+0x404>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d03b      	beq.n	800679e <HAL_DMA_IRQHandler+0x3e2>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a26      	ldr	r2, [pc, #152]	; (80067c4 <HAL_DMA_IRQHandler+0x408>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d036      	beq.n	800679e <HAL_DMA_IRQHandler+0x3e2>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a24      	ldr	r2, [pc, #144]	; (80067c8 <HAL_DMA_IRQHandler+0x40c>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d031      	beq.n	800679e <HAL_DMA_IRQHandler+0x3e2>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a23      	ldr	r2, [pc, #140]	; (80067cc <HAL_DMA_IRQHandler+0x410>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d02c      	beq.n	800679e <HAL_DMA_IRQHandler+0x3e2>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a21      	ldr	r2, [pc, #132]	; (80067d0 <HAL_DMA_IRQHandler+0x414>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d027      	beq.n	800679e <HAL_DMA_IRQHandler+0x3e2>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a20      	ldr	r2, [pc, #128]	; (80067d4 <HAL_DMA_IRQHandler+0x418>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d022      	beq.n	800679e <HAL_DMA_IRQHandler+0x3e2>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a1e      	ldr	r2, [pc, #120]	; (80067d8 <HAL_DMA_IRQHandler+0x41c>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d01d      	beq.n	800679e <HAL_DMA_IRQHandler+0x3e2>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a1d      	ldr	r2, [pc, #116]	; (80067dc <HAL_DMA_IRQHandler+0x420>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d018      	beq.n	800679e <HAL_DMA_IRQHandler+0x3e2>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a1b      	ldr	r2, [pc, #108]	; (80067e0 <HAL_DMA_IRQHandler+0x424>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d013      	beq.n	800679e <HAL_DMA_IRQHandler+0x3e2>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a1a      	ldr	r2, [pc, #104]	; (80067e4 <HAL_DMA_IRQHandler+0x428>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d00e      	beq.n	800679e <HAL_DMA_IRQHandler+0x3e2>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a18      	ldr	r2, [pc, #96]	; (80067e8 <HAL_DMA_IRQHandler+0x42c>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d009      	beq.n	800679e <HAL_DMA_IRQHandler+0x3e2>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a17      	ldr	r2, [pc, #92]	; (80067ec <HAL_DMA_IRQHandler+0x430>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d004      	beq.n	800679e <HAL_DMA_IRQHandler+0x3e2>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a15      	ldr	r2, [pc, #84]	; (80067f0 <HAL_DMA_IRQHandler+0x434>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d12a      	bne.n	80067f4 <HAL_DMA_IRQHandler+0x438>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0302 	and.w	r3, r3, #2
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	bf14      	ite	ne
 80067ac:	2301      	movne	r3, #1
 80067ae:	2300      	moveq	r3, #0
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	e023      	b.n	80067fc <HAL_DMA_IRQHandler+0x440>
 80067b4:	40020010 	.word	0x40020010
 80067b8:	40020028 	.word	0x40020028
 80067bc:	40020040 	.word	0x40020040
 80067c0:	40020058 	.word	0x40020058
 80067c4:	40020070 	.word	0x40020070
 80067c8:	40020088 	.word	0x40020088
 80067cc:	400200a0 	.word	0x400200a0
 80067d0:	400200b8 	.word	0x400200b8
 80067d4:	40020410 	.word	0x40020410
 80067d8:	40020428 	.word	0x40020428
 80067dc:	40020440 	.word	0x40020440
 80067e0:	40020458 	.word	0x40020458
 80067e4:	40020470 	.word	0x40020470
 80067e8:	40020488 	.word	0x40020488
 80067ec:	400204a0 	.word	0x400204a0
 80067f0:	400204b8 	.word	0x400204b8
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2300      	movs	r3, #0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00d      	beq.n	800681c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006804:	f003 031f 	and.w	r3, r3, #31
 8006808:	2204      	movs	r2, #4
 800680a:	409a      	lsls	r2, r3
 800680c:	6a3b      	ldr	r3, [r7, #32]
 800680e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006814:	f043 0204 	orr.w	r2, r3, #4
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006820:	f003 031f 	and.w	r3, r3, #31
 8006824:	2210      	movs	r2, #16
 8006826:	409a      	lsls	r2, r3
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	4013      	ands	r3, r2
 800682c:	2b00      	cmp	r3, #0
 800682e:	f000 80a6 	beq.w	800697e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a85      	ldr	r2, [pc, #532]	; (8006a4c <HAL_DMA_IRQHandler+0x690>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d04a      	beq.n	80068d2 <HAL_DMA_IRQHandler+0x516>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a83      	ldr	r2, [pc, #524]	; (8006a50 <HAL_DMA_IRQHandler+0x694>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d045      	beq.n	80068d2 <HAL_DMA_IRQHandler+0x516>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a82      	ldr	r2, [pc, #520]	; (8006a54 <HAL_DMA_IRQHandler+0x698>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d040      	beq.n	80068d2 <HAL_DMA_IRQHandler+0x516>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a80      	ldr	r2, [pc, #512]	; (8006a58 <HAL_DMA_IRQHandler+0x69c>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d03b      	beq.n	80068d2 <HAL_DMA_IRQHandler+0x516>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a7f      	ldr	r2, [pc, #508]	; (8006a5c <HAL_DMA_IRQHandler+0x6a0>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d036      	beq.n	80068d2 <HAL_DMA_IRQHandler+0x516>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a7d      	ldr	r2, [pc, #500]	; (8006a60 <HAL_DMA_IRQHandler+0x6a4>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d031      	beq.n	80068d2 <HAL_DMA_IRQHandler+0x516>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a7c      	ldr	r2, [pc, #496]	; (8006a64 <HAL_DMA_IRQHandler+0x6a8>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d02c      	beq.n	80068d2 <HAL_DMA_IRQHandler+0x516>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a7a      	ldr	r2, [pc, #488]	; (8006a68 <HAL_DMA_IRQHandler+0x6ac>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d027      	beq.n	80068d2 <HAL_DMA_IRQHandler+0x516>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a79      	ldr	r2, [pc, #484]	; (8006a6c <HAL_DMA_IRQHandler+0x6b0>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d022      	beq.n	80068d2 <HAL_DMA_IRQHandler+0x516>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a77      	ldr	r2, [pc, #476]	; (8006a70 <HAL_DMA_IRQHandler+0x6b4>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d01d      	beq.n	80068d2 <HAL_DMA_IRQHandler+0x516>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a76      	ldr	r2, [pc, #472]	; (8006a74 <HAL_DMA_IRQHandler+0x6b8>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d018      	beq.n	80068d2 <HAL_DMA_IRQHandler+0x516>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a74      	ldr	r2, [pc, #464]	; (8006a78 <HAL_DMA_IRQHandler+0x6bc>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d013      	beq.n	80068d2 <HAL_DMA_IRQHandler+0x516>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a73      	ldr	r2, [pc, #460]	; (8006a7c <HAL_DMA_IRQHandler+0x6c0>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d00e      	beq.n	80068d2 <HAL_DMA_IRQHandler+0x516>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a71      	ldr	r2, [pc, #452]	; (8006a80 <HAL_DMA_IRQHandler+0x6c4>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d009      	beq.n	80068d2 <HAL_DMA_IRQHandler+0x516>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a70      	ldr	r2, [pc, #448]	; (8006a84 <HAL_DMA_IRQHandler+0x6c8>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d004      	beq.n	80068d2 <HAL_DMA_IRQHandler+0x516>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a6e      	ldr	r2, [pc, #440]	; (8006a88 <HAL_DMA_IRQHandler+0x6cc>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d10a      	bne.n	80068e8 <HAL_DMA_IRQHandler+0x52c>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 0308 	and.w	r3, r3, #8
 80068dc:	2b00      	cmp	r3, #0
 80068de:	bf14      	ite	ne
 80068e0:	2301      	movne	r3, #1
 80068e2:	2300      	moveq	r3, #0
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	e009      	b.n	80068fc <HAL_DMA_IRQHandler+0x540>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0304 	and.w	r3, r3, #4
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	bf14      	ite	ne
 80068f6:	2301      	movne	r3, #1
 80068f8:	2300      	moveq	r3, #0
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d03e      	beq.n	800697e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006904:	f003 031f 	and.w	r3, r3, #31
 8006908:	2210      	movs	r2, #16
 800690a:	409a      	lsls	r2, r3
 800690c:	6a3b      	ldr	r3, [r7, #32]
 800690e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d018      	beq.n	8006950 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006928:	2b00      	cmp	r3, #0
 800692a:	d108      	bne.n	800693e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006930:	2b00      	cmp	r3, #0
 8006932:	d024      	beq.n	800697e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	4798      	blx	r3
 800693c:	e01f      	b.n	800697e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006942:	2b00      	cmp	r3, #0
 8006944:	d01b      	beq.n	800697e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	4798      	blx	r3
 800694e:	e016      	b.n	800697e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800695a:	2b00      	cmp	r3, #0
 800695c:	d107      	bne.n	800696e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f022 0208 	bic.w	r2, r2, #8
 800696c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006972:	2b00      	cmp	r3, #0
 8006974:	d003      	beq.n	800697e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006982:	f003 031f 	and.w	r3, r3, #31
 8006986:	2220      	movs	r2, #32
 8006988:	409a      	lsls	r2, r3
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	4013      	ands	r3, r2
 800698e:	2b00      	cmp	r3, #0
 8006990:	f000 8110 	beq.w	8006bb4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a2c      	ldr	r2, [pc, #176]	; (8006a4c <HAL_DMA_IRQHandler+0x690>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d04a      	beq.n	8006a34 <HAL_DMA_IRQHandler+0x678>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a2b      	ldr	r2, [pc, #172]	; (8006a50 <HAL_DMA_IRQHandler+0x694>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d045      	beq.n	8006a34 <HAL_DMA_IRQHandler+0x678>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a29      	ldr	r2, [pc, #164]	; (8006a54 <HAL_DMA_IRQHandler+0x698>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d040      	beq.n	8006a34 <HAL_DMA_IRQHandler+0x678>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a28      	ldr	r2, [pc, #160]	; (8006a58 <HAL_DMA_IRQHandler+0x69c>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d03b      	beq.n	8006a34 <HAL_DMA_IRQHandler+0x678>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a26      	ldr	r2, [pc, #152]	; (8006a5c <HAL_DMA_IRQHandler+0x6a0>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d036      	beq.n	8006a34 <HAL_DMA_IRQHandler+0x678>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a25      	ldr	r2, [pc, #148]	; (8006a60 <HAL_DMA_IRQHandler+0x6a4>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d031      	beq.n	8006a34 <HAL_DMA_IRQHandler+0x678>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a23      	ldr	r2, [pc, #140]	; (8006a64 <HAL_DMA_IRQHandler+0x6a8>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d02c      	beq.n	8006a34 <HAL_DMA_IRQHandler+0x678>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a22      	ldr	r2, [pc, #136]	; (8006a68 <HAL_DMA_IRQHandler+0x6ac>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d027      	beq.n	8006a34 <HAL_DMA_IRQHandler+0x678>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a20      	ldr	r2, [pc, #128]	; (8006a6c <HAL_DMA_IRQHandler+0x6b0>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d022      	beq.n	8006a34 <HAL_DMA_IRQHandler+0x678>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a1f      	ldr	r2, [pc, #124]	; (8006a70 <HAL_DMA_IRQHandler+0x6b4>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d01d      	beq.n	8006a34 <HAL_DMA_IRQHandler+0x678>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a1d      	ldr	r2, [pc, #116]	; (8006a74 <HAL_DMA_IRQHandler+0x6b8>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d018      	beq.n	8006a34 <HAL_DMA_IRQHandler+0x678>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a1c      	ldr	r2, [pc, #112]	; (8006a78 <HAL_DMA_IRQHandler+0x6bc>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d013      	beq.n	8006a34 <HAL_DMA_IRQHandler+0x678>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a1a      	ldr	r2, [pc, #104]	; (8006a7c <HAL_DMA_IRQHandler+0x6c0>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d00e      	beq.n	8006a34 <HAL_DMA_IRQHandler+0x678>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a19      	ldr	r2, [pc, #100]	; (8006a80 <HAL_DMA_IRQHandler+0x6c4>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d009      	beq.n	8006a34 <HAL_DMA_IRQHandler+0x678>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a17      	ldr	r2, [pc, #92]	; (8006a84 <HAL_DMA_IRQHandler+0x6c8>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d004      	beq.n	8006a34 <HAL_DMA_IRQHandler+0x678>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a16      	ldr	r2, [pc, #88]	; (8006a88 <HAL_DMA_IRQHandler+0x6cc>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d12b      	bne.n	8006a8c <HAL_DMA_IRQHandler+0x6d0>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0310 	and.w	r3, r3, #16
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	bf14      	ite	ne
 8006a42:	2301      	movne	r3, #1
 8006a44:	2300      	moveq	r3, #0
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	e02a      	b.n	8006aa0 <HAL_DMA_IRQHandler+0x6e4>
 8006a4a:	bf00      	nop
 8006a4c:	40020010 	.word	0x40020010
 8006a50:	40020028 	.word	0x40020028
 8006a54:	40020040 	.word	0x40020040
 8006a58:	40020058 	.word	0x40020058
 8006a5c:	40020070 	.word	0x40020070
 8006a60:	40020088 	.word	0x40020088
 8006a64:	400200a0 	.word	0x400200a0
 8006a68:	400200b8 	.word	0x400200b8
 8006a6c:	40020410 	.word	0x40020410
 8006a70:	40020428 	.word	0x40020428
 8006a74:	40020440 	.word	0x40020440
 8006a78:	40020458 	.word	0x40020458
 8006a7c:	40020470 	.word	0x40020470
 8006a80:	40020488 	.word	0x40020488
 8006a84:	400204a0 	.word	0x400204a0
 8006a88:	400204b8 	.word	0x400204b8
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 0302 	and.w	r3, r3, #2
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	bf14      	ite	ne
 8006a9a:	2301      	movne	r3, #1
 8006a9c:	2300      	moveq	r3, #0
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f000 8087 	beq.w	8006bb4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aaa:	f003 031f 	and.w	r3, r3, #31
 8006aae:	2220      	movs	r2, #32
 8006ab0:	409a      	lsls	r2, r3
 8006ab2:	6a3b      	ldr	r3, [r7, #32]
 8006ab4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b04      	cmp	r3, #4
 8006ac0:	d139      	bne.n	8006b36 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f022 0216 	bic.w	r2, r2, #22
 8006ad0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	695a      	ldr	r2, [r3, #20]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ae0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d103      	bne.n	8006af2 <HAL_DMA_IRQHandler+0x736>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d007      	beq.n	8006b02 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f022 0208 	bic.w	r2, r2, #8
 8006b00:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b06:	f003 031f 	and.w	r3, r3, #31
 8006b0a:	223f      	movs	r2, #63	; 0x3f
 8006b0c:	409a      	lsls	r2, r3
 8006b0e:	6a3b      	ldr	r3, [r7, #32]
 8006b10:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2201      	movs	r2, #1
 8006b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f000 834a 	beq.w	80071c0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	4798      	blx	r3
          }
          return;
 8006b34:	e344      	b.n	80071c0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d018      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d108      	bne.n	8006b64 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d02c      	beq.n	8006bb4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	4798      	blx	r3
 8006b62:	e027      	b.n	8006bb4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d023      	beq.n	8006bb4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	4798      	blx	r3
 8006b74:	e01e      	b.n	8006bb4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d10f      	bne.n	8006ba4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 0210 	bic.w	r2, r2, #16
 8006b92:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d003      	beq.n	8006bb4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f000 8306 	beq.w	80071ca <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc2:	f003 0301 	and.w	r3, r3, #1
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	f000 8088 	beq.w	8006cdc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2204      	movs	r2, #4
 8006bd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a7a      	ldr	r2, [pc, #488]	; (8006dc4 <HAL_DMA_IRQHandler+0xa08>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d04a      	beq.n	8006c74 <HAL_DMA_IRQHandler+0x8b8>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a79      	ldr	r2, [pc, #484]	; (8006dc8 <HAL_DMA_IRQHandler+0xa0c>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d045      	beq.n	8006c74 <HAL_DMA_IRQHandler+0x8b8>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a77      	ldr	r2, [pc, #476]	; (8006dcc <HAL_DMA_IRQHandler+0xa10>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d040      	beq.n	8006c74 <HAL_DMA_IRQHandler+0x8b8>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a76      	ldr	r2, [pc, #472]	; (8006dd0 <HAL_DMA_IRQHandler+0xa14>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d03b      	beq.n	8006c74 <HAL_DMA_IRQHandler+0x8b8>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a74      	ldr	r2, [pc, #464]	; (8006dd4 <HAL_DMA_IRQHandler+0xa18>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d036      	beq.n	8006c74 <HAL_DMA_IRQHandler+0x8b8>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a73      	ldr	r2, [pc, #460]	; (8006dd8 <HAL_DMA_IRQHandler+0xa1c>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d031      	beq.n	8006c74 <HAL_DMA_IRQHandler+0x8b8>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a71      	ldr	r2, [pc, #452]	; (8006ddc <HAL_DMA_IRQHandler+0xa20>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d02c      	beq.n	8006c74 <HAL_DMA_IRQHandler+0x8b8>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a70      	ldr	r2, [pc, #448]	; (8006de0 <HAL_DMA_IRQHandler+0xa24>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d027      	beq.n	8006c74 <HAL_DMA_IRQHandler+0x8b8>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a6e      	ldr	r2, [pc, #440]	; (8006de4 <HAL_DMA_IRQHandler+0xa28>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d022      	beq.n	8006c74 <HAL_DMA_IRQHandler+0x8b8>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a6d      	ldr	r2, [pc, #436]	; (8006de8 <HAL_DMA_IRQHandler+0xa2c>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d01d      	beq.n	8006c74 <HAL_DMA_IRQHandler+0x8b8>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a6b      	ldr	r2, [pc, #428]	; (8006dec <HAL_DMA_IRQHandler+0xa30>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d018      	beq.n	8006c74 <HAL_DMA_IRQHandler+0x8b8>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a6a      	ldr	r2, [pc, #424]	; (8006df0 <HAL_DMA_IRQHandler+0xa34>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d013      	beq.n	8006c74 <HAL_DMA_IRQHandler+0x8b8>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a68      	ldr	r2, [pc, #416]	; (8006df4 <HAL_DMA_IRQHandler+0xa38>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d00e      	beq.n	8006c74 <HAL_DMA_IRQHandler+0x8b8>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a67      	ldr	r2, [pc, #412]	; (8006df8 <HAL_DMA_IRQHandler+0xa3c>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d009      	beq.n	8006c74 <HAL_DMA_IRQHandler+0x8b8>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a65      	ldr	r2, [pc, #404]	; (8006dfc <HAL_DMA_IRQHandler+0xa40>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d004      	beq.n	8006c74 <HAL_DMA_IRQHandler+0x8b8>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a64      	ldr	r2, [pc, #400]	; (8006e00 <HAL_DMA_IRQHandler+0xa44>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d108      	bne.n	8006c86 <HAL_DMA_IRQHandler+0x8ca>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f022 0201 	bic.w	r2, r2, #1
 8006c82:	601a      	str	r2, [r3, #0]
 8006c84:	e007      	b.n	8006c96 <HAL_DMA_IRQHandler+0x8da>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f022 0201 	bic.w	r2, r2, #1
 8006c94:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	60fb      	str	r3, [r7, #12]
 8006c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d307      	bcc.n	8006cb2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0301 	and.w	r3, r3, #1
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1f2      	bne.n	8006c96 <HAL_DMA_IRQHandler+0x8da>
 8006cb0:	e000      	b.n	8006cb4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006cb2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 0301 	and.w	r3, r3, #1
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d004      	beq.n	8006ccc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2203      	movs	r2, #3
 8006cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006cca:	e003      	b.n	8006cd4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f000 8272 	beq.w	80071ca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	4798      	blx	r3
 8006cee:	e26c      	b.n	80071ca <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a43      	ldr	r2, [pc, #268]	; (8006e04 <HAL_DMA_IRQHandler+0xa48>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d022      	beq.n	8006d40 <HAL_DMA_IRQHandler+0x984>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a42      	ldr	r2, [pc, #264]	; (8006e08 <HAL_DMA_IRQHandler+0xa4c>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d01d      	beq.n	8006d40 <HAL_DMA_IRQHandler+0x984>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a40      	ldr	r2, [pc, #256]	; (8006e0c <HAL_DMA_IRQHandler+0xa50>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d018      	beq.n	8006d40 <HAL_DMA_IRQHandler+0x984>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a3f      	ldr	r2, [pc, #252]	; (8006e10 <HAL_DMA_IRQHandler+0xa54>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d013      	beq.n	8006d40 <HAL_DMA_IRQHandler+0x984>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a3d      	ldr	r2, [pc, #244]	; (8006e14 <HAL_DMA_IRQHandler+0xa58>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d00e      	beq.n	8006d40 <HAL_DMA_IRQHandler+0x984>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a3c      	ldr	r2, [pc, #240]	; (8006e18 <HAL_DMA_IRQHandler+0xa5c>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d009      	beq.n	8006d40 <HAL_DMA_IRQHandler+0x984>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a3a      	ldr	r2, [pc, #232]	; (8006e1c <HAL_DMA_IRQHandler+0xa60>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d004      	beq.n	8006d40 <HAL_DMA_IRQHandler+0x984>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a39      	ldr	r2, [pc, #228]	; (8006e20 <HAL_DMA_IRQHandler+0xa64>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d101      	bne.n	8006d44 <HAL_DMA_IRQHandler+0x988>
 8006d40:	2301      	movs	r3, #1
 8006d42:	e000      	b.n	8006d46 <HAL_DMA_IRQHandler+0x98a>
 8006d44:	2300      	movs	r3, #0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	f000 823f 	beq.w	80071ca <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d58:	f003 031f 	and.w	r3, r3, #31
 8006d5c:	2204      	movs	r2, #4
 8006d5e:	409a      	lsls	r2, r3
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	4013      	ands	r3, r2
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f000 80cd 	beq.w	8006f04 <HAL_DMA_IRQHandler+0xb48>
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	f003 0304 	and.w	r3, r3, #4
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f000 80c7 	beq.w	8006f04 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d7a:	f003 031f 	and.w	r3, r3, #31
 8006d7e:	2204      	movs	r2, #4
 8006d80:	409a      	lsls	r2, r3
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d049      	beq.n	8006e24 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d109      	bne.n	8006dae <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	f000 8210 	beq.w	80071c4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dac:	e20a      	b.n	80071c4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	f000 8206 	beq.w	80071c4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dc0:	e200      	b.n	80071c4 <HAL_DMA_IRQHandler+0xe08>
 8006dc2:	bf00      	nop
 8006dc4:	40020010 	.word	0x40020010
 8006dc8:	40020028 	.word	0x40020028
 8006dcc:	40020040 	.word	0x40020040
 8006dd0:	40020058 	.word	0x40020058
 8006dd4:	40020070 	.word	0x40020070
 8006dd8:	40020088 	.word	0x40020088
 8006ddc:	400200a0 	.word	0x400200a0
 8006de0:	400200b8 	.word	0x400200b8
 8006de4:	40020410 	.word	0x40020410
 8006de8:	40020428 	.word	0x40020428
 8006dec:	40020440 	.word	0x40020440
 8006df0:	40020458 	.word	0x40020458
 8006df4:	40020470 	.word	0x40020470
 8006df8:	40020488 	.word	0x40020488
 8006dfc:	400204a0 	.word	0x400204a0
 8006e00:	400204b8 	.word	0x400204b8
 8006e04:	58025408 	.word	0x58025408
 8006e08:	5802541c 	.word	0x5802541c
 8006e0c:	58025430 	.word	0x58025430
 8006e10:	58025444 	.word	0x58025444
 8006e14:	58025458 	.word	0x58025458
 8006e18:	5802546c 	.word	0x5802546c
 8006e1c:	58025480 	.word	0x58025480
 8006e20:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	f003 0320 	and.w	r3, r3, #32
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d160      	bne.n	8006ef0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a7f      	ldr	r2, [pc, #508]	; (8007030 <HAL_DMA_IRQHandler+0xc74>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d04a      	beq.n	8006ece <HAL_DMA_IRQHandler+0xb12>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a7d      	ldr	r2, [pc, #500]	; (8007034 <HAL_DMA_IRQHandler+0xc78>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d045      	beq.n	8006ece <HAL_DMA_IRQHandler+0xb12>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a7c      	ldr	r2, [pc, #496]	; (8007038 <HAL_DMA_IRQHandler+0xc7c>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d040      	beq.n	8006ece <HAL_DMA_IRQHandler+0xb12>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a7a      	ldr	r2, [pc, #488]	; (800703c <HAL_DMA_IRQHandler+0xc80>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d03b      	beq.n	8006ece <HAL_DMA_IRQHandler+0xb12>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a79      	ldr	r2, [pc, #484]	; (8007040 <HAL_DMA_IRQHandler+0xc84>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d036      	beq.n	8006ece <HAL_DMA_IRQHandler+0xb12>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a77      	ldr	r2, [pc, #476]	; (8007044 <HAL_DMA_IRQHandler+0xc88>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d031      	beq.n	8006ece <HAL_DMA_IRQHandler+0xb12>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a76      	ldr	r2, [pc, #472]	; (8007048 <HAL_DMA_IRQHandler+0xc8c>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d02c      	beq.n	8006ece <HAL_DMA_IRQHandler+0xb12>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a74      	ldr	r2, [pc, #464]	; (800704c <HAL_DMA_IRQHandler+0xc90>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d027      	beq.n	8006ece <HAL_DMA_IRQHandler+0xb12>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a73      	ldr	r2, [pc, #460]	; (8007050 <HAL_DMA_IRQHandler+0xc94>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d022      	beq.n	8006ece <HAL_DMA_IRQHandler+0xb12>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a71      	ldr	r2, [pc, #452]	; (8007054 <HAL_DMA_IRQHandler+0xc98>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d01d      	beq.n	8006ece <HAL_DMA_IRQHandler+0xb12>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a70      	ldr	r2, [pc, #448]	; (8007058 <HAL_DMA_IRQHandler+0xc9c>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d018      	beq.n	8006ece <HAL_DMA_IRQHandler+0xb12>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a6e      	ldr	r2, [pc, #440]	; (800705c <HAL_DMA_IRQHandler+0xca0>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d013      	beq.n	8006ece <HAL_DMA_IRQHandler+0xb12>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a6d      	ldr	r2, [pc, #436]	; (8007060 <HAL_DMA_IRQHandler+0xca4>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d00e      	beq.n	8006ece <HAL_DMA_IRQHandler+0xb12>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a6b      	ldr	r2, [pc, #428]	; (8007064 <HAL_DMA_IRQHandler+0xca8>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d009      	beq.n	8006ece <HAL_DMA_IRQHandler+0xb12>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a6a      	ldr	r2, [pc, #424]	; (8007068 <HAL_DMA_IRQHandler+0xcac>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d004      	beq.n	8006ece <HAL_DMA_IRQHandler+0xb12>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a68      	ldr	r2, [pc, #416]	; (800706c <HAL_DMA_IRQHandler+0xcb0>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d108      	bne.n	8006ee0 <HAL_DMA_IRQHandler+0xb24>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f022 0208 	bic.w	r2, r2, #8
 8006edc:	601a      	str	r2, [r3, #0]
 8006ede:	e007      	b.n	8006ef0 <HAL_DMA_IRQHandler+0xb34>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f022 0204 	bic.w	r2, r2, #4
 8006eee:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f000 8165 	beq.w	80071c4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f02:	e15f      	b.n	80071c4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f08:	f003 031f 	and.w	r3, r3, #31
 8006f0c:	2202      	movs	r2, #2
 8006f0e:	409a      	lsls	r2, r3
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	4013      	ands	r3, r2
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	f000 80c5 	beq.w	80070a4 <HAL_DMA_IRQHandler+0xce8>
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	f003 0302 	and.w	r3, r3, #2
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	f000 80bf 	beq.w	80070a4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f2a:	f003 031f 	and.w	r3, r3, #31
 8006f2e:	2202      	movs	r2, #2
 8006f30:	409a      	lsls	r2, r3
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d018      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d109      	bne.n	8006f5e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	f000 813a 	beq.w	80071c8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f5c:	e134      	b.n	80071c8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	f000 8130 	beq.w	80071c8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f70:	e12a      	b.n	80071c8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	f003 0320 	and.w	r3, r3, #32
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f040 8089 	bne.w	8007090 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a2b      	ldr	r2, [pc, #172]	; (8007030 <HAL_DMA_IRQHandler+0xc74>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d04a      	beq.n	800701e <HAL_DMA_IRQHandler+0xc62>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a29      	ldr	r2, [pc, #164]	; (8007034 <HAL_DMA_IRQHandler+0xc78>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d045      	beq.n	800701e <HAL_DMA_IRQHandler+0xc62>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a28      	ldr	r2, [pc, #160]	; (8007038 <HAL_DMA_IRQHandler+0xc7c>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d040      	beq.n	800701e <HAL_DMA_IRQHandler+0xc62>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a26      	ldr	r2, [pc, #152]	; (800703c <HAL_DMA_IRQHandler+0xc80>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d03b      	beq.n	800701e <HAL_DMA_IRQHandler+0xc62>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a25      	ldr	r2, [pc, #148]	; (8007040 <HAL_DMA_IRQHandler+0xc84>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d036      	beq.n	800701e <HAL_DMA_IRQHandler+0xc62>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a23      	ldr	r2, [pc, #140]	; (8007044 <HAL_DMA_IRQHandler+0xc88>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d031      	beq.n	800701e <HAL_DMA_IRQHandler+0xc62>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a22      	ldr	r2, [pc, #136]	; (8007048 <HAL_DMA_IRQHandler+0xc8c>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d02c      	beq.n	800701e <HAL_DMA_IRQHandler+0xc62>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a20      	ldr	r2, [pc, #128]	; (800704c <HAL_DMA_IRQHandler+0xc90>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d027      	beq.n	800701e <HAL_DMA_IRQHandler+0xc62>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a1f      	ldr	r2, [pc, #124]	; (8007050 <HAL_DMA_IRQHandler+0xc94>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d022      	beq.n	800701e <HAL_DMA_IRQHandler+0xc62>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a1d      	ldr	r2, [pc, #116]	; (8007054 <HAL_DMA_IRQHandler+0xc98>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d01d      	beq.n	800701e <HAL_DMA_IRQHandler+0xc62>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a1c      	ldr	r2, [pc, #112]	; (8007058 <HAL_DMA_IRQHandler+0xc9c>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d018      	beq.n	800701e <HAL_DMA_IRQHandler+0xc62>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a1a      	ldr	r2, [pc, #104]	; (800705c <HAL_DMA_IRQHandler+0xca0>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d013      	beq.n	800701e <HAL_DMA_IRQHandler+0xc62>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a19      	ldr	r2, [pc, #100]	; (8007060 <HAL_DMA_IRQHandler+0xca4>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d00e      	beq.n	800701e <HAL_DMA_IRQHandler+0xc62>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a17      	ldr	r2, [pc, #92]	; (8007064 <HAL_DMA_IRQHandler+0xca8>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d009      	beq.n	800701e <HAL_DMA_IRQHandler+0xc62>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a16      	ldr	r2, [pc, #88]	; (8007068 <HAL_DMA_IRQHandler+0xcac>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d004      	beq.n	800701e <HAL_DMA_IRQHandler+0xc62>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a14      	ldr	r2, [pc, #80]	; (800706c <HAL_DMA_IRQHandler+0xcb0>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d128      	bne.n	8007070 <HAL_DMA_IRQHandler+0xcb4>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f022 0214 	bic.w	r2, r2, #20
 800702c:	601a      	str	r2, [r3, #0]
 800702e:	e027      	b.n	8007080 <HAL_DMA_IRQHandler+0xcc4>
 8007030:	40020010 	.word	0x40020010
 8007034:	40020028 	.word	0x40020028
 8007038:	40020040 	.word	0x40020040
 800703c:	40020058 	.word	0x40020058
 8007040:	40020070 	.word	0x40020070
 8007044:	40020088 	.word	0x40020088
 8007048:	400200a0 	.word	0x400200a0
 800704c:	400200b8 	.word	0x400200b8
 8007050:	40020410 	.word	0x40020410
 8007054:	40020428 	.word	0x40020428
 8007058:	40020440 	.word	0x40020440
 800705c:	40020458 	.word	0x40020458
 8007060:	40020470 	.word	0x40020470
 8007064:	40020488 	.word	0x40020488
 8007068:	400204a0 	.word	0x400204a0
 800706c:	400204b8 	.word	0x400204b8
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f022 020a 	bic.w	r2, r2, #10
 800707e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007094:	2b00      	cmp	r3, #0
 8007096:	f000 8097 	beq.w	80071c8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070a2:	e091      	b.n	80071c8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070a8:	f003 031f 	and.w	r3, r3, #31
 80070ac:	2208      	movs	r2, #8
 80070ae:	409a      	lsls	r2, r3
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	4013      	ands	r3, r2
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f000 8088 	beq.w	80071ca <HAL_DMA_IRQHandler+0xe0e>
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	f003 0308 	and.w	r3, r3, #8
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f000 8082 	beq.w	80071ca <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a41      	ldr	r2, [pc, #260]	; (80071d0 <HAL_DMA_IRQHandler+0xe14>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d04a      	beq.n	8007166 <HAL_DMA_IRQHandler+0xdaa>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a3f      	ldr	r2, [pc, #252]	; (80071d4 <HAL_DMA_IRQHandler+0xe18>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d045      	beq.n	8007166 <HAL_DMA_IRQHandler+0xdaa>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a3e      	ldr	r2, [pc, #248]	; (80071d8 <HAL_DMA_IRQHandler+0xe1c>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d040      	beq.n	8007166 <HAL_DMA_IRQHandler+0xdaa>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a3c      	ldr	r2, [pc, #240]	; (80071dc <HAL_DMA_IRQHandler+0xe20>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d03b      	beq.n	8007166 <HAL_DMA_IRQHandler+0xdaa>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a3b      	ldr	r2, [pc, #236]	; (80071e0 <HAL_DMA_IRQHandler+0xe24>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d036      	beq.n	8007166 <HAL_DMA_IRQHandler+0xdaa>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a39      	ldr	r2, [pc, #228]	; (80071e4 <HAL_DMA_IRQHandler+0xe28>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d031      	beq.n	8007166 <HAL_DMA_IRQHandler+0xdaa>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a38      	ldr	r2, [pc, #224]	; (80071e8 <HAL_DMA_IRQHandler+0xe2c>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d02c      	beq.n	8007166 <HAL_DMA_IRQHandler+0xdaa>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a36      	ldr	r2, [pc, #216]	; (80071ec <HAL_DMA_IRQHandler+0xe30>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d027      	beq.n	8007166 <HAL_DMA_IRQHandler+0xdaa>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a35      	ldr	r2, [pc, #212]	; (80071f0 <HAL_DMA_IRQHandler+0xe34>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d022      	beq.n	8007166 <HAL_DMA_IRQHandler+0xdaa>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a33      	ldr	r2, [pc, #204]	; (80071f4 <HAL_DMA_IRQHandler+0xe38>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d01d      	beq.n	8007166 <HAL_DMA_IRQHandler+0xdaa>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a32      	ldr	r2, [pc, #200]	; (80071f8 <HAL_DMA_IRQHandler+0xe3c>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d018      	beq.n	8007166 <HAL_DMA_IRQHandler+0xdaa>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a30      	ldr	r2, [pc, #192]	; (80071fc <HAL_DMA_IRQHandler+0xe40>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d013      	beq.n	8007166 <HAL_DMA_IRQHandler+0xdaa>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a2f      	ldr	r2, [pc, #188]	; (8007200 <HAL_DMA_IRQHandler+0xe44>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d00e      	beq.n	8007166 <HAL_DMA_IRQHandler+0xdaa>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a2d      	ldr	r2, [pc, #180]	; (8007204 <HAL_DMA_IRQHandler+0xe48>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d009      	beq.n	8007166 <HAL_DMA_IRQHandler+0xdaa>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a2c      	ldr	r2, [pc, #176]	; (8007208 <HAL_DMA_IRQHandler+0xe4c>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d004      	beq.n	8007166 <HAL_DMA_IRQHandler+0xdaa>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a2a      	ldr	r2, [pc, #168]	; (800720c <HAL_DMA_IRQHandler+0xe50>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d108      	bne.n	8007178 <HAL_DMA_IRQHandler+0xdbc>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f022 021c 	bic.w	r2, r2, #28
 8007174:	601a      	str	r2, [r3, #0]
 8007176:	e007      	b.n	8007188 <HAL_DMA_IRQHandler+0xdcc>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f022 020e 	bic.w	r2, r2, #14
 8007186:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800718c:	f003 031f 	and.w	r3, r3, #31
 8007190:	2201      	movs	r2, #1
 8007192:	409a      	lsls	r2, r3
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d009      	beq.n	80071ca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	4798      	blx	r3
 80071be:	e004      	b.n	80071ca <HAL_DMA_IRQHandler+0xe0e>
          return;
 80071c0:	bf00      	nop
 80071c2:	e002      	b.n	80071ca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071c4:	bf00      	nop
 80071c6:	e000      	b.n	80071ca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071c8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80071ca:	3728      	adds	r7, #40	; 0x28
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	40020010 	.word	0x40020010
 80071d4:	40020028 	.word	0x40020028
 80071d8:	40020040 	.word	0x40020040
 80071dc:	40020058 	.word	0x40020058
 80071e0:	40020070 	.word	0x40020070
 80071e4:	40020088 	.word	0x40020088
 80071e8:	400200a0 	.word	0x400200a0
 80071ec:	400200b8 	.word	0x400200b8
 80071f0:	40020410 	.word	0x40020410
 80071f4:	40020428 	.word	0x40020428
 80071f8:	40020440 	.word	0x40020440
 80071fc:	40020458 	.word	0x40020458
 8007200:	40020470 	.word	0x40020470
 8007204:	40020488 	.word	0x40020488
 8007208:	400204a0 	.word	0x400204a0
 800720c:	400204b8 	.word	0x400204b8

08007210 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007210:	b480      	push	{r7}
 8007212:	b087      	sub	sp, #28
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	607a      	str	r2, [r7, #4]
 800721c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007222:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007228:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a7f      	ldr	r2, [pc, #508]	; (800742c <DMA_SetConfig+0x21c>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d072      	beq.n	800731a <DMA_SetConfig+0x10a>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a7d      	ldr	r2, [pc, #500]	; (8007430 <DMA_SetConfig+0x220>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d06d      	beq.n	800731a <DMA_SetConfig+0x10a>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a7c      	ldr	r2, [pc, #496]	; (8007434 <DMA_SetConfig+0x224>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d068      	beq.n	800731a <DMA_SetConfig+0x10a>
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a7a      	ldr	r2, [pc, #488]	; (8007438 <DMA_SetConfig+0x228>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d063      	beq.n	800731a <DMA_SetConfig+0x10a>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a79      	ldr	r2, [pc, #484]	; (800743c <DMA_SetConfig+0x22c>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d05e      	beq.n	800731a <DMA_SetConfig+0x10a>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a77      	ldr	r2, [pc, #476]	; (8007440 <DMA_SetConfig+0x230>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d059      	beq.n	800731a <DMA_SetConfig+0x10a>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a76      	ldr	r2, [pc, #472]	; (8007444 <DMA_SetConfig+0x234>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d054      	beq.n	800731a <DMA_SetConfig+0x10a>
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a74      	ldr	r2, [pc, #464]	; (8007448 <DMA_SetConfig+0x238>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d04f      	beq.n	800731a <DMA_SetConfig+0x10a>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a73      	ldr	r2, [pc, #460]	; (800744c <DMA_SetConfig+0x23c>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d04a      	beq.n	800731a <DMA_SetConfig+0x10a>
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a71      	ldr	r2, [pc, #452]	; (8007450 <DMA_SetConfig+0x240>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d045      	beq.n	800731a <DMA_SetConfig+0x10a>
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a70      	ldr	r2, [pc, #448]	; (8007454 <DMA_SetConfig+0x244>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d040      	beq.n	800731a <DMA_SetConfig+0x10a>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a6e      	ldr	r2, [pc, #440]	; (8007458 <DMA_SetConfig+0x248>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d03b      	beq.n	800731a <DMA_SetConfig+0x10a>
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a6d      	ldr	r2, [pc, #436]	; (800745c <DMA_SetConfig+0x24c>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d036      	beq.n	800731a <DMA_SetConfig+0x10a>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a6b      	ldr	r2, [pc, #428]	; (8007460 <DMA_SetConfig+0x250>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d031      	beq.n	800731a <DMA_SetConfig+0x10a>
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a6a      	ldr	r2, [pc, #424]	; (8007464 <DMA_SetConfig+0x254>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d02c      	beq.n	800731a <DMA_SetConfig+0x10a>
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a68      	ldr	r2, [pc, #416]	; (8007468 <DMA_SetConfig+0x258>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d027      	beq.n	800731a <DMA_SetConfig+0x10a>
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a67      	ldr	r2, [pc, #412]	; (800746c <DMA_SetConfig+0x25c>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d022      	beq.n	800731a <DMA_SetConfig+0x10a>
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a65      	ldr	r2, [pc, #404]	; (8007470 <DMA_SetConfig+0x260>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d01d      	beq.n	800731a <DMA_SetConfig+0x10a>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a64      	ldr	r2, [pc, #400]	; (8007474 <DMA_SetConfig+0x264>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d018      	beq.n	800731a <DMA_SetConfig+0x10a>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a62      	ldr	r2, [pc, #392]	; (8007478 <DMA_SetConfig+0x268>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d013      	beq.n	800731a <DMA_SetConfig+0x10a>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a61      	ldr	r2, [pc, #388]	; (800747c <DMA_SetConfig+0x26c>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d00e      	beq.n	800731a <DMA_SetConfig+0x10a>
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a5f      	ldr	r2, [pc, #380]	; (8007480 <DMA_SetConfig+0x270>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d009      	beq.n	800731a <DMA_SetConfig+0x10a>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a5e      	ldr	r2, [pc, #376]	; (8007484 <DMA_SetConfig+0x274>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d004      	beq.n	800731a <DMA_SetConfig+0x10a>
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a5c      	ldr	r2, [pc, #368]	; (8007488 <DMA_SetConfig+0x278>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d101      	bne.n	800731e <DMA_SetConfig+0x10e>
 800731a:	2301      	movs	r3, #1
 800731c:	e000      	b.n	8007320 <DMA_SetConfig+0x110>
 800731e:	2300      	movs	r3, #0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d00d      	beq.n	8007340 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800732c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007332:	2b00      	cmp	r3, #0
 8007334:	d004      	beq.n	8007340 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800733e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a39      	ldr	r2, [pc, #228]	; (800742c <DMA_SetConfig+0x21c>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d04a      	beq.n	80073e0 <DMA_SetConfig+0x1d0>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a38      	ldr	r2, [pc, #224]	; (8007430 <DMA_SetConfig+0x220>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d045      	beq.n	80073e0 <DMA_SetConfig+0x1d0>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a36      	ldr	r2, [pc, #216]	; (8007434 <DMA_SetConfig+0x224>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d040      	beq.n	80073e0 <DMA_SetConfig+0x1d0>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a35      	ldr	r2, [pc, #212]	; (8007438 <DMA_SetConfig+0x228>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d03b      	beq.n	80073e0 <DMA_SetConfig+0x1d0>
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a33      	ldr	r2, [pc, #204]	; (800743c <DMA_SetConfig+0x22c>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d036      	beq.n	80073e0 <DMA_SetConfig+0x1d0>
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a32      	ldr	r2, [pc, #200]	; (8007440 <DMA_SetConfig+0x230>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d031      	beq.n	80073e0 <DMA_SetConfig+0x1d0>
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a30      	ldr	r2, [pc, #192]	; (8007444 <DMA_SetConfig+0x234>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d02c      	beq.n	80073e0 <DMA_SetConfig+0x1d0>
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a2f      	ldr	r2, [pc, #188]	; (8007448 <DMA_SetConfig+0x238>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d027      	beq.n	80073e0 <DMA_SetConfig+0x1d0>
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a2d      	ldr	r2, [pc, #180]	; (800744c <DMA_SetConfig+0x23c>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d022      	beq.n	80073e0 <DMA_SetConfig+0x1d0>
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a2c      	ldr	r2, [pc, #176]	; (8007450 <DMA_SetConfig+0x240>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d01d      	beq.n	80073e0 <DMA_SetConfig+0x1d0>
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a2a      	ldr	r2, [pc, #168]	; (8007454 <DMA_SetConfig+0x244>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d018      	beq.n	80073e0 <DMA_SetConfig+0x1d0>
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a29      	ldr	r2, [pc, #164]	; (8007458 <DMA_SetConfig+0x248>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d013      	beq.n	80073e0 <DMA_SetConfig+0x1d0>
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a27      	ldr	r2, [pc, #156]	; (800745c <DMA_SetConfig+0x24c>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d00e      	beq.n	80073e0 <DMA_SetConfig+0x1d0>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a26      	ldr	r2, [pc, #152]	; (8007460 <DMA_SetConfig+0x250>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d009      	beq.n	80073e0 <DMA_SetConfig+0x1d0>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a24      	ldr	r2, [pc, #144]	; (8007464 <DMA_SetConfig+0x254>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d004      	beq.n	80073e0 <DMA_SetConfig+0x1d0>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a23      	ldr	r2, [pc, #140]	; (8007468 <DMA_SetConfig+0x258>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d101      	bne.n	80073e4 <DMA_SetConfig+0x1d4>
 80073e0:	2301      	movs	r3, #1
 80073e2:	e000      	b.n	80073e6 <DMA_SetConfig+0x1d6>
 80073e4:	2300      	movs	r3, #0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d059      	beq.n	800749e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073ee:	f003 031f 	and.w	r3, r3, #31
 80073f2:	223f      	movs	r2, #63	; 0x3f
 80073f4:	409a      	lsls	r2, r3
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007408:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	683a      	ldr	r2, [r7, #0]
 8007410:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	2b40      	cmp	r3, #64	; 0x40
 8007418:	d138      	bne.n	800748c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800742a:	e086      	b.n	800753a <DMA_SetConfig+0x32a>
 800742c:	40020010 	.word	0x40020010
 8007430:	40020028 	.word	0x40020028
 8007434:	40020040 	.word	0x40020040
 8007438:	40020058 	.word	0x40020058
 800743c:	40020070 	.word	0x40020070
 8007440:	40020088 	.word	0x40020088
 8007444:	400200a0 	.word	0x400200a0
 8007448:	400200b8 	.word	0x400200b8
 800744c:	40020410 	.word	0x40020410
 8007450:	40020428 	.word	0x40020428
 8007454:	40020440 	.word	0x40020440
 8007458:	40020458 	.word	0x40020458
 800745c:	40020470 	.word	0x40020470
 8007460:	40020488 	.word	0x40020488
 8007464:	400204a0 	.word	0x400204a0
 8007468:	400204b8 	.word	0x400204b8
 800746c:	58025408 	.word	0x58025408
 8007470:	5802541c 	.word	0x5802541c
 8007474:	58025430 	.word	0x58025430
 8007478:	58025444 	.word	0x58025444
 800747c:	58025458 	.word	0x58025458
 8007480:	5802546c 	.word	0x5802546c
 8007484:	58025480 	.word	0x58025480
 8007488:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	68ba      	ldr	r2, [r7, #8]
 8007492:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	60da      	str	r2, [r3, #12]
}
 800749c:	e04d      	b.n	800753a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a29      	ldr	r2, [pc, #164]	; (8007548 <DMA_SetConfig+0x338>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d022      	beq.n	80074ee <DMA_SetConfig+0x2de>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a27      	ldr	r2, [pc, #156]	; (800754c <DMA_SetConfig+0x33c>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d01d      	beq.n	80074ee <DMA_SetConfig+0x2de>
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a26      	ldr	r2, [pc, #152]	; (8007550 <DMA_SetConfig+0x340>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d018      	beq.n	80074ee <DMA_SetConfig+0x2de>
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a24      	ldr	r2, [pc, #144]	; (8007554 <DMA_SetConfig+0x344>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d013      	beq.n	80074ee <DMA_SetConfig+0x2de>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a23      	ldr	r2, [pc, #140]	; (8007558 <DMA_SetConfig+0x348>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d00e      	beq.n	80074ee <DMA_SetConfig+0x2de>
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a21      	ldr	r2, [pc, #132]	; (800755c <DMA_SetConfig+0x34c>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d009      	beq.n	80074ee <DMA_SetConfig+0x2de>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a20      	ldr	r2, [pc, #128]	; (8007560 <DMA_SetConfig+0x350>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d004      	beq.n	80074ee <DMA_SetConfig+0x2de>
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a1e      	ldr	r2, [pc, #120]	; (8007564 <DMA_SetConfig+0x354>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d101      	bne.n	80074f2 <DMA_SetConfig+0x2e2>
 80074ee:	2301      	movs	r3, #1
 80074f0:	e000      	b.n	80074f4 <DMA_SetConfig+0x2e4>
 80074f2:	2300      	movs	r3, #0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d020      	beq.n	800753a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074fc:	f003 031f 	and.w	r3, r3, #31
 8007500:	2201      	movs	r2, #1
 8007502:	409a      	lsls	r2, r3
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	683a      	ldr	r2, [r7, #0]
 800750e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	2b40      	cmp	r3, #64	; 0x40
 8007516:	d108      	bne.n	800752a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68ba      	ldr	r2, [r7, #8]
 8007526:	60da      	str	r2, [r3, #12]
}
 8007528:	e007      	b.n	800753a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	68ba      	ldr	r2, [r7, #8]
 8007530:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	60da      	str	r2, [r3, #12]
}
 800753a:	bf00      	nop
 800753c:	371c      	adds	r7, #28
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	58025408 	.word	0x58025408
 800754c:	5802541c 	.word	0x5802541c
 8007550:	58025430 	.word	0x58025430
 8007554:	58025444 	.word	0x58025444
 8007558:	58025458 	.word	0x58025458
 800755c:	5802546c 	.word	0x5802546c
 8007560:	58025480 	.word	0x58025480
 8007564:	58025494 	.word	0x58025494

08007568 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a42      	ldr	r2, [pc, #264]	; (8007680 <DMA_CalcBaseAndBitshift+0x118>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d04a      	beq.n	8007610 <DMA_CalcBaseAndBitshift+0xa8>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a41      	ldr	r2, [pc, #260]	; (8007684 <DMA_CalcBaseAndBitshift+0x11c>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d045      	beq.n	8007610 <DMA_CalcBaseAndBitshift+0xa8>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a3f      	ldr	r2, [pc, #252]	; (8007688 <DMA_CalcBaseAndBitshift+0x120>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d040      	beq.n	8007610 <DMA_CalcBaseAndBitshift+0xa8>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a3e      	ldr	r2, [pc, #248]	; (800768c <DMA_CalcBaseAndBitshift+0x124>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d03b      	beq.n	8007610 <DMA_CalcBaseAndBitshift+0xa8>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a3c      	ldr	r2, [pc, #240]	; (8007690 <DMA_CalcBaseAndBitshift+0x128>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d036      	beq.n	8007610 <DMA_CalcBaseAndBitshift+0xa8>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a3b      	ldr	r2, [pc, #236]	; (8007694 <DMA_CalcBaseAndBitshift+0x12c>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d031      	beq.n	8007610 <DMA_CalcBaseAndBitshift+0xa8>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a39      	ldr	r2, [pc, #228]	; (8007698 <DMA_CalcBaseAndBitshift+0x130>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d02c      	beq.n	8007610 <DMA_CalcBaseAndBitshift+0xa8>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a38      	ldr	r2, [pc, #224]	; (800769c <DMA_CalcBaseAndBitshift+0x134>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d027      	beq.n	8007610 <DMA_CalcBaseAndBitshift+0xa8>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a36      	ldr	r2, [pc, #216]	; (80076a0 <DMA_CalcBaseAndBitshift+0x138>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d022      	beq.n	8007610 <DMA_CalcBaseAndBitshift+0xa8>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a35      	ldr	r2, [pc, #212]	; (80076a4 <DMA_CalcBaseAndBitshift+0x13c>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d01d      	beq.n	8007610 <DMA_CalcBaseAndBitshift+0xa8>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a33      	ldr	r2, [pc, #204]	; (80076a8 <DMA_CalcBaseAndBitshift+0x140>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d018      	beq.n	8007610 <DMA_CalcBaseAndBitshift+0xa8>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a32      	ldr	r2, [pc, #200]	; (80076ac <DMA_CalcBaseAndBitshift+0x144>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d013      	beq.n	8007610 <DMA_CalcBaseAndBitshift+0xa8>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a30      	ldr	r2, [pc, #192]	; (80076b0 <DMA_CalcBaseAndBitshift+0x148>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d00e      	beq.n	8007610 <DMA_CalcBaseAndBitshift+0xa8>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a2f      	ldr	r2, [pc, #188]	; (80076b4 <DMA_CalcBaseAndBitshift+0x14c>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d009      	beq.n	8007610 <DMA_CalcBaseAndBitshift+0xa8>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a2d      	ldr	r2, [pc, #180]	; (80076b8 <DMA_CalcBaseAndBitshift+0x150>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d004      	beq.n	8007610 <DMA_CalcBaseAndBitshift+0xa8>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a2c      	ldr	r2, [pc, #176]	; (80076bc <DMA_CalcBaseAndBitshift+0x154>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d101      	bne.n	8007614 <DMA_CalcBaseAndBitshift+0xac>
 8007610:	2301      	movs	r3, #1
 8007612:	e000      	b.n	8007616 <DMA_CalcBaseAndBitshift+0xae>
 8007614:	2300      	movs	r3, #0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d024      	beq.n	8007664 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	b2db      	uxtb	r3, r3
 8007620:	3b10      	subs	r3, #16
 8007622:	4a27      	ldr	r2, [pc, #156]	; (80076c0 <DMA_CalcBaseAndBitshift+0x158>)
 8007624:	fba2 2303 	umull	r2, r3, r2, r3
 8007628:	091b      	lsrs	r3, r3, #4
 800762a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f003 0307 	and.w	r3, r3, #7
 8007632:	4a24      	ldr	r2, [pc, #144]	; (80076c4 <DMA_CalcBaseAndBitshift+0x15c>)
 8007634:	5cd3      	ldrb	r3, [r2, r3]
 8007636:	461a      	mov	r2, r3
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2b03      	cmp	r3, #3
 8007640:	d908      	bls.n	8007654 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	461a      	mov	r2, r3
 8007648:	4b1f      	ldr	r3, [pc, #124]	; (80076c8 <DMA_CalcBaseAndBitshift+0x160>)
 800764a:	4013      	ands	r3, r2
 800764c:	1d1a      	adds	r2, r3, #4
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	659a      	str	r2, [r3, #88]	; 0x58
 8007652:	e00d      	b.n	8007670 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	461a      	mov	r2, r3
 800765a:	4b1b      	ldr	r3, [pc, #108]	; (80076c8 <DMA_CalcBaseAndBitshift+0x160>)
 800765c:	4013      	ands	r3, r2
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	6593      	str	r3, [r2, #88]	; 0x58
 8007662:	e005      	b.n	8007670 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007674:	4618      	mov	r0, r3
 8007676:	3714      	adds	r7, #20
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr
 8007680:	40020010 	.word	0x40020010
 8007684:	40020028 	.word	0x40020028
 8007688:	40020040 	.word	0x40020040
 800768c:	40020058 	.word	0x40020058
 8007690:	40020070 	.word	0x40020070
 8007694:	40020088 	.word	0x40020088
 8007698:	400200a0 	.word	0x400200a0
 800769c:	400200b8 	.word	0x400200b8
 80076a0:	40020410 	.word	0x40020410
 80076a4:	40020428 	.word	0x40020428
 80076a8:	40020440 	.word	0x40020440
 80076ac:	40020458 	.word	0x40020458
 80076b0:	40020470 	.word	0x40020470
 80076b4:	40020488 	.word	0x40020488
 80076b8:	400204a0 	.word	0x400204a0
 80076bc:	400204b8 	.word	0x400204b8
 80076c0:	aaaaaaab 	.word	0xaaaaaaab
 80076c4:	0801c410 	.word	0x0801c410
 80076c8:	fffffc00 	.word	0xfffffc00

080076cc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b085      	sub	sp, #20
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076d4:	2300      	movs	r3, #0
 80076d6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	699b      	ldr	r3, [r3, #24]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d120      	bne.n	8007722 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e4:	2b03      	cmp	r3, #3
 80076e6:	d858      	bhi.n	800779a <DMA_CheckFifoParam+0xce>
 80076e8:	a201      	add	r2, pc, #4	; (adr r2, 80076f0 <DMA_CheckFifoParam+0x24>)
 80076ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ee:	bf00      	nop
 80076f0:	08007701 	.word	0x08007701
 80076f4:	08007713 	.word	0x08007713
 80076f8:	08007701 	.word	0x08007701
 80076fc:	0800779b 	.word	0x0800779b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007704:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007708:	2b00      	cmp	r3, #0
 800770a:	d048      	beq.n	800779e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007710:	e045      	b.n	800779e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007716:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800771a:	d142      	bne.n	80077a2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007720:	e03f      	b.n	80077a2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800772a:	d123      	bne.n	8007774 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007730:	2b03      	cmp	r3, #3
 8007732:	d838      	bhi.n	80077a6 <DMA_CheckFifoParam+0xda>
 8007734:	a201      	add	r2, pc, #4	; (adr r2, 800773c <DMA_CheckFifoParam+0x70>)
 8007736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773a:	bf00      	nop
 800773c:	0800774d 	.word	0x0800774d
 8007740:	08007753 	.word	0x08007753
 8007744:	0800774d 	.word	0x0800774d
 8007748:	08007765 	.word	0x08007765
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	73fb      	strb	r3, [r7, #15]
        break;
 8007750:	e030      	b.n	80077b4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007756:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800775a:	2b00      	cmp	r3, #0
 800775c:	d025      	beq.n	80077aa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007762:	e022      	b.n	80077aa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007768:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800776c:	d11f      	bne.n	80077ae <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007772:	e01c      	b.n	80077ae <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007778:	2b02      	cmp	r3, #2
 800777a:	d902      	bls.n	8007782 <DMA_CheckFifoParam+0xb6>
 800777c:	2b03      	cmp	r3, #3
 800777e:	d003      	beq.n	8007788 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007780:	e018      	b.n	80077b4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	73fb      	strb	r3, [r7, #15]
        break;
 8007786:	e015      	b.n	80077b4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00e      	beq.n	80077b2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	73fb      	strb	r3, [r7, #15]
    break;
 8007798:	e00b      	b.n	80077b2 <DMA_CheckFifoParam+0xe6>
        break;
 800779a:	bf00      	nop
 800779c:	e00a      	b.n	80077b4 <DMA_CheckFifoParam+0xe8>
        break;
 800779e:	bf00      	nop
 80077a0:	e008      	b.n	80077b4 <DMA_CheckFifoParam+0xe8>
        break;
 80077a2:	bf00      	nop
 80077a4:	e006      	b.n	80077b4 <DMA_CheckFifoParam+0xe8>
        break;
 80077a6:	bf00      	nop
 80077a8:	e004      	b.n	80077b4 <DMA_CheckFifoParam+0xe8>
        break;
 80077aa:	bf00      	nop
 80077ac:	e002      	b.n	80077b4 <DMA_CheckFifoParam+0xe8>
        break;
 80077ae:	bf00      	nop
 80077b0:	e000      	b.n	80077b4 <DMA_CheckFifoParam+0xe8>
    break;
 80077b2:	bf00      	nop
    }
  }

  return status;
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3714      	adds	r7, #20
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop

080077c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a38      	ldr	r2, [pc, #224]	; (80078b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d022      	beq.n	8007822 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a36      	ldr	r2, [pc, #216]	; (80078bc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d01d      	beq.n	8007822 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a35      	ldr	r2, [pc, #212]	; (80078c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d018      	beq.n	8007822 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a33      	ldr	r2, [pc, #204]	; (80078c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d013      	beq.n	8007822 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a32      	ldr	r2, [pc, #200]	; (80078c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d00e      	beq.n	8007822 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a30      	ldr	r2, [pc, #192]	; (80078cc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d009      	beq.n	8007822 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a2f      	ldr	r2, [pc, #188]	; (80078d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d004      	beq.n	8007822 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a2d      	ldr	r2, [pc, #180]	; (80078d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d101      	bne.n	8007826 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007822:	2301      	movs	r3, #1
 8007824:	e000      	b.n	8007828 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007826:	2300      	movs	r3, #0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d01a      	beq.n	8007862 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	b2db      	uxtb	r3, r3
 8007832:	3b08      	subs	r3, #8
 8007834:	4a28      	ldr	r2, [pc, #160]	; (80078d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007836:	fba2 2303 	umull	r2, r3, r2, r3
 800783a:	091b      	lsrs	r3, r3, #4
 800783c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800783e:	68fa      	ldr	r2, [r7, #12]
 8007840:	4b26      	ldr	r3, [pc, #152]	; (80078dc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007842:	4413      	add	r3, r2
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	461a      	mov	r2, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a24      	ldr	r2, [pc, #144]	; (80078e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007850:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f003 031f 	and.w	r3, r3, #31
 8007858:	2201      	movs	r2, #1
 800785a:	409a      	lsls	r2, r3
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007860:	e024      	b.n	80078ac <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	b2db      	uxtb	r3, r3
 8007868:	3b10      	subs	r3, #16
 800786a:	4a1e      	ldr	r2, [pc, #120]	; (80078e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800786c:	fba2 2303 	umull	r2, r3, r2, r3
 8007870:	091b      	lsrs	r3, r3, #4
 8007872:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	4a1c      	ldr	r2, [pc, #112]	; (80078e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d806      	bhi.n	800788a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	4a1b      	ldr	r2, [pc, #108]	; (80078ec <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d902      	bls.n	800788a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	3308      	adds	r3, #8
 8007888:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800788a:	68fa      	ldr	r2, [r7, #12]
 800788c:	4b18      	ldr	r3, [pc, #96]	; (80078f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800788e:	4413      	add	r3, r2
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	461a      	mov	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4a16      	ldr	r2, [pc, #88]	; (80078f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800789c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f003 031f 	and.w	r3, r3, #31
 80078a4:	2201      	movs	r2, #1
 80078a6:	409a      	lsls	r2, r3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	669a      	str	r2, [r3, #104]	; 0x68
}
 80078ac:	bf00      	nop
 80078ae:	3714      	adds	r7, #20
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr
 80078b8:	58025408 	.word	0x58025408
 80078bc:	5802541c 	.word	0x5802541c
 80078c0:	58025430 	.word	0x58025430
 80078c4:	58025444 	.word	0x58025444
 80078c8:	58025458 	.word	0x58025458
 80078cc:	5802546c 	.word	0x5802546c
 80078d0:	58025480 	.word	0x58025480
 80078d4:	58025494 	.word	0x58025494
 80078d8:	cccccccd 	.word	0xcccccccd
 80078dc:	16009600 	.word	0x16009600
 80078e0:	58025880 	.word	0x58025880
 80078e4:	aaaaaaab 	.word	0xaaaaaaab
 80078e8:	400204b8 	.word	0x400204b8
 80078ec:	4002040f 	.word	0x4002040f
 80078f0:	10008200 	.word	0x10008200
 80078f4:	40020880 	.word	0x40020880

080078f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b085      	sub	sp, #20
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	b2db      	uxtb	r3, r3
 8007906:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d04a      	beq.n	80079a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2b08      	cmp	r3, #8
 8007912:	d847      	bhi.n	80079a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a25      	ldr	r2, [pc, #148]	; (80079b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d022      	beq.n	8007964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a24      	ldr	r2, [pc, #144]	; (80079b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d01d      	beq.n	8007964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a22      	ldr	r2, [pc, #136]	; (80079b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d018      	beq.n	8007964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a21      	ldr	r2, [pc, #132]	; (80079bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d013      	beq.n	8007964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a1f      	ldr	r2, [pc, #124]	; (80079c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d00e      	beq.n	8007964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a1e      	ldr	r2, [pc, #120]	; (80079c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d009      	beq.n	8007964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a1c      	ldr	r2, [pc, #112]	; (80079c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d004      	beq.n	8007964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a1b      	ldr	r2, [pc, #108]	; (80079cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d101      	bne.n	8007968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007964:	2301      	movs	r3, #1
 8007966:	e000      	b.n	800796a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007968:	2300      	movs	r3, #0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00a      	beq.n	8007984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800796e:	68fa      	ldr	r2, [r7, #12]
 8007970:	4b17      	ldr	r3, [pc, #92]	; (80079d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007972:	4413      	add	r3, r2
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	461a      	mov	r2, r3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a15      	ldr	r2, [pc, #84]	; (80079d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007980:	671a      	str	r2, [r3, #112]	; 0x70
 8007982:	e009      	b.n	8007998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	4b14      	ldr	r3, [pc, #80]	; (80079d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007988:	4413      	add	r3, r2
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	461a      	mov	r2, r3
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a11      	ldr	r2, [pc, #68]	; (80079dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007996:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	3b01      	subs	r3, #1
 800799c:	2201      	movs	r2, #1
 800799e:	409a      	lsls	r2, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80079a4:	bf00      	nop
 80079a6:	3714      	adds	r7, #20
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr
 80079b0:	58025408 	.word	0x58025408
 80079b4:	5802541c 	.word	0x5802541c
 80079b8:	58025430 	.word	0x58025430
 80079bc:	58025444 	.word	0x58025444
 80079c0:	58025458 	.word	0x58025458
 80079c4:	5802546c 	.word	0x5802546c
 80079c8:	58025480 	.word	0x58025480
 80079cc:	58025494 	.word	0x58025494
 80079d0:	1600963f 	.word	0x1600963f
 80079d4:	58025940 	.word	0x58025940
 80079d8:	1000823f 	.word	0x1000823f
 80079dc:	40020940 	.word	0x40020940

080079e0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b098      	sub	sp, #96	; 0x60
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80079e8:	4a84      	ldr	r2, [pc, #528]	; (8007bfc <HAL_FDCAN_Init+0x21c>)
 80079ea:	f107 030c 	add.w	r3, r7, #12
 80079ee:	4611      	mov	r1, r2
 80079f0:	224c      	movs	r2, #76	; 0x4c
 80079f2:	4618      	mov	r0, r3
 80079f4:	f010 fd09 	bl	801840a <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d101      	bne.n	8007a02 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	e1c6      	b.n	8007d90 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a7e      	ldr	r2, [pc, #504]	; (8007c00 <HAL_FDCAN_Init+0x220>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d106      	bne.n	8007a1a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007a14:	461a      	mov	r2, r3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d106      	bne.n	8007a34 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f7fb fa48 	bl	8002ec4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	699a      	ldr	r2, [r3, #24]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f022 0210 	bic.w	r2, r2, #16
 8007a42:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a44:	f7fc fa32 	bl	8003eac <HAL_GetTick>
 8007a48:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007a4a:	e014      	b.n	8007a76 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007a4c:	f7fc fa2e 	bl	8003eac <HAL_GetTick>
 8007a50:	4602      	mov	r2, r0
 8007a52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	2b0a      	cmp	r3, #10
 8007a58:	d90d      	bls.n	8007a76 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a60:	f043 0201 	orr.w	r2, r3, #1
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2203      	movs	r2, #3
 8007a6e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e18c      	b.n	8007d90 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	699b      	ldr	r3, [r3, #24]
 8007a7c:	f003 0308 	and.w	r3, r3, #8
 8007a80:	2b08      	cmp	r3, #8
 8007a82:	d0e3      	beq.n	8007a4c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	699a      	ldr	r2, [r3, #24]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f042 0201 	orr.w	r2, r2, #1
 8007a92:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a94:	f7fc fa0a 	bl	8003eac <HAL_GetTick>
 8007a98:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007a9a:	e014      	b.n	8007ac6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007a9c:	f7fc fa06 	bl	8003eac <HAL_GetTick>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	2b0a      	cmp	r3, #10
 8007aa8:	d90d      	bls.n	8007ac6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ab0:	f043 0201 	orr.w	r2, r3, #1
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2203      	movs	r2, #3
 8007abe:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e164      	b.n	8007d90 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	699b      	ldr	r3, [r3, #24]
 8007acc:	f003 0301 	and.w	r3, r3, #1
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d0e3      	beq.n	8007a9c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	699a      	ldr	r2, [r3, #24]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f042 0202 	orr.w	r2, r2, #2
 8007ae2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	7c1b      	ldrb	r3, [r3, #16]
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d108      	bne.n	8007afe <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	699a      	ldr	r2, [r3, #24]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007afa:	619a      	str	r2, [r3, #24]
 8007afc:	e007      	b.n	8007b0e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	699a      	ldr	r2, [r3, #24]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b0c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	7c5b      	ldrb	r3, [r3, #17]
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d108      	bne.n	8007b28 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	699a      	ldr	r2, [r3, #24]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b24:	619a      	str	r2, [r3, #24]
 8007b26:	e007      	b.n	8007b38 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	699a      	ldr	r2, [r3, #24]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007b36:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	7c9b      	ldrb	r3, [r3, #18]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d108      	bne.n	8007b52 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	699a      	ldr	r2, [r3, #24]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007b4e:	619a      	str	r2, [r3, #24]
 8007b50:	e007      	b.n	8007b62 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	699a      	ldr	r2, [r3, #24]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b60:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	699b      	ldr	r3, [r3, #24]
 8007b68:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	689a      	ldr	r2, [r3, #8]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	430a      	orrs	r2, r1
 8007b76:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	699a      	ldr	r2, [r3, #24]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8007b86:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	691a      	ldr	r2, [r3, #16]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f022 0210 	bic.w	r2, r2, #16
 8007b96:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d108      	bne.n	8007bb2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	699a      	ldr	r2, [r3, #24]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f042 0204 	orr.w	r2, r2, #4
 8007bae:	619a      	str	r2, [r3, #24]
 8007bb0:	e030      	b.n	8007c14 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d02c      	beq.n	8007c14 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	d020      	beq.n	8007c04 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	699a      	ldr	r2, [r3, #24]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007bd0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	691a      	ldr	r2, [r3, #16]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f042 0210 	orr.w	r2, r2, #16
 8007be0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	2b03      	cmp	r3, #3
 8007be8:	d114      	bne.n	8007c14 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	699a      	ldr	r2, [r3, #24]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f042 0220 	orr.w	r2, r2, #32
 8007bf8:	619a      	str	r2, [r3, #24]
 8007bfa:	e00b      	b.n	8007c14 <HAL_FDCAN_Init+0x234>
 8007bfc:	0801c2fc 	.word	0x0801c2fc
 8007c00:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	699a      	ldr	r2, [r3, #24]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f042 0220 	orr.w	r2, r2, #32
 8007c12:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	699b      	ldr	r3, [r3, #24]
 8007c18:	3b01      	subs	r3, #1
 8007c1a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	69db      	ldr	r3, [r3, #28]
 8007c20:	3b01      	subs	r3, #1
 8007c22:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007c24:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a1b      	ldr	r3, [r3, #32]
 8007c2a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007c2c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	695b      	ldr	r3, [r3, #20]
 8007c34:	3b01      	subs	r3, #1
 8007c36:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007c3c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007c3e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c48:	d115      	bne.n	8007c76 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c4e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c54:	3b01      	subs	r3, #1
 8007c56:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007c58:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007c62:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007c72:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007c74:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00a      	beq.n	8007c94 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	430a      	orrs	r2, r1
 8007c90:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c9c:	4413      	add	r3, r2
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d011      	beq.n	8007cc6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8007caa:	f023 0107 	bic.w	r1, r3, #7
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	3360      	adds	r3, #96	; 0x60
 8007cb6:	443b      	add	r3, r7
 8007cb8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	430a      	orrs	r2, r1
 8007cc2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d011      	beq.n	8007cf2 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007cd6:	f023 0107 	bic.w	r1, r3, #7
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	3360      	adds	r3, #96	; 0x60
 8007ce2:	443b      	add	r3, r7
 8007ce4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	430a      	orrs	r2, r1
 8007cee:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d012      	beq.n	8007d20 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007d02:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	3360      	adds	r3, #96	; 0x60
 8007d0e:	443b      	add	r3, r7
 8007d10:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007d14:	011a      	lsls	r2, r3, #4
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	430a      	orrs	r2, r1
 8007d1c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d012      	beq.n	8007d4e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007d30:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	3360      	adds	r3, #96	; 0x60
 8007d3c:	443b      	add	r3, r7
 8007d3e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007d42:	021a      	lsls	r2, r3, #8
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	430a      	orrs	r2, r1
 8007d4a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a11      	ldr	r2, [pc, #68]	; (8007d98 <HAL_FDCAN_Init+0x3b8>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d107      	bne.n	8007d68 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	689a      	ldr	r2, [r3, #8]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	f022 0203 	bic.w	r2, r2, #3
 8007d66:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 f80b 	bl	8007d9c <FDCAN_CalcultateRamBlockAddresses>
 8007d86:	4603      	mov	r3, r0
 8007d88:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8007d8c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3760      	adds	r7, #96	; 0x60
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}
 8007d98:	4000a000 	.word	0x4000a000

08007d9c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b085      	sub	sp, #20
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007da8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007db2:	4ba7      	ldr	r3, [pc, #668]	; (8008050 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007db4:	4013      	ands	r3, r2
 8007db6:	68ba      	ldr	r2, [r7, #8]
 8007db8:	0091      	lsls	r1, r2, #2
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	6812      	ldr	r2, [r2, #0]
 8007dbe:	430b      	orrs	r3, r1
 8007dc0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dcc:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd4:	041a      	lsls	r2, r3, #16
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	430a      	orrs	r2, r1
 8007ddc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de4:	68ba      	ldr	r2, [r7, #8]
 8007de6:	4413      	add	r3, r2
 8007de8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007df2:	4b97      	ldr	r3, [pc, #604]	; (8008050 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007df4:	4013      	ands	r3, r2
 8007df6:	68ba      	ldr	r2, [r7, #8]
 8007df8:	0091      	lsls	r1, r2, #2
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	6812      	ldr	r2, [r2, #0]
 8007dfe:	430b      	orrs	r3, r1
 8007e00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e0c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e14:	041a      	lsls	r2, r3, #16
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	430a      	orrs	r2, r1
 8007e1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e24:	005b      	lsls	r3, r3, #1
 8007e26:	68ba      	ldr	r2, [r7, #8]
 8007e28:	4413      	add	r3, r2
 8007e2a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007e34:	4b86      	ldr	r3, [pc, #536]	; (8008050 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007e36:	4013      	ands	r3, r2
 8007e38:	68ba      	ldr	r2, [r7, #8]
 8007e3a:	0091      	lsls	r1, r2, #2
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	6812      	ldr	r2, [r2, #0]
 8007e40:	430b      	orrs	r3, r1
 8007e42:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007e4e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e56:	041a      	lsls	r2, r3, #16
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	430a      	orrs	r2, r1
 8007e5e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007e6a:	fb02 f303 	mul.w	r3, r2, r3
 8007e6e:	68ba      	ldr	r2, [r7, #8]
 8007e70:	4413      	add	r3, r2
 8007e72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007e7c:	4b74      	ldr	r3, [pc, #464]	; (8008050 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007e7e:	4013      	ands	r3, r2
 8007e80:	68ba      	ldr	r2, [r7, #8]
 8007e82:	0091      	lsls	r1, r2, #2
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	6812      	ldr	r2, [r2, #0]
 8007e88:	430b      	orrs	r3, r1
 8007e8a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e96:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e9e:	041a      	lsls	r2, r3, #16
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	430a      	orrs	r2, r1
 8007ea6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007eb2:	fb02 f303 	mul.w	r3, r2, r3
 8007eb6:	68ba      	ldr	r2, [r7, #8]
 8007eb8:	4413      	add	r3, r2
 8007eba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007ec4:	4b62      	ldr	r3, [pc, #392]	; (8008050 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	68ba      	ldr	r2, [r7, #8]
 8007eca:	0091      	lsls	r1, r2, #2
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	6812      	ldr	r2, [r2, #0]
 8007ed0:	430b      	orrs	r3, r1
 8007ed2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007ede:	fb02 f303 	mul.w	r3, r2, r3
 8007ee2:	68ba      	ldr	r2, [r7, #8]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007ef0:	4b57      	ldr	r3, [pc, #348]	; (8008050 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007ef2:	4013      	ands	r3, r2
 8007ef4:	68ba      	ldr	r2, [r7, #8]
 8007ef6:	0091      	lsls	r1, r2, #2
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	6812      	ldr	r2, [r2, #0]
 8007efc:	430b      	orrs	r3, r1
 8007efe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f0a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f12:	041a      	lsls	r2, r3, #16
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	430a      	orrs	r2, r1
 8007f1a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f22:	005b      	lsls	r3, r3, #1
 8007f24:	68ba      	ldr	r2, [r7, #8]
 8007f26:	4413      	add	r3, r2
 8007f28:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007f32:	4b47      	ldr	r3, [pc, #284]	; (8008050 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007f34:	4013      	ands	r3, r2
 8007f36:	68ba      	ldr	r2, [r7, #8]
 8007f38:	0091      	lsls	r1, r2, #2
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	6812      	ldr	r2, [r2, #0]
 8007f3e:	430b      	orrs	r3, r1
 8007f40:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007f4c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f54:	041a      	lsls	r2, r3, #16
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	430a      	orrs	r2, r1
 8007f5c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007f68:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f70:	061a      	lsls	r2, r3, #24
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	430a      	orrs	r2, r1
 8007f78:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f80:	4b34      	ldr	r3, [pc, #208]	; (8008054 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007f82:	4413      	add	r3, r2
 8007f84:	009a      	lsls	r2, r3, #2
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	441a      	add	r2, r3
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fa2:	00db      	lsls	r3, r3, #3
 8007fa4:	441a      	add	r2, r3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb2:	6879      	ldr	r1, [r7, #4]
 8007fb4:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007fb6:	fb01 f303 	mul.w	r3, r1, r3
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	441a      	add	r2, r3
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fca:	6879      	ldr	r1, [r7, #4]
 8007fcc:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007fce:	fb01 f303 	mul.w	r3, r1, r3
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	441a      	add	r2, r3
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fe2:	6879      	ldr	r1, [r7, #4]
 8007fe4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8007fe6:	fb01 f303 	mul.w	r3, r1, r3
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	441a      	add	r2, r3
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ffe:	00db      	lsls	r3, r3, #3
 8008000:	441a      	add	r2, r3
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008012:	6879      	ldr	r1, [r7, #4]
 8008014:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8008016:	fb01 f303 	mul.w	r3, r1, r3
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	441a      	add	r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800802e:	6879      	ldr	r1, [r7, #4]
 8008030:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8008032:	fb01 f303 	mul.w	r3, r1, r3
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	441a      	add	r2, r3
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008046:	4a04      	ldr	r2, [pc, #16]	; (8008058 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d915      	bls.n	8008078 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800804c:	e006      	b.n	800805c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800804e:	bf00      	nop
 8008050:	ffff0003 	.word	0xffff0003
 8008054:	10002b00 	.word	0x10002b00
 8008058:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008062:	f043 0220 	orr.w	r2, r3, #32
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2203      	movs	r2, #3
 8008070:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	e010      	b.n	800809a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800807c:	60fb      	str	r3, [r7, #12]
 800807e:	e005      	b.n	800808c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2200      	movs	r2, #0
 8008084:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	3304      	adds	r3, #4
 800808a:	60fb      	str	r3, [r7, #12]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	429a      	cmp	r2, r3
 8008096:	d3f3      	bcc.n	8008080 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	3714      	adds	r7, #20
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop

080080a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b089      	sub	sp, #36	; 0x24
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80080b2:	2300      	movs	r3, #0
 80080b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80080b6:	4b86      	ldr	r3, [pc, #536]	; (80082d0 <HAL_GPIO_Init+0x228>)
 80080b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80080ba:	e18c      	b.n	80083d6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	2101      	movs	r1, #1
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	fa01 f303 	lsl.w	r3, r1, r3
 80080c8:	4013      	ands	r3, r2
 80080ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	f000 817e 	beq.w	80083d0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	f003 0303 	and.w	r3, r3, #3
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d005      	beq.n	80080ec <HAL_GPIO_Init+0x44>
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	f003 0303 	and.w	r3, r3, #3
 80080e8:	2b02      	cmp	r3, #2
 80080ea:	d130      	bne.n	800814e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	005b      	lsls	r3, r3, #1
 80080f6:	2203      	movs	r2, #3
 80080f8:	fa02 f303 	lsl.w	r3, r2, r3
 80080fc:	43db      	mvns	r3, r3
 80080fe:	69ba      	ldr	r2, [r7, #24]
 8008100:	4013      	ands	r3, r2
 8008102:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	68da      	ldr	r2, [r3, #12]
 8008108:	69fb      	ldr	r3, [r7, #28]
 800810a:	005b      	lsls	r3, r3, #1
 800810c:	fa02 f303 	lsl.w	r3, r2, r3
 8008110:	69ba      	ldr	r2, [r7, #24]
 8008112:	4313      	orrs	r3, r2
 8008114:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	69ba      	ldr	r2, [r7, #24]
 800811a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008122:	2201      	movs	r2, #1
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	fa02 f303 	lsl.w	r3, r2, r3
 800812a:	43db      	mvns	r3, r3
 800812c:	69ba      	ldr	r2, [r7, #24]
 800812e:	4013      	ands	r3, r2
 8008130:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	091b      	lsrs	r3, r3, #4
 8008138:	f003 0201 	and.w	r2, r3, #1
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	fa02 f303 	lsl.w	r3, r2, r3
 8008142:	69ba      	ldr	r2, [r7, #24]
 8008144:	4313      	orrs	r3, r2
 8008146:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	69ba      	ldr	r2, [r7, #24]
 800814c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	f003 0303 	and.w	r3, r3, #3
 8008156:	2b03      	cmp	r3, #3
 8008158:	d017      	beq.n	800818a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	005b      	lsls	r3, r3, #1
 8008164:	2203      	movs	r2, #3
 8008166:	fa02 f303 	lsl.w	r3, r2, r3
 800816a:	43db      	mvns	r3, r3
 800816c:	69ba      	ldr	r2, [r7, #24]
 800816e:	4013      	ands	r3, r2
 8008170:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	689a      	ldr	r2, [r3, #8]
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	005b      	lsls	r3, r3, #1
 800817a:	fa02 f303 	lsl.w	r3, r2, r3
 800817e:	69ba      	ldr	r2, [r7, #24]
 8008180:	4313      	orrs	r3, r2
 8008182:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	69ba      	ldr	r2, [r7, #24]
 8008188:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	f003 0303 	and.w	r3, r3, #3
 8008192:	2b02      	cmp	r3, #2
 8008194:	d123      	bne.n	80081de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008196:	69fb      	ldr	r3, [r7, #28]
 8008198:	08da      	lsrs	r2, r3, #3
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	3208      	adds	r2, #8
 800819e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80081a4:	69fb      	ldr	r3, [r7, #28]
 80081a6:	f003 0307 	and.w	r3, r3, #7
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	220f      	movs	r2, #15
 80081ae:	fa02 f303 	lsl.w	r3, r2, r3
 80081b2:	43db      	mvns	r3, r3
 80081b4:	69ba      	ldr	r2, [r7, #24]
 80081b6:	4013      	ands	r3, r2
 80081b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	691a      	ldr	r2, [r3, #16]
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	f003 0307 	and.w	r3, r3, #7
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	fa02 f303 	lsl.w	r3, r2, r3
 80081ca:	69ba      	ldr	r2, [r7, #24]
 80081cc:	4313      	orrs	r3, r2
 80081ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80081d0:	69fb      	ldr	r3, [r7, #28]
 80081d2:	08da      	lsrs	r2, r3, #3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	3208      	adds	r2, #8
 80081d8:	69b9      	ldr	r1, [r7, #24]
 80081da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80081e4:	69fb      	ldr	r3, [r7, #28]
 80081e6:	005b      	lsls	r3, r3, #1
 80081e8:	2203      	movs	r2, #3
 80081ea:	fa02 f303 	lsl.w	r3, r2, r3
 80081ee:	43db      	mvns	r3, r3
 80081f0:	69ba      	ldr	r2, [r7, #24]
 80081f2:	4013      	ands	r3, r2
 80081f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	f003 0203 	and.w	r2, r3, #3
 80081fe:	69fb      	ldr	r3, [r7, #28]
 8008200:	005b      	lsls	r3, r3, #1
 8008202:	fa02 f303 	lsl.w	r3, r2, r3
 8008206:	69ba      	ldr	r2, [r7, #24]
 8008208:	4313      	orrs	r3, r2
 800820a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	69ba      	ldr	r2, [r7, #24]
 8008210:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800821a:	2b00      	cmp	r3, #0
 800821c:	f000 80d8 	beq.w	80083d0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008220:	4b2c      	ldr	r3, [pc, #176]	; (80082d4 <HAL_GPIO_Init+0x22c>)
 8008222:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008226:	4a2b      	ldr	r2, [pc, #172]	; (80082d4 <HAL_GPIO_Init+0x22c>)
 8008228:	f043 0302 	orr.w	r3, r3, #2
 800822c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008230:	4b28      	ldr	r3, [pc, #160]	; (80082d4 <HAL_GPIO_Init+0x22c>)
 8008232:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008236:	f003 0302 	and.w	r3, r3, #2
 800823a:	60fb      	str	r3, [r7, #12]
 800823c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800823e:	4a26      	ldr	r2, [pc, #152]	; (80082d8 <HAL_GPIO_Init+0x230>)
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	089b      	lsrs	r3, r3, #2
 8008244:	3302      	adds	r3, #2
 8008246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800824a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	f003 0303 	and.w	r3, r3, #3
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	220f      	movs	r2, #15
 8008256:	fa02 f303 	lsl.w	r3, r2, r3
 800825a:	43db      	mvns	r3, r3
 800825c:	69ba      	ldr	r2, [r7, #24]
 800825e:	4013      	ands	r3, r2
 8008260:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a1d      	ldr	r2, [pc, #116]	; (80082dc <HAL_GPIO_Init+0x234>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d04a      	beq.n	8008300 <HAL_GPIO_Init+0x258>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a1c      	ldr	r2, [pc, #112]	; (80082e0 <HAL_GPIO_Init+0x238>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d02b      	beq.n	80082ca <HAL_GPIO_Init+0x222>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a1b      	ldr	r2, [pc, #108]	; (80082e4 <HAL_GPIO_Init+0x23c>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d025      	beq.n	80082c6 <HAL_GPIO_Init+0x21e>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a1a      	ldr	r2, [pc, #104]	; (80082e8 <HAL_GPIO_Init+0x240>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d01f      	beq.n	80082c2 <HAL_GPIO_Init+0x21a>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a19      	ldr	r2, [pc, #100]	; (80082ec <HAL_GPIO_Init+0x244>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d019      	beq.n	80082be <HAL_GPIO_Init+0x216>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a18      	ldr	r2, [pc, #96]	; (80082f0 <HAL_GPIO_Init+0x248>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d013      	beq.n	80082ba <HAL_GPIO_Init+0x212>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a17      	ldr	r2, [pc, #92]	; (80082f4 <HAL_GPIO_Init+0x24c>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d00d      	beq.n	80082b6 <HAL_GPIO_Init+0x20e>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a16      	ldr	r2, [pc, #88]	; (80082f8 <HAL_GPIO_Init+0x250>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d007      	beq.n	80082b2 <HAL_GPIO_Init+0x20a>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4a15      	ldr	r2, [pc, #84]	; (80082fc <HAL_GPIO_Init+0x254>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d101      	bne.n	80082ae <HAL_GPIO_Init+0x206>
 80082aa:	2309      	movs	r3, #9
 80082ac:	e029      	b.n	8008302 <HAL_GPIO_Init+0x25a>
 80082ae:	230a      	movs	r3, #10
 80082b0:	e027      	b.n	8008302 <HAL_GPIO_Init+0x25a>
 80082b2:	2307      	movs	r3, #7
 80082b4:	e025      	b.n	8008302 <HAL_GPIO_Init+0x25a>
 80082b6:	2306      	movs	r3, #6
 80082b8:	e023      	b.n	8008302 <HAL_GPIO_Init+0x25a>
 80082ba:	2305      	movs	r3, #5
 80082bc:	e021      	b.n	8008302 <HAL_GPIO_Init+0x25a>
 80082be:	2304      	movs	r3, #4
 80082c0:	e01f      	b.n	8008302 <HAL_GPIO_Init+0x25a>
 80082c2:	2303      	movs	r3, #3
 80082c4:	e01d      	b.n	8008302 <HAL_GPIO_Init+0x25a>
 80082c6:	2302      	movs	r3, #2
 80082c8:	e01b      	b.n	8008302 <HAL_GPIO_Init+0x25a>
 80082ca:	2301      	movs	r3, #1
 80082cc:	e019      	b.n	8008302 <HAL_GPIO_Init+0x25a>
 80082ce:	bf00      	nop
 80082d0:	58000080 	.word	0x58000080
 80082d4:	58024400 	.word	0x58024400
 80082d8:	58000400 	.word	0x58000400
 80082dc:	58020000 	.word	0x58020000
 80082e0:	58020400 	.word	0x58020400
 80082e4:	58020800 	.word	0x58020800
 80082e8:	58020c00 	.word	0x58020c00
 80082ec:	58021000 	.word	0x58021000
 80082f0:	58021400 	.word	0x58021400
 80082f4:	58021800 	.word	0x58021800
 80082f8:	58021c00 	.word	0x58021c00
 80082fc:	58022400 	.word	0x58022400
 8008300:	2300      	movs	r3, #0
 8008302:	69fa      	ldr	r2, [r7, #28]
 8008304:	f002 0203 	and.w	r2, r2, #3
 8008308:	0092      	lsls	r2, r2, #2
 800830a:	4093      	lsls	r3, r2
 800830c:	69ba      	ldr	r2, [r7, #24]
 800830e:	4313      	orrs	r3, r2
 8008310:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008312:	4938      	ldr	r1, [pc, #224]	; (80083f4 <HAL_GPIO_Init+0x34c>)
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	089b      	lsrs	r3, r3, #2
 8008318:	3302      	adds	r3, #2
 800831a:	69ba      	ldr	r2, [r7, #24]
 800831c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	43db      	mvns	r3, r3
 800832c:	69ba      	ldr	r2, [r7, #24]
 800832e:	4013      	ands	r3, r2
 8008330:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800833a:	2b00      	cmp	r3, #0
 800833c:	d003      	beq.n	8008346 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800833e:	69ba      	ldr	r2, [r7, #24]
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	4313      	orrs	r3, r2
 8008344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008346:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800834e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	43db      	mvns	r3, r3
 800835a:	69ba      	ldr	r2, [r7, #24]
 800835c:	4013      	ands	r3, r2
 800835e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008368:	2b00      	cmp	r3, #0
 800836a:	d003      	beq.n	8008374 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800836c:	69ba      	ldr	r2, [r7, #24]
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	4313      	orrs	r3, r2
 8008372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008374:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	43db      	mvns	r3, r3
 8008386:	69ba      	ldr	r2, [r7, #24]
 8008388:	4013      	ands	r3, r2
 800838a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008394:	2b00      	cmp	r3, #0
 8008396:	d003      	beq.n	80083a0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008398:	69ba      	ldr	r2, [r7, #24]
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	4313      	orrs	r3, r2
 800839e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	69ba      	ldr	r2, [r7, #24]
 80083a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	43db      	mvns	r3, r3
 80083b0:	69ba      	ldr	r2, [r7, #24]
 80083b2:	4013      	ands	r3, r2
 80083b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d003      	beq.n	80083ca <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80083c2:	69ba      	ldr	r2, [r7, #24]
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	69ba      	ldr	r2, [r7, #24]
 80083ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80083d0:	69fb      	ldr	r3, [r7, #28]
 80083d2:	3301      	adds	r3, #1
 80083d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	69fb      	ldr	r3, [r7, #28]
 80083dc:	fa22 f303 	lsr.w	r3, r2, r3
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	f47f ae6b 	bne.w	80080bc <HAL_GPIO_Init+0x14>
  }
}
 80083e6:	bf00      	nop
 80083e8:	bf00      	nop
 80083ea:	3724      	adds	r7, #36	; 0x24
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr
 80083f4:	58000400 	.word	0x58000400

080083f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	460b      	mov	r3, r1
 8008402:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	691a      	ldr	r2, [r3, #16]
 8008408:	887b      	ldrh	r3, [r7, #2]
 800840a:	4013      	ands	r3, r2
 800840c:	2b00      	cmp	r3, #0
 800840e:	d002      	beq.n	8008416 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008410:	2301      	movs	r3, #1
 8008412:	73fb      	strb	r3, [r7, #15]
 8008414:	e001      	b.n	800841a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008416:	2300      	movs	r3, #0
 8008418:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800841a:	7bfb      	ldrb	r3, [r7, #15]
}
 800841c:	4618      	mov	r0, r3
 800841e:	3714      	adds	r7, #20
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	460b      	mov	r3, r1
 8008432:	807b      	strh	r3, [r7, #2]
 8008434:	4613      	mov	r3, r2
 8008436:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008438:	787b      	ldrb	r3, [r7, #1]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d003      	beq.n	8008446 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800843e:	887a      	ldrh	r2, [r7, #2]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008444:	e003      	b.n	800844e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008446:	887b      	ldrh	r3, [r7, #2]
 8008448:	041a      	lsls	r2, r3, #16
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	619a      	str	r2, [r3, #24]
}
 800844e:	bf00      	nop
 8008450:	370c      	adds	r7, #12
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr
	...

0800845c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d101      	bne.n	800846e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e07f      	b.n	800856e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008474:	b2db      	uxtb	r3, r3
 8008476:	2b00      	cmp	r3, #0
 8008478:	d106      	bne.n	8008488 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f7fa fd86 	bl	8002f94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2224      	movs	r2, #36	; 0x24
 800848c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f022 0201 	bic.w	r2, r2, #1
 800849e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	685a      	ldr	r2, [r3, #4]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80084ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	689a      	ldr	r2, [r3, #8]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80084bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d107      	bne.n	80084d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	689a      	ldr	r2, [r3, #8]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80084d2:	609a      	str	r2, [r3, #8]
 80084d4:	e006      	b.n	80084e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	689a      	ldr	r2, [r3, #8]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80084e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	2b02      	cmp	r3, #2
 80084ea:	d104      	bne.n	80084f6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80084f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	6859      	ldr	r1, [r3, #4]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	4b1d      	ldr	r3, [pc, #116]	; (8008578 <HAL_I2C_Init+0x11c>)
 8008502:	430b      	orrs	r3, r1
 8008504:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	68da      	ldr	r2, [r3, #12]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008514:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	691a      	ldr	r2, [r3, #16]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	695b      	ldr	r3, [r3, #20]
 800851e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	699b      	ldr	r3, [r3, #24]
 8008526:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	430a      	orrs	r2, r1
 800852e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	69d9      	ldr	r1, [r3, #28]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a1a      	ldr	r2, [r3, #32]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	430a      	orrs	r2, r1
 800853e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f042 0201 	orr.w	r2, r2, #1
 800854e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2220      	movs	r2, #32
 800855a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800856c:	2300      	movs	r3, #0
}
 800856e:	4618      	mov	r0, r3
 8008570:	3708      	adds	r7, #8
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop
 8008578:	02008000 	.word	0x02008000

0800857c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800858c:	b2db      	uxtb	r3, r3
 800858e:	2b20      	cmp	r3, #32
 8008590:	d138      	bne.n	8008604 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008598:	2b01      	cmp	r3, #1
 800859a:	d101      	bne.n	80085a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800859c:	2302      	movs	r3, #2
 800859e:	e032      	b.n	8008606 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2201      	movs	r2, #1
 80085a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2224      	movs	r2, #36	; 0x24
 80085ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f022 0201 	bic.w	r2, r2, #1
 80085be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80085ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	6819      	ldr	r1, [r3, #0]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	683a      	ldr	r2, [r7, #0]
 80085dc:	430a      	orrs	r2, r1
 80085de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f042 0201 	orr.w	r2, r2, #1
 80085ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2220      	movs	r2, #32
 80085f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008600:	2300      	movs	r3, #0
 8008602:	e000      	b.n	8008606 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008604:	2302      	movs	r3, #2
  }
}
 8008606:	4618      	mov	r0, r3
 8008608:	370c      	adds	r7, #12
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr

08008612 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008612:	b480      	push	{r7}
 8008614:	b085      	sub	sp, #20
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
 800861a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008622:	b2db      	uxtb	r3, r3
 8008624:	2b20      	cmp	r3, #32
 8008626:	d139      	bne.n	800869c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800862e:	2b01      	cmp	r3, #1
 8008630:	d101      	bne.n	8008636 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008632:	2302      	movs	r3, #2
 8008634:	e033      	b.n	800869e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2201      	movs	r2, #1
 800863a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2224      	movs	r2, #36	; 0x24
 8008642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f022 0201 	bic.w	r2, r2, #1
 8008654:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008664:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	021b      	lsls	r3, r3, #8
 800866a:	68fa      	ldr	r2, [r7, #12]
 800866c:	4313      	orrs	r3, r2
 800866e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f042 0201 	orr.w	r2, r2, #1
 8008686:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2220      	movs	r2, #32
 800868c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008698:	2300      	movs	r3, #0
 800869a:	e000      	b.n	800869e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800869c:	2302      	movs	r3, #2
  }
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3714      	adds	r7, #20
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr

080086aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80086aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086ac:	b08f      	sub	sp, #60	; 0x3c
 80086ae:	af0a      	add	r7, sp, #40	; 0x28
 80086b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d101      	bne.n	80086bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	e116      	b.n	80088ea <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d106      	bne.n	80086dc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f00e fb70 	bl	8016dbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2203      	movs	r2, #3
 80086e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d102      	bne.n	80086f6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4618      	mov	r0, r3
 80086fc:	f00a fc9f 	bl	801303e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	603b      	str	r3, [r7, #0]
 8008706:	687e      	ldr	r6, [r7, #4]
 8008708:	466d      	mov	r5, sp
 800870a:	f106 0410 	add.w	r4, r6, #16
 800870e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008710:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008712:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008714:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008716:	e894 0003 	ldmia.w	r4, {r0, r1}
 800871a:	e885 0003 	stmia.w	r5, {r0, r1}
 800871e:	1d33      	adds	r3, r6, #4
 8008720:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008722:	6838      	ldr	r0, [r7, #0]
 8008724:	f00a fb6a 	bl	8012dfc <USB_CoreInit>
 8008728:	4603      	mov	r3, r0
 800872a:	2b00      	cmp	r3, #0
 800872c:	d005      	beq.n	800873a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2202      	movs	r2, #2
 8008732:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e0d7      	b.n	80088ea <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2100      	movs	r1, #0
 8008740:	4618      	mov	r0, r3
 8008742:	f00a fc8d 	bl	8013060 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008746:	2300      	movs	r3, #0
 8008748:	73fb      	strb	r3, [r7, #15]
 800874a:	e04a      	b.n	80087e2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800874c:	7bfa      	ldrb	r2, [r7, #15]
 800874e:	6879      	ldr	r1, [r7, #4]
 8008750:	4613      	mov	r3, r2
 8008752:	00db      	lsls	r3, r3, #3
 8008754:	4413      	add	r3, r2
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	440b      	add	r3, r1
 800875a:	333d      	adds	r3, #61	; 0x3d
 800875c:	2201      	movs	r2, #1
 800875e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008760:	7bfa      	ldrb	r2, [r7, #15]
 8008762:	6879      	ldr	r1, [r7, #4]
 8008764:	4613      	mov	r3, r2
 8008766:	00db      	lsls	r3, r3, #3
 8008768:	4413      	add	r3, r2
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	440b      	add	r3, r1
 800876e:	333c      	adds	r3, #60	; 0x3c
 8008770:	7bfa      	ldrb	r2, [r7, #15]
 8008772:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008774:	7bfa      	ldrb	r2, [r7, #15]
 8008776:	7bfb      	ldrb	r3, [r7, #15]
 8008778:	b298      	uxth	r0, r3
 800877a:	6879      	ldr	r1, [r7, #4]
 800877c:	4613      	mov	r3, r2
 800877e:	00db      	lsls	r3, r3, #3
 8008780:	4413      	add	r3, r2
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	440b      	add	r3, r1
 8008786:	3356      	adds	r3, #86	; 0x56
 8008788:	4602      	mov	r2, r0
 800878a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800878c:	7bfa      	ldrb	r2, [r7, #15]
 800878e:	6879      	ldr	r1, [r7, #4]
 8008790:	4613      	mov	r3, r2
 8008792:	00db      	lsls	r3, r3, #3
 8008794:	4413      	add	r3, r2
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	440b      	add	r3, r1
 800879a:	3340      	adds	r3, #64	; 0x40
 800879c:	2200      	movs	r2, #0
 800879e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80087a0:	7bfa      	ldrb	r2, [r7, #15]
 80087a2:	6879      	ldr	r1, [r7, #4]
 80087a4:	4613      	mov	r3, r2
 80087a6:	00db      	lsls	r3, r3, #3
 80087a8:	4413      	add	r3, r2
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	440b      	add	r3, r1
 80087ae:	3344      	adds	r3, #68	; 0x44
 80087b0:	2200      	movs	r2, #0
 80087b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80087b4:	7bfa      	ldrb	r2, [r7, #15]
 80087b6:	6879      	ldr	r1, [r7, #4]
 80087b8:	4613      	mov	r3, r2
 80087ba:	00db      	lsls	r3, r3, #3
 80087bc:	4413      	add	r3, r2
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	440b      	add	r3, r1
 80087c2:	3348      	adds	r3, #72	; 0x48
 80087c4:	2200      	movs	r2, #0
 80087c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80087c8:	7bfa      	ldrb	r2, [r7, #15]
 80087ca:	6879      	ldr	r1, [r7, #4]
 80087cc:	4613      	mov	r3, r2
 80087ce:	00db      	lsls	r3, r3, #3
 80087d0:	4413      	add	r3, r2
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	440b      	add	r3, r1
 80087d6:	334c      	adds	r3, #76	; 0x4c
 80087d8:	2200      	movs	r2, #0
 80087da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80087dc:	7bfb      	ldrb	r3, [r7, #15]
 80087de:	3301      	adds	r3, #1
 80087e0:	73fb      	strb	r3, [r7, #15]
 80087e2:	7bfa      	ldrb	r2, [r7, #15]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d3af      	bcc.n	800874c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80087ec:	2300      	movs	r3, #0
 80087ee:	73fb      	strb	r3, [r7, #15]
 80087f0:	e044      	b.n	800887c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80087f2:	7bfa      	ldrb	r2, [r7, #15]
 80087f4:	6879      	ldr	r1, [r7, #4]
 80087f6:	4613      	mov	r3, r2
 80087f8:	00db      	lsls	r3, r3, #3
 80087fa:	4413      	add	r3, r2
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	440b      	add	r3, r1
 8008800:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008804:	2200      	movs	r2, #0
 8008806:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008808:	7bfa      	ldrb	r2, [r7, #15]
 800880a:	6879      	ldr	r1, [r7, #4]
 800880c:	4613      	mov	r3, r2
 800880e:	00db      	lsls	r3, r3, #3
 8008810:	4413      	add	r3, r2
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	440b      	add	r3, r1
 8008816:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800881a:	7bfa      	ldrb	r2, [r7, #15]
 800881c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800881e:	7bfa      	ldrb	r2, [r7, #15]
 8008820:	6879      	ldr	r1, [r7, #4]
 8008822:	4613      	mov	r3, r2
 8008824:	00db      	lsls	r3, r3, #3
 8008826:	4413      	add	r3, r2
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	440b      	add	r3, r1
 800882c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008830:	2200      	movs	r2, #0
 8008832:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008834:	7bfa      	ldrb	r2, [r7, #15]
 8008836:	6879      	ldr	r1, [r7, #4]
 8008838:	4613      	mov	r3, r2
 800883a:	00db      	lsls	r3, r3, #3
 800883c:	4413      	add	r3, r2
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	440b      	add	r3, r1
 8008842:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8008846:	2200      	movs	r2, #0
 8008848:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800884a:	7bfa      	ldrb	r2, [r7, #15]
 800884c:	6879      	ldr	r1, [r7, #4]
 800884e:	4613      	mov	r3, r2
 8008850:	00db      	lsls	r3, r3, #3
 8008852:	4413      	add	r3, r2
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	440b      	add	r3, r1
 8008858:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800885c:	2200      	movs	r2, #0
 800885e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008860:	7bfa      	ldrb	r2, [r7, #15]
 8008862:	6879      	ldr	r1, [r7, #4]
 8008864:	4613      	mov	r3, r2
 8008866:	00db      	lsls	r3, r3, #3
 8008868:	4413      	add	r3, r2
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	440b      	add	r3, r1
 800886e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008872:	2200      	movs	r2, #0
 8008874:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008876:	7bfb      	ldrb	r3, [r7, #15]
 8008878:	3301      	adds	r3, #1
 800887a:	73fb      	strb	r3, [r7, #15]
 800887c:	7bfa      	ldrb	r2, [r7, #15]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	429a      	cmp	r2, r3
 8008884:	d3b5      	bcc.n	80087f2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	603b      	str	r3, [r7, #0]
 800888c:	687e      	ldr	r6, [r7, #4]
 800888e:	466d      	mov	r5, sp
 8008890:	f106 0410 	add.w	r4, r6, #16
 8008894:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008896:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008898:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800889a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800889c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80088a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80088a4:	1d33      	adds	r3, r6, #4
 80088a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80088a8:	6838      	ldr	r0, [r7, #0]
 80088aa:	f00a fc25 	bl	80130f8 <USB_DevInit>
 80088ae:	4603      	mov	r3, r0
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d005      	beq.n	80088c0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2202      	movs	r2, #2
 80088b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	e014      	b.n	80088ea <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2201      	movs	r2, #1
 80088cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d102      	bne.n	80088de <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f001 f96f 	bl	8009bbc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4618      	mov	r0, r3
 80088e4:	f00b fc67 	bl	80141b6 <USB_DevDisconnect>

  return HAL_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3714      	adds	r7, #20
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080088f2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b084      	sub	sp, #16
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008906:	2b01      	cmp	r3, #1
 8008908:	d101      	bne.n	800890e <HAL_PCD_Start+0x1c>
 800890a:	2302      	movs	r3, #2
 800890c:	e022      	b.n	8008954 <HAL_PCD_Start+0x62>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2201      	movs	r2, #1
 8008912:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800891a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800891e:	2b00      	cmp	r3, #0
 8008920:	d109      	bne.n	8008936 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8008926:	2b01      	cmp	r3, #1
 8008928:	d105      	bne.n	8008936 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800892e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4618      	mov	r0, r3
 800893c:	f00a fb6e 	bl	801301c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4618      	mov	r0, r3
 8008946:	f00b fc15 	bl	8014174 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2200      	movs	r2, #0
 800894e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008952:	2300      	movs	r3, #0
}
 8008954:	4618      	mov	r0, r3
 8008956:	3710      	adds	r7, #16
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800895c:	b590      	push	{r4, r7, lr}
 800895e:	b08d      	sub	sp, #52	; 0x34
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800896a:	6a3b      	ldr	r3, [r7, #32]
 800896c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4618      	mov	r0, r3
 8008974:	f00b fcd3 	bl	801431e <USB_GetMode>
 8008978:	4603      	mov	r3, r0
 800897a:	2b00      	cmp	r3, #0
 800897c:	f040 84b7 	bne.w	80092ee <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4618      	mov	r0, r3
 8008986:	f00b fc37 	bl	80141f8 <USB_ReadInterrupts>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	f000 84ad 	beq.w	80092ec <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	0a1b      	lsrs	r3, r3, #8
 800899c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4618      	mov	r0, r3
 80089ac:	f00b fc24 	bl	80141f8 <USB_ReadInterrupts>
 80089b0:	4603      	mov	r3, r0
 80089b2:	f003 0302 	and.w	r3, r3, #2
 80089b6:	2b02      	cmp	r3, #2
 80089b8:	d107      	bne.n	80089ca <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	695a      	ldr	r2, [r3, #20]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f002 0202 	and.w	r2, r2, #2
 80089c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4618      	mov	r0, r3
 80089d0:	f00b fc12 	bl	80141f8 <USB_ReadInterrupts>
 80089d4:	4603      	mov	r3, r0
 80089d6:	f003 0310 	and.w	r3, r3, #16
 80089da:	2b10      	cmp	r3, #16
 80089dc:	d161      	bne.n	8008aa2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	699a      	ldr	r2, [r3, #24]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f022 0210 	bic.w	r2, r2, #16
 80089ec:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80089ee:	6a3b      	ldr	r3, [r7, #32]
 80089f0:	6a1b      	ldr	r3, [r3, #32]
 80089f2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80089f4:	69bb      	ldr	r3, [r7, #24]
 80089f6:	f003 020f 	and.w	r2, r3, #15
 80089fa:	4613      	mov	r3, r2
 80089fc:	00db      	lsls	r3, r3, #3
 80089fe:	4413      	add	r3, r2
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	4413      	add	r3, r2
 8008a0a:	3304      	adds	r3, #4
 8008a0c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	0c5b      	lsrs	r3, r3, #17
 8008a12:	f003 030f 	and.w	r3, r3, #15
 8008a16:	2b02      	cmp	r3, #2
 8008a18:	d124      	bne.n	8008a64 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008a1a:	69ba      	ldr	r2, [r7, #24]
 8008a1c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008a20:	4013      	ands	r3, r2
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d035      	beq.n	8008a92 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	091b      	lsrs	r3, r3, #4
 8008a2e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008a30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	461a      	mov	r2, r3
 8008a38:	6a38      	ldr	r0, [r7, #32]
 8008a3a:	f00b fa49 	bl	8013ed0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	68da      	ldr	r2, [r3, #12]
 8008a42:	69bb      	ldr	r3, [r7, #24]
 8008a44:	091b      	lsrs	r3, r3, #4
 8008a46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a4a:	441a      	add	r2, r3
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	695a      	ldr	r2, [r3, #20]
 8008a54:	69bb      	ldr	r3, [r7, #24]
 8008a56:	091b      	lsrs	r3, r3, #4
 8008a58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a5c:	441a      	add	r2, r3
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	615a      	str	r2, [r3, #20]
 8008a62:	e016      	b.n	8008a92 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008a64:	69bb      	ldr	r3, [r7, #24]
 8008a66:	0c5b      	lsrs	r3, r3, #17
 8008a68:	f003 030f 	and.w	r3, r3, #15
 8008a6c:	2b06      	cmp	r3, #6
 8008a6e:	d110      	bne.n	8008a92 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008a76:	2208      	movs	r2, #8
 8008a78:	4619      	mov	r1, r3
 8008a7a:	6a38      	ldr	r0, [r7, #32]
 8008a7c:	f00b fa28 	bl	8013ed0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	695a      	ldr	r2, [r3, #20]
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	091b      	lsrs	r3, r3, #4
 8008a88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a8c:	441a      	add	r2, r3
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	699a      	ldr	r2, [r3, #24]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f042 0210 	orr.w	r2, r2, #16
 8008aa0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f00b fba6 	bl	80141f8 <USB_ReadInterrupts>
 8008aac:	4603      	mov	r3, r0
 8008aae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ab2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008ab6:	f040 80a7 	bne.w	8008c08 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008aba:	2300      	movs	r3, #0
 8008abc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f00b fbab 	bl	801421e <USB_ReadDevAllOutEpInterrupt>
 8008ac8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008aca:	e099      	b.n	8008c00 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ace:	f003 0301 	and.w	r3, r3, #1
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	f000 808e 	beq.w	8008bf4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ade:	b2d2      	uxtb	r2, r2
 8008ae0:	4611      	mov	r1, r2
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f00b fbcf 	bl	8014286 <USB_ReadDevOutEPInterrupt>
 8008ae8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	f003 0301 	and.w	r3, r3, #1
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d00c      	beq.n	8008b0e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af6:	015a      	lsls	r2, r3, #5
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	4413      	add	r3, r2
 8008afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b00:	461a      	mov	r2, r3
 8008b02:	2301      	movs	r3, #1
 8008b04:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008b06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 fed1 	bl	80098b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	f003 0308 	and.w	r3, r3, #8
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d00c      	beq.n	8008b32 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1a:	015a      	lsls	r2, r3, #5
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	4413      	add	r3, r2
 8008b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b24:	461a      	mov	r2, r3
 8008b26:	2308      	movs	r3, #8
 8008b28:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008b2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 ffa7 	bl	8009a80 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	f003 0310 	and.w	r3, r3, #16
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d008      	beq.n	8008b4e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3e:	015a      	lsls	r2, r3, #5
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	4413      	add	r3, r2
 8008b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b48:	461a      	mov	r2, r3
 8008b4a:	2310      	movs	r3, #16
 8008b4c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	f003 0302 	and.w	r3, r3, #2
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d030      	beq.n	8008bba <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008b58:	6a3b      	ldr	r3, [r7, #32]
 8008b5a:	695b      	ldr	r3, [r3, #20]
 8008b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b60:	2b80      	cmp	r3, #128	; 0x80
 8008b62:	d109      	bne.n	8008b78 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008b64:	69fb      	ldr	r3, [r7, #28]
 8008b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	69fa      	ldr	r2, [r7, #28]
 8008b6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008b76:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	00db      	lsls	r3, r3, #3
 8008b7e:	4413      	add	r3, r2
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	4413      	add	r3, r2
 8008b8a:	3304      	adds	r3, #4
 8008b8c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	78db      	ldrb	r3, [r3, #3]
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d108      	bne.n	8008ba8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f00e fa02 	bl	8016fac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008baa:	015a      	lsls	r2, r3, #5
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	4413      	add	r3, r2
 8008bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	2302      	movs	r3, #2
 8008bb8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	f003 0320 	and.w	r3, r3, #32
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d008      	beq.n	8008bd6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc6:	015a      	lsls	r2, r3, #5
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	4413      	add	r3, r2
 8008bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	2320      	movs	r3, #32
 8008bd4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d009      	beq.n	8008bf4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be2:	015a      	lsls	r2, r3, #5
 8008be4:	69fb      	ldr	r3, [r7, #28]
 8008be6:	4413      	add	r3, r2
 8008be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bec:	461a      	mov	r2, r3
 8008bee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008bf2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfc:	085b      	lsrs	r3, r3, #1
 8008bfe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	f47f af62 	bne.w	8008acc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f00b faf3 	bl	80141f8 <USB_ReadInterrupts>
 8008c12:	4603      	mov	r3, r0
 8008c14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008c1c:	f040 80db 	bne.w	8008dd6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4618      	mov	r0, r3
 8008c26:	f00b fb14 	bl	8014252 <USB_ReadDevAllInEpInterrupt>
 8008c2a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008c30:	e0cd      	b.n	8008dce <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c34:	f003 0301 	and.w	r3, r3, #1
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	f000 80c2 	beq.w	8008dc2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c44:	b2d2      	uxtb	r2, r2
 8008c46:	4611      	mov	r1, r2
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f00b fb3a 	bl	80142c2 <USB_ReadDevInEPInterrupt>
 8008c4e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	f003 0301 	and.w	r3, r3, #1
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d057      	beq.n	8008d0a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5c:	f003 030f 	and.w	r3, r3, #15
 8008c60:	2201      	movs	r2, #1
 8008c62:	fa02 f303 	lsl.w	r3, r2, r3
 8008c66:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008c68:	69fb      	ldr	r3, [r7, #28]
 8008c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	43db      	mvns	r3, r3
 8008c74:	69f9      	ldr	r1, [r7, #28]
 8008c76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c7a:	4013      	ands	r3, r2
 8008c7c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c80:	015a      	lsls	r2, r3, #5
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	4413      	add	r3, r2
 8008c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d132      	bne.n	8008cfe <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008c98:	6879      	ldr	r1, [r7, #4]
 8008c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	00db      	lsls	r3, r3, #3
 8008ca0:	4413      	add	r3, r2
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	440b      	add	r3, r1
 8008ca6:	3348      	adds	r3, #72	; 0x48
 8008ca8:	6819      	ldr	r1, [r3, #0]
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cae:	4613      	mov	r3, r2
 8008cb0:	00db      	lsls	r3, r3, #3
 8008cb2:	4413      	add	r3, r2
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	4403      	add	r3, r0
 8008cb8:	3344      	adds	r3, #68	; 0x44
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4419      	add	r1, r3
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cc2:	4613      	mov	r3, r2
 8008cc4:	00db      	lsls	r3, r3, #3
 8008cc6:	4413      	add	r3, r2
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	4403      	add	r3, r0
 8008ccc:	3348      	adds	r3, #72	; 0x48
 8008cce:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d113      	bne.n	8008cfe <HAL_PCD_IRQHandler+0x3a2>
 8008cd6:	6879      	ldr	r1, [r7, #4]
 8008cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cda:	4613      	mov	r3, r2
 8008cdc:	00db      	lsls	r3, r3, #3
 8008cde:	4413      	add	r3, r2
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	440b      	add	r3, r1
 8008ce4:	334c      	adds	r3, #76	; 0x4c
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d108      	bne.n	8008cfe <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6818      	ldr	r0, [r3, #0]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	2101      	movs	r1, #1
 8008cfa:	f00b fb43 	bl	8014384 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d00:	b2db      	uxtb	r3, r3
 8008d02:	4619      	mov	r1, r3
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f00e f8cc 	bl	8016ea2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	f003 0308 	and.w	r3, r3, #8
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d008      	beq.n	8008d26 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d16:	015a      	lsls	r2, r3, #5
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	4413      	add	r3, r2
 8008d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d20:	461a      	mov	r2, r3
 8008d22:	2308      	movs	r3, #8
 8008d24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	f003 0310 	and.w	r3, r3, #16
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d008      	beq.n	8008d42 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d32:	015a      	lsls	r2, r3, #5
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	4413      	add	r3, r2
 8008d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	2310      	movs	r3, #16
 8008d40:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d008      	beq.n	8008d5e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4e:	015a      	lsls	r2, r3, #5
 8008d50:	69fb      	ldr	r3, [r7, #28]
 8008d52:	4413      	add	r3, r2
 8008d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d58:	461a      	mov	r2, r3
 8008d5a:	2340      	movs	r3, #64	; 0x40
 8008d5c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	f003 0302 	and.w	r3, r3, #2
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d023      	beq.n	8008db0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008d68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d6a:	6a38      	ldr	r0, [r7, #32]
 8008d6c:	f00a fb22 	bl	80133b4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d72:	4613      	mov	r3, r2
 8008d74:	00db      	lsls	r3, r3, #3
 8008d76:	4413      	add	r3, r2
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	3338      	adds	r3, #56	; 0x38
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	4413      	add	r3, r2
 8008d80:	3304      	adds	r3, #4
 8008d82:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	78db      	ldrb	r3, [r3, #3]
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	d108      	bne.n	8008d9e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	4619      	mov	r1, r3
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f00e f919 	bl	8016fd0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da0:	015a      	lsls	r2, r3, #5
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	4413      	add	r3, r2
 8008da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008daa:	461a      	mov	r2, r3
 8008dac:	2302      	movs	r3, #2
 8008dae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d003      	beq.n	8008dc2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008dba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 fcea 	bl	8009796 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dca:	085b      	lsrs	r3, r3, #1
 8008dcc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	f47f af2e 	bne.w	8008c32 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f00b fa0c 	bl	80141f8 <USB_ReadInterrupts>
 8008de0:	4603      	mov	r3, r0
 8008de2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008de6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008dea:	d122      	bne.n	8008e32 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008dec:	69fb      	ldr	r3, [r7, #28]
 8008dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	69fa      	ldr	r2, [r7, #28]
 8008df6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008dfa:	f023 0301 	bic.w	r3, r3, #1
 8008dfe:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d108      	bne.n	8008e1c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008e12:	2100      	movs	r1, #0
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 fef5 	bl	8009c04 <HAL_PCDEx_LPM_Callback>
 8008e1a:	e002      	b.n	8008e22 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f00e f8b7 	bl	8016f90 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	695a      	ldr	r2, [r3, #20]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008e30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4618      	mov	r0, r3
 8008e38:	f00b f9de 	bl	80141f8 <USB_ReadInterrupts>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e46:	d112      	bne.n	8008e6e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	f003 0301 	and.w	r3, r3, #1
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d102      	bne.n	8008e5e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f00e f873 	bl	8016f44 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	695a      	ldr	r2, [r3, #20]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008e6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4618      	mov	r0, r3
 8008e74:	f00b f9c0 	bl	80141f8 <USB_ReadInterrupts>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e82:	d121      	bne.n	8008ec8 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	695a      	ldr	r2, [r3, #20]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008e92:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d111      	bne.n	8008ec2 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eac:	089b      	lsrs	r3, r3, #2
 8008eae:	f003 020f 	and.w	r2, r3, #15
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008eb8:	2101      	movs	r1, #1
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 fea2 	bl	8009c04 <HAL_PCDEx_LPM_Callback>
 8008ec0:	e002      	b.n	8008ec8 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f00e f83e 	bl	8016f44 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f00b f993 	bl	80141f8 <USB_ReadInterrupts>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008edc:	f040 80b7 	bne.w	800904e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	69fa      	ldr	r2, [r7, #28]
 8008eea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008eee:	f023 0301 	bic.w	r3, r3, #1
 8008ef2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2110      	movs	r1, #16
 8008efa:	4618      	mov	r0, r3
 8008efc:	f00a fa5a 	bl	80133b4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008f00:	2300      	movs	r3, #0
 8008f02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f04:	e046      	b.n	8008f94 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f08:	015a      	lsls	r2, r3, #5
 8008f0a:	69fb      	ldr	r3, [r7, #28]
 8008f0c:	4413      	add	r3, r2
 8008f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f12:	461a      	mov	r2, r3
 8008f14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f18:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1c:	015a      	lsls	r2, r3, #5
 8008f1e:	69fb      	ldr	r3, [r7, #28]
 8008f20:	4413      	add	r3, r2
 8008f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f2a:	0151      	lsls	r1, r2, #5
 8008f2c:	69fa      	ldr	r2, [r7, #28]
 8008f2e:	440a      	add	r2, r1
 8008f30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f38:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f3c:	015a      	lsls	r2, r3, #5
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	4413      	add	r3, r2
 8008f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f46:	461a      	mov	r2, r3
 8008f48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f4c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f50:	015a      	lsls	r2, r3, #5
 8008f52:	69fb      	ldr	r3, [r7, #28]
 8008f54:	4413      	add	r3, r2
 8008f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f5e:	0151      	lsls	r1, r2, #5
 8008f60:	69fa      	ldr	r2, [r7, #28]
 8008f62:	440a      	add	r2, r1
 8008f64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f68:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f6c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f70:	015a      	lsls	r2, r3, #5
 8008f72:	69fb      	ldr	r3, [r7, #28]
 8008f74:	4413      	add	r3, r2
 8008f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f7e:	0151      	lsls	r1, r2, #5
 8008f80:	69fa      	ldr	r2, [r7, #28]
 8008f82:	440a      	add	r2, r1
 8008f84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f88:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008f8c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f90:	3301      	adds	r3, #1
 8008f92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d3b3      	bcc.n	8008f06 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fa4:	69db      	ldr	r3, [r3, #28]
 8008fa6:	69fa      	ldr	r2, [r7, #28]
 8008fa8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fac:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008fb0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d016      	beq.n	8008fe8 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fc4:	69fa      	ldr	r2, [r7, #28]
 8008fc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fca:	f043 030b 	orr.w	r3, r3, #11
 8008fce:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fda:	69fa      	ldr	r2, [r7, #28]
 8008fdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fe0:	f043 030b 	orr.w	r3, r3, #11
 8008fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8008fe6:	e015      	b.n	8009014 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008fe8:	69fb      	ldr	r3, [r7, #28]
 8008fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fee:	695a      	ldr	r2, [r3, #20]
 8008ff0:	69fb      	ldr	r3, [r7, #28]
 8008ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	f242 032b 	movw	r3, #8235	; 0x202b
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009000:	69fb      	ldr	r3, [r7, #28]
 8009002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009006:	691b      	ldr	r3, [r3, #16]
 8009008:	69fa      	ldr	r2, [r7, #28]
 800900a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800900e:	f043 030b 	orr.w	r3, r3, #11
 8009012:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009014:	69fb      	ldr	r3, [r7, #28]
 8009016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	69fa      	ldr	r2, [r7, #28]
 800901e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009022:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009026:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6818      	ldr	r0, [r3, #0]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	68db      	ldr	r3, [r3, #12]
 8009030:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009038:	461a      	mov	r2, r3
 800903a:	f00b f9a3 	bl	8014384 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	695a      	ldr	r2, [r3, #20]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800904c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4618      	mov	r0, r3
 8009054:	f00b f8d0 	bl	80141f8 <USB_ReadInterrupts>
 8009058:	4603      	mov	r3, r0
 800905a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800905e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009062:	d124      	bne.n	80090ae <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4618      	mov	r0, r3
 800906a:	f00b f967 	bl	801433c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4618      	mov	r0, r3
 8009074:	f00a fa1b 	bl	80134ae <USB_GetDevSpeed>
 8009078:	4603      	mov	r3, r0
 800907a:	461a      	mov	r2, r3
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681c      	ldr	r4, [r3, #0]
 8009084:	f001 fd88 	bl	800ab98 <HAL_RCC_GetHCLKFreq>
 8009088:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800908e:	b2db      	uxtb	r3, r3
 8009090:	461a      	mov	r2, r3
 8009092:	4620      	mov	r0, r4
 8009094:	f009 ff20 	bl	8012ed8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f00d ff2a 	bl	8016ef2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	695a      	ldr	r2, [r3, #20]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80090ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4618      	mov	r0, r3
 80090b4:	f00b f8a0 	bl	80141f8 <USB_ReadInterrupts>
 80090b8:	4603      	mov	r3, r0
 80090ba:	f003 0308 	and.w	r3, r3, #8
 80090be:	2b08      	cmp	r3, #8
 80090c0:	d10a      	bne.n	80090d8 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f00d ff07 	bl	8016ed6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	695a      	ldr	r2, [r3, #20]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f002 0208 	and.w	r2, r2, #8
 80090d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4618      	mov	r0, r3
 80090de:	f00b f88b 	bl	80141f8 <USB_ReadInterrupts>
 80090e2:	4603      	mov	r3, r0
 80090e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090e8:	2b80      	cmp	r3, #128	; 0x80
 80090ea:	d122      	bne.n	8009132 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80090ec:	6a3b      	ldr	r3, [r7, #32]
 80090ee:	699b      	ldr	r3, [r3, #24]
 80090f0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80090f4:	6a3b      	ldr	r3, [r7, #32]
 80090f6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80090f8:	2301      	movs	r3, #1
 80090fa:	627b      	str	r3, [r7, #36]	; 0x24
 80090fc:	e014      	b.n	8009128 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80090fe:	6879      	ldr	r1, [r7, #4]
 8009100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009102:	4613      	mov	r3, r2
 8009104:	00db      	lsls	r3, r3, #3
 8009106:	4413      	add	r3, r2
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	440b      	add	r3, r1
 800910c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	2b01      	cmp	r3, #1
 8009114:	d105      	bne.n	8009122 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009118:	b2db      	uxtb	r3, r3
 800911a:	4619      	mov	r1, r3
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 fb09 	bl	8009734 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009124:	3301      	adds	r3, #1
 8009126:	627b      	str	r3, [r7, #36]	; 0x24
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800912e:	429a      	cmp	r2, r3
 8009130:	d3e5      	bcc.n	80090fe <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4618      	mov	r0, r3
 8009138:	f00b f85e 	bl	80141f8 <USB_ReadInterrupts>
 800913c:	4603      	mov	r3, r0
 800913e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009142:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009146:	d13b      	bne.n	80091c0 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009148:	2301      	movs	r3, #1
 800914a:	627b      	str	r3, [r7, #36]	; 0x24
 800914c:	e02b      	b.n	80091a6 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800914e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009150:	015a      	lsls	r2, r3, #5
 8009152:	69fb      	ldr	r3, [r7, #28]
 8009154:	4413      	add	r3, r2
 8009156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800915e:	6879      	ldr	r1, [r7, #4]
 8009160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009162:	4613      	mov	r3, r2
 8009164:	00db      	lsls	r3, r3, #3
 8009166:	4413      	add	r3, r2
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	440b      	add	r3, r1
 800916c:	3340      	adds	r3, #64	; 0x40
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	2b01      	cmp	r3, #1
 8009172:	d115      	bne.n	80091a0 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8009174:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009176:	2b00      	cmp	r3, #0
 8009178:	da12      	bge.n	80091a0 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800917a:	6879      	ldr	r1, [r7, #4]
 800917c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800917e:	4613      	mov	r3, r2
 8009180:	00db      	lsls	r3, r3, #3
 8009182:	4413      	add	r3, r2
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	440b      	add	r3, r1
 8009188:	333f      	adds	r3, #63	; 0x3f
 800918a:	2201      	movs	r2, #1
 800918c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800918e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009190:	b2db      	uxtb	r3, r3
 8009192:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009196:	b2db      	uxtb	r3, r3
 8009198:	4619      	mov	r1, r3
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 faca 	bl	8009734 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80091a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a2:	3301      	adds	r3, #1
 80091a4:	627b      	str	r3, [r7, #36]	; 0x24
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d3ce      	bcc.n	800914e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	695a      	ldr	r2, [r3, #20]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80091be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4618      	mov	r0, r3
 80091c6:	f00b f817 	bl	80141f8 <USB_ReadInterrupts>
 80091ca:	4603      	mov	r3, r0
 80091cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80091d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80091d4:	d155      	bne.n	8009282 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80091d6:	2301      	movs	r3, #1
 80091d8:	627b      	str	r3, [r7, #36]	; 0x24
 80091da:	e045      	b.n	8009268 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80091dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091de:	015a      	lsls	r2, r3, #5
 80091e0:	69fb      	ldr	r3, [r7, #28]
 80091e2:	4413      	add	r3, r2
 80091e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80091ec:	6879      	ldr	r1, [r7, #4]
 80091ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091f0:	4613      	mov	r3, r2
 80091f2:	00db      	lsls	r3, r3, #3
 80091f4:	4413      	add	r3, r2
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	440b      	add	r3, r1
 80091fa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	2b01      	cmp	r3, #1
 8009202:	d12e      	bne.n	8009262 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009204:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009206:	2b00      	cmp	r3, #0
 8009208:	da2b      	bge.n	8009262 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800920a:	69bb      	ldr	r3, [r7, #24]
 800920c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8009216:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800921a:	429a      	cmp	r2, r3
 800921c:	d121      	bne.n	8009262 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800921e:	6879      	ldr	r1, [r7, #4]
 8009220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009222:	4613      	mov	r3, r2
 8009224:	00db      	lsls	r3, r3, #3
 8009226:	4413      	add	r3, r2
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	440b      	add	r3, r1
 800922c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009230:	2201      	movs	r2, #1
 8009232:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009234:	6a3b      	ldr	r3, [r7, #32]
 8009236:	699b      	ldr	r3, [r3, #24]
 8009238:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800923c:	6a3b      	ldr	r3, [r7, #32]
 800923e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8009240:	6a3b      	ldr	r3, [r7, #32]
 8009242:	695b      	ldr	r3, [r3, #20]
 8009244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009248:	2b00      	cmp	r3, #0
 800924a:	d10a      	bne.n	8009262 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	69fa      	ldr	r2, [r7, #28]
 8009256:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800925a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800925e:	6053      	str	r3, [r2, #4]
            break;
 8009260:	e007      	b.n	8009272 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009264:	3301      	adds	r3, #1
 8009266:	627b      	str	r3, [r7, #36]	; 0x24
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800926e:	429a      	cmp	r2, r3
 8009270:	d3b4      	bcc.n	80091dc <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	695a      	ldr	r2, [r3, #20]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8009280:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4618      	mov	r0, r3
 8009288:	f00a ffb6 	bl	80141f8 <USB_ReadInterrupts>
 800928c:	4603      	mov	r3, r0
 800928e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009296:	d10a      	bne.n	80092ae <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f00d feab 	bl	8016ff4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	695a      	ldr	r2, [r3, #20]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80092ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4618      	mov	r0, r3
 80092b4:	f00a ffa0 	bl	80141f8 <USB_ReadInterrupts>
 80092b8:	4603      	mov	r3, r0
 80092ba:	f003 0304 	and.w	r3, r3, #4
 80092be:	2b04      	cmp	r3, #4
 80092c0:	d115      	bne.n	80092ee <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80092ca:	69bb      	ldr	r3, [r7, #24]
 80092cc:	f003 0304 	and.w	r3, r3, #4
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d002      	beq.n	80092da <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f00d fe9b 	bl	8017010 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	6859      	ldr	r1, [r3, #4]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	69ba      	ldr	r2, [r7, #24]
 80092e6:	430a      	orrs	r2, r1
 80092e8:	605a      	str	r2, [r3, #4]
 80092ea:	e000      	b.n	80092ee <HAL_PCD_IRQHandler+0x992>
      return;
 80092ec:	bf00      	nop
    }
  }
}
 80092ee:	3734      	adds	r7, #52	; 0x34
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd90      	pop	{r4, r7, pc}

080092f4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b082      	sub	sp, #8
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	460b      	mov	r3, r1
 80092fe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009306:	2b01      	cmp	r3, #1
 8009308:	d101      	bne.n	800930e <HAL_PCD_SetAddress+0x1a>
 800930a:	2302      	movs	r3, #2
 800930c:	e013      	b.n	8009336 <HAL_PCD_SetAddress+0x42>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2201      	movs	r2, #1
 8009312:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	78fa      	ldrb	r2, [r7, #3]
 800931a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	78fa      	ldrb	r2, [r7, #3]
 8009324:	4611      	mov	r1, r2
 8009326:	4618      	mov	r0, r3
 8009328:	f00a fefe 	bl	8014128 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	3708      	adds	r7, #8
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}

0800933e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800933e:	b580      	push	{r7, lr}
 8009340:	b084      	sub	sp, #16
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
 8009346:	4608      	mov	r0, r1
 8009348:	4611      	mov	r1, r2
 800934a:	461a      	mov	r2, r3
 800934c:	4603      	mov	r3, r0
 800934e:	70fb      	strb	r3, [r7, #3]
 8009350:	460b      	mov	r3, r1
 8009352:	803b      	strh	r3, [r7, #0]
 8009354:	4613      	mov	r3, r2
 8009356:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009358:	2300      	movs	r3, #0
 800935a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800935c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009360:	2b00      	cmp	r3, #0
 8009362:	da0f      	bge.n	8009384 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009364:	78fb      	ldrb	r3, [r7, #3]
 8009366:	f003 020f 	and.w	r2, r3, #15
 800936a:	4613      	mov	r3, r2
 800936c:	00db      	lsls	r3, r3, #3
 800936e:	4413      	add	r3, r2
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	3338      	adds	r3, #56	; 0x38
 8009374:	687a      	ldr	r2, [r7, #4]
 8009376:	4413      	add	r3, r2
 8009378:	3304      	adds	r3, #4
 800937a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2201      	movs	r2, #1
 8009380:	705a      	strb	r2, [r3, #1]
 8009382:	e00f      	b.n	80093a4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009384:	78fb      	ldrb	r3, [r7, #3]
 8009386:	f003 020f 	and.w	r2, r3, #15
 800938a:	4613      	mov	r3, r2
 800938c:	00db      	lsls	r3, r3, #3
 800938e:	4413      	add	r3, r2
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	4413      	add	r3, r2
 800939a:	3304      	adds	r3, #4
 800939c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2200      	movs	r2, #0
 80093a2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80093a4:	78fb      	ldrb	r3, [r7, #3]
 80093a6:	f003 030f 	and.w	r3, r3, #15
 80093aa:	b2da      	uxtb	r2, r3
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80093b0:	883a      	ldrh	r2, [r7, #0]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	78ba      	ldrb	r2, [r7, #2]
 80093ba:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	785b      	ldrb	r3, [r3, #1]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d004      	beq.n	80093ce <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	b29a      	uxth	r2, r3
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80093ce:	78bb      	ldrb	r3, [r7, #2]
 80093d0:	2b02      	cmp	r3, #2
 80093d2:	d102      	bne.n	80093da <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2200      	movs	r2, #0
 80093d8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d101      	bne.n	80093e8 <HAL_PCD_EP_Open+0xaa>
 80093e4:	2302      	movs	r3, #2
 80093e6:	e00e      	b.n	8009406 <HAL_PCD_EP_Open+0xc8>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2201      	movs	r2, #1
 80093ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	68f9      	ldr	r1, [r7, #12]
 80093f6:	4618      	mov	r0, r3
 80093f8:	f00a f87e 	bl	80134f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2200      	movs	r2, #0
 8009400:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8009404:	7afb      	ldrb	r3, [r7, #11]
}
 8009406:	4618      	mov	r0, r3
 8009408:	3710      	adds	r7, #16
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}

0800940e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800940e:	b580      	push	{r7, lr}
 8009410:	b084      	sub	sp, #16
 8009412:	af00      	add	r7, sp, #0
 8009414:	6078      	str	r0, [r7, #4]
 8009416:	460b      	mov	r3, r1
 8009418:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800941a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800941e:	2b00      	cmp	r3, #0
 8009420:	da0f      	bge.n	8009442 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009422:	78fb      	ldrb	r3, [r7, #3]
 8009424:	f003 020f 	and.w	r2, r3, #15
 8009428:	4613      	mov	r3, r2
 800942a:	00db      	lsls	r3, r3, #3
 800942c:	4413      	add	r3, r2
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	3338      	adds	r3, #56	; 0x38
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	4413      	add	r3, r2
 8009436:	3304      	adds	r3, #4
 8009438:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2201      	movs	r2, #1
 800943e:	705a      	strb	r2, [r3, #1]
 8009440:	e00f      	b.n	8009462 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009442:	78fb      	ldrb	r3, [r7, #3]
 8009444:	f003 020f 	and.w	r2, r3, #15
 8009448:	4613      	mov	r3, r2
 800944a:	00db      	lsls	r3, r3, #3
 800944c:	4413      	add	r3, r2
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	4413      	add	r3, r2
 8009458:	3304      	adds	r3, #4
 800945a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2200      	movs	r2, #0
 8009460:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009462:	78fb      	ldrb	r3, [r7, #3]
 8009464:	f003 030f 	and.w	r3, r3, #15
 8009468:	b2da      	uxtb	r2, r3
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009474:	2b01      	cmp	r3, #1
 8009476:	d101      	bne.n	800947c <HAL_PCD_EP_Close+0x6e>
 8009478:	2302      	movs	r3, #2
 800947a:	e00e      	b.n	800949a <HAL_PCD_EP_Close+0x8c>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2201      	movs	r2, #1
 8009480:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	68f9      	ldr	r1, [r7, #12]
 800948a:	4618      	mov	r0, r3
 800948c:	f00a f8bc 	bl	8013608 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	3710      	adds	r7, #16
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}

080094a2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80094a2:	b580      	push	{r7, lr}
 80094a4:	b086      	sub	sp, #24
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	60f8      	str	r0, [r7, #12]
 80094aa:	607a      	str	r2, [r7, #4]
 80094ac:	603b      	str	r3, [r7, #0]
 80094ae:	460b      	mov	r3, r1
 80094b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80094b2:	7afb      	ldrb	r3, [r7, #11]
 80094b4:	f003 020f 	and.w	r2, r3, #15
 80094b8:	4613      	mov	r3, r2
 80094ba:	00db      	lsls	r3, r3, #3
 80094bc:	4413      	add	r3, r2
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80094c4:	68fa      	ldr	r2, [r7, #12]
 80094c6:	4413      	add	r3, r2
 80094c8:	3304      	adds	r3, #4
 80094ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	683a      	ldr	r2, [r7, #0]
 80094d6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	2200      	movs	r2, #0
 80094dc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	2200      	movs	r2, #0
 80094e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80094e4:	7afb      	ldrb	r3, [r7, #11]
 80094e6:	f003 030f 	and.w	r3, r3, #15
 80094ea:	b2da      	uxtb	r2, r3
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	68db      	ldr	r3, [r3, #12]
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	d102      	bne.n	80094fe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	6818      	ldr	r0, [r3, #0]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	68db      	ldr	r3, [r3, #12]
 8009506:	b2db      	uxtb	r3, r3
 8009508:	461a      	mov	r2, r3
 800950a:	6979      	ldr	r1, [r7, #20]
 800950c:	f00a f958 	bl	80137c0 <USB_EPStartXfer>

  return HAL_OK;
 8009510:	2300      	movs	r3, #0
}
 8009512:	4618      	mov	r0, r3
 8009514:	3718      	adds	r7, #24
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}

0800951a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800951a:	b480      	push	{r7}
 800951c:	b083      	sub	sp, #12
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
 8009522:	460b      	mov	r3, r1
 8009524:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009526:	78fb      	ldrb	r3, [r7, #3]
 8009528:	f003 020f 	and.w	r2, r3, #15
 800952c:	6879      	ldr	r1, [r7, #4]
 800952e:	4613      	mov	r3, r2
 8009530:	00db      	lsls	r3, r3, #3
 8009532:	4413      	add	r3, r2
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	440b      	add	r3, r1
 8009538:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800953c:	681b      	ldr	r3, [r3, #0]
}
 800953e:	4618      	mov	r0, r3
 8009540:	370c      	adds	r7, #12
 8009542:	46bd      	mov	sp, r7
 8009544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009548:	4770      	bx	lr

0800954a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800954a:	b580      	push	{r7, lr}
 800954c:	b086      	sub	sp, #24
 800954e:	af00      	add	r7, sp, #0
 8009550:	60f8      	str	r0, [r7, #12]
 8009552:	607a      	str	r2, [r7, #4]
 8009554:	603b      	str	r3, [r7, #0]
 8009556:	460b      	mov	r3, r1
 8009558:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800955a:	7afb      	ldrb	r3, [r7, #11]
 800955c:	f003 020f 	and.w	r2, r3, #15
 8009560:	4613      	mov	r3, r2
 8009562:	00db      	lsls	r3, r3, #3
 8009564:	4413      	add	r3, r2
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	3338      	adds	r3, #56	; 0x38
 800956a:	68fa      	ldr	r2, [r7, #12]
 800956c:	4413      	add	r3, r2
 800956e:	3304      	adds	r3, #4
 8009570:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	683a      	ldr	r2, [r7, #0]
 800957c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	2200      	movs	r2, #0
 8009582:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	2201      	movs	r2, #1
 8009588:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800958a:	7afb      	ldrb	r3, [r7, #11]
 800958c:	f003 030f 	and.w	r3, r3, #15
 8009590:	b2da      	uxtb	r2, r3
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	2b01      	cmp	r3, #1
 800959c:	d102      	bne.n	80095a4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	6818      	ldr	r0, [r3, #0]
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	461a      	mov	r2, r3
 80095b0:	6979      	ldr	r1, [r7, #20]
 80095b2:	f00a f905 	bl	80137c0 <USB_EPStartXfer>

  return HAL_OK;
 80095b6:	2300      	movs	r3, #0
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3718      	adds	r7, #24
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	460b      	mov	r3, r1
 80095ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80095cc:	78fb      	ldrb	r3, [r7, #3]
 80095ce:	f003 020f 	and.w	r2, r3, #15
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d901      	bls.n	80095de <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80095da:	2301      	movs	r3, #1
 80095dc:	e050      	b.n	8009680 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80095de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	da0f      	bge.n	8009606 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80095e6:	78fb      	ldrb	r3, [r7, #3]
 80095e8:	f003 020f 	and.w	r2, r3, #15
 80095ec:	4613      	mov	r3, r2
 80095ee:	00db      	lsls	r3, r3, #3
 80095f0:	4413      	add	r3, r2
 80095f2:	009b      	lsls	r3, r3, #2
 80095f4:	3338      	adds	r3, #56	; 0x38
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	4413      	add	r3, r2
 80095fa:	3304      	adds	r3, #4
 80095fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2201      	movs	r2, #1
 8009602:	705a      	strb	r2, [r3, #1]
 8009604:	e00d      	b.n	8009622 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009606:	78fa      	ldrb	r2, [r7, #3]
 8009608:	4613      	mov	r3, r2
 800960a:	00db      	lsls	r3, r3, #3
 800960c:	4413      	add	r3, r2
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009614:	687a      	ldr	r2, [r7, #4]
 8009616:	4413      	add	r3, r2
 8009618:	3304      	adds	r3, #4
 800961a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2200      	movs	r2, #0
 8009620:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2201      	movs	r2, #1
 8009626:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009628:	78fb      	ldrb	r3, [r7, #3]
 800962a:	f003 030f 	and.w	r3, r3, #15
 800962e:	b2da      	uxtb	r2, r3
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800963a:	2b01      	cmp	r3, #1
 800963c:	d101      	bne.n	8009642 <HAL_PCD_EP_SetStall+0x82>
 800963e:	2302      	movs	r3, #2
 8009640:	e01e      	b.n	8009680 <HAL_PCD_EP_SetStall+0xc0>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2201      	movs	r2, #1
 8009646:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	68f9      	ldr	r1, [r7, #12]
 8009650:	4618      	mov	r0, r3
 8009652:	f00a fc95 	bl	8013f80 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009656:	78fb      	ldrb	r3, [r7, #3]
 8009658:	f003 030f 	and.w	r3, r3, #15
 800965c:	2b00      	cmp	r3, #0
 800965e:	d10a      	bne.n	8009676 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6818      	ldr	r0, [r3, #0]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	68db      	ldr	r3, [r3, #12]
 8009668:	b2d9      	uxtb	r1, r3
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009670:	461a      	mov	r2, r3
 8009672:	f00a fe87 	bl	8014384 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2200      	movs	r2, #0
 800967a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800967e:	2300      	movs	r3, #0
}
 8009680:	4618      	mov	r0, r3
 8009682:	3710      	adds	r7, #16
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	460b      	mov	r3, r1
 8009692:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009694:	78fb      	ldrb	r3, [r7, #3]
 8009696:	f003 020f 	and.w	r2, r3, #15
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	429a      	cmp	r2, r3
 80096a0:	d901      	bls.n	80096a6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	e042      	b.n	800972c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80096a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	da0f      	bge.n	80096ce <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80096ae:	78fb      	ldrb	r3, [r7, #3]
 80096b0:	f003 020f 	and.w	r2, r3, #15
 80096b4:	4613      	mov	r3, r2
 80096b6:	00db      	lsls	r3, r3, #3
 80096b8:	4413      	add	r3, r2
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	3338      	adds	r3, #56	; 0x38
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	4413      	add	r3, r2
 80096c2:	3304      	adds	r3, #4
 80096c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2201      	movs	r2, #1
 80096ca:	705a      	strb	r2, [r3, #1]
 80096cc:	e00f      	b.n	80096ee <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80096ce:	78fb      	ldrb	r3, [r7, #3]
 80096d0:	f003 020f 	and.w	r2, r3, #15
 80096d4:	4613      	mov	r3, r2
 80096d6:	00db      	lsls	r3, r3, #3
 80096d8:	4413      	add	r3, r2
 80096da:	009b      	lsls	r3, r3, #2
 80096dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	4413      	add	r3, r2
 80096e4:	3304      	adds	r3, #4
 80096e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2200      	movs	r2, #0
 80096ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2200      	movs	r2, #0
 80096f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80096f4:	78fb      	ldrb	r3, [r7, #3]
 80096f6:	f003 030f 	and.w	r3, r3, #15
 80096fa:	b2da      	uxtb	r2, r3
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009706:	2b01      	cmp	r3, #1
 8009708:	d101      	bne.n	800970e <HAL_PCD_EP_ClrStall+0x86>
 800970a:	2302      	movs	r3, #2
 800970c:	e00e      	b.n	800972c <HAL_PCD_EP_ClrStall+0xa4>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2201      	movs	r2, #1
 8009712:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	68f9      	ldr	r1, [r7, #12]
 800971c:	4618      	mov	r0, r3
 800971e:	f00a fc9d 	bl	801405c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2200      	movs	r2, #0
 8009726:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800972a:	2300      	movs	r3, #0
}
 800972c:	4618      	mov	r0, r3
 800972e:	3710      	adds	r7, #16
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	460b      	mov	r3, r1
 800973e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009740:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009744:	2b00      	cmp	r3, #0
 8009746:	da0c      	bge.n	8009762 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009748:	78fb      	ldrb	r3, [r7, #3]
 800974a:	f003 020f 	and.w	r2, r3, #15
 800974e:	4613      	mov	r3, r2
 8009750:	00db      	lsls	r3, r3, #3
 8009752:	4413      	add	r3, r2
 8009754:	009b      	lsls	r3, r3, #2
 8009756:	3338      	adds	r3, #56	; 0x38
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	4413      	add	r3, r2
 800975c:	3304      	adds	r3, #4
 800975e:	60fb      	str	r3, [r7, #12]
 8009760:	e00c      	b.n	800977c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009762:	78fb      	ldrb	r3, [r7, #3]
 8009764:	f003 020f 	and.w	r2, r3, #15
 8009768:	4613      	mov	r3, r2
 800976a:	00db      	lsls	r3, r3, #3
 800976c:	4413      	add	r3, r2
 800976e:	009b      	lsls	r3, r3, #2
 8009770:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009774:	687a      	ldr	r2, [r7, #4]
 8009776:	4413      	add	r3, r2
 8009778:	3304      	adds	r3, #4
 800977a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	68f9      	ldr	r1, [r7, #12]
 8009782:	4618      	mov	r0, r3
 8009784:	f00a fabc 	bl	8013d00 <USB_EPStopXfer>
 8009788:	4603      	mov	r3, r0
 800978a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800978c:	7afb      	ldrb	r3, [r7, #11]
}
 800978e:	4618      	mov	r0, r3
 8009790:	3710      	adds	r7, #16
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}

08009796 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009796:	b580      	push	{r7, lr}
 8009798:	b08a      	sub	sp, #40	; 0x28
 800979a:	af02      	add	r7, sp, #8
 800979c:	6078      	str	r0, [r7, #4]
 800979e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80097aa:	683a      	ldr	r2, [r7, #0]
 80097ac:	4613      	mov	r3, r2
 80097ae:	00db      	lsls	r3, r3, #3
 80097b0:	4413      	add	r3, r2
 80097b2:	009b      	lsls	r3, r3, #2
 80097b4:	3338      	adds	r3, #56	; 0x38
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	4413      	add	r3, r2
 80097ba:	3304      	adds	r3, #4
 80097bc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	695a      	ldr	r2, [r3, #20]
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	691b      	ldr	r3, [r3, #16]
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d901      	bls.n	80097ce <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80097ca:	2301      	movs	r3, #1
 80097cc:	e06c      	b.n	80098a8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	691a      	ldr	r2, [r3, #16]
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	695b      	ldr	r3, [r3, #20]
 80097d6:	1ad3      	subs	r3, r2, r3
 80097d8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	69fa      	ldr	r2, [r7, #28]
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d902      	bls.n	80097ea <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80097ea:	69fb      	ldr	r3, [r7, #28]
 80097ec:	3303      	adds	r3, #3
 80097ee:	089b      	lsrs	r3, r3, #2
 80097f0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80097f2:	e02b      	b.n	800984c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	691a      	ldr	r2, [r3, #16]
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	695b      	ldr	r3, [r3, #20]
 80097fc:	1ad3      	subs	r3, r2, r3
 80097fe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	689b      	ldr	r3, [r3, #8]
 8009804:	69fa      	ldr	r2, [r7, #28]
 8009806:	429a      	cmp	r2, r3
 8009808:	d902      	bls.n	8009810 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	689b      	ldr	r3, [r3, #8]
 800980e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009810:	69fb      	ldr	r3, [r7, #28]
 8009812:	3303      	adds	r3, #3
 8009814:	089b      	lsrs	r3, r3, #2
 8009816:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	68d9      	ldr	r1, [r3, #12]
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	b2da      	uxtb	r2, r3
 8009820:	69fb      	ldr	r3, [r7, #28]
 8009822:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009828:	b2db      	uxtb	r3, r3
 800982a:	9300      	str	r3, [sp, #0]
 800982c:	4603      	mov	r3, r0
 800982e:	6978      	ldr	r0, [r7, #20]
 8009830:	f00a fb10 	bl	8013e54 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	68da      	ldr	r2, [r3, #12]
 8009838:	69fb      	ldr	r3, [r7, #28]
 800983a:	441a      	add	r2, r3
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	695a      	ldr	r2, [r3, #20]
 8009844:	69fb      	ldr	r3, [r7, #28]
 8009846:	441a      	add	r2, r3
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	015a      	lsls	r2, r3, #5
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	4413      	add	r3, r2
 8009854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009858:	699b      	ldr	r3, [r3, #24]
 800985a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800985c:	69ba      	ldr	r2, [r7, #24]
 800985e:	429a      	cmp	r2, r3
 8009860:	d809      	bhi.n	8009876 <PCD_WriteEmptyTxFifo+0xe0>
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	695a      	ldr	r2, [r3, #20]
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800986a:	429a      	cmp	r2, r3
 800986c:	d203      	bcs.n	8009876 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	691b      	ldr	r3, [r3, #16]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d1be      	bne.n	80097f4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	691a      	ldr	r2, [r3, #16]
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	695b      	ldr	r3, [r3, #20]
 800987e:	429a      	cmp	r2, r3
 8009880:	d811      	bhi.n	80098a6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	f003 030f 	and.w	r3, r3, #15
 8009888:	2201      	movs	r2, #1
 800988a:	fa02 f303 	lsl.w	r3, r2, r3
 800988e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009896:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	43db      	mvns	r3, r3
 800989c:	6939      	ldr	r1, [r7, #16]
 800989e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098a2:	4013      	ands	r3, r2
 80098a4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80098a6:	2300      	movs	r3, #0
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3720      	adds	r7, #32
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b088      	sub	sp, #32
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098c0:	69fb      	ldr	r3, [r7, #28]
 80098c2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	333c      	adds	r3, #60	; 0x3c
 80098c8:	3304      	adds	r3, #4
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	015a      	lsls	r2, r3, #5
 80098d2:	69bb      	ldr	r3, [r7, #24]
 80098d4:	4413      	add	r3, r2
 80098d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	68db      	ldr	r3, [r3, #12]
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d17b      	bne.n	80099de <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	f003 0308 	and.w	r3, r3, #8
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d015      	beq.n	800991c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	4a61      	ldr	r2, [pc, #388]	; (8009a78 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	f240 80b9 	bls.w	8009a6c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009900:	2b00      	cmp	r3, #0
 8009902:	f000 80b3 	beq.w	8009a6c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	015a      	lsls	r2, r3, #5
 800990a:	69bb      	ldr	r3, [r7, #24]
 800990c:	4413      	add	r3, r2
 800990e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009912:	461a      	mov	r2, r3
 8009914:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009918:	6093      	str	r3, [r2, #8]
 800991a:	e0a7      	b.n	8009a6c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	f003 0320 	and.w	r3, r3, #32
 8009922:	2b00      	cmp	r3, #0
 8009924:	d009      	beq.n	800993a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	015a      	lsls	r2, r3, #5
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	4413      	add	r3, r2
 800992e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009932:	461a      	mov	r2, r3
 8009934:	2320      	movs	r3, #32
 8009936:	6093      	str	r3, [r2, #8]
 8009938:	e098      	b.n	8009a6c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009940:	2b00      	cmp	r3, #0
 8009942:	f040 8093 	bne.w	8009a6c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	4a4b      	ldr	r2, [pc, #300]	; (8009a78 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d90f      	bls.n	800996e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009954:	2b00      	cmp	r3, #0
 8009956:	d00a      	beq.n	800996e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	015a      	lsls	r2, r3, #5
 800995c:	69bb      	ldr	r3, [r7, #24]
 800995e:	4413      	add	r3, r2
 8009960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009964:	461a      	mov	r2, r3
 8009966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800996a:	6093      	str	r3, [r2, #8]
 800996c:	e07e      	b.n	8009a6c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800996e:	683a      	ldr	r2, [r7, #0]
 8009970:	4613      	mov	r3, r2
 8009972:	00db      	lsls	r3, r3, #3
 8009974:	4413      	add	r3, r2
 8009976:	009b      	lsls	r3, r3, #2
 8009978:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800997c:	687a      	ldr	r2, [r7, #4]
 800997e:	4413      	add	r3, r2
 8009980:	3304      	adds	r3, #4
 8009982:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	6a1a      	ldr	r2, [r3, #32]
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	0159      	lsls	r1, r3, #5
 800998c:	69bb      	ldr	r3, [r7, #24]
 800998e:	440b      	add	r3, r1
 8009990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009994:	691b      	ldr	r3, [r3, #16]
 8009996:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800999a:	1ad2      	subs	r2, r2, r3
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d114      	bne.n	80099d0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	691b      	ldr	r3, [r3, #16]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d109      	bne.n	80099c2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6818      	ldr	r0, [r3, #0]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80099b8:	461a      	mov	r2, r3
 80099ba:	2101      	movs	r1, #1
 80099bc:	f00a fce2 	bl	8014384 <USB_EP0_OutStart>
 80099c0:	e006      	b.n	80099d0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	68da      	ldr	r2, [r3, #12]
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	695b      	ldr	r3, [r3, #20]
 80099ca:	441a      	add	r2, r3
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	b2db      	uxtb	r3, r3
 80099d4:	4619      	mov	r1, r3
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f00d fa48 	bl	8016e6c <HAL_PCD_DataOutStageCallback>
 80099dc:	e046      	b.n	8009a6c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	4a26      	ldr	r2, [pc, #152]	; (8009a7c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d124      	bne.n	8009a30 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d00a      	beq.n	8009a06 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	015a      	lsls	r2, r3, #5
 80099f4:	69bb      	ldr	r3, [r7, #24]
 80099f6:	4413      	add	r3, r2
 80099f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099fc:	461a      	mov	r2, r3
 80099fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a02:	6093      	str	r3, [r2, #8]
 8009a04:	e032      	b.n	8009a6c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	f003 0320 	and.w	r3, r3, #32
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d008      	beq.n	8009a22 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	015a      	lsls	r2, r3, #5
 8009a14:	69bb      	ldr	r3, [r7, #24]
 8009a16:	4413      	add	r3, r2
 8009a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	2320      	movs	r3, #32
 8009a20:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	b2db      	uxtb	r3, r3
 8009a26:	4619      	mov	r1, r3
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f00d fa1f 	bl	8016e6c <HAL_PCD_DataOutStageCallback>
 8009a2e:	e01d      	b.n	8009a6c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d114      	bne.n	8009a60 <PCD_EP_OutXfrComplete_int+0x1b0>
 8009a36:	6879      	ldr	r1, [r7, #4]
 8009a38:	683a      	ldr	r2, [r7, #0]
 8009a3a:	4613      	mov	r3, r2
 8009a3c:	00db      	lsls	r3, r3, #3
 8009a3e:	4413      	add	r3, r2
 8009a40:	009b      	lsls	r3, r3, #2
 8009a42:	440b      	add	r3, r1
 8009a44:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d108      	bne.n	8009a60 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6818      	ldr	r0, [r3, #0]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009a58:	461a      	mov	r2, r3
 8009a5a:	2100      	movs	r1, #0
 8009a5c:	f00a fc92 	bl	8014384 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	b2db      	uxtb	r3, r3
 8009a64:	4619      	mov	r1, r3
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f00d fa00 	bl	8016e6c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009a6c:	2300      	movs	r3, #0
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3720      	adds	r7, #32
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	4f54300a 	.word	0x4f54300a
 8009a7c:	4f54310a 	.word	0x4f54310a

08009a80 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b086      	sub	sp, #24
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	333c      	adds	r3, #60	; 0x3c
 8009a98:	3304      	adds	r3, #4
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	015a      	lsls	r2, r3, #5
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	4413      	add	r3, r2
 8009aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aaa:	689b      	ldr	r3, [r3, #8]
 8009aac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	4a15      	ldr	r2, [pc, #84]	; (8009b08 <PCD_EP_OutSetupPacket_int+0x88>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d90e      	bls.n	8009ad4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d009      	beq.n	8009ad4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	015a      	lsls	r2, r3, #5
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	4413      	add	r3, r2
 8009ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009acc:	461a      	mov	r2, r3
 8009ace:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ad2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f00d f9b7 	bl	8016e48 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	4a0a      	ldr	r2, [pc, #40]	; (8009b08 <PCD_EP_OutSetupPacket_int+0x88>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d90c      	bls.n	8009afc <PCD_EP_OutSetupPacket_int+0x7c>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	68db      	ldr	r3, [r3, #12]
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d108      	bne.n	8009afc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6818      	ldr	r0, [r3, #0]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009af4:	461a      	mov	r2, r3
 8009af6:	2101      	movs	r1, #1
 8009af8:	f00a fc44 	bl	8014384 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009afc:	2300      	movs	r3, #0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3718      	adds	r7, #24
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	bf00      	nop
 8009b08:	4f54300a 	.word	0x4f54300a

08009b0c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b085      	sub	sp, #20
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	460b      	mov	r3, r1
 8009b16:	70fb      	strb	r3, [r7, #3]
 8009b18:	4613      	mov	r3, r2
 8009b1a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b22:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009b24:	78fb      	ldrb	r3, [r7, #3]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d107      	bne.n	8009b3a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009b2a:	883b      	ldrh	r3, [r7, #0]
 8009b2c:	0419      	lsls	r1, r3, #16
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	68ba      	ldr	r2, [r7, #8]
 8009b34:	430a      	orrs	r2, r1
 8009b36:	629a      	str	r2, [r3, #40]	; 0x28
 8009b38:	e028      	b.n	8009b8c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b40:	0c1b      	lsrs	r3, r3, #16
 8009b42:	68ba      	ldr	r2, [r7, #8]
 8009b44:	4413      	add	r3, r2
 8009b46:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009b48:	2300      	movs	r3, #0
 8009b4a:	73fb      	strb	r3, [r7, #15]
 8009b4c:	e00d      	b.n	8009b6a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681a      	ldr	r2, [r3, #0]
 8009b52:	7bfb      	ldrb	r3, [r7, #15]
 8009b54:	3340      	adds	r3, #64	; 0x40
 8009b56:	009b      	lsls	r3, r3, #2
 8009b58:	4413      	add	r3, r2
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	0c1b      	lsrs	r3, r3, #16
 8009b5e:	68ba      	ldr	r2, [r7, #8]
 8009b60:	4413      	add	r3, r2
 8009b62:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009b64:	7bfb      	ldrb	r3, [r7, #15]
 8009b66:	3301      	adds	r3, #1
 8009b68:	73fb      	strb	r3, [r7, #15]
 8009b6a:	7bfa      	ldrb	r2, [r7, #15]
 8009b6c:	78fb      	ldrb	r3, [r7, #3]
 8009b6e:	3b01      	subs	r3, #1
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d3ec      	bcc.n	8009b4e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009b74:	883b      	ldrh	r3, [r7, #0]
 8009b76:	0418      	lsls	r0, r3, #16
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6819      	ldr	r1, [r3, #0]
 8009b7c:	78fb      	ldrb	r3, [r7, #3]
 8009b7e:	3b01      	subs	r3, #1
 8009b80:	68ba      	ldr	r2, [r7, #8]
 8009b82:	4302      	orrs	r2, r0
 8009b84:	3340      	adds	r3, #64	; 0x40
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	440b      	add	r3, r1
 8009b8a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009b8c:	2300      	movs	r3, #0
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3714      	adds	r7, #20
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr

08009b9a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009b9a:	b480      	push	{r7}
 8009b9c:	b083      	sub	sp, #12
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	6078      	str	r0, [r7, #4]
 8009ba2:	460b      	mov	r3, r1
 8009ba4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	887a      	ldrh	r2, [r7, #2]
 8009bac:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009bae:	2300      	movs	r3, #0
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	370c      	adds	r7, #12
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr

08009bbc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b085      	sub	sp, #20
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2201      	movs	r2, #1
 8009bce:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	699b      	ldr	r3, [r3, #24]
 8009bde:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009bea:	4b05      	ldr	r3, [pc, #20]	; (8009c00 <HAL_PCDEx_ActivateLPM+0x44>)
 8009bec:	4313      	orrs	r3, r2
 8009bee:	68fa      	ldr	r2, [r7, #12]
 8009bf0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009bf2:	2300      	movs	r3, #0
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3714      	adds	r7, #20
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr
 8009c00:	10000003 	.word	0x10000003

08009c04 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b083      	sub	sp, #12
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009c10:	bf00      	nop
 8009c12:	370c      	adds	r7, #12
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr

08009c1c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b084      	sub	sp, #16
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009c24:	4b19      	ldr	r3, [pc, #100]	; (8009c8c <HAL_PWREx_ConfigSupply+0x70>)
 8009c26:	68db      	ldr	r3, [r3, #12]
 8009c28:	f003 0304 	and.w	r3, r3, #4
 8009c2c:	2b04      	cmp	r3, #4
 8009c2e:	d00a      	beq.n	8009c46 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009c30:	4b16      	ldr	r3, [pc, #88]	; (8009c8c <HAL_PWREx_ConfigSupply+0x70>)
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	f003 0307 	and.w	r3, r3, #7
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d001      	beq.n	8009c42 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	e01f      	b.n	8009c82 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009c42:	2300      	movs	r3, #0
 8009c44:	e01d      	b.n	8009c82 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009c46:	4b11      	ldr	r3, [pc, #68]	; (8009c8c <HAL_PWREx_ConfigSupply+0x70>)
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	f023 0207 	bic.w	r2, r3, #7
 8009c4e:	490f      	ldr	r1, [pc, #60]	; (8009c8c <HAL_PWREx_ConfigSupply+0x70>)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	4313      	orrs	r3, r2
 8009c54:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009c56:	f7fa f929 	bl	8003eac <HAL_GetTick>
 8009c5a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009c5c:	e009      	b.n	8009c72 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009c5e:	f7fa f925 	bl	8003eac <HAL_GetTick>
 8009c62:	4602      	mov	r2, r0
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	1ad3      	subs	r3, r2, r3
 8009c68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009c6c:	d901      	bls.n	8009c72 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	e007      	b.n	8009c82 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009c72:	4b06      	ldr	r3, [pc, #24]	; (8009c8c <HAL_PWREx_ConfigSupply+0x70>)
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c7e:	d1ee      	bne.n	8009c5e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009c80:	2300      	movs	r3, #0
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3710      	adds	r7, #16
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	58024800 	.word	0x58024800

08009c90 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8009c90:	b480      	push	{r7}
 8009c92:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8009c94:	4b05      	ldr	r3, [pc, #20]	; (8009cac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009c96:	68db      	ldr	r3, [r3, #12]
 8009c98:	4a04      	ldr	r2, [pc, #16]	; (8009cac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009c9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009c9e:	60d3      	str	r3, [r2, #12]
}
 8009ca0:	bf00      	nop
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr
 8009caa:	bf00      	nop
 8009cac:	58024800 	.word	0x58024800

08009cb0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b08c      	sub	sp, #48	; 0x30
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d101      	bne.n	8009cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	e3c8      	b.n	800a454 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f003 0301 	and.w	r3, r3, #1
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	f000 8087 	beq.w	8009dde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009cd0:	4b88      	ldr	r3, [pc, #544]	; (8009ef4 <HAL_RCC_OscConfig+0x244>)
 8009cd2:	691b      	ldr	r3, [r3, #16]
 8009cd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009cda:	4b86      	ldr	r3, [pc, #536]	; (8009ef4 <HAL_RCC_OscConfig+0x244>)
 8009cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cde:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ce2:	2b10      	cmp	r3, #16
 8009ce4:	d007      	beq.n	8009cf6 <HAL_RCC_OscConfig+0x46>
 8009ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ce8:	2b18      	cmp	r3, #24
 8009cea:	d110      	bne.n	8009d0e <HAL_RCC_OscConfig+0x5e>
 8009cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cee:	f003 0303 	and.w	r3, r3, #3
 8009cf2:	2b02      	cmp	r3, #2
 8009cf4:	d10b      	bne.n	8009d0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009cf6:	4b7f      	ldr	r3, [pc, #508]	; (8009ef4 <HAL_RCC_OscConfig+0x244>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d06c      	beq.n	8009ddc <HAL_RCC_OscConfig+0x12c>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d168      	bne.n	8009ddc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	e3a2      	b.n	800a454 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d16:	d106      	bne.n	8009d26 <HAL_RCC_OscConfig+0x76>
 8009d18:	4b76      	ldr	r3, [pc, #472]	; (8009ef4 <HAL_RCC_OscConfig+0x244>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a75      	ldr	r2, [pc, #468]	; (8009ef4 <HAL_RCC_OscConfig+0x244>)
 8009d1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d22:	6013      	str	r3, [r2, #0]
 8009d24:	e02e      	b.n	8009d84 <HAL_RCC_OscConfig+0xd4>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d10c      	bne.n	8009d48 <HAL_RCC_OscConfig+0x98>
 8009d2e:	4b71      	ldr	r3, [pc, #452]	; (8009ef4 <HAL_RCC_OscConfig+0x244>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a70      	ldr	r2, [pc, #448]	; (8009ef4 <HAL_RCC_OscConfig+0x244>)
 8009d34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d38:	6013      	str	r3, [r2, #0]
 8009d3a:	4b6e      	ldr	r3, [pc, #440]	; (8009ef4 <HAL_RCC_OscConfig+0x244>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4a6d      	ldr	r2, [pc, #436]	; (8009ef4 <HAL_RCC_OscConfig+0x244>)
 8009d40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009d44:	6013      	str	r3, [r2, #0]
 8009d46:	e01d      	b.n	8009d84 <HAL_RCC_OscConfig+0xd4>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	685b      	ldr	r3, [r3, #4]
 8009d4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009d50:	d10c      	bne.n	8009d6c <HAL_RCC_OscConfig+0xbc>
 8009d52:	4b68      	ldr	r3, [pc, #416]	; (8009ef4 <HAL_RCC_OscConfig+0x244>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4a67      	ldr	r2, [pc, #412]	; (8009ef4 <HAL_RCC_OscConfig+0x244>)
 8009d58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009d5c:	6013      	str	r3, [r2, #0]
 8009d5e:	4b65      	ldr	r3, [pc, #404]	; (8009ef4 <HAL_RCC_OscConfig+0x244>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4a64      	ldr	r2, [pc, #400]	; (8009ef4 <HAL_RCC_OscConfig+0x244>)
 8009d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d68:	6013      	str	r3, [r2, #0]
 8009d6a:	e00b      	b.n	8009d84 <HAL_RCC_OscConfig+0xd4>
 8009d6c:	4b61      	ldr	r3, [pc, #388]	; (8009ef4 <HAL_RCC_OscConfig+0x244>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a60      	ldr	r2, [pc, #384]	; (8009ef4 <HAL_RCC_OscConfig+0x244>)
 8009d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d76:	6013      	str	r3, [r2, #0]
 8009d78:	4b5e      	ldr	r3, [pc, #376]	; (8009ef4 <HAL_RCC_OscConfig+0x244>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a5d      	ldr	r2, [pc, #372]	; (8009ef4 <HAL_RCC_OscConfig+0x244>)
 8009d7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009d82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d013      	beq.n	8009db4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d8c:	f7fa f88e 	bl	8003eac <HAL_GetTick>
 8009d90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009d92:	e008      	b.n	8009da6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009d94:	f7fa f88a 	bl	8003eac <HAL_GetTick>
 8009d98:	4602      	mov	r2, r0
 8009d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9c:	1ad3      	subs	r3, r2, r3
 8009d9e:	2b64      	cmp	r3, #100	; 0x64
 8009da0:	d901      	bls.n	8009da6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009da2:	2303      	movs	r3, #3
 8009da4:	e356      	b.n	800a454 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009da6:	4b53      	ldr	r3, [pc, #332]	; (8009ef4 <HAL_RCC_OscConfig+0x244>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d0f0      	beq.n	8009d94 <HAL_RCC_OscConfig+0xe4>
 8009db2:	e014      	b.n	8009dde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009db4:	f7fa f87a 	bl	8003eac <HAL_GetTick>
 8009db8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009dba:	e008      	b.n	8009dce <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009dbc:	f7fa f876 	bl	8003eac <HAL_GetTick>
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc4:	1ad3      	subs	r3, r2, r3
 8009dc6:	2b64      	cmp	r3, #100	; 0x64
 8009dc8:	d901      	bls.n	8009dce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009dca:	2303      	movs	r3, #3
 8009dcc:	e342      	b.n	800a454 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009dce:	4b49      	ldr	r3, [pc, #292]	; (8009ef4 <HAL_RCC_OscConfig+0x244>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d1f0      	bne.n	8009dbc <HAL_RCC_OscConfig+0x10c>
 8009dda:	e000      	b.n	8009dde <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f003 0302 	and.w	r3, r3, #2
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	f000 808c 	beq.w	8009f04 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009dec:	4b41      	ldr	r3, [pc, #260]	; (8009ef4 <HAL_RCC_OscConfig+0x244>)
 8009dee:	691b      	ldr	r3, [r3, #16]
 8009df0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009df4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009df6:	4b3f      	ldr	r3, [pc, #252]	; (8009ef4 <HAL_RCC_OscConfig+0x244>)
 8009df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dfa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009dfc:	6a3b      	ldr	r3, [r7, #32]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d007      	beq.n	8009e12 <HAL_RCC_OscConfig+0x162>
 8009e02:	6a3b      	ldr	r3, [r7, #32]
 8009e04:	2b18      	cmp	r3, #24
 8009e06:	d137      	bne.n	8009e78 <HAL_RCC_OscConfig+0x1c8>
 8009e08:	69fb      	ldr	r3, [r7, #28]
 8009e0a:	f003 0303 	and.w	r3, r3, #3
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d132      	bne.n	8009e78 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009e12:	4b38      	ldr	r3, [pc, #224]	; (8009ef4 <HAL_RCC_OscConfig+0x244>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f003 0304 	and.w	r3, r3, #4
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d005      	beq.n	8009e2a <HAL_RCC_OscConfig+0x17a>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	68db      	ldr	r3, [r3, #12]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d101      	bne.n	8009e2a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009e26:	2301      	movs	r3, #1
 8009e28:	e314      	b.n	800a454 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009e2a:	4b32      	ldr	r3, [pc, #200]	; (8009ef4 <HAL_RCC_OscConfig+0x244>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f023 0219 	bic.w	r2, r3, #25
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	68db      	ldr	r3, [r3, #12]
 8009e36:	492f      	ldr	r1, [pc, #188]	; (8009ef4 <HAL_RCC_OscConfig+0x244>)
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e3c:	f7fa f836 	bl	8003eac <HAL_GetTick>
 8009e40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009e42:	e008      	b.n	8009e56 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e44:	f7fa f832 	bl	8003eac <HAL_GetTick>
 8009e48:	4602      	mov	r2, r0
 8009e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4c:	1ad3      	subs	r3, r2, r3
 8009e4e:	2b02      	cmp	r3, #2
 8009e50:	d901      	bls.n	8009e56 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8009e52:	2303      	movs	r3, #3
 8009e54:	e2fe      	b.n	800a454 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009e56:	4b27      	ldr	r3, [pc, #156]	; (8009ef4 <HAL_RCC_OscConfig+0x244>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f003 0304 	and.w	r3, r3, #4
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d0f0      	beq.n	8009e44 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e62:	4b24      	ldr	r3, [pc, #144]	; (8009ef4 <HAL_RCC_OscConfig+0x244>)
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	691b      	ldr	r3, [r3, #16]
 8009e6e:	061b      	lsls	r3, r3, #24
 8009e70:	4920      	ldr	r1, [pc, #128]	; (8009ef4 <HAL_RCC_OscConfig+0x244>)
 8009e72:	4313      	orrs	r3, r2
 8009e74:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009e76:	e045      	b.n	8009f04 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	68db      	ldr	r3, [r3, #12]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d026      	beq.n	8009ece <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009e80:	4b1c      	ldr	r3, [pc, #112]	; (8009ef4 <HAL_RCC_OscConfig+0x244>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f023 0219 	bic.w	r2, r3, #25
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	68db      	ldr	r3, [r3, #12]
 8009e8c:	4919      	ldr	r1, [pc, #100]	; (8009ef4 <HAL_RCC_OscConfig+0x244>)
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e92:	f7fa f80b 	bl	8003eac <HAL_GetTick>
 8009e96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009e98:	e008      	b.n	8009eac <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e9a:	f7fa f807 	bl	8003eac <HAL_GetTick>
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea2:	1ad3      	subs	r3, r2, r3
 8009ea4:	2b02      	cmp	r3, #2
 8009ea6:	d901      	bls.n	8009eac <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009ea8:	2303      	movs	r3, #3
 8009eaa:	e2d3      	b.n	800a454 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009eac:	4b11      	ldr	r3, [pc, #68]	; (8009ef4 <HAL_RCC_OscConfig+0x244>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f003 0304 	and.w	r3, r3, #4
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d0f0      	beq.n	8009e9a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009eb8:	4b0e      	ldr	r3, [pc, #56]	; (8009ef4 <HAL_RCC_OscConfig+0x244>)
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	691b      	ldr	r3, [r3, #16]
 8009ec4:	061b      	lsls	r3, r3, #24
 8009ec6:	490b      	ldr	r1, [pc, #44]	; (8009ef4 <HAL_RCC_OscConfig+0x244>)
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	604b      	str	r3, [r1, #4]
 8009ecc:	e01a      	b.n	8009f04 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009ece:	4b09      	ldr	r3, [pc, #36]	; (8009ef4 <HAL_RCC_OscConfig+0x244>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4a08      	ldr	r2, [pc, #32]	; (8009ef4 <HAL_RCC_OscConfig+0x244>)
 8009ed4:	f023 0301 	bic.w	r3, r3, #1
 8009ed8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009eda:	f7f9 ffe7 	bl	8003eac <HAL_GetTick>
 8009ede:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009ee0:	e00a      	b.n	8009ef8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009ee2:	f7f9 ffe3 	bl	8003eac <HAL_GetTick>
 8009ee6:	4602      	mov	r2, r0
 8009ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eea:	1ad3      	subs	r3, r2, r3
 8009eec:	2b02      	cmp	r3, #2
 8009eee:	d903      	bls.n	8009ef8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009ef0:	2303      	movs	r3, #3
 8009ef2:	e2af      	b.n	800a454 <HAL_RCC_OscConfig+0x7a4>
 8009ef4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009ef8:	4b96      	ldr	r3, [pc, #600]	; (800a154 <HAL_RCC_OscConfig+0x4a4>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f003 0304 	and.w	r3, r3, #4
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d1ee      	bne.n	8009ee2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f003 0310 	and.w	r3, r3, #16
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d06a      	beq.n	8009fe6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009f10:	4b90      	ldr	r3, [pc, #576]	; (800a154 <HAL_RCC_OscConfig+0x4a4>)
 8009f12:	691b      	ldr	r3, [r3, #16]
 8009f14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f18:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009f1a:	4b8e      	ldr	r3, [pc, #568]	; (800a154 <HAL_RCC_OscConfig+0x4a4>)
 8009f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f1e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009f20:	69bb      	ldr	r3, [r7, #24]
 8009f22:	2b08      	cmp	r3, #8
 8009f24:	d007      	beq.n	8009f36 <HAL_RCC_OscConfig+0x286>
 8009f26:	69bb      	ldr	r3, [r7, #24]
 8009f28:	2b18      	cmp	r3, #24
 8009f2a:	d11b      	bne.n	8009f64 <HAL_RCC_OscConfig+0x2b4>
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	f003 0303 	and.w	r3, r3, #3
 8009f32:	2b01      	cmp	r3, #1
 8009f34:	d116      	bne.n	8009f64 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009f36:	4b87      	ldr	r3, [pc, #540]	; (800a154 <HAL_RCC_OscConfig+0x4a4>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d005      	beq.n	8009f4e <HAL_RCC_OscConfig+0x29e>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	69db      	ldr	r3, [r3, #28]
 8009f46:	2b80      	cmp	r3, #128	; 0x80
 8009f48:	d001      	beq.n	8009f4e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	e282      	b.n	800a454 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009f4e:	4b81      	ldr	r3, [pc, #516]	; (800a154 <HAL_RCC_OscConfig+0x4a4>)
 8009f50:	68db      	ldr	r3, [r3, #12]
 8009f52:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6a1b      	ldr	r3, [r3, #32]
 8009f5a:	061b      	lsls	r3, r3, #24
 8009f5c:	497d      	ldr	r1, [pc, #500]	; (800a154 <HAL_RCC_OscConfig+0x4a4>)
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009f62:	e040      	b.n	8009fe6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	69db      	ldr	r3, [r3, #28]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d023      	beq.n	8009fb4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009f6c:	4b79      	ldr	r3, [pc, #484]	; (800a154 <HAL_RCC_OscConfig+0x4a4>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4a78      	ldr	r2, [pc, #480]	; (800a154 <HAL_RCC_OscConfig+0x4a4>)
 8009f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f78:	f7f9 ff98 	bl	8003eac <HAL_GetTick>
 8009f7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009f7e:	e008      	b.n	8009f92 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009f80:	f7f9 ff94 	bl	8003eac <HAL_GetTick>
 8009f84:	4602      	mov	r2, r0
 8009f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f88:	1ad3      	subs	r3, r2, r3
 8009f8a:	2b02      	cmp	r3, #2
 8009f8c:	d901      	bls.n	8009f92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009f8e:	2303      	movs	r3, #3
 8009f90:	e260      	b.n	800a454 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009f92:	4b70      	ldr	r3, [pc, #448]	; (800a154 <HAL_RCC_OscConfig+0x4a4>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d0f0      	beq.n	8009f80 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009f9e:	4b6d      	ldr	r3, [pc, #436]	; (800a154 <HAL_RCC_OscConfig+0x4a4>)
 8009fa0:	68db      	ldr	r3, [r3, #12]
 8009fa2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6a1b      	ldr	r3, [r3, #32]
 8009faa:	061b      	lsls	r3, r3, #24
 8009fac:	4969      	ldr	r1, [pc, #420]	; (800a154 <HAL_RCC_OscConfig+0x4a4>)
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	60cb      	str	r3, [r1, #12]
 8009fb2:	e018      	b.n	8009fe6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009fb4:	4b67      	ldr	r3, [pc, #412]	; (800a154 <HAL_RCC_OscConfig+0x4a4>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4a66      	ldr	r2, [pc, #408]	; (800a154 <HAL_RCC_OscConfig+0x4a4>)
 8009fba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fc0:	f7f9 ff74 	bl	8003eac <HAL_GetTick>
 8009fc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009fc6:	e008      	b.n	8009fda <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009fc8:	f7f9 ff70 	bl	8003eac <HAL_GetTick>
 8009fcc:	4602      	mov	r2, r0
 8009fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd0:	1ad3      	subs	r3, r2, r3
 8009fd2:	2b02      	cmp	r3, #2
 8009fd4:	d901      	bls.n	8009fda <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009fd6:	2303      	movs	r3, #3
 8009fd8:	e23c      	b.n	800a454 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009fda:	4b5e      	ldr	r3, [pc, #376]	; (800a154 <HAL_RCC_OscConfig+0x4a4>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d1f0      	bne.n	8009fc8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f003 0308 	and.w	r3, r3, #8
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d036      	beq.n	800a060 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	695b      	ldr	r3, [r3, #20]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d019      	beq.n	800a02e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009ffa:	4b56      	ldr	r3, [pc, #344]	; (800a154 <HAL_RCC_OscConfig+0x4a4>)
 8009ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ffe:	4a55      	ldr	r2, [pc, #340]	; (800a154 <HAL_RCC_OscConfig+0x4a4>)
 800a000:	f043 0301 	orr.w	r3, r3, #1
 800a004:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a006:	f7f9 ff51 	bl	8003eac <HAL_GetTick>
 800a00a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a00c:	e008      	b.n	800a020 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a00e:	f7f9 ff4d 	bl	8003eac <HAL_GetTick>
 800a012:	4602      	mov	r2, r0
 800a014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a016:	1ad3      	subs	r3, r2, r3
 800a018:	2b02      	cmp	r3, #2
 800a01a:	d901      	bls.n	800a020 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800a01c:	2303      	movs	r3, #3
 800a01e:	e219      	b.n	800a454 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a020:	4b4c      	ldr	r3, [pc, #304]	; (800a154 <HAL_RCC_OscConfig+0x4a4>)
 800a022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a024:	f003 0302 	and.w	r3, r3, #2
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d0f0      	beq.n	800a00e <HAL_RCC_OscConfig+0x35e>
 800a02c:	e018      	b.n	800a060 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a02e:	4b49      	ldr	r3, [pc, #292]	; (800a154 <HAL_RCC_OscConfig+0x4a4>)
 800a030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a032:	4a48      	ldr	r2, [pc, #288]	; (800a154 <HAL_RCC_OscConfig+0x4a4>)
 800a034:	f023 0301 	bic.w	r3, r3, #1
 800a038:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a03a:	f7f9 ff37 	bl	8003eac <HAL_GetTick>
 800a03e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a040:	e008      	b.n	800a054 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a042:	f7f9 ff33 	bl	8003eac <HAL_GetTick>
 800a046:	4602      	mov	r2, r0
 800a048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a04a:	1ad3      	subs	r3, r2, r3
 800a04c:	2b02      	cmp	r3, #2
 800a04e:	d901      	bls.n	800a054 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800a050:	2303      	movs	r3, #3
 800a052:	e1ff      	b.n	800a454 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a054:	4b3f      	ldr	r3, [pc, #252]	; (800a154 <HAL_RCC_OscConfig+0x4a4>)
 800a056:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a058:	f003 0302 	and.w	r3, r3, #2
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d1f0      	bne.n	800a042 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f003 0320 	and.w	r3, r3, #32
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d036      	beq.n	800a0da <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	699b      	ldr	r3, [r3, #24]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d019      	beq.n	800a0a8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a074:	4b37      	ldr	r3, [pc, #220]	; (800a154 <HAL_RCC_OscConfig+0x4a4>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a36      	ldr	r2, [pc, #216]	; (800a154 <HAL_RCC_OscConfig+0x4a4>)
 800a07a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a07e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a080:	f7f9 ff14 	bl	8003eac <HAL_GetTick>
 800a084:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a086:	e008      	b.n	800a09a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a088:	f7f9 ff10 	bl	8003eac <HAL_GetTick>
 800a08c:	4602      	mov	r2, r0
 800a08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a090:	1ad3      	subs	r3, r2, r3
 800a092:	2b02      	cmp	r3, #2
 800a094:	d901      	bls.n	800a09a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800a096:	2303      	movs	r3, #3
 800a098:	e1dc      	b.n	800a454 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a09a:	4b2e      	ldr	r3, [pc, #184]	; (800a154 <HAL_RCC_OscConfig+0x4a4>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d0f0      	beq.n	800a088 <HAL_RCC_OscConfig+0x3d8>
 800a0a6:	e018      	b.n	800a0da <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a0a8:	4b2a      	ldr	r3, [pc, #168]	; (800a154 <HAL_RCC_OscConfig+0x4a4>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4a29      	ldr	r2, [pc, #164]	; (800a154 <HAL_RCC_OscConfig+0x4a4>)
 800a0ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a0b2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a0b4:	f7f9 fefa 	bl	8003eac <HAL_GetTick>
 800a0b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a0ba:	e008      	b.n	800a0ce <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a0bc:	f7f9 fef6 	bl	8003eac <HAL_GetTick>
 800a0c0:	4602      	mov	r2, r0
 800a0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c4:	1ad3      	subs	r3, r2, r3
 800a0c6:	2b02      	cmp	r3, #2
 800a0c8:	d901      	bls.n	800a0ce <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800a0ca:	2303      	movs	r3, #3
 800a0cc:	e1c2      	b.n	800a454 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a0ce:	4b21      	ldr	r3, [pc, #132]	; (800a154 <HAL_RCC_OscConfig+0x4a4>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d1f0      	bne.n	800a0bc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f003 0304 	and.w	r3, r3, #4
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	f000 8086 	beq.w	800a1f4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a0e8:	4b1b      	ldr	r3, [pc, #108]	; (800a158 <HAL_RCC_OscConfig+0x4a8>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4a1a      	ldr	r2, [pc, #104]	; (800a158 <HAL_RCC_OscConfig+0x4a8>)
 800a0ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a0f4:	f7f9 feda 	bl	8003eac <HAL_GetTick>
 800a0f8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a0fa:	e008      	b.n	800a10e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a0fc:	f7f9 fed6 	bl	8003eac <HAL_GetTick>
 800a100:	4602      	mov	r2, r0
 800a102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a104:	1ad3      	subs	r3, r2, r3
 800a106:	2b64      	cmp	r3, #100	; 0x64
 800a108:	d901      	bls.n	800a10e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800a10a:	2303      	movs	r3, #3
 800a10c:	e1a2      	b.n	800a454 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a10e:	4b12      	ldr	r3, [pc, #72]	; (800a158 <HAL_RCC_OscConfig+0x4a8>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a116:	2b00      	cmp	r3, #0
 800a118:	d0f0      	beq.n	800a0fc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	689b      	ldr	r3, [r3, #8]
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d106      	bne.n	800a130 <HAL_RCC_OscConfig+0x480>
 800a122:	4b0c      	ldr	r3, [pc, #48]	; (800a154 <HAL_RCC_OscConfig+0x4a4>)
 800a124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a126:	4a0b      	ldr	r2, [pc, #44]	; (800a154 <HAL_RCC_OscConfig+0x4a4>)
 800a128:	f043 0301 	orr.w	r3, r3, #1
 800a12c:	6713      	str	r3, [r2, #112]	; 0x70
 800a12e:	e032      	b.n	800a196 <HAL_RCC_OscConfig+0x4e6>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	689b      	ldr	r3, [r3, #8]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d111      	bne.n	800a15c <HAL_RCC_OscConfig+0x4ac>
 800a138:	4b06      	ldr	r3, [pc, #24]	; (800a154 <HAL_RCC_OscConfig+0x4a4>)
 800a13a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a13c:	4a05      	ldr	r2, [pc, #20]	; (800a154 <HAL_RCC_OscConfig+0x4a4>)
 800a13e:	f023 0301 	bic.w	r3, r3, #1
 800a142:	6713      	str	r3, [r2, #112]	; 0x70
 800a144:	4b03      	ldr	r3, [pc, #12]	; (800a154 <HAL_RCC_OscConfig+0x4a4>)
 800a146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a148:	4a02      	ldr	r2, [pc, #8]	; (800a154 <HAL_RCC_OscConfig+0x4a4>)
 800a14a:	f023 0304 	bic.w	r3, r3, #4
 800a14e:	6713      	str	r3, [r2, #112]	; 0x70
 800a150:	e021      	b.n	800a196 <HAL_RCC_OscConfig+0x4e6>
 800a152:	bf00      	nop
 800a154:	58024400 	.word	0x58024400
 800a158:	58024800 	.word	0x58024800
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	689b      	ldr	r3, [r3, #8]
 800a160:	2b05      	cmp	r3, #5
 800a162:	d10c      	bne.n	800a17e <HAL_RCC_OscConfig+0x4ce>
 800a164:	4b83      	ldr	r3, [pc, #524]	; (800a374 <HAL_RCC_OscConfig+0x6c4>)
 800a166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a168:	4a82      	ldr	r2, [pc, #520]	; (800a374 <HAL_RCC_OscConfig+0x6c4>)
 800a16a:	f043 0304 	orr.w	r3, r3, #4
 800a16e:	6713      	str	r3, [r2, #112]	; 0x70
 800a170:	4b80      	ldr	r3, [pc, #512]	; (800a374 <HAL_RCC_OscConfig+0x6c4>)
 800a172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a174:	4a7f      	ldr	r2, [pc, #508]	; (800a374 <HAL_RCC_OscConfig+0x6c4>)
 800a176:	f043 0301 	orr.w	r3, r3, #1
 800a17a:	6713      	str	r3, [r2, #112]	; 0x70
 800a17c:	e00b      	b.n	800a196 <HAL_RCC_OscConfig+0x4e6>
 800a17e:	4b7d      	ldr	r3, [pc, #500]	; (800a374 <HAL_RCC_OscConfig+0x6c4>)
 800a180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a182:	4a7c      	ldr	r2, [pc, #496]	; (800a374 <HAL_RCC_OscConfig+0x6c4>)
 800a184:	f023 0301 	bic.w	r3, r3, #1
 800a188:	6713      	str	r3, [r2, #112]	; 0x70
 800a18a:	4b7a      	ldr	r3, [pc, #488]	; (800a374 <HAL_RCC_OscConfig+0x6c4>)
 800a18c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a18e:	4a79      	ldr	r2, [pc, #484]	; (800a374 <HAL_RCC_OscConfig+0x6c4>)
 800a190:	f023 0304 	bic.w	r3, r3, #4
 800a194:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	689b      	ldr	r3, [r3, #8]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d015      	beq.n	800a1ca <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a19e:	f7f9 fe85 	bl	8003eac <HAL_GetTick>
 800a1a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a1a4:	e00a      	b.n	800a1bc <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1a6:	f7f9 fe81 	bl	8003eac <HAL_GetTick>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ae:	1ad3      	subs	r3, r2, r3
 800a1b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d901      	bls.n	800a1bc <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800a1b8:	2303      	movs	r3, #3
 800a1ba:	e14b      	b.n	800a454 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a1bc:	4b6d      	ldr	r3, [pc, #436]	; (800a374 <HAL_RCC_OscConfig+0x6c4>)
 800a1be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1c0:	f003 0302 	and.w	r3, r3, #2
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d0ee      	beq.n	800a1a6 <HAL_RCC_OscConfig+0x4f6>
 800a1c8:	e014      	b.n	800a1f4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1ca:	f7f9 fe6f 	bl	8003eac <HAL_GetTick>
 800a1ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a1d0:	e00a      	b.n	800a1e8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1d2:	f7f9 fe6b 	bl	8003eac <HAL_GetTick>
 800a1d6:	4602      	mov	r2, r0
 800a1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1da:	1ad3      	subs	r3, r2, r3
 800a1dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d901      	bls.n	800a1e8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800a1e4:	2303      	movs	r3, #3
 800a1e6:	e135      	b.n	800a454 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a1e8:	4b62      	ldr	r3, [pc, #392]	; (800a374 <HAL_RCC_OscConfig+0x6c4>)
 800a1ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1ec:	f003 0302 	and.w	r3, r3, #2
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d1ee      	bne.n	800a1d2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	f000 812a 	beq.w	800a452 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a1fe:	4b5d      	ldr	r3, [pc, #372]	; (800a374 <HAL_RCC_OscConfig+0x6c4>)
 800a200:	691b      	ldr	r3, [r3, #16]
 800a202:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a206:	2b18      	cmp	r3, #24
 800a208:	f000 80ba 	beq.w	800a380 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a210:	2b02      	cmp	r3, #2
 800a212:	f040 8095 	bne.w	800a340 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a216:	4b57      	ldr	r3, [pc, #348]	; (800a374 <HAL_RCC_OscConfig+0x6c4>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4a56      	ldr	r2, [pc, #344]	; (800a374 <HAL_RCC_OscConfig+0x6c4>)
 800a21c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a220:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a222:	f7f9 fe43 	bl	8003eac <HAL_GetTick>
 800a226:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a228:	e008      	b.n	800a23c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a22a:	f7f9 fe3f 	bl	8003eac <HAL_GetTick>
 800a22e:	4602      	mov	r2, r0
 800a230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a232:	1ad3      	subs	r3, r2, r3
 800a234:	2b02      	cmp	r3, #2
 800a236:	d901      	bls.n	800a23c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800a238:	2303      	movs	r3, #3
 800a23a:	e10b      	b.n	800a454 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a23c:	4b4d      	ldr	r3, [pc, #308]	; (800a374 <HAL_RCC_OscConfig+0x6c4>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a244:	2b00      	cmp	r3, #0
 800a246:	d1f0      	bne.n	800a22a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a248:	4b4a      	ldr	r3, [pc, #296]	; (800a374 <HAL_RCC_OscConfig+0x6c4>)
 800a24a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a24c:	4b4a      	ldr	r3, [pc, #296]	; (800a378 <HAL_RCC_OscConfig+0x6c8>)
 800a24e:	4013      	ands	r3, r2
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a254:	687a      	ldr	r2, [r7, #4]
 800a256:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a258:	0112      	lsls	r2, r2, #4
 800a25a:	430a      	orrs	r2, r1
 800a25c:	4945      	ldr	r1, [pc, #276]	; (800a374 <HAL_RCC_OscConfig+0x6c4>)
 800a25e:	4313      	orrs	r3, r2
 800a260:	628b      	str	r3, [r1, #40]	; 0x28
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a266:	3b01      	subs	r3, #1
 800a268:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a270:	3b01      	subs	r3, #1
 800a272:	025b      	lsls	r3, r3, #9
 800a274:	b29b      	uxth	r3, r3
 800a276:	431a      	orrs	r2, r3
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a27c:	3b01      	subs	r3, #1
 800a27e:	041b      	lsls	r3, r3, #16
 800a280:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a284:	431a      	orrs	r2, r3
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a28a:	3b01      	subs	r3, #1
 800a28c:	061b      	lsls	r3, r3, #24
 800a28e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a292:	4938      	ldr	r1, [pc, #224]	; (800a374 <HAL_RCC_OscConfig+0x6c4>)
 800a294:	4313      	orrs	r3, r2
 800a296:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a298:	4b36      	ldr	r3, [pc, #216]	; (800a374 <HAL_RCC_OscConfig+0x6c4>)
 800a29a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a29c:	4a35      	ldr	r2, [pc, #212]	; (800a374 <HAL_RCC_OscConfig+0x6c4>)
 800a29e:	f023 0301 	bic.w	r3, r3, #1
 800a2a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a2a4:	4b33      	ldr	r3, [pc, #204]	; (800a374 <HAL_RCC_OscConfig+0x6c4>)
 800a2a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2a8:	4b34      	ldr	r3, [pc, #208]	; (800a37c <HAL_RCC_OscConfig+0x6cc>)
 800a2aa:	4013      	ands	r3, r2
 800a2ac:	687a      	ldr	r2, [r7, #4]
 800a2ae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a2b0:	00d2      	lsls	r2, r2, #3
 800a2b2:	4930      	ldr	r1, [pc, #192]	; (800a374 <HAL_RCC_OscConfig+0x6c4>)
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a2b8:	4b2e      	ldr	r3, [pc, #184]	; (800a374 <HAL_RCC_OscConfig+0x6c4>)
 800a2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2bc:	f023 020c 	bic.w	r2, r3, #12
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2c4:	492b      	ldr	r1, [pc, #172]	; (800a374 <HAL_RCC_OscConfig+0x6c4>)
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a2ca:	4b2a      	ldr	r3, [pc, #168]	; (800a374 <HAL_RCC_OscConfig+0x6c4>)
 800a2cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ce:	f023 0202 	bic.w	r2, r3, #2
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2d6:	4927      	ldr	r1, [pc, #156]	; (800a374 <HAL_RCC_OscConfig+0x6c4>)
 800a2d8:	4313      	orrs	r3, r2
 800a2da:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a2dc:	4b25      	ldr	r3, [pc, #148]	; (800a374 <HAL_RCC_OscConfig+0x6c4>)
 800a2de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e0:	4a24      	ldr	r2, [pc, #144]	; (800a374 <HAL_RCC_OscConfig+0x6c4>)
 800a2e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2e8:	4b22      	ldr	r3, [pc, #136]	; (800a374 <HAL_RCC_OscConfig+0x6c4>)
 800a2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ec:	4a21      	ldr	r2, [pc, #132]	; (800a374 <HAL_RCC_OscConfig+0x6c4>)
 800a2ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a2f4:	4b1f      	ldr	r3, [pc, #124]	; (800a374 <HAL_RCC_OscConfig+0x6c4>)
 800a2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f8:	4a1e      	ldr	r2, [pc, #120]	; (800a374 <HAL_RCC_OscConfig+0x6c4>)
 800a2fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a2fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a300:	4b1c      	ldr	r3, [pc, #112]	; (800a374 <HAL_RCC_OscConfig+0x6c4>)
 800a302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a304:	4a1b      	ldr	r2, [pc, #108]	; (800a374 <HAL_RCC_OscConfig+0x6c4>)
 800a306:	f043 0301 	orr.w	r3, r3, #1
 800a30a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a30c:	4b19      	ldr	r3, [pc, #100]	; (800a374 <HAL_RCC_OscConfig+0x6c4>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4a18      	ldr	r2, [pc, #96]	; (800a374 <HAL_RCC_OscConfig+0x6c4>)
 800a312:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a318:	f7f9 fdc8 	bl	8003eac <HAL_GetTick>
 800a31c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a31e:	e008      	b.n	800a332 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a320:	f7f9 fdc4 	bl	8003eac <HAL_GetTick>
 800a324:	4602      	mov	r2, r0
 800a326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a328:	1ad3      	subs	r3, r2, r3
 800a32a:	2b02      	cmp	r3, #2
 800a32c:	d901      	bls.n	800a332 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800a32e:	2303      	movs	r3, #3
 800a330:	e090      	b.n	800a454 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a332:	4b10      	ldr	r3, [pc, #64]	; (800a374 <HAL_RCC_OscConfig+0x6c4>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d0f0      	beq.n	800a320 <HAL_RCC_OscConfig+0x670>
 800a33e:	e088      	b.n	800a452 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a340:	4b0c      	ldr	r3, [pc, #48]	; (800a374 <HAL_RCC_OscConfig+0x6c4>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a0b      	ldr	r2, [pc, #44]	; (800a374 <HAL_RCC_OscConfig+0x6c4>)
 800a346:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a34a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a34c:	f7f9 fdae 	bl	8003eac <HAL_GetTick>
 800a350:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a352:	e008      	b.n	800a366 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a354:	f7f9 fdaa 	bl	8003eac <HAL_GetTick>
 800a358:	4602      	mov	r2, r0
 800a35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a35c:	1ad3      	subs	r3, r2, r3
 800a35e:	2b02      	cmp	r3, #2
 800a360:	d901      	bls.n	800a366 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800a362:	2303      	movs	r3, #3
 800a364:	e076      	b.n	800a454 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a366:	4b03      	ldr	r3, [pc, #12]	; (800a374 <HAL_RCC_OscConfig+0x6c4>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d1f0      	bne.n	800a354 <HAL_RCC_OscConfig+0x6a4>
 800a372:	e06e      	b.n	800a452 <HAL_RCC_OscConfig+0x7a2>
 800a374:	58024400 	.word	0x58024400
 800a378:	fffffc0c 	.word	0xfffffc0c
 800a37c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a380:	4b36      	ldr	r3, [pc, #216]	; (800a45c <HAL_RCC_OscConfig+0x7ac>)
 800a382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a384:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a386:	4b35      	ldr	r3, [pc, #212]	; (800a45c <HAL_RCC_OscConfig+0x7ac>)
 800a388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a38a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a390:	2b01      	cmp	r3, #1
 800a392:	d031      	beq.n	800a3f8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	f003 0203 	and.w	r2, r3, #3
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a39e:	429a      	cmp	r2, r3
 800a3a0:	d12a      	bne.n	800a3f8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	091b      	lsrs	r3, r3, #4
 800a3a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d122      	bne.n	800a3f8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3bc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a3be:	429a      	cmp	r2, r3
 800a3c0:	d11a      	bne.n	800a3f8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	0a5b      	lsrs	r3, r3, #9
 800a3c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ce:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d111      	bne.n	800a3f8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	0c1b      	lsrs	r3, r3, #16
 800a3d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d108      	bne.n	800a3f8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	0e1b      	lsrs	r3, r3, #24
 800a3ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3f2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d001      	beq.n	800a3fc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	e02b      	b.n	800a454 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a3fc:	4b17      	ldr	r3, [pc, #92]	; (800a45c <HAL_RCC_OscConfig+0x7ac>)
 800a3fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a400:	08db      	lsrs	r3, r3, #3
 800a402:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a406:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a40c:	693a      	ldr	r2, [r7, #16]
 800a40e:	429a      	cmp	r2, r3
 800a410:	d01f      	beq.n	800a452 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a412:	4b12      	ldr	r3, [pc, #72]	; (800a45c <HAL_RCC_OscConfig+0x7ac>)
 800a414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a416:	4a11      	ldr	r2, [pc, #68]	; (800a45c <HAL_RCC_OscConfig+0x7ac>)
 800a418:	f023 0301 	bic.w	r3, r3, #1
 800a41c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a41e:	f7f9 fd45 	bl	8003eac <HAL_GetTick>
 800a422:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a424:	bf00      	nop
 800a426:	f7f9 fd41 	bl	8003eac <HAL_GetTick>
 800a42a:	4602      	mov	r2, r0
 800a42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42e:	4293      	cmp	r3, r2
 800a430:	d0f9      	beq.n	800a426 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a432:	4b0a      	ldr	r3, [pc, #40]	; (800a45c <HAL_RCC_OscConfig+0x7ac>)
 800a434:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a436:	4b0a      	ldr	r3, [pc, #40]	; (800a460 <HAL_RCC_OscConfig+0x7b0>)
 800a438:	4013      	ands	r3, r2
 800a43a:	687a      	ldr	r2, [r7, #4]
 800a43c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a43e:	00d2      	lsls	r2, r2, #3
 800a440:	4906      	ldr	r1, [pc, #24]	; (800a45c <HAL_RCC_OscConfig+0x7ac>)
 800a442:	4313      	orrs	r3, r2
 800a444:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a446:	4b05      	ldr	r3, [pc, #20]	; (800a45c <HAL_RCC_OscConfig+0x7ac>)
 800a448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a44a:	4a04      	ldr	r2, [pc, #16]	; (800a45c <HAL_RCC_OscConfig+0x7ac>)
 800a44c:	f043 0301 	orr.w	r3, r3, #1
 800a450:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a452:	2300      	movs	r3, #0
}
 800a454:	4618      	mov	r0, r3
 800a456:	3730      	adds	r7, #48	; 0x30
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}
 800a45c:	58024400 	.word	0x58024400
 800a460:	ffff0007 	.word	0xffff0007

0800a464 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b086      	sub	sp, #24
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d101      	bne.n	800a478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a474:	2301      	movs	r3, #1
 800a476:	e19c      	b.n	800a7b2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a478:	4b8a      	ldr	r3, [pc, #552]	; (800a6a4 <HAL_RCC_ClockConfig+0x240>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f003 030f 	and.w	r3, r3, #15
 800a480:	683a      	ldr	r2, [r7, #0]
 800a482:	429a      	cmp	r2, r3
 800a484:	d910      	bls.n	800a4a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a486:	4b87      	ldr	r3, [pc, #540]	; (800a6a4 <HAL_RCC_ClockConfig+0x240>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f023 020f 	bic.w	r2, r3, #15
 800a48e:	4985      	ldr	r1, [pc, #532]	; (800a6a4 <HAL_RCC_ClockConfig+0x240>)
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	4313      	orrs	r3, r2
 800a494:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a496:	4b83      	ldr	r3, [pc, #524]	; (800a6a4 <HAL_RCC_ClockConfig+0x240>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f003 030f 	and.w	r3, r3, #15
 800a49e:	683a      	ldr	r2, [r7, #0]
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	d001      	beq.n	800a4a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	e184      	b.n	800a7b2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f003 0304 	and.w	r3, r3, #4
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d010      	beq.n	800a4d6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	691a      	ldr	r2, [r3, #16]
 800a4b8:	4b7b      	ldr	r3, [pc, #492]	; (800a6a8 <HAL_RCC_ClockConfig+0x244>)
 800a4ba:	699b      	ldr	r3, [r3, #24]
 800a4bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d908      	bls.n	800a4d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a4c4:	4b78      	ldr	r3, [pc, #480]	; (800a6a8 <HAL_RCC_ClockConfig+0x244>)
 800a4c6:	699b      	ldr	r3, [r3, #24]
 800a4c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	691b      	ldr	r3, [r3, #16]
 800a4d0:	4975      	ldr	r1, [pc, #468]	; (800a6a8 <HAL_RCC_ClockConfig+0x244>)
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f003 0308 	and.w	r3, r3, #8
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d010      	beq.n	800a504 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	695a      	ldr	r2, [r3, #20]
 800a4e6:	4b70      	ldr	r3, [pc, #448]	; (800a6a8 <HAL_RCC_ClockConfig+0x244>)
 800a4e8:	69db      	ldr	r3, [r3, #28]
 800a4ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	d908      	bls.n	800a504 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a4f2:	4b6d      	ldr	r3, [pc, #436]	; (800a6a8 <HAL_RCC_ClockConfig+0x244>)
 800a4f4:	69db      	ldr	r3, [r3, #28]
 800a4f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	695b      	ldr	r3, [r3, #20]
 800a4fe:	496a      	ldr	r1, [pc, #424]	; (800a6a8 <HAL_RCC_ClockConfig+0x244>)
 800a500:	4313      	orrs	r3, r2
 800a502:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f003 0310 	and.w	r3, r3, #16
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d010      	beq.n	800a532 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	699a      	ldr	r2, [r3, #24]
 800a514:	4b64      	ldr	r3, [pc, #400]	; (800a6a8 <HAL_RCC_ClockConfig+0x244>)
 800a516:	69db      	ldr	r3, [r3, #28]
 800a518:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d908      	bls.n	800a532 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a520:	4b61      	ldr	r3, [pc, #388]	; (800a6a8 <HAL_RCC_ClockConfig+0x244>)
 800a522:	69db      	ldr	r3, [r3, #28]
 800a524:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	699b      	ldr	r3, [r3, #24]
 800a52c:	495e      	ldr	r1, [pc, #376]	; (800a6a8 <HAL_RCC_ClockConfig+0x244>)
 800a52e:	4313      	orrs	r3, r2
 800a530:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f003 0320 	and.w	r3, r3, #32
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d010      	beq.n	800a560 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	69da      	ldr	r2, [r3, #28]
 800a542:	4b59      	ldr	r3, [pc, #356]	; (800a6a8 <HAL_RCC_ClockConfig+0x244>)
 800a544:	6a1b      	ldr	r3, [r3, #32]
 800a546:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d908      	bls.n	800a560 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a54e:	4b56      	ldr	r3, [pc, #344]	; (800a6a8 <HAL_RCC_ClockConfig+0x244>)
 800a550:	6a1b      	ldr	r3, [r3, #32]
 800a552:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	69db      	ldr	r3, [r3, #28]
 800a55a:	4953      	ldr	r1, [pc, #332]	; (800a6a8 <HAL_RCC_ClockConfig+0x244>)
 800a55c:	4313      	orrs	r3, r2
 800a55e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f003 0302 	and.w	r3, r3, #2
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d010      	beq.n	800a58e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	68da      	ldr	r2, [r3, #12]
 800a570:	4b4d      	ldr	r3, [pc, #308]	; (800a6a8 <HAL_RCC_ClockConfig+0x244>)
 800a572:	699b      	ldr	r3, [r3, #24]
 800a574:	f003 030f 	and.w	r3, r3, #15
 800a578:	429a      	cmp	r2, r3
 800a57a:	d908      	bls.n	800a58e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a57c:	4b4a      	ldr	r3, [pc, #296]	; (800a6a8 <HAL_RCC_ClockConfig+0x244>)
 800a57e:	699b      	ldr	r3, [r3, #24]
 800a580:	f023 020f 	bic.w	r2, r3, #15
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	68db      	ldr	r3, [r3, #12]
 800a588:	4947      	ldr	r1, [pc, #284]	; (800a6a8 <HAL_RCC_ClockConfig+0x244>)
 800a58a:	4313      	orrs	r3, r2
 800a58c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f003 0301 	and.w	r3, r3, #1
 800a596:	2b00      	cmp	r3, #0
 800a598:	d055      	beq.n	800a646 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a59a:	4b43      	ldr	r3, [pc, #268]	; (800a6a8 <HAL_RCC_ClockConfig+0x244>)
 800a59c:	699b      	ldr	r3, [r3, #24]
 800a59e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	689b      	ldr	r3, [r3, #8]
 800a5a6:	4940      	ldr	r1, [pc, #256]	; (800a6a8 <HAL_RCC_ClockConfig+0x244>)
 800a5a8:	4313      	orrs	r3, r2
 800a5aa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	2b02      	cmp	r3, #2
 800a5b2:	d107      	bne.n	800a5c4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a5b4:	4b3c      	ldr	r3, [pc, #240]	; (800a6a8 <HAL_RCC_ClockConfig+0x244>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d121      	bne.n	800a604 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	e0f6      	b.n	800a7b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	2b03      	cmp	r3, #3
 800a5ca:	d107      	bne.n	800a5dc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a5cc:	4b36      	ldr	r3, [pc, #216]	; (800a6a8 <HAL_RCC_ClockConfig+0x244>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d115      	bne.n	800a604 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	e0ea      	b.n	800a7b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	2b01      	cmp	r3, #1
 800a5e2:	d107      	bne.n	800a5f4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a5e4:	4b30      	ldr	r3, [pc, #192]	; (800a6a8 <HAL_RCC_ClockConfig+0x244>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d109      	bne.n	800a604 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	e0de      	b.n	800a7b2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a5f4:	4b2c      	ldr	r3, [pc, #176]	; (800a6a8 <HAL_RCC_ClockConfig+0x244>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f003 0304 	and.w	r3, r3, #4
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d101      	bne.n	800a604 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a600:	2301      	movs	r3, #1
 800a602:	e0d6      	b.n	800a7b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a604:	4b28      	ldr	r3, [pc, #160]	; (800a6a8 <HAL_RCC_ClockConfig+0x244>)
 800a606:	691b      	ldr	r3, [r3, #16]
 800a608:	f023 0207 	bic.w	r2, r3, #7
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	4925      	ldr	r1, [pc, #148]	; (800a6a8 <HAL_RCC_ClockConfig+0x244>)
 800a612:	4313      	orrs	r3, r2
 800a614:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a616:	f7f9 fc49 	bl	8003eac <HAL_GetTick>
 800a61a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a61c:	e00a      	b.n	800a634 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a61e:	f7f9 fc45 	bl	8003eac <HAL_GetTick>
 800a622:	4602      	mov	r2, r0
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	1ad3      	subs	r3, r2, r3
 800a628:	f241 3288 	movw	r2, #5000	; 0x1388
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d901      	bls.n	800a634 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a630:	2303      	movs	r3, #3
 800a632:	e0be      	b.n	800a7b2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a634:	4b1c      	ldr	r3, [pc, #112]	; (800a6a8 <HAL_RCC_ClockConfig+0x244>)
 800a636:	691b      	ldr	r3, [r3, #16]
 800a638:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	00db      	lsls	r3, r3, #3
 800a642:	429a      	cmp	r2, r3
 800a644:	d1eb      	bne.n	800a61e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f003 0302 	and.w	r3, r3, #2
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d010      	beq.n	800a674 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	68da      	ldr	r2, [r3, #12]
 800a656:	4b14      	ldr	r3, [pc, #80]	; (800a6a8 <HAL_RCC_ClockConfig+0x244>)
 800a658:	699b      	ldr	r3, [r3, #24]
 800a65a:	f003 030f 	and.w	r3, r3, #15
 800a65e:	429a      	cmp	r2, r3
 800a660:	d208      	bcs.n	800a674 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a662:	4b11      	ldr	r3, [pc, #68]	; (800a6a8 <HAL_RCC_ClockConfig+0x244>)
 800a664:	699b      	ldr	r3, [r3, #24]
 800a666:	f023 020f 	bic.w	r2, r3, #15
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	68db      	ldr	r3, [r3, #12]
 800a66e:	490e      	ldr	r1, [pc, #56]	; (800a6a8 <HAL_RCC_ClockConfig+0x244>)
 800a670:	4313      	orrs	r3, r2
 800a672:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a674:	4b0b      	ldr	r3, [pc, #44]	; (800a6a4 <HAL_RCC_ClockConfig+0x240>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f003 030f 	and.w	r3, r3, #15
 800a67c:	683a      	ldr	r2, [r7, #0]
 800a67e:	429a      	cmp	r2, r3
 800a680:	d214      	bcs.n	800a6ac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a682:	4b08      	ldr	r3, [pc, #32]	; (800a6a4 <HAL_RCC_ClockConfig+0x240>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f023 020f 	bic.w	r2, r3, #15
 800a68a:	4906      	ldr	r1, [pc, #24]	; (800a6a4 <HAL_RCC_ClockConfig+0x240>)
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	4313      	orrs	r3, r2
 800a690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a692:	4b04      	ldr	r3, [pc, #16]	; (800a6a4 <HAL_RCC_ClockConfig+0x240>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f003 030f 	and.w	r3, r3, #15
 800a69a:	683a      	ldr	r2, [r7, #0]
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d005      	beq.n	800a6ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	e086      	b.n	800a7b2 <HAL_RCC_ClockConfig+0x34e>
 800a6a4:	52002000 	.word	0x52002000
 800a6a8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f003 0304 	and.w	r3, r3, #4
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d010      	beq.n	800a6da <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	691a      	ldr	r2, [r3, #16]
 800a6bc:	4b3f      	ldr	r3, [pc, #252]	; (800a7bc <HAL_RCC_ClockConfig+0x358>)
 800a6be:	699b      	ldr	r3, [r3, #24]
 800a6c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a6c4:	429a      	cmp	r2, r3
 800a6c6:	d208      	bcs.n	800a6da <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a6c8:	4b3c      	ldr	r3, [pc, #240]	; (800a7bc <HAL_RCC_ClockConfig+0x358>)
 800a6ca:	699b      	ldr	r3, [r3, #24]
 800a6cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	691b      	ldr	r3, [r3, #16]
 800a6d4:	4939      	ldr	r1, [pc, #228]	; (800a7bc <HAL_RCC_ClockConfig+0x358>)
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f003 0308 	and.w	r3, r3, #8
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d010      	beq.n	800a708 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	695a      	ldr	r2, [r3, #20]
 800a6ea:	4b34      	ldr	r3, [pc, #208]	; (800a7bc <HAL_RCC_ClockConfig+0x358>)
 800a6ec:	69db      	ldr	r3, [r3, #28]
 800a6ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d208      	bcs.n	800a708 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a6f6:	4b31      	ldr	r3, [pc, #196]	; (800a7bc <HAL_RCC_ClockConfig+0x358>)
 800a6f8:	69db      	ldr	r3, [r3, #28]
 800a6fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	695b      	ldr	r3, [r3, #20]
 800a702:	492e      	ldr	r1, [pc, #184]	; (800a7bc <HAL_RCC_ClockConfig+0x358>)
 800a704:	4313      	orrs	r3, r2
 800a706:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f003 0310 	and.w	r3, r3, #16
 800a710:	2b00      	cmp	r3, #0
 800a712:	d010      	beq.n	800a736 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	699a      	ldr	r2, [r3, #24]
 800a718:	4b28      	ldr	r3, [pc, #160]	; (800a7bc <HAL_RCC_ClockConfig+0x358>)
 800a71a:	69db      	ldr	r3, [r3, #28]
 800a71c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a720:	429a      	cmp	r2, r3
 800a722:	d208      	bcs.n	800a736 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a724:	4b25      	ldr	r3, [pc, #148]	; (800a7bc <HAL_RCC_ClockConfig+0x358>)
 800a726:	69db      	ldr	r3, [r3, #28]
 800a728:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	699b      	ldr	r3, [r3, #24]
 800a730:	4922      	ldr	r1, [pc, #136]	; (800a7bc <HAL_RCC_ClockConfig+0x358>)
 800a732:	4313      	orrs	r3, r2
 800a734:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f003 0320 	and.w	r3, r3, #32
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d010      	beq.n	800a764 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	69da      	ldr	r2, [r3, #28]
 800a746:	4b1d      	ldr	r3, [pc, #116]	; (800a7bc <HAL_RCC_ClockConfig+0x358>)
 800a748:	6a1b      	ldr	r3, [r3, #32]
 800a74a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a74e:	429a      	cmp	r2, r3
 800a750:	d208      	bcs.n	800a764 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a752:	4b1a      	ldr	r3, [pc, #104]	; (800a7bc <HAL_RCC_ClockConfig+0x358>)
 800a754:	6a1b      	ldr	r3, [r3, #32]
 800a756:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	69db      	ldr	r3, [r3, #28]
 800a75e:	4917      	ldr	r1, [pc, #92]	; (800a7bc <HAL_RCC_ClockConfig+0x358>)
 800a760:	4313      	orrs	r3, r2
 800a762:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a764:	f000 f89e 	bl	800a8a4 <HAL_RCC_GetSysClockFreq>
 800a768:	4602      	mov	r2, r0
 800a76a:	4b14      	ldr	r3, [pc, #80]	; (800a7bc <HAL_RCC_ClockConfig+0x358>)
 800a76c:	699b      	ldr	r3, [r3, #24]
 800a76e:	0a1b      	lsrs	r3, r3, #8
 800a770:	f003 030f 	and.w	r3, r3, #15
 800a774:	4912      	ldr	r1, [pc, #72]	; (800a7c0 <HAL_RCC_ClockConfig+0x35c>)
 800a776:	5ccb      	ldrb	r3, [r1, r3]
 800a778:	f003 031f 	and.w	r3, r3, #31
 800a77c:	fa22 f303 	lsr.w	r3, r2, r3
 800a780:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a782:	4b0e      	ldr	r3, [pc, #56]	; (800a7bc <HAL_RCC_ClockConfig+0x358>)
 800a784:	699b      	ldr	r3, [r3, #24]
 800a786:	f003 030f 	and.w	r3, r3, #15
 800a78a:	4a0d      	ldr	r2, [pc, #52]	; (800a7c0 <HAL_RCC_ClockConfig+0x35c>)
 800a78c:	5cd3      	ldrb	r3, [r2, r3]
 800a78e:	f003 031f 	and.w	r3, r3, #31
 800a792:	693a      	ldr	r2, [r7, #16]
 800a794:	fa22 f303 	lsr.w	r3, r2, r3
 800a798:	4a0a      	ldr	r2, [pc, #40]	; (800a7c4 <HAL_RCC_ClockConfig+0x360>)
 800a79a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a79c:	4a0a      	ldr	r2, [pc, #40]	; (800a7c8 <HAL_RCC_ClockConfig+0x364>)
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a7a2:	4b0a      	ldr	r3, [pc, #40]	; (800a7cc <HAL_RCC_ClockConfig+0x368>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f7f9 fb36 	bl	8003e18 <HAL_InitTick>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a7b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3718      	adds	r7, #24
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	58024400 	.word	0x58024400
 800a7c0:	0801c400 	.word	0x0801c400
 800a7c4:	24000004 	.word	0x24000004
 800a7c8:	24000000 	.word	0x24000000
 800a7cc:	24000008 	.word	0x24000008

0800a7d0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b08c      	sub	sp, #48	; 0x30
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	60f8      	str	r0, [r7, #12]
 800a7d8:	60b9      	str	r1, [r7, #8]
 800a7da:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d12a      	bne.n	800a838 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800a7e2:	4b2d      	ldr	r3, [pc, #180]	; (800a898 <HAL_RCC_MCOConfig+0xc8>)
 800a7e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a7e8:	4a2b      	ldr	r2, [pc, #172]	; (800a898 <HAL_RCC_MCOConfig+0xc8>)
 800a7ea:	f043 0301 	orr.w	r3, r3, #1
 800a7ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a7f2:	4b29      	ldr	r3, [pc, #164]	; (800a898 <HAL_RCC_MCOConfig+0xc8>)
 800a7f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a7f8:	f003 0301 	and.w	r3, r3, #1
 800a7fc:	61bb      	str	r3, [r7, #24]
 800a7fe:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a800:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a806:	2302      	movs	r3, #2
 800a808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a80a:	2303      	movs	r3, #3
 800a80c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a80e:	2300      	movs	r3, #0
 800a810:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a812:	2300      	movs	r3, #0
 800a814:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a816:	f107 031c 	add.w	r3, r7, #28
 800a81a:	4619      	mov	r1, r3
 800a81c:	481f      	ldr	r0, [pc, #124]	; (800a89c <HAL_RCC_MCOConfig+0xcc>)
 800a81e:	f7fd fc43 	bl	80080a8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a822:	4b1d      	ldr	r3, [pc, #116]	; (800a898 <HAL_RCC_MCOConfig+0xc8>)
 800a824:	691b      	ldr	r3, [r3, #16]
 800a826:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800a82a:	68b9      	ldr	r1, [r7, #8]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	430b      	orrs	r3, r1
 800a830:	4919      	ldr	r1, [pc, #100]	; (800a898 <HAL_RCC_MCOConfig+0xc8>)
 800a832:	4313      	orrs	r3, r2
 800a834:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800a836:	e02a      	b.n	800a88e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800a838:	4b17      	ldr	r3, [pc, #92]	; (800a898 <HAL_RCC_MCOConfig+0xc8>)
 800a83a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a83e:	4a16      	ldr	r2, [pc, #88]	; (800a898 <HAL_RCC_MCOConfig+0xc8>)
 800a840:	f043 0304 	orr.w	r3, r3, #4
 800a844:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a848:	4b13      	ldr	r3, [pc, #76]	; (800a898 <HAL_RCC_MCOConfig+0xc8>)
 800a84a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a84e:	f003 0304 	and.w	r3, r3, #4
 800a852:	617b      	str	r3, [r7, #20]
 800a854:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a856:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a85a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a85c:	2302      	movs	r3, #2
 800a85e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a860:	2303      	movs	r3, #3
 800a862:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a864:	2300      	movs	r3, #0
 800a866:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a868:	2300      	movs	r3, #0
 800a86a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a86c:	f107 031c 	add.w	r3, r7, #28
 800a870:	4619      	mov	r1, r3
 800a872:	480b      	ldr	r0, [pc, #44]	; (800a8a0 <HAL_RCC_MCOConfig+0xd0>)
 800a874:	f7fd fc18 	bl	80080a8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a878:	4b07      	ldr	r3, [pc, #28]	; (800a898 <HAL_RCC_MCOConfig+0xc8>)
 800a87a:	691b      	ldr	r3, [r3, #16]
 800a87c:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	01d9      	lsls	r1, r3, #7
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	430b      	orrs	r3, r1
 800a888:	4903      	ldr	r1, [pc, #12]	; (800a898 <HAL_RCC_MCOConfig+0xc8>)
 800a88a:	4313      	orrs	r3, r2
 800a88c:	610b      	str	r3, [r1, #16]
}
 800a88e:	bf00      	nop
 800a890:	3730      	adds	r7, #48	; 0x30
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}
 800a896:	bf00      	nop
 800a898:	58024400 	.word	0x58024400
 800a89c:	58020000 	.word	0x58020000
 800a8a0:	58020800 	.word	0x58020800

0800a8a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b089      	sub	sp, #36	; 0x24
 800a8a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a8aa:	4bb3      	ldr	r3, [pc, #716]	; (800ab78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8ac:	691b      	ldr	r3, [r3, #16]
 800a8ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a8b2:	2b18      	cmp	r3, #24
 800a8b4:	f200 8155 	bhi.w	800ab62 <HAL_RCC_GetSysClockFreq+0x2be>
 800a8b8:	a201      	add	r2, pc, #4	; (adr r2, 800a8c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a8ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8be:	bf00      	nop
 800a8c0:	0800a925 	.word	0x0800a925
 800a8c4:	0800ab63 	.word	0x0800ab63
 800a8c8:	0800ab63 	.word	0x0800ab63
 800a8cc:	0800ab63 	.word	0x0800ab63
 800a8d0:	0800ab63 	.word	0x0800ab63
 800a8d4:	0800ab63 	.word	0x0800ab63
 800a8d8:	0800ab63 	.word	0x0800ab63
 800a8dc:	0800ab63 	.word	0x0800ab63
 800a8e0:	0800a94b 	.word	0x0800a94b
 800a8e4:	0800ab63 	.word	0x0800ab63
 800a8e8:	0800ab63 	.word	0x0800ab63
 800a8ec:	0800ab63 	.word	0x0800ab63
 800a8f0:	0800ab63 	.word	0x0800ab63
 800a8f4:	0800ab63 	.word	0x0800ab63
 800a8f8:	0800ab63 	.word	0x0800ab63
 800a8fc:	0800ab63 	.word	0x0800ab63
 800a900:	0800a951 	.word	0x0800a951
 800a904:	0800ab63 	.word	0x0800ab63
 800a908:	0800ab63 	.word	0x0800ab63
 800a90c:	0800ab63 	.word	0x0800ab63
 800a910:	0800ab63 	.word	0x0800ab63
 800a914:	0800ab63 	.word	0x0800ab63
 800a918:	0800ab63 	.word	0x0800ab63
 800a91c:	0800ab63 	.word	0x0800ab63
 800a920:	0800a957 	.word	0x0800a957
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a924:	4b94      	ldr	r3, [pc, #592]	; (800ab78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f003 0320 	and.w	r3, r3, #32
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d009      	beq.n	800a944 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a930:	4b91      	ldr	r3, [pc, #580]	; (800ab78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	08db      	lsrs	r3, r3, #3
 800a936:	f003 0303 	and.w	r3, r3, #3
 800a93a:	4a90      	ldr	r2, [pc, #576]	; (800ab7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a93c:	fa22 f303 	lsr.w	r3, r2, r3
 800a940:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a942:	e111      	b.n	800ab68 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a944:	4b8d      	ldr	r3, [pc, #564]	; (800ab7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a946:	61bb      	str	r3, [r7, #24]
      break;
 800a948:	e10e      	b.n	800ab68 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a94a:	4b8d      	ldr	r3, [pc, #564]	; (800ab80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a94c:	61bb      	str	r3, [r7, #24]
      break;
 800a94e:	e10b      	b.n	800ab68 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a950:	4b8c      	ldr	r3, [pc, #560]	; (800ab84 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a952:	61bb      	str	r3, [r7, #24]
      break;
 800a954:	e108      	b.n	800ab68 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a956:	4b88      	ldr	r3, [pc, #544]	; (800ab78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a95a:	f003 0303 	and.w	r3, r3, #3
 800a95e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a960:	4b85      	ldr	r3, [pc, #532]	; (800ab78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a964:	091b      	lsrs	r3, r3, #4
 800a966:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a96a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a96c:	4b82      	ldr	r3, [pc, #520]	; (800ab78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a970:	f003 0301 	and.w	r3, r3, #1
 800a974:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a976:	4b80      	ldr	r3, [pc, #512]	; (800ab78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a97a:	08db      	lsrs	r3, r3, #3
 800a97c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a980:	68fa      	ldr	r2, [r7, #12]
 800a982:	fb02 f303 	mul.w	r3, r2, r3
 800a986:	ee07 3a90 	vmov	s15, r3
 800a98a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a98e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	2b00      	cmp	r3, #0
 800a996:	f000 80e1 	beq.w	800ab5c <HAL_RCC_GetSysClockFreq+0x2b8>
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	2b02      	cmp	r3, #2
 800a99e:	f000 8083 	beq.w	800aaa8 <HAL_RCC_GetSysClockFreq+0x204>
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	2b02      	cmp	r3, #2
 800a9a6:	f200 80a1 	bhi.w	800aaec <HAL_RCC_GetSysClockFreq+0x248>
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d003      	beq.n	800a9b8 <HAL_RCC_GetSysClockFreq+0x114>
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	2b01      	cmp	r3, #1
 800a9b4:	d056      	beq.n	800aa64 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a9b6:	e099      	b.n	800aaec <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9b8:	4b6f      	ldr	r3, [pc, #444]	; (800ab78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f003 0320 	and.w	r3, r3, #32
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d02d      	beq.n	800aa20 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a9c4:	4b6c      	ldr	r3, [pc, #432]	; (800ab78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	08db      	lsrs	r3, r3, #3
 800a9ca:	f003 0303 	and.w	r3, r3, #3
 800a9ce:	4a6b      	ldr	r2, [pc, #428]	; (800ab7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a9d0:	fa22 f303 	lsr.w	r3, r2, r3
 800a9d4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	ee07 3a90 	vmov	s15, r3
 800a9dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	ee07 3a90 	vmov	s15, r3
 800a9e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9ee:	4b62      	ldr	r3, [pc, #392]	; (800ab78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9f6:	ee07 3a90 	vmov	s15, r3
 800a9fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9fe:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa02:	eddf 5a61 	vldr	s11, [pc, #388]	; 800ab88 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa1a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800aa1e:	e087      	b.n	800ab30 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	ee07 3a90 	vmov	s15, r3
 800aa26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa2a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ab8c <HAL_RCC_GetSysClockFreq+0x2e8>
 800aa2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa32:	4b51      	ldr	r3, [pc, #324]	; (800ab78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa3a:	ee07 3a90 	vmov	s15, r3
 800aa3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa42:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa46:	eddf 5a50 	vldr	s11, [pc, #320]	; 800ab88 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aa62:	e065      	b.n	800ab30 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	ee07 3a90 	vmov	s15, r3
 800aa6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa6e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ab90 <HAL_RCC_GetSysClockFreq+0x2ec>
 800aa72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa76:	4b40      	ldr	r3, [pc, #256]	; (800ab78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa7e:	ee07 3a90 	vmov	s15, r3
 800aa82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa86:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa8a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ab88 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaa2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aaa6:	e043      	b.n	800ab30 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	ee07 3a90 	vmov	s15, r3
 800aaae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aab2:	eddf 6a38 	vldr	s13, [pc, #224]	; 800ab94 <HAL_RCC_GetSysClockFreq+0x2f0>
 800aab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaba:	4b2f      	ldr	r3, [pc, #188]	; (800ab78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aabc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aabe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aac2:	ee07 3a90 	vmov	s15, r3
 800aac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaca:	ed97 6a02 	vldr	s12, [r7, #8]
 800aace:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ab88 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aae6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aaea:	e021      	b.n	800ab30 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	ee07 3a90 	vmov	s15, r3
 800aaf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaf6:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ab90 <HAL_RCC_GetSysClockFreq+0x2ec>
 800aafa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aafe:	4b1e      	ldr	r3, [pc, #120]	; (800ab78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab06:	ee07 3a90 	vmov	s15, r3
 800ab0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab0e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab12:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800ab88 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ab2e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ab30:	4b11      	ldr	r3, [pc, #68]	; (800ab78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab34:	0a5b      	lsrs	r3, r3, #9
 800ab36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab3a:	3301      	adds	r3, #1
 800ab3c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	ee07 3a90 	vmov	s15, r3
 800ab44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ab48:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab54:	ee17 3a90 	vmov	r3, s15
 800ab58:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800ab5a:	e005      	b.n	800ab68 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	61bb      	str	r3, [r7, #24]
      break;
 800ab60:	e002      	b.n	800ab68 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800ab62:	4b07      	ldr	r3, [pc, #28]	; (800ab80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ab64:	61bb      	str	r3, [r7, #24]
      break;
 800ab66:	bf00      	nop
  }

  return sysclockfreq;
 800ab68:	69bb      	ldr	r3, [r7, #24]
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3724      	adds	r7, #36	; 0x24
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab74:	4770      	bx	lr
 800ab76:	bf00      	nop
 800ab78:	58024400 	.word	0x58024400
 800ab7c:	03d09000 	.word	0x03d09000
 800ab80:	003d0900 	.word	0x003d0900
 800ab84:	02faf080 	.word	0x02faf080
 800ab88:	46000000 	.word	0x46000000
 800ab8c:	4c742400 	.word	0x4c742400
 800ab90:	4a742400 	.word	0x4a742400
 800ab94:	4c3ebc20 	.word	0x4c3ebc20

0800ab98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b082      	sub	sp, #8
 800ab9c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ab9e:	f7ff fe81 	bl	800a8a4 <HAL_RCC_GetSysClockFreq>
 800aba2:	4602      	mov	r2, r0
 800aba4:	4b10      	ldr	r3, [pc, #64]	; (800abe8 <HAL_RCC_GetHCLKFreq+0x50>)
 800aba6:	699b      	ldr	r3, [r3, #24]
 800aba8:	0a1b      	lsrs	r3, r3, #8
 800abaa:	f003 030f 	and.w	r3, r3, #15
 800abae:	490f      	ldr	r1, [pc, #60]	; (800abec <HAL_RCC_GetHCLKFreq+0x54>)
 800abb0:	5ccb      	ldrb	r3, [r1, r3]
 800abb2:	f003 031f 	and.w	r3, r3, #31
 800abb6:	fa22 f303 	lsr.w	r3, r2, r3
 800abba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800abbc:	4b0a      	ldr	r3, [pc, #40]	; (800abe8 <HAL_RCC_GetHCLKFreq+0x50>)
 800abbe:	699b      	ldr	r3, [r3, #24]
 800abc0:	f003 030f 	and.w	r3, r3, #15
 800abc4:	4a09      	ldr	r2, [pc, #36]	; (800abec <HAL_RCC_GetHCLKFreq+0x54>)
 800abc6:	5cd3      	ldrb	r3, [r2, r3]
 800abc8:	f003 031f 	and.w	r3, r3, #31
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	fa22 f303 	lsr.w	r3, r2, r3
 800abd2:	4a07      	ldr	r2, [pc, #28]	; (800abf0 <HAL_RCC_GetHCLKFreq+0x58>)
 800abd4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800abd6:	4a07      	ldr	r2, [pc, #28]	; (800abf4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800abdc:	4b04      	ldr	r3, [pc, #16]	; (800abf0 <HAL_RCC_GetHCLKFreq+0x58>)
 800abde:	681b      	ldr	r3, [r3, #0]
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3708      	adds	r7, #8
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}
 800abe8:	58024400 	.word	0x58024400
 800abec:	0801c400 	.word	0x0801c400
 800abf0:	24000004 	.word	0x24000004
 800abf4:	24000000 	.word	0x24000000

0800abf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800abfc:	f7ff ffcc 	bl	800ab98 <HAL_RCC_GetHCLKFreq>
 800ac00:	4602      	mov	r2, r0
 800ac02:	4b06      	ldr	r3, [pc, #24]	; (800ac1c <HAL_RCC_GetPCLK1Freq+0x24>)
 800ac04:	69db      	ldr	r3, [r3, #28]
 800ac06:	091b      	lsrs	r3, r3, #4
 800ac08:	f003 0307 	and.w	r3, r3, #7
 800ac0c:	4904      	ldr	r1, [pc, #16]	; (800ac20 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ac0e:	5ccb      	ldrb	r3, [r1, r3]
 800ac10:	f003 031f 	and.w	r3, r3, #31
 800ac14:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	bd80      	pop	{r7, pc}
 800ac1c:	58024400 	.word	0x58024400
 800ac20:	0801c400 	.word	0x0801c400

0800ac24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ac28:	f7ff ffb6 	bl	800ab98 <HAL_RCC_GetHCLKFreq>
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	4b06      	ldr	r3, [pc, #24]	; (800ac48 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ac30:	69db      	ldr	r3, [r3, #28]
 800ac32:	0a1b      	lsrs	r3, r3, #8
 800ac34:	f003 0307 	and.w	r3, r3, #7
 800ac38:	4904      	ldr	r1, [pc, #16]	; (800ac4c <HAL_RCC_GetPCLK2Freq+0x28>)
 800ac3a:	5ccb      	ldrb	r3, [r1, r3]
 800ac3c:	f003 031f 	and.w	r3, r3, #31
 800ac40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	bd80      	pop	{r7, pc}
 800ac48:	58024400 	.word	0x58024400
 800ac4c:	0801c400 	.word	0x0801c400

0800ac50 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ac50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ac54:	b0c6      	sub	sp, #280	; 0x118
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ac62:	2300      	movs	r3, #0
 800ac64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ac68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac70:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800ac74:	2500      	movs	r5, #0
 800ac76:	ea54 0305 	orrs.w	r3, r4, r5
 800ac7a:	d049      	beq.n	800ad10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800ac7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac82:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ac86:	d02f      	beq.n	800ace8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800ac88:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ac8c:	d828      	bhi.n	800ace0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ac8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac92:	d01a      	beq.n	800acca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800ac94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac98:	d822      	bhi.n	800ace0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d003      	beq.n	800aca6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800ac9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aca2:	d007      	beq.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800aca4:	e01c      	b.n	800ace0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aca6:	4bab      	ldr	r3, [pc, #684]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acaa:	4aaa      	ldr	r2, [pc, #680]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800acac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acb0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800acb2:	e01a      	b.n	800acea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800acb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acb8:	3308      	adds	r3, #8
 800acba:	2102      	movs	r1, #2
 800acbc:	4618      	mov	r0, r3
 800acbe:	f002 fa49 	bl	800d154 <RCCEx_PLL2_Config>
 800acc2:	4603      	mov	r3, r0
 800acc4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800acc8:	e00f      	b.n	800acea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800acca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acce:	3328      	adds	r3, #40	; 0x28
 800acd0:	2102      	movs	r1, #2
 800acd2:	4618      	mov	r0, r3
 800acd4:	f002 faf0 	bl	800d2b8 <RCCEx_PLL3_Config>
 800acd8:	4603      	mov	r3, r0
 800acda:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800acde:	e004      	b.n	800acea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ace0:	2301      	movs	r3, #1
 800ace2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ace6:	e000      	b.n	800acea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800ace8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800acea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d10a      	bne.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800acf2:	4b98      	ldr	r3, [pc, #608]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800acf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acf6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800acfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad00:	4a94      	ldr	r2, [pc, #592]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ad02:	430b      	orrs	r3, r1
 800ad04:	6513      	str	r3, [r2, #80]	; 0x50
 800ad06:	e003      	b.n	800ad10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad0c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ad10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad18:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800ad1c:	f04f 0900 	mov.w	r9, #0
 800ad20:	ea58 0309 	orrs.w	r3, r8, r9
 800ad24:	d047      	beq.n	800adb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ad26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad2c:	2b04      	cmp	r3, #4
 800ad2e:	d82a      	bhi.n	800ad86 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ad30:	a201      	add	r2, pc, #4	; (adr r2, 800ad38 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ad32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad36:	bf00      	nop
 800ad38:	0800ad4d 	.word	0x0800ad4d
 800ad3c:	0800ad5b 	.word	0x0800ad5b
 800ad40:	0800ad71 	.word	0x0800ad71
 800ad44:	0800ad8f 	.word	0x0800ad8f
 800ad48:	0800ad8f 	.word	0x0800ad8f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad4c:	4b81      	ldr	r3, [pc, #516]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ad4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad50:	4a80      	ldr	r2, [pc, #512]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ad52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ad58:	e01a      	b.n	800ad90 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ad5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad5e:	3308      	adds	r3, #8
 800ad60:	2100      	movs	r1, #0
 800ad62:	4618      	mov	r0, r3
 800ad64:	f002 f9f6 	bl	800d154 <RCCEx_PLL2_Config>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ad6e:	e00f      	b.n	800ad90 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ad70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad74:	3328      	adds	r3, #40	; 0x28
 800ad76:	2100      	movs	r1, #0
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f002 fa9d 	bl	800d2b8 <RCCEx_PLL3_Config>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ad84:	e004      	b.n	800ad90 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad86:	2301      	movs	r3, #1
 800ad88:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ad8c:	e000      	b.n	800ad90 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800ad8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d10a      	bne.n	800adae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ad98:	4b6e      	ldr	r3, [pc, #440]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ad9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad9c:	f023 0107 	bic.w	r1, r3, #7
 800ada0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ada4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ada6:	4a6b      	ldr	r2, [pc, #428]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ada8:	430b      	orrs	r3, r1
 800adaa:	6513      	str	r3, [r2, #80]	; 0x50
 800adac:	e003      	b.n	800adb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800adb2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800adb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adbe:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800adc2:	f04f 0b00 	mov.w	fp, #0
 800adc6:	ea5a 030b 	orrs.w	r3, sl, fp
 800adca:	d05b      	beq.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800adcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800add0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800add4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800add8:	d03b      	beq.n	800ae52 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800adda:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800adde:	d834      	bhi.n	800ae4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ade0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ade4:	d037      	beq.n	800ae56 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800ade6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800adea:	d82e      	bhi.n	800ae4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800adec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800adf0:	d033      	beq.n	800ae5a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800adf2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800adf6:	d828      	bhi.n	800ae4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800adf8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800adfc:	d01a      	beq.n	800ae34 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800adfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae02:	d822      	bhi.n	800ae4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d003      	beq.n	800ae10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800ae08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae0c:	d007      	beq.n	800ae1e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800ae0e:	e01c      	b.n	800ae4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae10:	4b50      	ldr	r3, [pc, #320]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ae12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae14:	4a4f      	ldr	r2, [pc, #316]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ae16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ae1c:	e01e      	b.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae22:	3308      	adds	r3, #8
 800ae24:	2100      	movs	r1, #0
 800ae26:	4618      	mov	r0, r3
 800ae28:	f002 f994 	bl	800d154 <RCCEx_PLL2_Config>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ae32:	e013      	b.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ae34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae38:	3328      	adds	r3, #40	; 0x28
 800ae3a:	2100      	movs	r1, #0
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f002 fa3b 	bl	800d2b8 <RCCEx_PLL3_Config>
 800ae42:	4603      	mov	r3, r0
 800ae44:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ae48:	e008      	b.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ae50:	e004      	b.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ae52:	bf00      	nop
 800ae54:	e002      	b.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ae56:	bf00      	nop
 800ae58:	e000      	b.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ae5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d10b      	bne.n	800ae7c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ae64:	4b3b      	ldr	r3, [pc, #236]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ae66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae68:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800ae6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ae74:	4a37      	ldr	r2, [pc, #220]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ae76:	430b      	orrs	r3, r1
 800ae78:	6593      	str	r3, [r2, #88]	; 0x58
 800ae7a:	e003      	b.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae80:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ae84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800ae90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ae94:	2300      	movs	r3, #0
 800ae96:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ae9a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800ae9e:	460b      	mov	r3, r1
 800aea0:	4313      	orrs	r3, r2
 800aea2:	d05d      	beq.n	800af60 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800aea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aea8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aeac:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800aeb0:	d03b      	beq.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800aeb2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800aeb6:	d834      	bhi.n	800af22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aeb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aebc:	d037      	beq.n	800af2e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800aebe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aec2:	d82e      	bhi.n	800af22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aec4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aec8:	d033      	beq.n	800af32 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800aeca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aece:	d828      	bhi.n	800af22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aed0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aed4:	d01a      	beq.n	800af0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800aed6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aeda:	d822      	bhi.n	800af22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d003      	beq.n	800aee8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800aee0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aee4:	d007      	beq.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800aee6:	e01c      	b.n	800af22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aee8:	4b1a      	ldr	r3, [pc, #104]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aeea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeec:	4a19      	ldr	r2, [pc, #100]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aeee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aef2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aef4:	e01e      	b.n	800af34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aefa:	3308      	adds	r3, #8
 800aefc:	2100      	movs	r1, #0
 800aefe:	4618      	mov	r0, r3
 800af00:	f002 f928 	bl	800d154 <RCCEx_PLL2_Config>
 800af04:	4603      	mov	r3, r0
 800af06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800af0a:	e013      	b.n	800af34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af10:	3328      	adds	r3, #40	; 0x28
 800af12:	2100      	movs	r1, #0
 800af14:	4618      	mov	r0, r3
 800af16:	f002 f9cf 	bl	800d2b8 <RCCEx_PLL3_Config>
 800af1a:	4603      	mov	r3, r0
 800af1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af20:	e008      	b.n	800af34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800af22:	2301      	movs	r3, #1
 800af24:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800af28:	e004      	b.n	800af34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800af2a:	bf00      	nop
 800af2c:	e002      	b.n	800af34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800af2e:	bf00      	nop
 800af30:	e000      	b.n	800af34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800af32:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d10d      	bne.n	800af58 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800af3c:	4b05      	ldr	r3, [pc, #20]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800af3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af40:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800af44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af48:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800af4c:	4a01      	ldr	r2, [pc, #4]	; (800af54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800af4e:	430b      	orrs	r3, r1
 800af50:	6593      	str	r3, [r2, #88]	; 0x58
 800af52:	e005      	b.n	800af60 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800af54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af5c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800af60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af68:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800af6c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800af70:	2300      	movs	r3, #0
 800af72:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800af76:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800af7a:	460b      	mov	r3, r1
 800af7c:	4313      	orrs	r3, r2
 800af7e:	d03a      	beq.n	800aff6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800af80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af86:	2b30      	cmp	r3, #48	; 0x30
 800af88:	d01f      	beq.n	800afca <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800af8a:	2b30      	cmp	r3, #48	; 0x30
 800af8c:	d819      	bhi.n	800afc2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800af8e:	2b20      	cmp	r3, #32
 800af90:	d00c      	beq.n	800afac <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800af92:	2b20      	cmp	r3, #32
 800af94:	d815      	bhi.n	800afc2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800af96:	2b00      	cmp	r3, #0
 800af98:	d019      	beq.n	800afce <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800af9a:	2b10      	cmp	r3, #16
 800af9c:	d111      	bne.n	800afc2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af9e:	4baa      	ldr	r3, [pc, #680]	; (800b248 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800afa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afa2:	4aa9      	ldr	r2, [pc, #676]	; (800b248 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800afa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afa8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800afaa:	e011      	b.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800afac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afb0:	3308      	adds	r3, #8
 800afb2:	2102      	movs	r1, #2
 800afb4:	4618      	mov	r0, r3
 800afb6:	f002 f8cd 	bl	800d154 <RCCEx_PLL2_Config>
 800afba:	4603      	mov	r3, r0
 800afbc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800afc0:	e006      	b.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800afc2:	2301      	movs	r3, #1
 800afc4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800afc8:	e002      	b.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800afca:	bf00      	nop
 800afcc:	e000      	b.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800afce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800afd0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d10a      	bne.n	800afee <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800afd8:	4b9b      	ldr	r3, [pc, #620]	; (800b248 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800afda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afdc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800afe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afe6:	4a98      	ldr	r2, [pc, #608]	; (800b248 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800afe8:	430b      	orrs	r3, r1
 800afea:	64d3      	str	r3, [r2, #76]	; 0x4c
 800afec:	e003      	b.n	800aff6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aff2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800aff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800affa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affe:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b002:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b006:	2300      	movs	r3, #0
 800b008:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b00c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b010:	460b      	mov	r3, r1
 800b012:	4313      	orrs	r3, r2
 800b014:	d051      	beq.n	800b0ba <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b016:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b01a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b01c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b020:	d035      	beq.n	800b08e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800b022:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b026:	d82e      	bhi.n	800b086 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b028:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b02c:	d031      	beq.n	800b092 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800b02e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b032:	d828      	bhi.n	800b086 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b038:	d01a      	beq.n	800b070 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800b03a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b03e:	d822      	bhi.n	800b086 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b040:	2b00      	cmp	r3, #0
 800b042:	d003      	beq.n	800b04c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800b044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b048:	d007      	beq.n	800b05a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800b04a:	e01c      	b.n	800b086 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b04c:	4b7e      	ldr	r3, [pc, #504]	; (800b248 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b050:	4a7d      	ldr	r2, [pc, #500]	; (800b248 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b052:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b056:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b058:	e01c      	b.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b05a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b05e:	3308      	adds	r3, #8
 800b060:	2100      	movs	r1, #0
 800b062:	4618      	mov	r0, r3
 800b064:	f002 f876 	bl	800d154 <RCCEx_PLL2_Config>
 800b068:	4603      	mov	r3, r0
 800b06a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b06e:	e011      	b.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b070:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b074:	3328      	adds	r3, #40	; 0x28
 800b076:	2100      	movs	r1, #0
 800b078:	4618      	mov	r0, r3
 800b07a:	f002 f91d 	bl	800d2b8 <RCCEx_PLL3_Config>
 800b07e:	4603      	mov	r3, r0
 800b080:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b084:	e006      	b.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b086:	2301      	movs	r3, #1
 800b088:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b08c:	e002      	b.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800b08e:	bf00      	nop
 800b090:	e000      	b.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800b092:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b094:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d10a      	bne.n	800b0b2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b09c:	4b6a      	ldr	r3, [pc, #424]	; (800b248 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b09e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0a0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b0a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0aa:	4a67      	ldr	r2, [pc, #412]	; (800b248 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b0ac:	430b      	orrs	r3, r1
 800b0ae:	6513      	str	r3, [r2, #80]	; 0x50
 800b0b0:	e003      	b.n	800b0ba <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0b6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b0ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b0c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b0d0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b0d4:	460b      	mov	r3, r1
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	d053      	beq.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b0da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b0e4:	d033      	beq.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800b0e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b0ea:	d82c      	bhi.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b0ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b0f0:	d02f      	beq.n	800b152 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800b0f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b0f6:	d826      	bhi.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b0f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b0fc:	d02b      	beq.n	800b156 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800b0fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b102:	d820      	bhi.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b104:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b108:	d012      	beq.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800b10a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b10e:	d81a      	bhi.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b110:	2b00      	cmp	r3, #0
 800b112:	d022      	beq.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800b114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b118:	d115      	bne.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b11a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b11e:	3308      	adds	r3, #8
 800b120:	2101      	movs	r1, #1
 800b122:	4618      	mov	r0, r3
 800b124:	f002 f816 	bl	800d154 <RCCEx_PLL2_Config>
 800b128:	4603      	mov	r3, r0
 800b12a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b12e:	e015      	b.n	800b15c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b130:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b134:	3328      	adds	r3, #40	; 0x28
 800b136:	2101      	movs	r1, #1
 800b138:	4618      	mov	r0, r3
 800b13a:	f002 f8bd 	bl	800d2b8 <RCCEx_PLL3_Config>
 800b13e:	4603      	mov	r3, r0
 800b140:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b144:	e00a      	b.n	800b15c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b146:	2301      	movs	r3, #1
 800b148:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b14c:	e006      	b.n	800b15c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b14e:	bf00      	nop
 800b150:	e004      	b.n	800b15c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b152:	bf00      	nop
 800b154:	e002      	b.n	800b15c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b156:	bf00      	nop
 800b158:	e000      	b.n	800b15c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b15a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b15c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b160:	2b00      	cmp	r3, #0
 800b162:	d10a      	bne.n	800b17a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b164:	4b38      	ldr	r3, [pc, #224]	; (800b248 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b168:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b16c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b172:	4a35      	ldr	r2, [pc, #212]	; (800b248 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b174:	430b      	orrs	r3, r1
 800b176:	6513      	str	r3, [r2, #80]	; 0x50
 800b178:	e003      	b.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b17a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b17e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b182:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b18a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b18e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b192:	2300      	movs	r3, #0
 800b194:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b198:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b19c:	460b      	mov	r3, r1
 800b19e:	4313      	orrs	r3, r2
 800b1a0:	d058      	beq.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b1a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b1aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b1ae:	d033      	beq.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800b1b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b1b4:	d82c      	bhi.n	800b210 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b1b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1ba:	d02f      	beq.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800b1bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1c0:	d826      	bhi.n	800b210 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b1c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b1c6:	d02b      	beq.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800b1c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b1cc:	d820      	bhi.n	800b210 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b1ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1d2:	d012      	beq.n	800b1fa <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800b1d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1d8:	d81a      	bhi.n	800b210 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d022      	beq.n	800b224 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b1de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b1e2:	d115      	bne.n	800b210 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b1e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1e8:	3308      	adds	r3, #8
 800b1ea:	2101      	movs	r1, #1
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f001 ffb1 	bl	800d154 <RCCEx_PLL2_Config>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b1f8:	e015      	b.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b1fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1fe:	3328      	adds	r3, #40	; 0x28
 800b200:	2101      	movs	r1, #1
 800b202:	4618      	mov	r0, r3
 800b204:	f002 f858 	bl	800d2b8 <RCCEx_PLL3_Config>
 800b208:	4603      	mov	r3, r0
 800b20a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b20e:	e00a      	b.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b210:	2301      	movs	r3, #1
 800b212:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b216:	e006      	b.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b218:	bf00      	nop
 800b21a:	e004      	b.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b21c:	bf00      	nop
 800b21e:	e002      	b.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b220:	bf00      	nop
 800b222:	e000      	b.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b224:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b226:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d10e      	bne.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b22e:	4b06      	ldr	r3, [pc, #24]	; (800b248 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b232:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b236:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b23a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b23e:	4a02      	ldr	r2, [pc, #8]	; (800b248 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b240:	430b      	orrs	r3, r1
 800b242:	6593      	str	r3, [r2, #88]	; 0x58
 800b244:	e006      	b.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800b246:	bf00      	nop
 800b248:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b24c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b250:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b254:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b25c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b260:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b264:	2300      	movs	r3, #0
 800b266:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b26a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b26e:	460b      	mov	r3, r1
 800b270:	4313      	orrs	r3, r2
 800b272:	d037      	beq.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b274:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b27a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b27e:	d00e      	beq.n	800b29e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800b280:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b284:	d816      	bhi.n	800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800b286:	2b00      	cmp	r3, #0
 800b288:	d018      	beq.n	800b2bc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800b28a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b28e:	d111      	bne.n	800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b290:	4bc4      	ldr	r3, [pc, #784]	; (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b294:	4ac3      	ldr	r2, [pc, #780]	; (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b296:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b29a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b29c:	e00f      	b.n	800b2be <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b29e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2a2:	3308      	adds	r3, #8
 800b2a4:	2101      	movs	r1, #1
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f001 ff54 	bl	800d154 <RCCEx_PLL2_Config>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b2b2:	e004      	b.n	800b2be <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b2ba:	e000      	b.n	800b2be <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800b2bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d10a      	bne.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b2c6:	4bb7      	ldr	r3, [pc, #732]	; (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b2c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2ca:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b2ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2d4:	4ab3      	ldr	r2, [pc, #716]	; (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b2d6:	430b      	orrs	r3, r1
 800b2d8:	6513      	str	r3, [r2, #80]	; 0x50
 800b2da:	e003      	b.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b2e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ec:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b2f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b2fa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b2fe:	460b      	mov	r3, r1
 800b300:	4313      	orrs	r3, r2
 800b302:	d039      	beq.n	800b378 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b304:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b30a:	2b03      	cmp	r3, #3
 800b30c:	d81c      	bhi.n	800b348 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800b30e:	a201      	add	r2, pc, #4	; (adr r2, 800b314 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800b310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b314:	0800b351 	.word	0x0800b351
 800b318:	0800b325 	.word	0x0800b325
 800b31c:	0800b333 	.word	0x0800b333
 800b320:	0800b351 	.word	0x0800b351
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b324:	4b9f      	ldr	r3, [pc, #636]	; (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b328:	4a9e      	ldr	r2, [pc, #632]	; (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b32a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b32e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b330:	e00f      	b.n	800b352 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b332:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b336:	3308      	adds	r3, #8
 800b338:	2102      	movs	r1, #2
 800b33a:	4618      	mov	r0, r3
 800b33c:	f001 ff0a 	bl	800d154 <RCCEx_PLL2_Config>
 800b340:	4603      	mov	r3, r0
 800b342:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b346:	e004      	b.n	800b352 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b348:	2301      	movs	r3, #1
 800b34a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b34e:	e000      	b.n	800b352 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800b350:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b352:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b356:	2b00      	cmp	r3, #0
 800b358:	d10a      	bne.n	800b370 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b35a:	4b92      	ldr	r3, [pc, #584]	; (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b35c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b35e:	f023 0103 	bic.w	r1, r3, #3
 800b362:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b368:	4a8e      	ldr	r2, [pc, #568]	; (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b36a:	430b      	orrs	r3, r1
 800b36c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b36e:	e003      	b.n	800b378 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b370:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b374:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b378:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b380:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b384:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b388:	2300      	movs	r3, #0
 800b38a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b38e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b392:	460b      	mov	r3, r1
 800b394:	4313      	orrs	r3, r2
 800b396:	f000 8099 	beq.w	800b4cc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b39a:	4b83      	ldr	r3, [pc, #524]	; (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	4a82      	ldr	r2, [pc, #520]	; (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b3a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b3a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b3a6:	f7f8 fd81 	bl	8003eac <HAL_GetTick>
 800b3aa:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b3ae:	e00b      	b.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b3b0:	f7f8 fd7c 	bl	8003eac <HAL_GetTick>
 800b3b4:	4602      	mov	r2, r0
 800b3b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b3ba:	1ad3      	subs	r3, r2, r3
 800b3bc:	2b64      	cmp	r3, #100	; 0x64
 800b3be:	d903      	bls.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800b3c0:	2303      	movs	r3, #3
 800b3c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b3c6:	e005      	b.n	800b3d4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b3c8:	4b77      	ldr	r3, [pc, #476]	; (800b5a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d0ed      	beq.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800b3d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d173      	bne.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b3dc:	4b71      	ldr	r3, [pc, #452]	; (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b3de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b3e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b3e8:	4053      	eors	r3, r2
 800b3ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d015      	beq.n	800b41e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b3f2:	4b6c      	ldr	r3, [pc, #432]	; (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b3f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b3fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b3fe:	4b69      	ldr	r3, [pc, #420]	; (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b402:	4a68      	ldr	r2, [pc, #416]	; (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b408:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b40a:	4b66      	ldr	r3, [pc, #408]	; (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b40c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b40e:	4a65      	ldr	r2, [pc, #404]	; (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b410:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b414:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b416:	4a63      	ldr	r2, [pc, #396]	; (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b418:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b41c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b41e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b422:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b42a:	d118      	bne.n	800b45e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b42c:	f7f8 fd3e 	bl	8003eac <HAL_GetTick>
 800b430:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b434:	e00d      	b.n	800b452 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b436:	f7f8 fd39 	bl	8003eac <HAL_GetTick>
 800b43a:	4602      	mov	r2, r0
 800b43c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b440:	1ad2      	subs	r2, r2, r3
 800b442:	f241 3388 	movw	r3, #5000	; 0x1388
 800b446:	429a      	cmp	r2, r3
 800b448:	d903      	bls.n	800b452 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800b44a:	2303      	movs	r3, #3
 800b44c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800b450:	e005      	b.n	800b45e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b452:	4b54      	ldr	r3, [pc, #336]	; (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b456:	f003 0302 	and.w	r3, r3, #2
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d0eb      	beq.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800b45e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b462:	2b00      	cmp	r3, #0
 800b464:	d129      	bne.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b466:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b46a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b46e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b472:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b476:	d10e      	bne.n	800b496 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800b478:	4b4a      	ldr	r3, [pc, #296]	; (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b47a:	691b      	ldr	r3, [r3, #16]
 800b47c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b480:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b484:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b488:	091a      	lsrs	r2, r3, #4
 800b48a:	4b48      	ldr	r3, [pc, #288]	; (800b5ac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800b48c:	4013      	ands	r3, r2
 800b48e:	4a45      	ldr	r2, [pc, #276]	; (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b490:	430b      	orrs	r3, r1
 800b492:	6113      	str	r3, [r2, #16]
 800b494:	e005      	b.n	800b4a2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800b496:	4b43      	ldr	r3, [pc, #268]	; (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b498:	691b      	ldr	r3, [r3, #16]
 800b49a:	4a42      	ldr	r2, [pc, #264]	; (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b49c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b4a0:	6113      	str	r3, [r2, #16]
 800b4a2:	4b40      	ldr	r3, [pc, #256]	; (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4a4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b4a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b4ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b4b2:	4a3c      	ldr	r2, [pc, #240]	; (800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4b4:	430b      	orrs	r3, r1
 800b4b6:	6713      	str	r3, [r2, #112]	; 0x70
 800b4b8:	e008      	b.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b4ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4be:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800b4c2:	e003      	b.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4c8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b4cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d4:	f002 0301 	and.w	r3, r2, #1
 800b4d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b4dc:	2300      	movs	r3, #0
 800b4de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b4e2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b4e6:	460b      	mov	r3, r1
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	f000 808f 	beq.w	800b60c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b4ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b4f4:	2b28      	cmp	r3, #40	; 0x28
 800b4f6:	d871      	bhi.n	800b5dc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b4f8:	a201      	add	r2, pc, #4	; (adr r2, 800b500 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800b4fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4fe:	bf00      	nop
 800b500:	0800b5e5 	.word	0x0800b5e5
 800b504:	0800b5dd 	.word	0x0800b5dd
 800b508:	0800b5dd 	.word	0x0800b5dd
 800b50c:	0800b5dd 	.word	0x0800b5dd
 800b510:	0800b5dd 	.word	0x0800b5dd
 800b514:	0800b5dd 	.word	0x0800b5dd
 800b518:	0800b5dd 	.word	0x0800b5dd
 800b51c:	0800b5dd 	.word	0x0800b5dd
 800b520:	0800b5b1 	.word	0x0800b5b1
 800b524:	0800b5dd 	.word	0x0800b5dd
 800b528:	0800b5dd 	.word	0x0800b5dd
 800b52c:	0800b5dd 	.word	0x0800b5dd
 800b530:	0800b5dd 	.word	0x0800b5dd
 800b534:	0800b5dd 	.word	0x0800b5dd
 800b538:	0800b5dd 	.word	0x0800b5dd
 800b53c:	0800b5dd 	.word	0x0800b5dd
 800b540:	0800b5c7 	.word	0x0800b5c7
 800b544:	0800b5dd 	.word	0x0800b5dd
 800b548:	0800b5dd 	.word	0x0800b5dd
 800b54c:	0800b5dd 	.word	0x0800b5dd
 800b550:	0800b5dd 	.word	0x0800b5dd
 800b554:	0800b5dd 	.word	0x0800b5dd
 800b558:	0800b5dd 	.word	0x0800b5dd
 800b55c:	0800b5dd 	.word	0x0800b5dd
 800b560:	0800b5e5 	.word	0x0800b5e5
 800b564:	0800b5dd 	.word	0x0800b5dd
 800b568:	0800b5dd 	.word	0x0800b5dd
 800b56c:	0800b5dd 	.word	0x0800b5dd
 800b570:	0800b5dd 	.word	0x0800b5dd
 800b574:	0800b5dd 	.word	0x0800b5dd
 800b578:	0800b5dd 	.word	0x0800b5dd
 800b57c:	0800b5dd 	.word	0x0800b5dd
 800b580:	0800b5e5 	.word	0x0800b5e5
 800b584:	0800b5dd 	.word	0x0800b5dd
 800b588:	0800b5dd 	.word	0x0800b5dd
 800b58c:	0800b5dd 	.word	0x0800b5dd
 800b590:	0800b5dd 	.word	0x0800b5dd
 800b594:	0800b5dd 	.word	0x0800b5dd
 800b598:	0800b5dd 	.word	0x0800b5dd
 800b59c:	0800b5dd 	.word	0x0800b5dd
 800b5a0:	0800b5e5 	.word	0x0800b5e5
 800b5a4:	58024400 	.word	0x58024400
 800b5a8:	58024800 	.word	0x58024800
 800b5ac:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b5b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5b4:	3308      	adds	r3, #8
 800b5b6:	2101      	movs	r1, #1
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f001 fdcb 	bl	800d154 <RCCEx_PLL2_Config>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b5c4:	e00f      	b.n	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b5c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5ca:	3328      	adds	r3, #40	; 0x28
 800b5cc:	2101      	movs	r1, #1
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f001 fe72 	bl	800d2b8 <RCCEx_PLL3_Config>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b5da:	e004      	b.n	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5dc:	2301      	movs	r3, #1
 800b5de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b5e2:	e000      	b.n	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800b5e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d10a      	bne.n	800b604 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b5ee:	4bbf      	ldr	r3, [pc, #764]	; (800b8ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b5f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5f2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b5f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b5fc:	4abb      	ldr	r2, [pc, #748]	; (800b8ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b5fe:	430b      	orrs	r3, r1
 800b600:	6553      	str	r3, [r2, #84]	; 0x54
 800b602:	e003      	b.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b604:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b608:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b60c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b614:	f002 0302 	and.w	r3, r2, #2
 800b618:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b61c:	2300      	movs	r3, #0
 800b61e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b622:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b626:	460b      	mov	r3, r1
 800b628:	4313      	orrs	r3, r2
 800b62a:	d041      	beq.n	800b6b0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b62c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b632:	2b05      	cmp	r3, #5
 800b634:	d824      	bhi.n	800b680 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800b636:	a201      	add	r2, pc, #4	; (adr r2, 800b63c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800b638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b63c:	0800b689 	.word	0x0800b689
 800b640:	0800b655 	.word	0x0800b655
 800b644:	0800b66b 	.word	0x0800b66b
 800b648:	0800b689 	.word	0x0800b689
 800b64c:	0800b689 	.word	0x0800b689
 800b650:	0800b689 	.word	0x0800b689
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b654:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b658:	3308      	adds	r3, #8
 800b65a:	2101      	movs	r1, #1
 800b65c:	4618      	mov	r0, r3
 800b65e:	f001 fd79 	bl	800d154 <RCCEx_PLL2_Config>
 800b662:	4603      	mov	r3, r0
 800b664:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b668:	e00f      	b.n	800b68a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b66a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b66e:	3328      	adds	r3, #40	; 0x28
 800b670:	2101      	movs	r1, #1
 800b672:	4618      	mov	r0, r3
 800b674:	f001 fe20 	bl	800d2b8 <RCCEx_PLL3_Config>
 800b678:	4603      	mov	r3, r0
 800b67a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b67e:	e004      	b.n	800b68a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b680:	2301      	movs	r3, #1
 800b682:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b686:	e000      	b.n	800b68a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800b688:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b68a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d10a      	bne.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b692:	4b96      	ldr	r3, [pc, #600]	; (800b8ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b696:	f023 0107 	bic.w	r1, r3, #7
 800b69a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b69e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6a0:	4a92      	ldr	r2, [pc, #584]	; (800b8ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b6a2:	430b      	orrs	r3, r1
 800b6a4:	6553      	str	r3, [r2, #84]	; 0x54
 800b6a6:	e003      	b.n	800b6b0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6ac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b6b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b8:	f002 0304 	and.w	r3, r2, #4
 800b6bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b6c6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b6ca:	460b      	mov	r3, r1
 800b6cc:	4313      	orrs	r3, r2
 800b6ce:	d044      	beq.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b6d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6d8:	2b05      	cmp	r3, #5
 800b6da:	d825      	bhi.n	800b728 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800b6dc:	a201      	add	r2, pc, #4	; (adr r2, 800b6e4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800b6de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6e2:	bf00      	nop
 800b6e4:	0800b731 	.word	0x0800b731
 800b6e8:	0800b6fd 	.word	0x0800b6fd
 800b6ec:	0800b713 	.word	0x0800b713
 800b6f0:	0800b731 	.word	0x0800b731
 800b6f4:	0800b731 	.word	0x0800b731
 800b6f8:	0800b731 	.word	0x0800b731
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b6fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b700:	3308      	adds	r3, #8
 800b702:	2101      	movs	r1, #1
 800b704:	4618      	mov	r0, r3
 800b706:	f001 fd25 	bl	800d154 <RCCEx_PLL2_Config>
 800b70a:	4603      	mov	r3, r0
 800b70c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b710:	e00f      	b.n	800b732 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b712:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b716:	3328      	adds	r3, #40	; 0x28
 800b718:	2101      	movs	r1, #1
 800b71a:	4618      	mov	r0, r3
 800b71c:	f001 fdcc 	bl	800d2b8 <RCCEx_PLL3_Config>
 800b720:	4603      	mov	r3, r0
 800b722:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b726:	e004      	b.n	800b732 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b728:	2301      	movs	r3, #1
 800b72a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b72e:	e000      	b.n	800b732 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800b730:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b732:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b736:	2b00      	cmp	r3, #0
 800b738:	d10b      	bne.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b73a:	4b6c      	ldr	r3, [pc, #432]	; (800b8ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b73c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b73e:	f023 0107 	bic.w	r1, r3, #7
 800b742:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b74a:	4a68      	ldr	r2, [pc, #416]	; (800b8ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b74c:	430b      	orrs	r3, r1
 800b74e:	6593      	str	r3, [r2, #88]	; 0x58
 800b750:	e003      	b.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b752:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b756:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b75a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b762:	f002 0320 	and.w	r3, r2, #32
 800b766:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b76a:	2300      	movs	r3, #0
 800b76c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b770:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b774:	460b      	mov	r3, r1
 800b776:	4313      	orrs	r3, r2
 800b778:	d055      	beq.n	800b826 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b77a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b77e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b782:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b786:	d033      	beq.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800b788:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b78c:	d82c      	bhi.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b78e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b792:	d02f      	beq.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b798:	d826      	bhi.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b79a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b79e:	d02b      	beq.n	800b7f8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b7a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b7a4:	d820      	bhi.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b7a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7aa:	d012      	beq.n	800b7d2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800b7ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7b0:	d81a      	bhi.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d022      	beq.n	800b7fc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b7b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b7ba:	d115      	bne.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b7bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7c0:	3308      	adds	r3, #8
 800b7c2:	2100      	movs	r1, #0
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f001 fcc5 	bl	800d154 <RCCEx_PLL2_Config>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b7d0:	e015      	b.n	800b7fe <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b7d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7d6:	3328      	adds	r3, #40	; 0x28
 800b7d8:	2102      	movs	r1, #2
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f001 fd6c 	bl	800d2b8 <RCCEx_PLL3_Config>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b7e6:	e00a      	b.n	800b7fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b7ee:	e006      	b.n	800b7fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b7f0:	bf00      	nop
 800b7f2:	e004      	b.n	800b7fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b7f4:	bf00      	nop
 800b7f6:	e002      	b.n	800b7fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b7f8:	bf00      	nop
 800b7fa:	e000      	b.n	800b7fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b7fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b802:	2b00      	cmp	r3, #0
 800b804:	d10b      	bne.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b806:	4b39      	ldr	r3, [pc, #228]	; (800b8ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b80a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b80e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b812:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b816:	4a35      	ldr	r2, [pc, #212]	; (800b8ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b818:	430b      	orrs	r3, r1
 800b81a:	6553      	str	r3, [r2, #84]	; 0x54
 800b81c:	e003      	b.n	800b826 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b81e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b822:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b826:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b82e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b832:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b836:	2300      	movs	r3, #0
 800b838:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b83c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b840:	460b      	mov	r3, r1
 800b842:	4313      	orrs	r3, r2
 800b844:	d058      	beq.n	800b8f8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b846:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b84a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b84e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b852:	d033      	beq.n	800b8bc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b854:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b858:	d82c      	bhi.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b85a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b85e:	d02f      	beq.n	800b8c0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b864:	d826      	bhi.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b866:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b86a:	d02b      	beq.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b86c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b870:	d820      	bhi.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b872:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b876:	d012      	beq.n	800b89e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800b878:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b87c:	d81a      	bhi.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d022      	beq.n	800b8c8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b886:	d115      	bne.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b888:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b88c:	3308      	adds	r3, #8
 800b88e:	2100      	movs	r1, #0
 800b890:	4618      	mov	r0, r3
 800b892:	f001 fc5f 	bl	800d154 <RCCEx_PLL2_Config>
 800b896:	4603      	mov	r3, r0
 800b898:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b89c:	e015      	b.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b89e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8a2:	3328      	adds	r3, #40	; 0x28
 800b8a4:	2102      	movs	r1, #2
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f001 fd06 	bl	800d2b8 <RCCEx_PLL3_Config>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b8b2:	e00a      	b.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b8ba:	e006      	b.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b8bc:	bf00      	nop
 800b8be:	e004      	b.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b8c0:	bf00      	nop
 800b8c2:	e002      	b.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b8c4:	bf00      	nop
 800b8c6:	e000      	b.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b8c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d10e      	bne.n	800b8f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b8d2:	4b06      	ldr	r3, [pc, #24]	; (800b8ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b8d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8d6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b8da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b8e2:	4a02      	ldr	r2, [pc, #8]	; (800b8ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b8e4:	430b      	orrs	r3, r1
 800b8e6:	6593      	str	r3, [r2, #88]	; 0x58
 800b8e8:	e006      	b.n	800b8f8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800b8ea:	bf00      	nop
 800b8ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8f4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b8f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b900:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b904:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b908:	2300      	movs	r3, #0
 800b90a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b90e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b912:	460b      	mov	r3, r1
 800b914:	4313      	orrs	r3, r2
 800b916:	d055      	beq.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b918:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b91c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b920:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b924:	d033      	beq.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800b926:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b92a:	d82c      	bhi.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b92c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b930:	d02f      	beq.n	800b992 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b932:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b936:	d826      	bhi.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b938:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b93c:	d02b      	beq.n	800b996 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b93e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b942:	d820      	bhi.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b944:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b948:	d012      	beq.n	800b970 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800b94a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b94e:	d81a      	bhi.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b950:	2b00      	cmp	r3, #0
 800b952:	d022      	beq.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b958:	d115      	bne.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b95a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b95e:	3308      	adds	r3, #8
 800b960:	2100      	movs	r1, #0
 800b962:	4618      	mov	r0, r3
 800b964:	f001 fbf6 	bl	800d154 <RCCEx_PLL2_Config>
 800b968:	4603      	mov	r3, r0
 800b96a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b96e:	e015      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b970:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b974:	3328      	adds	r3, #40	; 0x28
 800b976:	2102      	movs	r1, #2
 800b978:	4618      	mov	r0, r3
 800b97a:	f001 fc9d 	bl	800d2b8 <RCCEx_PLL3_Config>
 800b97e:	4603      	mov	r3, r0
 800b980:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b984:	e00a      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b986:	2301      	movs	r3, #1
 800b988:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b98c:	e006      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b98e:	bf00      	nop
 800b990:	e004      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b992:	bf00      	nop
 800b994:	e002      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b996:	bf00      	nop
 800b998:	e000      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b99a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b99c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d10b      	bne.n	800b9bc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b9a4:	4ba0      	ldr	r3, [pc, #640]	; (800bc28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b9a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9a8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b9ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b9b4:	4a9c      	ldr	r2, [pc, #624]	; (800bc28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b9b6:	430b      	orrs	r3, r1
 800b9b8:	6593      	str	r3, [r2, #88]	; 0x58
 800b9ba:	e003      	b.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b9c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9cc:	f002 0308 	and.w	r3, r2, #8
 800b9d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b9da:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b9de:	460b      	mov	r3, r1
 800b9e0:	4313      	orrs	r3, r2
 800b9e2:	d01e      	beq.n	800ba22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800b9e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9f0:	d10c      	bne.n	800ba0c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b9f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9f6:	3328      	adds	r3, #40	; 0x28
 800b9f8:	2102      	movs	r1, #2
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f001 fc5c 	bl	800d2b8 <RCCEx_PLL3_Config>
 800ba00:	4603      	mov	r3, r0
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d002      	beq.n	800ba0c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800ba06:	2301      	movs	r3, #1
 800ba08:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800ba0c:	4b86      	ldr	r3, [pc, #536]	; (800bc28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ba0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba10:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ba14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba1c:	4a82      	ldr	r2, [pc, #520]	; (800bc28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ba1e:	430b      	orrs	r3, r1
 800ba20:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ba22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba2a:	f002 0310 	and.w	r3, r2, #16
 800ba2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ba32:	2300      	movs	r3, #0
 800ba34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ba38:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800ba3c:	460b      	mov	r3, r1
 800ba3e:	4313      	orrs	r3, r2
 800ba40:	d01e      	beq.n	800ba80 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800ba42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba4e:	d10c      	bne.n	800ba6a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ba50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba54:	3328      	adds	r3, #40	; 0x28
 800ba56:	2102      	movs	r1, #2
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f001 fc2d 	bl	800d2b8 <RCCEx_PLL3_Config>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d002      	beq.n	800ba6a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800ba64:	2301      	movs	r3, #1
 800ba66:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ba6a:	4b6f      	ldr	r3, [pc, #444]	; (800bc28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ba6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ba72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba7a:	4a6b      	ldr	r2, [pc, #428]	; (800bc28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ba7c:	430b      	orrs	r3, r1
 800ba7e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ba80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba88:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800ba8c:	67bb      	str	r3, [r7, #120]	; 0x78
 800ba8e:	2300      	movs	r3, #0
 800ba90:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ba92:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800ba96:	460b      	mov	r3, r1
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	d03e      	beq.n	800bb1a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800ba9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baa0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800baa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800baa8:	d022      	beq.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800baaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800baae:	d81b      	bhi.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d003      	beq.n	800babc <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800bab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bab8:	d00b      	beq.n	800bad2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800baba:	e015      	b.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800babc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bac0:	3308      	adds	r3, #8
 800bac2:	2100      	movs	r1, #0
 800bac4:	4618      	mov	r0, r3
 800bac6:	f001 fb45 	bl	800d154 <RCCEx_PLL2_Config>
 800baca:	4603      	mov	r3, r0
 800bacc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bad0:	e00f      	b.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bad6:	3328      	adds	r3, #40	; 0x28
 800bad8:	2102      	movs	r1, #2
 800bada:	4618      	mov	r0, r3
 800badc:	f001 fbec 	bl	800d2b8 <RCCEx_PLL3_Config>
 800bae0:	4603      	mov	r3, r0
 800bae2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bae6:	e004      	b.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bae8:	2301      	movs	r3, #1
 800baea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800baee:	e000      	b.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800baf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800baf2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d10b      	bne.n	800bb12 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bafa:	4b4b      	ldr	r3, [pc, #300]	; (800bc28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bafc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bafe:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800bb02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bb0a:	4a47      	ldr	r2, [pc, #284]	; (800bc28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bb0c:	430b      	orrs	r3, r1
 800bb0e:	6593      	str	r3, [r2, #88]	; 0x58
 800bb10:	e003      	b.n	800bb1a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb12:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb16:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bb1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb22:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800bb26:	673b      	str	r3, [r7, #112]	; 0x70
 800bb28:	2300      	movs	r3, #0
 800bb2a:	677b      	str	r3, [r7, #116]	; 0x74
 800bb2c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800bb30:	460b      	mov	r3, r1
 800bb32:	4313      	orrs	r3, r2
 800bb34:	d03b      	beq.n	800bbae <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800bb36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb3e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bb42:	d01f      	beq.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800bb44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bb48:	d818      	bhi.n	800bb7c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800bb4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb4e:	d003      	beq.n	800bb58 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800bb50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bb54:	d007      	beq.n	800bb66 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800bb56:	e011      	b.n	800bb7c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb58:	4b33      	ldr	r3, [pc, #204]	; (800bc28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bb5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb5c:	4a32      	ldr	r2, [pc, #200]	; (800bc28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bb5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800bb64:	e00f      	b.n	800bb86 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb6a:	3328      	adds	r3, #40	; 0x28
 800bb6c:	2101      	movs	r1, #1
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f001 fba2 	bl	800d2b8 <RCCEx_PLL3_Config>
 800bb74:	4603      	mov	r3, r0
 800bb76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800bb7a:	e004      	b.n	800bb86 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bb82:	e000      	b.n	800bb86 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800bb84:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb86:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d10b      	bne.n	800bba6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bb8e:	4b26      	ldr	r3, [pc, #152]	; (800bc28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bb90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb92:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800bb96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb9e:	4a22      	ldr	r2, [pc, #136]	; (800bc28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bba0:	430b      	orrs	r3, r1
 800bba2:	6553      	str	r3, [r2, #84]	; 0x54
 800bba4:	e003      	b.n	800bbae <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bba6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbaa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bbae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800bbba:	66bb      	str	r3, [r7, #104]	; 0x68
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bbc0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800bbc4:	460b      	mov	r3, r1
 800bbc6:	4313      	orrs	r3, r2
 800bbc8:	d034      	beq.n	800bc34 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800bbca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d003      	beq.n	800bbdc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800bbd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bbd8:	d007      	beq.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800bbda:	e011      	b.n	800bc00 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbdc:	4b12      	ldr	r3, [pc, #72]	; (800bc28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bbde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbe0:	4a11      	ldr	r2, [pc, #68]	; (800bc28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bbe2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bbe6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bbe8:	e00e      	b.n	800bc08 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bbea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbee:	3308      	adds	r3, #8
 800bbf0:	2102      	movs	r1, #2
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f001 faae 	bl	800d154 <RCCEx_PLL2_Config>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bbfe:	e003      	b.n	800bc08 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800bc00:	2301      	movs	r3, #1
 800bc02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bc06:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d10d      	bne.n	800bc2c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bc10:	4b05      	ldr	r3, [pc, #20]	; (800bc28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bc12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bc18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc1e:	4a02      	ldr	r2, [pc, #8]	; (800bc28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bc20:	430b      	orrs	r3, r1
 800bc22:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bc24:	e006      	b.n	800bc34 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800bc26:	bf00      	nop
 800bc28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc30:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bc34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc3c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800bc40:	663b      	str	r3, [r7, #96]	; 0x60
 800bc42:	2300      	movs	r3, #0
 800bc44:	667b      	str	r3, [r7, #100]	; 0x64
 800bc46:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800bc4a:	460b      	mov	r3, r1
 800bc4c:	4313      	orrs	r3, r2
 800bc4e:	d00c      	beq.n	800bc6a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bc50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc54:	3328      	adds	r3, #40	; 0x28
 800bc56:	2102      	movs	r1, #2
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f001 fb2d 	bl	800d2b8 <RCCEx_PLL3_Config>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d002      	beq.n	800bc6a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800bc64:	2301      	movs	r3, #1
 800bc66:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bc6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc72:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800bc76:	65bb      	str	r3, [r7, #88]	; 0x58
 800bc78:	2300      	movs	r3, #0
 800bc7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bc7c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800bc80:	460b      	mov	r3, r1
 800bc82:	4313      	orrs	r3, r2
 800bc84:	d036      	beq.n	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800bc86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bc90:	d018      	beq.n	800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800bc92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bc96:	d811      	bhi.n	800bcbc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800bc98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc9c:	d014      	beq.n	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800bc9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bca2:	d80b      	bhi.n	800bcbc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d011      	beq.n	800bccc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800bca8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcac:	d106      	bne.n	800bcbc <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bcae:	4bb7      	ldr	r3, [pc, #732]	; (800bf8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bcb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcb2:	4ab6      	ldr	r2, [pc, #728]	; (800bf8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bcb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bcb8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800bcba:	e008      	b.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bcc2:	e004      	b.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800bcc4:	bf00      	nop
 800bcc6:	e002      	b.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800bcc8:	bf00      	nop
 800bcca:	e000      	b.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800bccc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d10a      	bne.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bcd6:	4bad      	ldr	r3, [pc, #692]	; (800bf8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bcd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcda:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bcde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bce2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bce4:	4aa9      	ldr	r2, [pc, #676]	; (800bf8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bce6:	430b      	orrs	r3, r1
 800bce8:	6553      	str	r3, [r2, #84]	; 0x54
 800bcea:	e003      	b.n	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bcf0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bcf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcfc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800bd00:	653b      	str	r3, [r7, #80]	; 0x50
 800bd02:	2300      	movs	r3, #0
 800bd04:	657b      	str	r3, [r7, #84]	; 0x54
 800bd06:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800bd0a:	460b      	mov	r3, r1
 800bd0c:	4313      	orrs	r3, r2
 800bd0e:	d009      	beq.n	800bd24 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bd10:	4b9e      	ldr	r3, [pc, #632]	; (800bf8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd14:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bd18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd1e:	4a9b      	ldr	r2, [pc, #620]	; (800bf8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd20:	430b      	orrs	r3, r1
 800bd22:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bd24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd2c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800bd30:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd32:	2300      	movs	r3, #0
 800bd34:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd36:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800bd3a:	460b      	mov	r3, r1
 800bd3c:	4313      	orrs	r3, r2
 800bd3e:	d009      	beq.n	800bd54 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bd40:	4b92      	ldr	r3, [pc, #584]	; (800bf8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd44:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800bd48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd4e:	4a8f      	ldr	r2, [pc, #572]	; (800bf8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd50:	430b      	orrs	r3, r1
 800bd52:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bd54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd5c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800bd60:	643b      	str	r3, [r7, #64]	; 0x40
 800bd62:	2300      	movs	r3, #0
 800bd64:	647b      	str	r3, [r7, #68]	; 0x44
 800bd66:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800bd6a:	460b      	mov	r3, r1
 800bd6c:	4313      	orrs	r3, r2
 800bd6e:	d00e      	beq.n	800bd8e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bd70:	4b86      	ldr	r3, [pc, #536]	; (800bf8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd72:	691b      	ldr	r3, [r3, #16]
 800bd74:	4a85      	ldr	r2, [pc, #532]	; (800bf8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd76:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bd7a:	6113      	str	r3, [r2, #16]
 800bd7c:	4b83      	ldr	r3, [pc, #524]	; (800bf8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd7e:	6919      	ldr	r1, [r3, #16]
 800bd80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bd88:	4a80      	ldr	r2, [pc, #512]	; (800bf8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd8a:	430b      	orrs	r3, r1
 800bd8c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bd8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd96:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800bd9a:	63bb      	str	r3, [r7, #56]	; 0x38
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bda0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800bda4:	460b      	mov	r3, r1
 800bda6:	4313      	orrs	r3, r2
 800bda8:	d009      	beq.n	800bdbe <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bdaa:	4b78      	ldr	r3, [pc, #480]	; (800bf8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bdac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdae:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bdb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdb8:	4a74      	ldr	r2, [pc, #464]	; (800bf8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bdba:	430b      	orrs	r3, r1
 800bdbc:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bdbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800bdca:	633b      	str	r3, [r7, #48]	; 0x30
 800bdcc:	2300      	movs	r3, #0
 800bdce:	637b      	str	r3, [r7, #52]	; 0x34
 800bdd0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800bdd4:	460b      	mov	r3, r1
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	d00a      	beq.n	800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bdda:	4b6c      	ldr	r3, [pc, #432]	; (800bf8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdde:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800bde2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bde6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdea:	4a68      	ldr	r2, [pc, #416]	; (800bf8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bdec:	430b      	orrs	r3, r1
 800bdee:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800bdf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf8:	2100      	movs	r1, #0
 800bdfa:	62b9      	str	r1, [r7, #40]	; 0x28
 800bdfc:	f003 0301 	and.w	r3, r3, #1
 800be00:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be02:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800be06:	460b      	mov	r3, r1
 800be08:	4313      	orrs	r3, r2
 800be0a:	d011      	beq.n	800be30 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be10:	3308      	adds	r3, #8
 800be12:	2100      	movs	r1, #0
 800be14:	4618      	mov	r0, r3
 800be16:	f001 f99d 	bl	800d154 <RCCEx_PLL2_Config>
 800be1a:	4603      	mov	r3, r0
 800be1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800be20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be24:	2b00      	cmp	r3, #0
 800be26:	d003      	beq.n	800be30 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be2c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800be30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be38:	2100      	movs	r1, #0
 800be3a:	6239      	str	r1, [r7, #32]
 800be3c:	f003 0302 	and.w	r3, r3, #2
 800be40:	627b      	str	r3, [r7, #36]	; 0x24
 800be42:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800be46:	460b      	mov	r3, r1
 800be48:	4313      	orrs	r3, r2
 800be4a:	d011      	beq.n	800be70 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800be4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be50:	3308      	adds	r3, #8
 800be52:	2101      	movs	r1, #1
 800be54:	4618      	mov	r0, r3
 800be56:	f001 f97d 	bl	800d154 <RCCEx_PLL2_Config>
 800be5a:	4603      	mov	r3, r0
 800be5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800be60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be64:	2b00      	cmp	r3, #0
 800be66:	d003      	beq.n	800be70 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be6c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800be70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be78:	2100      	movs	r1, #0
 800be7a:	61b9      	str	r1, [r7, #24]
 800be7c:	f003 0304 	and.w	r3, r3, #4
 800be80:	61fb      	str	r3, [r7, #28]
 800be82:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800be86:	460b      	mov	r3, r1
 800be88:	4313      	orrs	r3, r2
 800be8a:	d011      	beq.n	800beb0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800be8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be90:	3308      	adds	r3, #8
 800be92:	2102      	movs	r1, #2
 800be94:	4618      	mov	r0, r3
 800be96:	f001 f95d 	bl	800d154 <RCCEx_PLL2_Config>
 800be9a:	4603      	mov	r3, r0
 800be9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bea0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d003      	beq.n	800beb0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bea8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800beac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800beb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800beb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb8:	2100      	movs	r1, #0
 800beba:	6139      	str	r1, [r7, #16]
 800bebc:	f003 0308 	and.w	r3, r3, #8
 800bec0:	617b      	str	r3, [r7, #20]
 800bec2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bec6:	460b      	mov	r3, r1
 800bec8:	4313      	orrs	r3, r2
 800beca:	d011      	beq.n	800bef0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800becc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bed0:	3328      	adds	r3, #40	; 0x28
 800bed2:	2100      	movs	r1, #0
 800bed4:	4618      	mov	r0, r3
 800bed6:	f001 f9ef 	bl	800d2b8 <RCCEx_PLL3_Config>
 800beda:	4603      	mov	r3, r0
 800bedc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800bee0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d003      	beq.n	800bef0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bee8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800beec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef8:	2100      	movs	r1, #0
 800befa:	60b9      	str	r1, [r7, #8]
 800befc:	f003 0310 	and.w	r3, r3, #16
 800bf00:	60fb      	str	r3, [r7, #12]
 800bf02:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bf06:	460b      	mov	r3, r1
 800bf08:	4313      	orrs	r3, r2
 800bf0a:	d011      	beq.n	800bf30 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bf0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf10:	3328      	adds	r3, #40	; 0x28
 800bf12:	2101      	movs	r1, #1
 800bf14:	4618      	mov	r0, r3
 800bf16:	f001 f9cf 	bl	800d2b8 <RCCEx_PLL3_Config>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bf20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d003      	beq.n	800bf30 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf2c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bf30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf38:	2100      	movs	r1, #0
 800bf3a:	6039      	str	r1, [r7, #0]
 800bf3c:	f003 0320 	and.w	r3, r3, #32
 800bf40:	607b      	str	r3, [r7, #4]
 800bf42:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bf46:	460b      	mov	r3, r1
 800bf48:	4313      	orrs	r3, r2
 800bf4a:	d011      	beq.n	800bf70 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bf4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf50:	3328      	adds	r3, #40	; 0x28
 800bf52:	2102      	movs	r1, #2
 800bf54:	4618      	mov	r0, r3
 800bf56:	f001 f9af 	bl	800d2b8 <RCCEx_PLL3_Config>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bf60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d003      	beq.n	800bf70 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf6c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800bf70:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d101      	bne.n	800bf7c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	e000      	b.n	800bf7e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800bf7c:	2301      	movs	r3, #1
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800bf84:	46bd      	mov	sp, r7
 800bf86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bf8a:	bf00      	nop
 800bf8c:	58024400 	.word	0x58024400

0800bf90 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b090      	sub	sp, #64	; 0x40
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bf9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf9e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800bfa2:	430b      	orrs	r3, r1
 800bfa4:	f040 8094 	bne.w	800c0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800bfa8:	4b9b      	ldr	r3, [pc, #620]	; (800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bfaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfac:	f003 0307 	and.w	r3, r3, #7
 800bfb0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bfb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb4:	2b04      	cmp	r3, #4
 800bfb6:	f200 8087 	bhi.w	800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800bfba:	a201      	add	r2, pc, #4	; (adr r2, 800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800bfbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfc0:	0800bfd5 	.word	0x0800bfd5
 800bfc4:	0800bffd 	.word	0x0800bffd
 800bfc8:	0800c025 	.word	0x0800c025
 800bfcc:	0800c0c1 	.word	0x0800c0c1
 800bfd0:	0800c04d 	.word	0x0800c04d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bfd4:	4b90      	ldr	r3, [pc, #576]	; (800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bfdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bfe0:	d108      	bne.n	800bff4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bfe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f000 ff62 	bl	800ceb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bfec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bff0:	f000 bc93 	b.w	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bff4:	2300      	movs	r3, #0
 800bff6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bff8:	f000 bc8f 	b.w	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bffc:	4b86      	ldr	r3, [pc, #536]	; (800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c004:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c008:	d108      	bne.n	800c01c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c00a:	f107 0318 	add.w	r3, r7, #24
 800c00e:	4618      	mov	r0, r3
 800c010:	f000 fca6 	bl	800c960 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c014:	69bb      	ldr	r3, [r7, #24]
 800c016:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c018:	f000 bc7f 	b.w	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c01c:	2300      	movs	r3, #0
 800c01e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c020:	f000 bc7b 	b.w	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c024:	4b7c      	ldr	r3, [pc, #496]	; (800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c02c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c030:	d108      	bne.n	800c044 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c032:	f107 030c 	add.w	r3, r7, #12
 800c036:	4618      	mov	r0, r3
 800c038:	f000 fde6 	bl	800cc08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c040:	f000 bc6b 	b.w	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c044:	2300      	movs	r3, #0
 800c046:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c048:	f000 bc67 	b.w	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c04c:	4b72      	ldr	r3, [pc, #456]	; (800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c04e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c050:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c054:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c056:	4b70      	ldr	r3, [pc, #448]	; (800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f003 0304 	and.w	r3, r3, #4
 800c05e:	2b04      	cmp	r3, #4
 800c060:	d10c      	bne.n	800c07c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c064:	2b00      	cmp	r3, #0
 800c066:	d109      	bne.n	800c07c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c068:	4b6b      	ldr	r3, [pc, #428]	; (800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	08db      	lsrs	r3, r3, #3
 800c06e:	f003 0303 	and.w	r3, r3, #3
 800c072:	4a6a      	ldr	r2, [pc, #424]	; (800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c074:	fa22 f303 	lsr.w	r3, r2, r3
 800c078:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c07a:	e01f      	b.n	800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c07c:	4b66      	ldr	r3, [pc, #408]	; (800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c084:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c088:	d106      	bne.n	800c098 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c08a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c08c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c090:	d102      	bne.n	800c098 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c092:	4b63      	ldr	r3, [pc, #396]	; (800c220 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800c094:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c096:	e011      	b.n	800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c098:	4b5f      	ldr	r3, [pc, #380]	; (800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0a4:	d106      	bne.n	800c0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c0a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0ac:	d102      	bne.n	800c0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c0ae:	4b5d      	ldr	r3, [pc, #372]	; (800c224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c0b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0b2:	e003      	b.n	800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c0b8:	f000 bc2f 	b.w	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c0bc:	f000 bc2d 	b.w	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c0c0:	4b59      	ldr	r3, [pc, #356]	; (800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c0c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0c4:	f000 bc29 	b.w	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0cc:	f000 bc25 	b.w	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c0d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0d4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c0d8:	430b      	orrs	r3, r1
 800c0da:	f040 80a7 	bne.w	800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c0de:	4b4e      	ldr	r3, [pc, #312]	; (800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c0e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0e2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c0e6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c0ee:	d054      	beq.n	800c19a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800c0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c0f6:	f200 808b 	bhi.w	800c210 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0fc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c100:	f000 8083 	beq.w	800c20a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800c104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c106:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c10a:	f200 8081 	bhi.w	800c210 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c110:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c114:	d02f      	beq.n	800c176 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c118:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c11c:	d878      	bhi.n	800c210 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c120:	2b00      	cmp	r3, #0
 800c122:	d004      	beq.n	800c12e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800c124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c126:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c12a:	d012      	beq.n	800c152 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800c12c:	e070      	b.n	800c210 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c12e:	4b3a      	ldr	r3, [pc, #232]	; (800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c136:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c13a:	d107      	bne.n	800c14c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c13c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c140:	4618      	mov	r0, r3
 800c142:	f000 feb5 	bl	800ceb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c148:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c14a:	e3e6      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c14c:	2300      	movs	r3, #0
 800c14e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c150:	e3e3      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c152:	4b31      	ldr	r3, [pc, #196]	; (800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c15a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c15e:	d107      	bne.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c160:	f107 0318 	add.w	r3, r7, #24
 800c164:	4618      	mov	r0, r3
 800c166:	f000 fbfb 	bl	800c960 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c16a:	69bb      	ldr	r3, [r7, #24]
 800c16c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c16e:	e3d4      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c170:	2300      	movs	r3, #0
 800c172:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c174:	e3d1      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c176:	4b28      	ldr	r3, [pc, #160]	; (800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c17e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c182:	d107      	bne.n	800c194 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c184:	f107 030c 	add.w	r3, r7, #12
 800c188:	4618      	mov	r0, r3
 800c18a:	f000 fd3d 	bl	800cc08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c192:	e3c2      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c194:	2300      	movs	r3, #0
 800c196:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c198:	e3bf      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c19a:	4b1f      	ldr	r3, [pc, #124]	; (800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c19c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c19e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c1a2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c1a4:	4b1c      	ldr	r3, [pc, #112]	; (800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	f003 0304 	and.w	r3, r3, #4
 800c1ac:	2b04      	cmp	r3, #4
 800c1ae:	d10c      	bne.n	800c1ca <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800c1b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d109      	bne.n	800c1ca <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c1b6:	4b18      	ldr	r3, [pc, #96]	; (800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	08db      	lsrs	r3, r3, #3
 800c1bc:	f003 0303 	and.w	r3, r3, #3
 800c1c0:	4a16      	ldr	r2, [pc, #88]	; (800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c1c2:	fa22 f303 	lsr.w	r3, r2, r3
 800c1c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1c8:	e01e      	b.n	800c208 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c1ca:	4b13      	ldr	r3, [pc, #76]	; (800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1d6:	d106      	bne.n	800c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800c1d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c1de:	d102      	bne.n	800c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c1e0:	4b0f      	ldr	r3, [pc, #60]	; (800c220 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800c1e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1e4:	e010      	b.n	800c208 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c1e6:	4b0c      	ldr	r3, [pc, #48]	; (800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1f2:	d106      	bne.n	800c202 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800c1f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1fa:	d102      	bne.n	800c202 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c1fc:	4b09      	ldr	r3, [pc, #36]	; (800c224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c1fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c200:	e002      	b.n	800c208 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c202:	2300      	movs	r3, #0
 800c204:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c206:	e388      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c208:	e387      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c20a:	4b07      	ldr	r3, [pc, #28]	; (800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c20c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c20e:	e384      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c210:	2300      	movs	r3, #0
 800c212:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c214:	e381      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c216:	bf00      	nop
 800c218:	58024400 	.word	0x58024400
 800c21c:	03d09000 	.word	0x03d09000
 800c220:	003d0900 	.word	0x003d0900
 800c224:	02faf080 	.word	0x02faf080
 800c228:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c22c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c230:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c234:	430b      	orrs	r3, r1
 800c236:	f040 809c 	bne.w	800c372 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c23a:	4b9e      	ldr	r3, [pc, #632]	; (800c4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c23c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c23e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c242:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c246:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c24a:	d054      	beq.n	800c2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800c24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c24e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c252:	f200 808b 	bhi.w	800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c258:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c25c:	f000 8083 	beq.w	800c366 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800c260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c262:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c266:	f200 8081 	bhi.w	800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c26c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c270:	d02f      	beq.n	800c2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800c272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c274:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c278:	d878      	bhi.n	800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d004      	beq.n	800c28a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800c280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c282:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c286:	d012      	beq.n	800c2ae <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800c288:	e070      	b.n	800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c28a:	4b8a      	ldr	r3, [pc, #552]	; (800c4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c292:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c296:	d107      	bne.n	800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c29c:	4618      	mov	r0, r3
 800c29e:	f000 fe07 	bl	800ceb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2a6:	e338      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2ac:	e335      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c2ae:	4b81      	ldr	r3, [pc, #516]	; (800c4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2ba:	d107      	bne.n	800c2cc <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2bc:	f107 0318 	add.w	r3, r7, #24
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f000 fb4d 	bl	800c960 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c2c6:	69bb      	ldr	r3, [r7, #24]
 800c2c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2ca:	e326      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2d0:	e323      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c2d2:	4b78      	ldr	r3, [pc, #480]	; (800c4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c2da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2de:	d107      	bne.n	800c2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c2e0:	f107 030c 	add.w	r3, r7, #12
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f000 fc8f 	bl	800cc08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2ee:	e314      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2f4:	e311      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c2f6:	4b6f      	ldr	r3, [pc, #444]	; (800c4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c2f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c2fe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c300:	4b6c      	ldr	r3, [pc, #432]	; (800c4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f003 0304 	and.w	r3, r3, #4
 800c308:	2b04      	cmp	r3, #4
 800c30a:	d10c      	bne.n	800c326 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800c30c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d109      	bne.n	800c326 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c312:	4b68      	ldr	r3, [pc, #416]	; (800c4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	08db      	lsrs	r3, r3, #3
 800c318:	f003 0303 	and.w	r3, r3, #3
 800c31c:	4a66      	ldr	r2, [pc, #408]	; (800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c31e:	fa22 f303 	lsr.w	r3, r2, r3
 800c322:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c324:	e01e      	b.n	800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c326:	4b63      	ldr	r3, [pc, #396]	; (800c4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c32e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c332:	d106      	bne.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800c334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c336:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c33a:	d102      	bne.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c33c:	4b5f      	ldr	r3, [pc, #380]	; (800c4bc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c33e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c340:	e010      	b.n	800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c342:	4b5c      	ldr	r3, [pc, #368]	; (800c4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c34a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c34e:	d106      	bne.n	800c35e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800c350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c352:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c356:	d102      	bne.n	800c35e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c358:	4b59      	ldr	r3, [pc, #356]	; (800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c35a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c35c:	e002      	b.n	800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c35e:	2300      	movs	r3, #0
 800c360:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c362:	e2da      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c364:	e2d9      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c366:	4b57      	ldr	r3, [pc, #348]	; (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c368:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c36a:	e2d6      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c36c:	2300      	movs	r3, #0
 800c36e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c370:	e2d3      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c372:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c376:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c37a:	430b      	orrs	r3, r1
 800c37c:	f040 80a7 	bne.w	800c4ce <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c380:	4b4c      	ldr	r3, [pc, #304]	; (800c4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c384:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c388:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c38c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c390:	d055      	beq.n	800c43e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800c392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c394:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c398:	f200 8096 	bhi.w	800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c39e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c3a2:	f000 8084 	beq.w	800c4ae <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800c3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c3ac:	f200 808c 	bhi.w	800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3b6:	d030      	beq.n	800c41a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800c3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3be:	f200 8083 	bhi.w	800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c3c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d004      	beq.n	800c3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800c3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3ce:	d012      	beq.n	800c3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800c3d0:	e07a      	b.n	800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c3d2:	4b38      	ldr	r3, [pc, #224]	; (800c4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c3de:	d107      	bne.n	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c3e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f000 fd63 	bl	800ceb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3ee:	e294      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3f4:	e291      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c3f6:	4b2f      	ldr	r3, [pc, #188]	; (800c4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c402:	d107      	bne.n	800c414 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c404:	f107 0318 	add.w	r3, r7, #24
 800c408:	4618      	mov	r0, r3
 800c40a:	f000 faa9 	bl	800c960 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c40e:	69bb      	ldr	r3, [r7, #24]
 800c410:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c412:	e282      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c414:	2300      	movs	r3, #0
 800c416:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c418:	e27f      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c41a:	4b26      	ldr	r3, [pc, #152]	; (800c4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c422:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c426:	d107      	bne.n	800c438 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c428:	f107 030c 	add.w	r3, r7, #12
 800c42c:	4618      	mov	r0, r3
 800c42e:	f000 fbeb 	bl	800cc08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c436:	e270      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c438:	2300      	movs	r3, #0
 800c43a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c43c:	e26d      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c43e:	4b1d      	ldr	r3, [pc, #116]	; (800c4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c442:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c446:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c448:	4b1a      	ldr	r3, [pc, #104]	; (800c4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f003 0304 	and.w	r3, r3, #4
 800c450:	2b04      	cmp	r3, #4
 800c452:	d10c      	bne.n	800c46e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800c454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c456:	2b00      	cmp	r3, #0
 800c458:	d109      	bne.n	800c46e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c45a:	4b16      	ldr	r3, [pc, #88]	; (800c4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	08db      	lsrs	r3, r3, #3
 800c460:	f003 0303 	and.w	r3, r3, #3
 800c464:	4a14      	ldr	r2, [pc, #80]	; (800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c466:	fa22 f303 	lsr.w	r3, r2, r3
 800c46a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c46c:	e01e      	b.n	800c4ac <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c46e:	4b11      	ldr	r3, [pc, #68]	; (800c4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c47a:	d106      	bne.n	800c48a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800c47c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c47e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c482:	d102      	bne.n	800c48a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c484:	4b0d      	ldr	r3, [pc, #52]	; (800c4bc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c486:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c488:	e010      	b.n	800c4ac <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c48a:	4b0a      	ldr	r3, [pc, #40]	; (800c4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c492:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c496:	d106      	bne.n	800c4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800c498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c49a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c49e:	d102      	bne.n	800c4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c4a0:	4b07      	ldr	r3, [pc, #28]	; (800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c4a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4a4:	e002      	b.n	800c4ac <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c4aa:	e236      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c4ac:	e235      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c4ae:	4b05      	ldr	r3, [pc, #20]	; (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c4b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4b2:	e232      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c4b4:	58024400 	.word	0x58024400
 800c4b8:	03d09000 	.word	0x03d09000
 800c4bc:	003d0900 	.word	0x003d0900
 800c4c0:	02faf080 	.word	0x02faf080
 800c4c4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4cc:	e225      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c4ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4d2:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c4d6:	430b      	orrs	r3, r1
 800c4d8:	f040 8085 	bne.w	800c5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c4dc:	4b9c      	ldr	r3, [pc, #624]	; (800c750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c4de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4e0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c4e4:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c4ec:	d06b      	beq.n	800c5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800c4ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c4f4:	d874      	bhi.n	800c5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c4fc:	d056      	beq.n	800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800c4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c500:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c504:	d86c      	bhi.n	800c5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c508:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c50c:	d03b      	beq.n	800c586 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800c50e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c510:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c514:	d864      	bhi.n	800c5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c518:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c51c:	d021      	beq.n	800c562 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800c51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c520:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c524:	d85c      	bhi.n	800c5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d004      	beq.n	800c536 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800c52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c52e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c532:	d004      	beq.n	800c53e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800c534:	e054      	b.n	800c5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c536:	f7fe fb5f 	bl	800abf8 <HAL_RCC_GetPCLK1Freq>
 800c53a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c53c:	e1ed      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c53e:	4b84      	ldr	r3, [pc, #528]	; (800c750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c546:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c54a:	d107      	bne.n	800c55c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c54c:	f107 0318 	add.w	r3, r7, #24
 800c550:	4618      	mov	r0, r3
 800c552:	f000 fa05 	bl	800c960 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c556:	69fb      	ldr	r3, [r7, #28]
 800c558:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c55a:	e1de      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c55c:	2300      	movs	r3, #0
 800c55e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c560:	e1db      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c562:	4b7b      	ldr	r3, [pc, #492]	; (800c750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c56a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c56e:	d107      	bne.n	800c580 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c570:	f107 030c 	add.w	r3, r7, #12
 800c574:	4618      	mov	r0, r3
 800c576:	f000 fb47 	bl	800cc08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c57e:	e1cc      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c580:	2300      	movs	r3, #0
 800c582:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c584:	e1c9      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c586:	4b72      	ldr	r3, [pc, #456]	; (800c750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f003 0304 	and.w	r3, r3, #4
 800c58e:	2b04      	cmp	r3, #4
 800c590:	d109      	bne.n	800c5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c592:	4b6f      	ldr	r3, [pc, #444]	; (800c750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	08db      	lsrs	r3, r3, #3
 800c598:	f003 0303 	and.w	r3, r3, #3
 800c59c:	4a6d      	ldr	r2, [pc, #436]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c59e:	fa22 f303 	lsr.w	r3, r2, r3
 800c5a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5a4:	e1b9      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5aa:	e1b6      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c5ac:	4b68      	ldr	r3, [pc, #416]	; (800c750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5b8:	d102      	bne.n	800c5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800c5ba:	4b67      	ldr	r3, [pc, #412]	; (800c758 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c5bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5be:	e1ac      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5c4:	e1a9      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c5c6:	4b62      	ldr	r3, [pc, #392]	; (800c750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5d2:	d102      	bne.n	800c5da <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800c5d4:	4b61      	ldr	r3, [pc, #388]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c5d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5d8:	e19f      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5de:	e19c      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5e4:	e199      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c5e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5ea:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c5ee:	430b      	orrs	r3, r1
 800c5f0:	d173      	bne.n	800c6da <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c5f2:	4b57      	ldr	r3, [pc, #348]	; (800c750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c5f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c5fa:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c602:	d02f      	beq.n	800c664 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800c604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c606:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c60a:	d863      	bhi.n	800c6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800c60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d004      	beq.n	800c61c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800c612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c618:	d012      	beq.n	800c640 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800c61a:	e05b      	b.n	800c6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c61c:	4b4c      	ldr	r3, [pc, #304]	; (800c750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c624:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c628:	d107      	bne.n	800c63a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c62a:	f107 0318 	add.w	r3, r7, #24
 800c62e:	4618      	mov	r0, r3
 800c630:	f000 f996 	bl	800c960 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c634:	69bb      	ldr	r3, [r7, #24]
 800c636:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c638:	e16f      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c63a:	2300      	movs	r3, #0
 800c63c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c63e:	e16c      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c640:	4b43      	ldr	r3, [pc, #268]	; (800c750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c648:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c64c:	d107      	bne.n	800c65e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c64e:	f107 030c 	add.w	r3, r7, #12
 800c652:	4618      	mov	r0, r3
 800c654:	f000 fad8 	bl	800cc08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c658:	697b      	ldr	r3, [r7, #20]
 800c65a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c65c:	e15d      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c65e:	2300      	movs	r3, #0
 800c660:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c662:	e15a      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c664:	4b3a      	ldr	r3, [pc, #232]	; (800c750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c668:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c66c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c66e:	4b38      	ldr	r3, [pc, #224]	; (800c750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	f003 0304 	and.w	r3, r3, #4
 800c676:	2b04      	cmp	r3, #4
 800c678:	d10c      	bne.n	800c694 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800c67a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d109      	bne.n	800c694 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c680:	4b33      	ldr	r3, [pc, #204]	; (800c750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	08db      	lsrs	r3, r3, #3
 800c686:	f003 0303 	and.w	r3, r3, #3
 800c68a:	4a32      	ldr	r2, [pc, #200]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c68c:	fa22 f303 	lsr.w	r3, r2, r3
 800c690:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c692:	e01e      	b.n	800c6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c694:	4b2e      	ldr	r3, [pc, #184]	; (800c750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c69c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6a0:	d106      	bne.n	800c6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800c6a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c6a8:	d102      	bne.n	800c6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c6aa:	4b2b      	ldr	r3, [pc, #172]	; (800c758 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c6ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6ae:	e010      	b.n	800c6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c6b0:	4b27      	ldr	r3, [pc, #156]	; (800c750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c6bc:	d106      	bne.n	800c6cc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800c6be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6c4:	d102      	bne.n	800c6cc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c6c6:	4b25      	ldr	r3, [pc, #148]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c6c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6ca:	e002      	b.n	800c6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c6d0:	e123      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c6d2:	e122      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6d8:	e11f      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c6da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6de:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c6e2:	430b      	orrs	r3, r1
 800c6e4:	d13c      	bne.n	800c760 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c6e6:	4b1a      	ldr	r3, [pc, #104]	; (800c750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c6e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c6ee:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d004      	beq.n	800c700 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800c6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6fc:	d012      	beq.n	800c724 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800c6fe:	e023      	b.n	800c748 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c700:	4b13      	ldr	r3, [pc, #76]	; (800c750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c708:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c70c:	d107      	bne.n	800c71e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c70e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c712:	4618      	mov	r0, r3
 800c714:	f000 fbcc 	bl	800ceb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c71a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c71c:	e0fd      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c71e:	2300      	movs	r3, #0
 800c720:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c722:	e0fa      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c724:	4b0a      	ldr	r3, [pc, #40]	; (800c750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c72c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c730:	d107      	bne.n	800c742 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c732:	f107 0318 	add.w	r3, r7, #24
 800c736:	4618      	mov	r0, r3
 800c738:	f000 f912 	bl	800c960 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c73c:	6a3b      	ldr	r3, [r7, #32]
 800c73e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c740:	e0eb      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c742:	2300      	movs	r3, #0
 800c744:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c746:	e0e8      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c748:	2300      	movs	r3, #0
 800c74a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c74c:	e0e5      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c74e:	bf00      	nop
 800c750:	58024400 	.word	0x58024400
 800c754:	03d09000 	.word	0x03d09000
 800c758:	003d0900 	.word	0x003d0900
 800c75c:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c760:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c764:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c768:	430b      	orrs	r3, r1
 800c76a:	f040 8085 	bne.w	800c878 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c76e:	4b6d      	ldr	r3, [pc, #436]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c772:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c776:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c77a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c77e:	d06b      	beq.n	800c858 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800c780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c782:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c786:	d874      	bhi.n	800c872 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c78a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c78e:	d056      	beq.n	800c83e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800c790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c796:	d86c      	bhi.n	800c872 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c79a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c79e:	d03b      	beq.n	800c818 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800c7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c7a6:	d864      	bhi.n	800c872 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7ae:	d021      	beq.n	800c7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800c7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7b6:	d85c      	bhi.n	800c872 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d004      	beq.n	800c7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800c7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c7c4:	d004      	beq.n	800c7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800c7c6:	e054      	b.n	800c872 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c7c8:	f000 f8b4 	bl	800c934 <HAL_RCCEx_GetD3PCLK1Freq>
 800c7cc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c7ce:	e0a4      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c7d0:	4b54      	ldr	r3, [pc, #336]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c7dc:	d107      	bne.n	800c7ee <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7de:	f107 0318 	add.w	r3, r7, #24
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f000 f8bc 	bl	800c960 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c7e8:	69fb      	ldr	r3, [r7, #28]
 800c7ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7ec:	e095      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7f2:	e092      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c7f4:	4b4b      	ldr	r3, [pc, #300]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c7fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c800:	d107      	bne.n	800c812 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c802:	f107 030c 	add.w	r3, r7, #12
 800c806:	4618      	mov	r0, r3
 800c808:	f000 f9fe 	bl	800cc08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c80c:	693b      	ldr	r3, [r7, #16]
 800c80e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c810:	e083      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c812:	2300      	movs	r3, #0
 800c814:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c816:	e080      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c818:	4b42      	ldr	r3, [pc, #264]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	f003 0304 	and.w	r3, r3, #4
 800c820:	2b04      	cmp	r3, #4
 800c822:	d109      	bne.n	800c838 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c824:	4b3f      	ldr	r3, [pc, #252]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	08db      	lsrs	r3, r3, #3
 800c82a:	f003 0303 	and.w	r3, r3, #3
 800c82e:	4a3e      	ldr	r2, [pc, #248]	; (800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c830:	fa22 f303 	lsr.w	r3, r2, r3
 800c834:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c836:	e070      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c838:	2300      	movs	r3, #0
 800c83a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c83c:	e06d      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c83e:	4b39      	ldr	r3, [pc, #228]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c84a:	d102      	bne.n	800c852 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800c84c:	4b37      	ldr	r3, [pc, #220]	; (800c92c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c84e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c850:	e063      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c852:	2300      	movs	r3, #0
 800c854:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c856:	e060      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c858:	4b32      	ldr	r3, [pc, #200]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c860:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c864:	d102      	bne.n	800c86c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800c866:	4b32      	ldr	r3, [pc, #200]	; (800c930 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c868:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c86a:	e056      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c86c:	2300      	movs	r3, #0
 800c86e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c870:	e053      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c872:	2300      	movs	r3, #0
 800c874:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c876:	e050      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c878:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c87c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c880:	430b      	orrs	r3, r1
 800c882:	d148      	bne.n	800c916 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c884:	4b27      	ldr	r3, [pc, #156]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c888:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c88c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c88e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c890:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c894:	d02a      	beq.n	800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c898:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c89c:	d838      	bhi.n	800c910 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d004      	beq.n	800c8ae <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c8aa:	d00d      	beq.n	800c8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800c8ac:	e030      	b.n	800c910 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c8ae:	4b1d      	ldr	r3, [pc, #116]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c8ba:	d102      	bne.n	800c8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800c8bc:	4b1c      	ldr	r3, [pc, #112]	; (800c930 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c8be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8c0:	e02b      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8c6:	e028      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c8c8:	4b16      	ldr	r3, [pc, #88]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c8d4:	d107      	bne.n	800c8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c8d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f000 fae8 	bl	800ceb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8e4:	e019      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8ea:	e016      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c8ec:	4b0d      	ldr	r3, [pc, #52]	; (800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c8f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c8f8:	d107      	bne.n	800c90a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c8fa:	f107 0318 	add.w	r3, r7, #24
 800c8fe:	4618      	mov	r0, r3
 800c900:	f000 f82e 	bl	800c960 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c904:	69fb      	ldr	r3, [r7, #28]
 800c906:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c908:	e007      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c90a:	2300      	movs	r3, #0
 800c90c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c90e:	e004      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c910:	2300      	movs	r3, #0
 800c912:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c914:	e001      	b.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800c916:	2300      	movs	r3, #0
 800c918:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c91a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3740      	adds	r7, #64	; 0x40
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}
 800c924:	58024400 	.word	0x58024400
 800c928:	03d09000 	.word	0x03d09000
 800c92c:	003d0900 	.word	0x003d0900
 800c930:	02faf080 	.word	0x02faf080

0800c934 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c938:	f7fe f92e 	bl	800ab98 <HAL_RCC_GetHCLKFreq>
 800c93c:	4602      	mov	r2, r0
 800c93e:	4b06      	ldr	r3, [pc, #24]	; (800c958 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c940:	6a1b      	ldr	r3, [r3, #32]
 800c942:	091b      	lsrs	r3, r3, #4
 800c944:	f003 0307 	and.w	r3, r3, #7
 800c948:	4904      	ldr	r1, [pc, #16]	; (800c95c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c94a:	5ccb      	ldrb	r3, [r1, r3]
 800c94c:	f003 031f 	and.w	r3, r3, #31
 800c950:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c954:	4618      	mov	r0, r3
 800c956:	bd80      	pop	{r7, pc}
 800c958:	58024400 	.word	0x58024400
 800c95c:	0801c400 	.word	0x0801c400

0800c960 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c960:	b480      	push	{r7}
 800c962:	b089      	sub	sp, #36	; 0x24
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c968:	4ba1      	ldr	r3, [pc, #644]	; (800cbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c96a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c96c:	f003 0303 	and.w	r3, r3, #3
 800c970:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c972:	4b9f      	ldr	r3, [pc, #636]	; (800cbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c976:	0b1b      	lsrs	r3, r3, #12
 800c978:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c97c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c97e:	4b9c      	ldr	r3, [pc, #624]	; (800cbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c982:	091b      	lsrs	r3, r3, #4
 800c984:	f003 0301 	and.w	r3, r3, #1
 800c988:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c98a:	4b99      	ldr	r3, [pc, #612]	; (800cbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c98c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c98e:	08db      	lsrs	r3, r3, #3
 800c990:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c994:	693a      	ldr	r2, [r7, #16]
 800c996:	fb02 f303 	mul.w	r3, r2, r3
 800c99a:	ee07 3a90 	vmov	s15, r3
 800c99e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	f000 8111 	beq.w	800cbd0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c9ae:	69bb      	ldr	r3, [r7, #24]
 800c9b0:	2b02      	cmp	r3, #2
 800c9b2:	f000 8083 	beq.w	800cabc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c9b6:	69bb      	ldr	r3, [r7, #24]
 800c9b8:	2b02      	cmp	r3, #2
 800c9ba:	f200 80a1 	bhi.w	800cb00 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c9be:	69bb      	ldr	r3, [r7, #24]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d003      	beq.n	800c9cc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c9c4:	69bb      	ldr	r3, [r7, #24]
 800c9c6:	2b01      	cmp	r3, #1
 800c9c8:	d056      	beq.n	800ca78 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c9ca:	e099      	b.n	800cb00 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c9cc:	4b88      	ldr	r3, [pc, #544]	; (800cbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	f003 0320 	and.w	r3, r3, #32
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d02d      	beq.n	800ca34 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9d8:	4b85      	ldr	r3, [pc, #532]	; (800cbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	08db      	lsrs	r3, r3, #3
 800c9de:	f003 0303 	and.w	r3, r3, #3
 800c9e2:	4a84      	ldr	r2, [pc, #528]	; (800cbf4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c9e4:	fa22 f303 	lsr.w	r3, r2, r3
 800c9e8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	ee07 3a90 	vmov	s15, r3
 800c9f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	ee07 3a90 	vmov	s15, r3
 800c9fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca02:	4b7b      	ldr	r3, [pc, #492]	; (800cbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca0a:	ee07 3a90 	vmov	s15, r3
 800ca0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca12:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca16:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cbf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca2e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ca32:	e087      	b.n	800cb44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	ee07 3a90 	vmov	s15, r3
 800ca3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca3e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cbfc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ca42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca46:	4b6a      	ldr	r3, [pc, #424]	; (800cbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca4e:	ee07 3a90 	vmov	s15, r3
 800ca52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca56:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca5a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cbf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca76:	e065      	b.n	800cb44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	ee07 3a90 	vmov	s15, r3
 800ca7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca82:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cc00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ca86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca8a:	4b59      	ldr	r3, [pc, #356]	; (800cbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca92:	ee07 3a90 	vmov	s15, r3
 800ca96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca9a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca9e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cbf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800caa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800caa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800caaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800caae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cab6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800caba:	e043      	b.n	800cb44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cabc:	697b      	ldr	r3, [r7, #20]
 800cabe:	ee07 3a90 	vmov	s15, r3
 800cac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cac6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cc04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800caca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cace:	4b48      	ldr	r3, [pc, #288]	; (800cbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cad6:	ee07 3a90 	vmov	s15, r3
 800cada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cade:	ed97 6a03 	vldr	s12, [r7, #12]
 800cae2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cbf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800caea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800caee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800caf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800caf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cafa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cafe:	e021      	b.n	800cb44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cb00:	697b      	ldr	r3, [r7, #20]
 800cb02:	ee07 3a90 	vmov	s15, r3
 800cb06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb0a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cc00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cb0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb12:	4b37      	ldr	r3, [pc, #220]	; (800cbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb1a:	ee07 3a90 	vmov	s15, r3
 800cb1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb22:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb26:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cbf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb42:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cb44:	4b2a      	ldr	r3, [pc, #168]	; (800cbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb48:	0a5b      	lsrs	r3, r3, #9
 800cb4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb4e:	ee07 3a90 	vmov	s15, r3
 800cb52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb5e:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb6a:	ee17 2a90 	vmov	r2, s15
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800cb72:	4b1f      	ldr	r3, [pc, #124]	; (800cbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb76:	0c1b      	lsrs	r3, r3, #16
 800cb78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb7c:	ee07 3a90 	vmov	s15, r3
 800cb80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb88:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb8c:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb98:	ee17 2a90 	vmov	r2, s15
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cba0:	4b13      	ldr	r3, [pc, #76]	; (800cbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cba4:	0e1b      	lsrs	r3, r3, #24
 800cba6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbaa:	ee07 3a90 	vmov	s15, r3
 800cbae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cbb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cbba:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbc6:	ee17 2a90 	vmov	r2, s15
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cbce:	e008      	b.n	800cbe2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2200      	movs	r2, #0
 800cbda:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2200      	movs	r2, #0
 800cbe0:	609a      	str	r2, [r3, #8]
}
 800cbe2:	bf00      	nop
 800cbe4:	3724      	adds	r7, #36	; 0x24
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbec:	4770      	bx	lr
 800cbee:	bf00      	nop
 800cbf0:	58024400 	.word	0x58024400
 800cbf4:	03d09000 	.word	0x03d09000
 800cbf8:	46000000 	.word	0x46000000
 800cbfc:	4c742400 	.word	0x4c742400
 800cc00:	4a742400 	.word	0x4a742400
 800cc04:	4c3ebc20 	.word	0x4c3ebc20

0800cc08 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cc08:	b480      	push	{r7}
 800cc0a:	b089      	sub	sp, #36	; 0x24
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cc10:	4ba1      	ldr	r3, [pc, #644]	; (800ce98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc14:	f003 0303 	and.w	r3, r3, #3
 800cc18:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cc1a:	4b9f      	ldr	r3, [pc, #636]	; (800ce98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc1e:	0d1b      	lsrs	r3, r3, #20
 800cc20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc24:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cc26:	4b9c      	ldr	r3, [pc, #624]	; (800ce98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc2a:	0a1b      	lsrs	r3, r3, #8
 800cc2c:	f003 0301 	and.w	r3, r3, #1
 800cc30:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cc32:	4b99      	ldr	r3, [pc, #612]	; (800ce98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc36:	08db      	lsrs	r3, r3, #3
 800cc38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cc3c:	693a      	ldr	r2, [r7, #16]
 800cc3e:	fb02 f303 	mul.w	r3, r2, r3
 800cc42:	ee07 3a90 	vmov	s15, r3
 800cc46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	f000 8111 	beq.w	800ce78 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cc56:	69bb      	ldr	r3, [r7, #24]
 800cc58:	2b02      	cmp	r3, #2
 800cc5a:	f000 8083 	beq.w	800cd64 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cc5e:	69bb      	ldr	r3, [r7, #24]
 800cc60:	2b02      	cmp	r3, #2
 800cc62:	f200 80a1 	bhi.w	800cda8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cc66:	69bb      	ldr	r3, [r7, #24]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d003      	beq.n	800cc74 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cc6c:	69bb      	ldr	r3, [r7, #24]
 800cc6e:	2b01      	cmp	r3, #1
 800cc70:	d056      	beq.n	800cd20 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cc72:	e099      	b.n	800cda8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cc74:	4b88      	ldr	r3, [pc, #544]	; (800ce98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	f003 0320 	and.w	r3, r3, #32
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d02d      	beq.n	800ccdc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc80:	4b85      	ldr	r3, [pc, #532]	; (800ce98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	08db      	lsrs	r3, r3, #3
 800cc86:	f003 0303 	and.w	r3, r3, #3
 800cc8a:	4a84      	ldr	r2, [pc, #528]	; (800ce9c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cc8c:	fa22 f303 	lsr.w	r3, r2, r3
 800cc90:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	ee07 3a90 	vmov	s15, r3
 800cc98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	ee07 3a90 	vmov	s15, r3
 800cca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccaa:	4b7b      	ldr	r3, [pc, #492]	; (800ce98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccb2:	ee07 3a90 	vmov	s15, r3
 800ccb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccba:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccbe:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cea0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ccc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccd6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ccda:	e087      	b.n	800cdec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ccdc:	697b      	ldr	r3, [r7, #20]
 800ccde:	ee07 3a90 	vmov	s15, r3
 800cce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cce6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cea4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ccea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccee:	4b6a      	ldr	r3, [pc, #424]	; (800ce98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccf6:	ee07 3a90 	vmov	s15, r3
 800ccfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccfe:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd02:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cea0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd1e:	e065      	b.n	800cdec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	ee07 3a90 	vmov	s15, r3
 800cd26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd2a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cea8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cd2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd32:	4b59      	ldr	r3, [pc, #356]	; (800ce98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd3a:	ee07 3a90 	vmov	s15, r3
 800cd3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd42:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd46:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cea0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd62:	e043      	b.n	800cdec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd64:	697b      	ldr	r3, [r7, #20]
 800cd66:	ee07 3a90 	vmov	s15, r3
 800cd6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd6e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ceac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cd72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd76:	4b48      	ldr	r3, [pc, #288]	; (800ce98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd7e:	ee07 3a90 	vmov	s15, r3
 800cd82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd86:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd8a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cea0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cda2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cda6:	e021      	b.n	800cdec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	ee07 3a90 	vmov	s15, r3
 800cdae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdb2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cea8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cdb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdba:	4b37      	ldr	r3, [pc, #220]	; (800ce98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cdbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdc2:	ee07 3a90 	vmov	s15, r3
 800cdc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdca:	ed97 6a03 	vldr	s12, [r7, #12]
 800cdce:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cea0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cdd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cdde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cde2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cde6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cdea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800cdec:	4b2a      	ldr	r3, [pc, #168]	; (800ce98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cdee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdf0:	0a5b      	lsrs	r3, r3, #9
 800cdf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdf6:	ee07 3a90 	vmov	s15, r3
 800cdfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce02:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce06:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce12:	ee17 2a90 	vmov	r2, s15
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ce1a:	4b1f      	ldr	r3, [pc, #124]	; (800ce98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce1e:	0c1b      	lsrs	r3, r3, #16
 800ce20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce24:	ee07 3a90 	vmov	s15, r3
 800ce28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce30:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce34:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce40:	ee17 2a90 	vmov	r2, s15
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ce48:	4b13      	ldr	r3, [pc, #76]	; (800ce98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce4c:	0e1b      	lsrs	r3, r3, #24
 800ce4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce52:	ee07 3a90 	vmov	s15, r3
 800ce56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce62:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce6e:	ee17 2a90 	vmov	r2, s15
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ce76:	e008      	b.n	800ce8a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2200      	movs	r2, #0
 800ce82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2200      	movs	r2, #0
 800ce88:	609a      	str	r2, [r3, #8]
}
 800ce8a:	bf00      	nop
 800ce8c:	3724      	adds	r7, #36	; 0x24
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce94:	4770      	bx	lr
 800ce96:	bf00      	nop
 800ce98:	58024400 	.word	0x58024400
 800ce9c:	03d09000 	.word	0x03d09000
 800cea0:	46000000 	.word	0x46000000
 800cea4:	4c742400 	.word	0x4c742400
 800cea8:	4a742400 	.word	0x4a742400
 800ceac:	4c3ebc20 	.word	0x4c3ebc20

0800ceb0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	b089      	sub	sp, #36	; 0x24
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ceb8:	4ba0      	ldr	r3, [pc, #640]	; (800d13c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ceba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cebc:	f003 0303 	and.w	r3, r3, #3
 800cec0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800cec2:	4b9e      	ldr	r3, [pc, #632]	; (800d13c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cec6:	091b      	lsrs	r3, r3, #4
 800cec8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cecc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cece:	4b9b      	ldr	r3, [pc, #620]	; (800d13c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ced0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ced2:	f003 0301 	and.w	r3, r3, #1
 800ced6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ced8:	4b98      	ldr	r3, [pc, #608]	; (800d13c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ceda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cedc:	08db      	lsrs	r3, r3, #3
 800cede:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cee2:	693a      	ldr	r2, [r7, #16]
 800cee4:	fb02 f303 	mul.w	r3, r2, r3
 800cee8:	ee07 3a90 	vmov	s15, r3
 800ceec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cef0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	f000 8111 	beq.w	800d11e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800cefc:	69bb      	ldr	r3, [r7, #24]
 800cefe:	2b02      	cmp	r3, #2
 800cf00:	f000 8083 	beq.w	800d00a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800cf04:	69bb      	ldr	r3, [r7, #24]
 800cf06:	2b02      	cmp	r3, #2
 800cf08:	f200 80a1 	bhi.w	800d04e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800cf0c:	69bb      	ldr	r3, [r7, #24]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d003      	beq.n	800cf1a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800cf12:	69bb      	ldr	r3, [r7, #24]
 800cf14:	2b01      	cmp	r3, #1
 800cf16:	d056      	beq.n	800cfc6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800cf18:	e099      	b.n	800d04e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf1a:	4b88      	ldr	r3, [pc, #544]	; (800d13c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f003 0320 	and.w	r3, r3, #32
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d02d      	beq.n	800cf82 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf26:	4b85      	ldr	r3, [pc, #532]	; (800d13c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	08db      	lsrs	r3, r3, #3
 800cf2c:	f003 0303 	and.w	r3, r3, #3
 800cf30:	4a83      	ldr	r2, [pc, #524]	; (800d140 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800cf32:	fa22 f303 	lsr.w	r3, r2, r3
 800cf36:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	ee07 3a90 	vmov	s15, r3
 800cf3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf42:	697b      	ldr	r3, [r7, #20]
 800cf44:	ee07 3a90 	vmov	s15, r3
 800cf48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf50:	4b7a      	ldr	r3, [pc, #488]	; (800d13c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf58:	ee07 3a90 	vmov	s15, r3
 800cf5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf60:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf64:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d144 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cf68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf78:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf7c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cf80:	e087      	b.n	800d092 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf82:	697b      	ldr	r3, [r7, #20]
 800cf84:	ee07 3a90 	vmov	s15, r3
 800cf88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf8c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d148 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cf90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf94:	4b69      	ldr	r3, [pc, #420]	; (800d13c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf9c:	ee07 3a90 	vmov	s15, r3
 800cfa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfa4:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfa8:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d144 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cfac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfc0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cfc4:	e065      	b.n	800d092 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cfc6:	697b      	ldr	r3, [r7, #20]
 800cfc8:	ee07 3a90 	vmov	s15, r3
 800cfcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfd0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d14c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800cfd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfd8:	4b58      	ldr	r3, [pc, #352]	; (800d13c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cfda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfe0:	ee07 3a90 	vmov	s15, r3
 800cfe4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfe8:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfec:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d144 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cff0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cff4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cff8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cffc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d000:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d004:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d008:	e043      	b.n	800d092 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d00a:	697b      	ldr	r3, [r7, #20]
 800d00c:	ee07 3a90 	vmov	s15, r3
 800d010:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d014:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d150 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d018:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d01c:	4b47      	ldr	r3, [pc, #284]	; (800d13c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d01e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d024:	ee07 3a90 	vmov	s15, r3
 800d028:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d02c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d030:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d144 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d034:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d038:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d03c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d040:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d044:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d048:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d04c:	e021      	b.n	800d092 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	ee07 3a90 	vmov	s15, r3
 800d054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d058:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d148 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d05c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d060:	4b36      	ldr	r3, [pc, #216]	; (800d13c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d068:	ee07 3a90 	vmov	s15, r3
 800d06c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d070:	ed97 6a03 	vldr	s12, [r7, #12]
 800d074:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d144 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d078:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d07c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d080:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d084:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d08c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d090:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d092:	4b2a      	ldr	r3, [pc, #168]	; (800d13c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d096:	0a5b      	lsrs	r3, r3, #9
 800d098:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d09c:	ee07 3a90 	vmov	s15, r3
 800d0a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d0ac:	edd7 6a07 	vldr	s13, [r7, #28]
 800d0b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0b8:	ee17 2a90 	vmov	r2, s15
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d0c0:	4b1e      	ldr	r3, [pc, #120]	; (800d13c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d0c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0c4:	0c1b      	lsrs	r3, r3, #16
 800d0c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0ca:	ee07 3a90 	vmov	s15, r3
 800d0ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d0da:	edd7 6a07 	vldr	s13, [r7, #28]
 800d0de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0e6:	ee17 2a90 	vmov	r2, s15
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d0ee:	4b13      	ldr	r3, [pc, #76]	; (800d13c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d0f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0f2:	0e1b      	lsrs	r3, r3, #24
 800d0f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0f8:	ee07 3a90 	vmov	s15, r3
 800d0fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d100:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d104:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d108:	edd7 6a07 	vldr	s13, [r7, #28]
 800d10c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d110:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d114:	ee17 2a90 	vmov	r2, s15
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d11c:	e008      	b.n	800d130 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2200      	movs	r2, #0
 800d122:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2200      	movs	r2, #0
 800d128:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2200      	movs	r2, #0
 800d12e:	609a      	str	r2, [r3, #8]
}
 800d130:	bf00      	nop
 800d132:	3724      	adds	r7, #36	; 0x24
 800d134:	46bd      	mov	sp, r7
 800d136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13a:	4770      	bx	lr
 800d13c:	58024400 	.word	0x58024400
 800d140:	03d09000 	.word	0x03d09000
 800d144:	46000000 	.word	0x46000000
 800d148:	4c742400 	.word	0x4c742400
 800d14c:	4a742400 	.word	0x4a742400
 800d150:	4c3ebc20 	.word	0x4c3ebc20

0800d154 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b084      	sub	sp, #16
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
 800d15c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d15e:	2300      	movs	r3, #0
 800d160:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d162:	4b53      	ldr	r3, [pc, #332]	; (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d166:	f003 0303 	and.w	r3, r3, #3
 800d16a:	2b03      	cmp	r3, #3
 800d16c:	d101      	bne.n	800d172 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d16e:	2301      	movs	r3, #1
 800d170:	e099      	b.n	800d2a6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d172:	4b4f      	ldr	r3, [pc, #316]	; (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	4a4e      	ldr	r2, [pc, #312]	; (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d178:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d17c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d17e:	f7f6 fe95 	bl	8003eac <HAL_GetTick>
 800d182:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d184:	e008      	b.n	800d198 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d186:	f7f6 fe91 	bl	8003eac <HAL_GetTick>
 800d18a:	4602      	mov	r2, r0
 800d18c:	68bb      	ldr	r3, [r7, #8]
 800d18e:	1ad3      	subs	r3, r2, r3
 800d190:	2b02      	cmp	r3, #2
 800d192:	d901      	bls.n	800d198 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d194:	2303      	movs	r3, #3
 800d196:	e086      	b.n	800d2a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d198:	4b45      	ldr	r3, [pc, #276]	; (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d1f0      	bne.n	800d186 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d1a4:	4b42      	ldr	r3, [pc, #264]	; (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d1a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1a8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	031b      	lsls	r3, r3, #12
 800d1b2:	493f      	ldr	r1, [pc, #252]	; (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d1b4:	4313      	orrs	r3, r2
 800d1b6:	628b      	str	r3, [r1, #40]	; 0x28
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	685b      	ldr	r3, [r3, #4]
 800d1bc:	3b01      	subs	r3, #1
 800d1be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	689b      	ldr	r3, [r3, #8]
 800d1c6:	3b01      	subs	r3, #1
 800d1c8:	025b      	lsls	r3, r3, #9
 800d1ca:	b29b      	uxth	r3, r3
 800d1cc:	431a      	orrs	r2, r3
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	68db      	ldr	r3, [r3, #12]
 800d1d2:	3b01      	subs	r3, #1
 800d1d4:	041b      	lsls	r3, r3, #16
 800d1d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d1da:	431a      	orrs	r2, r3
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	691b      	ldr	r3, [r3, #16]
 800d1e0:	3b01      	subs	r3, #1
 800d1e2:	061b      	lsls	r3, r3, #24
 800d1e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d1e8:	4931      	ldr	r1, [pc, #196]	; (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d1ea:	4313      	orrs	r3, r2
 800d1ec:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d1ee:	4b30      	ldr	r3, [pc, #192]	; (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d1f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	695b      	ldr	r3, [r3, #20]
 800d1fa:	492d      	ldr	r1, [pc, #180]	; (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d1fc:	4313      	orrs	r3, r2
 800d1fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d200:	4b2b      	ldr	r3, [pc, #172]	; (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d204:	f023 0220 	bic.w	r2, r3, #32
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	699b      	ldr	r3, [r3, #24]
 800d20c:	4928      	ldr	r1, [pc, #160]	; (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d20e:	4313      	orrs	r3, r2
 800d210:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d212:	4b27      	ldr	r3, [pc, #156]	; (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d216:	4a26      	ldr	r2, [pc, #152]	; (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d218:	f023 0310 	bic.w	r3, r3, #16
 800d21c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d21e:	4b24      	ldr	r3, [pc, #144]	; (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d220:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d222:	4b24      	ldr	r3, [pc, #144]	; (800d2b4 <RCCEx_PLL2_Config+0x160>)
 800d224:	4013      	ands	r3, r2
 800d226:	687a      	ldr	r2, [r7, #4]
 800d228:	69d2      	ldr	r2, [r2, #28]
 800d22a:	00d2      	lsls	r2, r2, #3
 800d22c:	4920      	ldr	r1, [pc, #128]	; (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d22e:	4313      	orrs	r3, r2
 800d230:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d232:	4b1f      	ldr	r3, [pc, #124]	; (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d236:	4a1e      	ldr	r2, [pc, #120]	; (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d238:	f043 0310 	orr.w	r3, r3, #16
 800d23c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d106      	bne.n	800d252 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d244:	4b1a      	ldr	r3, [pc, #104]	; (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d248:	4a19      	ldr	r2, [pc, #100]	; (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d24a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d24e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d250:	e00f      	b.n	800d272 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	2b01      	cmp	r3, #1
 800d256:	d106      	bne.n	800d266 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d258:	4b15      	ldr	r3, [pc, #84]	; (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d25a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d25c:	4a14      	ldr	r2, [pc, #80]	; (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d25e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d262:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d264:	e005      	b.n	800d272 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d266:	4b12      	ldr	r3, [pc, #72]	; (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d26a:	4a11      	ldr	r2, [pc, #68]	; (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d26c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d270:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d272:	4b0f      	ldr	r3, [pc, #60]	; (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	4a0e      	ldr	r2, [pc, #56]	; (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d278:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d27c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d27e:	f7f6 fe15 	bl	8003eac <HAL_GetTick>
 800d282:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d284:	e008      	b.n	800d298 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d286:	f7f6 fe11 	bl	8003eac <HAL_GetTick>
 800d28a:	4602      	mov	r2, r0
 800d28c:	68bb      	ldr	r3, [r7, #8]
 800d28e:	1ad3      	subs	r3, r2, r3
 800d290:	2b02      	cmp	r3, #2
 800d292:	d901      	bls.n	800d298 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d294:	2303      	movs	r3, #3
 800d296:	e006      	b.n	800d2a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d298:	4b05      	ldr	r3, [pc, #20]	; (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d0f0      	beq.n	800d286 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d2a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3710      	adds	r7, #16
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}
 800d2ae:	bf00      	nop
 800d2b0:	58024400 	.word	0x58024400
 800d2b4:	ffff0007 	.word	0xffff0007

0800d2b8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b084      	sub	sp, #16
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
 800d2c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d2c6:	4b53      	ldr	r3, [pc, #332]	; (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d2c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2ca:	f003 0303 	and.w	r3, r3, #3
 800d2ce:	2b03      	cmp	r3, #3
 800d2d0:	d101      	bne.n	800d2d6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d2d2:	2301      	movs	r3, #1
 800d2d4:	e099      	b.n	800d40a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d2d6:	4b4f      	ldr	r3, [pc, #316]	; (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	4a4e      	ldr	r2, [pc, #312]	; (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d2dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d2e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d2e2:	f7f6 fde3 	bl	8003eac <HAL_GetTick>
 800d2e6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d2e8:	e008      	b.n	800d2fc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d2ea:	f7f6 fddf 	bl	8003eac <HAL_GetTick>
 800d2ee:	4602      	mov	r2, r0
 800d2f0:	68bb      	ldr	r3, [r7, #8]
 800d2f2:	1ad3      	subs	r3, r2, r3
 800d2f4:	2b02      	cmp	r3, #2
 800d2f6:	d901      	bls.n	800d2fc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d2f8:	2303      	movs	r3, #3
 800d2fa:	e086      	b.n	800d40a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d2fc:	4b45      	ldr	r3, [pc, #276]	; (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d304:	2b00      	cmp	r3, #0
 800d306:	d1f0      	bne.n	800d2ea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d308:	4b42      	ldr	r3, [pc, #264]	; (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d30a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d30c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	051b      	lsls	r3, r3, #20
 800d316:	493f      	ldr	r1, [pc, #252]	; (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d318:	4313      	orrs	r3, r2
 800d31a:	628b      	str	r3, [r1, #40]	; 0x28
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	685b      	ldr	r3, [r3, #4]
 800d320:	3b01      	subs	r3, #1
 800d322:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	689b      	ldr	r3, [r3, #8]
 800d32a:	3b01      	subs	r3, #1
 800d32c:	025b      	lsls	r3, r3, #9
 800d32e:	b29b      	uxth	r3, r3
 800d330:	431a      	orrs	r2, r3
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	68db      	ldr	r3, [r3, #12]
 800d336:	3b01      	subs	r3, #1
 800d338:	041b      	lsls	r3, r3, #16
 800d33a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d33e:	431a      	orrs	r2, r3
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	691b      	ldr	r3, [r3, #16]
 800d344:	3b01      	subs	r3, #1
 800d346:	061b      	lsls	r3, r3, #24
 800d348:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d34c:	4931      	ldr	r1, [pc, #196]	; (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d34e:	4313      	orrs	r3, r2
 800d350:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d352:	4b30      	ldr	r3, [pc, #192]	; (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d356:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	695b      	ldr	r3, [r3, #20]
 800d35e:	492d      	ldr	r1, [pc, #180]	; (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d360:	4313      	orrs	r3, r2
 800d362:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d364:	4b2b      	ldr	r3, [pc, #172]	; (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d368:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	699b      	ldr	r3, [r3, #24]
 800d370:	4928      	ldr	r1, [pc, #160]	; (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d372:	4313      	orrs	r3, r2
 800d374:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d376:	4b27      	ldr	r3, [pc, #156]	; (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d37a:	4a26      	ldr	r2, [pc, #152]	; (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d37c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d380:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d382:	4b24      	ldr	r3, [pc, #144]	; (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d384:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d386:	4b24      	ldr	r3, [pc, #144]	; (800d418 <RCCEx_PLL3_Config+0x160>)
 800d388:	4013      	ands	r3, r2
 800d38a:	687a      	ldr	r2, [r7, #4]
 800d38c:	69d2      	ldr	r2, [r2, #28]
 800d38e:	00d2      	lsls	r2, r2, #3
 800d390:	4920      	ldr	r1, [pc, #128]	; (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d392:	4313      	orrs	r3, r2
 800d394:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d396:	4b1f      	ldr	r3, [pc, #124]	; (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d39a:	4a1e      	ldr	r2, [pc, #120]	; (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d39c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d3a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d106      	bne.n	800d3b6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d3a8:	4b1a      	ldr	r3, [pc, #104]	; (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d3aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3ac:	4a19      	ldr	r2, [pc, #100]	; (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d3ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d3b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d3b4:	e00f      	b.n	800d3d6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	2b01      	cmp	r3, #1
 800d3ba:	d106      	bne.n	800d3ca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d3bc:	4b15      	ldr	r3, [pc, #84]	; (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3c0:	4a14      	ldr	r2, [pc, #80]	; (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d3c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d3c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d3c8:	e005      	b.n	800d3d6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d3ca:	4b12      	ldr	r3, [pc, #72]	; (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d3cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3ce:	4a11      	ldr	r2, [pc, #68]	; (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d3d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d3d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d3d6:	4b0f      	ldr	r3, [pc, #60]	; (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	4a0e      	ldr	r2, [pc, #56]	; (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d3dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d3e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d3e2:	f7f6 fd63 	bl	8003eac <HAL_GetTick>
 800d3e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d3e8:	e008      	b.n	800d3fc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d3ea:	f7f6 fd5f 	bl	8003eac <HAL_GetTick>
 800d3ee:	4602      	mov	r2, r0
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	1ad3      	subs	r3, r2, r3
 800d3f4:	2b02      	cmp	r3, #2
 800d3f6:	d901      	bls.n	800d3fc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d3f8:	2303      	movs	r3, #3
 800d3fa:	e006      	b.n	800d40a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d3fc:	4b05      	ldr	r3, [pc, #20]	; (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d404:	2b00      	cmp	r3, #0
 800d406:	d0f0      	beq.n	800d3ea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d408:	7bfb      	ldrb	r3, [r7, #15]
}
 800d40a:	4618      	mov	r0, r3
 800d40c:	3710      	adds	r7, #16
 800d40e:	46bd      	mov	sp, r7
 800d410:	bd80      	pop	{r7, pc}
 800d412:	bf00      	nop
 800d414:	58024400 	.word	0x58024400
 800d418:	ffff0007 	.word	0xffff0007

0800d41c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b08a      	sub	sp, #40	; 0x28
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d101      	bne.n	800d42e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d42a:	2301      	movs	r3, #1
 800d42c:	e075      	b.n	800d51a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d434:	b2db      	uxtb	r3, r3
 800d436:	2b00      	cmp	r3, #0
 800d438:	d105      	bne.n	800d446 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	2200      	movs	r2, #0
 800d43e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d440:	6878      	ldr	r0, [r7, #4]
 800d442:	f7f5 fe0f 	bl	8003064 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	2204      	movs	r2, #4
 800d44a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d44e:	6878      	ldr	r0, [r7, #4]
 800d450:	f000 f868 	bl	800d524 <HAL_SD_InitCard>
 800d454:	4603      	mov	r3, r0
 800d456:	2b00      	cmp	r3, #0
 800d458:	d001      	beq.n	800d45e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d45a:	2301      	movs	r3, #1
 800d45c:	e05d      	b.n	800d51a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800d45e:	f107 0308 	add.w	r3, r7, #8
 800d462:	4619      	mov	r1, r3
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f000 fdaf 	bl	800dfc8 <HAL_SD_GetCardStatus>
 800d46a:	4603      	mov	r3, r0
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d001      	beq.n	800d474 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800d470:	2301      	movs	r3, #1
 800d472:	e052      	b.n	800d51a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800d474:	7e3b      	ldrb	r3, [r7, #24]
 800d476:	b2db      	uxtb	r3, r3
 800d478:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800d47a:	7e7b      	ldrb	r3, [r7, #25]
 800d47c:	b2db      	uxtb	r3, r3
 800d47e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d484:	2b01      	cmp	r3, #1
 800d486:	d10a      	bne.n	800d49e <HAL_SD_Init+0x82>
 800d488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d102      	bne.n	800d494 <HAL_SD_Init+0x78>
 800d48e:	6a3b      	ldr	r3, [r7, #32]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d004      	beq.n	800d49e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d49a:	659a      	str	r2, [r3, #88]	; 0x58
 800d49c:	e00b      	b.n	800d4b6 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4a2:	2b01      	cmp	r3, #1
 800d4a4:	d104      	bne.n	800d4b0 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d4ac:	659a      	str	r2, [r3, #88]	; 0x58
 800d4ae:	e002      	b.n	800d4b6 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	68db      	ldr	r3, [r3, #12]
 800d4ba:	4619      	mov	r1, r3
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f000 fe6d 	bl	800e19c <HAL_SD_ConfigWideBusOperation>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d001      	beq.n	800d4cc <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800d4c8:	2301      	movs	r3, #1
 800d4ca:	e026      	b.n	800d51a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800d4cc:	f7f6 fcee 	bl	8003eac <HAL_GetTick>
 800d4d0:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d4d2:	e011      	b.n	800d4f8 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d4d4:	f7f6 fcea 	bl	8003eac <HAL_GetTick>
 800d4d8:	4602      	mov	r2, r0
 800d4da:	69fb      	ldr	r3, [r7, #28]
 800d4dc:	1ad3      	subs	r3, r2, r3
 800d4de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4e2:	d109      	bne.n	800d4f8 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d4ea:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2201      	movs	r2, #1
 800d4f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800d4f4:	2303      	movs	r3, #3
 800d4f6:	e010      	b.n	800d51a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	f000 ff61 	bl	800e3c0 <HAL_SD_GetCardState>
 800d4fe:	4603      	mov	r3, r0
 800d500:	2b04      	cmp	r3, #4
 800d502:	d1e7      	bne.n	800d4d4 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2200      	movs	r2, #0
 800d508:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2200      	movs	r2, #0
 800d50e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2201      	movs	r2, #1
 800d514:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800d518:	2300      	movs	r3, #0
}
 800d51a:	4618      	mov	r0, r3
 800d51c:	3728      	adds	r7, #40	; 0x28
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}
	...

0800d524 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d524:	b590      	push	{r4, r7, lr}
 800d526:	b08d      	sub	sp, #52	; 0x34
 800d528:	af02      	add	r7, sp, #8
 800d52a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d52c:	2300      	movs	r3, #0
 800d52e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d530:	2300      	movs	r3, #0
 800d532:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d534:	2300      	movs	r3, #0
 800d536:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d538:	2300      	movs	r3, #0
 800d53a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d53c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d540:	f04f 0100 	mov.w	r1, #0
 800d544:	f7fe fd24 	bl	800bf90 <HAL_RCCEx_GetPeriphCLKFreq>
 800d548:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800d54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d109      	bne.n	800d564 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2201      	movs	r2, #1
 800d554:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d55e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d560:	2301      	movs	r3, #1
 800d562:	e070      	b.n	800d646 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800d564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d566:	0a1b      	lsrs	r3, r3, #8
 800d568:	4a39      	ldr	r2, [pc, #228]	; (800d650 <HAL_SD_InitCard+0x12c>)
 800d56a:	fba2 2303 	umull	r2, r3, r2, r3
 800d56e:	091b      	lsrs	r3, r3, #4
 800d570:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681c      	ldr	r4, [r3, #0]
 800d576:	466a      	mov	r2, sp
 800d578:	f107 0318 	add.w	r3, r7, #24
 800d57c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d580:	e882 0003 	stmia.w	r2, {r0, r1}
 800d584:	f107 030c 	add.w	r3, r7, #12
 800d588:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d58a:	4620      	mov	r0, r4
 800d58c:	f004 fe6c 	bl	8012268 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	4618      	mov	r0, r3
 800d596:	f004 feaf 	bl	80122f8 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800d59a:	69fb      	ldr	r3, [r7, #28]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d005      	beq.n	800d5ac <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800d5a0:	69fb      	ldr	r3, [r7, #28]
 800d5a2:	005b      	lsls	r3, r3, #1
 800d5a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5aa:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800d5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d007      	beq.n	800d5c2 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800d5b2:	4a28      	ldr	r2, [pc, #160]	; (800d654 <HAL_SD_InitCard+0x130>)
 800d5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5ba:	3301      	adds	r3, #1
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f7f6 fc81 	bl	8003ec4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d5c2:	6878      	ldr	r0, [r7, #4]
 800d5c4:	f000 ffea 	bl	800e59c <SD_PowerON>
 800d5c8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d5ca:	6a3b      	ldr	r3, [r7, #32]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d00b      	beq.n	800d5e8 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2201      	movs	r2, #1
 800d5d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d5dc:	6a3b      	ldr	r3, [r7, #32]
 800d5de:	431a      	orrs	r2, r3
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d5e4:	2301      	movs	r3, #1
 800d5e6:	e02e      	b.n	800d646 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f000 ff09 	bl	800e400 <SD_InitCard>
 800d5ee:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d5f0:	6a3b      	ldr	r3, [r7, #32]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d00b      	beq.n	800d60e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2201      	movs	r2, #1
 800d5fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d602:	6a3b      	ldr	r3, [r7, #32]
 800d604:	431a      	orrs	r2, r3
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d60a:	2301      	movs	r3, #1
 800d60c:	e01b      	b.n	800d646 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d616:	4618      	mov	r0, r3
 800d618:	f004 ff04 	bl	8012424 <SDMMC_CmdBlockLength>
 800d61c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d61e:	6a3b      	ldr	r3, [r7, #32]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d00f      	beq.n	800d644 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	4a0b      	ldr	r2, [pc, #44]	; (800d658 <HAL_SD_InitCard+0x134>)
 800d62a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d630:	6a3b      	ldr	r3, [r7, #32]
 800d632:	431a      	orrs	r2, r3
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2201      	movs	r2, #1
 800d63c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d640:	2301      	movs	r3, #1
 800d642:	e000      	b.n	800d646 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800d644:	2300      	movs	r3, #0
}
 800d646:	4618      	mov	r0, r3
 800d648:	372c      	adds	r7, #44	; 0x2c
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd90      	pop	{r4, r7, pc}
 800d64e:	bf00      	nop
 800d650:	014f8b59 	.word	0x014f8b59
 800d654:	00012110 	.word	0x00012110
 800d658:	1fe00fff 	.word	0x1fe00fff

0800d65c <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b08c      	sub	sp, #48	; 0x30
 800d660:	af00      	add	r7, sp, #0
 800d662:	60f8      	str	r0, [r7, #12]
 800d664:	60b9      	str	r1, [r7, #8]
 800d666:	607a      	str	r2, [r7, #4]
 800d668:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d107      	bne.n	800d684 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d678:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d680:	2301      	movs	r3, #1
 800d682:	e08d      	b.n	800d7a0 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d68a:	b2db      	uxtb	r3, r3
 800d68c:	2b01      	cmp	r3, #1
 800d68e:	f040 8086 	bne.w	800d79e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	2200      	movs	r2, #0
 800d696:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d698:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	441a      	add	r2, r3
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6a2:	429a      	cmp	r2, r3
 800d6a4:	d907      	bls.n	800d6b6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6aa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d6b2:	2301      	movs	r3, #1
 800d6b4:	e074      	b.n	800d7a0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	2203      	movs	r2, #3
 800d6ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	68ba      	ldr	r2, [r7, #8]
 800d6ca:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d6cc:	683b      	ldr	r3, [r7, #0]
 800d6ce:	025a      	lsls	r2, r3, #9
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6d8:	2b01      	cmp	r3, #1
 800d6da:	d002      	beq.n	800d6e2 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800d6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6de:	025b      	lsls	r3, r3, #9
 800d6e0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d6e2:	f04f 33ff 	mov.w	r3, #4294967295
 800d6e6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	025b      	lsls	r3, r3, #9
 800d6ec:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d6ee:	2390      	movs	r3, #144	; 0x90
 800d6f0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d6f2:	2302      	movs	r3, #2
 800d6f4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	f107 0210 	add.w	r2, r7, #16
 800d706:	4611      	mov	r1, r2
 800d708:	4618      	mov	r0, r3
 800d70a:	f004 fe5f 	bl	80123cc <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	68da      	ldr	r2, [r3, #12]
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d71c:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	68ba      	ldr	r2, [r7, #8]
 800d724:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	2201      	movs	r2, #1
 800d72c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	2b01      	cmp	r3, #1
 800d732:	d90a      	bls.n	800d74a <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	2282      	movs	r2, #130	; 0x82
 800d738:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d740:	4618      	mov	r0, r3
 800d742:	f004 feb5 	bl	80124b0 <SDMMC_CmdReadMultiBlock>
 800d746:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d748:	e009      	b.n	800d75e <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	2281      	movs	r2, #129	; 0x81
 800d74e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d756:	4618      	mov	r0, r3
 800d758:	f004 fe87 	bl	801246a <SDMMC_CmdReadSingleBlock>
 800d75c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d760:	2b00      	cmp	r3, #0
 800d762:	d012      	beq.n	800d78a <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	4a0f      	ldr	r2, [pc, #60]	; (800d7a8 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d76a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d772:	431a      	orrs	r2, r3
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	2201      	movs	r2, #1
 800d77c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	2200      	movs	r2, #0
 800d784:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d786:	2301      	movs	r3, #1
 800d788:	e00a      	b.n	800d7a0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d798:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800d79a:	2300      	movs	r3, #0
 800d79c:	e000      	b.n	800d7a0 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d79e:	2302      	movs	r3, #2
  }
}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3730      	adds	r7, #48	; 0x30
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}
 800d7a8:	1fe00fff 	.word	0x1fe00fff

0800d7ac <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b08c      	sub	sp, #48	; 0x30
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	60f8      	str	r0, [r7, #12]
 800d7b4:	60b9      	str	r1, [r7, #8]
 800d7b6:	607a      	str	r2, [r7, #4]
 800d7b8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d107      	bne.n	800d7d4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7c8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d7d0:	2301      	movs	r3, #1
 800d7d2:	e08d      	b.n	800d8f0 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d7da:	b2db      	uxtb	r3, r3
 800d7dc:	2b01      	cmp	r3, #1
 800d7de:	f040 8086 	bne.w	800d8ee <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d7e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	441a      	add	r2, r3
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7f2:	429a      	cmp	r2, r3
 800d7f4:	d907      	bls.n	800d806 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7fa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d802:	2301      	movs	r3, #1
 800d804:	e074      	b.n	800d8f0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	2203      	movs	r2, #3
 800d80a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	2200      	movs	r2, #0
 800d814:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	68ba      	ldr	r2, [r7, #8]
 800d81a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	025a      	lsls	r2, r3, #9
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d828:	2b01      	cmp	r3, #1
 800d82a:	d002      	beq.n	800d832 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800d82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d82e:	025b      	lsls	r3, r3, #9
 800d830:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d832:	f04f 33ff 	mov.w	r3, #4294967295
 800d836:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	025b      	lsls	r3, r3, #9
 800d83c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d83e:	2390      	movs	r3, #144	; 0x90
 800d840:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d842:	2300      	movs	r3, #0
 800d844:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d846:	2300      	movs	r3, #0
 800d848:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d84a:	2300      	movs	r3, #0
 800d84c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	f107 0210 	add.w	r2, r7, #16
 800d856:	4611      	mov	r1, r2
 800d858:	4618      	mov	r0, r3
 800d85a:	f004 fdb7 	bl	80123cc <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	68da      	ldr	r2, [r3, #12]
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d86c:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	68ba      	ldr	r2, [r7, #8]
 800d874:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	2201      	movs	r2, #1
 800d87c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	2b01      	cmp	r3, #1
 800d882:	d90a      	bls.n	800d89a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	22a0      	movs	r2, #160	; 0xa0
 800d888:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d890:	4618      	mov	r0, r3
 800d892:	f004 fe53 	bl	801253c <SDMMC_CmdWriteMultiBlock>
 800d896:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d898:	e009      	b.n	800d8ae <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	2290      	movs	r2, #144	; 0x90
 800d89e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f004 fe25 	bl	80124f6 <SDMMC_CmdWriteSingleBlock>
 800d8ac:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d012      	beq.n	800d8da <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	4a0f      	ldr	r2, [pc, #60]	; (800d8f8 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800d8ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c2:	431a      	orrs	r2, r3
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	2201      	movs	r2, #1
 800d8cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	e00a      	b.n	800d8f0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800d8e8:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	e000      	b.n	800d8f0 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d8ee:	2302      	movs	r3, #2
  }
}
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	3730      	adds	r7, #48	; 0x30
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}
 800d8f8:	1fe00fff 	.word	0x1fe00fff

0800d8fc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b084      	sub	sp, #16
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d908:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d910:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d914:	2b00      	cmp	r3, #0
 800d916:	d008      	beq.n	800d92a <HAL_SD_IRQHandler+0x2e>
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	f003 0308 	and.w	r3, r3, #8
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d003      	beq.n	800d92a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d922:	6878      	ldr	r0, [r7, #4]
 800d924:	f001 f926 	bl	800eb74 <SD_Read_IT>
 800d928:	e19a      	b.n	800dc60 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d934:	2b00      	cmp	r3, #0
 800d936:	f000 80ac 	beq.w	800da92 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d942:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681a      	ldr	r2, [r3, #0]
 800d94e:	4b59      	ldr	r3, [pc, #356]	; (800dab4 <HAL_SD_IRQHandler+0x1b8>)
 800d950:	400b      	ands	r3, r1
 800d952:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d962:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	68da      	ldr	r2, [r3, #12]
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d972:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	f003 0308 	and.w	r3, r3, #8
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d038      	beq.n	800d9f0 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	f003 0302 	and.w	r3, r3, #2
 800d984:	2b00      	cmp	r3, #0
 800d986:	d104      	bne.n	800d992 <HAL_SD_IRQHandler+0x96>
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	f003 0320 	and.w	r3, r3, #32
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d011      	beq.n	800d9b6 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	4618      	mov	r0, r3
 800d998:	f004 fdf4 	bl	8012584 <SDMMC_CmdStopTransfer>
 800d99c:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d008      	beq.n	800d9b6 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d9a8:	68bb      	ldr	r3, [r7, #8]
 800d9aa:	431a      	orrs	r2, r3
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f000 f95b 	bl	800dc6c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	4a3f      	ldr	r2, [pc, #252]	; (800dab8 <HAL_SD_IRQHandler+0x1bc>)
 800d9bc:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2201      	movs	r2, #1
 800d9c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	f003 0301 	and.w	r3, r3, #1
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d104      	bne.n	800d9e0 <HAL_SD_IRQHandler+0xe4>
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	f003 0302 	and.w	r3, r3, #2
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d003      	beq.n	800d9e8 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f006 fdf5 	bl	80145d0 <HAL_SD_RxCpltCallback>
 800d9e6:	e13b      	b.n	800dc60 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d9e8:	6878      	ldr	r0, [r7, #4]
 800d9ea:	f006 fde7 	bl	80145bc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d9ee:	e137      	b.n	800dc60 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	f000 8132 	beq.w	800dc60 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	2200      	movs	r2, #0
 800da02:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	2200      	movs	r2, #0
 800da0a:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	2200      	movs	r2, #0
 800da12:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	f003 0302 	and.w	r3, r3, #2
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d104      	bne.n	800da28 <HAL_SD_IRQHandler+0x12c>
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	f003 0320 	and.w	r3, r3, #32
 800da24:	2b00      	cmp	r3, #0
 800da26:	d011      	beq.n	800da4c <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	4618      	mov	r0, r3
 800da2e:	f004 fda9 	bl	8012584 <SDMMC_CmdStopTransfer>
 800da32:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d008      	beq.n	800da4c <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da3e:	68bb      	ldr	r3, [r7, #8]
 800da40:	431a      	orrs	r2, r3
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800da46:	6878      	ldr	r0, [r7, #4]
 800da48:	f000 f910 	bl	800dc6c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2201      	movs	r2, #1
 800da50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2200      	movs	r2, #0
 800da58:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	f003 0310 	and.w	r3, r3, #16
 800da60:	2b00      	cmp	r3, #0
 800da62:	d104      	bne.n	800da6e <HAL_SD_IRQHandler+0x172>
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	f003 0320 	and.w	r3, r3, #32
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d002      	beq.n	800da74 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f006 fda4 	bl	80145bc <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	f003 0301 	and.w	r3, r3, #1
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d105      	bne.n	800da8a <HAL_SD_IRQHandler+0x18e>
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	f003 0302 	and.w	r3, r3, #2
 800da84:	2b00      	cmp	r3, #0
 800da86:	f000 80eb 	beq.w	800dc60 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	f006 fda0 	bl	80145d0 <HAL_SD_RxCpltCallback>
}
 800da90:	e0e6      	b.n	800dc60 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d00d      	beq.n	800dabc <HAL_SD_IRQHandler+0x1c0>
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	f003 0308 	and.w	r3, r3, #8
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d008      	beq.n	800dabc <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800daaa:	6878      	ldr	r0, [r7, #4]
 800daac:	f001 f8a8 	bl	800ec00 <SD_Write_IT>
 800dab0:	e0d6      	b.n	800dc60 <HAL_SD_IRQHandler+0x364>
 800dab2:	bf00      	nop
 800dab4:	ffff3ec5 	.word	0xffff3ec5
 800dab8:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dac2:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	f000 809d 	beq.w	800dc06 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dad2:	f003 0302 	and.w	r3, r3, #2
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d005      	beq.n	800dae6 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dade:	f043 0202 	orr.w	r2, r3, #2
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daec:	f003 0308 	and.w	r3, r3, #8
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d005      	beq.n	800db00 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daf8:	f043 0208 	orr.w	r2, r3, #8
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db06:	f003 0320 	and.w	r3, r3, #32
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d005      	beq.n	800db1a <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db12:	f043 0220 	orr.w	r2, r3, #32
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db20:	f003 0310 	and.w	r3, r3, #16
 800db24:	2b00      	cmp	r3, #0
 800db26:	d005      	beq.n	800db34 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db2c:	f043 0210 	orr.w	r2, r3, #16
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	4a4b      	ldr	r2, [pc, #300]	; (800dc68 <HAL_SD_IRQHandler+0x36c>)
 800db3a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800db4a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	68da      	ldr	r2, [r3, #12]
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800db5a:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800db6a:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	68da      	ldr	r2, [r3, #12]
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800db7a:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	4618      	mov	r0, r3
 800db82:	f004 fcff 	bl	8012584 <SDMMC_CmdStopTransfer>
 800db86:	4602      	mov	r2, r0
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db8c:	431a      	orrs	r2, r3
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	68da      	ldr	r2, [r3, #12]
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dba0:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dbaa:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	f003 0308 	and.w	r3, r3, #8
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d00a      	beq.n	800dbcc <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	2201      	movs	r2, #1
 800dbba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800dbc4:	6878      	ldr	r0, [r7, #4]
 800dbc6:	f000 f851 	bl	800dc6c <HAL_SD_ErrorCallback>
}
 800dbca:	e049      	b.n	800dc60 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d044      	beq.n	800dc60 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d040      	beq.n	800dc60 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800dbec:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2201      	movs	r2, #1
 800dbfa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800dbfe:	6878      	ldr	r0, [r7, #4]
 800dc00:	f000 f834 	bl	800dc6c <HAL_SD_ErrorCallback>
}
 800dc04:	e02c      	b.n	800dc60 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d025      	beq.n	800dc60 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc1c:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc24:	f003 0304 	and.w	r3, r3, #4
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d10c      	bne.n	800dc46 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	f003 0320 	and.w	r3, r3, #32
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d003      	beq.n	800dc3e <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	f001 f84a 	bl	800ecd0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800dc3c:	e010      	b.n	800dc60 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f001 f832 	bl	800eca8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800dc44:	e00c      	b.n	800dc60 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	f003 0320 	and.w	r3, r3, #32
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d003      	beq.n	800dc58 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800dc50:	6878      	ldr	r0, [r7, #4]
 800dc52:	f001 f833 	bl	800ecbc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800dc56:	e003      	b.n	800dc60 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800dc58:	6878      	ldr	r0, [r7, #4]
 800dc5a:	f001 f81b 	bl	800ec94 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800dc5e:	e7ff      	b.n	800dc60 <HAL_SD_IRQHandler+0x364>
 800dc60:	bf00      	nop
 800dc62:	3710      	adds	r7, #16
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}
 800dc68:	18000f3a 	.word	0x18000f3a

0800dc6c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800dc6c:	b480      	push	{r7}
 800dc6e:	b083      	sub	sp, #12
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800dc74:	bf00      	nop
 800dc76:	370c      	adds	r7, #12
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7e:	4770      	bx	lr

0800dc80 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800dc80:	b480      	push	{r7}
 800dc82:	b083      	sub	sp, #12
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc8e:	0f9b      	lsrs	r3, r3, #30
 800dc90:	b2da      	uxtb	r2, r3
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc9a:	0e9b      	lsrs	r3, r3, #26
 800dc9c:	b2db      	uxtb	r3, r3
 800dc9e:	f003 030f 	and.w	r3, r3, #15
 800dca2:	b2da      	uxtb	r2, r3
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dcac:	0e1b      	lsrs	r3, r3, #24
 800dcae:	b2db      	uxtb	r3, r3
 800dcb0:	f003 0303 	and.w	r3, r3, #3
 800dcb4:	b2da      	uxtb	r2, r3
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dcbe:	0c1b      	lsrs	r3, r3, #16
 800dcc0:	b2da      	uxtb	r2, r3
 800dcc2:	683b      	ldr	r3, [r7, #0]
 800dcc4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dcca:	0a1b      	lsrs	r3, r3, #8
 800dccc:	b2da      	uxtb	r2, r3
 800dcce:	683b      	ldr	r3, [r7, #0]
 800dcd0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dcd6:	b2da      	uxtb	r2, r3
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dce0:	0d1b      	lsrs	r3, r3, #20
 800dce2:	b29a      	uxth	r2, r3
 800dce4:	683b      	ldr	r3, [r7, #0]
 800dce6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dcec:	0c1b      	lsrs	r3, r3, #16
 800dcee:	b2db      	uxtb	r3, r3
 800dcf0:	f003 030f 	and.w	r3, r3, #15
 800dcf4:	b2da      	uxtb	r2, r3
 800dcf6:	683b      	ldr	r3, [r7, #0]
 800dcf8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dcfe:	0bdb      	lsrs	r3, r3, #15
 800dd00:	b2db      	uxtb	r3, r3
 800dd02:	f003 0301 	and.w	r3, r3, #1
 800dd06:	b2da      	uxtb	r2, r3
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd10:	0b9b      	lsrs	r3, r3, #14
 800dd12:	b2db      	uxtb	r3, r3
 800dd14:	f003 0301 	and.w	r3, r3, #1
 800dd18:	b2da      	uxtb	r2, r3
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd22:	0b5b      	lsrs	r3, r3, #13
 800dd24:	b2db      	uxtb	r3, r3
 800dd26:	f003 0301 	and.w	r3, r3, #1
 800dd2a:	b2da      	uxtb	r2, r3
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd34:	0b1b      	lsrs	r3, r3, #12
 800dd36:	b2db      	uxtb	r3, r3
 800dd38:	f003 0301 	and.w	r3, r3, #1
 800dd3c:	b2da      	uxtb	r2, r3
 800dd3e:	683b      	ldr	r3, [r7, #0]
 800dd40:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800dd42:	683b      	ldr	r3, [r7, #0]
 800dd44:	2200      	movs	r2, #0
 800dd46:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d163      	bne.n	800de18 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd54:	009a      	lsls	r2, r3, #2
 800dd56:	f640 73fc 	movw	r3, #4092	; 0xffc
 800dd5a:	4013      	ands	r3, r2
 800dd5c:	687a      	ldr	r2, [r7, #4]
 800dd5e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800dd60:	0f92      	lsrs	r2, r2, #30
 800dd62:	431a      	orrs	r2, r3
 800dd64:	683b      	ldr	r3, [r7, #0]
 800dd66:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd6c:	0edb      	lsrs	r3, r3, #27
 800dd6e:	b2db      	uxtb	r3, r3
 800dd70:	f003 0307 	and.w	r3, r3, #7
 800dd74:	b2da      	uxtb	r2, r3
 800dd76:	683b      	ldr	r3, [r7, #0]
 800dd78:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd7e:	0e1b      	lsrs	r3, r3, #24
 800dd80:	b2db      	uxtb	r3, r3
 800dd82:	f003 0307 	and.w	r3, r3, #7
 800dd86:	b2da      	uxtb	r2, r3
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd90:	0d5b      	lsrs	r3, r3, #21
 800dd92:	b2db      	uxtb	r3, r3
 800dd94:	f003 0307 	and.w	r3, r3, #7
 800dd98:	b2da      	uxtb	r2, r3
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dda2:	0c9b      	lsrs	r3, r3, #18
 800dda4:	b2db      	uxtb	r3, r3
 800dda6:	f003 0307 	and.w	r3, r3, #7
 800ddaa:	b2da      	uxtb	r2, r3
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddb4:	0bdb      	lsrs	r3, r3, #15
 800ddb6:	b2db      	uxtb	r3, r3
 800ddb8:	f003 0307 	and.w	r3, r3, #7
 800ddbc:	b2da      	uxtb	r2, r3
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	691b      	ldr	r3, [r3, #16]
 800ddc6:	1c5a      	adds	r2, r3, #1
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	7e1b      	ldrb	r3, [r3, #24]
 800ddd0:	b2db      	uxtb	r3, r3
 800ddd2:	f003 0307 	and.w	r3, r3, #7
 800ddd6:	3302      	adds	r3, #2
 800ddd8:	2201      	movs	r2, #1
 800ddda:	fa02 f303 	lsl.w	r3, r2, r3
 800ddde:	687a      	ldr	r2, [r7, #4]
 800dde0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800dde2:	fb03 f202 	mul.w	r2, r3, r2
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	7a1b      	ldrb	r3, [r3, #8]
 800ddee:	b2db      	uxtb	r3, r3
 800ddf0:	f003 030f 	and.w	r3, r3, #15
 800ddf4:	2201      	movs	r2, #1
 800ddf6:	409a      	lsls	r2, r3
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de00:	687a      	ldr	r2, [r7, #4]
 800de02:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800de04:	0a52      	lsrs	r2, r2, #9
 800de06:	fb03 f202 	mul.w	r2, r3, r2
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	f44f 7200 	mov.w	r2, #512	; 0x200
 800de14:	655a      	str	r2, [r3, #84]	; 0x54
 800de16:	e031      	b.n	800de7c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de1c:	2b01      	cmp	r3, #1
 800de1e:	d11d      	bne.n	800de5c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de24:	041b      	lsls	r3, r3, #16
 800de26:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de2e:	0c1b      	lsrs	r3, r3, #16
 800de30:	431a      	orrs	r2, r3
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	691b      	ldr	r3, [r3, #16]
 800de3a:	3301      	adds	r3, #1
 800de3c:	029a      	lsls	r2, r3, #10
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800de50:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	655a      	str	r2, [r3, #84]	; 0x54
 800de5a:	e00f      	b.n	800de7c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	4a58      	ldr	r2, [pc, #352]	; (800dfc4 <HAL_SD_GetCardCSD+0x344>)
 800de62:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de68:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2201      	movs	r2, #1
 800de74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800de78:	2301      	movs	r3, #1
 800de7a:	e09d      	b.n	800dfb8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de80:	0b9b      	lsrs	r3, r3, #14
 800de82:	b2db      	uxtb	r3, r3
 800de84:	f003 0301 	and.w	r3, r3, #1
 800de88:	b2da      	uxtb	r2, r3
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de92:	09db      	lsrs	r3, r3, #7
 800de94:	b2db      	uxtb	r3, r3
 800de96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de9a:	b2da      	uxtb	r2, r3
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dea4:	b2db      	uxtb	r3, r3
 800dea6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800deaa:	b2da      	uxtb	r2, r3
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800deb4:	0fdb      	lsrs	r3, r3, #31
 800deb6:	b2da      	uxtb	r2, r3
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dec0:	0f5b      	lsrs	r3, r3, #29
 800dec2:	b2db      	uxtb	r3, r3
 800dec4:	f003 0303 	and.w	r3, r3, #3
 800dec8:	b2da      	uxtb	r2, r3
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ded2:	0e9b      	lsrs	r3, r3, #26
 800ded4:	b2db      	uxtb	r3, r3
 800ded6:	f003 0307 	and.w	r3, r3, #7
 800deda:	b2da      	uxtb	r2, r3
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dee4:	0d9b      	lsrs	r3, r3, #22
 800dee6:	b2db      	uxtb	r3, r3
 800dee8:	f003 030f 	and.w	r3, r3, #15
 800deec:	b2da      	uxtb	r2, r3
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800def6:	0d5b      	lsrs	r3, r3, #21
 800def8:	b2db      	uxtb	r3, r3
 800defa:	f003 0301 	and.w	r3, r3, #1
 800defe:	b2da      	uxtb	r2, r3
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800df06:	683b      	ldr	r3, [r7, #0]
 800df08:	2200      	movs	r2, #0
 800df0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df12:	0c1b      	lsrs	r3, r3, #16
 800df14:	b2db      	uxtb	r3, r3
 800df16:	f003 0301 	and.w	r3, r3, #1
 800df1a:	b2da      	uxtb	r2, r3
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df26:	0bdb      	lsrs	r3, r3, #15
 800df28:	b2db      	uxtb	r3, r3
 800df2a:	f003 0301 	and.w	r3, r3, #1
 800df2e:	b2da      	uxtb	r2, r3
 800df30:	683b      	ldr	r3, [r7, #0]
 800df32:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df3a:	0b9b      	lsrs	r3, r3, #14
 800df3c:	b2db      	uxtb	r3, r3
 800df3e:	f003 0301 	and.w	r3, r3, #1
 800df42:	b2da      	uxtb	r2, r3
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df4e:	0b5b      	lsrs	r3, r3, #13
 800df50:	b2db      	uxtb	r3, r3
 800df52:	f003 0301 	and.w	r3, r3, #1
 800df56:	b2da      	uxtb	r2, r3
 800df58:	683b      	ldr	r3, [r7, #0]
 800df5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df62:	0b1b      	lsrs	r3, r3, #12
 800df64:	b2db      	uxtb	r3, r3
 800df66:	f003 0301 	and.w	r3, r3, #1
 800df6a:	b2da      	uxtb	r2, r3
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df76:	0a9b      	lsrs	r3, r3, #10
 800df78:	b2db      	uxtb	r3, r3
 800df7a:	f003 0303 	and.w	r3, r3, #3
 800df7e:	b2da      	uxtb	r2, r3
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df8a:	0a1b      	lsrs	r3, r3, #8
 800df8c:	b2db      	uxtb	r3, r3
 800df8e:	f003 0303 	and.w	r3, r3, #3
 800df92:	b2da      	uxtb	r2, r3
 800df94:	683b      	ldr	r3, [r7, #0]
 800df96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df9e:	085b      	lsrs	r3, r3, #1
 800dfa0:	b2db      	uxtb	r3, r3
 800dfa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfa6:	b2da      	uxtb	r2, r3
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	2201      	movs	r2, #1
 800dfb2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800dfb6:	2300      	movs	r3, #0
}
 800dfb8:	4618      	mov	r0, r3
 800dfba:	370c      	adds	r7, #12
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc2:	4770      	bx	lr
 800dfc4:	1fe00fff 	.word	0x1fe00fff

0800dfc8 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b094      	sub	sp, #80	; 0x50
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
 800dfd0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dfde:	b2db      	uxtb	r3, r3
 800dfe0:	2b03      	cmp	r3, #3
 800dfe2:	d101      	bne.n	800dfe8 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800dfe4:	2301      	movs	r3, #1
 800dfe6:	e0a7      	b.n	800e138 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800dfe8:	f107 0308 	add.w	r3, r7, #8
 800dfec:	4619      	mov	r1, r3
 800dfee:	6878      	ldr	r0, [r7, #4]
 800dff0:	f000 fb62 	bl	800e6b8 <SD_SendSDStatus>
 800dff4:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800dff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d011      	beq.n	800e020 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	4a4f      	ldr	r2, [pc, #316]	; (800e140 <HAL_SD_GetCardStatus+0x178>)
 800e002:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e008:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e00a:	431a      	orrs	r2, r3
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	2201      	movs	r2, #1
 800e014:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800e018:	2301      	movs	r3, #1
 800e01a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800e01e:	e070      	b.n	800e102 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800e020:	68bb      	ldr	r3, [r7, #8]
 800e022:	099b      	lsrs	r3, r3, #6
 800e024:	b2db      	uxtb	r3, r3
 800e026:	f003 0303 	and.w	r3, r3, #3
 800e02a:	b2da      	uxtb	r2, r3
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800e030:	68bb      	ldr	r3, [r7, #8]
 800e032:	095b      	lsrs	r3, r3, #5
 800e034:	b2db      	uxtb	r3, r3
 800e036:	f003 0301 	and.w	r3, r3, #1
 800e03a:	b2da      	uxtb	r2, r3
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800e040:	68bb      	ldr	r3, [r7, #8]
 800e042:	0a1b      	lsrs	r3, r3, #8
 800e044:	b29b      	uxth	r3, r3
 800e046:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e04a:	b29a      	uxth	r2, r3
 800e04c:	68bb      	ldr	r3, [r7, #8]
 800e04e:	0e1b      	lsrs	r3, r3, #24
 800e050:	b29b      	uxth	r3, r3
 800e052:	4313      	orrs	r3, r2
 800e054:	b29a      	uxth	r2, r3
 800e056:	683b      	ldr	r3, [r7, #0]
 800e058:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	061a      	lsls	r2, r3, #24
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	021b      	lsls	r3, r3, #8
 800e062:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e066:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	0a1b      	lsrs	r3, r3, #8
 800e06c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e070:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	0e1b      	lsrs	r3, r3, #24
 800e076:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800e07c:	693b      	ldr	r3, [r7, #16]
 800e07e:	b2da      	uxtb	r2, r3
 800e080:	683b      	ldr	r3, [r7, #0]
 800e082:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800e084:	693b      	ldr	r3, [r7, #16]
 800e086:	0a1b      	lsrs	r3, r3, #8
 800e088:	b2da      	uxtb	r2, r3
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800e08e:	693b      	ldr	r3, [r7, #16]
 800e090:	0d1b      	lsrs	r3, r3, #20
 800e092:	b2db      	uxtb	r3, r3
 800e094:	f003 030f 	and.w	r3, r3, #15
 800e098:	b2da      	uxtb	r2, r3
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800e09e:	693b      	ldr	r3, [r7, #16]
 800e0a0:	0c1b      	lsrs	r3, r3, #16
 800e0a2:	b29b      	uxth	r3, r3
 800e0a4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e0a8:	b29a      	uxth	r2, r3
 800e0aa:	697b      	ldr	r3, [r7, #20]
 800e0ac:	b29b      	uxth	r3, r3
 800e0ae:	b2db      	uxtb	r3, r3
 800e0b0:	b29b      	uxth	r3, r3
 800e0b2:	4313      	orrs	r3, r2
 800e0b4:	b29a      	uxth	r2, r3
 800e0b6:	683b      	ldr	r3, [r7, #0]
 800e0b8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800e0ba:	697b      	ldr	r3, [r7, #20]
 800e0bc:	0a9b      	lsrs	r3, r3, #10
 800e0be:	b2db      	uxtb	r3, r3
 800e0c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e0c4:	b2da      	uxtb	r2, r3
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	0a1b      	lsrs	r3, r3, #8
 800e0ce:	b2db      	uxtb	r3, r3
 800e0d0:	f003 0303 	and.w	r3, r3, #3
 800e0d4:	b2da      	uxtb	r2, r3
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800e0da:	697b      	ldr	r3, [r7, #20]
 800e0dc:	091b      	lsrs	r3, r3, #4
 800e0de:	b2db      	uxtb	r3, r3
 800e0e0:	f003 030f 	and.w	r3, r3, #15
 800e0e4:	b2da      	uxtb	r2, r3
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800e0ea:	697b      	ldr	r3, [r7, #20]
 800e0ec:	b2db      	uxtb	r3, r3
 800e0ee:	f003 030f 	and.w	r3, r3, #15
 800e0f2:	b2da      	uxtb	r2, r3
 800e0f4:	683b      	ldr	r3, [r7, #0]
 800e0f6:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800e0f8:	69bb      	ldr	r3, [r7, #24]
 800e0fa:	0e1b      	lsrs	r3, r3, #24
 800e0fc:	b2da      	uxtb	r2, r3
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e10a:	4618      	mov	r0, r3
 800e10c:	f004 f98a 	bl	8012424 <SDMMC_CmdBlockLength>
 800e110:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e114:	2b00      	cmp	r3, #0
 800e116:	d00d      	beq.n	800e134 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	4a08      	ldr	r2, [pc, #32]	; (800e140 <HAL_SD_GetCardStatus+0x178>)
 800e11e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e124:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2201      	movs	r2, #1
 800e12a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800e12e:	2301      	movs	r3, #1
 800e130:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800e134:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800e138:	4618      	mov	r0, r3
 800e13a:	3750      	adds	r7, #80	; 0x50
 800e13c:	46bd      	mov	sp, r7
 800e13e:	bd80      	pop	{r7, pc}
 800e140:	1fe00fff 	.word	0x1fe00fff

0800e144 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800e144:	b480      	push	{r7}
 800e146:	b083      	sub	sp, #12
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
 800e14c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e152:	683b      	ldr	r3, [r7, #0]
 800e154:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e162:	683b      	ldr	r3, [r7, #0]
 800e164:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e17a:	683b      	ldr	r3, [r7, #0]
 800e17c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800e18e:	2300      	movs	r3, #0
}
 800e190:	4618      	mov	r0, r3
 800e192:	370c      	adds	r7, #12
 800e194:	46bd      	mov	sp, r7
 800e196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19a:	4770      	bx	lr

0800e19c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800e19c:	b590      	push	{r4, r7, lr}
 800e19e:	b08d      	sub	sp, #52	; 0x34
 800e1a0:	af02      	add	r7, sp, #8
 800e1a2:	6078      	str	r0, [r7, #4]
 800e1a4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	2203      	movs	r2, #3
 800e1b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1b8:	2b03      	cmp	r3, #3
 800e1ba:	d02e      	beq.n	800e21a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e1c2:	d106      	bne.n	800e1d2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	635a      	str	r2, [r3, #52]	; 0x34
 800e1d0:	e029      	b.n	800e226 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e1d8:	d10a      	bne.n	800e1f0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e1da:	6878      	ldr	r0, [r7, #4]
 800e1dc:	f000 fb64 	bl	800e8a8 <SD_WideBus_Enable>
 800e1e0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e1e6:	6a3b      	ldr	r3, [r7, #32]
 800e1e8:	431a      	orrs	r2, r3
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	635a      	str	r2, [r3, #52]	; 0x34
 800e1ee:	e01a      	b.n	800e226 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d10a      	bne.n	800e20c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e1f6:	6878      	ldr	r0, [r7, #4]
 800e1f8:	f000 fba1 	bl	800e93e <SD_WideBus_Disable>
 800e1fc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e202:	6a3b      	ldr	r3, [r7, #32]
 800e204:	431a      	orrs	r2, r3
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	635a      	str	r2, [r3, #52]	; 0x34
 800e20a:	e00c      	b.n	800e226 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e210:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	635a      	str	r2, [r3, #52]	; 0x34
 800e218:	e005      	b.n	800e226 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e21e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d007      	beq.n	800e23e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	4a5f      	ldr	r2, [pc, #380]	; (800e3b0 <HAL_SD_ConfigWideBusOperation+0x214>)
 800e234:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800e236:	2301      	movs	r3, #1
 800e238:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e23c:	e096      	b.n	800e36c <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800e23e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800e242:	f04f 0100 	mov.w	r1, #0
 800e246:	f7fd fea3 	bl	800bf90 <HAL_RCCEx_GetPeriphCLKFreq>
 800e24a:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800e24c:	69fb      	ldr	r3, [r7, #28]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	f000 8083 	beq.w	800e35a <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	685b      	ldr	r3, [r3, #4]
 800e258:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	689b      	ldr	r3, [r3, #8]
 800e25e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800e260:	683b      	ldr	r3, [r7, #0]
 800e262:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	691b      	ldr	r3, [r3, #16]
 800e268:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	695a      	ldr	r2, [r3, #20]
 800e26e:	69fb      	ldr	r3, [r7, #28]
 800e270:	4950      	ldr	r1, [pc, #320]	; (800e3b4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e272:	fba1 1303 	umull	r1, r3, r1, r3
 800e276:	0e1b      	lsrs	r3, r3, #24
 800e278:	429a      	cmp	r2, r3
 800e27a:	d303      	bcc.n	800e284 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	695b      	ldr	r3, [r3, #20]
 800e280:	61bb      	str	r3, [r7, #24]
 800e282:	e05a      	b.n	800e33a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e28c:	d103      	bne.n	800e296 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	695b      	ldr	r3, [r3, #20]
 800e292:	61bb      	str	r3, [r7, #24]
 800e294:	e051      	b.n	800e33a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e29a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e29e:	d126      	bne.n	800e2ee <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	695b      	ldr	r3, [r3, #20]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d10e      	bne.n	800e2c6 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800e2a8:	69fb      	ldr	r3, [r7, #28]
 800e2aa:	4a43      	ldr	r2, [pc, #268]	; (800e3b8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e2ac:	4293      	cmp	r3, r2
 800e2ae:	d906      	bls.n	800e2be <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e2b0:	69fb      	ldr	r3, [r7, #28]
 800e2b2:	4a40      	ldr	r2, [pc, #256]	; (800e3b4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e2b4:	fba2 2303 	umull	r2, r3, r2, r3
 800e2b8:	0e5b      	lsrs	r3, r3, #25
 800e2ba:	61bb      	str	r3, [r7, #24]
 800e2bc:	e03d      	b.n	800e33a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	695b      	ldr	r3, [r3, #20]
 800e2c2:	61bb      	str	r3, [r7, #24]
 800e2c4:	e039      	b.n	800e33a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	695b      	ldr	r3, [r3, #20]
 800e2ca:	005b      	lsls	r3, r3, #1
 800e2cc:	69fa      	ldr	r2, [r7, #28]
 800e2ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2d2:	4a39      	ldr	r2, [pc, #228]	; (800e3b8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e2d4:	4293      	cmp	r3, r2
 800e2d6:	d906      	bls.n	800e2e6 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e2d8:	69fb      	ldr	r3, [r7, #28]
 800e2da:	4a36      	ldr	r2, [pc, #216]	; (800e3b4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e2dc:	fba2 2303 	umull	r2, r3, r2, r3
 800e2e0:	0e5b      	lsrs	r3, r3, #25
 800e2e2:	61bb      	str	r3, [r7, #24]
 800e2e4:	e029      	b.n	800e33a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	695b      	ldr	r3, [r3, #20]
 800e2ea:	61bb      	str	r3, [r7, #24]
 800e2ec:	e025      	b.n	800e33a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	695b      	ldr	r3, [r3, #20]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d10e      	bne.n	800e314 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800e2f6:	69fb      	ldr	r3, [r7, #28]
 800e2f8:	4a30      	ldr	r2, [pc, #192]	; (800e3bc <HAL_SD_ConfigWideBusOperation+0x220>)
 800e2fa:	4293      	cmp	r3, r2
 800e2fc:	d906      	bls.n	800e30c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e2fe:	69fb      	ldr	r3, [r7, #28]
 800e300:	4a2c      	ldr	r2, [pc, #176]	; (800e3b4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e302:	fba2 2303 	umull	r2, r3, r2, r3
 800e306:	0e1b      	lsrs	r3, r3, #24
 800e308:	61bb      	str	r3, [r7, #24]
 800e30a:	e016      	b.n	800e33a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	695b      	ldr	r3, [r3, #20]
 800e310:	61bb      	str	r3, [r7, #24]
 800e312:	e012      	b.n	800e33a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	695b      	ldr	r3, [r3, #20]
 800e318:	005b      	lsls	r3, r3, #1
 800e31a:	69fa      	ldr	r2, [r7, #28]
 800e31c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e320:	4a26      	ldr	r2, [pc, #152]	; (800e3bc <HAL_SD_ConfigWideBusOperation+0x220>)
 800e322:	4293      	cmp	r3, r2
 800e324:	d906      	bls.n	800e334 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e326:	69fb      	ldr	r3, [r7, #28]
 800e328:	4a22      	ldr	r2, [pc, #136]	; (800e3b4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e32a:	fba2 2303 	umull	r2, r3, r2, r3
 800e32e:	0e1b      	lsrs	r3, r3, #24
 800e330:	61bb      	str	r3, [r7, #24]
 800e332:	e002      	b.n	800e33a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	695b      	ldr	r3, [r3, #20]
 800e338:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	681c      	ldr	r4, [r3, #0]
 800e33e:	466a      	mov	r2, sp
 800e340:	f107 0314 	add.w	r3, r7, #20
 800e344:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e348:	e882 0003 	stmia.w	r2, {r0, r1}
 800e34c:	f107 0308 	add.w	r3, r7, #8
 800e350:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e352:	4620      	mov	r0, r4
 800e354:	f003 ff88 	bl	8012268 <SDMMC_Init>
 800e358:	e008      	b.n	800e36c <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e35e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800e366:	2301      	movs	r3, #1
 800e368:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e374:	4618      	mov	r0, r3
 800e376:	f004 f855 	bl	8012424 <SDMMC_CmdBlockLength>
 800e37a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e37c:	6a3b      	ldr	r3, [r7, #32]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d00c      	beq.n	800e39c <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	4a0a      	ldr	r2, [pc, #40]	; (800e3b0 <HAL_SD_ConfigWideBusOperation+0x214>)
 800e388:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e38e:	6a3b      	ldr	r3, [r7, #32]
 800e390:	431a      	orrs	r2, r3
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800e396:	2301      	movs	r3, #1
 800e398:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2201      	movs	r2, #1
 800e3a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800e3a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	372c      	adds	r7, #44	; 0x2c
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd90      	pop	{r4, r7, pc}
 800e3b0:	1fe00fff 	.word	0x1fe00fff
 800e3b4:	55e63b89 	.word	0x55e63b89
 800e3b8:	02faf080 	.word	0x02faf080
 800e3bc:	017d7840 	.word	0x017d7840

0800e3c0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b086      	sub	sp, #24
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e3cc:	f107 030c 	add.w	r3, r7, #12
 800e3d0:	4619      	mov	r1, r3
 800e3d2:	6878      	ldr	r0, [r7, #4]
 800e3d4:	f000 fa40 	bl	800e858 <SD_SendStatus>
 800e3d8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e3da:	697b      	ldr	r3, [r7, #20]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d005      	beq.n	800e3ec <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	431a      	orrs	r2, r3
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	0a5b      	lsrs	r3, r3, #9
 800e3f0:	f003 030f 	and.w	r3, r3, #15
 800e3f4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e3f6:	693b      	ldr	r3, [r7, #16]
}
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	3718      	adds	r7, #24
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd80      	pop	{r7, pc}

0800e400 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b090      	sub	sp, #64	; 0x40
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800e408:	2300      	movs	r3, #0
 800e40a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800e40c:	f7f5 fd4e 	bl	8003eac <HAL_GetTick>
 800e410:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	4618      	mov	r0, r3
 800e418:	f003 ff7f 	bl	801231a <SDMMC_GetPowerState>
 800e41c:	4603      	mov	r3, r0
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d102      	bne.n	800e428 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e422:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e426:	e0b5      	b.n	800e594 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e42c:	2b03      	cmp	r3, #3
 800e42e:	d02e      	beq.n	800e48e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	4618      	mov	r0, r3
 800e436:	f004 f9ca 	bl	80127ce <SDMMC_CmdSendCID>
 800e43a:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d001      	beq.n	800e446 <SD_InitCard+0x46>
    {
      return errorstate;
 800e442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e444:	e0a6      	b.n	800e594 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	2100      	movs	r1, #0
 800e44c:	4618      	mov	r0, r3
 800e44e:	f003 ffaa 	bl	80123a6 <SDMMC_GetResponse>
 800e452:	4602      	mov	r2, r0
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	2104      	movs	r1, #4
 800e45e:	4618      	mov	r0, r3
 800e460:	f003 ffa1 	bl	80123a6 <SDMMC_GetResponse>
 800e464:	4602      	mov	r2, r0
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	2108      	movs	r1, #8
 800e470:	4618      	mov	r0, r3
 800e472:	f003 ff98 	bl	80123a6 <SDMMC_GetResponse>
 800e476:	4602      	mov	r2, r0
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	210c      	movs	r1, #12
 800e482:	4618      	mov	r0, r3
 800e484:	f003 ff8f 	bl	80123a6 <SDMMC_GetResponse>
 800e488:	4602      	mov	r2, r0
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e492:	2b03      	cmp	r3, #3
 800e494:	d01d      	beq.n	800e4d2 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800e496:	e019      	b.n	800e4cc <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	f107 020a 	add.w	r2, r7, #10
 800e4a0:	4611      	mov	r1, r2
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	f004 f9d2 	bl	801284c <SDMMC_CmdSetRelAdd>
 800e4a8:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800e4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d001      	beq.n	800e4b4 <SD_InitCard+0xb4>
      {
        return errorstate;
 800e4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4b2:	e06f      	b.n	800e594 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800e4b4:	f7f5 fcfa 	bl	8003eac <HAL_GetTick>
 800e4b8:	4602      	mov	r2, r0
 800e4ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4bc:	1ad3      	subs	r3, r2, r3
 800e4be:	f241 3287 	movw	r2, #4999	; 0x1387
 800e4c2:	4293      	cmp	r3, r2
 800e4c4:	d902      	bls.n	800e4cc <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800e4c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e4ca:	e063      	b.n	800e594 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800e4cc:	897b      	ldrh	r3, [r7, #10]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d0e2      	beq.n	800e498 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4d6:	2b03      	cmp	r3, #3
 800e4d8:	d036      	beq.n	800e548 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e4da:	897b      	ldrh	r3, [r7, #10]
 800e4dc:	461a      	mov	r2, r3
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	681a      	ldr	r2, [r3, #0]
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4ea:	041b      	lsls	r3, r3, #16
 800e4ec:	4619      	mov	r1, r3
 800e4ee:	4610      	mov	r0, r2
 800e4f0:	f004 f98c 	bl	801280c <SDMMC_CmdSendCSD>
 800e4f4:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d001      	beq.n	800e500 <SD_InitCard+0x100>
    {
      return errorstate;
 800e4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4fe:	e049      	b.n	800e594 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	2100      	movs	r1, #0
 800e506:	4618      	mov	r0, r3
 800e508:	f003 ff4d 	bl	80123a6 <SDMMC_GetResponse>
 800e50c:	4602      	mov	r2, r0
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	2104      	movs	r1, #4
 800e518:	4618      	mov	r0, r3
 800e51a:	f003 ff44 	bl	80123a6 <SDMMC_GetResponse>
 800e51e:	4602      	mov	r2, r0
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	2108      	movs	r1, #8
 800e52a:	4618      	mov	r0, r3
 800e52c:	f003 ff3b 	bl	80123a6 <SDMMC_GetResponse>
 800e530:	4602      	mov	r2, r0
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	210c      	movs	r1, #12
 800e53c:	4618      	mov	r0, r3
 800e53e:	f003 ff32 	bl	80123a6 <SDMMC_GetResponse>
 800e542:	4602      	mov	r2, r0
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	2104      	movs	r1, #4
 800e54e:	4618      	mov	r0, r3
 800e550:	f003 ff29 	bl	80123a6 <SDMMC_GetResponse>
 800e554:	4603      	mov	r3, r0
 800e556:	0d1a      	lsrs	r2, r3, #20
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e55c:	f107 030c 	add.w	r3, r7, #12
 800e560:	4619      	mov	r1, r3
 800e562:	6878      	ldr	r0, [r7, #4]
 800e564:	f7ff fb8c 	bl	800dc80 <HAL_SD_GetCardCSD>
 800e568:	4603      	mov	r3, r0
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d002      	beq.n	800e574 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e56e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e572:	e00f      	b.n	800e594 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681a      	ldr	r2, [r3, #0]
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e57c:	041b      	lsls	r3, r3, #16
 800e57e:	4619      	mov	r1, r3
 800e580:	4610      	mov	r0, r2
 800e582:	f004 f83b 	bl	80125fc <SDMMC_CmdSelDesel>
 800e586:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800e588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d001      	beq.n	800e592 <SD_InitCard+0x192>
  {
    return errorstate;
 800e58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e590:	e000      	b.n	800e594 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e592:	2300      	movs	r3, #0
}
 800e594:	4618      	mov	r0, r3
 800e596:	3740      	adds	r7, #64	; 0x40
 800e598:	46bd      	mov	sp, r7
 800e59a:	bd80      	pop	{r7, pc}

0800e59c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b086      	sub	sp, #24
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	f004 f844 	bl	8012642 <SDMMC_CmdGoIdleState>
 800e5ba:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d001      	beq.n	800e5c6 <SD_PowerON+0x2a>
  {
    return errorstate;
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	e072      	b.n	800e6ac <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f004 f857 	bl	801267e <SDMMC_CmdOperCond>
 800e5d0:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e5d8:	d10d      	bne.n	800e5f6 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2200      	movs	r2, #0
 800e5de:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f004 f82c 	bl	8012642 <SDMMC_CmdGoIdleState>
 800e5ea:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d004      	beq.n	800e5fc <SD_PowerON+0x60>
    {
      return errorstate;
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	e05a      	b.n	800e6ac <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2201      	movs	r2, #1
 800e5fa:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e600:	2b01      	cmp	r3, #1
 800e602:	d137      	bne.n	800e674 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	2100      	movs	r1, #0
 800e60a:	4618      	mov	r0, r3
 800e60c:	f004 f857 	bl	80126be <SDMMC_CmdAppCommand>
 800e610:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d02d      	beq.n	800e674 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e618:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e61c:	e046      	b.n	800e6ac <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	2100      	movs	r1, #0
 800e624:	4618      	mov	r0, r3
 800e626:	f004 f84a 	bl	80126be <SDMMC_CmdAppCommand>
 800e62a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d001      	beq.n	800e636 <SD_PowerON+0x9a>
    {
      return errorstate;
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	e03a      	b.n	800e6ac <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	491e      	ldr	r1, [pc, #120]	; (800e6b4 <SD_PowerON+0x118>)
 800e63c:	4618      	mov	r0, r3
 800e63e:	f004 f861 	bl	8012704 <SDMMC_CmdAppOperCommand>
 800e642:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d002      	beq.n	800e650 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e64a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e64e:	e02d      	b.n	800e6ac <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	2100      	movs	r1, #0
 800e656:	4618      	mov	r0, r3
 800e658:	f003 fea5 	bl	80123a6 <SDMMC_GetResponse>
 800e65c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e65e:	697b      	ldr	r3, [r7, #20]
 800e660:	0fdb      	lsrs	r3, r3, #31
 800e662:	2b01      	cmp	r3, #1
 800e664:	d101      	bne.n	800e66a <SD_PowerON+0xce>
 800e666:	2301      	movs	r3, #1
 800e668:	e000      	b.n	800e66c <SD_PowerON+0xd0>
 800e66a:	2300      	movs	r3, #0
 800e66c:	613b      	str	r3, [r7, #16]

    count++;
 800e66e:	68bb      	ldr	r3, [r7, #8]
 800e670:	3301      	adds	r3, #1
 800e672:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e674:	68bb      	ldr	r3, [r7, #8]
 800e676:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e67a:	4293      	cmp	r3, r2
 800e67c:	d802      	bhi.n	800e684 <SD_PowerON+0xe8>
 800e67e:	693b      	ldr	r3, [r7, #16]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d0cc      	beq.n	800e61e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e68a:	4293      	cmp	r3, r2
 800e68c:	d902      	bls.n	800e694 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e68e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e692:	e00b      	b.n	800e6ac <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2200      	movs	r2, #0
 800e698:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800e69a:	697b      	ldr	r3, [r7, #20]
 800e69c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d002      	beq.n	800e6aa <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2201      	movs	r2, #1
 800e6a8:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e6aa:	2300      	movs	r3, #0
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	3718      	adds	r7, #24
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}
 800e6b4:	c1100000 	.word	0xc1100000

0800e6b8 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b08c      	sub	sp, #48	; 0x30
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
 800e6c0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e6c2:	f7f5 fbf3 	bl	8003eac <HAL_GetTick>
 800e6c6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	2100      	movs	r1, #0
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f003 fe67 	bl	80123a6 <SDMMC_GetResponse>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e6de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e6e2:	d102      	bne.n	800e6ea <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e6e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e6e8:	e0b0      	b.n	800e84c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	2140      	movs	r1, #64	; 0x40
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	f003 fe97 	bl	8012424 <SDMMC_CmdBlockLength>
 800e6f6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e6f8:	6a3b      	ldr	r3, [r7, #32]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d005      	beq.n	800e70a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e706:	6a3b      	ldr	r3, [r7, #32]
 800e708:	e0a0      	b.n	800e84c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681a      	ldr	r2, [r3, #0]
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e712:	041b      	lsls	r3, r3, #16
 800e714:	4619      	mov	r1, r3
 800e716:	4610      	mov	r0, r2
 800e718:	f003 ffd1 	bl	80126be <SDMMC_CmdAppCommand>
 800e71c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e71e:	6a3b      	ldr	r3, [r7, #32]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d005      	beq.n	800e730 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e72c:	6a3b      	ldr	r3, [r7, #32]
 800e72e:	e08d      	b.n	800e84c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e730:	f04f 33ff 	mov.w	r3, #4294967295
 800e734:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e736:	2340      	movs	r3, #64	; 0x40
 800e738:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e73a:	2360      	movs	r3, #96	; 0x60
 800e73c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e73e:	2302      	movs	r3, #2
 800e740:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e742:	2300      	movs	r3, #0
 800e744:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e746:	2301      	movs	r3, #1
 800e748:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	f107 0208 	add.w	r2, r7, #8
 800e752:	4611      	mov	r1, r2
 800e754:	4618      	mov	r0, r3
 800e756:	f003 fe39 	bl	80123cc <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	4618      	mov	r0, r3
 800e760:	f004 f8b9 	bl	80128d6 <SDMMC_CmdStatusRegister>
 800e764:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e766:	6a3b      	ldr	r3, [r7, #32]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d02b      	beq.n	800e7c4 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e774:	6a3b      	ldr	r3, [r7, #32]
 800e776:	e069      	b.n	800e84c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e77e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e782:	2b00      	cmp	r3, #0
 800e784:	d013      	beq.n	800e7ae <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800e786:	2300      	movs	r3, #0
 800e788:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e78a:	e00d      	b.n	800e7a8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	4618      	mov	r0, r3
 800e792:	f003 fd93 	bl	80122bc <SDMMC_ReadFIFO>
 800e796:	4602      	mov	r2, r0
 800e798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e79a:	601a      	str	r2, [r3, #0]
        pData++;
 800e79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e79e:	3304      	adds	r3, #4
 800e7a0:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800e7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7a4:	3301      	adds	r3, #1
 800e7a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7aa:	2b07      	cmp	r3, #7
 800e7ac:	d9ee      	bls.n	800e78c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e7ae:	f7f5 fb7d 	bl	8003eac <HAL_GetTick>
 800e7b2:	4602      	mov	r2, r0
 800e7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b6:	1ad3      	subs	r3, r2, r3
 800e7b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7bc:	d102      	bne.n	800e7c4 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e7be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e7c2:	e043      	b.n	800e84c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7ca:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d0d2      	beq.n	800e778 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7d8:	f003 0308 	and.w	r3, r3, #8
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d001      	beq.n	800e7e4 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e7e0:	2308      	movs	r3, #8
 800e7e2:	e033      	b.n	800e84c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7ea:	f003 0302 	and.w	r3, r3, #2
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d001      	beq.n	800e7f6 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e7f2:	2302      	movs	r3, #2
 800e7f4:	e02a      	b.n	800e84c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7fc:	f003 0320 	and.w	r3, r3, #32
 800e800:	2b00      	cmp	r3, #0
 800e802:	d017      	beq.n	800e834 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e804:	2320      	movs	r3, #32
 800e806:	e021      	b.n	800e84c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	4618      	mov	r0, r3
 800e80e:	f003 fd55 	bl	80122bc <SDMMC_ReadFIFO>
 800e812:	4602      	mov	r2, r0
 800e814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e816:	601a      	str	r2, [r3, #0]
    pData++;
 800e818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e81a:	3304      	adds	r3, #4
 800e81c:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e81e:	f7f5 fb45 	bl	8003eac <HAL_GetTick>
 800e822:	4602      	mov	r2, r0
 800e824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e826:	1ad3      	subs	r3, r2, r3
 800e828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e82c:	d102      	bne.n	800e834 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e82e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e832:	e00b      	b.n	800e84c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e83a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d1e2      	bne.n	800e808 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	4a03      	ldr	r2, [pc, #12]	; (800e854 <SD_SendSDStatus+0x19c>)
 800e848:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800e84a:	2300      	movs	r3, #0
}
 800e84c:	4618      	mov	r0, r3
 800e84e:	3730      	adds	r7, #48	; 0x30
 800e850:	46bd      	mov	sp, r7
 800e852:	bd80      	pop	{r7, pc}
 800e854:	18000f3a 	.word	0x18000f3a

0800e858 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b084      	sub	sp, #16
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
 800e860:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800e862:	683b      	ldr	r3, [r7, #0]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d102      	bne.n	800e86e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e868:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e86c:	e018      	b.n	800e8a0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681a      	ldr	r2, [r3, #0]
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e876:	041b      	lsls	r3, r3, #16
 800e878:	4619      	mov	r1, r3
 800e87a:	4610      	mov	r0, r2
 800e87c:	f004 f808 	bl	8012890 <SDMMC_CmdSendStatus>
 800e880:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d001      	beq.n	800e88c <SD_SendStatus+0x34>
  {
    return errorstate;
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	e009      	b.n	800e8a0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	2100      	movs	r1, #0
 800e892:	4618      	mov	r0, r3
 800e894:	f003 fd87 	bl	80123a6 <SDMMC_GetResponse>
 800e898:	4602      	mov	r2, r0
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e89e:	2300      	movs	r3, #0
}
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	3710      	adds	r7, #16
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}

0800e8a8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b086      	sub	sp, #24
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	60fb      	str	r3, [r7, #12]
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	2100      	movs	r1, #0
 800e8be:	4618      	mov	r0, r3
 800e8c0:	f003 fd71 	bl	80123a6 <SDMMC_GetResponse>
 800e8c4:	4603      	mov	r3, r0
 800e8c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e8ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e8ce:	d102      	bne.n	800e8d6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e8d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e8d4:	e02f      	b.n	800e936 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e8d6:	f107 030c 	add.w	r3, r7, #12
 800e8da:	4619      	mov	r1, r3
 800e8dc:	6878      	ldr	r0, [r7, #4]
 800e8de:	f000 f879 	bl	800e9d4 <SD_FindSCR>
 800e8e2:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e8e4:	697b      	ldr	r3, [r7, #20]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d001      	beq.n	800e8ee <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e8ea:	697b      	ldr	r3, [r7, #20]
 800e8ec:	e023      	b.n	800e936 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e8ee:	693b      	ldr	r3, [r7, #16]
 800e8f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d01c      	beq.n	800e932 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681a      	ldr	r2, [r3, #0]
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e900:	041b      	lsls	r3, r3, #16
 800e902:	4619      	mov	r1, r3
 800e904:	4610      	mov	r0, r2
 800e906:	f003 feda 	bl	80126be <SDMMC_CmdAppCommand>
 800e90a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e90c:	697b      	ldr	r3, [r7, #20]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d001      	beq.n	800e916 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e912:	697b      	ldr	r3, [r7, #20]
 800e914:	e00f      	b.n	800e936 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	2102      	movs	r1, #2
 800e91c:	4618      	mov	r0, r3
 800e91e:	f003 ff11 	bl	8012744 <SDMMC_CmdBusWidth>
 800e922:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e924:	697b      	ldr	r3, [r7, #20]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d001      	beq.n	800e92e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e92a:	697b      	ldr	r3, [r7, #20]
 800e92c:	e003      	b.n	800e936 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e92e:	2300      	movs	r3, #0
 800e930:	e001      	b.n	800e936 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e932:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e936:	4618      	mov	r0, r3
 800e938:	3718      	adds	r7, #24
 800e93a:	46bd      	mov	sp, r7
 800e93c:	bd80      	pop	{r7, pc}

0800e93e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e93e:	b580      	push	{r7, lr}
 800e940:	b086      	sub	sp, #24
 800e942:	af00      	add	r7, sp, #0
 800e944:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e946:	2300      	movs	r3, #0
 800e948:	60fb      	str	r3, [r7, #12]
 800e94a:	2300      	movs	r3, #0
 800e94c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	2100      	movs	r1, #0
 800e954:	4618      	mov	r0, r3
 800e956:	f003 fd26 	bl	80123a6 <SDMMC_GetResponse>
 800e95a:	4603      	mov	r3, r0
 800e95c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e960:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e964:	d102      	bne.n	800e96c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e966:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e96a:	e02f      	b.n	800e9cc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e96c:	f107 030c 	add.w	r3, r7, #12
 800e970:	4619      	mov	r1, r3
 800e972:	6878      	ldr	r0, [r7, #4]
 800e974:	f000 f82e 	bl	800e9d4 <SD_FindSCR>
 800e978:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d001      	beq.n	800e984 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e980:	697b      	ldr	r3, [r7, #20]
 800e982:	e023      	b.n	800e9cc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e984:	693b      	ldr	r3, [r7, #16]
 800e986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d01c      	beq.n	800e9c8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681a      	ldr	r2, [r3, #0]
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e996:	041b      	lsls	r3, r3, #16
 800e998:	4619      	mov	r1, r3
 800e99a:	4610      	mov	r0, r2
 800e99c:	f003 fe8f 	bl	80126be <SDMMC_CmdAppCommand>
 800e9a0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e9a2:	697b      	ldr	r3, [r7, #20]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d001      	beq.n	800e9ac <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e9a8:	697b      	ldr	r3, [r7, #20]
 800e9aa:	e00f      	b.n	800e9cc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	2100      	movs	r1, #0
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f003 fec6 	bl	8012744 <SDMMC_CmdBusWidth>
 800e9b8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e9ba:	697b      	ldr	r3, [r7, #20]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d001      	beq.n	800e9c4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e9c0:	697b      	ldr	r3, [r7, #20]
 800e9c2:	e003      	b.n	800e9cc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	e001      	b.n	800e9cc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e9c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	3718      	adds	r7, #24
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	bd80      	pop	{r7, pc}

0800e9d4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b08e      	sub	sp, #56	; 0x38
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
 800e9dc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e9de:	f7f5 fa65 	bl	8003eac <HAL_GetTick>
 800e9e2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	60bb      	str	r3, [r7, #8]
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	2108      	movs	r1, #8
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f003 fd12 	bl	8012424 <SDMMC_CmdBlockLength>
 800ea00:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ea02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d001      	beq.n	800ea0c <SD_FindSCR+0x38>
  {
    return errorstate;
 800ea08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea0a:	e0ad      	b.n	800eb68 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681a      	ldr	r2, [r3, #0]
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea14:	041b      	lsls	r3, r3, #16
 800ea16:	4619      	mov	r1, r3
 800ea18:	4610      	mov	r0, r2
 800ea1a:	f003 fe50 	bl	80126be <SDMMC_CmdAppCommand>
 800ea1e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ea20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d001      	beq.n	800ea2a <SD_FindSCR+0x56>
  {
    return errorstate;
 800ea26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea28:	e09e      	b.n	800eb68 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ea2a:	f04f 33ff 	mov.w	r3, #4294967295
 800ea2e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800ea30:	2308      	movs	r3, #8
 800ea32:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800ea34:	2330      	movs	r3, #48	; 0x30
 800ea36:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ea38:	2302      	movs	r3, #2
 800ea3a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ea40:	2301      	movs	r3, #1
 800ea42:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	f107 0210 	add.w	r2, r7, #16
 800ea4c:	4611      	mov	r1, r2
 800ea4e:	4618      	mov	r0, r3
 800ea50:	f003 fcbc 	bl	80123cc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f003 fe96 	bl	801278a <SDMMC_CmdSendSCR>
 800ea5e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ea60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d027      	beq.n	800eab6 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800ea66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea68:	e07e      	b.n	800eb68 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d113      	bne.n	800eaa0 <SD_FindSCR+0xcc>
 800ea78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d110      	bne.n	800eaa0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	4618      	mov	r0, r3
 800ea84:	f003 fc1a 	bl	80122bc <SDMMC_ReadFIFO>
 800ea88:	4603      	mov	r3, r0
 800ea8a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	4618      	mov	r0, r3
 800ea92:	f003 fc13 	bl	80122bc <SDMMC_ReadFIFO>
 800ea96:	4603      	mov	r3, r0
 800ea98:	60fb      	str	r3, [r7, #12]
      index++;
 800ea9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea9c:	3301      	adds	r3, #1
 800ea9e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800eaa0:	f7f5 fa04 	bl	8003eac <HAL_GetTick>
 800eaa4:	4602      	mov	r2, r0
 800eaa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaa8:	1ad3      	subs	r3, r2, r3
 800eaaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaae:	d102      	bne.n	800eab6 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800eab0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eab4:	e058      	b.n	800eb68 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eabc:	f240 532a 	movw	r3, #1322	; 0x52a
 800eac0:	4013      	ands	r3, r2
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d0d1      	beq.n	800ea6a <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eacc:	f003 0308 	and.w	r3, r3, #8
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d005      	beq.n	800eae0 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	2208      	movs	r2, #8
 800eada:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800eadc:	2308      	movs	r3, #8
 800eade:	e043      	b.n	800eb68 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eae6:	f003 0302 	and.w	r3, r3, #2
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d005      	beq.n	800eafa <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	2202      	movs	r2, #2
 800eaf4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800eaf6:	2302      	movs	r3, #2
 800eaf8:	e036      	b.n	800eb68 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb00:	f003 0320 	and.w	r3, r3, #32
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d005      	beq.n	800eb14 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	2220      	movs	r2, #32
 800eb0e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800eb10:	2320      	movs	r3, #32
 800eb12:	e029      	b.n	800eb68 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	4a15      	ldr	r2, [pc, #84]	; (800eb70 <SD_FindSCR+0x19c>)
 800eb1a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	061a      	lsls	r2, r3, #24
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	021b      	lsls	r3, r3, #8
 800eb24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eb28:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	0a1b      	lsrs	r3, r3, #8
 800eb2e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800eb32:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	0e1b      	lsrs	r3, r3, #24
 800eb38:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800eb3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb3c:	601a      	str	r2, [r3, #0]
    scr++;
 800eb3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb40:	3304      	adds	r3, #4
 800eb42:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800eb44:	68bb      	ldr	r3, [r7, #8]
 800eb46:	061a      	lsls	r2, r3, #24
 800eb48:	68bb      	ldr	r3, [r7, #8]
 800eb4a:	021b      	lsls	r3, r3, #8
 800eb4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eb50:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800eb52:	68bb      	ldr	r3, [r7, #8]
 800eb54:	0a1b      	lsrs	r3, r3, #8
 800eb56:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800eb5a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800eb5c:	68bb      	ldr	r3, [r7, #8]
 800eb5e:	0e1b      	lsrs	r3, r3, #24
 800eb60:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800eb62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb64:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800eb66:	2300      	movs	r3, #0
}
 800eb68:	4618      	mov	r0, r3
 800eb6a:	3738      	adds	r7, #56	; 0x38
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}
 800eb70:	18000f3a 	.word	0x18000f3a

0800eb74 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b086      	sub	sp, #24
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb80:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb86:	2b1f      	cmp	r3, #31
 800eb88:	d936      	bls.n	800ebf8 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	617b      	str	r3, [r7, #20]
 800eb8e:	e027      	b.n	800ebe0 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	4618      	mov	r0, r3
 800eb96:	f003 fb91 	bl	80122bc <SDMMC_ReadFIFO>
 800eb9a:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	b2da      	uxtb	r2, r3
 800eba0:	693b      	ldr	r3, [r7, #16]
 800eba2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800eba4:	693b      	ldr	r3, [r7, #16]
 800eba6:	3301      	adds	r3, #1
 800eba8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	0a1b      	lsrs	r3, r3, #8
 800ebae:	b2da      	uxtb	r2, r3
 800ebb0:	693b      	ldr	r3, [r7, #16]
 800ebb2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ebb4:	693b      	ldr	r3, [r7, #16]
 800ebb6:	3301      	adds	r3, #1
 800ebb8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	0c1b      	lsrs	r3, r3, #16
 800ebbe:	b2da      	uxtb	r2, r3
 800ebc0:	693b      	ldr	r3, [r7, #16]
 800ebc2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ebc4:	693b      	ldr	r3, [r7, #16]
 800ebc6:	3301      	adds	r3, #1
 800ebc8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	0e1b      	lsrs	r3, r3, #24
 800ebce:	b2da      	uxtb	r2, r3
 800ebd0:	693b      	ldr	r3, [r7, #16]
 800ebd2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ebd4:	693b      	ldr	r3, [r7, #16]
 800ebd6:	3301      	adds	r3, #1
 800ebd8:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800ebda:	697b      	ldr	r3, [r7, #20]
 800ebdc:	3301      	adds	r3, #1
 800ebde:	617b      	str	r3, [r7, #20]
 800ebe0:	697b      	ldr	r3, [r7, #20]
 800ebe2:	2b07      	cmp	r3, #7
 800ebe4:	d9d4      	bls.n	800eb90 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	693a      	ldr	r2, [r7, #16]
 800ebea:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebf0:	f1a3 0220 	sub.w	r2, r3, #32
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800ebf8:	bf00      	nop
 800ebfa:	3718      	adds	r7, #24
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	bd80      	pop	{r7, pc}

0800ec00 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b086      	sub	sp, #24
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	69db      	ldr	r3, [r3, #28]
 800ec0c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	6a1b      	ldr	r3, [r3, #32]
 800ec12:	2b1f      	cmp	r3, #31
 800ec14:	d93a      	bls.n	800ec8c <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800ec16:	2300      	movs	r3, #0
 800ec18:	617b      	str	r3, [r7, #20]
 800ec1a:	e02b      	b.n	800ec74 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800ec1c:	693b      	ldr	r3, [r7, #16]
 800ec1e:	781b      	ldrb	r3, [r3, #0]
 800ec20:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ec22:	693b      	ldr	r3, [r7, #16]
 800ec24:	3301      	adds	r3, #1
 800ec26:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800ec28:	693b      	ldr	r3, [r7, #16]
 800ec2a:	781b      	ldrb	r3, [r3, #0]
 800ec2c:	021a      	lsls	r2, r3, #8
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	4313      	orrs	r3, r2
 800ec32:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ec34:	693b      	ldr	r3, [r7, #16]
 800ec36:	3301      	adds	r3, #1
 800ec38:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800ec3a:	693b      	ldr	r3, [r7, #16]
 800ec3c:	781b      	ldrb	r3, [r3, #0]
 800ec3e:	041a      	lsls	r2, r3, #16
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	4313      	orrs	r3, r2
 800ec44:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ec46:	693b      	ldr	r3, [r7, #16]
 800ec48:	3301      	adds	r3, #1
 800ec4a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800ec4c:	693b      	ldr	r3, [r7, #16]
 800ec4e:	781b      	ldrb	r3, [r3, #0]
 800ec50:	061a      	lsls	r2, r3, #24
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	4313      	orrs	r3, r2
 800ec56:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ec58:	693b      	ldr	r3, [r7, #16]
 800ec5a:	3301      	adds	r3, #1
 800ec5c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	f107 020c 	add.w	r2, r7, #12
 800ec66:	4611      	mov	r1, r2
 800ec68:	4618      	mov	r0, r3
 800ec6a:	f003 fb34 	bl	80122d6 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800ec6e:	697b      	ldr	r3, [r7, #20]
 800ec70:	3301      	adds	r3, #1
 800ec72:	617b      	str	r3, [r7, #20]
 800ec74:	697b      	ldr	r3, [r7, #20]
 800ec76:	2b07      	cmp	r3, #7
 800ec78:	d9d0      	bls.n	800ec1c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	693a      	ldr	r2, [r7, #16]
 800ec7e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	6a1b      	ldr	r3, [r3, #32]
 800ec84:	f1a3 0220 	sub.w	r2, r3, #32
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	621a      	str	r2, [r3, #32]
  }
}
 800ec8c:	bf00      	nop
 800ec8e:	3718      	adds	r7, #24
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}

0800ec94 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800ec94:	b480      	push	{r7}
 800ec96:	b083      	sub	sp, #12
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800ec9c:	bf00      	nop
 800ec9e:	370c      	adds	r7, #12
 800eca0:	46bd      	mov	sp, r7
 800eca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca6:	4770      	bx	lr

0800eca8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800eca8:	b480      	push	{r7}
 800ecaa:	b083      	sub	sp, #12
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800ecb0:	bf00      	nop
 800ecb2:	370c      	adds	r7, #12
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecba:	4770      	bx	lr

0800ecbc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800ecbc:	b480      	push	{r7}
 800ecbe:	b083      	sub	sp, #12
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800ecc4:	bf00      	nop
 800ecc6:	370c      	adds	r7, #12
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecce:	4770      	bx	lr

0800ecd0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800ecd0:	b480      	push	{r7}
 800ecd2:	b083      	sub	sp, #12
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800ecd8:	bf00      	nop
 800ecda:	370c      	adds	r7, #12
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece2:	4770      	bx	lr

0800ece4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b084      	sub	sp, #16
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d101      	bne.n	800ecf6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ecf2:	2301      	movs	r3, #1
 800ecf4:	e10f      	b.n	800ef16 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	4a87      	ldr	r2, [pc, #540]	; (800ef20 <HAL_SPI_Init+0x23c>)
 800ed02:	4293      	cmp	r3, r2
 800ed04:	d00f      	beq.n	800ed26 <HAL_SPI_Init+0x42>
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	4a86      	ldr	r2, [pc, #536]	; (800ef24 <HAL_SPI_Init+0x240>)
 800ed0c:	4293      	cmp	r3, r2
 800ed0e:	d00a      	beq.n	800ed26 <HAL_SPI_Init+0x42>
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	4a84      	ldr	r2, [pc, #528]	; (800ef28 <HAL_SPI_Init+0x244>)
 800ed16:	4293      	cmp	r3, r2
 800ed18:	d005      	beq.n	800ed26 <HAL_SPI_Init+0x42>
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	68db      	ldr	r3, [r3, #12]
 800ed1e:	2b0f      	cmp	r3, #15
 800ed20:	d901      	bls.n	800ed26 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ed22:	2301      	movs	r3, #1
 800ed24:	e0f7      	b.n	800ef16 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ed26:	6878      	ldr	r0, [r7, #4]
 800ed28:	f000 fd5a 	bl	800f7e0 <SPI_GetPacketSize>
 800ed2c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	4a7b      	ldr	r2, [pc, #492]	; (800ef20 <HAL_SPI_Init+0x23c>)
 800ed34:	4293      	cmp	r3, r2
 800ed36:	d00c      	beq.n	800ed52 <HAL_SPI_Init+0x6e>
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	4a79      	ldr	r2, [pc, #484]	; (800ef24 <HAL_SPI_Init+0x240>)
 800ed3e:	4293      	cmp	r3, r2
 800ed40:	d007      	beq.n	800ed52 <HAL_SPI_Init+0x6e>
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	4a78      	ldr	r2, [pc, #480]	; (800ef28 <HAL_SPI_Init+0x244>)
 800ed48:	4293      	cmp	r3, r2
 800ed4a:	d002      	beq.n	800ed52 <HAL_SPI_Init+0x6e>
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	2b08      	cmp	r3, #8
 800ed50:	d811      	bhi.n	800ed76 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ed56:	4a72      	ldr	r2, [pc, #456]	; (800ef20 <HAL_SPI_Init+0x23c>)
 800ed58:	4293      	cmp	r3, r2
 800ed5a:	d009      	beq.n	800ed70 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	4a70      	ldr	r2, [pc, #448]	; (800ef24 <HAL_SPI_Init+0x240>)
 800ed62:	4293      	cmp	r3, r2
 800ed64:	d004      	beq.n	800ed70 <HAL_SPI_Init+0x8c>
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	4a6f      	ldr	r2, [pc, #444]	; (800ef28 <HAL_SPI_Init+0x244>)
 800ed6c:	4293      	cmp	r3, r2
 800ed6e:	d104      	bne.n	800ed7a <HAL_SPI_Init+0x96>
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	2b10      	cmp	r3, #16
 800ed74:	d901      	bls.n	800ed7a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ed76:	2301      	movs	r3, #1
 800ed78:	e0cd      	b.n	800ef16 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ed80:	b2db      	uxtb	r3, r3
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d106      	bne.n	800ed94 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	2200      	movs	r2, #0
 800ed8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f7f4 fa40 	bl	8003214 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2202      	movs	r2, #2
 800ed98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	681a      	ldr	r2, [r3, #0]
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	f022 0201 	bic.w	r2, r2, #1
 800edaa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	689b      	ldr	r3, [r3, #8]
 800edb2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800edb6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	699b      	ldr	r3, [r3, #24]
 800edbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800edc0:	d119      	bne.n	800edf6 <HAL_SPI_Init+0x112>
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	685b      	ldr	r3, [r3, #4]
 800edc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800edca:	d103      	bne.n	800edd4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d008      	beq.n	800ede6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d10c      	bne.n	800edf6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ede0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ede4:	d107      	bne.n	800edf6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	681a      	ldr	r2, [r3, #0]
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800edf4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	685b      	ldr	r3, [r3, #4]
 800edfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d00f      	beq.n	800ee22 <HAL_SPI_Init+0x13e>
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	68db      	ldr	r3, [r3, #12]
 800ee06:	2b06      	cmp	r3, #6
 800ee08:	d90b      	bls.n	800ee22 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	430a      	orrs	r2, r1
 800ee1e:	601a      	str	r2, [r3, #0]
 800ee20:	e007      	b.n	800ee32 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	681a      	ldr	r2, [r3, #0]
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ee30:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	69da      	ldr	r2, [r3, #28]
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee3a:	431a      	orrs	r2, r3
 800ee3c:	68bb      	ldr	r3, [r7, #8]
 800ee3e:	431a      	orrs	r2, r3
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee44:	ea42 0103 	orr.w	r1, r2, r3
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	68da      	ldr	r2, [r3, #12]
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	430a      	orrs	r2, r1
 800ee52:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee5c:	431a      	orrs	r2, r3
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee62:	431a      	orrs	r2, r3
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	699b      	ldr	r3, [r3, #24]
 800ee68:	431a      	orrs	r2, r3
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	691b      	ldr	r3, [r3, #16]
 800ee6e:	431a      	orrs	r2, r3
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	695b      	ldr	r3, [r3, #20]
 800ee74:	431a      	orrs	r2, r3
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	6a1b      	ldr	r3, [r3, #32]
 800ee7a:	431a      	orrs	r2, r3
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	685b      	ldr	r3, [r3, #4]
 800ee80:	431a      	orrs	r2, r3
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ee86:	431a      	orrs	r2, r3
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	689b      	ldr	r3, [r3, #8]
 800ee8c:	431a      	orrs	r2, r3
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ee92:	ea42 0103 	orr.w	r1, r2, r3
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	430a      	orrs	r2, r1
 800eea0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	685b      	ldr	r3, [r3, #4]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d113      	bne.n	800eed2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	689b      	ldr	r3, [r3, #8]
 800eeb0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eebc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	689b      	ldr	r3, [r3, #8]
 800eec4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800eed0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	f022 0201 	bic.w	r2, r2, #1
 800eee0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	685b      	ldr	r3, [r3, #4]
 800eee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d00a      	beq.n	800ef04 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	68db      	ldr	r3, [r3, #12]
 800eef4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	430a      	orrs	r2, r1
 800ef02:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	2200      	movs	r2, #0
 800ef08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	2201      	movs	r2, #1
 800ef10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800ef14:	2300      	movs	r3, #0
}
 800ef16:	4618      	mov	r0, r3
 800ef18:	3710      	adds	r7, #16
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bd80      	pop	{r7, pc}
 800ef1e:	bf00      	nop
 800ef20:	40013000 	.word	0x40013000
 800ef24:	40003800 	.word	0x40003800
 800ef28:	40003c00 	.word	0x40003c00

0800ef2c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b08a      	sub	sp, #40	; 0x28
 800ef30:	af02      	add	r7, sp, #8
 800ef32:	60f8      	str	r0, [r7, #12]
 800ef34:	60b9      	str	r1, [r7, #8]
 800ef36:	603b      	str	r3, [r7, #0]
 800ef38:	4613      	mov	r3, r2
 800ef3a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	3320      	adds	r3, #32
 800ef42:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ef44:	2300      	movs	r3, #0
 800ef46:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ef4e:	2b01      	cmp	r3, #1
 800ef50:	d101      	bne.n	800ef56 <HAL_SPI_Transmit+0x2a>
 800ef52:	2302      	movs	r3, #2
 800ef54:	e1e1      	b.n	800f31a <HAL_SPI_Transmit+0x3ee>
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	2201      	movs	r2, #1
 800ef5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ef5e:	f7f4 ffa5 	bl	8003eac <HAL_GetTick>
 800ef62:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ef6a:	b2db      	uxtb	r3, r3
 800ef6c:	2b01      	cmp	r3, #1
 800ef6e:	d007      	beq.n	800ef80 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800ef70:	2302      	movs	r3, #2
 800ef72:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	2200      	movs	r2, #0
 800ef78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ef7c:	7efb      	ldrb	r3, [r7, #27]
 800ef7e:	e1cc      	b.n	800f31a <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ef80:	68bb      	ldr	r3, [r7, #8]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d002      	beq.n	800ef8c <HAL_SPI_Transmit+0x60>
 800ef86:	88fb      	ldrh	r3, [r7, #6]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d107      	bne.n	800ef9c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800ef8c:	2301      	movs	r3, #1
 800ef8e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	2200      	movs	r2, #0
 800ef94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ef98:	7efb      	ldrb	r3, [r7, #27]
 800ef9a:	e1be      	b.n	800f31a <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	2203      	movs	r2, #3
 800efa0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	2200      	movs	r2, #0
 800efa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	68ba      	ldr	r2, [r7, #8]
 800efb0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	88fa      	ldrh	r2, [r7, #6]
 800efb6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	88fa      	ldrh	r2, [r7, #6]
 800efbe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	2200      	movs	r2, #0
 800efc6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	2200      	movs	r2, #0
 800efcc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	2200      	movs	r2, #0
 800efd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	2200      	movs	r2, #0
 800efdc:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	2200      	movs	r2, #0
 800efe2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	689b      	ldr	r3, [r3, #8]
 800efe8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800efec:	d108      	bne.n	800f000 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	681a      	ldr	r2, [r3, #0]
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800effc:	601a      	str	r2, [r3, #0]
 800effe:	e009      	b.n	800f014 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	68db      	ldr	r3, [r3, #12]
 800f006:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800f012:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	685a      	ldr	r2, [r3, #4]
 800f01a:	4b96      	ldr	r3, [pc, #600]	; (800f274 <HAL_SPI_Transmit+0x348>)
 800f01c:	4013      	ands	r3, r2
 800f01e:	88f9      	ldrh	r1, [r7, #6]
 800f020:	68fa      	ldr	r2, [r7, #12]
 800f022:	6812      	ldr	r2, [r2, #0]
 800f024:	430b      	orrs	r3, r1
 800f026:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	681a      	ldr	r2, [r3, #0]
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	f042 0201 	orr.w	r2, r2, #1
 800f036:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	685b      	ldr	r3, [r3, #4]
 800f03c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f040:	d107      	bne.n	800f052 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	681a      	ldr	r2, [r3, #0]
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f050:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	68db      	ldr	r3, [r3, #12]
 800f056:	2b0f      	cmp	r3, #15
 800f058:	d947      	bls.n	800f0ea <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f05a:	e03f      	b.n	800f0dc <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	695b      	ldr	r3, [r3, #20]
 800f062:	f003 0302 	and.w	r3, r3, #2
 800f066:	2b02      	cmp	r3, #2
 800f068:	d114      	bne.n	800f094 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	6812      	ldr	r2, [r2, #0]
 800f074:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f07a:	1d1a      	adds	r2, r3, #4
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f086:	b29b      	uxth	r3, r3
 800f088:	3b01      	subs	r3, #1
 800f08a:	b29a      	uxth	r2, r3
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f092:	e023      	b.n	800f0dc <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f094:	f7f4 ff0a 	bl	8003eac <HAL_GetTick>
 800f098:	4602      	mov	r2, r0
 800f09a:	697b      	ldr	r3, [r7, #20]
 800f09c:	1ad3      	subs	r3, r2, r3
 800f09e:	683a      	ldr	r2, [r7, #0]
 800f0a0:	429a      	cmp	r2, r3
 800f0a2:	d803      	bhi.n	800f0ac <HAL_SPI_Transmit+0x180>
 800f0a4:	683b      	ldr	r3, [r7, #0]
 800f0a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0aa:	d102      	bne.n	800f0b2 <HAL_SPI_Transmit+0x186>
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d114      	bne.n	800f0dc <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f0b2:	68f8      	ldr	r0, [r7, #12]
 800f0b4:	f000 fac6 	bl	800f644 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f0c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	2201      	movs	r2, #1
 800f0d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f0d8:	2303      	movs	r3, #3
 800f0da:	e11e      	b.n	800f31a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f0e2:	b29b      	uxth	r3, r3
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d1b9      	bne.n	800f05c <HAL_SPI_Transmit+0x130>
 800f0e8:	e0f1      	b.n	800f2ce <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	68db      	ldr	r3, [r3, #12]
 800f0ee:	2b07      	cmp	r3, #7
 800f0f0:	f240 80e6 	bls.w	800f2c0 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f0f4:	e05d      	b.n	800f1b2 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	695b      	ldr	r3, [r3, #20]
 800f0fc:	f003 0302 	and.w	r3, r3, #2
 800f100:	2b02      	cmp	r3, #2
 800f102:	d132      	bne.n	800f16a <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f10a:	b29b      	uxth	r3, r3
 800f10c:	2b01      	cmp	r3, #1
 800f10e:	d918      	bls.n	800f142 <HAL_SPI_Transmit+0x216>
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f114:	2b00      	cmp	r3, #0
 800f116:	d014      	beq.n	800f142 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	6812      	ldr	r2, [r2, #0]
 800f122:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f128:	1d1a      	adds	r2, r3, #4
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f134:	b29b      	uxth	r3, r3
 800f136:	3b02      	subs	r3, #2
 800f138:	b29a      	uxth	r2, r3
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f140:	e037      	b.n	800f1b2 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f146:	881a      	ldrh	r2, [r3, #0]
 800f148:	69fb      	ldr	r3, [r7, #28]
 800f14a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f150:	1c9a      	adds	r2, r3, #2
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f15c:	b29b      	uxth	r3, r3
 800f15e:	3b01      	subs	r3, #1
 800f160:	b29a      	uxth	r2, r3
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f168:	e023      	b.n	800f1b2 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f16a:	f7f4 fe9f 	bl	8003eac <HAL_GetTick>
 800f16e:	4602      	mov	r2, r0
 800f170:	697b      	ldr	r3, [r7, #20]
 800f172:	1ad3      	subs	r3, r2, r3
 800f174:	683a      	ldr	r2, [r7, #0]
 800f176:	429a      	cmp	r2, r3
 800f178:	d803      	bhi.n	800f182 <HAL_SPI_Transmit+0x256>
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f180:	d102      	bne.n	800f188 <HAL_SPI_Transmit+0x25c>
 800f182:	683b      	ldr	r3, [r7, #0]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d114      	bne.n	800f1b2 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f188:	68f8      	ldr	r0, [r7, #12]
 800f18a:	f000 fa5b 	bl	800f644 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	2200      	movs	r2, #0
 800f192:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f19c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	2201      	movs	r2, #1
 800f1aa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f1ae:	2303      	movs	r3, #3
 800f1b0:	e0b3      	b.n	800f31a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f1b8:	b29b      	uxth	r3, r3
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d19b      	bne.n	800f0f6 <HAL_SPI_Transmit+0x1ca>
 800f1be:	e086      	b.n	800f2ce <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	695b      	ldr	r3, [r3, #20]
 800f1c6:	f003 0302 	and.w	r3, r3, #2
 800f1ca:	2b02      	cmp	r3, #2
 800f1cc:	d154      	bne.n	800f278 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f1d4:	b29b      	uxth	r3, r3
 800f1d6:	2b03      	cmp	r3, #3
 800f1d8:	d918      	bls.n	800f20c <HAL_SPI_Transmit+0x2e0>
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1de:	2b40      	cmp	r3, #64	; 0x40
 800f1e0:	d914      	bls.n	800f20c <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	6812      	ldr	r2, [r2, #0]
 800f1ec:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f1f2:	1d1a      	adds	r2, r3, #4
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f1fe:	b29b      	uxth	r3, r3
 800f200:	3b04      	subs	r3, #4
 800f202:	b29a      	uxth	r2, r3
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f20a:	e059      	b.n	800f2c0 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f212:	b29b      	uxth	r3, r3
 800f214:	2b01      	cmp	r3, #1
 800f216:	d917      	bls.n	800f248 <HAL_SPI_Transmit+0x31c>
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d013      	beq.n	800f248 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f224:	881a      	ldrh	r2, [r3, #0]
 800f226:	69fb      	ldr	r3, [r7, #28]
 800f228:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f22e:	1c9a      	adds	r2, r3, #2
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f23a:	b29b      	uxth	r3, r3
 800f23c:	3b02      	subs	r3, #2
 800f23e:	b29a      	uxth	r2, r3
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f246:	e03b      	b.n	800f2c0 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	3320      	adds	r3, #32
 800f252:	7812      	ldrb	r2, [r2, #0]
 800f254:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f25a:	1c5a      	adds	r2, r3, #1
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f266:	b29b      	uxth	r3, r3
 800f268:	3b01      	subs	r3, #1
 800f26a:	b29a      	uxth	r2, r3
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f272:	e025      	b.n	800f2c0 <HAL_SPI_Transmit+0x394>
 800f274:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f278:	f7f4 fe18 	bl	8003eac <HAL_GetTick>
 800f27c:	4602      	mov	r2, r0
 800f27e:	697b      	ldr	r3, [r7, #20]
 800f280:	1ad3      	subs	r3, r2, r3
 800f282:	683a      	ldr	r2, [r7, #0]
 800f284:	429a      	cmp	r2, r3
 800f286:	d803      	bhi.n	800f290 <HAL_SPI_Transmit+0x364>
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f28e:	d102      	bne.n	800f296 <HAL_SPI_Transmit+0x36a>
 800f290:	683b      	ldr	r3, [r7, #0]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d114      	bne.n	800f2c0 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f296:	68f8      	ldr	r0, [r7, #12]
 800f298:	f000 f9d4 	bl	800f644 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	2200      	movs	r2, #0
 800f2a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	2201      	movs	r2, #1
 800f2b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f2bc:	2303      	movs	r3, #3
 800f2be:	e02c      	b.n	800f31a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f2c6:	b29b      	uxth	r3, r3
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	f47f af79 	bne.w	800f1c0 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800f2ce:	697b      	ldr	r3, [r7, #20]
 800f2d0:	9300      	str	r3, [sp, #0]
 800f2d2:	683b      	ldr	r3, [r7, #0]
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	2108      	movs	r1, #8
 800f2d8:	68f8      	ldr	r0, [r7, #12]
 800f2da:	f000 fa53 	bl	800f784 <SPI_WaitOnFlagUntilTimeout>
 800f2de:	4603      	mov	r3, r0
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d007      	beq.n	800f2f4 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2ea:	f043 0220 	orr.w	r2, r3, #32
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f2f4:	68f8      	ldr	r0, [r7, #12]
 800f2f6:	f000 f9a5 	bl	800f644 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	2201      	movs	r2, #1
 800f306:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f310:	2b00      	cmp	r3, #0
 800f312:	d001      	beq.n	800f318 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800f314:	2301      	movs	r3, #1
 800f316:	e000      	b.n	800f31a <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800f318:	7efb      	ldrb	r3, [r7, #27]
}
 800f31a:	4618      	mov	r0, r3
 800f31c:	3720      	adds	r7, #32
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}
 800f322:	bf00      	nop

0800f324 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f324:	b580      	push	{r7, lr}
 800f326:	b088      	sub	sp, #32
 800f328:	af00      	add	r7, sp, #0
 800f32a:	60f8      	str	r0, [r7, #12]
 800f32c:	60b9      	str	r1, [r7, #8]
 800f32e:	603b      	str	r3, [r7, #0]
 800f330:	4613      	mov	r3, r2
 800f332:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f334:	2300      	movs	r3, #0
 800f336:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	3330      	adds	r3, #48	; 0x30
 800f33e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f346:	2b01      	cmp	r3, #1
 800f348:	d101      	bne.n	800f34e <HAL_SPI_Receive+0x2a>
 800f34a:	2302      	movs	r3, #2
 800f34c:	e173      	b.n	800f636 <HAL_SPI_Receive+0x312>
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	2201      	movs	r2, #1
 800f352:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f356:	f7f4 fda9 	bl	8003eac <HAL_GetTick>
 800f35a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f362:	b2db      	uxtb	r3, r3
 800f364:	2b01      	cmp	r3, #1
 800f366:	d007      	beq.n	800f378 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800f368:	2302      	movs	r3, #2
 800f36a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	2200      	movs	r2, #0
 800f370:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f374:	7ffb      	ldrb	r3, [r7, #31]
 800f376:	e15e      	b.n	800f636 <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f378:	68bb      	ldr	r3, [r7, #8]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d002      	beq.n	800f384 <HAL_SPI_Receive+0x60>
 800f37e:	88fb      	ldrh	r3, [r7, #6]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d107      	bne.n	800f394 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800f384:	2301      	movs	r3, #1
 800f386:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	2200      	movs	r2, #0
 800f38c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f390:	7ffb      	ldrb	r3, [r7, #31]
 800f392:	e150      	b.n	800f636 <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	2204      	movs	r2, #4
 800f398:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	2200      	movs	r2, #0
 800f3a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	68ba      	ldr	r2, [r7, #8]
 800f3a8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	88fa      	ldrh	r2, [r7, #6]
 800f3ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	88fa      	ldrh	r2, [r7, #6]
 800f3b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	2200      	movs	r2, #0
 800f3be:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	2200      	movs	r2, #0
 800f3da:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	689b      	ldr	r3, [r3, #8]
 800f3e0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800f3e4:	d108      	bne.n	800f3f8 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	681a      	ldr	r2, [r3, #0]
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f3f4:	601a      	str	r2, [r3, #0]
 800f3f6:	e009      	b.n	800f40c <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	68db      	ldr	r3, [r3, #12]
 800f3fe:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800f40a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	685a      	ldr	r2, [r3, #4]
 800f412:	4b8b      	ldr	r3, [pc, #556]	; (800f640 <HAL_SPI_Receive+0x31c>)
 800f414:	4013      	ands	r3, r2
 800f416:	88f9      	ldrh	r1, [r7, #6]
 800f418:	68fa      	ldr	r2, [r7, #12]
 800f41a:	6812      	ldr	r2, [r2, #0]
 800f41c:	430b      	orrs	r3, r1
 800f41e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	681a      	ldr	r2, [r3, #0]
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	f042 0201 	orr.w	r2, r2, #1
 800f42e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	685b      	ldr	r3, [r3, #4]
 800f434:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f438:	d107      	bne.n	800f44a <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	681a      	ldr	r2, [r3, #0]
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f448:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	68db      	ldr	r3, [r3, #12]
 800f44e:	2b0f      	cmp	r3, #15
 800f450:	d948      	bls.n	800f4e4 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f452:	e040      	b.n	800f4d6 <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	695a      	ldr	r2, [r3, #20]
 800f45a:	f248 0308 	movw	r3, #32776	; 0x8008
 800f45e:	4013      	ands	r3, r2
 800f460:	2b00      	cmp	r3, #0
 800f462:	d014      	beq.n	800f48e <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	681a      	ldr	r2, [r3, #0]
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f46c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f46e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f474:	1d1a      	adds	r2, r3, #4
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f480:	b29b      	uxth	r3, r3
 800f482:	3b01      	subs	r3, #1
 800f484:	b29a      	uxth	r2, r3
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f48c:	e023      	b.n	800f4d6 <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f48e:	f7f4 fd0d 	bl	8003eac <HAL_GetTick>
 800f492:	4602      	mov	r2, r0
 800f494:	697b      	ldr	r3, [r7, #20]
 800f496:	1ad3      	subs	r3, r2, r3
 800f498:	683a      	ldr	r2, [r7, #0]
 800f49a:	429a      	cmp	r2, r3
 800f49c:	d803      	bhi.n	800f4a6 <HAL_SPI_Receive+0x182>
 800f49e:	683b      	ldr	r3, [r7, #0]
 800f4a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4a4:	d102      	bne.n	800f4ac <HAL_SPI_Receive+0x188>
 800f4a6:	683b      	ldr	r3, [r7, #0]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d114      	bne.n	800f4d6 <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f4ac:	68f8      	ldr	r0, [r7, #12]
 800f4ae:	f000 f8c9 	bl	800f644 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f4c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	2201      	movs	r2, #1
 800f4ce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f4d2:	2303      	movs	r3, #3
 800f4d4:	e0af      	b.n	800f636 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f4dc:	b29b      	uxth	r3, r3
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d1b8      	bne.n	800f454 <HAL_SPI_Receive+0x130>
 800f4e2:	e095      	b.n	800f610 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	68db      	ldr	r3, [r3, #12]
 800f4e8:	2b07      	cmp	r3, #7
 800f4ea:	f240 808b 	bls.w	800f604 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f4ee:	e03f      	b.n	800f570 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	695b      	ldr	r3, [r3, #20]
 800f4f6:	f003 0301 	and.w	r3, r3, #1
 800f4fa:	2b01      	cmp	r3, #1
 800f4fc:	d114      	bne.n	800f528 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f502:	69ba      	ldr	r2, [r7, #24]
 800f504:	8812      	ldrh	r2, [r2, #0]
 800f506:	b292      	uxth	r2, r2
 800f508:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f50e:	1c9a      	adds	r2, r3, #2
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f51a:	b29b      	uxth	r3, r3
 800f51c:	3b01      	subs	r3, #1
 800f51e:	b29a      	uxth	r2, r3
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f526:	e023      	b.n	800f570 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f528:	f7f4 fcc0 	bl	8003eac <HAL_GetTick>
 800f52c:	4602      	mov	r2, r0
 800f52e:	697b      	ldr	r3, [r7, #20]
 800f530:	1ad3      	subs	r3, r2, r3
 800f532:	683a      	ldr	r2, [r7, #0]
 800f534:	429a      	cmp	r2, r3
 800f536:	d803      	bhi.n	800f540 <HAL_SPI_Receive+0x21c>
 800f538:	683b      	ldr	r3, [r7, #0]
 800f53a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f53e:	d102      	bne.n	800f546 <HAL_SPI_Receive+0x222>
 800f540:	683b      	ldr	r3, [r7, #0]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d114      	bne.n	800f570 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f546:	68f8      	ldr	r0, [r7, #12]
 800f548:	f000 f87c 	bl	800f644 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	2200      	movs	r2, #0
 800f550:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f55a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	2201      	movs	r2, #1
 800f568:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f56c:	2303      	movs	r3, #3
 800f56e:	e062      	b.n	800f636 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f576:	b29b      	uxth	r3, r3
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d1b9      	bne.n	800f4f0 <HAL_SPI_Receive+0x1cc>
 800f57c:	e048      	b.n	800f610 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	695b      	ldr	r3, [r3, #20]
 800f584:	f003 0301 	and.w	r3, r3, #1
 800f588:	2b01      	cmp	r3, #1
 800f58a:	d117      	bne.n	800f5bc <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f598:	7812      	ldrb	r2, [r2, #0]
 800f59a:	b2d2      	uxtb	r2, r2
 800f59c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f5a2:	1c5a      	adds	r2, r3, #1
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f5ae:	b29b      	uxth	r3, r3
 800f5b0:	3b01      	subs	r3, #1
 800f5b2:	b29a      	uxth	r2, r3
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f5ba:	e023      	b.n	800f604 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f5bc:	f7f4 fc76 	bl	8003eac <HAL_GetTick>
 800f5c0:	4602      	mov	r2, r0
 800f5c2:	697b      	ldr	r3, [r7, #20]
 800f5c4:	1ad3      	subs	r3, r2, r3
 800f5c6:	683a      	ldr	r2, [r7, #0]
 800f5c8:	429a      	cmp	r2, r3
 800f5ca:	d803      	bhi.n	800f5d4 <HAL_SPI_Receive+0x2b0>
 800f5cc:	683b      	ldr	r3, [r7, #0]
 800f5ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5d2:	d102      	bne.n	800f5da <HAL_SPI_Receive+0x2b6>
 800f5d4:	683b      	ldr	r3, [r7, #0]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d114      	bne.n	800f604 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f5da:	68f8      	ldr	r0, [r7, #12]
 800f5dc:	f000 f832 	bl	800f644 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f5ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	2201      	movs	r2, #1
 800f5fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f600:	2303      	movs	r3, #3
 800f602:	e018      	b.n	800f636 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f60a:	b29b      	uxth	r3, r3
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d1b6      	bne.n	800f57e <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f610:	68f8      	ldr	r0, [r7, #12]
 800f612:	f000 f817 	bl	800f644 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	2200      	movs	r2, #0
 800f61a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	2201      	movs	r2, #1
 800f622:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d001      	beq.n	800f634 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800f630:	2301      	movs	r3, #1
 800f632:	e000      	b.n	800f636 <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800f634:	7ffb      	ldrb	r3, [r7, #31]
}
 800f636:	4618      	mov	r0, r3
 800f638:	3720      	adds	r7, #32
 800f63a:	46bd      	mov	sp, r7
 800f63c:	bd80      	pop	{r7, pc}
 800f63e:	bf00      	nop
 800f640:	ffff0000 	.word	0xffff0000

0800f644 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f644:	b480      	push	{r7}
 800f646:	b085      	sub	sp, #20
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	695b      	ldr	r3, [r3, #20]
 800f652:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	699a      	ldr	r2, [r3, #24]
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	f042 0208 	orr.w	r2, r2, #8
 800f662:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	699a      	ldr	r2, [r3, #24]
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	f042 0210 	orr.w	r2, r2, #16
 800f672:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	681a      	ldr	r2, [r3, #0]
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	f022 0201 	bic.w	r2, r2, #1
 800f682:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	6919      	ldr	r1, [r3, #16]
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	681a      	ldr	r2, [r3, #0]
 800f68e:	4b3c      	ldr	r3, [pc, #240]	; (800f780 <SPI_CloseTransfer+0x13c>)
 800f690:	400b      	ands	r3, r1
 800f692:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	689a      	ldr	r2, [r3, #8]
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f6a2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f6aa:	b2db      	uxtb	r3, r3
 800f6ac:	2b04      	cmp	r3, #4
 800f6ae:	d014      	beq.n	800f6da <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	f003 0320 	and.w	r3, r3, #32
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d00f      	beq.n	800f6da <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f6c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	699a      	ldr	r2, [r3, #24]
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	f042 0220 	orr.w	r2, r2, #32
 800f6d8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f6e0:	b2db      	uxtb	r3, r3
 800f6e2:	2b03      	cmp	r3, #3
 800f6e4:	d014      	beq.n	800f710 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d00f      	beq.n	800f710 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f6f6:	f043 0204 	orr.w	r2, r3, #4
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	699a      	ldr	r2, [r3, #24]
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f70e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f716:	2b00      	cmp	r3, #0
 800f718:	d00f      	beq.n	800f73a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f720:	f043 0201 	orr.w	r2, r3, #1
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	699a      	ldr	r2, [r3, #24]
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f738:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f740:	2b00      	cmp	r3, #0
 800f742:	d00f      	beq.n	800f764 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f74a:	f043 0208 	orr.w	r2, r3, #8
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	699a      	ldr	r2, [r3, #24]
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f762:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	2200      	movs	r2, #0
 800f768:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	2200      	movs	r2, #0
 800f770:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800f774:	bf00      	nop
 800f776:	3714      	adds	r7, #20
 800f778:	46bd      	mov	sp, r7
 800f77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77e:	4770      	bx	lr
 800f780:	fffffc90 	.word	0xfffffc90

0800f784 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800f784:	b580      	push	{r7, lr}
 800f786:	b084      	sub	sp, #16
 800f788:	af00      	add	r7, sp, #0
 800f78a:	60f8      	str	r0, [r7, #12]
 800f78c:	60b9      	str	r1, [r7, #8]
 800f78e:	603b      	str	r3, [r7, #0]
 800f790:	4613      	mov	r3, r2
 800f792:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f794:	e010      	b.n	800f7b8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f796:	f7f4 fb89 	bl	8003eac <HAL_GetTick>
 800f79a:	4602      	mov	r2, r0
 800f79c:	69bb      	ldr	r3, [r7, #24]
 800f79e:	1ad3      	subs	r3, r2, r3
 800f7a0:	683a      	ldr	r2, [r7, #0]
 800f7a2:	429a      	cmp	r2, r3
 800f7a4:	d803      	bhi.n	800f7ae <SPI_WaitOnFlagUntilTimeout+0x2a>
 800f7a6:	683b      	ldr	r3, [r7, #0]
 800f7a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7ac:	d102      	bne.n	800f7b4 <SPI_WaitOnFlagUntilTimeout+0x30>
 800f7ae:	683b      	ldr	r3, [r7, #0]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d101      	bne.n	800f7b8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800f7b4:	2303      	movs	r3, #3
 800f7b6:	e00f      	b.n	800f7d8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	695a      	ldr	r2, [r3, #20]
 800f7be:	68bb      	ldr	r3, [r7, #8]
 800f7c0:	4013      	ands	r3, r2
 800f7c2:	68ba      	ldr	r2, [r7, #8]
 800f7c4:	429a      	cmp	r2, r3
 800f7c6:	bf0c      	ite	eq
 800f7c8:	2301      	moveq	r3, #1
 800f7ca:	2300      	movne	r3, #0
 800f7cc:	b2db      	uxtb	r3, r3
 800f7ce:	461a      	mov	r2, r3
 800f7d0:	79fb      	ldrb	r3, [r7, #7]
 800f7d2:	429a      	cmp	r2, r3
 800f7d4:	d0df      	beq.n	800f796 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800f7d6:	2300      	movs	r3, #0
}
 800f7d8:	4618      	mov	r0, r3
 800f7da:	3710      	adds	r7, #16
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	bd80      	pop	{r7, pc}

0800f7e0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800f7e0:	b480      	push	{r7}
 800f7e2:	b085      	sub	sp, #20
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f7ec:	095b      	lsrs	r3, r3, #5
 800f7ee:	3301      	adds	r3, #1
 800f7f0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	68db      	ldr	r3, [r3, #12]
 800f7f6:	3301      	adds	r3, #1
 800f7f8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f7fa:	68bb      	ldr	r3, [r7, #8]
 800f7fc:	3307      	adds	r3, #7
 800f7fe:	08db      	lsrs	r3, r3, #3
 800f800:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f802:	68bb      	ldr	r3, [r7, #8]
 800f804:	68fa      	ldr	r2, [r7, #12]
 800f806:	fb02 f303 	mul.w	r3, r2, r3
}
 800f80a:	4618      	mov	r0, r3
 800f80c:	3714      	adds	r7, #20
 800f80e:	46bd      	mov	sp, r7
 800f810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f814:	4770      	bx	lr

0800f816 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f816:	b580      	push	{r7, lr}
 800f818:	b082      	sub	sp, #8
 800f81a:	af00      	add	r7, sp, #0
 800f81c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d101      	bne.n	800f828 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f824:	2301      	movs	r3, #1
 800f826:	e049      	b.n	800f8bc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f82e:	b2db      	uxtb	r3, r3
 800f830:	2b00      	cmp	r3, #0
 800f832:	d106      	bne.n	800f842 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	2200      	movs	r2, #0
 800f838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f83c:	6878      	ldr	r0, [r7, #4]
 800f83e:	f7f3 fda5 	bl	800338c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	2202      	movs	r2, #2
 800f846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	681a      	ldr	r2, [r3, #0]
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	3304      	adds	r3, #4
 800f852:	4619      	mov	r1, r3
 800f854:	4610      	mov	r0, r2
 800f856:	f000 fed1 	bl	80105fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	2201      	movs	r2, #1
 800f85e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	2201      	movs	r2, #1
 800f866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	2201      	movs	r2, #1
 800f86e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	2201      	movs	r2, #1
 800f876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	2201      	movs	r2, #1
 800f87e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	2201      	movs	r2, #1
 800f886:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	2201      	movs	r2, #1
 800f88e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	2201      	movs	r2, #1
 800f896:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	2201      	movs	r2, #1
 800f89e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	2201      	movs	r2, #1
 800f8a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	2201      	movs	r2, #1
 800f8ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	2201      	movs	r2, #1
 800f8b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f8ba:	2300      	movs	r3, #0
}
 800f8bc:	4618      	mov	r0, r3
 800f8be:	3708      	adds	r7, #8
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	bd80      	pop	{r7, pc}

0800f8c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b084      	sub	sp, #16
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
 800f8cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f8ce:	683b      	ldr	r3, [r7, #0]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d109      	bne.n	800f8e8 <HAL_TIM_PWM_Start+0x24>
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f8da:	b2db      	uxtb	r3, r3
 800f8dc:	2b01      	cmp	r3, #1
 800f8de:	bf14      	ite	ne
 800f8e0:	2301      	movne	r3, #1
 800f8e2:	2300      	moveq	r3, #0
 800f8e4:	b2db      	uxtb	r3, r3
 800f8e6:	e03c      	b.n	800f962 <HAL_TIM_PWM_Start+0x9e>
 800f8e8:	683b      	ldr	r3, [r7, #0]
 800f8ea:	2b04      	cmp	r3, #4
 800f8ec:	d109      	bne.n	800f902 <HAL_TIM_PWM_Start+0x3e>
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f8f4:	b2db      	uxtb	r3, r3
 800f8f6:	2b01      	cmp	r3, #1
 800f8f8:	bf14      	ite	ne
 800f8fa:	2301      	movne	r3, #1
 800f8fc:	2300      	moveq	r3, #0
 800f8fe:	b2db      	uxtb	r3, r3
 800f900:	e02f      	b.n	800f962 <HAL_TIM_PWM_Start+0x9e>
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	2b08      	cmp	r3, #8
 800f906:	d109      	bne.n	800f91c <HAL_TIM_PWM_Start+0x58>
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f90e:	b2db      	uxtb	r3, r3
 800f910:	2b01      	cmp	r3, #1
 800f912:	bf14      	ite	ne
 800f914:	2301      	movne	r3, #1
 800f916:	2300      	moveq	r3, #0
 800f918:	b2db      	uxtb	r3, r3
 800f91a:	e022      	b.n	800f962 <HAL_TIM_PWM_Start+0x9e>
 800f91c:	683b      	ldr	r3, [r7, #0]
 800f91e:	2b0c      	cmp	r3, #12
 800f920:	d109      	bne.n	800f936 <HAL_TIM_PWM_Start+0x72>
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f928:	b2db      	uxtb	r3, r3
 800f92a:	2b01      	cmp	r3, #1
 800f92c:	bf14      	ite	ne
 800f92e:	2301      	movne	r3, #1
 800f930:	2300      	moveq	r3, #0
 800f932:	b2db      	uxtb	r3, r3
 800f934:	e015      	b.n	800f962 <HAL_TIM_PWM_Start+0x9e>
 800f936:	683b      	ldr	r3, [r7, #0]
 800f938:	2b10      	cmp	r3, #16
 800f93a:	d109      	bne.n	800f950 <HAL_TIM_PWM_Start+0x8c>
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f942:	b2db      	uxtb	r3, r3
 800f944:	2b01      	cmp	r3, #1
 800f946:	bf14      	ite	ne
 800f948:	2301      	movne	r3, #1
 800f94a:	2300      	moveq	r3, #0
 800f94c:	b2db      	uxtb	r3, r3
 800f94e:	e008      	b.n	800f962 <HAL_TIM_PWM_Start+0x9e>
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f956:	b2db      	uxtb	r3, r3
 800f958:	2b01      	cmp	r3, #1
 800f95a:	bf14      	ite	ne
 800f95c:	2301      	movne	r3, #1
 800f95e:	2300      	moveq	r3, #0
 800f960:	b2db      	uxtb	r3, r3
 800f962:	2b00      	cmp	r3, #0
 800f964:	d001      	beq.n	800f96a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800f966:	2301      	movs	r3, #1
 800f968:	e0ab      	b.n	800fac2 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f96a:	683b      	ldr	r3, [r7, #0]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d104      	bne.n	800f97a <HAL_TIM_PWM_Start+0xb6>
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	2202      	movs	r2, #2
 800f974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f978:	e023      	b.n	800f9c2 <HAL_TIM_PWM_Start+0xfe>
 800f97a:	683b      	ldr	r3, [r7, #0]
 800f97c:	2b04      	cmp	r3, #4
 800f97e:	d104      	bne.n	800f98a <HAL_TIM_PWM_Start+0xc6>
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	2202      	movs	r2, #2
 800f984:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f988:	e01b      	b.n	800f9c2 <HAL_TIM_PWM_Start+0xfe>
 800f98a:	683b      	ldr	r3, [r7, #0]
 800f98c:	2b08      	cmp	r3, #8
 800f98e:	d104      	bne.n	800f99a <HAL_TIM_PWM_Start+0xd6>
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	2202      	movs	r2, #2
 800f994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f998:	e013      	b.n	800f9c2 <HAL_TIM_PWM_Start+0xfe>
 800f99a:	683b      	ldr	r3, [r7, #0]
 800f99c:	2b0c      	cmp	r3, #12
 800f99e:	d104      	bne.n	800f9aa <HAL_TIM_PWM_Start+0xe6>
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	2202      	movs	r2, #2
 800f9a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f9a8:	e00b      	b.n	800f9c2 <HAL_TIM_PWM_Start+0xfe>
 800f9aa:	683b      	ldr	r3, [r7, #0]
 800f9ac:	2b10      	cmp	r3, #16
 800f9ae:	d104      	bne.n	800f9ba <HAL_TIM_PWM_Start+0xf6>
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	2202      	movs	r2, #2
 800f9b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f9b8:	e003      	b.n	800f9c2 <HAL_TIM_PWM_Start+0xfe>
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	2202      	movs	r2, #2
 800f9be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	2201      	movs	r2, #1
 800f9c8:	6839      	ldr	r1, [r7, #0]
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	f001 f992 	bl	8010cf4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	4a3d      	ldr	r2, [pc, #244]	; (800facc <HAL_TIM_PWM_Start+0x208>)
 800f9d6:	4293      	cmp	r3, r2
 800f9d8:	d013      	beq.n	800fa02 <HAL_TIM_PWM_Start+0x13e>
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	4a3c      	ldr	r2, [pc, #240]	; (800fad0 <HAL_TIM_PWM_Start+0x20c>)
 800f9e0:	4293      	cmp	r3, r2
 800f9e2:	d00e      	beq.n	800fa02 <HAL_TIM_PWM_Start+0x13e>
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	4a3a      	ldr	r2, [pc, #232]	; (800fad4 <HAL_TIM_PWM_Start+0x210>)
 800f9ea:	4293      	cmp	r3, r2
 800f9ec:	d009      	beq.n	800fa02 <HAL_TIM_PWM_Start+0x13e>
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	4a39      	ldr	r2, [pc, #228]	; (800fad8 <HAL_TIM_PWM_Start+0x214>)
 800f9f4:	4293      	cmp	r3, r2
 800f9f6:	d004      	beq.n	800fa02 <HAL_TIM_PWM_Start+0x13e>
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	4a37      	ldr	r2, [pc, #220]	; (800fadc <HAL_TIM_PWM_Start+0x218>)
 800f9fe:	4293      	cmp	r3, r2
 800fa00:	d101      	bne.n	800fa06 <HAL_TIM_PWM_Start+0x142>
 800fa02:	2301      	movs	r3, #1
 800fa04:	e000      	b.n	800fa08 <HAL_TIM_PWM_Start+0x144>
 800fa06:	2300      	movs	r3, #0
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d007      	beq.n	800fa1c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fa1a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	4a2a      	ldr	r2, [pc, #168]	; (800facc <HAL_TIM_PWM_Start+0x208>)
 800fa22:	4293      	cmp	r3, r2
 800fa24:	d02c      	beq.n	800fa80 <HAL_TIM_PWM_Start+0x1bc>
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fa2e:	d027      	beq.n	800fa80 <HAL_TIM_PWM_Start+0x1bc>
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	4a2a      	ldr	r2, [pc, #168]	; (800fae0 <HAL_TIM_PWM_Start+0x21c>)
 800fa36:	4293      	cmp	r3, r2
 800fa38:	d022      	beq.n	800fa80 <HAL_TIM_PWM_Start+0x1bc>
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	4a29      	ldr	r2, [pc, #164]	; (800fae4 <HAL_TIM_PWM_Start+0x220>)
 800fa40:	4293      	cmp	r3, r2
 800fa42:	d01d      	beq.n	800fa80 <HAL_TIM_PWM_Start+0x1bc>
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	4a27      	ldr	r2, [pc, #156]	; (800fae8 <HAL_TIM_PWM_Start+0x224>)
 800fa4a:	4293      	cmp	r3, r2
 800fa4c:	d018      	beq.n	800fa80 <HAL_TIM_PWM_Start+0x1bc>
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	4a1f      	ldr	r2, [pc, #124]	; (800fad0 <HAL_TIM_PWM_Start+0x20c>)
 800fa54:	4293      	cmp	r3, r2
 800fa56:	d013      	beq.n	800fa80 <HAL_TIM_PWM_Start+0x1bc>
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	4a23      	ldr	r2, [pc, #140]	; (800faec <HAL_TIM_PWM_Start+0x228>)
 800fa5e:	4293      	cmp	r3, r2
 800fa60:	d00e      	beq.n	800fa80 <HAL_TIM_PWM_Start+0x1bc>
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	4a1b      	ldr	r2, [pc, #108]	; (800fad4 <HAL_TIM_PWM_Start+0x210>)
 800fa68:	4293      	cmp	r3, r2
 800fa6a:	d009      	beq.n	800fa80 <HAL_TIM_PWM_Start+0x1bc>
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	4a1f      	ldr	r2, [pc, #124]	; (800faf0 <HAL_TIM_PWM_Start+0x22c>)
 800fa72:	4293      	cmp	r3, r2
 800fa74:	d004      	beq.n	800fa80 <HAL_TIM_PWM_Start+0x1bc>
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	4a1e      	ldr	r2, [pc, #120]	; (800faf4 <HAL_TIM_PWM_Start+0x230>)
 800fa7c:	4293      	cmp	r3, r2
 800fa7e:	d115      	bne.n	800faac <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	689a      	ldr	r2, [r3, #8]
 800fa86:	4b1c      	ldr	r3, [pc, #112]	; (800faf8 <HAL_TIM_PWM_Start+0x234>)
 800fa88:	4013      	ands	r3, r2
 800fa8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	2b06      	cmp	r3, #6
 800fa90:	d015      	beq.n	800fabe <HAL_TIM_PWM_Start+0x1fa>
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fa98:	d011      	beq.n	800fabe <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	681a      	ldr	r2, [r3, #0]
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	f042 0201 	orr.w	r2, r2, #1
 800faa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800faaa:	e008      	b.n	800fabe <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	681a      	ldr	r2, [r3, #0]
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	f042 0201 	orr.w	r2, r2, #1
 800faba:	601a      	str	r2, [r3, #0]
 800fabc:	e000      	b.n	800fac0 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fabe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fac0:	2300      	movs	r3, #0
}
 800fac2:	4618      	mov	r0, r3
 800fac4:	3710      	adds	r7, #16
 800fac6:	46bd      	mov	sp, r7
 800fac8:	bd80      	pop	{r7, pc}
 800faca:	bf00      	nop
 800facc:	40010000 	.word	0x40010000
 800fad0:	40010400 	.word	0x40010400
 800fad4:	40014000 	.word	0x40014000
 800fad8:	40014400 	.word	0x40014400
 800fadc:	40014800 	.word	0x40014800
 800fae0:	40000400 	.word	0x40000400
 800fae4:	40000800 	.word	0x40000800
 800fae8:	40000c00 	.word	0x40000c00
 800faec:	40001800 	.word	0x40001800
 800faf0:	4000e000 	.word	0x4000e000
 800faf4:	4000e400 	.word	0x4000e400
 800faf8:	00010007 	.word	0x00010007

0800fafc <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b086      	sub	sp, #24
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	60f8      	str	r0, [r7, #12]
 800fb04:	60b9      	str	r1, [r7, #8]
 800fb06:	607a      	str	r2, [r7, #4]
 800fb08:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800fb0e:	68bb      	ldr	r3, [r7, #8]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d109      	bne.n	800fb28 <HAL_TIM_PWM_Start_DMA+0x2c>
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fb1a:	b2db      	uxtb	r3, r3
 800fb1c:	2b02      	cmp	r3, #2
 800fb1e:	bf0c      	ite	eq
 800fb20:	2301      	moveq	r3, #1
 800fb22:	2300      	movne	r3, #0
 800fb24:	b2db      	uxtb	r3, r3
 800fb26:	e03c      	b.n	800fba2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800fb28:	68bb      	ldr	r3, [r7, #8]
 800fb2a:	2b04      	cmp	r3, #4
 800fb2c:	d109      	bne.n	800fb42 <HAL_TIM_PWM_Start_DMA+0x46>
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800fb34:	b2db      	uxtb	r3, r3
 800fb36:	2b02      	cmp	r3, #2
 800fb38:	bf0c      	ite	eq
 800fb3a:	2301      	moveq	r3, #1
 800fb3c:	2300      	movne	r3, #0
 800fb3e:	b2db      	uxtb	r3, r3
 800fb40:	e02f      	b.n	800fba2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800fb42:	68bb      	ldr	r3, [r7, #8]
 800fb44:	2b08      	cmp	r3, #8
 800fb46:	d109      	bne.n	800fb5c <HAL_TIM_PWM_Start_DMA+0x60>
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fb4e:	b2db      	uxtb	r3, r3
 800fb50:	2b02      	cmp	r3, #2
 800fb52:	bf0c      	ite	eq
 800fb54:	2301      	moveq	r3, #1
 800fb56:	2300      	movne	r3, #0
 800fb58:	b2db      	uxtb	r3, r3
 800fb5a:	e022      	b.n	800fba2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800fb5c:	68bb      	ldr	r3, [r7, #8]
 800fb5e:	2b0c      	cmp	r3, #12
 800fb60:	d109      	bne.n	800fb76 <HAL_TIM_PWM_Start_DMA+0x7a>
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fb68:	b2db      	uxtb	r3, r3
 800fb6a:	2b02      	cmp	r3, #2
 800fb6c:	bf0c      	ite	eq
 800fb6e:	2301      	moveq	r3, #1
 800fb70:	2300      	movne	r3, #0
 800fb72:	b2db      	uxtb	r3, r3
 800fb74:	e015      	b.n	800fba2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800fb76:	68bb      	ldr	r3, [r7, #8]
 800fb78:	2b10      	cmp	r3, #16
 800fb7a:	d109      	bne.n	800fb90 <HAL_TIM_PWM_Start_DMA+0x94>
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fb82:	b2db      	uxtb	r3, r3
 800fb84:	2b02      	cmp	r3, #2
 800fb86:	bf0c      	ite	eq
 800fb88:	2301      	moveq	r3, #1
 800fb8a:	2300      	movne	r3, #0
 800fb8c:	b2db      	uxtb	r3, r3
 800fb8e:	e008      	b.n	800fba2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fb96:	b2db      	uxtb	r3, r3
 800fb98:	2b02      	cmp	r3, #2
 800fb9a:	bf0c      	ite	eq
 800fb9c:	2301      	moveq	r3, #1
 800fb9e:	2300      	movne	r3, #0
 800fba0:	b2db      	uxtb	r3, r3
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d001      	beq.n	800fbaa <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800fba6:	2302      	movs	r3, #2
 800fba8:	e1ba      	b.n	800ff20 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800fbaa:	68bb      	ldr	r3, [r7, #8]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d109      	bne.n	800fbc4 <HAL_TIM_PWM_Start_DMA+0xc8>
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fbb6:	b2db      	uxtb	r3, r3
 800fbb8:	2b01      	cmp	r3, #1
 800fbba:	bf0c      	ite	eq
 800fbbc:	2301      	moveq	r3, #1
 800fbbe:	2300      	movne	r3, #0
 800fbc0:	b2db      	uxtb	r3, r3
 800fbc2:	e03c      	b.n	800fc3e <HAL_TIM_PWM_Start_DMA+0x142>
 800fbc4:	68bb      	ldr	r3, [r7, #8]
 800fbc6:	2b04      	cmp	r3, #4
 800fbc8:	d109      	bne.n	800fbde <HAL_TIM_PWM_Start_DMA+0xe2>
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800fbd0:	b2db      	uxtb	r3, r3
 800fbd2:	2b01      	cmp	r3, #1
 800fbd4:	bf0c      	ite	eq
 800fbd6:	2301      	moveq	r3, #1
 800fbd8:	2300      	movne	r3, #0
 800fbda:	b2db      	uxtb	r3, r3
 800fbdc:	e02f      	b.n	800fc3e <HAL_TIM_PWM_Start_DMA+0x142>
 800fbde:	68bb      	ldr	r3, [r7, #8]
 800fbe0:	2b08      	cmp	r3, #8
 800fbe2:	d109      	bne.n	800fbf8 <HAL_TIM_PWM_Start_DMA+0xfc>
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fbea:	b2db      	uxtb	r3, r3
 800fbec:	2b01      	cmp	r3, #1
 800fbee:	bf0c      	ite	eq
 800fbf0:	2301      	moveq	r3, #1
 800fbf2:	2300      	movne	r3, #0
 800fbf4:	b2db      	uxtb	r3, r3
 800fbf6:	e022      	b.n	800fc3e <HAL_TIM_PWM_Start_DMA+0x142>
 800fbf8:	68bb      	ldr	r3, [r7, #8]
 800fbfa:	2b0c      	cmp	r3, #12
 800fbfc:	d109      	bne.n	800fc12 <HAL_TIM_PWM_Start_DMA+0x116>
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fc04:	b2db      	uxtb	r3, r3
 800fc06:	2b01      	cmp	r3, #1
 800fc08:	bf0c      	ite	eq
 800fc0a:	2301      	moveq	r3, #1
 800fc0c:	2300      	movne	r3, #0
 800fc0e:	b2db      	uxtb	r3, r3
 800fc10:	e015      	b.n	800fc3e <HAL_TIM_PWM_Start_DMA+0x142>
 800fc12:	68bb      	ldr	r3, [r7, #8]
 800fc14:	2b10      	cmp	r3, #16
 800fc16:	d109      	bne.n	800fc2c <HAL_TIM_PWM_Start_DMA+0x130>
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fc1e:	b2db      	uxtb	r3, r3
 800fc20:	2b01      	cmp	r3, #1
 800fc22:	bf0c      	ite	eq
 800fc24:	2301      	moveq	r3, #1
 800fc26:	2300      	movne	r3, #0
 800fc28:	b2db      	uxtb	r3, r3
 800fc2a:	e008      	b.n	800fc3e <HAL_TIM_PWM_Start_DMA+0x142>
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fc32:	b2db      	uxtb	r3, r3
 800fc34:	2b01      	cmp	r3, #1
 800fc36:	bf0c      	ite	eq
 800fc38:	2301      	moveq	r3, #1
 800fc3a:	2300      	movne	r3, #0
 800fc3c:	b2db      	uxtb	r3, r3
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d034      	beq.n	800fcac <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d002      	beq.n	800fc4e <HAL_TIM_PWM_Start_DMA+0x152>
 800fc48:	887b      	ldrh	r3, [r7, #2]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d101      	bne.n	800fc52 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800fc4e:	2301      	movs	r3, #1
 800fc50:	e166      	b.n	800ff20 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fc52:	68bb      	ldr	r3, [r7, #8]
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d104      	bne.n	800fc62 <HAL_TIM_PWM_Start_DMA+0x166>
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	2202      	movs	r2, #2
 800fc5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fc60:	e026      	b.n	800fcb0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800fc62:	68bb      	ldr	r3, [r7, #8]
 800fc64:	2b04      	cmp	r3, #4
 800fc66:	d104      	bne.n	800fc72 <HAL_TIM_PWM_Start_DMA+0x176>
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	2202      	movs	r2, #2
 800fc6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fc70:	e01e      	b.n	800fcb0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800fc72:	68bb      	ldr	r3, [r7, #8]
 800fc74:	2b08      	cmp	r3, #8
 800fc76:	d104      	bne.n	800fc82 <HAL_TIM_PWM_Start_DMA+0x186>
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	2202      	movs	r2, #2
 800fc7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fc80:	e016      	b.n	800fcb0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800fc82:	68bb      	ldr	r3, [r7, #8]
 800fc84:	2b0c      	cmp	r3, #12
 800fc86:	d104      	bne.n	800fc92 <HAL_TIM_PWM_Start_DMA+0x196>
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	2202      	movs	r2, #2
 800fc8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fc90:	e00e      	b.n	800fcb0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800fc92:	68bb      	ldr	r3, [r7, #8]
 800fc94:	2b10      	cmp	r3, #16
 800fc96:	d104      	bne.n	800fca2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	2202      	movs	r2, #2
 800fc9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fca0:	e006      	b.n	800fcb0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	2202      	movs	r2, #2
 800fca6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fcaa:	e001      	b.n	800fcb0 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800fcac:	2301      	movs	r3, #1
 800fcae:	e137      	b.n	800ff20 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800fcb0:	68bb      	ldr	r3, [r7, #8]
 800fcb2:	2b0c      	cmp	r3, #12
 800fcb4:	f200 80ae 	bhi.w	800fe14 <HAL_TIM_PWM_Start_DMA+0x318>
 800fcb8:	a201      	add	r2, pc, #4	; (adr r2, 800fcc0 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800fcba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcbe:	bf00      	nop
 800fcc0:	0800fcf5 	.word	0x0800fcf5
 800fcc4:	0800fe15 	.word	0x0800fe15
 800fcc8:	0800fe15 	.word	0x0800fe15
 800fccc:	0800fe15 	.word	0x0800fe15
 800fcd0:	0800fd3d 	.word	0x0800fd3d
 800fcd4:	0800fe15 	.word	0x0800fe15
 800fcd8:	0800fe15 	.word	0x0800fe15
 800fcdc:	0800fe15 	.word	0x0800fe15
 800fce0:	0800fd85 	.word	0x0800fd85
 800fce4:	0800fe15 	.word	0x0800fe15
 800fce8:	0800fe15 	.word	0x0800fe15
 800fcec:	0800fe15 	.word	0x0800fe15
 800fcf0:	0800fdcd 	.word	0x0800fdcd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcf8:	4a8b      	ldr	r2, [pc, #556]	; (800ff28 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800fcfa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd00:	4a8a      	ldr	r2, [pc, #552]	; (800ff2c <HAL_TIM_PWM_Start_DMA+0x430>)
 800fd02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd08:	4a89      	ldr	r2, [pc, #548]	; (800ff30 <HAL_TIM_PWM_Start_DMA+0x434>)
 800fd0a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800fd10:	6879      	ldr	r1, [r7, #4]
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	3334      	adds	r3, #52	; 0x34
 800fd18:	461a      	mov	r2, r3
 800fd1a:	887b      	ldrh	r3, [r7, #2]
 800fd1c:	f7f6 f8e4 	bl	8005ee8 <HAL_DMA_Start_IT>
 800fd20:	4603      	mov	r3, r0
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d001      	beq.n	800fd2a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800fd26:	2301      	movs	r3, #1
 800fd28:	e0fa      	b.n	800ff20 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	68da      	ldr	r2, [r3, #12]
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fd38:	60da      	str	r2, [r3, #12]
      break;
 800fd3a:	e06e      	b.n	800fe1a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd40:	4a79      	ldr	r2, [pc, #484]	; (800ff28 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800fd42:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd48:	4a78      	ldr	r2, [pc, #480]	; (800ff2c <HAL_TIM_PWM_Start_DMA+0x430>)
 800fd4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd50:	4a77      	ldr	r2, [pc, #476]	; (800ff30 <HAL_TIM_PWM_Start_DMA+0x434>)
 800fd52:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800fd58:	6879      	ldr	r1, [r7, #4]
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	3338      	adds	r3, #56	; 0x38
 800fd60:	461a      	mov	r2, r3
 800fd62:	887b      	ldrh	r3, [r7, #2]
 800fd64:	f7f6 f8c0 	bl	8005ee8 <HAL_DMA_Start_IT>
 800fd68:	4603      	mov	r3, r0
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d001      	beq.n	800fd72 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800fd6e:	2301      	movs	r3, #1
 800fd70:	e0d6      	b.n	800ff20 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	68da      	ldr	r2, [r3, #12]
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fd80:	60da      	str	r2, [r3, #12]
      break;
 800fd82:	e04a      	b.n	800fe1a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd88:	4a67      	ldr	r2, [pc, #412]	; (800ff28 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800fd8a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd90:	4a66      	ldr	r2, [pc, #408]	; (800ff2c <HAL_TIM_PWM_Start_DMA+0x430>)
 800fd92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd98:	4a65      	ldr	r2, [pc, #404]	; (800ff30 <HAL_TIM_PWM_Start_DMA+0x434>)
 800fd9a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800fda0:	6879      	ldr	r1, [r7, #4]
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	333c      	adds	r3, #60	; 0x3c
 800fda8:	461a      	mov	r2, r3
 800fdaa:	887b      	ldrh	r3, [r7, #2]
 800fdac:	f7f6 f89c 	bl	8005ee8 <HAL_DMA_Start_IT>
 800fdb0:	4603      	mov	r3, r0
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d001      	beq.n	800fdba <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800fdb6:	2301      	movs	r3, #1
 800fdb8:	e0b2      	b.n	800ff20 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	68da      	ldr	r2, [r3, #12]
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fdc8:	60da      	str	r2, [r3, #12]
      break;
 800fdca:	e026      	b.n	800fe1a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdd0:	4a55      	ldr	r2, [pc, #340]	; (800ff28 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800fdd2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdd8:	4a54      	ldr	r2, [pc, #336]	; (800ff2c <HAL_TIM_PWM_Start_DMA+0x430>)
 800fdda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fde0:	4a53      	ldr	r2, [pc, #332]	; (800ff30 <HAL_TIM_PWM_Start_DMA+0x434>)
 800fde2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fde8:	6879      	ldr	r1, [r7, #4]
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	3340      	adds	r3, #64	; 0x40
 800fdf0:	461a      	mov	r2, r3
 800fdf2:	887b      	ldrh	r3, [r7, #2]
 800fdf4:	f7f6 f878 	bl	8005ee8 <HAL_DMA_Start_IT>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d001      	beq.n	800fe02 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800fdfe:	2301      	movs	r3, #1
 800fe00:	e08e      	b.n	800ff20 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	68da      	ldr	r2, [r3, #12]
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fe10:	60da      	str	r2, [r3, #12]
      break;
 800fe12:	e002      	b.n	800fe1a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800fe14:	2301      	movs	r3, #1
 800fe16:	75fb      	strb	r3, [r7, #23]
      break;
 800fe18:	bf00      	nop
  }

  if (status == HAL_OK)
 800fe1a:	7dfb      	ldrb	r3, [r7, #23]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d17e      	bne.n	800ff1e <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	2201      	movs	r2, #1
 800fe26:	68b9      	ldr	r1, [r7, #8]
 800fe28:	4618      	mov	r0, r3
 800fe2a:	f000 ff63 	bl	8010cf4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	4a40      	ldr	r2, [pc, #256]	; (800ff34 <HAL_TIM_PWM_Start_DMA+0x438>)
 800fe34:	4293      	cmp	r3, r2
 800fe36:	d013      	beq.n	800fe60 <HAL_TIM_PWM_Start_DMA+0x364>
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	4a3e      	ldr	r2, [pc, #248]	; (800ff38 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800fe3e:	4293      	cmp	r3, r2
 800fe40:	d00e      	beq.n	800fe60 <HAL_TIM_PWM_Start_DMA+0x364>
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	4a3d      	ldr	r2, [pc, #244]	; (800ff3c <HAL_TIM_PWM_Start_DMA+0x440>)
 800fe48:	4293      	cmp	r3, r2
 800fe4a:	d009      	beq.n	800fe60 <HAL_TIM_PWM_Start_DMA+0x364>
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	4a3b      	ldr	r2, [pc, #236]	; (800ff40 <HAL_TIM_PWM_Start_DMA+0x444>)
 800fe52:	4293      	cmp	r3, r2
 800fe54:	d004      	beq.n	800fe60 <HAL_TIM_PWM_Start_DMA+0x364>
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	4a3a      	ldr	r2, [pc, #232]	; (800ff44 <HAL_TIM_PWM_Start_DMA+0x448>)
 800fe5c:	4293      	cmp	r3, r2
 800fe5e:	d101      	bne.n	800fe64 <HAL_TIM_PWM_Start_DMA+0x368>
 800fe60:	2301      	movs	r3, #1
 800fe62:	e000      	b.n	800fe66 <HAL_TIM_PWM_Start_DMA+0x36a>
 800fe64:	2300      	movs	r3, #0
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d007      	beq.n	800fe7a <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fe78:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	4a2d      	ldr	r2, [pc, #180]	; (800ff34 <HAL_TIM_PWM_Start_DMA+0x438>)
 800fe80:	4293      	cmp	r3, r2
 800fe82:	d02c      	beq.n	800fede <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fe8c:	d027      	beq.n	800fede <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	4a2d      	ldr	r2, [pc, #180]	; (800ff48 <HAL_TIM_PWM_Start_DMA+0x44c>)
 800fe94:	4293      	cmp	r3, r2
 800fe96:	d022      	beq.n	800fede <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	4a2b      	ldr	r2, [pc, #172]	; (800ff4c <HAL_TIM_PWM_Start_DMA+0x450>)
 800fe9e:	4293      	cmp	r3, r2
 800fea0:	d01d      	beq.n	800fede <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	4a2a      	ldr	r2, [pc, #168]	; (800ff50 <HAL_TIM_PWM_Start_DMA+0x454>)
 800fea8:	4293      	cmp	r3, r2
 800feaa:	d018      	beq.n	800fede <HAL_TIM_PWM_Start_DMA+0x3e2>
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	4a21      	ldr	r2, [pc, #132]	; (800ff38 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800feb2:	4293      	cmp	r3, r2
 800feb4:	d013      	beq.n	800fede <HAL_TIM_PWM_Start_DMA+0x3e2>
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	4a26      	ldr	r2, [pc, #152]	; (800ff54 <HAL_TIM_PWM_Start_DMA+0x458>)
 800febc:	4293      	cmp	r3, r2
 800febe:	d00e      	beq.n	800fede <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	4a1d      	ldr	r2, [pc, #116]	; (800ff3c <HAL_TIM_PWM_Start_DMA+0x440>)
 800fec6:	4293      	cmp	r3, r2
 800fec8:	d009      	beq.n	800fede <HAL_TIM_PWM_Start_DMA+0x3e2>
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	4a22      	ldr	r2, [pc, #136]	; (800ff58 <HAL_TIM_PWM_Start_DMA+0x45c>)
 800fed0:	4293      	cmp	r3, r2
 800fed2:	d004      	beq.n	800fede <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	4a20      	ldr	r2, [pc, #128]	; (800ff5c <HAL_TIM_PWM_Start_DMA+0x460>)
 800feda:	4293      	cmp	r3, r2
 800fedc:	d115      	bne.n	800ff0a <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	689a      	ldr	r2, [r3, #8]
 800fee4:	4b1e      	ldr	r3, [pc, #120]	; (800ff60 <HAL_TIM_PWM_Start_DMA+0x464>)
 800fee6:	4013      	ands	r3, r2
 800fee8:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800feea:	693b      	ldr	r3, [r7, #16]
 800feec:	2b06      	cmp	r3, #6
 800feee:	d015      	beq.n	800ff1c <HAL_TIM_PWM_Start_DMA+0x420>
 800fef0:	693b      	ldr	r3, [r7, #16]
 800fef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fef6:	d011      	beq.n	800ff1c <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	681a      	ldr	r2, [r3, #0]
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	f042 0201 	orr.w	r2, r2, #1
 800ff06:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ff08:	e008      	b.n	800ff1c <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	681a      	ldr	r2, [r3, #0]
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	f042 0201 	orr.w	r2, r2, #1
 800ff18:	601a      	str	r2, [r3, #0]
 800ff1a:	e000      	b.n	800ff1e <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ff1c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800ff1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff20:	4618      	mov	r0, r3
 800ff22:	3718      	adds	r7, #24
 800ff24:	46bd      	mov	sp, r7
 800ff26:	bd80      	pop	{r7, pc}
 800ff28:	080104eb 	.word	0x080104eb
 800ff2c:	08010593 	.word	0x08010593
 800ff30:	08010459 	.word	0x08010459
 800ff34:	40010000 	.word	0x40010000
 800ff38:	40010400 	.word	0x40010400
 800ff3c:	40014000 	.word	0x40014000
 800ff40:	40014400 	.word	0x40014400
 800ff44:	40014800 	.word	0x40014800
 800ff48:	40000400 	.word	0x40000400
 800ff4c:	40000800 	.word	0x40000800
 800ff50:	40000c00 	.word	0x40000c00
 800ff54:	40001800 	.word	0x40001800
 800ff58:	4000e000 	.word	0x4000e000
 800ff5c:	4000e400 	.word	0x4000e400
 800ff60:	00010007 	.word	0x00010007

0800ff64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b082      	sub	sp, #8
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	691b      	ldr	r3, [r3, #16]
 800ff72:	f003 0302 	and.w	r3, r3, #2
 800ff76:	2b02      	cmp	r3, #2
 800ff78:	d122      	bne.n	800ffc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	68db      	ldr	r3, [r3, #12]
 800ff80:	f003 0302 	and.w	r3, r3, #2
 800ff84:	2b02      	cmp	r3, #2
 800ff86:	d11b      	bne.n	800ffc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	f06f 0202 	mvn.w	r2, #2
 800ff90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	2201      	movs	r2, #1
 800ff96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	699b      	ldr	r3, [r3, #24]
 800ff9e:	f003 0303 	and.w	r3, r3, #3
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d003      	beq.n	800ffae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ffa6:	6878      	ldr	r0, [r7, #4]
 800ffa8:	f000 fa24 	bl	80103f4 <HAL_TIM_IC_CaptureCallback>
 800ffac:	e005      	b.n	800ffba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ffae:	6878      	ldr	r0, [r7, #4]
 800ffb0:	f000 fa16 	bl	80103e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ffb4:	6878      	ldr	r0, [r7, #4]
 800ffb6:	f000 fa27 	bl	8010408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	2200      	movs	r2, #0
 800ffbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	691b      	ldr	r3, [r3, #16]
 800ffc6:	f003 0304 	and.w	r3, r3, #4
 800ffca:	2b04      	cmp	r3, #4
 800ffcc:	d122      	bne.n	8010014 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	68db      	ldr	r3, [r3, #12]
 800ffd4:	f003 0304 	and.w	r3, r3, #4
 800ffd8:	2b04      	cmp	r3, #4
 800ffda:	d11b      	bne.n	8010014 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	f06f 0204 	mvn.w	r2, #4
 800ffe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	2202      	movs	r2, #2
 800ffea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	699b      	ldr	r3, [r3, #24]
 800fff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d003      	beq.n	8010002 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fffa:	6878      	ldr	r0, [r7, #4]
 800fffc:	f000 f9fa 	bl	80103f4 <HAL_TIM_IC_CaptureCallback>
 8010000:	e005      	b.n	801000e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010002:	6878      	ldr	r0, [r7, #4]
 8010004:	f000 f9ec 	bl	80103e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010008:	6878      	ldr	r0, [r7, #4]
 801000a:	f000 f9fd 	bl	8010408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	2200      	movs	r2, #0
 8010012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	691b      	ldr	r3, [r3, #16]
 801001a:	f003 0308 	and.w	r3, r3, #8
 801001e:	2b08      	cmp	r3, #8
 8010020:	d122      	bne.n	8010068 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	68db      	ldr	r3, [r3, #12]
 8010028:	f003 0308 	and.w	r3, r3, #8
 801002c:	2b08      	cmp	r3, #8
 801002e:	d11b      	bne.n	8010068 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	f06f 0208 	mvn.w	r2, #8
 8010038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	2204      	movs	r2, #4
 801003e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	69db      	ldr	r3, [r3, #28]
 8010046:	f003 0303 	and.w	r3, r3, #3
 801004a:	2b00      	cmp	r3, #0
 801004c:	d003      	beq.n	8010056 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801004e:	6878      	ldr	r0, [r7, #4]
 8010050:	f000 f9d0 	bl	80103f4 <HAL_TIM_IC_CaptureCallback>
 8010054:	e005      	b.n	8010062 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010056:	6878      	ldr	r0, [r7, #4]
 8010058:	f000 f9c2 	bl	80103e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801005c:	6878      	ldr	r0, [r7, #4]
 801005e:	f000 f9d3 	bl	8010408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	2200      	movs	r2, #0
 8010066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	691b      	ldr	r3, [r3, #16]
 801006e:	f003 0310 	and.w	r3, r3, #16
 8010072:	2b10      	cmp	r3, #16
 8010074:	d122      	bne.n	80100bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	68db      	ldr	r3, [r3, #12]
 801007c:	f003 0310 	and.w	r3, r3, #16
 8010080:	2b10      	cmp	r3, #16
 8010082:	d11b      	bne.n	80100bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	f06f 0210 	mvn.w	r2, #16
 801008c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	2208      	movs	r2, #8
 8010092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	69db      	ldr	r3, [r3, #28]
 801009a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d003      	beq.n	80100aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80100a2:	6878      	ldr	r0, [r7, #4]
 80100a4:	f000 f9a6 	bl	80103f4 <HAL_TIM_IC_CaptureCallback>
 80100a8:	e005      	b.n	80100b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80100aa:	6878      	ldr	r0, [r7, #4]
 80100ac:	f000 f998 	bl	80103e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80100b0:	6878      	ldr	r0, [r7, #4]
 80100b2:	f000 f9a9 	bl	8010408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	2200      	movs	r2, #0
 80100ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	691b      	ldr	r3, [r3, #16]
 80100c2:	f003 0301 	and.w	r3, r3, #1
 80100c6:	2b01      	cmp	r3, #1
 80100c8:	d10e      	bne.n	80100e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	68db      	ldr	r3, [r3, #12]
 80100d0:	f003 0301 	and.w	r3, r3, #1
 80100d4:	2b01      	cmp	r3, #1
 80100d6:	d107      	bne.n	80100e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	f06f 0201 	mvn.w	r2, #1
 80100e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80100e2:	6878      	ldr	r0, [r7, #4]
 80100e4:	f000 f972 	bl	80103cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	691b      	ldr	r3, [r3, #16]
 80100ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80100f2:	2b80      	cmp	r3, #128	; 0x80
 80100f4:	d10e      	bne.n	8010114 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	68db      	ldr	r3, [r3, #12]
 80100fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010100:	2b80      	cmp	r3, #128	; 0x80
 8010102:	d107      	bne.n	8010114 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801010c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801010e:	6878      	ldr	r0, [r7, #4]
 8010110:	f000 febc 	bl	8010e8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	691b      	ldr	r3, [r3, #16]
 801011a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801011e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010122:	d10e      	bne.n	8010142 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	68db      	ldr	r3, [r3, #12]
 801012a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801012e:	2b80      	cmp	r3, #128	; 0x80
 8010130:	d107      	bne.n	8010142 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801013a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801013c:	6878      	ldr	r0, [r7, #4]
 801013e:	f000 feaf 	bl	8010ea0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	691b      	ldr	r3, [r3, #16]
 8010148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801014c:	2b40      	cmp	r3, #64	; 0x40
 801014e:	d10e      	bne.n	801016e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	68db      	ldr	r3, [r3, #12]
 8010156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801015a:	2b40      	cmp	r3, #64	; 0x40
 801015c:	d107      	bne.n	801016e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010168:	6878      	ldr	r0, [r7, #4]
 801016a:	f000 f961 	bl	8010430 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	691b      	ldr	r3, [r3, #16]
 8010174:	f003 0320 	and.w	r3, r3, #32
 8010178:	2b20      	cmp	r3, #32
 801017a:	d10e      	bne.n	801019a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	68db      	ldr	r3, [r3, #12]
 8010182:	f003 0320 	and.w	r3, r3, #32
 8010186:	2b20      	cmp	r3, #32
 8010188:	d107      	bne.n	801019a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	f06f 0220 	mvn.w	r2, #32
 8010192:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010194:	6878      	ldr	r0, [r7, #4]
 8010196:	f000 fe6f 	bl	8010e78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801019a:	bf00      	nop
 801019c:	3708      	adds	r7, #8
 801019e:	46bd      	mov	sp, r7
 80101a0:	bd80      	pop	{r7, pc}
	...

080101a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80101a4:	b580      	push	{r7, lr}
 80101a6:	b086      	sub	sp, #24
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	60f8      	str	r0, [r7, #12]
 80101ac:	60b9      	str	r1, [r7, #8]
 80101ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80101b0:	2300      	movs	r3, #0
 80101b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80101ba:	2b01      	cmp	r3, #1
 80101bc:	d101      	bne.n	80101c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80101be:	2302      	movs	r3, #2
 80101c0:	e0ff      	b.n	80103c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	2201      	movs	r2, #1
 80101c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	2b14      	cmp	r3, #20
 80101ce:	f200 80f0 	bhi.w	80103b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80101d2:	a201      	add	r2, pc, #4	; (adr r2, 80101d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80101d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101d8:	0801022d 	.word	0x0801022d
 80101dc:	080103b3 	.word	0x080103b3
 80101e0:	080103b3 	.word	0x080103b3
 80101e4:	080103b3 	.word	0x080103b3
 80101e8:	0801026d 	.word	0x0801026d
 80101ec:	080103b3 	.word	0x080103b3
 80101f0:	080103b3 	.word	0x080103b3
 80101f4:	080103b3 	.word	0x080103b3
 80101f8:	080102af 	.word	0x080102af
 80101fc:	080103b3 	.word	0x080103b3
 8010200:	080103b3 	.word	0x080103b3
 8010204:	080103b3 	.word	0x080103b3
 8010208:	080102ef 	.word	0x080102ef
 801020c:	080103b3 	.word	0x080103b3
 8010210:	080103b3 	.word	0x080103b3
 8010214:	080103b3 	.word	0x080103b3
 8010218:	08010331 	.word	0x08010331
 801021c:	080103b3 	.word	0x080103b3
 8010220:	080103b3 	.word	0x080103b3
 8010224:	080103b3 	.word	0x080103b3
 8010228:	08010371 	.word	0x08010371
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	68b9      	ldr	r1, [r7, #8]
 8010232:	4618      	mov	r0, r3
 8010234:	f000 fa88 	bl	8010748 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	699a      	ldr	r2, [r3, #24]
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	f042 0208 	orr.w	r2, r2, #8
 8010246:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	699a      	ldr	r2, [r3, #24]
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	f022 0204 	bic.w	r2, r2, #4
 8010256:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	6999      	ldr	r1, [r3, #24]
 801025e:	68bb      	ldr	r3, [r7, #8]
 8010260:	691a      	ldr	r2, [r3, #16]
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	430a      	orrs	r2, r1
 8010268:	619a      	str	r2, [r3, #24]
      break;
 801026a:	e0a5      	b.n	80103b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	68b9      	ldr	r1, [r7, #8]
 8010272:	4618      	mov	r0, r3
 8010274:	f000 faf8 	bl	8010868 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	699a      	ldr	r2, [r3, #24]
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010286:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	699a      	ldr	r2, [r3, #24]
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010296:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	6999      	ldr	r1, [r3, #24]
 801029e:	68bb      	ldr	r3, [r7, #8]
 80102a0:	691b      	ldr	r3, [r3, #16]
 80102a2:	021a      	lsls	r2, r3, #8
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	430a      	orrs	r2, r1
 80102aa:	619a      	str	r2, [r3, #24]
      break;
 80102ac:	e084      	b.n	80103b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	68b9      	ldr	r1, [r7, #8]
 80102b4:	4618      	mov	r0, r3
 80102b6:	f000 fb61 	bl	801097c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	69da      	ldr	r2, [r3, #28]
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	f042 0208 	orr.w	r2, r2, #8
 80102c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	69da      	ldr	r2, [r3, #28]
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	f022 0204 	bic.w	r2, r2, #4
 80102d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	69d9      	ldr	r1, [r3, #28]
 80102e0:	68bb      	ldr	r3, [r7, #8]
 80102e2:	691a      	ldr	r2, [r3, #16]
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	430a      	orrs	r2, r1
 80102ea:	61da      	str	r2, [r3, #28]
      break;
 80102ec:	e064      	b.n	80103b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	68b9      	ldr	r1, [r7, #8]
 80102f4:	4618      	mov	r0, r3
 80102f6:	f000 fbc9 	bl	8010a8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	69da      	ldr	r2, [r3, #28]
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010308:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	69da      	ldr	r2, [r3, #28]
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010318:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	69d9      	ldr	r1, [r3, #28]
 8010320:	68bb      	ldr	r3, [r7, #8]
 8010322:	691b      	ldr	r3, [r3, #16]
 8010324:	021a      	lsls	r2, r3, #8
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	430a      	orrs	r2, r1
 801032c:	61da      	str	r2, [r3, #28]
      break;
 801032e:	e043      	b.n	80103b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	68b9      	ldr	r1, [r7, #8]
 8010336:	4618      	mov	r0, r3
 8010338:	f000 fc12 	bl	8010b60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	f042 0208 	orr.w	r2, r2, #8
 801034a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	f022 0204 	bic.w	r2, r2, #4
 801035a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010362:	68bb      	ldr	r3, [r7, #8]
 8010364:	691a      	ldr	r2, [r3, #16]
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	430a      	orrs	r2, r1
 801036c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801036e:	e023      	b.n	80103b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	68b9      	ldr	r1, [r7, #8]
 8010376:	4618      	mov	r0, r3
 8010378:	f000 fc56 	bl	8010c28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801038a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801039a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80103a2:	68bb      	ldr	r3, [r7, #8]
 80103a4:	691b      	ldr	r3, [r3, #16]
 80103a6:	021a      	lsls	r2, r3, #8
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	430a      	orrs	r2, r1
 80103ae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80103b0:	e002      	b.n	80103b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80103b2:	2301      	movs	r3, #1
 80103b4:	75fb      	strb	r3, [r7, #23]
      break;
 80103b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	2200      	movs	r2, #0
 80103bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80103c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80103c2:	4618      	mov	r0, r3
 80103c4:	3718      	adds	r7, #24
 80103c6:	46bd      	mov	sp, r7
 80103c8:	bd80      	pop	{r7, pc}
 80103ca:	bf00      	nop

080103cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80103cc:	b480      	push	{r7}
 80103ce:	b083      	sub	sp, #12
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80103d4:	bf00      	nop
 80103d6:	370c      	adds	r7, #12
 80103d8:	46bd      	mov	sp, r7
 80103da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103de:	4770      	bx	lr

080103e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80103e0:	b480      	push	{r7}
 80103e2:	b083      	sub	sp, #12
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80103e8:	bf00      	nop
 80103ea:	370c      	adds	r7, #12
 80103ec:	46bd      	mov	sp, r7
 80103ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f2:	4770      	bx	lr

080103f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80103f4:	b480      	push	{r7}
 80103f6:	b083      	sub	sp, #12
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80103fc:	bf00      	nop
 80103fe:	370c      	adds	r7, #12
 8010400:	46bd      	mov	sp, r7
 8010402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010406:	4770      	bx	lr

08010408 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010408:	b480      	push	{r7}
 801040a:	b083      	sub	sp, #12
 801040c:	af00      	add	r7, sp, #0
 801040e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010410:	bf00      	nop
 8010412:	370c      	adds	r7, #12
 8010414:	46bd      	mov	sp, r7
 8010416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801041a:	4770      	bx	lr

0801041c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 801041c:	b480      	push	{r7}
 801041e:	b083      	sub	sp, #12
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8010424:	bf00      	nop
 8010426:	370c      	adds	r7, #12
 8010428:	46bd      	mov	sp, r7
 801042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801042e:	4770      	bx	lr

08010430 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010430:	b480      	push	{r7}
 8010432:	b083      	sub	sp, #12
 8010434:	af00      	add	r7, sp, #0
 8010436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010438:	bf00      	nop
 801043a:	370c      	adds	r7, #12
 801043c:	46bd      	mov	sp, r7
 801043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010442:	4770      	bx	lr

08010444 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8010444:	b480      	push	{r7}
 8010446:	b083      	sub	sp, #12
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 801044c:	bf00      	nop
 801044e:	370c      	adds	r7, #12
 8010450:	46bd      	mov	sp, r7
 8010452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010456:	4770      	bx	lr

08010458 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8010458:	b580      	push	{r7, lr}
 801045a:	b084      	sub	sp, #16
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010464:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801046a:	687a      	ldr	r2, [r7, #4]
 801046c:	429a      	cmp	r2, r3
 801046e:	d107      	bne.n	8010480 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	2201      	movs	r2, #1
 8010474:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	2201      	movs	r2, #1
 801047a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801047e:	e02a      	b.n	80104d6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010484:	687a      	ldr	r2, [r7, #4]
 8010486:	429a      	cmp	r2, r3
 8010488:	d107      	bne.n	801049a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	2202      	movs	r2, #2
 801048e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	2201      	movs	r2, #1
 8010494:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010498:	e01d      	b.n	80104d6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801049e:	687a      	ldr	r2, [r7, #4]
 80104a0:	429a      	cmp	r2, r3
 80104a2:	d107      	bne.n	80104b4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	2204      	movs	r2, #4
 80104a8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	2201      	movs	r2, #1
 80104ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80104b2:	e010      	b.n	80104d6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104b8:	687a      	ldr	r2, [r7, #4]
 80104ba:	429a      	cmp	r2, r3
 80104bc:	d107      	bne.n	80104ce <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	2208      	movs	r2, #8
 80104c2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	2201      	movs	r2, #1
 80104c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80104cc:	e003      	b.n	80104d6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	2201      	movs	r2, #1
 80104d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80104d6:	68f8      	ldr	r0, [r7, #12]
 80104d8:	f7ff ffb4 	bl	8010444 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	2200      	movs	r2, #0
 80104e0:	771a      	strb	r2, [r3, #28]
}
 80104e2:	bf00      	nop
 80104e4:	3710      	adds	r7, #16
 80104e6:	46bd      	mov	sp, r7
 80104e8:	bd80      	pop	{r7, pc}

080104ea <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80104ea:	b580      	push	{r7, lr}
 80104ec:	b084      	sub	sp, #16
 80104ee:	af00      	add	r7, sp, #0
 80104f0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104f6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104fc:	687a      	ldr	r2, [r7, #4]
 80104fe:	429a      	cmp	r2, r3
 8010500:	d10b      	bne.n	801051a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	2201      	movs	r2, #1
 8010506:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	69db      	ldr	r3, [r3, #28]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d136      	bne.n	801057e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	2201      	movs	r2, #1
 8010514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010518:	e031      	b.n	801057e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801051e:	687a      	ldr	r2, [r7, #4]
 8010520:	429a      	cmp	r2, r3
 8010522:	d10b      	bne.n	801053c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	2202      	movs	r2, #2
 8010528:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	69db      	ldr	r3, [r3, #28]
 801052e:	2b00      	cmp	r3, #0
 8010530:	d125      	bne.n	801057e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	2201      	movs	r2, #1
 8010536:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801053a:	e020      	b.n	801057e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010540:	687a      	ldr	r2, [r7, #4]
 8010542:	429a      	cmp	r2, r3
 8010544:	d10b      	bne.n	801055e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	2204      	movs	r2, #4
 801054a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	69db      	ldr	r3, [r3, #28]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d114      	bne.n	801057e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	2201      	movs	r2, #1
 8010558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801055c:	e00f      	b.n	801057e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010562:	687a      	ldr	r2, [r7, #4]
 8010564:	429a      	cmp	r2, r3
 8010566:	d10a      	bne.n	801057e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	2208      	movs	r2, #8
 801056c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	69db      	ldr	r3, [r3, #28]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d103      	bne.n	801057e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	2201      	movs	r2, #1
 801057a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 801057e:	68f8      	ldr	r0, [r7, #12]
 8010580:	f7ff ff42 	bl	8010408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	2200      	movs	r2, #0
 8010588:	771a      	strb	r2, [r3, #28]
}
 801058a:	bf00      	nop
 801058c:	3710      	adds	r7, #16
 801058e:	46bd      	mov	sp, r7
 8010590:	bd80      	pop	{r7, pc}

08010592 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010592:	b580      	push	{r7, lr}
 8010594:	b084      	sub	sp, #16
 8010596:	af00      	add	r7, sp, #0
 8010598:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801059e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105a4:	687a      	ldr	r2, [r7, #4]
 80105a6:	429a      	cmp	r2, r3
 80105a8:	d103      	bne.n	80105b2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	2201      	movs	r2, #1
 80105ae:	771a      	strb	r2, [r3, #28]
 80105b0:	e019      	b.n	80105e6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105b6:	687a      	ldr	r2, [r7, #4]
 80105b8:	429a      	cmp	r2, r3
 80105ba:	d103      	bne.n	80105c4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	2202      	movs	r2, #2
 80105c0:	771a      	strb	r2, [r3, #28]
 80105c2:	e010      	b.n	80105e6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105c8:	687a      	ldr	r2, [r7, #4]
 80105ca:	429a      	cmp	r2, r3
 80105cc:	d103      	bne.n	80105d6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	2204      	movs	r2, #4
 80105d2:	771a      	strb	r2, [r3, #28]
 80105d4:	e007      	b.n	80105e6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105da:	687a      	ldr	r2, [r7, #4]
 80105dc:	429a      	cmp	r2, r3
 80105de:	d102      	bne.n	80105e6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	2208      	movs	r2, #8
 80105e4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80105e6:	68f8      	ldr	r0, [r7, #12]
 80105e8:	f7ff ff18 	bl	801041c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	2200      	movs	r2, #0
 80105f0:	771a      	strb	r2, [r3, #28]
}
 80105f2:	bf00      	nop
 80105f4:	3710      	adds	r7, #16
 80105f6:	46bd      	mov	sp, r7
 80105f8:	bd80      	pop	{r7, pc}
	...

080105fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80105fc:	b480      	push	{r7}
 80105fe:	b085      	sub	sp, #20
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
 8010604:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	4a44      	ldr	r2, [pc, #272]	; (8010720 <TIM_Base_SetConfig+0x124>)
 8010610:	4293      	cmp	r3, r2
 8010612:	d013      	beq.n	801063c <TIM_Base_SetConfig+0x40>
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801061a:	d00f      	beq.n	801063c <TIM_Base_SetConfig+0x40>
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	4a41      	ldr	r2, [pc, #260]	; (8010724 <TIM_Base_SetConfig+0x128>)
 8010620:	4293      	cmp	r3, r2
 8010622:	d00b      	beq.n	801063c <TIM_Base_SetConfig+0x40>
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	4a40      	ldr	r2, [pc, #256]	; (8010728 <TIM_Base_SetConfig+0x12c>)
 8010628:	4293      	cmp	r3, r2
 801062a:	d007      	beq.n	801063c <TIM_Base_SetConfig+0x40>
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	4a3f      	ldr	r2, [pc, #252]	; (801072c <TIM_Base_SetConfig+0x130>)
 8010630:	4293      	cmp	r3, r2
 8010632:	d003      	beq.n	801063c <TIM_Base_SetConfig+0x40>
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	4a3e      	ldr	r2, [pc, #248]	; (8010730 <TIM_Base_SetConfig+0x134>)
 8010638:	4293      	cmp	r3, r2
 801063a:	d108      	bne.n	801064e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010642:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010644:	683b      	ldr	r3, [r7, #0]
 8010646:	685b      	ldr	r3, [r3, #4]
 8010648:	68fa      	ldr	r2, [r7, #12]
 801064a:	4313      	orrs	r3, r2
 801064c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	4a33      	ldr	r2, [pc, #204]	; (8010720 <TIM_Base_SetConfig+0x124>)
 8010652:	4293      	cmp	r3, r2
 8010654:	d027      	beq.n	80106a6 <TIM_Base_SetConfig+0xaa>
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801065c:	d023      	beq.n	80106a6 <TIM_Base_SetConfig+0xaa>
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	4a30      	ldr	r2, [pc, #192]	; (8010724 <TIM_Base_SetConfig+0x128>)
 8010662:	4293      	cmp	r3, r2
 8010664:	d01f      	beq.n	80106a6 <TIM_Base_SetConfig+0xaa>
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	4a2f      	ldr	r2, [pc, #188]	; (8010728 <TIM_Base_SetConfig+0x12c>)
 801066a:	4293      	cmp	r3, r2
 801066c:	d01b      	beq.n	80106a6 <TIM_Base_SetConfig+0xaa>
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	4a2e      	ldr	r2, [pc, #184]	; (801072c <TIM_Base_SetConfig+0x130>)
 8010672:	4293      	cmp	r3, r2
 8010674:	d017      	beq.n	80106a6 <TIM_Base_SetConfig+0xaa>
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	4a2d      	ldr	r2, [pc, #180]	; (8010730 <TIM_Base_SetConfig+0x134>)
 801067a:	4293      	cmp	r3, r2
 801067c:	d013      	beq.n	80106a6 <TIM_Base_SetConfig+0xaa>
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	4a2c      	ldr	r2, [pc, #176]	; (8010734 <TIM_Base_SetConfig+0x138>)
 8010682:	4293      	cmp	r3, r2
 8010684:	d00f      	beq.n	80106a6 <TIM_Base_SetConfig+0xaa>
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	4a2b      	ldr	r2, [pc, #172]	; (8010738 <TIM_Base_SetConfig+0x13c>)
 801068a:	4293      	cmp	r3, r2
 801068c:	d00b      	beq.n	80106a6 <TIM_Base_SetConfig+0xaa>
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	4a2a      	ldr	r2, [pc, #168]	; (801073c <TIM_Base_SetConfig+0x140>)
 8010692:	4293      	cmp	r3, r2
 8010694:	d007      	beq.n	80106a6 <TIM_Base_SetConfig+0xaa>
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	4a29      	ldr	r2, [pc, #164]	; (8010740 <TIM_Base_SetConfig+0x144>)
 801069a:	4293      	cmp	r3, r2
 801069c:	d003      	beq.n	80106a6 <TIM_Base_SetConfig+0xaa>
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	4a28      	ldr	r2, [pc, #160]	; (8010744 <TIM_Base_SetConfig+0x148>)
 80106a2:	4293      	cmp	r3, r2
 80106a4:	d108      	bne.n	80106b8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80106ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80106ae:	683b      	ldr	r3, [r7, #0]
 80106b0:	68db      	ldr	r3, [r3, #12]
 80106b2:	68fa      	ldr	r2, [r7, #12]
 80106b4:	4313      	orrs	r3, r2
 80106b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80106be:	683b      	ldr	r3, [r7, #0]
 80106c0:	695b      	ldr	r3, [r3, #20]
 80106c2:	4313      	orrs	r3, r2
 80106c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	68fa      	ldr	r2, [r7, #12]
 80106ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80106cc:	683b      	ldr	r3, [r7, #0]
 80106ce:	689a      	ldr	r2, [r3, #8]
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80106d4:	683b      	ldr	r3, [r7, #0]
 80106d6:	681a      	ldr	r2, [r3, #0]
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	4a10      	ldr	r2, [pc, #64]	; (8010720 <TIM_Base_SetConfig+0x124>)
 80106e0:	4293      	cmp	r3, r2
 80106e2:	d00f      	beq.n	8010704 <TIM_Base_SetConfig+0x108>
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	4a12      	ldr	r2, [pc, #72]	; (8010730 <TIM_Base_SetConfig+0x134>)
 80106e8:	4293      	cmp	r3, r2
 80106ea:	d00b      	beq.n	8010704 <TIM_Base_SetConfig+0x108>
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	4a11      	ldr	r2, [pc, #68]	; (8010734 <TIM_Base_SetConfig+0x138>)
 80106f0:	4293      	cmp	r3, r2
 80106f2:	d007      	beq.n	8010704 <TIM_Base_SetConfig+0x108>
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	4a10      	ldr	r2, [pc, #64]	; (8010738 <TIM_Base_SetConfig+0x13c>)
 80106f8:	4293      	cmp	r3, r2
 80106fa:	d003      	beq.n	8010704 <TIM_Base_SetConfig+0x108>
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	4a0f      	ldr	r2, [pc, #60]	; (801073c <TIM_Base_SetConfig+0x140>)
 8010700:	4293      	cmp	r3, r2
 8010702:	d103      	bne.n	801070c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010704:	683b      	ldr	r3, [r7, #0]
 8010706:	691a      	ldr	r2, [r3, #16]
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	2201      	movs	r2, #1
 8010710:	615a      	str	r2, [r3, #20]
}
 8010712:	bf00      	nop
 8010714:	3714      	adds	r7, #20
 8010716:	46bd      	mov	sp, r7
 8010718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071c:	4770      	bx	lr
 801071e:	bf00      	nop
 8010720:	40010000 	.word	0x40010000
 8010724:	40000400 	.word	0x40000400
 8010728:	40000800 	.word	0x40000800
 801072c:	40000c00 	.word	0x40000c00
 8010730:	40010400 	.word	0x40010400
 8010734:	40014000 	.word	0x40014000
 8010738:	40014400 	.word	0x40014400
 801073c:	40014800 	.word	0x40014800
 8010740:	4000e000 	.word	0x4000e000
 8010744:	4000e400 	.word	0x4000e400

08010748 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010748:	b480      	push	{r7}
 801074a:	b087      	sub	sp, #28
 801074c:	af00      	add	r7, sp, #0
 801074e:	6078      	str	r0, [r7, #4]
 8010750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	6a1b      	ldr	r3, [r3, #32]
 8010756:	f023 0201 	bic.w	r2, r3, #1
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	6a1b      	ldr	r3, [r3, #32]
 8010762:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	685b      	ldr	r3, [r3, #4]
 8010768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	699b      	ldr	r3, [r3, #24]
 801076e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010770:	68fa      	ldr	r2, [r7, #12]
 8010772:	4b37      	ldr	r3, [pc, #220]	; (8010850 <TIM_OC1_SetConfig+0x108>)
 8010774:	4013      	ands	r3, r2
 8010776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	f023 0303 	bic.w	r3, r3, #3
 801077e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010780:	683b      	ldr	r3, [r7, #0]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	68fa      	ldr	r2, [r7, #12]
 8010786:	4313      	orrs	r3, r2
 8010788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801078a:	697b      	ldr	r3, [r7, #20]
 801078c:	f023 0302 	bic.w	r3, r3, #2
 8010790:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010792:	683b      	ldr	r3, [r7, #0]
 8010794:	689b      	ldr	r3, [r3, #8]
 8010796:	697a      	ldr	r2, [r7, #20]
 8010798:	4313      	orrs	r3, r2
 801079a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	4a2d      	ldr	r2, [pc, #180]	; (8010854 <TIM_OC1_SetConfig+0x10c>)
 80107a0:	4293      	cmp	r3, r2
 80107a2:	d00f      	beq.n	80107c4 <TIM_OC1_SetConfig+0x7c>
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	4a2c      	ldr	r2, [pc, #176]	; (8010858 <TIM_OC1_SetConfig+0x110>)
 80107a8:	4293      	cmp	r3, r2
 80107aa:	d00b      	beq.n	80107c4 <TIM_OC1_SetConfig+0x7c>
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	4a2b      	ldr	r2, [pc, #172]	; (801085c <TIM_OC1_SetConfig+0x114>)
 80107b0:	4293      	cmp	r3, r2
 80107b2:	d007      	beq.n	80107c4 <TIM_OC1_SetConfig+0x7c>
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	4a2a      	ldr	r2, [pc, #168]	; (8010860 <TIM_OC1_SetConfig+0x118>)
 80107b8:	4293      	cmp	r3, r2
 80107ba:	d003      	beq.n	80107c4 <TIM_OC1_SetConfig+0x7c>
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	4a29      	ldr	r2, [pc, #164]	; (8010864 <TIM_OC1_SetConfig+0x11c>)
 80107c0:	4293      	cmp	r3, r2
 80107c2:	d10c      	bne.n	80107de <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80107c4:	697b      	ldr	r3, [r7, #20]
 80107c6:	f023 0308 	bic.w	r3, r3, #8
 80107ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80107cc:	683b      	ldr	r3, [r7, #0]
 80107ce:	68db      	ldr	r3, [r3, #12]
 80107d0:	697a      	ldr	r2, [r7, #20]
 80107d2:	4313      	orrs	r3, r2
 80107d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80107d6:	697b      	ldr	r3, [r7, #20]
 80107d8:	f023 0304 	bic.w	r3, r3, #4
 80107dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	4a1c      	ldr	r2, [pc, #112]	; (8010854 <TIM_OC1_SetConfig+0x10c>)
 80107e2:	4293      	cmp	r3, r2
 80107e4:	d00f      	beq.n	8010806 <TIM_OC1_SetConfig+0xbe>
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	4a1b      	ldr	r2, [pc, #108]	; (8010858 <TIM_OC1_SetConfig+0x110>)
 80107ea:	4293      	cmp	r3, r2
 80107ec:	d00b      	beq.n	8010806 <TIM_OC1_SetConfig+0xbe>
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	4a1a      	ldr	r2, [pc, #104]	; (801085c <TIM_OC1_SetConfig+0x114>)
 80107f2:	4293      	cmp	r3, r2
 80107f4:	d007      	beq.n	8010806 <TIM_OC1_SetConfig+0xbe>
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	4a19      	ldr	r2, [pc, #100]	; (8010860 <TIM_OC1_SetConfig+0x118>)
 80107fa:	4293      	cmp	r3, r2
 80107fc:	d003      	beq.n	8010806 <TIM_OC1_SetConfig+0xbe>
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	4a18      	ldr	r2, [pc, #96]	; (8010864 <TIM_OC1_SetConfig+0x11c>)
 8010802:	4293      	cmp	r3, r2
 8010804:	d111      	bne.n	801082a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010806:	693b      	ldr	r3, [r7, #16]
 8010808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801080c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801080e:	693b      	ldr	r3, [r7, #16]
 8010810:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010814:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010816:	683b      	ldr	r3, [r7, #0]
 8010818:	695b      	ldr	r3, [r3, #20]
 801081a:	693a      	ldr	r2, [r7, #16]
 801081c:	4313      	orrs	r3, r2
 801081e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010820:	683b      	ldr	r3, [r7, #0]
 8010822:	699b      	ldr	r3, [r3, #24]
 8010824:	693a      	ldr	r2, [r7, #16]
 8010826:	4313      	orrs	r3, r2
 8010828:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	693a      	ldr	r2, [r7, #16]
 801082e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	68fa      	ldr	r2, [r7, #12]
 8010834:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010836:	683b      	ldr	r3, [r7, #0]
 8010838:	685a      	ldr	r2, [r3, #4]
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	697a      	ldr	r2, [r7, #20]
 8010842:	621a      	str	r2, [r3, #32]
}
 8010844:	bf00      	nop
 8010846:	371c      	adds	r7, #28
 8010848:	46bd      	mov	sp, r7
 801084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801084e:	4770      	bx	lr
 8010850:	fffeff8f 	.word	0xfffeff8f
 8010854:	40010000 	.word	0x40010000
 8010858:	40010400 	.word	0x40010400
 801085c:	40014000 	.word	0x40014000
 8010860:	40014400 	.word	0x40014400
 8010864:	40014800 	.word	0x40014800

08010868 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010868:	b480      	push	{r7}
 801086a:	b087      	sub	sp, #28
 801086c:	af00      	add	r7, sp, #0
 801086e:	6078      	str	r0, [r7, #4]
 8010870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	6a1b      	ldr	r3, [r3, #32]
 8010876:	f023 0210 	bic.w	r2, r3, #16
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	6a1b      	ldr	r3, [r3, #32]
 8010882:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	685b      	ldr	r3, [r3, #4]
 8010888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	699b      	ldr	r3, [r3, #24]
 801088e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010890:	68fa      	ldr	r2, [r7, #12]
 8010892:	4b34      	ldr	r3, [pc, #208]	; (8010964 <TIM_OC2_SetConfig+0xfc>)
 8010894:	4013      	ands	r3, r2
 8010896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801089e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80108a0:	683b      	ldr	r3, [r7, #0]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	021b      	lsls	r3, r3, #8
 80108a6:	68fa      	ldr	r2, [r7, #12]
 80108a8:	4313      	orrs	r3, r2
 80108aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80108ac:	697b      	ldr	r3, [r7, #20]
 80108ae:	f023 0320 	bic.w	r3, r3, #32
 80108b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80108b4:	683b      	ldr	r3, [r7, #0]
 80108b6:	689b      	ldr	r3, [r3, #8]
 80108b8:	011b      	lsls	r3, r3, #4
 80108ba:	697a      	ldr	r2, [r7, #20]
 80108bc:	4313      	orrs	r3, r2
 80108be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	4a29      	ldr	r2, [pc, #164]	; (8010968 <TIM_OC2_SetConfig+0x100>)
 80108c4:	4293      	cmp	r3, r2
 80108c6:	d003      	beq.n	80108d0 <TIM_OC2_SetConfig+0x68>
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	4a28      	ldr	r2, [pc, #160]	; (801096c <TIM_OC2_SetConfig+0x104>)
 80108cc:	4293      	cmp	r3, r2
 80108ce:	d10d      	bne.n	80108ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80108d0:	697b      	ldr	r3, [r7, #20]
 80108d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80108d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80108d8:	683b      	ldr	r3, [r7, #0]
 80108da:	68db      	ldr	r3, [r3, #12]
 80108dc:	011b      	lsls	r3, r3, #4
 80108de:	697a      	ldr	r2, [r7, #20]
 80108e0:	4313      	orrs	r3, r2
 80108e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80108e4:	697b      	ldr	r3, [r7, #20]
 80108e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80108ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	4a1e      	ldr	r2, [pc, #120]	; (8010968 <TIM_OC2_SetConfig+0x100>)
 80108f0:	4293      	cmp	r3, r2
 80108f2:	d00f      	beq.n	8010914 <TIM_OC2_SetConfig+0xac>
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	4a1d      	ldr	r2, [pc, #116]	; (801096c <TIM_OC2_SetConfig+0x104>)
 80108f8:	4293      	cmp	r3, r2
 80108fa:	d00b      	beq.n	8010914 <TIM_OC2_SetConfig+0xac>
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	4a1c      	ldr	r2, [pc, #112]	; (8010970 <TIM_OC2_SetConfig+0x108>)
 8010900:	4293      	cmp	r3, r2
 8010902:	d007      	beq.n	8010914 <TIM_OC2_SetConfig+0xac>
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	4a1b      	ldr	r2, [pc, #108]	; (8010974 <TIM_OC2_SetConfig+0x10c>)
 8010908:	4293      	cmp	r3, r2
 801090a:	d003      	beq.n	8010914 <TIM_OC2_SetConfig+0xac>
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	4a1a      	ldr	r2, [pc, #104]	; (8010978 <TIM_OC2_SetConfig+0x110>)
 8010910:	4293      	cmp	r3, r2
 8010912:	d113      	bne.n	801093c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010914:	693b      	ldr	r3, [r7, #16]
 8010916:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801091a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801091c:	693b      	ldr	r3, [r7, #16]
 801091e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010922:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010924:	683b      	ldr	r3, [r7, #0]
 8010926:	695b      	ldr	r3, [r3, #20]
 8010928:	009b      	lsls	r3, r3, #2
 801092a:	693a      	ldr	r2, [r7, #16]
 801092c:	4313      	orrs	r3, r2
 801092e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010930:	683b      	ldr	r3, [r7, #0]
 8010932:	699b      	ldr	r3, [r3, #24]
 8010934:	009b      	lsls	r3, r3, #2
 8010936:	693a      	ldr	r2, [r7, #16]
 8010938:	4313      	orrs	r3, r2
 801093a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	693a      	ldr	r2, [r7, #16]
 8010940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	68fa      	ldr	r2, [r7, #12]
 8010946:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010948:	683b      	ldr	r3, [r7, #0]
 801094a:	685a      	ldr	r2, [r3, #4]
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	697a      	ldr	r2, [r7, #20]
 8010954:	621a      	str	r2, [r3, #32]
}
 8010956:	bf00      	nop
 8010958:	371c      	adds	r7, #28
 801095a:	46bd      	mov	sp, r7
 801095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010960:	4770      	bx	lr
 8010962:	bf00      	nop
 8010964:	feff8fff 	.word	0xfeff8fff
 8010968:	40010000 	.word	0x40010000
 801096c:	40010400 	.word	0x40010400
 8010970:	40014000 	.word	0x40014000
 8010974:	40014400 	.word	0x40014400
 8010978:	40014800 	.word	0x40014800

0801097c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801097c:	b480      	push	{r7}
 801097e:	b087      	sub	sp, #28
 8010980:	af00      	add	r7, sp, #0
 8010982:	6078      	str	r0, [r7, #4]
 8010984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	6a1b      	ldr	r3, [r3, #32]
 801098a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	6a1b      	ldr	r3, [r3, #32]
 8010996:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	685b      	ldr	r3, [r3, #4]
 801099c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	69db      	ldr	r3, [r3, #28]
 80109a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80109a4:	68fa      	ldr	r2, [r7, #12]
 80109a6:	4b33      	ldr	r3, [pc, #204]	; (8010a74 <TIM_OC3_SetConfig+0xf8>)
 80109a8:	4013      	ands	r3, r2
 80109aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	f023 0303 	bic.w	r3, r3, #3
 80109b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80109b4:	683b      	ldr	r3, [r7, #0]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	68fa      	ldr	r2, [r7, #12]
 80109ba:	4313      	orrs	r3, r2
 80109bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80109be:	697b      	ldr	r3, [r7, #20]
 80109c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80109c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80109c6:	683b      	ldr	r3, [r7, #0]
 80109c8:	689b      	ldr	r3, [r3, #8]
 80109ca:	021b      	lsls	r3, r3, #8
 80109cc:	697a      	ldr	r2, [r7, #20]
 80109ce:	4313      	orrs	r3, r2
 80109d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	4a28      	ldr	r2, [pc, #160]	; (8010a78 <TIM_OC3_SetConfig+0xfc>)
 80109d6:	4293      	cmp	r3, r2
 80109d8:	d003      	beq.n	80109e2 <TIM_OC3_SetConfig+0x66>
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	4a27      	ldr	r2, [pc, #156]	; (8010a7c <TIM_OC3_SetConfig+0x100>)
 80109de:	4293      	cmp	r3, r2
 80109e0:	d10d      	bne.n	80109fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80109e2:	697b      	ldr	r3, [r7, #20]
 80109e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80109e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80109ea:	683b      	ldr	r3, [r7, #0]
 80109ec:	68db      	ldr	r3, [r3, #12]
 80109ee:	021b      	lsls	r3, r3, #8
 80109f0:	697a      	ldr	r2, [r7, #20]
 80109f2:	4313      	orrs	r3, r2
 80109f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80109f6:	697b      	ldr	r3, [r7, #20]
 80109f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80109fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	4a1d      	ldr	r2, [pc, #116]	; (8010a78 <TIM_OC3_SetConfig+0xfc>)
 8010a02:	4293      	cmp	r3, r2
 8010a04:	d00f      	beq.n	8010a26 <TIM_OC3_SetConfig+0xaa>
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	4a1c      	ldr	r2, [pc, #112]	; (8010a7c <TIM_OC3_SetConfig+0x100>)
 8010a0a:	4293      	cmp	r3, r2
 8010a0c:	d00b      	beq.n	8010a26 <TIM_OC3_SetConfig+0xaa>
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	4a1b      	ldr	r2, [pc, #108]	; (8010a80 <TIM_OC3_SetConfig+0x104>)
 8010a12:	4293      	cmp	r3, r2
 8010a14:	d007      	beq.n	8010a26 <TIM_OC3_SetConfig+0xaa>
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	4a1a      	ldr	r2, [pc, #104]	; (8010a84 <TIM_OC3_SetConfig+0x108>)
 8010a1a:	4293      	cmp	r3, r2
 8010a1c:	d003      	beq.n	8010a26 <TIM_OC3_SetConfig+0xaa>
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	4a19      	ldr	r2, [pc, #100]	; (8010a88 <TIM_OC3_SetConfig+0x10c>)
 8010a22:	4293      	cmp	r3, r2
 8010a24:	d113      	bne.n	8010a4e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010a26:	693b      	ldr	r3, [r7, #16]
 8010a28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010a2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010a2e:	693b      	ldr	r3, [r7, #16]
 8010a30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010a34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010a36:	683b      	ldr	r3, [r7, #0]
 8010a38:	695b      	ldr	r3, [r3, #20]
 8010a3a:	011b      	lsls	r3, r3, #4
 8010a3c:	693a      	ldr	r2, [r7, #16]
 8010a3e:	4313      	orrs	r3, r2
 8010a40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010a42:	683b      	ldr	r3, [r7, #0]
 8010a44:	699b      	ldr	r3, [r3, #24]
 8010a46:	011b      	lsls	r3, r3, #4
 8010a48:	693a      	ldr	r2, [r7, #16]
 8010a4a:	4313      	orrs	r3, r2
 8010a4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	693a      	ldr	r2, [r7, #16]
 8010a52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	68fa      	ldr	r2, [r7, #12]
 8010a58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010a5a:	683b      	ldr	r3, [r7, #0]
 8010a5c:	685a      	ldr	r2, [r3, #4]
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	697a      	ldr	r2, [r7, #20]
 8010a66:	621a      	str	r2, [r3, #32]
}
 8010a68:	bf00      	nop
 8010a6a:	371c      	adds	r7, #28
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a72:	4770      	bx	lr
 8010a74:	fffeff8f 	.word	0xfffeff8f
 8010a78:	40010000 	.word	0x40010000
 8010a7c:	40010400 	.word	0x40010400
 8010a80:	40014000 	.word	0x40014000
 8010a84:	40014400 	.word	0x40014400
 8010a88:	40014800 	.word	0x40014800

08010a8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010a8c:	b480      	push	{r7}
 8010a8e:	b087      	sub	sp, #28
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
 8010a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	6a1b      	ldr	r3, [r3, #32]
 8010a9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	6a1b      	ldr	r3, [r3, #32]
 8010aa6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	685b      	ldr	r3, [r3, #4]
 8010aac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	69db      	ldr	r3, [r3, #28]
 8010ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010ab4:	68fa      	ldr	r2, [r7, #12]
 8010ab6:	4b24      	ldr	r3, [pc, #144]	; (8010b48 <TIM_OC4_SetConfig+0xbc>)
 8010ab8:	4013      	ands	r3, r2
 8010aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010ac2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010ac4:	683b      	ldr	r3, [r7, #0]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	021b      	lsls	r3, r3, #8
 8010aca:	68fa      	ldr	r2, [r7, #12]
 8010acc:	4313      	orrs	r3, r2
 8010ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010ad0:	693b      	ldr	r3, [r7, #16]
 8010ad2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010ad6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010ad8:	683b      	ldr	r3, [r7, #0]
 8010ada:	689b      	ldr	r3, [r3, #8]
 8010adc:	031b      	lsls	r3, r3, #12
 8010ade:	693a      	ldr	r2, [r7, #16]
 8010ae0:	4313      	orrs	r3, r2
 8010ae2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	4a19      	ldr	r2, [pc, #100]	; (8010b4c <TIM_OC4_SetConfig+0xc0>)
 8010ae8:	4293      	cmp	r3, r2
 8010aea:	d00f      	beq.n	8010b0c <TIM_OC4_SetConfig+0x80>
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	4a18      	ldr	r2, [pc, #96]	; (8010b50 <TIM_OC4_SetConfig+0xc4>)
 8010af0:	4293      	cmp	r3, r2
 8010af2:	d00b      	beq.n	8010b0c <TIM_OC4_SetConfig+0x80>
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	4a17      	ldr	r2, [pc, #92]	; (8010b54 <TIM_OC4_SetConfig+0xc8>)
 8010af8:	4293      	cmp	r3, r2
 8010afa:	d007      	beq.n	8010b0c <TIM_OC4_SetConfig+0x80>
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	4a16      	ldr	r2, [pc, #88]	; (8010b58 <TIM_OC4_SetConfig+0xcc>)
 8010b00:	4293      	cmp	r3, r2
 8010b02:	d003      	beq.n	8010b0c <TIM_OC4_SetConfig+0x80>
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	4a15      	ldr	r2, [pc, #84]	; (8010b5c <TIM_OC4_SetConfig+0xd0>)
 8010b08:	4293      	cmp	r3, r2
 8010b0a:	d109      	bne.n	8010b20 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010b0c:	697b      	ldr	r3, [r7, #20]
 8010b0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010b12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010b14:	683b      	ldr	r3, [r7, #0]
 8010b16:	695b      	ldr	r3, [r3, #20]
 8010b18:	019b      	lsls	r3, r3, #6
 8010b1a:	697a      	ldr	r2, [r7, #20]
 8010b1c:	4313      	orrs	r3, r2
 8010b1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	697a      	ldr	r2, [r7, #20]
 8010b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	68fa      	ldr	r2, [r7, #12]
 8010b2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010b2c:	683b      	ldr	r3, [r7, #0]
 8010b2e:	685a      	ldr	r2, [r3, #4]
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	693a      	ldr	r2, [r7, #16]
 8010b38:	621a      	str	r2, [r3, #32]
}
 8010b3a:	bf00      	nop
 8010b3c:	371c      	adds	r7, #28
 8010b3e:	46bd      	mov	sp, r7
 8010b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b44:	4770      	bx	lr
 8010b46:	bf00      	nop
 8010b48:	feff8fff 	.word	0xfeff8fff
 8010b4c:	40010000 	.word	0x40010000
 8010b50:	40010400 	.word	0x40010400
 8010b54:	40014000 	.word	0x40014000
 8010b58:	40014400 	.word	0x40014400
 8010b5c:	40014800 	.word	0x40014800

08010b60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010b60:	b480      	push	{r7}
 8010b62:	b087      	sub	sp, #28
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	6078      	str	r0, [r7, #4]
 8010b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	6a1b      	ldr	r3, [r3, #32]
 8010b6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	6a1b      	ldr	r3, [r3, #32]
 8010b7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	685b      	ldr	r3, [r3, #4]
 8010b80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010b88:	68fa      	ldr	r2, [r7, #12]
 8010b8a:	4b21      	ldr	r3, [pc, #132]	; (8010c10 <TIM_OC5_SetConfig+0xb0>)
 8010b8c:	4013      	ands	r3, r2
 8010b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010b90:	683b      	ldr	r3, [r7, #0]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	68fa      	ldr	r2, [r7, #12]
 8010b96:	4313      	orrs	r3, r2
 8010b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010b9a:	693b      	ldr	r3, [r7, #16]
 8010b9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010ba0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010ba2:	683b      	ldr	r3, [r7, #0]
 8010ba4:	689b      	ldr	r3, [r3, #8]
 8010ba6:	041b      	lsls	r3, r3, #16
 8010ba8:	693a      	ldr	r2, [r7, #16]
 8010baa:	4313      	orrs	r3, r2
 8010bac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	4a18      	ldr	r2, [pc, #96]	; (8010c14 <TIM_OC5_SetConfig+0xb4>)
 8010bb2:	4293      	cmp	r3, r2
 8010bb4:	d00f      	beq.n	8010bd6 <TIM_OC5_SetConfig+0x76>
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	4a17      	ldr	r2, [pc, #92]	; (8010c18 <TIM_OC5_SetConfig+0xb8>)
 8010bba:	4293      	cmp	r3, r2
 8010bbc:	d00b      	beq.n	8010bd6 <TIM_OC5_SetConfig+0x76>
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	4a16      	ldr	r2, [pc, #88]	; (8010c1c <TIM_OC5_SetConfig+0xbc>)
 8010bc2:	4293      	cmp	r3, r2
 8010bc4:	d007      	beq.n	8010bd6 <TIM_OC5_SetConfig+0x76>
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	4a15      	ldr	r2, [pc, #84]	; (8010c20 <TIM_OC5_SetConfig+0xc0>)
 8010bca:	4293      	cmp	r3, r2
 8010bcc:	d003      	beq.n	8010bd6 <TIM_OC5_SetConfig+0x76>
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	4a14      	ldr	r2, [pc, #80]	; (8010c24 <TIM_OC5_SetConfig+0xc4>)
 8010bd2:	4293      	cmp	r3, r2
 8010bd4:	d109      	bne.n	8010bea <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010bd6:	697b      	ldr	r3, [r7, #20]
 8010bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010bdc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010bde:	683b      	ldr	r3, [r7, #0]
 8010be0:	695b      	ldr	r3, [r3, #20]
 8010be2:	021b      	lsls	r3, r3, #8
 8010be4:	697a      	ldr	r2, [r7, #20]
 8010be6:	4313      	orrs	r3, r2
 8010be8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	697a      	ldr	r2, [r7, #20]
 8010bee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	68fa      	ldr	r2, [r7, #12]
 8010bf4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8010bf6:	683b      	ldr	r3, [r7, #0]
 8010bf8:	685a      	ldr	r2, [r3, #4]
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	693a      	ldr	r2, [r7, #16]
 8010c02:	621a      	str	r2, [r3, #32]
}
 8010c04:	bf00      	nop
 8010c06:	371c      	adds	r7, #28
 8010c08:	46bd      	mov	sp, r7
 8010c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c0e:	4770      	bx	lr
 8010c10:	fffeff8f 	.word	0xfffeff8f
 8010c14:	40010000 	.word	0x40010000
 8010c18:	40010400 	.word	0x40010400
 8010c1c:	40014000 	.word	0x40014000
 8010c20:	40014400 	.word	0x40014400
 8010c24:	40014800 	.word	0x40014800

08010c28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010c28:	b480      	push	{r7}
 8010c2a:	b087      	sub	sp, #28
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	6078      	str	r0, [r7, #4]
 8010c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	6a1b      	ldr	r3, [r3, #32]
 8010c36:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	6a1b      	ldr	r3, [r3, #32]
 8010c42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	685b      	ldr	r3, [r3, #4]
 8010c48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010c50:	68fa      	ldr	r2, [r7, #12]
 8010c52:	4b22      	ldr	r3, [pc, #136]	; (8010cdc <TIM_OC6_SetConfig+0xb4>)
 8010c54:	4013      	ands	r3, r2
 8010c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010c58:	683b      	ldr	r3, [r7, #0]
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	021b      	lsls	r3, r3, #8
 8010c5e:	68fa      	ldr	r2, [r7, #12]
 8010c60:	4313      	orrs	r3, r2
 8010c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010c64:	693b      	ldr	r3, [r7, #16]
 8010c66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010c6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010c6c:	683b      	ldr	r3, [r7, #0]
 8010c6e:	689b      	ldr	r3, [r3, #8]
 8010c70:	051b      	lsls	r3, r3, #20
 8010c72:	693a      	ldr	r2, [r7, #16]
 8010c74:	4313      	orrs	r3, r2
 8010c76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	4a19      	ldr	r2, [pc, #100]	; (8010ce0 <TIM_OC6_SetConfig+0xb8>)
 8010c7c:	4293      	cmp	r3, r2
 8010c7e:	d00f      	beq.n	8010ca0 <TIM_OC6_SetConfig+0x78>
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	4a18      	ldr	r2, [pc, #96]	; (8010ce4 <TIM_OC6_SetConfig+0xbc>)
 8010c84:	4293      	cmp	r3, r2
 8010c86:	d00b      	beq.n	8010ca0 <TIM_OC6_SetConfig+0x78>
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	4a17      	ldr	r2, [pc, #92]	; (8010ce8 <TIM_OC6_SetConfig+0xc0>)
 8010c8c:	4293      	cmp	r3, r2
 8010c8e:	d007      	beq.n	8010ca0 <TIM_OC6_SetConfig+0x78>
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	4a16      	ldr	r2, [pc, #88]	; (8010cec <TIM_OC6_SetConfig+0xc4>)
 8010c94:	4293      	cmp	r3, r2
 8010c96:	d003      	beq.n	8010ca0 <TIM_OC6_SetConfig+0x78>
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	4a15      	ldr	r2, [pc, #84]	; (8010cf0 <TIM_OC6_SetConfig+0xc8>)
 8010c9c:	4293      	cmp	r3, r2
 8010c9e:	d109      	bne.n	8010cb4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010ca0:	697b      	ldr	r3, [r7, #20]
 8010ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010ca6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010ca8:	683b      	ldr	r3, [r7, #0]
 8010caa:	695b      	ldr	r3, [r3, #20]
 8010cac:	029b      	lsls	r3, r3, #10
 8010cae:	697a      	ldr	r2, [r7, #20]
 8010cb0:	4313      	orrs	r3, r2
 8010cb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	697a      	ldr	r2, [r7, #20]
 8010cb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	68fa      	ldr	r2, [r7, #12]
 8010cbe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010cc0:	683b      	ldr	r3, [r7, #0]
 8010cc2:	685a      	ldr	r2, [r3, #4]
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	693a      	ldr	r2, [r7, #16]
 8010ccc:	621a      	str	r2, [r3, #32]
}
 8010cce:	bf00      	nop
 8010cd0:	371c      	adds	r7, #28
 8010cd2:	46bd      	mov	sp, r7
 8010cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd8:	4770      	bx	lr
 8010cda:	bf00      	nop
 8010cdc:	feff8fff 	.word	0xfeff8fff
 8010ce0:	40010000 	.word	0x40010000
 8010ce4:	40010400 	.word	0x40010400
 8010ce8:	40014000 	.word	0x40014000
 8010cec:	40014400 	.word	0x40014400
 8010cf0:	40014800 	.word	0x40014800

08010cf4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010cf4:	b480      	push	{r7}
 8010cf6:	b087      	sub	sp, #28
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	60f8      	str	r0, [r7, #12]
 8010cfc:	60b9      	str	r1, [r7, #8]
 8010cfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010d00:	68bb      	ldr	r3, [r7, #8]
 8010d02:	f003 031f 	and.w	r3, r3, #31
 8010d06:	2201      	movs	r2, #1
 8010d08:	fa02 f303 	lsl.w	r3, r2, r3
 8010d0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	6a1a      	ldr	r2, [r3, #32]
 8010d12:	697b      	ldr	r3, [r7, #20]
 8010d14:	43db      	mvns	r3, r3
 8010d16:	401a      	ands	r2, r3
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	6a1a      	ldr	r2, [r3, #32]
 8010d20:	68bb      	ldr	r3, [r7, #8]
 8010d22:	f003 031f 	and.w	r3, r3, #31
 8010d26:	6879      	ldr	r1, [r7, #4]
 8010d28:	fa01 f303 	lsl.w	r3, r1, r3
 8010d2c:	431a      	orrs	r2, r3
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	621a      	str	r2, [r3, #32]
}
 8010d32:	bf00      	nop
 8010d34:	371c      	adds	r7, #28
 8010d36:	46bd      	mov	sp, r7
 8010d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3c:	4770      	bx	lr
	...

08010d40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010d40:	b480      	push	{r7}
 8010d42:	b085      	sub	sp, #20
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
 8010d48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010d50:	2b01      	cmp	r3, #1
 8010d52:	d101      	bne.n	8010d58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010d54:	2302      	movs	r3, #2
 8010d56:	e077      	b.n	8010e48 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	2201      	movs	r2, #1
 8010d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	2202      	movs	r2, #2
 8010d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	685b      	ldr	r3, [r3, #4]
 8010d6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	689b      	ldr	r3, [r3, #8]
 8010d76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	4a35      	ldr	r2, [pc, #212]	; (8010e54 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010d7e:	4293      	cmp	r3, r2
 8010d80:	d004      	beq.n	8010d8c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	4a34      	ldr	r2, [pc, #208]	; (8010e58 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010d88:	4293      	cmp	r3, r2
 8010d8a:	d108      	bne.n	8010d9e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010d92:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010d94:	683b      	ldr	r3, [r7, #0]
 8010d96:	685b      	ldr	r3, [r3, #4]
 8010d98:	68fa      	ldr	r2, [r7, #12]
 8010d9a:	4313      	orrs	r3, r2
 8010d9c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010da4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010da6:	683b      	ldr	r3, [r7, #0]
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	68fa      	ldr	r2, [r7, #12]
 8010dac:	4313      	orrs	r3, r2
 8010dae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	68fa      	ldr	r2, [r7, #12]
 8010db6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	4a25      	ldr	r2, [pc, #148]	; (8010e54 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010dbe:	4293      	cmp	r3, r2
 8010dc0:	d02c      	beq.n	8010e1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010dca:	d027      	beq.n	8010e1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	4a22      	ldr	r2, [pc, #136]	; (8010e5c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8010dd2:	4293      	cmp	r3, r2
 8010dd4:	d022      	beq.n	8010e1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	4a21      	ldr	r2, [pc, #132]	; (8010e60 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8010ddc:	4293      	cmp	r3, r2
 8010dde:	d01d      	beq.n	8010e1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	4a1f      	ldr	r2, [pc, #124]	; (8010e64 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8010de6:	4293      	cmp	r3, r2
 8010de8:	d018      	beq.n	8010e1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	4a1a      	ldr	r2, [pc, #104]	; (8010e58 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010df0:	4293      	cmp	r3, r2
 8010df2:	d013      	beq.n	8010e1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	4a1b      	ldr	r2, [pc, #108]	; (8010e68 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8010dfa:	4293      	cmp	r3, r2
 8010dfc:	d00e      	beq.n	8010e1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	4a1a      	ldr	r2, [pc, #104]	; (8010e6c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8010e04:	4293      	cmp	r3, r2
 8010e06:	d009      	beq.n	8010e1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	4a18      	ldr	r2, [pc, #96]	; (8010e70 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8010e0e:	4293      	cmp	r3, r2
 8010e10:	d004      	beq.n	8010e1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	4a17      	ldr	r2, [pc, #92]	; (8010e74 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8010e18:	4293      	cmp	r3, r2
 8010e1a:	d10c      	bne.n	8010e36 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010e1c:	68bb      	ldr	r3, [r7, #8]
 8010e1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010e22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010e24:	683b      	ldr	r3, [r7, #0]
 8010e26:	689b      	ldr	r3, [r3, #8]
 8010e28:	68ba      	ldr	r2, [r7, #8]
 8010e2a:	4313      	orrs	r3, r2
 8010e2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	68ba      	ldr	r2, [r7, #8]
 8010e34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	2201      	movs	r2, #1
 8010e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	2200      	movs	r2, #0
 8010e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010e46:	2300      	movs	r3, #0
}
 8010e48:	4618      	mov	r0, r3
 8010e4a:	3714      	adds	r7, #20
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e52:	4770      	bx	lr
 8010e54:	40010000 	.word	0x40010000
 8010e58:	40010400 	.word	0x40010400
 8010e5c:	40000400 	.word	0x40000400
 8010e60:	40000800 	.word	0x40000800
 8010e64:	40000c00 	.word	0x40000c00
 8010e68:	40001800 	.word	0x40001800
 8010e6c:	40014000 	.word	0x40014000
 8010e70:	4000e000 	.word	0x4000e000
 8010e74:	4000e400 	.word	0x4000e400

08010e78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010e78:	b480      	push	{r7}
 8010e7a:	b083      	sub	sp, #12
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010e80:	bf00      	nop
 8010e82:	370c      	adds	r7, #12
 8010e84:	46bd      	mov	sp, r7
 8010e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8a:	4770      	bx	lr

08010e8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010e8c:	b480      	push	{r7}
 8010e8e:	b083      	sub	sp, #12
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010e94:	bf00      	nop
 8010e96:	370c      	adds	r7, #12
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9e:	4770      	bx	lr

08010ea0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010ea0:	b480      	push	{r7}
 8010ea2:	b083      	sub	sp, #12
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010ea8:	bf00      	nop
 8010eaa:	370c      	adds	r7, #12
 8010eac:	46bd      	mov	sp, r7
 8010eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb2:	4770      	bx	lr

08010eb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b082      	sub	sp, #8
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d101      	bne.n	8010ec6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010ec2:	2301      	movs	r3, #1
 8010ec4:	e042      	b.n	8010f4c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d106      	bne.n	8010ede <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	2200      	movs	r2, #0
 8010ed4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010ed8:	6878      	ldr	r0, [r7, #4]
 8010eda:	f7f2 fcb1 	bl	8003840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	2224      	movs	r2, #36	; 0x24
 8010ee2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	681a      	ldr	r2, [r3, #0]
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	f022 0201 	bic.w	r2, r2, #1
 8010ef4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010ef6:	6878      	ldr	r0, [r7, #4]
 8010ef8:	f000 f82c 	bl	8010f54 <UART_SetConfig>
 8010efc:	4603      	mov	r3, r0
 8010efe:	2b01      	cmp	r3, #1
 8010f00:	d101      	bne.n	8010f06 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8010f02:	2301      	movs	r3, #1
 8010f04:	e022      	b.n	8010f4c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d002      	beq.n	8010f14 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8010f0e:	6878      	ldr	r0, [r7, #4]
 8010f10:	f000 fe8c 	bl	8011c2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	685a      	ldr	r2, [r3, #4]
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010f22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	689a      	ldr	r2, [r3, #8]
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010f32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	681a      	ldr	r2, [r3, #0]
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	f042 0201 	orr.w	r2, r2, #1
 8010f42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010f44:	6878      	ldr	r0, [r7, #4]
 8010f46:	f000 ff13 	bl	8011d70 <UART_CheckIdleState>
 8010f4a:	4603      	mov	r3, r0
}
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	3708      	adds	r7, #8
 8010f50:	46bd      	mov	sp, r7
 8010f52:	bd80      	pop	{r7, pc}

08010f54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010f54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010f58:	b092      	sub	sp, #72	; 0x48
 8010f5a:	af00      	add	r7, sp, #0
 8010f5c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010f5e:	2300      	movs	r3, #0
 8010f60:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010f64:	697b      	ldr	r3, [r7, #20]
 8010f66:	689a      	ldr	r2, [r3, #8]
 8010f68:	697b      	ldr	r3, [r7, #20]
 8010f6a:	691b      	ldr	r3, [r3, #16]
 8010f6c:	431a      	orrs	r2, r3
 8010f6e:	697b      	ldr	r3, [r7, #20]
 8010f70:	695b      	ldr	r3, [r3, #20]
 8010f72:	431a      	orrs	r2, r3
 8010f74:	697b      	ldr	r3, [r7, #20]
 8010f76:	69db      	ldr	r3, [r3, #28]
 8010f78:	4313      	orrs	r3, r2
 8010f7a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010f7c:	697b      	ldr	r3, [r7, #20]
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	681a      	ldr	r2, [r3, #0]
 8010f82:	4bbe      	ldr	r3, [pc, #760]	; (801127c <UART_SetConfig+0x328>)
 8010f84:	4013      	ands	r3, r2
 8010f86:	697a      	ldr	r2, [r7, #20]
 8010f88:	6812      	ldr	r2, [r2, #0]
 8010f8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010f8c:	430b      	orrs	r3, r1
 8010f8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010f90:	697b      	ldr	r3, [r7, #20]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	685b      	ldr	r3, [r3, #4]
 8010f96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010f9a:	697b      	ldr	r3, [r7, #20]
 8010f9c:	68da      	ldr	r2, [r3, #12]
 8010f9e:	697b      	ldr	r3, [r7, #20]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	430a      	orrs	r2, r1
 8010fa4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010fa6:	697b      	ldr	r3, [r7, #20]
 8010fa8:	699b      	ldr	r3, [r3, #24]
 8010faa:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010fac:	697b      	ldr	r3, [r7, #20]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	4ab3      	ldr	r2, [pc, #716]	; (8011280 <UART_SetConfig+0x32c>)
 8010fb2:	4293      	cmp	r3, r2
 8010fb4:	d004      	beq.n	8010fc0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010fb6:	697b      	ldr	r3, [r7, #20]
 8010fb8:	6a1b      	ldr	r3, [r3, #32]
 8010fba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010fbc:	4313      	orrs	r3, r2
 8010fbe:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010fc0:	697b      	ldr	r3, [r7, #20]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	689a      	ldr	r2, [r3, #8]
 8010fc6:	4baf      	ldr	r3, [pc, #700]	; (8011284 <UART_SetConfig+0x330>)
 8010fc8:	4013      	ands	r3, r2
 8010fca:	697a      	ldr	r2, [r7, #20]
 8010fcc:	6812      	ldr	r2, [r2, #0]
 8010fce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010fd0:	430b      	orrs	r3, r1
 8010fd2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010fd4:	697b      	ldr	r3, [r7, #20]
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fda:	f023 010f 	bic.w	r1, r3, #15
 8010fde:	697b      	ldr	r3, [r7, #20]
 8010fe0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010fe2:	697b      	ldr	r3, [r7, #20]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	430a      	orrs	r2, r1
 8010fe8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010fea:	697b      	ldr	r3, [r7, #20]
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	4aa6      	ldr	r2, [pc, #664]	; (8011288 <UART_SetConfig+0x334>)
 8010ff0:	4293      	cmp	r3, r2
 8010ff2:	d177      	bne.n	80110e4 <UART_SetConfig+0x190>
 8010ff4:	4ba5      	ldr	r3, [pc, #660]	; (801128c <UART_SetConfig+0x338>)
 8010ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ff8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010ffc:	2b28      	cmp	r3, #40	; 0x28
 8010ffe:	d86d      	bhi.n	80110dc <UART_SetConfig+0x188>
 8011000:	a201      	add	r2, pc, #4	; (adr r2, 8011008 <UART_SetConfig+0xb4>)
 8011002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011006:	bf00      	nop
 8011008:	080110ad 	.word	0x080110ad
 801100c:	080110dd 	.word	0x080110dd
 8011010:	080110dd 	.word	0x080110dd
 8011014:	080110dd 	.word	0x080110dd
 8011018:	080110dd 	.word	0x080110dd
 801101c:	080110dd 	.word	0x080110dd
 8011020:	080110dd 	.word	0x080110dd
 8011024:	080110dd 	.word	0x080110dd
 8011028:	080110b5 	.word	0x080110b5
 801102c:	080110dd 	.word	0x080110dd
 8011030:	080110dd 	.word	0x080110dd
 8011034:	080110dd 	.word	0x080110dd
 8011038:	080110dd 	.word	0x080110dd
 801103c:	080110dd 	.word	0x080110dd
 8011040:	080110dd 	.word	0x080110dd
 8011044:	080110dd 	.word	0x080110dd
 8011048:	080110bd 	.word	0x080110bd
 801104c:	080110dd 	.word	0x080110dd
 8011050:	080110dd 	.word	0x080110dd
 8011054:	080110dd 	.word	0x080110dd
 8011058:	080110dd 	.word	0x080110dd
 801105c:	080110dd 	.word	0x080110dd
 8011060:	080110dd 	.word	0x080110dd
 8011064:	080110dd 	.word	0x080110dd
 8011068:	080110c5 	.word	0x080110c5
 801106c:	080110dd 	.word	0x080110dd
 8011070:	080110dd 	.word	0x080110dd
 8011074:	080110dd 	.word	0x080110dd
 8011078:	080110dd 	.word	0x080110dd
 801107c:	080110dd 	.word	0x080110dd
 8011080:	080110dd 	.word	0x080110dd
 8011084:	080110dd 	.word	0x080110dd
 8011088:	080110cd 	.word	0x080110cd
 801108c:	080110dd 	.word	0x080110dd
 8011090:	080110dd 	.word	0x080110dd
 8011094:	080110dd 	.word	0x080110dd
 8011098:	080110dd 	.word	0x080110dd
 801109c:	080110dd 	.word	0x080110dd
 80110a0:	080110dd 	.word	0x080110dd
 80110a4:	080110dd 	.word	0x080110dd
 80110a8:	080110d5 	.word	0x080110d5
 80110ac:	2301      	movs	r3, #1
 80110ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110b2:	e326      	b.n	8011702 <UART_SetConfig+0x7ae>
 80110b4:	2304      	movs	r3, #4
 80110b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110ba:	e322      	b.n	8011702 <UART_SetConfig+0x7ae>
 80110bc:	2308      	movs	r3, #8
 80110be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110c2:	e31e      	b.n	8011702 <UART_SetConfig+0x7ae>
 80110c4:	2310      	movs	r3, #16
 80110c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110ca:	e31a      	b.n	8011702 <UART_SetConfig+0x7ae>
 80110cc:	2320      	movs	r3, #32
 80110ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110d2:	e316      	b.n	8011702 <UART_SetConfig+0x7ae>
 80110d4:	2340      	movs	r3, #64	; 0x40
 80110d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110da:	e312      	b.n	8011702 <UART_SetConfig+0x7ae>
 80110dc:	2380      	movs	r3, #128	; 0x80
 80110de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110e2:	e30e      	b.n	8011702 <UART_SetConfig+0x7ae>
 80110e4:	697b      	ldr	r3, [r7, #20]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	4a69      	ldr	r2, [pc, #420]	; (8011290 <UART_SetConfig+0x33c>)
 80110ea:	4293      	cmp	r3, r2
 80110ec:	d130      	bne.n	8011150 <UART_SetConfig+0x1fc>
 80110ee:	4b67      	ldr	r3, [pc, #412]	; (801128c <UART_SetConfig+0x338>)
 80110f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80110f2:	f003 0307 	and.w	r3, r3, #7
 80110f6:	2b05      	cmp	r3, #5
 80110f8:	d826      	bhi.n	8011148 <UART_SetConfig+0x1f4>
 80110fa:	a201      	add	r2, pc, #4	; (adr r2, 8011100 <UART_SetConfig+0x1ac>)
 80110fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011100:	08011119 	.word	0x08011119
 8011104:	08011121 	.word	0x08011121
 8011108:	08011129 	.word	0x08011129
 801110c:	08011131 	.word	0x08011131
 8011110:	08011139 	.word	0x08011139
 8011114:	08011141 	.word	0x08011141
 8011118:	2300      	movs	r3, #0
 801111a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801111e:	e2f0      	b.n	8011702 <UART_SetConfig+0x7ae>
 8011120:	2304      	movs	r3, #4
 8011122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011126:	e2ec      	b.n	8011702 <UART_SetConfig+0x7ae>
 8011128:	2308      	movs	r3, #8
 801112a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801112e:	e2e8      	b.n	8011702 <UART_SetConfig+0x7ae>
 8011130:	2310      	movs	r3, #16
 8011132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011136:	e2e4      	b.n	8011702 <UART_SetConfig+0x7ae>
 8011138:	2320      	movs	r3, #32
 801113a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801113e:	e2e0      	b.n	8011702 <UART_SetConfig+0x7ae>
 8011140:	2340      	movs	r3, #64	; 0x40
 8011142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011146:	e2dc      	b.n	8011702 <UART_SetConfig+0x7ae>
 8011148:	2380      	movs	r3, #128	; 0x80
 801114a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801114e:	e2d8      	b.n	8011702 <UART_SetConfig+0x7ae>
 8011150:	697b      	ldr	r3, [r7, #20]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	4a4f      	ldr	r2, [pc, #316]	; (8011294 <UART_SetConfig+0x340>)
 8011156:	4293      	cmp	r3, r2
 8011158:	d130      	bne.n	80111bc <UART_SetConfig+0x268>
 801115a:	4b4c      	ldr	r3, [pc, #304]	; (801128c <UART_SetConfig+0x338>)
 801115c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801115e:	f003 0307 	and.w	r3, r3, #7
 8011162:	2b05      	cmp	r3, #5
 8011164:	d826      	bhi.n	80111b4 <UART_SetConfig+0x260>
 8011166:	a201      	add	r2, pc, #4	; (adr r2, 801116c <UART_SetConfig+0x218>)
 8011168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801116c:	08011185 	.word	0x08011185
 8011170:	0801118d 	.word	0x0801118d
 8011174:	08011195 	.word	0x08011195
 8011178:	0801119d 	.word	0x0801119d
 801117c:	080111a5 	.word	0x080111a5
 8011180:	080111ad 	.word	0x080111ad
 8011184:	2300      	movs	r3, #0
 8011186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801118a:	e2ba      	b.n	8011702 <UART_SetConfig+0x7ae>
 801118c:	2304      	movs	r3, #4
 801118e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011192:	e2b6      	b.n	8011702 <UART_SetConfig+0x7ae>
 8011194:	2308      	movs	r3, #8
 8011196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801119a:	e2b2      	b.n	8011702 <UART_SetConfig+0x7ae>
 801119c:	2310      	movs	r3, #16
 801119e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111a2:	e2ae      	b.n	8011702 <UART_SetConfig+0x7ae>
 80111a4:	2320      	movs	r3, #32
 80111a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111aa:	e2aa      	b.n	8011702 <UART_SetConfig+0x7ae>
 80111ac:	2340      	movs	r3, #64	; 0x40
 80111ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111b2:	e2a6      	b.n	8011702 <UART_SetConfig+0x7ae>
 80111b4:	2380      	movs	r3, #128	; 0x80
 80111b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ba:	e2a2      	b.n	8011702 <UART_SetConfig+0x7ae>
 80111bc:	697b      	ldr	r3, [r7, #20]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	4a35      	ldr	r2, [pc, #212]	; (8011298 <UART_SetConfig+0x344>)
 80111c2:	4293      	cmp	r3, r2
 80111c4:	d130      	bne.n	8011228 <UART_SetConfig+0x2d4>
 80111c6:	4b31      	ldr	r3, [pc, #196]	; (801128c <UART_SetConfig+0x338>)
 80111c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80111ca:	f003 0307 	and.w	r3, r3, #7
 80111ce:	2b05      	cmp	r3, #5
 80111d0:	d826      	bhi.n	8011220 <UART_SetConfig+0x2cc>
 80111d2:	a201      	add	r2, pc, #4	; (adr r2, 80111d8 <UART_SetConfig+0x284>)
 80111d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111d8:	080111f1 	.word	0x080111f1
 80111dc:	080111f9 	.word	0x080111f9
 80111e0:	08011201 	.word	0x08011201
 80111e4:	08011209 	.word	0x08011209
 80111e8:	08011211 	.word	0x08011211
 80111ec:	08011219 	.word	0x08011219
 80111f0:	2300      	movs	r3, #0
 80111f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111f6:	e284      	b.n	8011702 <UART_SetConfig+0x7ae>
 80111f8:	2304      	movs	r3, #4
 80111fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111fe:	e280      	b.n	8011702 <UART_SetConfig+0x7ae>
 8011200:	2308      	movs	r3, #8
 8011202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011206:	e27c      	b.n	8011702 <UART_SetConfig+0x7ae>
 8011208:	2310      	movs	r3, #16
 801120a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801120e:	e278      	b.n	8011702 <UART_SetConfig+0x7ae>
 8011210:	2320      	movs	r3, #32
 8011212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011216:	e274      	b.n	8011702 <UART_SetConfig+0x7ae>
 8011218:	2340      	movs	r3, #64	; 0x40
 801121a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801121e:	e270      	b.n	8011702 <UART_SetConfig+0x7ae>
 8011220:	2380      	movs	r3, #128	; 0x80
 8011222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011226:	e26c      	b.n	8011702 <UART_SetConfig+0x7ae>
 8011228:	697b      	ldr	r3, [r7, #20]
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	4a1b      	ldr	r2, [pc, #108]	; (801129c <UART_SetConfig+0x348>)
 801122e:	4293      	cmp	r3, r2
 8011230:	d142      	bne.n	80112b8 <UART_SetConfig+0x364>
 8011232:	4b16      	ldr	r3, [pc, #88]	; (801128c <UART_SetConfig+0x338>)
 8011234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011236:	f003 0307 	and.w	r3, r3, #7
 801123a:	2b05      	cmp	r3, #5
 801123c:	d838      	bhi.n	80112b0 <UART_SetConfig+0x35c>
 801123e:	a201      	add	r2, pc, #4	; (adr r2, 8011244 <UART_SetConfig+0x2f0>)
 8011240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011244:	0801125d 	.word	0x0801125d
 8011248:	08011265 	.word	0x08011265
 801124c:	0801126d 	.word	0x0801126d
 8011250:	08011275 	.word	0x08011275
 8011254:	080112a1 	.word	0x080112a1
 8011258:	080112a9 	.word	0x080112a9
 801125c:	2300      	movs	r3, #0
 801125e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011262:	e24e      	b.n	8011702 <UART_SetConfig+0x7ae>
 8011264:	2304      	movs	r3, #4
 8011266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801126a:	e24a      	b.n	8011702 <UART_SetConfig+0x7ae>
 801126c:	2308      	movs	r3, #8
 801126e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011272:	e246      	b.n	8011702 <UART_SetConfig+0x7ae>
 8011274:	2310      	movs	r3, #16
 8011276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801127a:	e242      	b.n	8011702 <UART_SetConfig+0x7ae>
 801127c:	cfff69f3 	.word	0xcfff69f3
 8011280:	58000c00 	.word	0x58000c00
 8011284:	11fff4ff 	.word	0x11fff4ff
 8011288:	40011000 	.word	0x40011000
 801128c:	58024400 	.word	0x58024400
 8011290:	40004400 	.word	0x40004400
 8011294:	40004800 	.word	0x40004800
 8011298:	40004c00 	.word	0x40004c00
 801129c:	40005000 	.word	0x40005000
 80112a0:	2320      	movs	r3, #32
 80112a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112a6:	e22c      	b.n	8011702 <UART_SetConfig+0x7ae>
 80112a8:	2340      	movs	r3, #64	; 0x40
 80112aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112ae:	e228      	b.n	8011702 <UART_SetConfig+0x7ae>
 80112b0:	2380      	movs	r3, #128	; 0x80
 80112b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112b6:	e224      	b.n	8011702 <UART_SetConfig+0x7ae>
 80112b8:	697b      	ldr	r3, [r7, #20]
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	4ab1      	ldr	r2, [pc, #708]	; (8011584 <UART_SetConfig+0x630>)
 80112be:	4293      	cmp	r3, r2
 80112c0:	d176      	bne.n	80113b0 <UART_SetConfig+0x45c>
 80112c2:	4bb1      	ldr	r3, [pc, #708]	; (8011588 <UART_SetConfig+0x634>)
 80112c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80112c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80112ca:	2b28      	cmp	r3, #40	; 0x28
 80112cc:	d86c      	bhi.n	80113a8 <UART_SetConfig+0x454>
 80112ce:	a201      	add	r2, pc, #4	; (adr r2, 80112d4 <UART_SetConfig+0x380>)
 80112d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112d4:	08011379 	.word	0x08011379
 80112d8:	080113a9 	.word	0x080113a9
 80112dc:	080113a9 	.word	0x080113a9
 80112e0:	080113a9 	.word	0x080113a9
 80112e4:	080113a9 	.word	0x080113a9
 80112e8:	080113a9 	.word	0x080113a9
 80112ec:	080113a9 	.word	0x080113a9
 80112f0:	080113a9 	.word	0x080113a9
 80112f4:	08011381 	.word	0x08011381
 80112f8:	080113a9 	.word	0x080113a9
 80112fc:	080113a9 	.word	0x080113a9
 8011300:	080113a9 	.word	0x080113a9
 8011304:	080113a9 	.word	0x080113a9
 8011308:	080113a9 	.word	0x080113a9
 801130c:	080113a9 	.word	0x080113a9
 8011310:	080113a9 	.word	0x080113a9
 8011314:	08011389 	.word	0x08011389
 8011318:	080113a9 	.word	0x080113a9
 801131c:	080113a9 	.word	0x080113a9
 8011320:	080113a9 	.word	0x080113a9
 8011324:	080113a9 	.word	0x080113a9
 8011328:	080113a9 	.word	0x080113a9
 801132c:	080113a9 	.word	0x080113a9
 8011330:	080113a9 	.word	0x080113a9
 8011334:	08011391 	.word	0x08011391
 8011338:	080113a9 	.word	0x080113a9
 801133c:	080113a9 	.word	0x080113a9
 8011340:	080113a9 	.word	0x080113a9
 8011344:	080113a9 	.word	0x080113a9
 8011348:	080113a9 	.word	0x080113a9
 801134c:	080113a9 	.word	0x080113a9
 8011350:	080113a9 	.word	0x080113a9
 8011354:	08011399 	.word	0x08011399
 8011358:	080113a9 	.word	0x080113a9
 801135c:	080113a9 	.word	0x080113a9
 8011360:	080113a9 	.word	0x080113a9
 8011364:	080113a9 	.word	0x080113a9
 8011368:	080113a9 	.word	0x080113a9
 801136c:	080113a9 	.word	0x080113a9
 8011370:	080113a9 	.word	0x080113a9
 8011374:	080113a1 	.word	0x080113a1
 8011378:	2301      	movs	r3, #1
 801137a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801137e:	e1c0      	b.n	8011702 <UART_SetConfig+0x7ae>
 8011380:	2304      	movs	r3, #4
 8011382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011386:	e1bc      	b.n	8011702 <UART_SetConfig+0x7ae>
 8011388:	2308      	movs	r3, #8
 801138a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801138e:	e1b8      	b.n	8011702 <UART_SetConfig+0x7ae>
 8011390:	2310      	movs	r3, #16
 8011392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011396:	e1b4      	b.n	8011702 <UART_SetConfig+0x7ae>
 8011398:	2320      	movs	r3, #32
 801139a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801139e:	e1b0      	b.n	8011702 <UART_SetConfig+0x7ae>
 80113a0:	2340      	movs	r3, #64	; 0x40
 80113a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113a6:	e1ac      	b.n	8011702 <UART_SetConfig+0x7ae>
 80113a8:	2380      	movs	r3, #128	; 0x80
 80113aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113ae:	e1a8      	b.n	8011702 <UART_SetConfig+0x7ae>
 80113b0:	697b      	ldr	r3, [r7, #20]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	4a75      	ldr	r2, [pc, #468]	; (801158c <UART_SetConfig+0x638>)
 80113b6:	4293      	cmp	r3, r2
 80113b8:	d130      	bne.n	801141c <UART_SetConfig+0x4c8>
 80113ba:	4b73      	ldr	r3, [pc, #460]	; (8011588 <UART_SetConfig+0x634>)
 80113bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80113be:	f003 0307 	and.w	r3, r3, #7
 80113c2:	2b05      	cmp	r3, #5
 80113c4:	d826      	bhi.n	8011414 <UART_SetConfig+0x4c0>
 80113c6:	a201      	add	r2, pc, #4	; (adr r2, 80113cc <UART_SetConfig+0x478>)
 80113c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113cc:	080113e5 	.word	0x080113e5
 80113d0:	080113ed 	.word	0x080113ed
 80113d4:	080113f5 	.word	0x080113f5
 80113d8:	080113fd 	.word	0x080113fd
 80113dc:	08011405 	.word	0x08011405
 80113e0:	0801140d 	.word	0x0801140d
 80113e4:	2300      	movs	r3, #0
 80113e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113ea:	e18a      	b.n	8011702 <UART_SetConfig+0x7ae>
 80113ec:	2304      	movs	r3, #4
 80113ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113f2:	e186      	b.n	8011702 <UART_SetConfig+0x7ae>
 80113f4:	2308      	movs	r3, #8
 80113f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113fa:	e182      	b.n	8011702 <UART_SetConfig+0x7ae>
 80113fc:	2310      	movs	r3, #16
 80113fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011402:	e17e      	b.n	8011702 <UART_SetConfig+0x7ae>
 8011404:	2320      	movs	r3, #32
 8011406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801140a:	e17a      	b.n	8011702 <UART_SetConfig+0x7ae>
 801140c:	2340      	movs	r3, #64	; 0x40
 801140e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011412:	e176      	b.n	8011702 <UART_SetConfig+0x7ae>
 8011414:	2380      	movs	r3, #128	; 0x80
 8011416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801141a:	e172      	b.n	8011702 <UART_SetConfig+0x7ae>
 801141c:	697b      	ldr	r3, [r7, #20]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	4a5b      	ldr	r2, [pc, #364]	; (8011590 <UART_SetConfig+0x63c>)
 8011422:	4293      	cmp	r3, r2
 8011424:	d130      	bne.n	8011488 <UART_SetConfig+0x534>
 8011426:	4b58      	ldr	r3, [pc, #352]	; (8011588 <UART_SetConfig+0x634>)
 8011428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801142a:	f003 0307 	and.w	r3, r3, #7
 801142e:	2b05      	cmp	r3, #5
 8011430:	d826      	bhi.n	8011480 <UART_SetConfig+0x52c>
 8011432:	a201      	add	r2, pc, #4	; (adr r2, 8011438 <UART_SetConfig+0x4e4>)
 8011434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011438:	08011451 	.word	0x08011451
 801143c:	08011459 	.word	0x08011459
 8011440:	08011461 	.word	0x08011461
 8011444:	08011469 	.word	0x08011469
 8011448:	08011471 	.word	0x08011471
 801144c:	08011479 	.word	0x08011479
 8011450:	2300      	movs	r3, #0
 8011452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011456:	e154      	b.n	8011702 <UART_SetConfig+0x7ae>
 8011458:	2304      	movs	r3, #4
 801145a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801145e:	e150      	b.n	8011702 <UART_SetConfig+0x7ae>
 8011460:	2308      	movs	r3, #8
 8011462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011466:	e14c      	b.n	8011702 <UART_SetConfig+0x7ae>
 8011468:	2310      	movs	r3, #16
 801146a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801146e:	e148      	b.n	8011702 <UART_SetConfig+0x7ae>
 8011470:	2320      	movs	r3, #32
 8011472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011476:	e144      	b.n	8011702 <UART_SetConfig+0x7ae>
 8011478:	2340      	movs	r3, #64	; 0x40
 801147a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801147e:	e140      	b.n	8011702 <UART_SetConfig+0x7ae>
 8011480:	2380      	movs	r3, #128	; 0x80
 8011482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011486:	e13c      	b.n	8011702 <UART_SetConfig+0x7ae>
 8011488:	697b      	ldr	r3, [r7, #20]
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	4a41      	ldr	r2, [pc, #260]	; (8011594 <UART_SetConfig+0x640>)
 801148e:	4293      	cmp	r3, r2
 8011490:	f040 8082 	bne.w	8011598 <UART_SetConfig+0x644>
 8011494:	4b3c      	ldr	r3, [pc, #240]	; (8011588 <UART_SetConfig+0x634>)
 8011496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011498:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801149c:	2b28      	cmp	r3, #40	; 0x28
 801149e:	d86d      	bhi.n	801157c <UART_SetConfig+0x628>
 80114a0:	a201      	add	r2, pc, #4	; (adr r2, 80114a8 <UART_SetConfig+0x554>)
 80114a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114a6:	bf00      	nop
 80114a8:	0801154d 	.word	0x0801154d
 80114ac:	0801157d 	.word	0x0801157d
 80114b0:	0801157d 	.word	0x0801157d
 80114b4:	0801157d 	.word	0x0801157d
 80114b8:	0801157d 	.word	0x0801157d
 80114bc:	0801157d 	.word	0x0801157d
 80114c0:	0801157d 	.word	0x0801157d
 80114c4:	0801157d 	.word	0x0801157d
 80114c8:	08011555 	.word	0x08011555
 80114cc:	0801157d 	.word	0x0801157d
 80114d0:	0801157d 	.word	0x0801157d
 80114d4:	0801157d 	.word	0x0801157d
 80114d8:	0801157d 	.word	0x0801157d
 80114dc:	0801157d 	.word	0x0801157d
 80114e0:	0801157d 	.word	0x0801157d
 80114e4:	0801157d 	.word	0x0801157d
 80114e8:	0801155d 	.word	0x0801155d
 80114ec:	0801157d 	.word	0x0801157d
 80114f0:	0801157d 	.word	0x0801157d
 80114f4:	0801157d 	.word	0x0801157d
 80114f8:	0801157d 	.word	0x0801157d
 80114fc:	0801157d 	.word	0x0801157d
 8011500:	0801157d 	.word	0x0801157d
 8011504:	0801157d 	.word	0x0801157d
 8011508:	08011565 	.word	0x08011565
 801150c:	0801157d 	.word	0x0801157d
 8011510:	0801157d 	.word	0x0801157d
 8011514:	0801157d 	.word	0x0801157d
 8011518:	0801157d 	.word	0x0801157d
 801151c:	0801157d 	.word	0x0801157d
 8011520:	0801157d 	.word	0x0801157d
 8011524:	0801157d 	.word	0x0801157d
 8011528:	0801156d 	.word	0x0801156d
 801152c:	0801157d 	.word	0x0801157d
 8011530:	0801157d 	.word	0x0801157d
 8011534:	0801157d 	.word	0x0801157d
 8011538:	0801157d 	.word	0x0801157d
 801153c:	0801157d 	.word	0x0801157d
 8011540:	0801157d 	.word	0x0801157d
 8011544:	0801157d 	.word	0x0801157d
 8011548:	08011575 	.word	0x08011575
 801154c:	2301      	movs	r3, #1
 801154e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011552:	e0d6      	b.n	8011702 <UART_SetConfig+0x7ae>
 8011554:	2304      	movs	r3, #4
 8011556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801155a:	e0d2      	b.n	8011702 <UART_SetConfig+0x7ae>
 801155c:	2308      	movs	r3, #8
 801155e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011562:	e0ce      	b.n	8011702 <UART_SetConfig+0x7ae>
 8011564:	2310      	movs	r3, #16
 8011566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801156a:	e0ca      	b.n	8011702 <UART_SetConfig+0x7ae>
 801156c:	2320      	movs	r3, #32
 801156e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011572:	e0c6      	b.n	8011702 <UART_SetConfig+0x7ae>
 8011574:	2340      	movs	r3, #64	; 0x40
 8011576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801157a:	e0c2      	b.n	8011702 <UART_SetConfig+0x7ae>
 801157c:	2380      	movs	r3, #128	; 0x80
 801157e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011582:	e0be      	b.n	8011702 <UART_SetConfig+0x7ae>
 8011584:	40011400 	.word	0x40011400
 8011588:	58024400 	.word	0x58024400
 801158c:	40007800 	.word	0x40007800
 8011590:	40007c00 	.word	0x40007c00
 8011594:	40011800 	.word	0x40011800
 8011598:	697b      	ldr	r3, [r7, #20]
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	4aad      	ldr	r2, [pc, #692]	; (8011854 <UART_SetConfig+0x900>)
 801159e:	4293      	cmp	r3, r2
 80115a0:	d176      	bne.n	8011690 <UART_SetConfig+0x73c>
 80115a2:	4bad      	ldr	r3, [pc, #692]	; (8011858 <UART_SetConfig+0x904>)
 80115a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80115a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80115aa:	2b28      	cmp	r3, #40	; 0x28
 80115ac:	d86c      	bhi.n	8011688 <UART_SetConfig+0x734>
 80115ae:	a201      	add	r2, pc, #4	; (adr r2, 80115b4 <UART_SetConfig+0x660>)
 80115b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115b4:	08011659 	.word	0x08011659
 80115b8:	08011689 	.word	0x08011689
 80115bc:	08011689 	.word	0x08011689
 80115c0:	08011689 	.word	0x08011689
 80115c4:	08011689 	.word	0x08011689
 80115c8:	08011689 	.word	0x08011689
 80115cc:	08011689 	.word	0x08011689
 80115d0:	08011689 	.word	0x08011689
 80115d4:	08011661 	.word	0x08011661
 80115d8:	08011689 	.word	0x08011689
 80115dc:	08011689 	.word	0x08011689
 80115e0:	08011689 	.word	0x08011689
 80115e4:	08011689 	.word	0x08011689
 80115e8:	08011689 	.word	0x08011689
 80115ec:	08011689 	.word	0x08011689
 80115f0:	08011689 	.word	0x08011689
 80115f4:	08011669 	.word	0x08011669
 80115f8:	08011689 	.word	0x08011689
 80115fc:	08011689 	.word	0x08011689
 8011600:	08011689 	.word	0x08011689
 8011604:	08011689 	.word	0x08011689
 8011608:	08011689 	.word	0x08011689
 801160c:	08011689 	.word	0x08011689
 8011610:	08011689 	.word	0x08011689
 8011614:	08011671 	.word	0x08011671
 8011618:	08011689 	.word	0x08011689
 801161c:	08011689 	.word	0x08011689
 8011620:	08011689 	.word	0x08011689
 8011624:	08011689 	.word	0x08011689
 8011628:	08011689 	.word	0x08011689
 801162c:	08011689 	.word	0x08011689
 8011630:	08011689 	.word	0x08011689
 8011634:	08011679 	.word	0x08011679
 8011638:	08011689 	.word	0x08011689
 801163c:	08011689 	.word	0x08011689
 8011640:	08011689 	.word	0x08011689
 8011644:	08011689 	.word	0x08011689
 8011648:	08011689 	.word	0x08011689
 801164c:	08011689 	.word	0x08011689
 8011650:	08011689 	.word	0x08011689
 8011654:	08011681 	.word	0x08011681
 8011658:	2301      	movs	r3, #1
 801165a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801165e:	e050      	b.n	8011702 <UART_SetConfig+0x7ae>
 8011660:	2304      	movs	r3, #4
 8011662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011666:	e04c      	b.n	8011702 <UART_SetConfig+0x7ae>
 8011668:	2308      	movs	r3, #8
 801166a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801166e:	e048      	b.n	8011702 <UART_SetConfig+0x7ae>
 8011670:	2310      	movs	r3, #16
 8011672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011676:	e044      	b.n	8011702 <UART_SetConfig+0x7ae>
 8011678:	2320      	movs	r3, #32
 801167a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801167e:	e040      	b.n	8011702 <UART_SetConfig+0x7ae>
 8011680:	2340      	movs	r3, #64	; 0x40
 8011682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011686:	e03c      	b.n	8011702 <UART_SetConfig+0x7ae>
 8011688:	2380      	movs	r3, #128	; 0x80
 801168a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801168e:	e038      	b.n	8011702 <UART_SetConfig+0x7ae>
 8011690:	697b      	ldr	r3, [r7, #20]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	4a71      	ldr	r2, [pc, #452]	; (801185c <UART_SetConfig+0x908>)
 8011696:	4293      	cmp	r3, r2
 8011698:	d130      	bne.n	80116fc <UART_SetConfig+0x7a8>
 801169a:	4b6f      	ldr	r3, [pc, #444]	; (8011858 <UART_SetConfig+0x904>)
 801169c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801169e:	f003 0307 	and.w	r3, r3, #7
 80116a2:	2b05      	cmp	r3, #5
 80116a4:	d826      	bhi.n	80116f4 <UART_SetConfig+0x7a0>
 80116a6:	a201      	add	r2, pc, #4	; (adr r2, 80116ac <UART_SetConfig+0x758>)
 80116a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116ac:	080116c5 	.word	0x080116c5
 80116b0:	080116cd 	.word	0x080116cd
 80116b4:	080116d5 	.word	0x080116d5
 80116b8:	080116dd 	.word	0x080116dd
 80116bc:	080116e5 	.word	0x080116e5
 80116c0:	080116ed 	.word	0x080116ed
 80116c4:	2302      	movs	r3, #2
 80116c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116ca:	e01a      	b.n	8011702 <UART_SetConfig+0x7ae>
 80116cc:	2304      	movs	r3, #4
 80116ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116d2:	e016      	b.n	8011702 <UART_SetConfig+0x7ae>
 80116d4:	2308      	movs	r3, #8
 80116d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116da:	e012      	b.n	8011702 <UART_SetConfig+0x7ae>
 80116dc:	2310      	movs	r3, #16
 80116de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116e2:	e00e      	b.n	8011702 <UART_SetConfig+0x7ae>
 80116e4:	2320      	movs	r3, #32
 80116e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116ea:	e00a      	b.n	8011702 <UART_SetConfig+0x7ae>
 80116ec:	2340      	movs	r3, #64	; 0x40
 80116ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116f2:	e006      	b.n	8011702 <UART_SetConfig+0x7ae>
 80116f4:	2380      	movs	r3, #128	; 0x80
 80116f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116fa:	e002      	b.n	8011702 <UART_SetConfig+0x7ae>
 80116fc:	2380      	movs	r3, #128	; 0x80
 80116fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011702:	697b      	ldr	r3, [r7, #20]
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	4a55      	ldr	r2, [pc, #340]	; (801185c <UART_SetConfig+0x908>)
 8011708:	4293      	cmp	r3, r2
 801170a:	f040 80f8 	bne.w	80118fe <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801170e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011712:	2b20      	cmp	r3, #32
 8011714:	dc46      	bgt.n	80117a4 <UART_SetConfig+0x850>
 8011716:	2b02      	cmp	r3, #2
 8011718:	db75      	blt.n	8011806 <UART_SetConfig+0x8b2>
 801171a:	3b02      	subs	r3, #2
 801171c:	2b1e      	cmp	r3, #30
 801171e:	d872      	bhi.n	8011806 <UART_SetConfig+0x8b2>
 8011720:	a201      	add	r2, pc, #4	; (adr r2, 8011728 <UART_SetConfig+0x7d4>)
 8011722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011726:	bf00      	nop
 8011728:	080117ab 	.word	0x080117ab
 801172c:	08011807 	.word	0x08011807
 8011730:	080117b3 	.word	0x080117b3
 8011734:	08011807 	.word	0x08011807
 8011738:	08011807 	.word	0x08011807
 801173c:	08011807 	.word	0x08011807
 8011740:	080117c3 	.word	0x080117c3
 8011744:	08011807 	.word	0x08011807
 8011748:	08011807 	.word	0x08011807
 801174c:	08011807 	.word	0x08011807
 8011750:	08011807 	.word	0x08011807
 8011754:	08011807 	.word	0x08011807
 8011758:	08011807 	.word	0x08011807
 801175c:	08011807 	.word	0x08011807
 8011760:	080117d3 	.word	0x080117d3
 8011764:	08011807 	.word	0x08011807
 8011768:	08011807 	.word	0x08011807
 801176c:	08011807 	.word	0x08011807
 8011770:	08011807 	.word	0x08011807
 8011774:	08011807 	.word	0x08011807
 8011778:	08011807 	.word	0x08011807
 801177c:	08011807 	.word	0x08011807
 8011780:	08011807 	.word	0x08011807
 8011784:	08011807 	.word	0x08011807
 8011788:	08011807 	.word	0x08011807
 801178c:	08011807 	.word	0x08011807
 8011790:	08011807 	.word	0x08011807
 8011794:	08011807 	.word	0x08011807
 8011798:	08011807 	.word	0x08011807
 801179c:	08011807 	.word	0x08011807
 80117a0:	080117f9 	.word	0x080117f9
 80117a4:	2b40      	cmp	r3, #64	; 0x40
 80117a6:	d02a      	beq.n	80117fe <UART_SetConfig+0x8aa>
 80117a8:	e02d      	b.n	8011806 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80117aa:	f7fb f8c3 	bl	800c934 <HAL_RCCEx_GetD3PCLK1Freq>
 80117ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80117b0:	e02f      	b.n	8011812 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80117b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80117b6:	4618      	mov	r0, r3
 80117b8:	f7fb f8d2 	bl	800c960 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80117bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80117c0:	e027      	b.n	8011812 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80117c2:	f107 0318 	add.w	r3, r7, #24
 80117c6:	4618      	mov	r0, r3
 80117c8:	f7fb fa1e 	bl	800cc08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80117cc:	69fb      	ldr	r3, [r7, #28]
 80117ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80117d0:	e01f      	b.n	8011812 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80117d2:	4b21      	ldr	r3, [pc, #132]	; (8011858 <UART_SetConfig+0x904>)
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	f003 0320 	and.w	r3, r3, #32
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d009      	beq.n	80117f2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80117de:	4b1e      	ldr	r3, [pc, #120]	; (8011858 <UART_SetConfig+0x904>)
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	08db      	lsrs	r3, r3, #3
 80117e4:	f003 0303 	and.w	r3, r3, #3
 80117e8:	4a1d      	ldr	r2, [pc, #116]	; (8011860 <UART_SetConfig+0x90c>)
 80117ea:	fa22 f303 	lsr.w	r3, r2, r3
 80117ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80117f0:	e00f      	b.n	8011812 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80117f2:	4b1b      	ldr	r3, [pc, #108]	; (8011860 <UART_SetConfig+0x90c>)
 80117f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80117f6:	e00c      	b.n	8011812 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80117f8:	4b1a      	ldr	r3, [pc, #104]	; (8011864 <UART_SetConfig+0x910>)
 80117fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80117fc:	e009      	b.n	8011812 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80117fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011802:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011804:	e005      	b.n	8011812 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011806:	2300      	movs	r3, #0
 8011808:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801180a:	2301      	movs	r3, #1
 801180c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011810:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011814:	2b00      	cmp	r3, #0
 8011816:	f000 81ee 	beq.w	8011bf6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801181a:	697b      	ldr	r3, [r7, #20]
 801181c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801181e:	4a12      	ldr	r2, [pc, #72]	; (8011868 <UART_SetConfig+0x914>)
 8011820:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011824:	461a      	mov	r2, r3
 8011826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011828:	fbb3 f3f2 	udiv	r3, r3, r2
 801182c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801182e:	697b      	ldr	r3, [r7, #20]
 8011830:	685a      	ldr	r2, [r3, #4]
 8011832:	4613      	mov	r3, r2
 8011834:	005b      	lsls	r3, r3, #1
 8011836:	4413      	add	r3, r2
 8011838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801183a:	429a      	cmp	r2, r3
 801183c:	d305      	bcc.n	801184a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801183e:	697b      	ldr	r3, [r7, #20]
 8011840:	685b      	ldr	r3, [r3, #4]
 8011842:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011846:	429a      	cmp	r2, r3
 8011848:	d910      	bls.n	801186c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 801184a:	2301      	movs	r3, #1
 801184c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011850:	e1d1      	b.n	8011bf6 <UART_SetConfig+0xca2>
 8011852:	bf00      	nop
 8011854:	40011c00 	.word	0x40011c00
 8011858:	58024400 	.word	0x58024400
 801185c:	58000c00 	.word	0x58000c00
 8011860:	03d09000 	.word	0x03d09000
 8011864:	003d0900 	.word	0x003d0900
 8011868:	0801c418 	.word	0x0801c418
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801186c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801186e:	2200      	movs	r2, #0
 8011870:	60bb      	str	r3, [r7, #8]
 8011872:	60fa      	str	r2, [r7, #12]
 8011874:	697b      	ldr	r3, [r7, #20]
 8011876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011878:	4ac0      	ldr	r2, [pc, #768]	; (8011b7c <UART_SetConfig+0xc28>)
 801187a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801187e:	b29b      	uxth	r3, r3
 8011880:	2200      	movs	r2, #0
 8011882:	603b      	str	r3, [r7, #0]
 8011884:	607a      	str	r2, [r7, #4]
 8011886:	e9d7 2300 	ldrd	r2, r3, [r7]
 801188a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801188e:	f7ee ff63 	bl	8000758 <__aeabi_uldivmod>
 8011892:	4602      	mov	r2, r0
 8011894:	460b      	mov	r3, r1
 8011896:	4610      	mov	r0, r2
 8011898:	4619      	mov	r1, r3
 801189a:	f04f 0200 	mov.w	r2, #0
 801189e:	f04f 0300 	mov.w	r3, #0
 80118a2:	020b      	lsls	r3, r1, #8
 80118a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80118a8:	0202      	lsls	r2, r0, #8
 80118aa:	6979      	ldr	r1, [r7, #20]
 80118ac:	6849      	ldr	r1, [r1, #4]
 80118ae:	0849      	lsrs	r1, r1, #1
 80118b0:	2000      	movs	r0, #0
 80118b2:	460c      	mov	r4, r1
 80118b4:	4605      	mov	r5, r0
 80118b6:	eb12 0804 	adds.w	r8, r2, r4
 80118ba:	eb43 0905 	adc.w	r9, r3, r5
 80118be:	697b      	ldr	r3, [r7, #20]
 80118c0:	685b      	ldr	r3, [r3, #4]
 80118c2:	2200      	movs	r2, #0
 80118c4:	469a      	mov	sl, r3
 80118c6:	4693      	mov	fp, r2
 80118c8:	4652      	mov	r2, sl
 80118ca:	465b      	mov	r3, fp
 80118cc:	4640      	mov	r0, r8
 80118ce:	4649      	mov	r1, r9
 80118d0:	f7ee ff42 	bl	8000758 <__aeabi_uldivmod>
 80118d4:	4602      	mov	r2, r0
 80118d6:	460b      	mov	r3, r1
 80118d8:	4613      	mov	r3, r2
 80118da:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80118dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80118e2:	d308      	bcc.n	80118f6 <UART_SetConfig+0x9a2>
 80118e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80118ea:	d204      	bcs.n	80118f6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80118ec:	697b      	ldr	r3, [r7, #20]
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80118f2:	60da      	str	r2, [r3, #12]
 80118f4:	e17f      	b.n	8011bf6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80118f6:	2301      	movs	r3, #1
 80118f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80118fc:	e17b      	b.n	8011bf6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80118fe:	697b      	ldr	r3, [r7, #20]
 8011900:	69db      	ldr	r3, [r3, #28]
 8011902:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011906:	f040 80bd 	bne.w	8011a84 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 801190a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801190e:	2b20      	cmp	r3, #32
 8011910:	dc48      	bgt.n	80119a4 <UART_SetConfig+0xa50>
 8011912:	2b00      	cmp	r3, #0
 8011914:	db7b      	blt.n	8011a0e <UART_SetConfig+0xaba>
 8011916:	2b20      	cmp	r3, #32
 8011918:	d879      	bhi.n	8011a0e <UART_SetConfig+0xaba>
 801191a:	a201      	add	r2, pc, #4	; (adr r2, 8011920 <UART_SetConfig+0x9cc>)
 801191c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011920:	080119ab 	.word	0x080119ab
 8011924:	080119b3 	.word	0x080119b3
 8011928:	08011a0f 	.word	0x08011a0f
 801192c:	08011a0f 	.word	0x08011a0f
 8011930:	080119bb 	.word	0x080119bb
 8011934:	08011a0f 	.word	0x08011a0f
 8011938:	08011a0f 	.word	0x08011a0f
 801193c:	08011a0f 	.word	0x08011a0f
 8011940:	080119cb 	.word	0x080119cb
 8011944:	08011a0f 	.word	0x08011a0f
 8011948:	08011a0f 	.word	0x08011a0f
 801194c:	08011a0f 	.word	0x08011a0f
 8011950:	08011a0f 	.word	0x08011a0f
 8011954:	08011a0f 	.word	0x08011a0f
 8011958:	08011a0f 	.word	0x08011a0f
 801195c:	08011a0f 	.word	0x08011a0f
 8011960:	080119db 	.word	0x080119db
 8011964:	08011a0f 	.word	0x08011a0f
 8011968:	08011a0f 	.word	0x08011a0f
 801196c:	08011a0f 	.word	0x08011a0f
 8011970:	08011a0f 	.word	0x08011a0f
 8011974:	08011a0f 	.word	0x08011a0f
 8011978:	08011a0f 	.word	0x08011a0f
 801197c:	08011a0f 	.word	0x08011a0f
 8011980:	08011a0f 	.word	0x08011a0f
 8011984:	08011a0f 	.word	0x08011a0f
 8011988:	08011a0f 	.word	0x08011a0f
 801198c:	08011a0f 	.word	0x08011a0f
 8011990:	08011a0f 	.word	0x08011a0f
 8011994:	08011a0f 	.word	0x08011a0f
 8011998:	08011a0f 	.word	0x08011a0f
 801199c:	08011a0f 	.word	0x08011a0f
 80119a0:	08011a01 	.word	0x08011a01
 80119a4:	2b40      	cmp	r3, #64	; 0x40
 80119a6:	d02e      	beq.n	8011a06 <UART_SetConfig+0xab2>
 80119a8:	e031      	b.n	8011a0e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80119aa:	f7f9 f925 	bl	800abf8 <HAL_RCC_GetPCLK1Freq>
 80119ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80119b0:	e033      	b.n	8011a1a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80119b2:	f7f9 f937 	bl	800ac24 <HAL_RCC_GetPCLK2Freq>
 80119b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80119b8:	e02f      	b.n	8011a1a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80119ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80119be:	4618      	mov	r0, r3
 80119c0:	f7fa ffce 	bl	800c960 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80119c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80119c8:	e027      	b.n	8011a1a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80119ca:	f107 0318 	add.w	r3, r7, #24
 80119ce:	4618      	mov	r0, r3
 80119d0:	f7fb f91a 	bl	800cc08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80119d4:	69fb      	ldr	r3, [r7, #28]
 80119d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80119d8:	e01f      	b.n	8011a1a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80119da:	4b69      	ldr	r3, [pc, #420]	; (8011b80 <UART_SetConfig+0xc2c>)
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	f003 0320 	and.w	r3, r3, #32
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d009      	beq.n	80119fa <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80119e6:	4b66      	ldr	r3, [pc, #408]	; (8011b80 <UART_SetConfig+0xc2c>)
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	08db      	lsrs	r3, r3, #3
 80119ec:	f003 0303 	and.w	r3, r3, #3
 80119f0:	4a64      	ldr	r2, [pc, #400]	; (8011b84 <UART_SetConfig+0xc30>)
 80119f2:	fa22 f303 	lsr.w	r3, r2, r3
 80119f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80119f8:	e00f      	b.n	8011a1a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80119fa:	4b62      	ldr	r3, [pc, #392]	; (8011b84 <UART_SetConfig+0xc30>)
 80119fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80119fe:	e00c      	b.n	8011a1a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011a00:	4b61      	ldr	r3, [pc, #388]	; (8011b88 <UART_SetConfig+0xc34>)
 8011a02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011a04:	e009      	b.n	8011a1a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011a06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011a0c:	e005      	b.n	8011a1a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8011a0e:	2300      	movs	r3, #0
 8011a10:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011a12:	2301      	movs	r3, #1
 8011a14:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011a18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	f000 80ea 	beq.w	8011bf6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011a22:	697b      	ldr	r3, [r7, #20]
 8011a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a26:	4a55      	ldr	r2, [pc, #340]	; (8011b7c <UART_SetConfig+0xc28>)
 8011a28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011a2c:	461a      	mov	r2, r3
 8011a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a30:	fbb3 f3f2 	udiv	r3, r3, r2
 8011a34:	005a      	lsls	r2, r3, #1
 8011a36:	697b      	ldr	r3, [r7, #20]
 8011a38:	685b      	ldr	r3, [r3, #4]
 8011a3a:	085b      	lsrs	r3, r3, #1
 8011a3c:	441a      	add	r2, r3
 8011a3e:	697b      	ldr	r3, [r7, #20]
 8011a40:	685b      	ldr	r3, [r3, #4]
 8011a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8011a46:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a4a:	2b0f      	cmp	r3, #15
 8011a4c:	d916      	bls.n	8011a7c <UART_SetConfig+0xb28>
 8011a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011a54:	d212      	bcs.n	8011a7c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a58:	b29b      	uxth	r3, r3
 8011a5a:	f023 030f 	bic.w	r3, r3, #15
 8011a5e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a62:	085b      	lsrs	r3, r3, #1
 8011a64:	b29b      	uxth	r3, r3
 8011a66:	f003 0307 	and.w	r3, r3, #7
 8011a6a:	b29a      	uxth	r2, r3
 8011a6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011a6e:	4313      	orrs	r3, r2
 8011a70:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011a72:	697b      	ldr	r3, [r7, #20]
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011a78:	60da      	str	r2, [r3, #12]
 8011a7a:	e0bc      	b.n	8011bf6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011a7c:	2301      	movs	r3, #1
 8011a7e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011a82:	e0b8      	b.n	8011bf6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011a84:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011a88:	2b20      	cmp	r3, #32
 8011a8a:	dc4b      	bgt.n	8011b24 <UART_SetConfig+0xbd0>
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	f2c0 8087 	blt.w	8011ba0 <UART_SetConfig+0xc4c>
 8011a92:	2b20      	cmp	r3, #32
 8011a94:	f200 8084 	bhi.w	8011ba0 <UART_SetConfig+0xc4c>
 8011a98:	a201      	add	r2, pc, #4	; (adr r2, 8011aa0 <UART_SetConfig+0xb4c>)
 8011a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a9e:	bf00      	nop
 8011aa0:	08011b2b 	.word	0x08011b2b
 8011aa4:	08011b33 	.word	0x08011b33
 8011aa8:	08011ba1 	.word	0x08011ba1
 8011aac:	08011ba1 	.word	0x08011ba1
 8011ab0:	08011b3b 	.word	0x08011b3b
 8011ab4:	08011ba1 	.word	0x08011ba1
 8011ab8:	08011ba1 	.word	0x08011ba1
 8011abc:	08011ba1 	.word	0x08011ba1
 8011ac0:	08011b4b 	.word	0x08011b4b
 8011ac4:	08011ba1 	.word	0x08011ba1
 8011ac8:	08011ba1 	.word	0x08011ba1
 8011acc:	08011ba1 	.word	0x08011ba1
 8011ad0:	08011ba1 	.word	0x08011ba1
 8011ad4:	08011ba1 	.word	0x08011ba1
 8011ad8:	08011ba1 	.word	0x08011ba1
 8011adc:	08011ba1 	.word	0x08011ba1
 8011ae0:	08011b5b 	.word	0x08011b5b
 8011ae4:	08011ba1 	.word	0x08011ba1
 8011ae8:	08011ba1 	.word	0x08011ba1
 8011aec:	08011ba1 	.word	0x08011ba1
 8011af0:	08011ba1 	.word	0x08011ba1
 8011af4:	08011ba1 	.word	0x08011ba1
 8011af8:	08011ba1 	.word	0x08011ba1
 8011afc:	08011ba1 	.word	0x08011ba1
 8011b00:	08011ba1 	.word	0x08011ba1
 8011b04:	08011ba1 	.word	0x08011ba1
 8011b08:	08011ba1 	.word	0x08011ba1
 8011b0c:	08011ba1 	.word	0x08011ba1
 8011b10:	08011ba1 	.word	0x08011ba1
 8011b14:	08011ba1 	.word	0x08011ba1
 8011b18:	08011ba1 	.word	0x08011ba1
 8011b1c:	08011ba1 	.word	0x08011ba1
 8011b20:	08011b93 	.word	0x08011b93
 8011b24:	2b40      	cmp	r3, #64	; 0x40
 8011b26:	d037      	beq.n	8011b98 <UART_SetConfig+0xc44>
 8011b28:	e03a      	b.n	8011ba0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011b2a:	f7f9 f865 	bl	800abf8 <HAL_RCC_GetPCLK1Freq>
 8011b2e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011b30:	e03c      	b.n	8011bac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011b32:	f7f9 f877 	bl	800ac24 <HAL_RCC_GetPCLK2Freq>
 8011b36:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011b38:	e038      	b.n	8011bac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011b3e:	4618      	mov	r0, r3
 8011b40:	f7fa ff0e 	bl	800c960 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b48:	e030      	b.n	8011bac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011b4a:	f107 0318 	add.w	r3, r7, #24
 8011b4e:	4618      	mov	r0, r3
 8011b50:	f7fb f85a 	bl	800cc08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011b54:	69fb      	ldr	r3, [r7, #28]
 8011b56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b58:	e028      	b.n	8011bac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011b5a:	4b09      	ldr	r3, [pc, #36]	; (8011b80 <UART_SetConfig+0xc2c>)
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	f003 0320 	and.w	r3, r3, #32
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d012      	beq.n	8011b8c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011b66:	4b06      	ldr	r3, [pc, #24]	; (8011b80 <UART_SetConfig+0xc2c>)
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	08db      	lsrs	r3, r3, #3
 8011b6c:	f003 0303 	and.w	r3, r3, #3
 8011b70:	4a04      	ldr	r2, [pc, #16]	; (8011b84 <UART_SetConfig+0xc30>)
 8011b72:	fa22 f303 	lsr.w	r3, r2, r3
 8011b76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011b78:	e018      	b.n	8011bac <UART_SetConfig+0xc58>
 8011b7a:	bf00      	nop
 8011b7c:	0801c418 	.word	0x0801c418
 8011b80:	58024400 	.word	0x58024400
 8011b84:	03d09000 	.word	0x03d09000
 8011b88:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8011b8c:	4b24      	ldr	r3, [pc, #144]	; (8011c20 <UART_SetConfig+0xccc>)
 8011b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b90:	e00c      	b.n	8011bac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011b92:	4b24      	ldr	r3, [pc, #144]	; (8011c24 <UART_SetConfig+0xcd0>)
 8011b94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b96:	e009      	b.n	8011bac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011b98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b9e:	e005      	b.n	8011bac <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011ba4:	2301      	movs	r3, #1
 8011ba6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011baa:	bf00      	nop
    }

    if (pclk != 0U)
 8011bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d021      	beq.n	8011bf6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011bb2:	697b      	ldr	r3, [r7, #20]
 8011bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bb6:	4a1c      	ldr	r2, [pc, #112]	; (8011c28 <UART_SetConfig+0xcd4>)
 8011bb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011bbc:	461a      	mov	r2, r3
 8011bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bc0:	fbb3 f2f2 	udiv	r2, r3, r2
 8011bc4:	697b      	ldr	r3, [r7, #20]
 8011bc6:	685b      	ldr	r3, [r3, #4]
 8011bc8:	085b      	lsrs	r3, r3, #1
 8011bca:	441a      	add	r2, r3
 8011bcc:	697b      	ldr	r3, [r7, #20]
 8011bce:	685b      	ldr	r3, [r3, #4]
 8011bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8011bd4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bd8:	2b0f      	cmp	r3, #15
 8011bda:	d909      	bls.n	8011bf0 <UART_SetConfig+0xc9c>
 8011bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011be2:	d205      	bcs.n	8011bf0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011be6:	b29a      	uxth	r2, r3
 8011be8:	697b      	ldr	r3, [r7, #20]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	60da      	str	r2, [r3, #12]
 8011bee:	e002      	b.n	8011bf6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011bf0:	2301      	movs	r3, #1
 8011bf2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011bf6:	697b      	ldr	r3, [r7, #20]
 8011bf8:	2201      	movs	r2, #1
 8011bfa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011bfe:	697b      	ldr	r3, [r7, #20]
 8011c00:	2201      	movs	r2, #1
 8011c02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011c06:	697b      	ldr	r3, [r7, #20]
 8011c08:	2200      	movs	r2, #0
 8011c0a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011c0c:	697b      	ldr	r3, [r7, #20]
 8011c0e:	2200      	movs	r2, #0
 8011c10:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011c12:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011c16:	4618      	mov	r0, r3
 8011c18:	3748      	adds	r7, #72	; 0x48
 8011c1a:	46bd      	mov	sp, r7
 8011c1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011c20:	03d09000 	.word	0x03d09000
 8011c24:	003d0900 	.word	0x003d0900
 8011c28:	0801c418 	.word	0x0801c418

08011c2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011c2c:	b480      	push	{r7}
 8011c2e:	b083      	sub	sp, #12
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c38:	f003 0301 	and.w	r3, r3, #1
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d00a      	beq.n	8011c56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	685b      	ldr	r3, [r3, #4]
 8011c46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	430a      	orrs	r2, r1
 8011c54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c5a:	f003 0302 	and.w	r3, r3, #2
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d00a      	beq.n	8011c78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	685b      	ldr	r3, [r3, #4]
 8011c68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	430a      	orrs	r2, r1
 8011c76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c7c:	f003 0304 	and.w	r3, r3, #4
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d00a      	beq.n	8011c9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	685b      	ldr	r3, [r3, #4]
 8011c8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	430a      	orrs	r2, r1
 8011c98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c9e:	f003 0308 	and.w	r3, r3, #8
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d00a      	beq.n	8011cbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	685b      	ldr	r3, [r3, #4]
 8011cac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	430a      	orrs	r2, r1
 8011cba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011cc0:	f003 0310 	and.w	r3, r3, #16
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d00a      	beq.n	8011cde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	689b      	ldr	r3, [r3, #8]
 8011cce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	430a      	orrs	r2, r1
 8011cdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ce2:	f003 0320 	and.w	r3, r3, #32
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d00a      	beq.n	8011d00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	689b      	ldr	r3, [r3, #8]
 8011cf0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	430a      	orrs	r2, r1
 8011cfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d01a      	beq.n	8011d42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	685b      	ldr	r3, [r3, #4]
 8011d12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	430a      	orrs	r2, r1
 8011d20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011d2a:	d10a      	bne.n	8011d42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	685b      	ldr	r3, [r3, #4]
 8011d32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	430a      	orrs	r2, r1
 8011d40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d00a      	beq.n	8011d64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	685b      	ldr	r3, [r3, #4]
 8011d54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	430a      	orrs	r2, r1
 8011d62:	605a      	str	r2, [r3, #4]
  }
}
 8011d64:	bf00      	nop
 8011d66:	370c      	adds	r7, #12
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d6e:	4770      	bx	lr

08011d70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011d70:	b580      	push	{r7, lr}
 8011d72:	b098      	sub	sp, #96	; 0x60
 8011d74:	af02      	add	r7, sp, #8
 8011d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	2200      	movs	r2, #0
 8011d7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011d80:	f7f2 f894 	bl	8003eac <HAL_GetTick>
 8011d84:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	f003 0308 	and.w	r3, r3, #8
 8011d90:	2b08      	cmp	r3, #8
 8011d92:	d12f      	bne.n	8011df4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011d94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011d98:	9300      	str	r3, [sp, #0]
 8011d9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011d9c:	2200      	movs	r2, #0
 8011d9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011da2:	6878      	ldr	r0, [r7, #4]
 8011da4:	f000 f88e 	bl	8011ec4 <UART_WaitOnFlagUntilTimeout>
 8011da8:	4603      	mov	r3, r0
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d022      	beq.n	8011df4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011db6:	e853 3f00 	ldrex	r3, [r3]
 8011dba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011dc2:	653b      	str	r3, [r7, #80]	; 0x50
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	461a      	mov	r2, r3
 8011dca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011dcc:	647b      	str	r3, [r7, #68]	; 0x44
 8011dce:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011dd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011dd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011dd4:	e841 2300 	strex	r3, r2, [r1]
 8011dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d1e6      	bne.n	8011dae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	2220      	movs	r2, #32
 8011de4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	2200      	movs	r2, #0
 8011dec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011df0:	2303      	movs	r3, #3
 8011df2:	e063      	b.n	8011ebc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	f003 0304 	and.w	r3, r3, #4
 8011dfe:	2b04      	cmp	r3, #4
 8011e00:	d149      	bne.n	8011e96 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011e02:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011e06:	9300      	str	r3, [sp, #0]
 8011e08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e0a:	2200      	movs	r2, #0
 8011e0c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011e10:	6878      	ldr	r0, [r7, #4]
 8011e12:	f000 f857 	bl	8011ec4 <UART_WaitOnFlagUntilTimeout>
 8011e16:	4603      	mov	r3, r0
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d03c      	beq.n	8011e96 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e24:	e853 3f00 	ldrex	r3, [r3]
 8011e28:	623b      	str	r3, [r7, #32]
   return(result);
 8011e2a:	6a3b      	ldr	r3, [r7, #32]
 8011e2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011e30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	461a      	mov	r2, r3
 8011e38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e3a:	633b      	str	r3, [r7, #48]	; 0x30
 8011e3c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011e40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011e42:	e841 2300 	strex	r3, r2, [r1]
 8011e46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d1e6      	bne.n	8011e1c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	3308      	adds	r3, #8
 8011e54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e56:	693b      	ldr	r3, [r7, #16]
 8011e58:	e853 3f00 	ldrex	r3, [r3]
 8011e5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	f023 0301 	bic.w	r3, r3, #1
 8011e64:	64bb      	str	r3, [r7, #72]	; 0x48
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	3308      	adds	r3, #8
 8011e6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011e6e:	61fa      	str	r2, [r7, #28]
 8011e70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e72:	69b9      	ldr	r1, [r7, #24]
 8011e74:	69fa      	ldr	r2, [r7, #28]
 8011e76:	e841 2300 	strex	r3, r2, [r1]
 8011e7a:	617b      	str	r3, [r7, #20]
   return(result);
 8011e7c:	697b      	ldr	r3, [r7, #20]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d1e5      	bne.n	8011e4e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	2220      	movs	r2, #32
 8011e86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	2200      	movs	r2, #0
 8011e8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011e92:	2303      	movs	r3, #3
 8011e94:	e012      	b.n	8011ebc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	2220      	movs	r2, #32
 8011e9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	2220      	movs	r2, #32
 8011ea2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	2200      	movs	r2, #0
 8011eaa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	2200      	movs	r2, #0
 8011eb0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	2200      	movs	r2, #0
 8011eb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011eba:	2300      	movs	r3, #0
}
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	3758      	adds	r7, #88	; 0x58
 8011ec0:	46bd      	mov	sp, r7
 8011ec2:	bd80      	pop	{r7, pc}

08011ec4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011ec4:	b580      	push	{r7, lr}
 8011ec6:	b084      	sub	sp, #16
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	60f8      	str	r0, [r7, #12]
 8011ecc:	60b9      	str	r1, [r7, #8]
 8011ece:	603b      	str	r3, [r7, #0]
 8011ed0:	4613      	mov	r3, r2
 8011ed2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011ed4:	e049      	b.n	8011f6a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011ed6:	69bb      	ldr	r3, [r7, #24]
 8011ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011edc:	d045      	beq.n	8011f6a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011ede:	f7f1 ffe5 	bl	8003eac <HAL_GetTick>
 8011ee2:	4602      	mov	r2, r0
 8011ee4:	683b      	ldr	r3, [r7, #0]
 8011ee6:	1ad3      	subs	r3, r2, r3
 8011ee8:	69ba      	ldr	r2, [r7, #24]
 8011eea:	429a      	cmp	r2, r3
 8011eec:	d302      	bcc.n	8011ef4 <UART_WaitOnFlagUntilTimeout+0x30>
 8011eee:	69bb      	ldr	r3, [r7, #24]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d101      	bne.n	8011ef8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011ef4:	2303      	movs	r3, #3
 8011ef6:	e048      	b.n	8011f8a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	f003 0304 	and.w	r3, r3, #4
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d031      	beq.n	8011f6a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	69db      	ldr	r3, [r3, #28]
 8011f0c:	f003 0308 	and.w	r3, r3, #8
 8011f10:	2b08      	cmp	r3, #8
 8011f12:	d110      	bne.n	8011f36 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	2208      	movs	r2, #8
 8011f1a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8011f1c:	68f8      	ldr	r0, [r7, #12]
 8011f1e:	f000 f839 	bl	8011f94 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	2208      	movs	r2, #8
 8011f26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	2200      	movs	r2, #0
 8011f2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8011f32:	2301      	movs	r3, #1
 8011f34:	e029      	b.n	8011f8a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	69db      	ldr	r3, [r3, #28]
 8011f3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011f40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011f44:	d111      	bne.n	8011f6a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011f4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011f50:	68f8      	ldr	r0, [r7, #12]
 8011f52:	f000 f81f 	bl	8011f94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	2220      	movs	r2, #32
 8011f5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	2200      	movs	r2, #0
 8011f62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011f66:	2303      	movs	r3, #3
 8011f68:	e00f      	b.n	8011f8a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	69da      	ldr	r2, [r3, #28]
 8011f70:	68bb      	ldr	r3, [r7, #8]
 8011f72:	4013      	ands	r3, r2
 8011f74:	68ba      	ldr	r2, [r7, #8]
 8011f76:	429a      	cmp	r2, r3
 8011f78:	bf0c      	ite	eq
 8011f7a:	2301      	moveq	r3, #1
 8011f7c:	2300      	movne	r3, #0
 8011f7e:	b2db      	uxtb	r3, r3
 8011f80:	461a      	mov	r2, r3
 8011f82:	79fb      	ldrb	r3, [r7, #7]
 8011f84:	429a      	cmp	r2, r3
 8011f86:	d0a6      	beq.n	8011ed6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011f88:	2300      	movs	r3, #0
}
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	3710      	adds	r7, #16
 8011f8e:	46bd      	mov	sp, r7
 8011f90:	bd80      	pop	{r7, pc}
	...

08011f94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011f94:	b480      	push	{r7}
 8011f96:	b095      	sub	sp, #84	; 0x54
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fa4:	e853 3f00 	ldrex	r3, [r3]
 8011fa8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011fb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	461a      	mov	r2, r3
 8011fb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011fba:	643b      	str	r3, [r7, #64]	; 0x40
 8011fbc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011fc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011fc2:	e841 2300 	strex	r3, r2, [r1]
 8011fc6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d1e6      	bne.n	8011f9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	3308      	adds	r3, #8
 8011fd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fd6:	6a3b      	ldr	r3, [r7, #32]
 8011fd8:	e853 3f00 	ldrex	r3, [r3]
 8011fdc:	61fb      	str	r3, [r7, #28]
   return(result);
 8011fde:	69fa      	ldr	r2, [r7, #28]
 8011fe0:	4b1e      	ldr	r3, [pc, #120]	; (801205c <UART_EndRxTransfer+0xc8>)
 8011fe2:	4013      	ands	r3, r2
 8011fe4:	64bb      	str	r3, [r7, #72]	; 0x48
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	3308      	adds	r3, #8
 8011fec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011fee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011ff0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ff2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011ff4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011ff6:	e841 2300 	strex	r3, r2, [r1]
 8011ffa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d1e5      	bne.n	8011fce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012006:	2b01      	cmp	r3, #1
 8012008:	d118      	bne.n	801203c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	e853 3f00 	ldrex	r3, [r3]
 8012016:	60bb      	str	r3, [r7, #8]
   return(result);
 8012018:	68bb      	ldr	r3, [r7, #8]
 801201a:	f023 0310 	bic.w	r3, r3, #16
 801201e:	647b      	str	r3, [r7, #68]	; 0x44
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	461a      	mov	r2, r3
 8012026:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012028:	61bb      	str	r3, [r7, #24]
 801202a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801202c:	6979      	ldr	r1, [r7, #20]
 801202e:	69ba      	ldr	r2, [r7, #24]
 8012030:	e841 2300 	strex	r3, r2, [r1]
 8012034:	613b      	str	r3, [r7, #16]
   return(result);
 8012036:	693b      	ldr	r3, [r7, #16]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d1e6      	bne.n	801200a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	2220      	movs	r2, #32
 8012040:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	2200      	movs	r2, #0
 8012048:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	2200      	movs	r2, #0
 801204e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8012050:	bf00      	nop
 8012052:	3754      	adds	r7, #84	; 0x54
 8012054:	46bd      	mov	sp, r7
 8012056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801205a:	4770      	bx	lr
 801205c:	effffffe 	.word	0xeffffffe

08012060 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012060:	b480      	push	{r7}
 8012062:	b085      	sub	sp, #20
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801206e:	2b01      	cmp	r3, #1
 8012070:	d101      	bne.n	8012076 <HAL_UARTEx_DisableFifoMode+0x16>
 8012072:	2302      	movs	r3, #2
 8012074:	e027      	b.n	80120c6 <HAL_UARTEx_DisableFifoMode+0x66>
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	2201      	movs	r2, #1
 801207a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	2224      	movs	r2, #36	; 0x24
 8012082:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	681a      	ldr	r2, [r3, #0]
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	f022 0201 	bic.w	r2, r2, #1
 801209c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80120a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	2200      	movs	r2, #0
 80120aa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	68fa      	ldr	r2, [r7, #12]
 80120b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	2220      	movs	r2, #32
 80120b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	2200      	movs	r2, #0
 80120c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80120c4:	2300      	movs	r3, #0
}
 80120c6:	4618      	mov	r0, r3
 80120c8:	3714      	adds	r7, #20
 80120ca:	46bd      	mov	sp, r7
 80120cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120d0:	4770      	bx	lr

080120d2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80120d2:	b580      	push	{r7, lr}
 80120d4:	b084      	sub	sp, #16
 80120d6:	af00      	add	r7, sp, #0
 80120d8:	6078      	str	r0, [r7, #4]
 80120da:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80120e2:	2b01      	cmp	r3, #1
 80120e4:	d101      	bne.n	80120ea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80120e6:	2302      	movs	r3, #2
 80120e8:	e02d      	b.n	8012146 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	2201      	movs	r2, #1
 80120ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	2224      	movs	r2, #36	; 0x24
 80120f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	681a      	ldr	r2, [r3, #0]
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	f022 0201 	bic.w	r2, r2, #1
 8012110:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	689b      	ldr	r3, [r3, #8]
 8012118:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	683a      	ldr	r2, [r7, #0]
 8012122:	430a      	orrs	r2, r1
 8012124:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012126:	6878      	ldr	r0, [r7, #4]
 8012128:	f000 f850 	bl	80121cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	68fa      	ldr	r2, [r7, #12]
 8012132:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	2220      	movs	r2, #32
 8012138:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	2200      	movs	r2, #0
 8012140:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012144:	2300      	movs	r3, #0
}
 8012146:	4618      	mov	r0, r3
 8012148:	3710      	adds	r7, #16
 801214a:	46bd      	mov	sp, r7
 801214c:	bd80      	pop	{r7, pc}

0801214e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801214e:	b580      	push	{r7, lr}
 8012150:	b084      	sub	sp, #16
 8012152:	af00      	add	r7, sp, #0
 8012154:	6078      	str	r0, [r7, #4]
 8012156:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801215e:	2b01      	cmp	r3, #1
 8012160:	d101      	bne.n	8012166 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012162:	2302      	movs	r3, #2
 8012164:	e02d      	b.n	80121c2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	2201      	movs	r2, #1
 801216a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	2224      	movs	r2, #36	; 0x24
 8012172:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	681a      	ldr	r2, [r3, #0]
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	f022 0201 	bic.w	r2, r2, #1
 801218c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	689b      	ldr	r3, [r3, #8]
 8012194:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	683a      	ldr	r2, [r7, #0]
 801219e:	430a      	orrs	r2, r1
 80121a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80121a2:	6878      	ldr	r0, [r7, #4]
 80121a4:	f000 f812 	bl	80121cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	68fa      	ldr	r2, [r7, #12]
 80121ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	2220      	movs	r2, #32
 80121b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	2200      	movs	r2, #0
 80121bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80121c0:	2300      	movs	r3, #0
}
 80121c2:	4618      	mov	r0, r3
 80121c4:	3710      	adds	r7, #16
 80121c6:	46bd      	mov	sp, r7
 80121c8:	bd80      	pop	{r7, pc}
	...

080121cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80121cc:	b480      	push	{r7}
 80121ce:	b085      	sub	sp, #20
 80121d0:	af00      	add	r7, sp, #0
 80121d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d108      	bne.n	80121ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	2201      	movs	r2, #1
 80121e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	2201      	movs	r2, #1
 80121e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80121ec:	e031      	b.n	8012252 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80121ee:	2310      	movs	r3, #16
 80121f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80121f2:	2310      	movs	r3, #16
 80121f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	689b      	ldr	r3, [r3, #8]
 80121fc:	0e5b      	lsrs	r3, r3, #25
 80121fe:	b2db      	uxtb	r3, r3
 8012200:	f003 0307 	and.w	r3, r3, #7
 8012204:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	689b      	ldr	r3, [r3, #8]
 801220c:	0f5b      	lsrs	r3, r3, #29
 801220e:	b2db      	uxtb	r3, r3
 8012210:	f003 0307 	and.w	r3, r3, #7
 8012214:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012216:	7bbb      	ldrb	r3, [r7, #14]
 8012218:	7b3a      	ldrb	r2, [r7, #12]
 801221a:	4911      	ldr	r1, [pc, #68]	; (8012260 <UARTEx_SetNbDataToProcess+0x94>)
 801221c:	5c8a      	ldrb	r2, [r1, r2]
 801221e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012222:	7b3a      	ldrb	r2, [r7, #12]
 8012224:	490f      	ldr	r1, [pc, #60]	; (8012264 <UARTEx_SetNbDataToProcess+0x98>)
 8012226:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012228:	fb93 f3f2 	sdiv	r3, r3, r2
 801222c:	b29a      	uxth	r2, r3
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012234:	7bfb      	ldrb	r3, [r7, #15]
 8012236:	7b7a      	ldrb	r2, [r7, #13]
 8012238:	4909      	ldr	r1, [pc, #36]	; (8012260 <UARTEx_SetNbDataToProcess+0x94>)
 801223a:	5c8a      	ldrb	r2, [r1, r2]
 801223c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012240:	7b7a      	ldrb	r2, [r7, #13]
 8012242:	4908      	ldr	r1, [pc, #32]	; (8012264 <UARTEx_SetNbDataToProcess+0x98>)
 8012244:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012246:	fb93 f3f2 	sdiv	r3, r3, r2
 801224a:	b29a      	uxth	r2, r3
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012252:	bf00      	nop
 8012254:	3714      	adds	r7, #20
 8012256:	46bd      	mov	sp, r7
 8012258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801225c:	4770      	bx	lr
 801225e:	bf00      	nop
 8012260:	0801c430 	.word	0x0801c430
 8012264:	0801c438 	.word	0x0801c438

08012268 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8012268:	b084      	sub	sp, #16
 801226a:	b480      	push	{r7}
 801226c:	b085      	sub	sp, #20
 801226e:	af00      	add	r7, sp, #0
 8012270:	6078      	str	r0, [r7, #4]
 8012272:	f107 001c 	add.w	r0, r7, #28
 8012276:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801227a:	2300      	movs	r3, #0
 801227c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 801227e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8012280:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8012282:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8012284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8012286:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8012288:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 801228a:	431a      	orrs	r2, r3
             Init.ClockDiv
 801228c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 801228e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8012290:	68fa      	ldr	r2, [r7, #12]
 8012292:	4313      	orrs	r3, r2
 8012294:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	685a      	ldr	r2, [r3, #4]
 801229a:	4b07      	ldr	r3, [pc, #28]	; (80122b8 <SDMMC_Init+0x50>)
 801229c:	4013      	ands	r3, r2
 801229e:	68fa      	ldr	r2, [r7, #12]
 80122a0:	431a      	orrs	r2, r3
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80122a6:	2300      	movs	r3, #0
}
 80122a8:	4618      	mov	r0, r3
 80122aa:	3714      	adds	r7, #20
 80122ac:	46bd      	mov	sp, r7
 80122ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b2:	b004      	add	sp, #16
 80122b4:	4770      	bx	lr
 80122b6:	bf00      	nop
 80122b8:	ffc02c00 	.word	0xffc02c00

080122bc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80122bc:	b480      	push	{r7}
 80122be:	b083      	sub	sp, #12
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80122ca:	4618      	mov	r0, r3
 80122cc:	370c      	adds	r7, #12
 80122ce:	46bd      	mov	sp, r7
 80122d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d4:	4770      	bx	lr

080122d6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80122d6:	b480      	push	{r7}
 80122d8:	b083      	sub	sp, #12
 80122da:	af00      	add	r7, sp, #0
 80122dc:	6078      	str	r0, [r7, #4]
 80122de:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80122e0:	683b      	ldr	r3, [r7, #0]
 80122e2:	681a      	ldr	r2, [r3, #0]
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80122ea:	2300      	movs	r3, #0
}
 80122ec:	4618      	mov	r0, r3
 80122ee:	370c      	adds	r7, #12
 80122f0:	46bd      	mov	sp, r7
 80122f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f6:	4770      	bx	lr

080122f8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80122f8:	b480      	push	{r7}
 80122fa:	b083      	sub	sp, #12
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	f043 0203 	orr.w	r2, r3, #3
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 801230c:	2300      	movs	r3, #0
}
 801230e:	4618      	mov	r0, r3
 8012310:	370c      	adds	r7, #12
 8012312:	46bd      	mov	sp, r7
 8012314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012318:	4770      	bx	lr

0801231a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 801231a:	b480      	push	{r7}
 801231c:	b083      	sub	sp, #12
 801231e:	af00      	add	r7, sp, #0
 8012320:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	f003 0303 	and.w	r3, r3, #3
}
 801232a:	4618      	mov	r0, r3
 801232c:	370c      	adds	r7, #12
 801232e:	46bd      	mov	sp, r7
 8012330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012334:	4770      	bx	lr
	...

08012338 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8012338:	b480      	push	{r7}
 801233a:	b085      	sub	sp, #20
 801233c:	af00      	add	r7, sp, #0
 801233e:	6078      	str	r0, [r7, #4]
 8012340:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012342:	2300      	movs	r3, #0
 8012344:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8012346:	683b      	ldr	r3, [r7, #0]
 8012348:	681a      	ldr	r2, [r3, #0]
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801234e:	683b      	ldr	r3, [r7, #0]
 8012350:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8012352:	683b      	ldr	r3, [r7, #0]
 8012354:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012356:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8012358:	683b      	ldr	r3, [r7, #0]
 801235a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 801235c:	431a      	orrs	r2, r3
                       Command->CPSM);
 801235e:	683b      	ldr	r3, [r7, #0]
 8012360:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8012362:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012364:	68fa      	ldr	r2, [r7, #12]
 8012366:	4313      	orrs	r3, r2
 8012368:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	68da      	ldr	r2, [r3, #12]
 801236e:	4b06      	ldr	r3, [pc, #24]	; (8012388 <SDMMC_SendCommand+0x50>)
 8012370:	4013      	ands	r3, r2
 8012372:	68fa      	ldr	r2, [r7, #12]
 8012374:	431a      	orrs	r2, r3
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801237a:	2300      	movs	r3, #0
}
 801237c:	4618      	mov	r0, r3
 801237e:	3714      	adds	r7, #20
 8012380:	46bd      	mov	sp, r7
 8012382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012386:	4770      	bx	lr
 8012388:	fffee0c0 	.word	0xfffee0c0

0801238c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 801238c:	b480      	push	{r7}
 801238e:	b083      	sub	sp, #12
 8012390:	af00      	add	r7, sp, #0
 8012392:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	691b      	ldr	r3, [r3, #16]
 8012398:	b2db      	uxtb	r3, r3
}
 801239a:	4618      	mov	r0, r3
 801239c:	370c      	adds	r7, #12
 801239e:	46bd      	mov	sp, r7
 80123a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a4:	4770      	bx	lr

080123a6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80123a6:	b480      	push	{r7}
 80123a8:	b085      	sub	sp, #20
 80123aa:	af00      	add	r7, sp, #0
 80123ac:	6078      	str	r0, [r7, #4]
 80123ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	3314      	adds	r3, #20
 80123b4:	461a      	mov	r2, r3
 80123b6:	683b      	ldr	r3, [r7, #0]
 80123b8:	4413      	add	r3, r2
 80123ba:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	681b      	ldr	r3, [r3, #0]
}
 80123c0:	4618      	mov	r0, r3
 80123c2:	3714      	adds	r7, #20
 80123c4:	46bd      	mov	sp, r7
 80123c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ca:	4770      	bx	lr

080123cc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80123cc:	b480      	push	{r7}
 80123ce:	b085      	sub	sp, #20
 80123d0:	af00      	add	r7, sp, #0
 80123d2:	6078      	str	r0, [r7, #4]
 80123d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80123d6:	2300      	movs	r3, #0
 80123d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80123da:	683b      	ldr	r3, [r7, #0]
 80123dc:	681a      	ldr	r2, [r3, #0]
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80123e2:	683b      	ldr	r3, [r7, #0]
 80123e4:	685a      	ldr	r2, [r3, #4]
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80123ea:	683b      	ldr	r3, [r7, #0]
 80123ec:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80123ee:	683b      	ldr	r3, [r7, #0]
 80123f0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80123f2:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80123f4:	683b      	ldr	r3, [r7, #0]
 80123f6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80123f8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80123fa:	683b      	ldr	r3, [r7, #0]
 80123fc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80123fe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012400:	68fa      	ldr	r2, [r7, #12]
 8012402:	4313      	orrs	r3, r2
 8012404:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801240a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	431a      	orrs	r2, r3
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8012416:	2300      	movs	r3, #0

}
 8012418:	4618      	mov	r0, r3
 801241a:	3714      	adds	r7, #20
 801241c:	46bd      	mov	sp, r7
 801241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012422:	4770      	bx	lr

08012424 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8012424:	b580      	push	{r7, lr}
 8012426:	b088      	sub	sp, #32
 8012428:	af00      	add	r7, sp, #0
 801242a:	6078      	str	r0, [r7, #4]
 801242c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801242e:	683b      	ldr	r3, [r7, #0]
 8012430:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8012432:	2310      	movs	r3, #16
 8012434:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012436:	f44f 7380 	mov.w	r3, #256	; 0x100
 801243a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801243c:	2300      	movs	r3, #0
 801243e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012440:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012444:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012446:	f107 0308 	add.w	r3, r7, #8
 801244a:	4619      	mov	r1, r3
 801244c:	6878      	ldr	r0, [r7, #4]
 801244e:	f7ff ff73 	bl	8012338 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8012452:	f241 3288 	movw	r2, #5000	; 0x1388
 8012456:	2110      	movs	r1, #16
 8012458:	6878      	ldr	r0, [r7, #4]
 801245a:	f000 fa5f 	bl	801291c <SDMMC_GetCmdResp1>
 801245e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012460:	69fb      	ldr	r3, [r7, #28]
}
 8012462:	4618      	mov	r0, r3
 8012464:	3720      	adds	r7, #32
 8012466:	46bd      	mov	sp, r7
 8012468:	bd80      	pop	{r7, pc}

0801246a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801246a:	b580      	push	{r7, lr}
 801246c:	b088      	sub	sp, #32
 801246e:	af00      	add	r7, sp, #0
 8012470:	6078      	str	r0, [r7, #4]
 8012472:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012474:	683b      	ldr	r3, [r7, #0]
 8012476:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8012478:	2311      	movs	r3, #17
 801247a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801247c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012480:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012482:	2300      	movs	r3, #0
 8012484:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012486:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801248a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801248c:	f107 0308 	add.w	r3, r7, #8
 8012490:	4619      	mov	r1, r3
 8012492:	6878      	ldr	r0, [r7, #4]
 8012494:	f7ff ff50 	bl	8012338 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012498:	f241 3288 	movw	r2, #5000	; 0x1388
 801249c:	2111      	movs	r1, #17
 801249e:	6878      	ldr	r0, [r7, #4]
 80124a0:	f000 fa3c 	bl	801291c <SDMMC_GetCmdResp1>
 80124a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80124a6:	69fb      	ldr	r3, [r7, #28]
}
 80124a8:	4618      	mov	r0, r3
 80124aa:	3720      	adds	r7, #32
 80124ac:	46bd      	mov	sp, r7
 80124ae:	bd80      	pop	{r7, pc}

080124b0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80124b0:	b580      	push	{r7, lr}
 80124b2:	b088      	sub	sp, #32
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	6078      	str	r0, [r7, #4]
 80124b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80124ba:	683b      	ldr	r3, [r7, #0]
 80124bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80124be:	2312      	movs	r3, #18
 80124c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80124c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80124c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80124c8:	2300      	movs	r3, #0
 80124ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80124cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80124d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80124d2:	f107 0308 	add.w	r3, r7, #8
 80124d6:	4619      	mov	r1, r3
 80124d8:	6878      	ldr	r0, [r7, #4]
 80124da:	f7ff ff2d 	bl	8012338 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80124de:	f241 3288 	movw	r2, #5000	; 0x1388
 80124e2:	2112      	movs	r1, #18
 80124e4:	6878      	ldr	r0, [r7, #4]
 80124e6:	f000 fa19 	bl	801291c <SDMMC_GetCmdResp1>
 80124ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80124ec:	69fb      	ldr	r3, [r7, #28]
}
 80124ee:	4618      	mov	r0, r3
 80124f0:	3720      	adds	r7, #32
 80124f2:	46bd      	mov	sp, r7
 80124f4:	bd80      	pop	{r7, pc}

080124f6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80124f6:	b580      	push	{r7, lr}
 80124f8:	b088      	sub	sp, #32
 80124fa:	af00      	add	r7, sp, #0
 80124fc:	6078      	str	r0, [r7, #4]
 80124fe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012500:	683b      	ldr	r3, [r7, #0]
 8012502:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8012504:	2318      	movs	r3, #24
 8012506:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012508:	f44f 7380 	mov.w	r3, #256	; 0x100
 801250c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801250e:	2300      	movs	r3, #0
 8012510:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012512:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012516:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012518:	f107 0308 	add.w	r3, r7, #8
 801251c:	4619      	mov	r1, r3
 801251e:	6878      	ldr	r0, [r7, #4]
 8012520:	f7ff ff0a 	bl	8012338 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012524:	f241 3288 	movw	r2, #5000	; 0x1388
 8012528:	2118      	movs	r1, #24
 801252a:	6878      	ldr	r0, [r7, #4]
 801252c:	f000 f9f6 	bl	801291c <SDMMC_GetCmdResp1>
 8012530:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012532:	69fb      	ldr	r3, [r7, #28]
}
 8012534:	4618      	mov	r0, r3
 8012536:	3720      	adds	r7, #32
 8012538:	46bd      	mov	sp, r7
 801253a:	bd80      	pop	{r7, pc}

0801253c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801253c:	b580      	push	{r7, lr}
 801253e:	b088      	sub	sp, #32
 8012540:	af00      	add	r7, sp, #0
 8012542:	6078      	str	r0, [r7, #4]
 8012544:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012546:	683b      	ldr	r3, [r7, #0]
 8012548:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801254a:	2319      	movs	r3, #25
 801254c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801254e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012552:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012554:	2300      	movs	r3, #0
 8012556:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012558:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801255c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801255e:	f107 0308 	add.w	r3, r7, #8
 8012562:	4619      	mov	r1, r3
 8012564:	6878      	ldr	r0, [r7, #4]
 8012566:	f7ff fee7 	bl	8012338 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801256a:	f241 3288 	movw	r2, #5000	; 0x1388
 801256e:	2119      	movs	r1, #25
 8012570:	6878      	ldr	r0, [r7, #4]
 8012572:	f000 f9d3 	bl	801291c <SDMMC_GetCmdResp1>
 8012576:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012578:	69fb      	ldr	r3, [r7, #28]
}
 801257a:	4618      	mov	r0, r3
 801257c:	3720      	adds	r7, #32
 801257e:	46bd      	mov	sp, r7
 8012580:	bd80      	pop	{r7, pc}
	...

08012584 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8012584:	b580      	push	{r7, lr}
 8012586:	b088      	sub	sp, #32
 8012588:	af00      	add	r7, sp, #0
 801258a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 801258c:	2300      	movs	r3, #0
 801258e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8012590:	230c      	movs	r3, #12
 8012592:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012594:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012598:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801259a:	2300      	movs	r3, #0
 801259c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801259e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80125a2:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	68db      	ldr	r3, [r3, #12]
 80125a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	68db      	ldr	r3, [r3, #12]
 80125b4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80125bc:	f107 0308 	add.w	r3, r7, #8
 80125c0:	4619      	mov	r1, r3
 80125c2:	6878      	ldr	r0, [r7, #4]
 80125c4:	f7ff feb8 	bl	8012338 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80125c8:	4a0b      	ldr	r2, [pc, #44]	; (80125f8 <SDMMC_CmdStopTransfer+0x74>)
 80125ca:	210c      	movs	r1, #12
 80125cc:	6878      	ldr	r0, [r7, #4]
 80125ce:	f000 f9a5 	bl	801291c <SDMMC_GetCmdResp1>
 80125d2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	68db      	ldr	r3, [r3, #12]
 80125d8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80125e0:	69fb      	ldr	r3, [r7, #28]
 80125e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80125e6:	d101      	bne.n	80125ec <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80125e8:	2300      	movs	r3, #0
 80125ea:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80125ec:	69fb      	ldr	r3, [r7, #28]
}
 80125ee:	4618      	mov	r0, r3
 80125f0:	3720      	adds	r7, #32
 80125f2:	46bd      	mov	sp, r7
 80125f4:	bd80      	pop	{r7, pc}
 80125f6:	bf00      	nop
 80125f8:	05f5e100 	.word	0x05f5e100

080125fc <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80125fc:	b580      	push	{r7, lr}
 80125fe:	b088      	sub	sp, #32
 8012600:	af00      	add	r7, sp, #0
 8012602:	6078      	str	r0, [r7, #4]
 8012604:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8012606:	683b      	ldr	r3, [r7, #0]
 8012608:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 801260a:	2307      	movs	r3, #7
 801260c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801260e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012612:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012614:	2300      	movs	r3, #0
 8012616:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801261c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801261e:	f107 0308 	add.w	r3, r7, #8
 8012622:	4619      	mov	r1, r3
 8012624:	6878      	ldr	r0, [r7, #4]
 8012626:	f7ff fe87 	bl	8012338 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 801262a:	f241 3288 	movw	r2, #5000	; 0x1388
 801262e:	2107      	movs	r1, #7
 8012630:	6878      	ldr	r0, [r7, #4]
 8012632:	f000 f973 	bl	801291c <SDMMC_GetCmdResp1>
 8012636:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012638:	69fb      	ldr	r3, [r7, #28]
}
 801263a:	4618      	mov	r0, r3
 801263c:	3720      	adds	r7, #32
 801263e:	46bd      	mov	sp, r7
 8012640:	bd80      	pop	{r7, pc}

08012642 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8012642:	b580      	push	{r7, lr}
 8012644:	b088      	sub	sp, #32
 8012646:	af00      	add	r7, sp, #0
 8012648:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801264a:	2300      	movs	r3, #0
 801264c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801264e:	2300      	movs	r3, #0
 8012650:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8012652:	2300      	movs	r3, #0
 8012654:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012656:	2300      	movs	r3, #0
 8012658:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801265a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801265e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012660:	f107 0308 	add.w	r3, r7, #8
 8012664:	4619      	mov	r1, r3
 8012666:	6878      	ldr	r0, [r7, #4]
 8012668:	f7ff fe66 	bl	8012338 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 801266c:	6878      	ldr	r0, [r7, #4]
 801266e:	f000 fb97 	bl	8012da0 <SDMMC_GetCmdError>
 8012672:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012674:	69fb      	ldr	r3, [r7, #28]
}
 8012676:	4618      	mov	r0, r3
 8012678:	3720      	adds	r7, #32
 801267a:	46bd      	mov	sp, r7
 801267c:	bd80      	pop	{r7, pc}

0801267e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801267e:	b580      	push	{r7, lr}
 8012680:	b088      	sub	sp, #32
 8012682:	af00      	add	r7, sp, #0
 8012684:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8012686:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801268a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 801268c:	2308      	movs	r3, #8
 801268e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012690:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012694:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012696:	2300      	movs	r3, #0
 8012698:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801269a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801269e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80126a0:	f107 0308 	add.w	r3, r7, #8
 80126a4:	4619      	mov	r1, r3
 80126a6:	6878      	ldr	r0, [r7, #4]
 80126a8:	f7ff fe46 	bl	8012338 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80126ac:	6878      	ldr	r0, [r7, #4]
 80126ae:	f000 fb29 	bl	8012d04 <SDMMC_GetCmdResp7>
 80126b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80126b4:	69fb      	ldr	r3, [r7, #28]
}
 80126b6:	4618      	mov	r0, r3
 80126b8:	3720      	adds	r7, #32
 80126ba:	46bd      	mov	sp, r7
 80126bc:	bd80      	pop	{r7, pc}

080126be <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80126be:	b580      	push	{r7, lr}
 80126c0:	b088      	sub	sp, #32
 80126c2:	af00      	add	r7, sp, #0
 80126c4:	6078      	str	r0, [r7, #4]
 80126c6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80126c8:	683b      	ldr	r3, [r7, #0]
 80126ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80126cc:	2337      	movs	r3, #55	; 0x37
 80126ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80126d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80126d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80126d6:	2300      	movs	r3, #0
 80126d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80126da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80126de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80126e0:	f107 0308 	add.w	r3, r7, #8
 80126e4:	4619      	mov	r1, r3
 80126e6:	6878      	ldr	r0, [r7, #4]
 80126e8:	f7ff fe26 	bl	8012338 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80126ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80126f0:	2137      	movs	r1, #55	; 0x37
 80126f2:	6878      	ldr	r0, [r7, #4]
 80126f4:	f000 f912 	bl	801291c <SDMMC_GetCmdResp1>
 80126f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80126fa:	69fb      	ldr	r3, [r7, #28]
}
 80126fc:	4618      	mov	r0, r3
 80126fe:	3720      	adds	r7, #32
 8012700:	46bd      	mov	sp, r7
 8012702:	bd80      	pop	{r7, pc}

08012704 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012704:	b580      	push	{r7, lr}
 8012706:	b088      	sub	sp, #32
 8012708:	af00      	add	r7, sp, #0
 801270a:	6078      	str	r0, [r7, #4]
 801270c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801270e:	683b      	ldr	r3, [r7, #0]
 8012710:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8012712:	2329      	movs	r3, #41	; 0x29
 8012714:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012716:	f44f 7380 	mov.w	r3, #256	; 0x100
 801271a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801271c:	2300      	movs	r3, #0
 801271e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012724:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012726:	f107 0308 	add.w	r3, r7, #8
 801272a:	4619      	mov	r1, r3
 801272c:	6878      	ldr	r0, [r7, #4]
 801272e:	f7ff fe03 	bl	8012338 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8012732:	6878      	ldr	r0, [r7, #4]
 8012734:	f000 fa2e 	bl	8012b94 <SDMMC_GetCmdResp3>
 8012738:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801273a:	69fb      	ldr	r3, [r7, #28]
}
 801273c:	4618      	mov	r0, r3
 801273e:	3720      	adds	r7, #32
 8012740:	46bd      	mov	sp, r7
 8012742:	bd80      	pop	{r7, pc}

08012744 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8012744:	b580      	push	{r7, lr}
 8012746:	b088      	sub	sp, #32
 8012748:	af00      	add	r7, sp, #0
 801274a:	6078      	str	r0, [r7, #4]
 801274c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801274e:	683b      	ldr	r3, [r7, #0]
 8012750:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8012752:	2306      	movs	r3, #6
 8012754:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012756:	f44f 7380 	mov.w	r3, #256	; 0x100
 801275a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801275c:	2300      	movs	r3, #0
 801275e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012764:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012766:	f107 0308 	add.w	r3, r7, #8
 801276a:	4619      	mov	r1, r3
 801276c:	6878      	ldr	r0, [r7, #4]
 801276e:	f7ff fde3 	bl	8012338 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8012772:	f241 3288 	movw	r2, #5000	; 0x1388
 8012776:	2106      	movs	r1, #6
 8012778:	6878      	ldr	r0, [r7, #4]
 801277a:	f000 f8cf 	bl	801291c <SDMMC_GetCmdResp1>
 801277e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012780:	69fb      	ldr	r3, [r7, #28]
}
 8012782:	4618      	mov	r0, r3
 8012784:	3720      	adds	r7, #32
 8012786:	46bd      	mov	sp, r7
 8012788:	bd80      	pop	{r7, pc}

0801278a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801278a:	b580      	push	{r7, lr}
 801278c:	b088      	sub	sp, #32
 801278e:	af00      	add	r7, sp, #0
 8012790:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8012792:	2300      	movs	r3, #0
 8012794:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8012796:	2333      	movs	r3, #51	; 0x33
 8012798:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801279a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801279e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80127a0:	2300      	movs	r3, #0
 80127a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80127a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80127a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80127aa:	f107 0308 	add.w	r3, r7, #8
 80127ae:	4619      	mov	r1, r3
 80127b0:	6878      	ldr	r0, [r7, #4]
 80127b2:	f7ff fdc1 	bl	8012338 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80127b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80127ba:	2133      	movs	r1, #51	; 0x33
 80127bc:	6878      	ldr	r0, [r7, #4]
 80127be:	f000 f8ad 	bl	801291c <SDMMC_GetCmdResp1>
 80127c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80127c4:	69fb      	ldr	r3, [r7, #28]
}
 80127c6:	4618      	mov	r0, r3
 80127c8:	3720      	adds	r7, #32
 80127ca:	46bd      	mov	sp, r7
 80127cc:	bd80      	pop	{r7, pc}

080127ce <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80127ce:	b580      	push	{r7, lr}
 80127d0:	b088      	sub	sp, #32
 80127d2:	af00      	add	r7, sp, #0
 80127d4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80127d6:	2300      	movs	r3, #0
 80127d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80127da:	2302      	movs	r3, #2
 80127dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80127de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80127e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80127e4:	2300      	movs	r3, #0
 80127e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80127e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80127ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80127ee:	f107 0308 	add.w	r3, r7, #8
 80127f2:	4619      	mov	r1, r3
 80127f4:	6878      	ldr	r0, [r7, #4]
 80127f6:	f7ff fd9f 	bl	8012338 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80127fa:	6878      	ldr	r0, [r7, #4]
 80127fc:	f000 f980 	bl	8012b00 <SDMMC_GetCmdResp2>
 8012800:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012802:	69fb      	ldr	r3, [r7, #28]
}
 8012804:	4618      	mov	r0, r3
 8012806:	3720      	adds	r7, #32
 8012808:	46bd      	mov	sp, r7
 801280a:	bd80      	pop	{r7, pc}

0801280c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801280c:	b580      	push	{r7, lr}
 801280e:	b088      	sub	sp, #32
 8012810:	af00      	add	r7, sp, #0
 8012812:	6078      	str	r0, [r7, #4]
 8012814:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8012816:	683b      	ldr	r3, [r7, #0]
 8012818:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801281a:	2309      	movs	r3, #9
 801281c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801281e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012822:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012824:	2300      	movs	r3, #0
 8012826:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801282c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801282e:	f107 0308 	add.w	r3, r7, #8
 8012832:	4619      	mov	r1, r3
 8012834:	6878      	ldr	r0, [r7, #4]
 8012836:	f7ff fd7f 	bl	8012338 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801283a:	6878      	ldr	r0, [r7, #4]
 801283c:	f000 f960 	bl	8012b00 <SDMMC_GetCmdResp2>
 8012840:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012842:	69fb      	ldr	r3, [r7, #28]
}
 8012844:	4618      	mov	r0, r3
 8012846:	3720      	adds	r7, #32
 8012848:	46bd      	mov	sp, r7
 801284a:	bd80      	pop	{r7, pc}

0801284c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 801284c:	b580      	push	{r7, lr}
 801284e:	b088      	sub	sp, #32
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
 8012854:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8012856:	2300      	movs	r3, #0
 8012858:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801285a:	2303      	movs	r3, #3
 801285c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801285e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012862:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012864:	2300      	movs	r3, #0
 8012866:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801286c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801286e:	f107 0308 	add.w	r3, r7, #8
 8012872:	4619      	mov	r1, r3
 8012874:	6878      	ldr	r0, [r7, #4]
 8012876:	f7ff fd5f 	bl	8012338 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801287a:	683a      	ldr	r2, [r7, #0]
 801287c:	2103      	movs	r1, #3
 801287e:	6878      	ldr	r0, [r7, #4]
 8012880:	f000 f9c8 	bl	8012c14 <SDMMC_GetCmdResp6>
 8012884:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012886:	69fb      	ldr	r3, [r7, #28]
}
 8012888:	4618      	mov	r0, r3
 801288a:	3720      	adds	r7, #32
 801288c:	46bd      	mov	sp, r7
 801288e:	bd80      	pop	{r7, pc}

08012890 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012890:	b580      	push	{r7, lr}
 8012892:	b088      	sub	sp, #32
 8012894:	af00      	add	r7, sp, #0
 8012896:	6078      	str	r0, [r7, #4]
 8012898:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801289a:	683b      	ldr	r3, [r7, #0]
 801289c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801289e:	230d      	movs	r3, #13
 80128a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80128a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80128a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80128a8:	2300      	movs	r3, #0
 80128aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80128ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80128b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80128b2:	f107 0308 	add.w	r3, r7, #8
 80128b6:	4619      	mov	r1, r3
 80128b8:	6878      	ldr	r0, [r7, #4]
 80128ba:	f7ff fd3d 	bl	8012338 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80128be:	f241 3288 	movw	r2, #5000	; 0x1388
 80128c2:	210d      	movs	r1, #13
 80128c4:	6878      	ldr	r0, [r7, #4]
 80128c6:	f000 f829 	bl	801291c <SDMMC_GetCmdResp1>
 80128ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80128cc:	69fb      	ldr	r3, [r7, #28]
}
 80128ce:	4618      	mov	r0, r3
 80128d0:	3720      	adds	r7, #32
 80128d2:	46bd      	mov	sp, r7
 80128d4:	bd80      	pop	{r7, pc}

080128d6 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80128d6:	b580      	push	{r7, lr}
 80128d8:	b088      	sub	sp, #32
 80128da:	af00      	add	r7, sp, #0
 80128dc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80128de:	2300      	movs	r3, #0
 80128e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80128e2:	230d      	movs	r3, #13
 80128e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80128e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80128ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80128ec:	2300      	movs	r3, #0
 80128ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80128f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80128f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80128f6:	f107 0308 	add.w	r3, r7, #8
 80128fa:	4619      	mov	r1, r3
 80128fc:	6878      	ldr	r0, [r7, #4]
 80128fe:	f7ff fd1b 	bl	8012338 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8012902:	f241 3288 	movw	r2, #5000	; 0x1388
 8012906:	210d      	movs	r1, #13
 8012908:	6878      	ldr	r0, [r7, #4]
 801290a:	f000 f807 	bl	801291c <SDMMC_GetCmdResp1>
 801290e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012910:	69fb      	ldr	r3, [r7, #28]
}
 8012912:	4618      	mov	r0, r3
 8012914:	3720      	adds	r7, #32
 8012916:	46bd      	mov	sp, r7
 8012918:	bd80      	pop	{r7, pc}
	...

0801291c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 801291c:	b580      	push	{r7, lr}
 801291e:	b088      	sub	sp, #32
 8012920:	af00      	add	r7, sp, #0
 8012922:	60f8      	str	r0, [r7, #12]
 8012924:	460b      	mov	r3, r1
 8012926:	607a      	str	r2, [r7, #4]
 8012928:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801292a:	4b70      	ldr	r3, [pc, #448]	; (8012aec <SDMMC_GetCmdResp1+0x1d0>)
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	4a70      	ldr	r2, [pc, #448]	; (8012af0 <SDMMC_GetCmdResp1+0x1d4>)
 8012930:	fba2 2303 	umull	r2, r3, r2, r3
 8012934:	0a5a      	lsrs	r2, r3, #9
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	fb02 f303 	mul.w	r3, r2, r3
 801293c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801293e:	69fb      	ldr	r3, [r7, #28]
 8012940:	1e5a      	subs	r2, r3, #1
 8012942:	61fa      	str	r2, [r7, #28]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d102      	bne.n	801294e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012948:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801294c:	e0c9      	b.n	8012ae2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012952:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8012954:	69ba      	ldr	r2, [r7, #24]
 8012956:	4b67      	ldr	r3, [pc, #412]	; (8012af4 <SDMMC_GetCmdResp1+0x1d8>)
 8012958:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801295a:	2b00      	cmp	r3, #0
 801295c:	d0ef      	beq.n	801293e <SDMMC_GetCmdResp1+0x22>
 801295e:	69bb      	ldr	r3, [r7, #24]
 8012960:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012964:	2b00      	cmp	r3, #0
 8012966:	d1ea      	bne.n	801293e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801296c:	f003 0304 	and.w	r3, r3, #4
 8012970:	2b00      	cmp	r3, #0
 8012972:	d004      	beq.n	801297e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	2204      	movs	r2, #4
 8012978:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801297a:	2304      	movs	r3, #4
 801297c:	e0b1      	b.n	8012ae2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012982:	f003 0301 	and.w	r3, r3, #1
 8012986:	2b00      	cmp	r3, #0
 8012988:	d004      	beq.n	8012994 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	2201      	movs	r2, #1
 801298e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012990:	2301      	movs	r3, #1
 8012992:	e0a6      	b.n	8012ae2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	4a58      	ldr	r2, [pc, #352]	; (8012af8 <SDMMC_GetCmdResp1+0x1dc>)
 8012998:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801299a:	68f8      	ldr	r0, [r7, #12]
 801299c:	f7ff fcf6 	bl	801238c <SDMMC_GetCommandResponse>
 80129a0:	4603      	mov	r3, r0
 80129a2:	461a      	mov	r2, r3
 80129a4:	7afb      	ldrb	r3, [r7, #11]
 80129a6:	4293      	cmp	r3, r2
 80129a8:	d001      	beq.n	80129ae <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80129aa:	2301      	movs	r3, #1
 80129ac:	e099      	b.n	8012ae2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80129ae:	2100      	movs	r1, #0
 80129b0:	68f8      	ldr	r0, [r7, #12]
 80129b2:	f7ff fcf8 	bl	80123a6 <SDMMC_GetResponse>
 80129b6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80129b8:	697a      	ldr	r2, [r7, #20]
 80129ba:	4b50      	ldr	r3, [pc, #320]	; (8012afc <SDMMC_GetCmdResp1+0x1e0>)
 80129bc:	4013      	ands	r3, r2
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d101      	bne.n	80129c6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80129c2:	2300      	movs	r3, #0
 80129c4:	e08d      	b.n	8012ae2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80129c6:	697b      	ldr	r3, [r7, #20]
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	da02      	bge.n	80129d2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80129cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80129d0:	e087      	b.n	8012ae2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80129d2:	697b      	ldr	r3, [r7, #20]
 80129d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d001      	beq.n	80129e0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80129dc:	2340      	movs	r3, #64	; 0x40
 80129de:	e080      	b.n	8012ae2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80129e0:	697b      	ldr	r3, [r7, #20]
 80129e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d001      	beq.n	80129ee <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80129ea:	2380      	movs	r3, #128	; 0x80
 80129ec:	e079      	b.n	8012ae2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80129ee:	697b      	ldr	r3, [r7, #20]
 80129f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d002      	beq.n	80129fe <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80129f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80129fc:	e071      	b.n	8012ae2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80129fe:	697b      	ldr	r3, [r7, #20]
 8012a00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d002      	beq.n	8012a0e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012a08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012a0c:	e069      	b.n	8012ae2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012a0e:	697b      	ldr	r3, [r7, #20]
 8012a10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d002      	beq.n	8012a1e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012a18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012a1c:	e061      	b.n	8012ae2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012a1e:	697b      	ldr	r3, [r7, #20]
 8012a20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d002      	beq.n	8012a2e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012a28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012a2c:	e059      	b.n	8012ae2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012a2e:	697b      	ldr	r3, [r7, #20]
 8012a30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d002      	beq.n	8012a3e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012a38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012a3c:	e051      	b.n	8012ae2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012a3e:	697b      	ldr	r3, [r7, #20]
 8012a40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d002      	beq.n	8012a4e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012a48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012a4c:	e049      	b.n	8012ae2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012a4e:	697b      	ldr	r3, [r7, #20]
 8012a50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d002      	beq.n	8012a5e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012a58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012a5c:	e041      	b.n	8012ae2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012a5e:	697b      	ldr	r3, [r7, #20]
 8012a60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d002      	beq.n	8012a6e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8012a68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012a6c:	e039      	b.n	8012ae2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012a6e:	697b      	ldr	r3, [r7, #20]
 8012a70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d002      	beq.n	8012a7e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012a78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012a7c:	e031      	b.n	8012ae2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012a7e:	697b      	ldr	r3, [r7, #20]
 8012a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d002      	beq.n	8012a8e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012a88:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012a8c:	e029      	b.n	8012ae2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8012a8e:	697b      	ldr	r3, [r7, #20]
 8012a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d002      	beq.n	8012a9e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012a98:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012a9c:	e021      	b.n	8012ae2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8012a9e:	697b      	ldr	r3, [r7, #20]
 8012aa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d002      	beq.n	8012aae <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012aa8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012aac:	e019      	b.n	8012ae2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8012aae:	697b      	ldr	r3, [r7, #20]
 8012ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d002      	beq.n	8012abe <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012ab8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012abc:	e011      	b.n	8012ae2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8012abe:	697b      	ldr	r3, [r7, #20]
 8012ac0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d002      	beq.n	8012ace <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8012ac8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012acc:	e009      	b.n	8012ae2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8012ace:	697b      	ldr	r3, [r7, #20]
 8012ad0:	f003 0308 	and.w	r3, r3, #8
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d002      	beq.n	8012ade <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8012ad8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8012adc:	e001      	b.n	8012ae2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012ade:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	3720      	adds	r7, #32
 8012ae6:	46bd      	mov	sp, r7
 8012ae8:	bd80      	pop	{r7, pc}
 8012aea:	bf00      	nop
 8012aec:	24000000 	.word	0x24000000
 8012af0:	10624dd3 	.word	0x10624dd3
 8012af4:	00200045 	.word	0x00200045
 8012af8:	002000c5 	.word	0x002000c5
 8012afc:	fdffe008 	.word	0xfdffe008

08012b00 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8012b00:	b480      	push	{r7}
 8012b02:	b085      	sub	sp, #20
 8012b04:	af00      	add	r7, sp, #0
 8012b06:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012b08:	4b1f      	ldr	r3, [pc, #124]	; (8012b88 <SDMMC_GetCmdResp2+0x88>)
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	4a1f      	ldr	r2, [pc, #124]	; (8012b8c <SDMMC_GetCmdResp2+0x8c>)
 8012b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8012b12:	0a5b      	lsrs	r3, r3, #9
 8012b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8012b18:	fb02 f303 	mul.w	r3, r2, r3
 8012b1c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	1e5a      	subs	r2, r3, #1
 8012b22:	60fa      	str	r2, [r7, #12]
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d102      	bne.n	8012b2e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012b28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012b2c:	e026      	b.n	8012b7c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b32:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012b34:	68bb      	ldr	r3, [r7, #8]
 8012b36:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d0ef      	beq.n	8012b1e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012b3e:	68bb      	ldr	r3, [r7, #8]
 8012b40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d1ea      	bne.n	8012b1e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b4c:	f003 0304 	and.w	r3, r3, #4
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d004      	beq.n	8012b5e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	2204      	movs	r2, #4
 8012b58:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012b5a:	2304      	movs	r3, #4
 8012b5c:	e00e      	b.n	8012b7c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b62:	f003 0301 	and.w	r3, r3, #1
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d004      	beq.n	8012b74 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	2201      	movs	r2, #1
 8012b6e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012b70:	2301      	movs	r3, #1
 8012b72:	e003      	b.n	8012b7c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	4a06      	ldr	r2, [pc, #24]	; (8012b90 <SDMMC_GetCmdResp2+0x90>)
 8012b78:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012b7a:	2300      	movs	r3, #0
}
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	3714      	adds	r7, #20
 8012b80:	46bd      	mov	sp, r7
 8012b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b86:	4770      	bx	lr
 8012b88:	24000000 	.word	0x24000000
 8012b8c:	10624dd3 	.word	0x10624dd3
 8012b90:	002000c5 	.word	0x002000c5

08012b94 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8012b94:	b480      	push	{r7}
 8012b96:	b085      	sub	sp, #20
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012b9c:	4b1a      	ldr	r3, [pc, #104]	; (8012c08 <SDMMC_GetCmdResp3+0x74>)
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	4a1a      	ldr	r2, [pc, #104]	; (8012c0c <SDMMC_GetCmdResp3+0x78>)
 8012ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8012ba6:	0a5b      	lsrs	r3, r3, #9
 8012ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8012bac:	fb02 f303 	mul.w	r3, r2, r3
 8012bb0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	1e5a      	subs	r2, r3, #1
 8012bb6:	60fa      	str	r2, [r7, #12]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d102      	bne.n	8012bc2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012bbc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012bc0:	e01b      	b.n	8012bfa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012bc6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012bc8:	68bb      	ldr	r3, [r7, #8]
 8012bca:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d0ef      	beq.n	8012bb2 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012bd2:	68bb      	ldr	r3, [r7, #8]
 8012bd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d1ea      	bne.n	8012bb2 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012be0:	f003 0304 	and.w	r3, r3, #4
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d004      	beq.n	8012bf2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	2204      	movs	r2, #4
 8012bec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012bee:	2304      	movs	r3, #4
 8012bf0:	e003      	b.n	8012bfa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	4a06      	ldr	r2, [pc, #24]	; (8012c10 <SDMMC_GetCmdResp3+0x7c>)
 8012bf6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012bf8:	2300      	movs	r3, #0
}
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	3714      	adds	r7, #20
 8012bfe:	46bd      	mov	sp, r7
 8012c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c04:	4770      	bx	lr
 8012c06:	bf00      	nop
 8012c08:	24000000 	.word	0x24000000
 8012c0c:	10624dd3 	.word	0x10624dd3
 8012c10:	002000c5 	.word	0x002000c5

08012c14 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8012c14:	b580      	push	{r7, lr}
 8012c16:	b088      	sub	sp, #32
 8012c18:	af00      	add	r7, sp, #0
 8012c1a:	60f8      	str	r0, [r7, #12]
 8012c1c:	460b      	mov	r3, r1
 8012c1e:	607a      	str	r2, [r7, #4]
 8012c20:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012c22:	4b35      	ldr	r3, [pc, #212]	; (8012cf8 <SDMMC_GetCmdResp6+0xe4>)
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	4a35      	ldr	r2, [pc, #212]	; (8012cfc <SDMMC_GetCmdResp6+0xe8>)
 8012c28:	fba2 2303 	umull	r2, r3, r2, r3
 8012c2c:	0a5b      	lsrs	r3, r3, #9
 8012c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012c32:	fb02 f303 	mul.w	r3, r2, r3
 8012c36:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012c38:	69fb      	ldr	r3, [r7, #28]
 8012c3a:	1e5a      	subs	r2, r3, #1
 8012c3c:	61fa      	str	r2, [r7, #28]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d102      	bne.n	8012c48 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012c42:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012c46:	e052      	b.n	8012cee <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c4c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012c4e:	69bb      	ldr	r3, [r7, #24]
 8012c50:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d0ef      	beq.n	8012c38 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012c58:	69bb      	ldr	r3, [r7, #24]
 8012c5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d1ea      	bne.n	8012c38 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c66:	f003 0304 	and.w	r3, r3, #4
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d004      	beq.n	8012c78 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	2204      	movs	r2, #4
 8012c72:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012c74:	2304      	movs	r3, #4
 8012c76:	e03a      	b.n	8012cee <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c7c:	f003 0301 	and.w	r3, r3, #1
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d004      	beq.n	8012c8e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	2201      	movs	r2, #1
 8012c88:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012c8a:	2301      	movs	r3, #1
 8012c8c:	e02f      	b.n	8012cee <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012c8e:	68f8      	ldr	r0, [r7, #12]
 8012c90:	f7ff fb7c 	bl	801238c <SDMMC_GetCommandResponse>
 8012c94:	4603      	mov	r3, r0
 8012c96:	461a      	mov	r2, r3
 8012c98:	7afb      	ldrb	r3, [r7, #11]
 8012c9a:	4293      	cmp	r3, r2
 8012c9c:	d001      	beq.n	8012ca2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012c9e:	2301      	movs	r3, #1
 8012ca0:	e025      	b.n	8012cee <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	4a16      	ldr	r2, [pc, #88]	; (8012d00 <SDMMC_GetCmdResp6+0xec>)
 8012ca6:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012ca8:	2100      	movs	r1, #0
 8012caa:	68f8      	ldr	r0, [r7, #12]
 8012cac:	f7ff fb7b 	bl	80123a6 <SDMMC_GetResponse>
 8012cb0:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8012cb2:	697b      	ldr	r3, [r7, #20]
 8012cb4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d106      	bne.n	8012cca <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8012cbc:	697b      	ldr	r3, [r7, #20]
 8012cbe:	0c1b      	lsrs	r3, r3, #16
 8012cc0:	b29a      	uxth	r2, r3
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8012cc6:	2300      	movs	r3, #0
 8012cc8:	e011      	b.n	8012cee <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8012cca:	697b      	ldr	r3, [r7, #20]
 8012ccc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d002      	beq.n	8012cda <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012cd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012cd8:	e009      	b.n	8012cee <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8012cda:	697b      	ldr	r3, [r7, #20]
 8012cdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d002      	beq.n	8012cea <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012ce4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012ce8:	e001      	b.n	8012cee <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012cea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012cee:	4618      	mov	r0, r3
 8012cf0:	3720      	adds	r7, #32
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	bd80      	pop	{r7, pc}
 8012cf6:	bf00      	nop
 8012cf8:	24000000 	.word	0x24000000
 8012cfc:	10624dd3 	.word	0x10624dd3
 8012d00:	002000c5 	.word	0x002000c5

08012d04 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8012d04:	b480      	push	{r7}
 8012d06:	b085      	sub	sp, #20
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012d0c:	4b22      	ldr	r3, [pc, #136]	; (8012d98 <SDMMC_GetCmdResp7+0x94>)
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	4a22      	ldr	r2, [pc, #136]	; (8012d9c <SDMMC_GetCmdResp7+0x98>)
 8012d12:	fba2 2303 	umull	r2, r3, r2, r3
 8012d16:	0a5b      	lsrs	r3, r3, #9
 8012d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8012d1c:	fb02 f303 	mul.w	r3, r2, r3
 8012d20:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	1e5a      	subs	r2, r3, #1
 8012d26:	60fa      	str	r2, [r7, #12]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d102      	bne.n	8012d32 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012d2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012d30:	e02c      	b.n	8012d8c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d36:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012d38:	68bb      	ldr	r3, [r7, #8]
 8012d3a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d0ef      	beq.n	8012d22 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012d42:	68bb      	ldr	r3, [r7, #8]
 8012d44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d1ea      	bne.n	8012d22 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d50:	f003 0304 	and.w	r3, r3, #4
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d004      	beq.n	8012d62 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	2204      	movs	r2, #4
 8012d5c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012d5e:	2304      	movs	r3, #4
 8012d60:	e014      	b.n	8012d8c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d66:	f003 0301 	and.w	r3, r3, #1
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d004      	beq.n	8012d78 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	2201      	movs	r2, #1
 8012d72:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012d74:	2301      	movs	r3, #1
 8012d76:	e009      	b.n	8012d8c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d002      	beq.n	8012d8a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	2240      	movs	r2, #64	; 0x40
 8012d88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012d8a:	2300      	movs	r3, #0

}
 8012d8c:	4618      	mov	r0, r3
 8012d8e:	3714      	adds	r7, #20
 8012d90:	46bd      	mov	sp, r7
 8012d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d96:	4770      	bx	lr
 8012d98:	24000000 	.word	0x24000000
 8012d9c:	10624dd3 	.word	0x10624dd3

08012da0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8012da0:	b480      	push	{r7}
 8012da2:	b085      	sub	sp, #20
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012da8:	4b11      	ldr	r3, [pc, #68]	; (8012df0 <SDMMC_GetCmdError+0x50>)
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	4a11      	ldr	r2, [pc, #68]	; (8012df4 <SDMMC_GetCmdError+0x54>)
 8012dae:	fba2 2303 	umull	r2, r3, r2, r3
 8012db2:	0a5b      	lsrs	r3, r3, #9
 8012db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8012db8:	fb02 f303 	mul.w	r3, r2, r3
 8012dbc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	1e5a      	subs	r2, r3, #1
 8012dc2:	60fa      	str	r2, [r7, #12]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d102      	bne.n	8012dce <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012dc8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012dcc:	e009      	b.n	8012de2 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d0f1      	beq.n	8012dbe <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	4a06      	ldr	r2, [pc, #24]	; (8012df8 <SDMMC_GetCmdError+0x58>)
 8012dde:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8012de0:	2300      	movs	r3, #0
}
 8012de2:	4618      	mov	r0, r3
 8012de4:	3714      	adds	r7, #20
 8012de6:	46bd      	mov	sp, r7
 8012de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dec:	4770      	bx	lr
 8012dee:	bf00      	nop
 8012df0:	24000000 	.word	0x24000000
 8012df4:	10624dd3 	.word	0x10624dd3
 8012df8:	002000c5 	.word	0x002000c5

08012dfc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012dfc:	b084      	sub	sp, #16
 8012dfe:	b580      	push	{r7, lr}
 8012e00:	b084      	sub	sp, #16
 8012e02:	af00      	add	r7, sp, #0
 8012e04:	6078      	str	r0, [r7, #4]
 8012e06:	f107 001c 	add.w	r0, r7, #28
 8012e0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e10:	2b01      	cmp	r3, #1
 8012e12:	d120      	bne.n	8012e56 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	68da      	ldr	r2, [r3, #12]
 8012e24:	4b2a      	ldr	r3, [pc, #168]	; (8012ed0 <USB_CoreInit+0xd4>)
 8012e26:	4013      	ands	r3, r2
 8012e28:	687a      	ldr	r2, [r7, #4]
 8012e2a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	68db      	ldr	r3, [r3, #12]
 8012e30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012e38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e3a:	2b01      	cmp	r3, #1
 8012e3c:	d105      	bne.n	8012e4a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	68db      	ldr	r3, [r3, #12]
 8012e42:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012e4a:	6878      	ldr	r0, [r7, #4]
 8012e4c:	f001 faf8 	bl	8014440 <USB_CoreReset>
 8012e50:	4603      	mov	r3, r0
 8012e52:	73fb      	strb	r3, [r7, #15]
 8012e54:	e01a      	b.n	8012e8c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	68db      	ldr	r3, [r3, #12]
 8012e5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012e62:	6878      	ldr	r0, [r7, #4]
 8012e64:	f001 faec 	bl	8014440 <USB_CoreReset>
 8012e68:	4603      	mov	r3, r0
 8012e6a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8012e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d106      	bne.n	8012e80 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e76:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	639a      	str	r2, [r3, #56]	; 0x38
 8012e7e:	e005      	b.n	8012e8c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8012e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e8e:	2b01      	cmp	r3, #1
 8012e90:	d116      	bne.n	8012ec0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012e96:	b29a      	uxth	r2, r3
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012ea0:	4b0c      	ldr	r3, [pc, #48]	; (8012ed4 <USB_CoreInit+0xd8>)
 8012ea2:	4313      	orrs	r3, r2
 8012ea4:	687a      	ldr	r2, [r7, #4]
 8012ea6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	689b      	ldr	r3, [r3, #8]
 8012eac:	f043 0206 	orr.w	r2, r3, #6
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	689b      	ldr	r3, [r3, #8]
 8012eb8:	f043 0220 	orr.w	r2, r3, #32
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8012ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	3710      	adds	r7, #16
 8012ec6:	46bd      	mov	sp, r7
 8012ec8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012ecc:	b004      	add	sp, #16
 8012ece:	4770      	bx	lr
 8012ed0:	ffbdffbf 	.word	0xffbdffbf
 8012ed4:	03ee0000 	.word	0x03ee0000

08012ed8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8012ed8:	b480      	push	{r7}
 8012eda:	b087      	sub	sp, #28
 8012edc:	af00      	add	r7, sp, #0
 8012ede:	60f8      	str	r0, [r7, #12]
 8012ee0:	60b9      	str	r1, [r7, #8]
 8012ee2:	4613      	mov	r3, r2
 8012ee4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8012ee6:	79fb      	ldrb	r3, [r7, #7]
 8012ee8:	2b02      	cmp	r3, #2
 8012eea:	d165      	bne.n	8012fb8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8012eec:	68bb      	ldr	r3, [r7, #8]
 8012eee:	4a41      	ldr	r2, [pc, #260]	; (8012ff4 <USB_SetTurnaroundTime+0x11c>)
 8012ef0:	4293      	cmp	r3, r2
 8012ef2:	d906      	bls.n	8012f02 <USB_SetTurnaroundTime+0x2a>
 8012ef4:	68bb      	ldr	r3, [r7, #8]
 8012ef6:	4a40      	ldr	r2, [pc, #256]	; (8012ff8 <USB_SetTurnaroundTime+0x120>)
 8012ef8:	4293      	cmp	r3, r2
 8012efa:	d202      	bcs.n	8012f02 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8012efc:	230f      	movs	r3, #15
 8012efe:	617b      	str	r3, [r7, #20]
 8012f00:	e062      	b.n	8012fc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8012f02:	68bb      	ldr	r3, [r7, #8]
 8012f04:	4a3c      	ldr	r2, [pc, #240]	; (8012ff8 <USB_SetTurnaroundTime+0x120>)
 8012f06:	4293      	cmp	r3, r2
 8012f08:	d306      	bcc.n	8012f18 <USB_SetTurnaroundTime+0x40>
 8012f0a:	68bb      	ldr	r3, [r7, #8]
 8012f0c:	4a3b      	ldr	r2, [pc, #236]	; (8012ffc <USB_SetTurnaroundTime+0x124>)
 8012f0e:	4293      	cmp	r3, r2
 8012f10:	d202      	bcs.n	8012f18 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8012f12:	230e      	movs	r3, #14
 8012f14:	617b      	str	r3, [r7, #20]
 8012f16:	e057      	b.n	8012fc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8012f18:	68bb      	ldr	r3, [r7, #8]
 8012f1a:	4a38      	ldr	r2, [pc, #224]	; (8012ffc <USB_SetTurnaroundTime+0x124>)
 8012f1c:	4293      	cmp	r3, r2
 8012f1e:	d306      	bcc.n	8012f2e <USB_SetTurnaroundTime+0x56>
 8012f20:	68bb      	ldr	r3, [r7, #8]
 8012f22:	4a37      	ldr	r2, [pc, #220]	; (8013000 <USB_SetTurnaroundTime+0x128>)
 8012f24:	4293      	cmp	r3, r2
 8012f26:	d202      	bcs.n	8012f2e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8012f28:	230d      	movs	r3, #13
 8012f2a:	617b      	str	r3, [r7, #20]
 8012f2c:	e04c      	b.n	8012fc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8012f2e:	68bb      	ldr	r3, [r7, #8]
 8012f30:	4a33      	ldr	r2, [pc, #204]	; (8013000 <USB_SetTurnaroundTime+0x128>)
 8012f32:	4293      	cmp	r3, r2
 8012f34:	d306      	bcc.n	8012f44 <USB_SetTurnaroundTime+0x6c>
 8012f36:	68bb      	ldr	r3, [r7, #8]
 8012f38:	4a32      	ldr	r2, [pc, #200]	; (8013004 <USB_SetTurnaroundTime+0x12c>)
 8012f3a:	4293      	cmp	r3, r2
 8012f3c:	d802      	bhi.n	8012f44 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8012f3e:	230c      	movs	r3, #12
 8012f40:	617b      	str	r3, [r7, #20]
 8012f42:	e041      	b.n	8012fc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8012f44:	68bb      	ldr	r3, [r7, #8]
 8012f46:	4a2f      	ldr	r2, [pc, #188]	; (8013004 <USB_SetTurnaroundTime+0x12c>)
 8012f48:	4293      	cmp	r3, r2
 8012f4a:	d906      	bls.n	8012f5a <USB_SetTurnaroundTime+0x82>
 8012f4c:	68bb      	ldr	r3, [r7, #8]
 8012f4e:	4a2e      	ldr	r2, [pc, #184]	; (8013008 <USB_SetTurnaroundTime+0x130>)
 8012f50:	4293      	cmp	r3, r2
 8012f52:	d802      	bhi.n	8012f5a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8012f54:	230b      	movs	r3, #11
 8012f56:	617b      	str	r3, [r7, #20]
 8012f58:	e036      	b.n	8012fc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8012f5a:	68bb      	ldr	r3, [r7, #8]
 8012f5c:	4a2a      	ldr	r2, [pc, #168]	; (8013008 <USB_SetTurnaroundTime+0x130>)
 8012f5e:	4293      	cmp	r3, r2
 8012f60:	d906      	bls.n	8012f70 <USB_SetTurnaroundTime+0x98>
 8012f62:	68bb      	ldr	r3, [r7, #8]
 8012f64:	4a29      	ldr	r2, [pc, #164]	; (801300c <USB_SetTurnaroundTime+0x134>)
 8012f66:	4293      	cmp	r3, r2
 8012f68:	d802      	bhi.n	8012f70 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8012f6a:	230a      	movs	r3, #10
 8012f6c:	617b      	str	r3, [r7, #20]
 8012f6e:	e02b      	b.n	8012fc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8012f70:	68bb      	ldr	r3, [r7, #8]
 8012f72:	4a26      	ldr	r2, [pc, #152]	; (801300c <USB_SetTurnaroundTime+0x134>)
 8012f74:	4293      	cmp	r3, r2
 8012f76:	d906      	bls.n	8012f86 <USB_SetTurnaroundTime+0xae>
 8012f78:	68bb      	ldr	r3, [r7, #8]
 8012f7a:	4a25      	ldr	r2, [pc, #148]	; (8013010 <USB_SetTurnaroundTime+0x138>)
 8012f7c:	4293      	cmp	r3, r2
 8012f7e:	d202      	bcs.n	8012f86 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8012f80:	2309      	movs	r3, #9
 8012f82:	617b      	str	r3, [r7, #20]
 8012f84:	e020      	b.n	8012fc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8012f86:	68bb      	ldr	r3, [r7, #8]
 8012f88:	4a21      	ldr	r2, [pc, #132]	; (8013010 <USB_SetTurnaroundTime+0x138>)
 8012f8a:	4293      	cmp	r3, r2
 8012f8c:	d306      	bcc.n	8012f9c <USB_SetTurnaroundTime+0xc4>
 8012f8e:	68bb      	ldr	r3, [r7, #8]
 8012f90:	4a20      	ldr	r2, [pc, #128]	; (8013014 <USB_SetTurnaroundTime+0x13c>)
 8012f92:	4293      	cmp	r3, r2
 8012f94:	d802      	bhi.n	8012f9c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8012f96:	2308      	movs	r3, #8
 8012f98:	617b      	str	r3, [r7, #20]
 8012f9a:	e015      	b.n	8012fc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8012f9c:	68bb      	ldr	r3, [r7, #8]
 8012f9e:	4a1d      	ldr	r2, [pc, #116]	; (8013014 <USB_SetTurnaroundTime+0x13c>)
 8012fa0:	4293      	cmp	r3, r2
 8012fa2:	d906      	bls.n	8012fb2 <USB_SetTurnaroundTime+0xda>
 8012fa4:	68bb      	ldr	r3, [r7, #8]
 8012fa6:	4a1c      	ldr	r2, [pc, #112]	; (8013018 <USB_SetTurnaroundTime+0x140>)
 8012fa8:	4293      	cmp	r3, r2
 8012faa:	d202      	bcs.n	8012fb2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8012fac:	2307      	movs	r3, #7
 8012fae:	617b      	str	r3, [r7, #20]
 8012fb0:	e00a      	b.n	8012fc8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8012fb2:	2306      	movs	r3, #6
 8012fb4:	617b      	str	r3, [r7, #20]
 8012fb6:	e007      	b.n	8012fc8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8012fb8:	79fb      	ldrb	r3, [r7, #7]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d102      	bne.n	8012fc4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8012fbe:	2309      	movs	r3, #9
 8012fc0:	617b      	str	r3, [r7, #20]
 8012fc2:	e001      	b.n	8012fc8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8012fc4:	2309      	movs	r3, #9
 8012fc6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	68db      	ldr	r3, [r3, #12]
 8012fcc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	68da      	ldr	r2, [r3, #12]
 8012fd8:	697b      	ldr	r3, [r7, #20]
 8012fda:	029b      	lsls	r3, r3, #10
 8012fdc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8012fe0:	431a      	orrs	r2, r3
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012fe6:	2300      	movs	r3, #0
}
 8012fe8:	4618      	mov	r0, r3
 8012fea:	371c      	adds	r7, #28
 8012fec:	46bd      	mov	sp, r7
 8012fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff2:	4770      	bx	lr
 8012ff4:	00d8acbf 	.word	0x00d8acbf
 8012ff8:	00e4e1c0 	.word	0x00e4e1c0
 8012ffc:	00f42400 	.word	0x00f42400
 8013000:	01067380 	.word	0x01067380
 8013004:	011a499f 	.word	0x011a499f
 8013008:	01312cff 	.word	0x01312cff
 801300c:	014ca43f 	.word	0x014ca43f
 8013010:	016e3600 	.word	0x016e3600
 8013014:	01a6ab1f 	.word	0x01a6ab1f
 8013018:	01e84800 	.word	0x01e84800

0801301c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801301c:	b480      	push	{r7}
 801301e:	b083      	sub	sp, #12
 8013020:	af00      	add	r7, sp, #0
 8013022:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	689b      	ldr	r3, [r3, #8]
 8013028:	f043 0201 	orr.w	r2, r3, #1
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013030:	2300      	movs	r3, #0
}
 8013032:	4618      	mov	r0, r3
 8013034:	370c      	adds	r7, #12
 8013036:	46bd      	mov	sp, r7
 8013038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801303c:	4770      	bx	lr

0801303e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801303e:	b480      	push	{r7}
 8013040:	b083      	sub	sp, #12
 8013042:	af00      	add	r7, sp, #0
 8013044:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	689b      	ldr	r3, [r3, #8]
 801304a:	f023 0201 	bic.w	r2, r3, #1
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013052:	2300      	movs	r3, #0
}
 8013054:	4618      	mov	r0, r3
 8013056:	370c      	adds	r7, #12
 8013058:	46bd      	mov	sp, r7
 801305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801305e:	4770      	bx	lr

08013060 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8013060:	b580      	push	{r7, lr}
 8013062:	b084      	sub	sp, #16
 8013064:	af00      	add	r7, sp, #0
 8013066:	6078      	str	r0, [r7, #4]
 8013068:	460b      	mov	r3, r1
 801306a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801306c:	2300      	movs	r3, #0
 801306e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	68db      	ldr	r3, [r3, #12]
 8013074:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801307c:	78fb      	ldrb	r3, [r7, #3]
 801307e:	2b01      	cmp	r3, #1
 8013080:	d115      	bne.n	80130ae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	68db      	ldr	r3, [r3, #12]
 8013086:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801308e:	2001      	movs	r0, #1
 8013090:	f7f0 ff18 	bl	8003ec4 <HAL_Delay>
      ms++;
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	3301      	adds	r3, #1
 8013098:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801309a:	6878      	ldr	r0, [r7, #4]
 801309c:	f001 f93f 	bl	801431e <USB_GetMode>
 80130a0:	4603      	mov	r3, r0
 80130a2:	2b01      	cmp	r3, #1
 80130a4:	d01e      	beq.n	80130e4 <USB_SetCurrentMode+0x84>
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	2b31      	cmp	r3, #49	; 0x31
 80130aa:	d9f0      	bls.n	801308e <USB_SetCurrentMode+0x2e>
 80130ac:	e01a      	b.n	80130e4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80130ae:	78fb      	ldrb	r3, [r7, #3]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d115      	bne.n	80130e0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	68db      	ldr	r3, [r3, #12]
 80130b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80130c0:	2001      	movs	r0, #1
 80130c2:	f7f0 feff 	bl	8003ec4 <HAL_Delay>
      ms++;
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	3301      	adds	r3, #1
 80130ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80130cc:	6878      	ldr	r0, [r7, #4]
 80130ce:	f001 f926 	bl	801431e <USB_GetMode>
 80130d2:	4603      	mov	r3, r0
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d005      	beq.n	80130e4 <USB_SetCurrentMode+0x84>
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	2b31      	cmp	r3, #49	; 0x31
 80130dc:	d9f0      	bls.n	80130c0 <USB_SetCurrentMode+0x60>
 80130de:	e001      	b.n	80130e4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80130e0:	2301      	movs	r3, #1
 80130e2:	e005      	b.n	80130f0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	2b32      	cmp	r3, #50	; 0x32
 80130e8:	d101      	bne.n	80130ee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80130ea:	2301      	movs	r3, #1
 80130ec:	e000      	b.n	80130f0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80130ee:	2300      	movs	r3, #0
}
 80130f0:	4618      	mov	r0, r3
 80130f2:	3710      	adds	r7, #16
 80130f4:	46bd      	mov	sp, r7
 80130f6:	bd80      	pop	{r7, pc}

080130f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80130f8:	b084      	sub	sp, #16
 80130fa:	b580      	push	{r7, lr}
 80130fc:	b086      	sub	sp, #24
 80130fe:	af00      	add	r7, sp, #0
 8013100:	6078      	str	r0, [r7, #4]
 8013102:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8013106:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801310a:	2300      	movs	r3, #0
 801310c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8013112:	2300      	movs	r3, #0
 8013114:	613b      	str	r3, [r7, #16]
 8013116:	e009      	b.n	801312c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8013118:	687a      	ldr	r2, [r7, #4]
 801311a:	693b      	ldr	r3, [r7, #16]
 801311c:	3340      	adds	r3, #64	; 0x40
 801311e:	009b      	lsls	r3, r3, #2
 8013120:	4413      	add	r3, r2
 8013122:	2200      	movs	r2, #0
 8013124:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8013126:	693b      	ldr	r3, [r7, #16]
 8013128:	3301      	adds	r3, #1
 801312a:	613b      	str	r3, [r7, #16]
 801312c:	693b      	ldr	r3, [r7, #16]
 801312e:	2b0e      	cmp	r3, #14
 8013130:	d9f2      	bls.n	8013118 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8013132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013134:	2b00      	cmp	r3, #0
 8013136:	d11c      	bne.n	8013172 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801313e:	685b      	ldr	r3, [r3, #4]
 8013140:	68fa      	ldr	r2, [r7, #12]
 8013142:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013146:	f043 0302 	orr.w	r3, r3, #2
 801314a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013150:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	601a      	str	r2, [r3, #0]
 8013170:	e005      	b.n	801317e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013176:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013184:	461a      	mov	r2, r3
 8013186:	2300      	movs	r3, #0
 8013188:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013190:	4619      	mov	r1, r3
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013198:	461a      	mov	r2, r3
 801319a:	680b      	ldr	r3, [r1, #0]
 801319c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801319e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131a0:	2b01      	cmp	r3, #1
 80131a2:	d10c      	bne.n	80131be <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80131a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d104      	bne.n	80131b4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80131aa:	2100      	movs	r1, #0
 80131ac:	6878      	ldr	r0, [r7, #4]
 80131ae:	f000 f965 	bl	801347c <USB_SetDevSpeed>
 80131b2:	e008      	b.n	80131c6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80131b4:	2101      	movs	r1, #1
 80131b6:	6878      	ldr	r0, [r7, #4]
 80131b8:	f000 f960 	bl	801347c <USB_SetDevSpeed>
 80131bc:	e003      	b.n	80131c6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80131be:	2103      	movs	r1, #3
 80131c0:	6878      	ldr	r0, [r7, #4]
 80131c2:	f000 f95b 	bl	801347c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80131c6:	2110      	movs	r1, #16
 80131c8:	6878      	ldr	r0, [r7, #4]
 80131ca:	f000 f8f3 	bl	80133b4 <USB_FlushTxFifo>
 80131ce:	4603      	mov	r3, r0
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d001      	beq.n	80131d8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80131d4:	2301      	movs	r3, #1
 80131d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80131d8:	6878      	ldr	r0, [r7, #4]
 80131da:	f000 f91f 	bl	801341c <USB_FlushRxFifo>
 80131de:	4603      	mov	r3, r0
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d001      	beq.n	80131e8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80131e4:	2301      	movs	r3, #1
 80131e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80131ee:	461a      	mov	r2, r3
 80131f0:	2300      	movs	r3, #0
 80131f2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80131fa:	461a      	mov	r2, r3
 80131fc:	2300      	movs	r3, #0
 80131fe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013206:	461a      	mov	r2, r3
 8013208:	2300      	movs	r3, #0
 801320a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801320c:	2300      	movs	r3, #0
 801320e:	613b      	str	r3, [r7, #16]
 8013210:	e043      	b.n	801329a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013212:	693b      	ldr	r3, [r7, #16]
 8013214:	015a      	lsls	r2, r3, #5
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	4413      	add	r3, r2
 801321a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013224:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013228:	d118      	bne.n	801325c <USB_DevInit+0x164>
    {
      if (i == 0U)
 801322a:	693b      	ldr	r3, [r7, #16]
 801322c:	2b00      	cmp	r3, #0
 801322e:	d10a      	bne.n	8013246 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8013230:	693b      	ldr	r3, [r7, #16]
 8013232:	015a      	lsls	r2, r3, #5
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	4413      	add	r3, r2
 8013238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801323c:	461a      	mov	r2, r3
 801323e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013242:	6013      	str	r3, [r2, #0]
 8013244:	e013      	b.n	801326e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8013246:	693b      	ldr	r3, [r7, #16]
 8013248:	015a      	lsls	r2, r3, #5
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	4413      	add	r3, r2
 801324e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013252:	461a      	mov	r2, r3
 8013254:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013258:	6013      	str	r3, [r2, #0]
 801325a:	e008      	b.n	801326e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801325c:	693b      	ldr	r3, [r7, #16]
 801325e:	015a      	lsls	r2, r3, #5
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	4413      	add	r3, r2
 8013264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013268:	461a      	mov	r2, r3
 801326a:	2300      	movs	r3, #0
 801326c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801326e:	693b      	ldr	r3, [r7, #16]
 8013270:	015a      	lsls	r2, r3, #5
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	4413      	add	r3, r2
 8013276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801327a:	461a      	mov	r2, r3
 801327c:	2300      	movs	r3, #0
 801327e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8013280:	693b      	ldr	r3, [r7, #16]
 8013282:	015a      	lsls	r2, r3, #5
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	4413      	add	r3, r2
 8013288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801328c:	461a      	mov	r2, r3
 801328e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013292:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013294:	693b      	ldr	r3, [r7, #16]
 8013296:	3301      	adds	r3, #1
 8013298:	613b      	str	r3, [r7, #16]
 801329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801329c:	693a      	ldr	r2, [r7, #16]
 801329e:	429a      	cmp	r2, r3
 80132a0:	d3b7      	bcc.n	8013212 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80132a2:	2300      	movs	r3, #0
 80132a4:	613b      	str	r3, [r7, #16]
 80132a6:	e043      	b.n	8013330 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80132a8:	693b      	ldr	r3, [r7, #16]
 80132aa:	015a      	lsls	r2, r3, #5
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	4413      	add	r3, r2
 80132b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80132ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80132be:	d118      	bne.n	80132f2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80132c0:	693b      	ldr	r3, [r7, #16]
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d10a      	bne.n	80132dc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80132c6:	693b      	ldr	r3, [r7, #16]
 80132c8:	015a      	lsls	r2, r3, #5
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	4413      	add	r3, r2
 80132ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132d2:	461a      	mov	r2, r3
 80132d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80132d8:	6013      	str	r3, [r2, #0]
 80132da:	e013      	b.n	8013304 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80132dc:	693b      	ldr	r3, [r7, #16]
 80132de:	015a      	lsls	r2, r3, #5
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	4413      	add	r3, r2
 80132e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132e8:	461a      	mov	r2, r3
 80132ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80132ee:	6013      	str	r3, [r2, #0]
 80132f0:	e008      	b.n	8013304 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80132f2:	693b      	ldr	r3, [r7, #16]
 80132f4:	015a      	lsls	r2, r3, #5
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	4413      	add	r3, r2
 80132fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132fe:	461a      	mov	r2, r3
 8013300:	2300      	movs	r3, #0
 8013302:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8013304:	693b      	ldr	r3, [r7, #16]
 8013306:	015a      	lsls	r2, r3, #5
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	4413      	add	r3, r2
 801330c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013310:	461a      	mov	r2, r3
 8013312:	2300      	movs	r3, #0
 8013314:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8013316:	693b      	ldr	r3, [r7, #16]
 8013318:	015a      	lsls	r2, r3, #5
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	4413      	add	r3, r2
 801331e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013322:	461a      	mov	r2, r3
 8013324:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013328:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801332a:	693b      	ldr	r3, [r7, #16]
 801332c:	3301      	adds	r3, #1
 801332e:	613b      	str	r3, [r7, #16]
 8013330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013332:	693a      	ldr	r2, [r7, #16]
 8013334:	429a      	cmp	r2, r3
 8013336:	d3b7      	bcc.n	80132a8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801333e:	691b      	ldr	r3, [r3, #16]
 8013340:	68fa      	ldr	r2, [r7, #12]
 8013342:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013346:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801334a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	2200      	movs	r2, #0
 8013350:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8013358:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801335a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801335c:	2b00      	cmp	r3, #0
 801335e:	d105      	bne.n	801336c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	699b      	ldr	r3, [r3, #24]
 8013364:	f043 0210 	orr.w	r2, r3, #16
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	699a      	ldr	r2, [r3, #24]
 8013370:	4b0e      	ldr	r3, [pc, #56]	; (80133ac <USB_DevInit+0x2b4>)
 8013372:	4313      	orrs	r3, r2
 8013374:	687a      	ldr	r2, [r7, #4]
 8013376:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8013378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801337a:	2b00      	cmp	r3, #0
 801337c:	d005      	beq.n	801338a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	699b      	ldr	r3, [r3, #24]
 8013382:	f043 0208 	orr.w	r2, r3, #8
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801338a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801338c:	2b01      	cmp	r3, #1
 801338e:	d105      	bne.n	801339c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	699a      	ldr	r2, [r3, #24]
 8013394:	4b06      	ldr	r3, [pc, #24]	; (80133b0 <USB_DevInit+0x2b8>)
 8013396:	4313      	orrs	r3, r2
 8013398:	687a      	ldr	r2, [r7, #4]
 801339a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801339c:	7dfb      	ldrb	r3, [r7, #23]
}
 801339e:	4618      	mov	r0, r3
 80133a0:	3718      	adds	r7, #24
 80133a2:	46bd      	mov	sp, r7
 80133a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80133a8:	b004      	add	sp, #16
 80133aa:	4770      	bx	lr
 80133ac:	803c3800 	.word	0x803c3800
 80133b0:	40000004 	.word	0x40000004

080133b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80133b4:	b480      	push	{r7}
 80133b6:	b085      	sub	sp, #20
 80133b8:	af00      	add	r7, sp, #0
 80133ba:	6078      	str	r0, [r7, #4]
 80133bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80133be:	2300      	movs	r3, #0
 80133c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	3301      	adds	r3, #1
 80133c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	4a13      	ldr	r2, [pc, #76]	; (8013418 <USB_FlushTxFifo+0x64>)
 80133cc:	4293      	cmp	r3, r2
 80133ce:	d901      	bls.n	80133d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80133d0:	2303      	movs	r3, #3
 80133d2:	e01b      	b.n	801340c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	691b      	ldr	r3, [r3, #16]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	daf2      	bge.n	80133c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80133dc:	2300      	movs	r3, #0
 80133de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80133e0:	683b      	ldr	r3, [r7, #0]
 80133e2:	019b      	lsls	r3, r3, #6
 80133e4:	f043 0220 	orr.w	r2, r3, #32
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	3301      	adds	r3, #1
 80133f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	4a08      	ldr	r2, [pc, #32]	; (8013418 <USB_FlushTxFifo+0x64>)
 80133f6:	4293      	cmp	r3, r2
 80133f8:	d901      	bls.n	80133fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80133fa:	2303      	movs	r3, #3
 80133fc:	e006      	b.n	801340c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	691b      	ldr	r3, [r3, #16]
 8013402:	f003 0320 	and.w	r3, r3, #32
 8013406:	2b20      	cmp	r3, #32
 8013408:	d0f0      	beq.n	80133ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801340a:	2300      	movs	r3, #0
}
 801340c:	4618      	mov	r0, r3
 801340e:	3714      	adds	r7, #20
 8013410:	46bd      	mov	sp, r7
 8013412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013416:	4770      	bx	lr
 8013418:	00030d40 	.word	0x00030d40

0801341c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801341c:	b480      	push	{r7}
 801341e:	b085      	sub	sp, #20
 8013420:	af00      	add	r7, sp, #0
 8013422:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013424:	2300      	movs	r3, #0
 8013426:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	3301      	adds	r3, #1
 801342c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	4a11      	ldr	r2, [pc, #68]	; (8013478 <USB_FlushRxFifo+0x5c>)
 8013432:	4293      	cmp	r3, r2
 8013434:	d901      	bls.n	801343a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8013436:	2303      	movs	r3, #3
 8013438:	e018      	b.n	801346c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	691b      	ldr	r3, [r3, #16]
 801343e:	2b00      	cmp	r3, #0
 8013440:	daf2      	bge.n	8013428 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8013442:	2300      	movs	r3, #0
 8013444:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	2210      	movs	r2, #16
 801344a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	3301      	adds	r3, #1
 8013450:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013452:	68fb      	ldr	r3, [r7, #12]
 8013454:	4a08      	ldr	r2, [pc, #32]	; (8013478 <USB_FlushRxFifo+0x5c>)
 8013456:	4293      	cmp	r3, r2
 8013458:	d901      	bls.n	801345e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801345a:	2303      	movs	r3, #3
 801345c:	e006      	b.n	801346c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	691b      	ldr	r3, [r3, #16]
 8013462:	f003 0310 	and.w	r3, r3, #16
 8013466:	2b10      	cmp	r3, #16
 8013468:	d0f0      	beq.n	801344c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801346a:	2300      	movs	r3, #0
}
 801346c:	4618      	mov	r0, r3
 801346e:	3714      	adds	r7, #20
 8013470:	46bd      	mov	sp, r7
 8013472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013476:	4770      	bx	lr
 8013478:	00030d40 	.word	0x00030d40

0801347c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801347c:	b480      	push	{r7}
 801347e:	b085      	sub	sp, #20
 8013480:	af00      	add	r7, sp, #0
 8013482:	6078      	str	r0, [r7, #4]
 8013484:	460b      	mov	r3, r1
 8013486:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013492:	681a      	ldr	r2, [r3, #0]
 8013494:	78fb      	ldrb	r3, [r7, #3]
 8013496:	68f9      	ldr	r1, [r7, #12]
 8013498:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801349c:	4313      	orrs	r3, r2
 801349e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80134a0:	2300      	movs	r3, #0
}
 80134a2:	4618      	mov	r0, r3
 80134a4:	3714      	adds	r7, #20
 80134a6:	46bd      	mov	sp, r7
 80134a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ac:	4770      	bx	lr

080134ae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80134ae:	b480      	push	{r7}
 80134b0:	b087      	sub	sp, #28
 80134b2:	af00      	add	r7, sp, #0
 80134b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80134ba:	693b      	ldr	r3, [r7, #16]
 80134bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80134c0:	689b      	ldr	r3, [r3, #8]
 80134c2:	f003 0306 	and.w	r3, r3, #6
 80134c6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d102      	bne.n	80134d4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80134ce:	2300      	movs	r3, #0
 80134d0:	75fb      	strb	r3, [r7, #23]
 80134d2:	e00a      	b.n	80134ea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	2b02      	cmp	r3, #2
 80134d8:	d002      	beq.n	80134e0 <USB_GetDevSpeed+0x32>
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	2b06      	cmp	r3, #6
 80134de:	d102      	bne.n	80134e6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80134e0:	2302      	movs	r3, #2
 80134e2:	75fb      	strb	r3, [r7, #23]
 80134e4:	e001      	b.n	80134ea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80134e6:	230f      	movs	r3, #15
 80134e8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80134ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80134ec:	4618      	mov	r0, r3
 80134ee:	371c      	adds	r7, #28
 80134f0:	46bd      	mov	sp, r7
 80134f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f6:	4770      	bx	lr

080134f8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80134f8:	b480      	push	{r7}
 80134fa:	b085      	sub	sp, #20
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	6078      	str	r0, [r7, #4]
 8013500:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013506:	683b      	ldr	r3, [r7, #0]
 8013508:	781b      	ldrb	r3, [r3, #0]
 801350a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801350c:	683b      	ldr	r3, [r7, #0]
 801350e:	785b      	ldrb	r3, [r3, #1]
 8013510:	2b01      	cmp	r3, #1
 8013512:	d139      	bne.n	8013588 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801351a:	69da      	ldr	r2, [r3, #28]
 801351c:	683b      	ldr	r3, [r7, #0]
 801351e:	781b      	ldrb	r3, [r3, #0]
 8013520:	f003 030f 	and.w	r3, r3, #15
 8013524:	2101      	movs	r1, #1
 8013526:	fa01 f303 	lsl.w	r3, r1, r3
 801352a:	b29b      	uxth	r3, r3
 801352c:	68f9      	ldr	r1, [r7, #12]
 801352e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013532:	4313      	orrs	r3, r2
 8013534:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8013536:	68bb      	ldr	r3, [r7, #8]
 8013538:	015a      	lsls	r2, r3, #5
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	4413      	add	r3, r2
 801353e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013548:	2b00      	cmp	r3, #0
 801354a:	d153      	bne.n	80135f4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801354c:	68bb      	ldr	r3, [r7, #8]
 801354e:	015a      	lsls	r2, r3, #5
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	4413      	add	r3, r2
 8013554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013558:	681a      	ldr	r2, [r3, #0]
 801355a:	683b      	ldr	r3, [r7, #0]
 801355c:	689b      	ldr	r3, [r3, #8]
 801355e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013562:	683b      	ldr	r3, [r7, #0]
 8013564:	791b      	ldrb	r3, [r3, #4]
 8013566:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013568:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801356a:	68bb      	ldr	r3, [r7, #8]
 801356c:	059b      	lsls	r3, r3, #22
 801356e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013570:	431a      	orrs	r2, r3
 8013572:	68bb      	ldr	r3, [r7, #8]
 8013574:	0159      	lsls	r1, r3, #5
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	440b      	add	r3, r1
 801357a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801357e:	4619      	mov	r1, r3
 8013580:	4b20      	ldr	r3, [pc, #128]	; (8013604 <USB_ActivateEndpoint+0x10c>)
 8013582:	4313      	orrs	r3, r2
 8013584:	600b      	str	r3, [r1, #0]
 8013586:	e035      	b.n	80135f4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801358e:	69da      	ldr	r2, [r3, #28]
 8013590:	683b      	ldr	r3, [r7, #0]
 8013592:	781b      	ldrb	r3, [r3, #0]
 8013594:	f003 030f 	and.w	r3, r3, #15
 8013598:	2101      	movs	r1, #1
 801359a:	fa01 f303 	lsl.w	r3, r1, r3
 801359e:	041b      	lsls	r3, r3, #16
 80135a0:	68f9      	ldr	r1, [r7, #12]
 80135a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80135a6:	4313      	orrs	r3, r2
 80135a8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80135aa:	68bb      	ldr	r3, [r7, #8]
 80135ac:	015a      	lsls	r2, r3, #5
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	4413      	add	r3, r2
 80135b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d119      	bne.n	80135f4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80135c0:	68bb      	ldr	r3, [r7, #8]
 80135c2:	015a      	lsls	r2, r3, #5
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	4413      	add	r3, r2
 80135c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135cc:	681a      	ldr	r2, [r3, #0]
 80135ce:	683b      	ldr	r3, [r7, #0]
 80135d0:	689b      	ldr	r3, [r3, #8]
 80135d2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80135d6:	683b      	ldr	r3, [r7, #0]
 80135d8:	791b      	ldrb	r3, [r3, #4]
 80135da:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80135dc:	430b      	orrs	r3, r1
 80135de:	431a      	orrs	r2, r3
 80135e0:	68bb      	ldr	r3, [r7, #8]
 80135e2:	0159      	lsls	r1, r3, #5
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	440b      	add	r3, r1
 80135e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135ec:	4619      	mov	r1, r3
 80135ee:	4b05      	ldr	r3, [pc, #20]	; (8013604 <USB_ActivateEndpoint+0x10c>)
 80135f0:	4313      	orrs	r3, r2
 80135f2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80135f4:	2300      	movs	r3, #0
}
 80135f6:	4618      	mov	r0, r3
 80135f8:	3714      	adds	r7, #20
 80135fa:	46bd      	mov	sp, r7
 80135fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013600:	4770      	bx	lr
 8013602:	bf00      	nop
 8013604:	10008000 	.word	0x10008000

08013608 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013608:	b480      	push	{r7}
 801360a:	b085      	sub	sp, #20
 801360c:	af00      	add	r7, sp, #0
 801360e:	6078      	str	r0, [r7, #4]
 8013610:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013616:	683b      	ldr	r3, [r7, #0]
 8013618:	781b      	ldrb	r3, [r3, #0]
 801361a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801361c:	683b      	ldr	r3, [r7, #0]
 801361e:	785b      	ldrb	r3, [r3, #1]
 8013620:	2b01      	cmp	r3, #1
 8013622:	d161      	bne.n	80136e8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013624:	68bb      	ldr	r3, [r7, #8]
 8013626:	015a      	lsls	r2, r3, #5
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	4413      	add	r3, r2
 801362c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013636:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801363a:	d11f      	bne.n	801367c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801363c:	68bb      	ldr	r3, [r7, #8]
 801363e:	015a      	lsls	r2, r3, #5
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	4413      	add	r3, r2
 8013644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	68ba      	ldr	r2, [r7, #8]
 801364c:	0151      	lsls	r1, r2, #5
 801364e:	68fa      	ldr	r2, [r7, #12]
 8013650:	440a      	add	r2, r1
 8013652:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013656:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801365a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801365c:	68bb      	ldr	r3, [r7, #8]
 801365e:	015a      	lsls	r2, r3, #5
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	4413      	add	r3, r2
 8013664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	68ba      	ldr	r2, [r7, #8]
 801366c:	0151      	lsls	r1, r2, #5
 801366e:	68fa      	ldr	r2, [r7, #12]
 8013670:	440a      	add	r2, r1
 8013672:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013676:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801367a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013682:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013684:	683b      	ldr	r3, [r7, #0]
 8013686:	781b      	ldrb	r3, [r3, #0]
 8013688:	f003 030f 	and.w	r3, r3, #15
 801368c:	2101      	movs	r1, #1
 801368e:	fa01 f303 	lsl.w	r3, r1, r3
 8013692:	b29b      	uxth	r3, r3
 8013694:	43db      	mvns	r3, r3
 8013696:	68f9      	ldr	r1, [r7, #12]
 8013698:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801369c:	4013      	ands	r3, r2
 801369e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80136a6:	69da      	ldr	r2, [r3, #28]
 80136a8:	683b      	ldr	r3, [r7, #0]
 80136aa:	781b      	ldrb	r3, [r3, #0]
 80136ac:	f003 030f 	and.w	r3, r3, #15
 80136b0:	2101      	movs	r1, #1
 80136b2:	fa01 f303 	lsl.w	r3, r1, r3
 80136b6:	b29b      	uxth	r3, r3
 80136b8:	43db      	mvns	r3, r3
 80136ba:	68f9      	ldr	r1, [r7, #12]
 80136bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80136c0:	4013      	ands	r3, r2
 80136c2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80136c4:	68bb      	ldr	r3, [r7, #8]
 80136c6:	015a      	lsls	r2, r3, #5
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	4413      	add	r3, r2
 80136cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136d0:	681a      	ldr	r2, [r3, #0]
 80136d2:	68bb      	ldr	r3, [r7, #8]
 80136d4:	0159      	lsls	r1, r3, #5
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	440b      	add	r3, r1
 80136da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136de:	4619      	mov	r1, r3
 80136e0:	4b35      	ldr	r3, [pc, #212]	; (80137b8 <USB_DeactivateEndpoint+0x1b0>)
 80136e2:	4013      	ands	r3, r2
 80136e4:	600b      	str	r3, [r1, #0]
 80136e6:	e060      	b.n	80137aa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80136e8:	68bb      	ldr	r3, [r7, #8]
 80136ea:	015a      	lsls	r2, r3, #5
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	4413      	add	r3, r2
 80136f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80136fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80136fe:	d11f      	bne.n	8013740 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8013700:	68bb      	ldr	r3, [r7, #8]
 8013702:	015a      	lsls	r2, r3, #5
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	4413      	add	r3, r2
 8013708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	68ba      	ldr	r2, [r7, #8]
 8013710:	0151      	lsls	r1, r2, #5
 8013712:	68fa      	ldr	r2, [r7, #12]
 8013714:	440a      	add	r2, r1
 8013716:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801371a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801371e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8013720:	68bb      	ldr	r3, [r7, #8]
 8013722:	015a      	lsls	r2, r3, #5
 8013724:	68fb      	ldr	r3, [r7, #12]
 8013726:	4413      	add	r3, r2
 8013728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	68ba      	ldr	r2, [r7, #8]
 8013730:	0151      	lsls	r1, r2, #5
 8013732:	68fa      	ldr	r2, [r7, #12]
 8013734:	440a      	add	r2, r1
 8013736:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801373a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801373e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013746:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013748:	683b      	ldr	r3, [r7, #0]
 801374a:	781b      	ldrb	r3, [r3, #0]
 801374c:	f003 030f 	and.w	r3, r3, #15
 8013750:	2101      	movs	r1, #1
 8013752:	fa01 f303 	lsl.w	r3, r1, r3
 8013756:	041b      	lsls	r3, r3, #16
 8013758:	43db      	mvns	r3, r3
 801375a:	68f9      	ldr	r1, [r7, #12]
 801375c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013760:	4013      	ands	r3, r2
 8013762:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801376a:	69da      	ldr	r2, [r3, #28]
 801376c:	683b      	ldr	r3, [r7, #0]
 801376e:	781b      	ldrb	r3, [r3, #0]
 8013770:	f003 030f 	and.w	r3, r3, #15
 8013774:	2101      	movs	r1, #1
 8013776:	fa01 f303 	lsl.w	r3, r1, r3
 801377a:	041b      	lsls	r3, r3, #16
 801377c:	43db      	mvns	r3, r3
 801377e:	68f9      	ldr	r1, [r7, #12]
 8013780:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013784:	4013      	ands	r3, r2
 8013786:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013788:	68bb      	ldr	r3, [r7, #8]
 801378a:	015a      	lsls	r2, r3, #5
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	4413      	add	r3, r2
 8013790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013794:	681a      	ldr	r2, [r3, #0]
 8013796:	68bb      	ldr	r3, [r7, #8]
 8013798:	0159      	lsls	r1, r3, #5
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	440b      	add	r3, r1
 801379e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137a2:	4619      	mov	r1, r3
 80137a4:	4b05      	ldr	r3, [pc, #20]	; (80137bc <USB_DeactivateEndpoint+0x1b4>)
 80137a6:	4013      	ands	r3, r2
 80137a8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80137aa:	2300      	movs	r3, #0
}
 80137ac:	4618      	mov	r0, r3
 80137ae:	3714      	adds	r7, #20
 80137b0:	46bd      	mov	sp, r7
 80137b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b6:	4770      	bx	lr
 80137b8:	ec337800 	.word	0xec337800
 80137bc:	eff37800 	.word	0xeff37800

080137c0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80137c0:	b580      	push	{r7, lr}
 80137c2:	b08a      	sub	sp, #40	; 0x28
 80137c4:	af02      	add	r7, sp, #8
 80137c6:	60f8      	str	r0, [r7, #12]
 80137c8:	60b9      	str	r1, [r7, #8]
 80137ca:	4613      	mov	r3, r2
 80137cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80137d2:	68bb      	ldr	r3, [r7, #8]
 80137d4:	781b      	ldrb	r3, [r3, #0]
 80137d6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80137d8:	68bb      	ldr	r3, [r7, #8]
 80137da:	785b      	ldrb	r3, [r3, #1]
 80137dc:	2b01      	cmp	r3, #1
 80137de:	f040 8181 	bne.w	8013ae4 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80137e2:	68bb      	ldr	r3, [r7, #8]
 80137e4:	691b      	ldr	r3, [r3, #16]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d132      	bne.n	8013850 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80137ea:	69bb      	ldr	r3, [r7, #24]
 80137ec:	015a      	lsls	r2, r3, #5
 80137ee:	69fb      	ldr	r3, [r7, #28]
 80137f0:	4413      	add	r3, r2
 80137f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80137f6:	691a      	ldr	r2, [r3, #16]
 80137f8:	69bb      	ldr	r3, [r7, #24]
 80137fa:	0159      	lsls	r1, r3, #5
 80137fc:	69fb      	ldr	r3, [r7, #28]
 80137fe:	440b      	add	r3, r1
 8013800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013804:	4619      	mov	r1, r3
 8013806:	4ba5      	ldr	r3, [pc, #660]	; (8013a9c <USB_EPStartXfer+0x2dc>)
 8013808:	4013      	ands	r3, r2
 801380a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801380c:	69bb      	ldr	r3, [r7, #24]
 801380e:	015a      	lsls	r2, r3, #5
 8013810:	69fb      	ldr	r3, [r7, #28]
 8013812:	4413      	add	r3, r2
 8013814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013818:	691b      	ldr	r3, [r3, #16]
 801381a:	69ba      	ldr	r2, [r7, #24]
 801381c:	0151      	lsls	r1, r2, #5
 801381e:	69fa      	ldr	r2, [r7, #28]
 8013820:	440a      	add	r2, r1
 8013822:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013826:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801382a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801382c:	69bb      	ldr	r3, [r7, #24]
 801382e:	015a      	lsls	r2, r3, #5
 8013830:	69fb      	ldr	r3, [r7, #28]
 8013832:	4413      	add	r3, r2
 8013834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013838:	691a      	ldr	r2, [r3, #16]
 801383a:	69bb      	ldr	r3, [r7, #24]
 801383c:	0159      	lsls	r1, r3, #5
 801383e:	69fb      	ldr	r3, [r7, #28]
 8013840:	440b      	add	r3, r1
 8013842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013846:	4619      	mov	r1, r3
 8013848:	4b95      	ldr	r3, [pc, #596]	; (8013aa0 <USB_EPStartXfer+0x2e0>)
 801384a:	4013      	ands	r3, r2
 801384c:	610b      	str	r3, [r1, #16]
 801384e:	e092      	b.n	8013976 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013850:	69bb      	ldr	r3, [r7, #24]
 8013852:	015a      	lsls	r2, r3, #5
 8013854:	69fb      	ldr	r3, [r7, #28]
 8013856:	4413      	add	r3, r2
 8013858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801385c:	691a      	ldr	r2, [r3, #16]
 801385e:	69bb      	ldr	r3, [r7, #24]
 8013860:	0159      	lsls	r1, r3, #5
 8013862:	69fb      	ldr	r3, [r7, #28]
 8013864:	440b      	add	r3, r1
 8013866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801386a:	4619      	mov	r1, r3
 801386c:	4b8c      	ldr	r3, [pc, #560]	; (8013aa0 <USB_EPStartXfer+0x2e0>)
 801386e:	4013      	ands	r3, r2
 8013870:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013872:	69bb      	ldr	r3, [r7, #24]
 8013874:	015a      	lsls	r2, r3, #5
 8013876:	69fb      	ldr	r3, [r7, #28]
 8013878:	4413      	add	r3, r2
 801387a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801387e:	691a      	ldr	r2, [r3, #16]
 8013880:	69bb      	ldr	r3, [r7, #24]
 8013882:	0159      	lsls	r1, r3, #5
 8013884:	69fb      	ldr	r3, [r7, #28]
 8013886:	440b      	add	r3, r1
 8013888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801388c:	4619      	mov	r1, r3
 801388e:	4b83      	ldr	r3, [pc, #524]	; (8013a9c <USB_EPStartXfer+0x2dc>)
 8013890:	4013      	ands	r3, r2
 8013892:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8013894:	69bb      	ldr	r3, [r7, #24]
 8013896:	2b00      	cmp	r3, #0
 8013898:	d11a      	bne.n	80138d0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 801389a:	68bb      	ldr	r3, [r7, #8]
 801389c:	691a      	ldr	r2, [r3, #16]
 801389e:	68bb      	ldr	r3, [r7, #8]
 80138a0:	689b      	ldr	r3, [r3, #8]
 80138a2:	429a      	cmp	r2, r3
 80138a4:	d903      	bls.n	80138ae <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80138a6:	68bb      	ldr	r3, [r7, #8]
 80138a8:	689a      	ldr	r2, [r3, #8]
 80138aa:	68bb      	ldr	r3, [r7, #8]
 80138ac:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80138ae:	69bb      	ldr	r3, [r7, #24]
 80138b0:	015a      	lsls	r2, r3, #5
 80138b2:	69fb      	ldr	r3, [r7, #28]
 80138b4:	4413      	add	r3, r2
 80138b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80138ba:	691b      	ldr	r3, [r3, #16]
 80138bc:	69ba      	ldr	r2, [r7, #24]
 80138be:	0151      	lsls	r1, r2, #5
 80138c0:	69fa      	ldr	r2, [r7, #28]
 80138c2:	440a      	add	r2, r1
 80138c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80138c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80138cc:	6113      	str	r3, [r2, #16]
 80138ce:	e01b      	b.n	8013908 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80138d0:	69bb      	ldr	r3, [r7, #24]
 80138d2:	015a      	lsls	r2, r3, #5
 80138d4:	69fb      	ldr	r3, [r7, #28]
 80138d6:	4413      	add	r3, r2
 80138d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80138dc:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80138de:	68bb      	ldr	r3, [r7, #8]
 80138e0:	6919      	ldr	r1, [r3, #16]
 80138e2:	68bb      	ldr	r3, [r7, #8]
 80138e4:	689b      	ldr	r3, [r3, #8]
 80138e6:	440b      	add	r3, r1
 80138e8:	1e59      	subs	r1, r3, #1
 80138ea:	68bb      	ldr	r3, [r7, #8]
 80138ec:	689b      	ldr	r3, [r3, #8]
 80138ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80138f2:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80138f4:	4b6b      	ldr	r3, [pc, #428]	; (8013aa4 <USB_EPStartXfer+0x2e4>)
 80138f6:	400b      	ands	r3, r1
 80138f8:	69b9      	ldr	r1, [r7, #24]
 80138fa:	0148      	lsls	r0, r1, #5
 80138fc:	69f9      	ldr	r1, [r7, #28]
 80138fe:	4401      	add	r1, r0
 8013900:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013904:	4313      	orrs	r3, r2
 8013906:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013908:	69bb      	ldr	r3, [r7, #24]
 801390a:	015a      	lsls	r2, r3, #5
 801390c:	69fb      	ldr	r3, [r7, #28]
 801390e:	4413      	add	r3, r2
 8013910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013914:	691a      	ldr	r2, [r3, #16]
 8013916:	68bb      	ldr	r3, [r7, #8]
 8013918:	691b      	ldr	r3, [r3, #16]
 801391a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801391e:	69b9      	ldr	r1, [r7, #24]
 8013920:	0148      	lsls	r0, r1, #5
 8013922:	69f9      	ldr	r1, [r7, #28]
 8013924:	4401      	add	r1, r0
 8013926:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801392a:	4313      	orrs	r3, r2
 801392c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801392e:	68bb      	ldr	r3, [r7, #8]
 8013930:	791b      	ldrb	r3, [r3, #4]
 8013932:	2b01      	cmp	r3, #1
 8013934:	d11f      	bne.n	8013976 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8013936:	69bb      	ldr	r3, [r7, #24]
 8013938:	015a      	lsls	r2, r3, #5
 801393a:	69fb      	ldr	r3, [r7, #28]
 801393c:	4413      	add	r3, r2
 801393e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013942:	691b      	ldr	r3, [r3, #16]
 8013944:	69ba      	ldr	r2, [r7, #24]
 8013946:	0151      	lsls	r1, r2, #5
 8013948:	69fa      	ldr	r2, [r7, #28]
 801394a:	440a      	add	r2, r1
 801394c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013950:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8013954:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8013956:	69bb      	ldr	r3, [r7, #24]
 8013958:	015a      	lsls	r2, r3, #5
 801395a:	69fb      	ldr	r3, [r7, #28]
 801395c:	4413      	add	r3, r2
 801395e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013962:	691b      	ldr	r3, [r3, #16]
 8013964:	69ba      	ldr	r2, [r7, #24]
 8013966:	0151      	lsls	r1, r2, #5
 8013968:	69fa      	ldr	r2, [r7, #28]
 801396a:	440a      	add	r2, r1
 801396c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013970:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013974:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8013976:	79fb      	ldrb	r3, [r7, #7]
 8013978:	2b01      	cmp	r3, #1
 801397a:	d14b      	bne.n	8013a14 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801397c:	68bb      	ldr	r3, [r7, #8]
 801397e:	69db      	ldr	r3, [r3, #28]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d009      	beq.n	8013998 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013984:	69bb      	ldr	r3, [r7, #24]
 8013986:	015a      	lsls	r2, r3, #5
 8013988:	69fb      	ldr	r3, [r7, #28]
 801398a:	4413      	add	r3, r2
 801398c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013990:	461a      	mov	r2, r3
 8013992:	68bb      	ldr	r3, [r7, #8]
 8013994:	69db      	ldr	r3, [r3, #28]
 8013996:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8013998:	68bb      	ldr	r3, [r7, #8]
 801399a:	791b      	ldrb	r3, [r3, #4]
 801399c:	2b01      	cmp	r3, #1
 801399e:	d128      	bne.n	80139f2 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80139a0:	69fb      	ldr	r3, [r7, #28]
 80139a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80139a6:	689b      	ldr	r3, [r3, #8]
 80139a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d110      	bne.n	80139d2 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80139b0:	69bb      	ldr	r3, [r7, #24]
 80139b2:	015a      	lsls	r2, r3, #5
 80139b4:	69fb      	ldr	r3, [r7, #28]
 80139b6:	4413      	add	r3, r2
 80139b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	69ba      	ldr	r2, [r7, #24]
 80139c0:	0151      	lsls	r1, r2, #5
 80139c2:	69fa      	ldr	r2, [r7, #28]
 80139c4:	440a      	add	r2, r1
 80139c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80139ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80139ce:	6013      	str	r3, [r2, #0]
 80139d0:	e00f      	b.n	80139f2 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80139d2:	69bb      	ldr	r3, [r7, #24]
 80139d4:	015a      	lsls	r2, r3, #5
 80139d6:	69fb      	ldr	r3, [r7, #28]
 80139d8:	4413      	add	r3, r2
 80139da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	69ba      	ldr	r2, [r7, #24]
 80139e2:	0151      	lsls	r1, r2, #5
 80139e4:	69fa      	ldr	r2, [r7, #28]
 80139e6:	440a      	add	r2, r1
 80139e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80139ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80139f0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80139f2:	69bb      	ldr	r3, [r7, #24]
 80139f4:	015a      	lsls	r2, r3, #5
 80139f6:	69fb      	ldr	r3, [r7, #28]
 80139f8:	4413      	add	r3, r2
 80139fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	69ba      	ldr	r2, [r7, #24]
 8013a02:	0151      	lsls	r1, r2, #5
 8013a04:	69fa      	ldr	r2, [r7, #28]
 8013a06:	440a      	add	r2, r1
 8013a08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013a0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013a10:	6013      	str	r3, [r2, #0]
 8013a12:	e16a      	b.n	8013cea <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013a14:	69bb      	ldr	r3, [r7, #24]
 8013a16:	015a      	lsls	r2, r3, #5
 8013a18:	69fb      	ldr	r3, [r7, #28]
 8013a1a:	4413      	add	r3, r2
 8013a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a20:	681b      	ldr	r3, [r3, #0]
 8013a22:	69ba      	ldr	r2, [r7, #24]
 8013a24:	0151      	lsls	r1, r2, #5
 8013a26:	69fa      	ldr	r2, [r7, #28]
 8013a28:	440a      	add	r2, r1
 8013a2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013a2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013a32:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8013a34:	68bb      	ldr	r3, [r7, #8]
 8013a36:	791b      	ldrb	r3, [r3, #4]
 8013a38:	2b01      	cmp	r3, #1
 8013a3a:	d015      	beq.n	8013a68 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8013a3c:	68bb      	ldr	r3, [r7, #8]
 8013a3e:	691b      	ldr	r3, [r3, #16]
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	f000 8152 	beq.w	8013cea <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013a46:	69fb      	ldr	r3, [r7, #28]
 8013a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013a4e:	68bb      	ldr	r3, [r7, #8]
 8013a50:	781b      	ldrb	r3, [r3, #0]
 8013a52:	f003 030f 	and.w	r3, r3, #15
 8013a56:	2101      	movs	r1, #1
 8013a58:	fa01 f303 	lsl.w	r3, r1, r3
 8013a5c:	69f9      	ldr	r1, [r7, #28]
 8013a5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013a62:	4313      	orrs	r3, r2
 8013a64:	634b      	str	r3, [r1, #52]	; 0x34
 8013a66:	e140      	b.n	8013cea <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013a68:	69fb      	ldr	r3, [r7, #28]
 8013a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a6e:	689b      	ldr	r3, [r3, #8]
 8013a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d117      	bne.n	8013aa8 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013a78:	69bb      	ldr	r3, [r7, #24]
 8013a7a:	015a      	lsls	r2, r3, #5
 8013a7c:	69fb      	ldr	r3, [r7, #28]
 8013a7e:	4413      	add	r3, r2
 8013a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	69ba      	ldr	r2, [r7, #24]
 8013a88:	0151      	lsls	r1, r2, #5
 8013a8a:	69fa      	ldr	r2, [r7, #28]
 8013a8c:	440a      	add	r2, r1
 8013a8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013a92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013a96:	6013      	str	r3, [r2, #0]
 8013a98:	e016      	b.n	8013ac8 <USB_EPStartXfer+0x308>
 8013a9a:	bf00      	nop
 8013a9c:	e007ffff 	.word	0xe007ffff
 8013aa0:	fff80000 	.word	0xfff80000
 8013aa4:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013aa8:	69bb      	ldr	r3, [r7, #24]
 8013aaa:	015a      	lsls	r2, r3, #5
 8013aac:	69fb      	ldr	r3, [r7, #28]
 8013aae:	4413      	add	r3, r2
 8013ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	69ba      	ldr	r2, [r7, #24]
 8013ab8:	0151      	lsls	r1, r2, #5
 8013aba:	69fa      	ldr	r2, [r7, #28]
 8013abc:	440a      	add	r2, r1
 8013abe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013ac6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8013ac8:	68bb      	ldr	r3, [r7, #8]
 8013aca:	68d9      	ldr	r1, [r3, #12]
 8013acc:	68bb      	ldr	r3, [r7, #8]
 8013ace:	781a      	ldrb	r2, [r3, #0]
 8013ad0:	68bb      	ldr	r3, [r7, #8]
 8013ad2:	691b      	ldr	r3, [r3, #16]
 8013ad4:	b298      	uxth	r0, r3
 8013ad6:	79fb      	ldrb	r3, [r7, #7]
 8013ad8:	9300      	str	r3, [sp, #0]
 8013ada:	4603      	mov	r3, r0
 8013adc:	68f8      	ldr	r0, [r7, #12]
 8013ade:	f000 f9b9 	bl	8013e54 <USB_WritePacket>
 8013ae2:	e102      	b.n	8013cea <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013ae4:	69bb      	ldr	r3, [r7, #24]
 8013ae6:	015a      	lsls	r2, r3, #5
 8013ae8:	69fb      	ldr	r3, [r7, #28]
 8013aea:	4413      	add	r3, r2
 8013aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013af0:	691a      	ldr	r2, [r3, #16]
 8013af2:	69bb      	ldr	r3, [r7, #24]
 8013af4:	0159      	lsls	r1, r3, #5
 8013af6:	69fb      	ldr	r3, [r7, #28]
 8013af8:	440b      	add	r3, r1
 8013afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013afe:	4619      	mov	r1, r3
 8013b00:	4b7c      	ldr	r3, [pc, #496]	; (8013cf4 <USB_EPStartXfer+0x534>)
 8013b02:	4013      	ands	r3, r2
 8013b04:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8013b06:	69bb      	ldr	r3, [r7, #24]
 8013b08:	015a      	lsls	r2, r3, #5
 8013b0a:	69fb      	ldr	r3, [r7, #28]
 8013b0c:	4413      	add	r3, r2
 8013b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b12:	691a      	ldr	r2, [r3, #16]
 8013b14:	69bb      	ldr	r3, [r7, #24]
 8013b16:	0159      	lsls	r1, r3, #5
 8013b18:	69fb      	ldr	r3, [r7, #28]
 8013b1a:	440b      	add	r3, r1
 8013b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b20:	4619      	mov	r1, r3
 8013b22:	4b75      	ldr	r3, [pc, #468]	; (8013cf8 <USB_EPStartXfer+0x538>)
 8013b24:	4013      	ands	r3, r2
 8013b26:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8013b28:	69bb      	ldr	r3, [r7, #24]
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d12f      	bne.n	8013b8e <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8013b2e:	68bb      	ldr	r3, [r7, #8]
 8013b30:	691b      	ldr	r3, [r3, #16]
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d003      	beq.n	8013b3e <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8013b36:	68bb      	ldr	r3, [r7, #8]
 8013b38:	689a      	ldr	r2, [r3, #8]
 8013b3a:	68bb      	ldr	r3, [r7, #8]
 8013b3c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8013b3e:	68bb      	ldr	r3, [r7, #8]
 8013b40:	689a      	ldr	r2, [r3, #8]
 8013b42:	68bb      	ldr	r3, [r7, #8]
 8013b44:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8013b46:	69bb      	ldr	r3, [r7, #24]
 8013b48:	015a      	lsls	r2, r3, #5
 8013b4a:	69fb      	ldr	r3, [r7, #28]
 8013b4c:	4413      	add	r3, r2
 8013b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b52:	691a      	ldr	r2, [r3, #16]
 8013b54:	68bb      	ldr	r3, [r7, #8]
 8013b56:	6a1b      	ldr	r3, [r3, #32]
 8013b58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013b5c:	69b9      	ldr	r1, [r7, #24]
 8013b5e:	0148      	lsls	r0, r1, #5
 8013b60:	69f9      	ldr	r1, [r7, #28]
 8013b62:	4401      	add	r1, r0
 8013b64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013b68:	4313      	orrs	r3, r2
 8013b6a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013b6c:	69bb      	ldr	r3, [r7, #24]
 8013b6e:	015a      	lsls	r2, r3, #5
 8013b70:	69fb      	ldr	r3, [r7, #28]
 8013b72:	4413      	add	r3, r2
 8013b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b78:	691b      	ldr	r3, [r3, #16]
 8013b7a:	69ba      	ldr	r2, [r7, #24]
 8013b7c:	0151      	lsls	r1, r2, #5
 8013b7e:	69fa      	ldr	r2, [r7, #28]
 8013b80:	440a      	add	r2, r1
 8013b82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013b86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013b8a:	6113      	str	r3, [r2, #16]
 8013b8c:	e05f      	b.n	8013c4e <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8013b8e:	68bb      	ldr	r3, [r7, #8]
 8013b90:	691b      	ldr	r3, [r3, #16]
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d123      	bne.n	8013bde <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8013b96:	69bb      	ldr	r3, [r7, #24]
 8013b98:	015a      	lsls	r2, r3, #5
 8013b9a:	69fb      	ldr	r3, [r7, #28]
 8013b9c:	4413      	add	r3, r2
 8013b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ba2:	691a      	ldr	r2, [r3, #16]
 8013ba4:	68bb      	ldr	r3, [r7, #8]
 8013ba6:	689b      	ldr	r3, [r3, #8]
 8013ba8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013bac:	69b9      	ldr	r1, [r7, #24]
 8013bae:	0148      	lsls	r0, r1, #5
 8013bb0:	69f9      	ldr	r1, [r7, #28]
 8013bb2:	4401      	add	r1, r0
 8013bb4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013bb8:	4313      	orrs	r3, r2
 8013bba:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013bbc:	69bb      	ldr	r3, [r7, #24]
 8013bbe:	015a      	lsls	r2, r3, #5
 8013bc0:	69fb      	ldr	r3, [r7, #28]
 8013bc2:	4413      	add	r3, r2
 8013bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013bc8:	691b      	ldr	r3, [r3, #16]
 8013bca:	69ba      	ldr	r2, [r7, #24]
 8013bcc:	0151      	lsls	r1, r2, #5
 8013bce:	69fa      	ldr	r2, [r7, #28]
 8013bd0:	440a      	add	r2, r1
 8013bd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013bd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013bda:	6113      	str	r3, [r2, #16]
 8013bdc:	e037      	b.n	8013c4e <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8013bde:	68bb      	ldr	r3, [r7, #8]
 8013be0:	691a      	ldr	r2, [r3, #16]
 8013be2:	68bb      	ldr	r3, [r7, #8]
 8013be4:	689b      	ldr	r3, [r3, #8]
 8013be6:	4413      	add	r3, r2
 8013be8:	1e5a      	subs	r2, r3, #1
 8013bea:	68bb      	ldr	r3, [r7, #8]
 8013bec:	689b      	ldr	r3, [r3, #8]
 8013bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8013bf2:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8013bf4:	68bb      	ldr	r3, [r7, #8]
 8013bf6:	689b      	ldr	r3, [r3, #8]
 8013bf8:	8afa      	ldrh	r2, [r7, #22]
 8013bfa:	fb03 f202 	mul.w	r2, r3, r2
 8013bfe:	68bb      	ldr	r3, [r7, #8]
 8013c00:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013c02:	69bb      	ldr	r3, [r7, #24]
 8013c04:	015a      	lsls	r2, r3, #5
 8013c06:	69fb      	ldr	r3, [r7, #28]
 8013c08:	4413      	add	r3, r2
 8013c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c0e:	691a      	ldr	r2, [r3, #16]
 8013c10:	8afb      	ldrh	r3, [r7, #22]
 8013c12:	04d9      	lsls	r1, r3, #19
 8013c14:	4b39      	ldr	r3, [pc, #228]	; (8013cfc <USB_EPStartXfer+0x53c>)
 8013c16:	400b      	ands	r3, r1
 8013c18:	69b9      	ldr	r1, [r7, #24]
 8013c1a:	0148      	lsls	r0, r1, #5
 8013c1c:	69f9      	ldr	r1, [r7, #28]
 8013c1e:	4401      	add	r1, r0
 8013c20:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013c24:	4313      	orrs	r3, r2
 8013c26:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8013c28:	69bb      	ldr	r3, [r7, #24]
 8013c2a:	015a      	lsls	r2, r3, #5
 8013c2c:	69fb      	ldr	r3, [r7, #28]
 8013c2e:	4413      	add	r3, r2
 8013c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c34:	691a      	ldr	r2, [r3, #16]
 8013c36:	68bb      	ldr	r3, [r7, #8]
 8013c38:	6a1b      	ldr	r3, [r3, #32]
 8013c3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013c3e:	69b9      	ldr	r1, [r7, #24]
 8013c40:	0148      	lsls	r0, r1, #5
 8013c42:	69f9      	ldr	r1, [r7, #28]
 8013c44:	4401      	add	r1, r0
 8013c46:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013c4a:	4313      	orrs	r3, r2
 8013c4c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8013c4e:	79fb      	ldrb	r3, [r7, #7]
 8013c50:	2b01      	cmp	r3, #1
 8013c52:	d10d      	bne.n	8013c70 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8013c54:	68bb      	ldr	r3, [r7, #8]
 8013c56:	68db      	ldr	r3, [r3, #12]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d009      	beq.n	8013c70 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013c5c:	68bb      	ldr	r3, [r7, #8]
 8013c5e:	68d9      	ldr	r1, [r3, #12]
 8013c60:	69bb      	ldr	r3, [r7, #24]
 8013c62:	015a      	lsls	r2, r3, #5
 8013c64:	69fb      	ldr	r3, [r7, #28]
 8013c66:	4413      	add	r3, r2
 8013c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c6c:	460a      	mov	r2, r1
 8013c6e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8013c70:	68bb      	ldr	r3, [r7, #8]
 8013c72:	791b      	ldrb	r3, [r3, #4]
 8013c74:	2b01      	cmp	r3, #1
 8013c76:	d128      	bne.n	8013cca <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013c78:	69fb      	ldr	r3, [r7, #28]
 8013c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c7e:	689b      	ldr	r3, [r3, #8]
 8013c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d110      	bne.n	8013caa <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8013c88:	69bb      	ldr	r3, [r7, #24]
 8013c8a:	015a      	lsls	r2, r3, #5
 8013c8c:	69fb      	ldr	r3, [r7, #28]
 8013c8e:	4413      	add	r3, r2
 8013c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	69ba      	ldr	r2, [r7, #24]
 8013c98:	0151      	lsls	r1, r2, #5
 8013c9a:	69fa      	ldr	r2, [r7, #28]
 8013c9c:	440a      	add	r2, r1
 8013c9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013ca2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013ca6:	6013      	str	r3, [r2, #0]
 8013ca8:	e00f      	b.n	8013cca <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8013caa:	69bb      	ldr	r3, [r7, #24]
 8013cac:	015a      	lsls	r2, r3, #5
 8013cae:	69fb      	ldr	r3, [r7, #28]
 8013cb0:	4413      	add	r3, r2
 8013cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	69ba      	ldr	r2, [r7, #24]
 8013cba:	0151      	lsls	r1, r2, #5
 8013cbc:	69fa      	ldr	r2, [r7, #28]
 8013cbe:	440a      	add	r2, r1
 8013cc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013cc8:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013cca:	69bb      	ldr	r3, [r7, #24]
 8013ccc:	015a      	lsls	r2, r3, #5
 8013cce:	69fb      	ldr	r3, [r7, #28]
 8013cd0:	4413      	add	r3, r2
 8013cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	69ba      	ldr	r2, [r7, #24]
 8013cda:	0151      	lsls	r1, r2, #5
 8013cdc:	69fa      	ldr	r2, [r7, #28]
 8013cde:	440a      	add	r2, r1
 8013ce0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013ce4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013ce8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013cea:	2300      	movs	r3, #0
}
 8013cec:	4618      	mov	r0, r3
 8013cee:	3720      	adds	r7, #32
 8013cf0:	46bd      	mov	sp, r7
 8013cf2:	bd80      	pop	{r7, pc}
 8013cf4:	fff80000 	.word	0xfff80000
 8013cf8:	e007ffff 	.word	0xe007ffff
 8013cfc:	1ff80000 	.word	0x1ff80000

08013d00 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013d00:	b480      	push	{r7}
 8013d02:	b087      	sub	sp, #28
 8013d04:	af00      	add	r7, sp, #0
 8013d06:	6078      	str	r0, [r7, #4]
 8013d08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8013d0e:	2300      	movs	r3, #0
 8013d10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013d16:	683b      	ldr	r3, [r7, #0]
 8013d18:	785b      	ldrb	r3, [r3, #1]
 8013d1a:	2b01      	cmp	r3, #1
 8013d1c:	d14a      	bne.n	8013db4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013d1e:	683b      	ldr	r3, [r7, #0]
 8013d20:	781b      	ldrb	r3, [r3, #0]
 8013d22:	015a      	lsls	r2, r3, #5
 8013d24:	693b      	ldr	r3, [r7, #16]
 8013d26:	4413      	add	r3, r2
 8013d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013d32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013d36:	f040 8086 	bne.w	8013e46 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8013d3a:	683b      	ldr	r3, [r7, #0]
 8013d3c:	781b      	ldrb	r3, [r3, #0]
 8013d3e:	015a      	lsls	r2, r3, #5
 8013d40:	693b      	ldr	r3, [r7, #16]
 8013d42:	4413      	add	r3, r2
 8013d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	683a      	ldr	r2, [r7, #0]
 8013d4c:	7812      	ldrb	r2, [r2, #0]
 8013d4e:	0151      	lsls	r1, r2, #5
 8013d50:	693a      	ldr	r2, [r7, #16]
 8013d52:	440a      	add	r2, r1
 8013d54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d58:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013d5c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8013d5e:	683b      	ldr	r3, [r7, #0]
 8013d60:	781b      	ldrb	r3, [r3, #0]
 8013d62:	015a      	lsls	r2, r3, #5
 8013d64:	693b      	ldr	r3, [r7, #16]
 8013d66:	4413      	add	r3, r2
 8013d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	683a      	ldr	r2, [r7, #0]
 8013d70:	7812      	ldrb	r2, [r2, #0]
 8013d72:	0151      	lsls	r1, r2, #5
 8013d74:	693a      	ldr	r2, [r7, #16]
 8013d76:	440a      	add	r2, r1
 8013d78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013d80:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	3301      	adds	r3, #1
 8013d86:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	f242 7210 	movw	r2, #10000	; 0x2710
 8013d8e:	4293      	cmp	r3, r2
 8013d90:	d902      	bls.n	8013d98 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8013d92:	2301      	movs	r3, #1
 8013d94:	75fb      	strb	r3, [r7, #23]
          break;
 8013d96:	e056      	b.n	8013e46 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8013d98:	683b      	ldr	r3, [r7, #0]
 8013d9a:	781b      	ldrb	r3, [r3, #0]
 8013d9c:	015a      	lsls	r2, r3, #5
 8013d9e:	693b      	ldr	r3, [r7, #16]
 8013da0:	4413      	add	r3, r2
 8013da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013dac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013db0:	d0e7      	beq.n	8013d82 <USB_EPStopXfer+0x82>
 8013db2:	e048      	b.n	8013e46 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013db4:	683b      	ldr	r3, [r7, #0]
 8013db6:	781b      	ldrb	r3, [r3, #0]
 8013db8:	015a      	lsls	r2, r3, #5
 8013dba:	693b      	ldr	r3, [r7, #16]
 8013dbc:	4413      	add	r3, r2
 8013dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013dc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013dcc:	d13b      	bne.n	8013e46 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8013dce:	683b      	ldr	r3, [r7, #0]
 8013dd0:	781b      	ldrb	r3, [r3, #0]
 8013dd2:	015a      	lsls	r2, r3, #5
 8013dd4:	693b      	ldr	r3, [r7, #16]
 8013dd6:	4413      	add	r3, r2
 8013dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	683a      	ldr	r2, [r7, #0]
 8013de0:	7812      	ldrb	r2, [r2, #0]
 8013de2:	0151      	lsls	r1, r2, #5
 8013de4:	693a      	ldr	r2, [r7, #16]
 8013de6:	440a      	add	r2, r1
 8013de8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013dec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013df0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8013df2:	683b      	ldr	r3, [r7, #0]
 8013df4:	781b      	ldrb	r3, [r3, #0]
 8013df6:	015a      	lsls	r2, r3, #5
 8013df8:	693b      	ldr	r3, [r7, #16]
 8013dfa:	4413      	add	r3, r2
 8013dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e00:	681b      	ldr	r3, [r3, #0]
 8013e02:	683a      	ldr	r2, [r7, #0]
 8013e04:	7812      	ldrb	r2, [r2, #0]
 8013e06:	0151      	lsls	r1, r2, #5
 8013e08:	693a      	ldr	r2, [r7, #16]
 8013e0a:	440a      	add	r2, r1
 8013e0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013e10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013e14:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	3301      	adds	r3, #1
 8013e1a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	f242 7210 	movw	r2, #10000	; 0x2710
 8013e22:	4293      	cmp	r3, r2
 8013e24:	d902      	bls.n	8013e2c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8013e26:	2301      	movs	r3, #1
 8013e28:	75fb      	strb	r3, [r7, #23]
          break;
 8013e2a:	e00c      	b.n	8013e46 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8013e2c:	683b      	ldr	r3, [r7, #0]
 8013e2e:	781b      	ldrb	r3, [r3, #0]
 8013e30:	015a      	lsls	r2, r3, #5
 8013e32:	693b      	ldr	r3, [r7, #16]
 8013e34:	4413      	add	r3, r2
 8013e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013e40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013e44:	d0e7      	beq.n	8013e16 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8013e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8013e48:	4618      	mov	r0, r3
 8013e4a:	371c      	adds	r7, #28
 8013e4c:	46bd      	mov	sp, r7
 8013e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e52:	4770      	bx	lr

08013e54 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8013e54:	b480      	push	{r7}
 8013e56:	b089      	sub	sp, #36	; 0x24
 8013e58:	af00      	add	r7, sp, #0
 8013e5a:	60f8      	str	r0, [r7, #12]
 8013e5c:	60b9      	str	r1, [r7, #8]
 8013e5e:	4611      	mov	r1, r2
 8013e60:	461a      	mov	r2, r3
 8013e62:	460b      	mov	r3, r1
 8013e64:	71fb      	strb	r3, [r7, #7]
 8013e66:	4613      	mov	r3, r2
 8013e68:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8013e6e:	68bb      	ldr	r3, [r7, #8]
 8013e70:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8013e72:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d123      	bne.n	8013ec2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8013e7a:	88bb      	ldrh	r3, [r7, #4]
 8013e7c:	3303      	adds	r3, #3
 8013e7e:	089b      	lsrs	r3, r3, #2
 8013e80:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8013e82:	2300      	movs	r3, #0
 8013e84:	61bb      	str	r3, [r7, #24]
 8013e86:	e018      	b.n	8013eba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013e88:	79fb      	ldrb	r3, [r7, #7]
 8013e8a:	031a      	lsls	r2, r3, #12
 8013e8c:	697b      	ldr	r3, [r7, #20]
 8013e8e:	4413      	add	r3, r2
 8013e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013e94:	461a      	mov	r2, r3
 8013e96:	69fb      	ldr	r3, [r7, #28]
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8013e9c:	69fb      	ldr	r3, [r7, #28]
 8013e9e:	3301      	adds	r3, #1
 8013ea0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013ea2:	69fb      	ldr	r3, [r7, #28]
 8013ea4:	3301      	adds	r3, #1
 8013ea6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013ea8:	69fb      	ldr	r3, [r7, #28]
 8013eaa:	3301      	adds	r3, #1
 8013eac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013eae:	69fb      	ldr	r3, [r7, #28]
 8013eb0:	3301      	adds	r3, #1
 8013eb2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8013eb4:	69bb      	ldr	r3, [r7, #24]
 8013eb6:	3301      	adds	r3, #1
 8013eb8:	61bb      	str	r3, [r7, #24]
 8013eba:	69ba      	ldr	r2, [r7, #24]
 8013ebc:	693b      	ldr	r3, [r7, #16]
 8013ebe:	429a      	cmp	r2, r3
 8013ec0:	d3e2      	bcc.n	8013e88 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8013ec2:	2300      	movs	r3, #0
}
 8013ec4:	4618      	mov	r0, r3
 8013ec6:	3724      	adds	r7, #36	; 0x24
 8013ec8:	46bd      	mov	sp, r7
 8013eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ece:	4770      	bx	lr

08013ed0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013ed0:	b480      	push	{r7}
 8013ed2:	b08b      	sub	sp, #44	; 0x2c
 8013ed4:	af00      	add	r7, sp, #0
 8013ed6:	60f8      	str	r0, [r7, #12]
 8013ed8:	60b9      	str	r1, [r7, #8]
 8013eda:	4613      	mov	r3, r2
 8013edc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8013ee2:	68bb      	ldr	r3, [r7, #8]
 8013ee4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8013ee6:	88fb      	ldrh	r3, [r7, #6]
 8013ee8:	089b      	lsrs	r3, r3, #2
 8013eea:	b29b      	uxth	r3, r3
 8013eec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8013eee:	88fb      	ldrh	r3, [r7, #6]
 8013ef0:	f003 0303 	and.w	r3, r3, #3
 8013ef4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8013ef6:	2300      	movs	r3, #0
 8013ef8:	623b      	str	r3, [r7, #32]
 8013efa:	e014      	b.n	8013f26 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013efc:	69bb      	ldr	r3, [r7, #24]
 8013efe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013f02:	681a      	ldr	r2, [r3, #0]
 8013f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f06:	601a      	str	r2, [r3, #0]
    pDest++;
 8013f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f0a:	3301      	adds	r3, #1
 8013f0c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f10:	3301      	adds	r3, #1
 8013f12:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f16:	3301      	adds	r3, #1
 8013f18:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f1c:	3301      	adds	r3, #1
 8013f1e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8013f20:	6a3b      	ldr	r3, [r7, #32]
 8013f22:	3301      	adds	r3, #1
 8013f24:	623b      	str	r3, [r7, #32]
 8013f26:	6a3a      	ldr	r2, [r7, #32]
 8013f28:	697b      	ldr	r3, [r7, #20]
 8013f2a:	429a      	cmp	r2, r3
 8013f2c:	d3e6      	bcc.n	8013efc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8013f2e:	8bfb      	ldrh	r3, [r7, #30]
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d01e      	beq.n	8013f72 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013f34:	2300      	movs	r3, #0
 8013f36:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013f38:	69bb      	ldr	r3, [r7, #24]
 8013f3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013f3e:	461a      	mov	r2, r3
 8013f40:	f107 0310 	add.w	r3, r7, #16
 8013f44:	6812      	ldr	r2, [r2, #0]
 8013f46:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013f48:	693a      	ldr	r2, [r7, #16]
 8013f4a:	6a3b      	ldr	r3, [r7, #32]
 8013f4c:	b2db      	uxtb	r3, r3
 8013f4e:	00db      	lsls	r3, r3, #3
 8013f50:	fa22 f303 	lsr.w	r3, r2, r3
 8013f54:	b2da      	uxtb	r2, r3
 8013f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f58:	701a      	strb	r2, [r3, #0]
      i++;
 8013f5a:	6a3b      	ldr	r3, [r7, #32]
 8013f5c:	3301      	adds	r3, #1
 8013f5e:	623b      	str	r3, [r7, #32]
      pDest++;
 8013f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f62:	3301      	adds	r3, #1
 8013f64:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8013f66:	8bfb      	ldrh	r3, [r7, #30]
 8013f68:	3b01      	subs	r3, #1
 8013f6a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8013f6c:	8bfb      	ldrh	r3, [r7, #30]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d1ea      	bne.n	8013f48 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8013f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013f74:	4618      	mov	r0, r3
 8013f76:	372c      	adds	r7, #44	; 0x2c
 8013f78:	46bd      	mov	sp, r7
 8013f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f7e:	4770      	bx	lr

08013f80 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013f80:	b480      	push	{r7}
 8013f82:	b085      	sub	sp, #20
 8013f84:	af00      	add	r7, sp, #0
 8013f86:	6078      	str	r0, [r7, #4]
 8013f88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013f8e:	683b      	ldr	r3, [r7, #0]
 8013f90:	781b      	ldrb	r3, [r3, #0]
 8013f92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013f94:	683b      	ldr	r3, [r7, #0]
 8013f96:	785b      	ldrb	r3, [r3, #1]
 8013f98:	2b01      	cmp	r3, #1
 8013f9a:	d12c      	bne.n	8013ff6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013f9c:	68bb      	ldr	r3, [r7, #8]
 8013f9e:	015a      	lsls	r2, r3, #5
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	4413      	add	r3, r2
 8013fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	db12      	blt.n	8013fd4 <USB_EPSetStall+0x54>
 8013fae:	68bb      	ldr	r3, [r7, #8]
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d00f      	beq.n	8013fd4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013fb4:	68bb      	ldr	r3, [r7, #8]
 8013fb6:	015a      	lsls	r2, r3, #5
 8013fb8:	68fb      	ldr	r3, [r7, #12]
 8013fba:	4413      	add	r3, r2
 8013fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	68ba      	ldr	r2, [r7, #8]
 8013fc4:	0151      	lsls	r1, r2, #5
 8013fc6:	68fa      	ldr	r2, [r7, #12]
 8013fc8:	440a      	add	r2, r1
 8013fca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013fce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013fd2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013fd4:	68bb      	ldr	r3, [r7, #8]
 8013fd6:	015a      	lsls	r2, r3, #5
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	4413      	add	r3, r2
 8013fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	68ba      	ldr	r2, [r7, #8]
 8013fe4:	0151      	lsls	r1, r2, #5
 8013fe6:	68fa      	ldr	r2, [r7, #12]
 8013fe8:	440a      	add	r2, r1
 8013fea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013fee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013ff2:	6013      	str	r3, [r2, #0]
 8013ff4:	e02b      	b.n	801404e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013ff6:	68bb      	ldr	r3, [r7, #8]
 8013ff8:	015a      	lsls	r2, r3, #5
 8013ffa:	68fb      	ldr	r3, [r7, #12]
 8013ffc:	4413      	add	r3, r2
 8013ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014002:	681b      	ldr	r3, [r3, #0]
 8014004:	2b00      	cmp	r3, #0
 8014006:	db12      	blt.n	801402e <USB_EPSetStall+0xae>
 8014008:	68bb      	ldr	r3, [r7, #8]
 801400a:	2b00      	cmp	r3, #0
 801400c:	d00f      	beq.n	801402e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801400e:	68bb      	ldr	r3, [r7, #8]
 8014010:	015a      	lsls	r2, r3, #5
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	4413      	add	r3, r2
 8014016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	68ba      	ldr	r2, [r7, #8]
 801401e:	0151      	lsls	r1, r2, #5
 8014020:	68fa      	ldr	r2, [r7, #12]
 8014022:	440a      	add	r2, r1
 8014024:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014028:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801402c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801402e:	68bb      	ldr	r3, [r7, #8]
 8014030:	015a      	lsls	r2, r3, #5
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	4413      	add	r3, r2
 8014036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	68ba      	ldr	r2, [r7, #8]
 801403e:	0151      	lsls	r1, r2, #5
 8014040:	68fa      	ldr	r2, [r7, #12]
 8014042:	440a      	add	r2, r1
 8014044:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014048:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801404c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801404e:	2300      	movs	r3, #0
}
 8014050:	4618      	mov	r0, r3
 8014052:	3714      	adds	r7, #20
 8014054:	46bd      	mov	sp, r7
 8014056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801405a:	4770      	bx	lr

0801405c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801405c:	b480      	push	{r7}
 801405e:	b085      	sub	sp, #20
 8014060:	af00      	add	r7, sp, #0
 8014062:	6078      	str	r0, [r7, #4]
 8014064:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801406a:	683b      	ldr	r3, [r7, #0]
 801406c:	781b      	ldrb	r3, [r3, #0]
 801406e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014070:	683b      	ldr	r3, [r7, #0]
 8014072:	785b      	ldrb	r3, [r3, #1]
 8014074:	2b01      	cmp	r3, #1
 8014076:	d128      	bne.n	80140ca <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8014078:	68bb      	ldr	r3, [r7, #8]
 801407a:	015a      	lsls	r2, r3, #5
 801407c:	68fb      	ldr	r3, [r7, #12]
 801407e:	4413      	add	r3, r2
 8014080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	68ba      	ldr	r2, [r7, #8]
 8014088:	0151      	lsls	r1, r2, #5
 801408a:	68fa      	ldr	r2, [r7, #12]
 801408c:	440a      	add	r2, r1
 801408e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014092:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014096:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014098:	683b      	ldr	r3, [r7, #0]
 801409a:	791b      	ldrb	r3, [r3, #4]
 801409c:	2b03      	cmp	r3, #3
 801409e:	d003      	beq.n	80140a8 <USB_EPClearStall+0x4c>
 80140a0:	683b      	ldr	r3, [r7, #0]
 80140a2:	791b      	ldrb	r3, [r3, #4]
 80140a4:	2b02      	cmp	r3, #2
 80140a6:	d138      	bne.n	801411a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80140a8:	68bb      	ldr	r3, [r7, #8]
 80140aa:	015a      	lsls	r2, r3, #5
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	4413      	add	r3, r2
 80140b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	68ba      	ldr	r2, [r7, #8]
 80140b8:	0151      	lsls	r1, r2, #5
 80140ba:	68fa      	ldr	r2, [r7, #12]
 80140bc:	440a      	add	r2, r1
 80140be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80140c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80140c6:	6013      	str	r3, [r2, #0]
 80140c8:	e027      	b.n	801411a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80140ca:	68bb      	ldr	r3, [r7, #8]
 80140cc:	015a      	lsls	r2, r3, #5
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	4413      	add	r3, r2
 80140d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	68ba      	ldr	r2, [r7, #8]
 80140da:	0151      	lsls	r1, r2, #5
 80140dc:	68fa      	ldr	r2, [r7, #12]
 80140de:	440a      	add	r2, r1
 80140e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80140e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80140e8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80140ea:	683b      	ldr	r3, [r7, #0]
 80140ec:	791b      	ldrb	r3, [r3, #4]
 80140ee:	2b03      	cmp	r3, #3
 80140f0:	d003      	beq.n	80140fa <USB_EPClearStall+0x9e>
 80140f2:	683b      	ldr	r3, [r7, #0]
 80140f4:	791b      	ldrb	r3, [r3, #4]
 80140f6:	2b02      	cmp	r3, #2
 80140f8:	d10f      	bne.n	801411a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80140fa:	68bb      	ldr	r3, [r7, #8]
 80140fc:	015a      	lsls	r2, r3, #5
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	4413      	add	r3, r2
 8014102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	68ba      	ldr	r2, [r7, #8]
 801410a:	0151      	lsls	r1, r2, #5
 801410c:	68fa      	ldr	r2, [r7, #12]
 801410e:	440a      	add	r2, r1
 8014110:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014118:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801411a:	2300      	movs	r3, #0
}
 801411c:	4618      	mov	r0, r3
 801411e:	3714      	adds	r7, #20
 8014120:	46bd      	mov	sp, r7
 8014122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014126:	4770      	bx	lr

08014128 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8014128:	b480      	push	{r7}
 801412a:	b085      	sub	sp, #20
 801412c:	af00      	add	r7, sp, #0
 801412e:	6078      	str	r0, [r7, #4]
 8014130:	460b      	mov	r3, r1
 8014132:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	68fa      	ldr	r2, [r7, #12]
 8014142:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014146:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801414a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014152:	681a      	ldr	r2, [r3, #0]
 8014154:	78fb      	ldrb	r3, [r7, #3]
 8014156:	011b      	lsls	r3, r3, #4
 8014158:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801415c:	68f9      	ldr	r1, [r7, #12]
 801415e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014162:	4313      	orrs	r3, r2
 8014164:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8014166:	2300      	movs	r3, #0
}
 8014168:	4618      	mov	r0, r3
 801416a:	3714      	adds	r7, #20
 801416c:	46bd      	mov	sp, r7
 801416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014172:	4770      	bx	lr

08014174 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014174:	b480      	push	{r7}
 8014176:	b085      	sub	sp, #20
 8014178:	af00      	add	r7, sp, #0
 801417a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014180:	68fb      	ldr	r3, [r7, #12]
 8014182:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	68fa      	ldr	r2, [r7, #12]
 801418a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801418e:	f023 0303 	bic.w	r3, r3, #3
 8014192:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8014194:	68fb      	ldr	r3, [r7, #12]
 8014196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801419a:	685b      	ldr	r3, [r3, #4]
 801419c:	68fa      	ldr	r2, [r7, #12]
 801419e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80141a2:	f023 0302 	bic.w	r3, r3, #2
 80141a6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80141a8:	2300      	movs	r3, #0
}
 80141aa:	4618      	mov	r0, r3
 80141ac:	3714      	adds	r7, #20
 80141ae:	46bd      	mov	sp, r7
 80141b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141b4:	4770      	bx	lr

080141b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80141b6:	b480      	push	{r7}
 80141b8:	b085      	sub	sp, #20
 80141ba:	af00      	add	r7, sp, #0
 80141bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	68fa      	ldr	r2, [r7, #12]
 80141cc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80141d0:	f023 0303 	bic.w	r3, r3, #3
 80141d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80141d6:	68fb      	ldr	r3, [r7, #12]
 80141d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80141dc:	685b      	ldr	r3, [r3, #4]
 80141de:	68fa      	ldr	r2, [r7, #12]
 80141e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80141e4:	f043 0302 	orr.w	r3, r3, #2
 80141e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80141ea:	2300      	movs	r3, #0
}
 80141ec:	4618      	mov	r0, r3
 80141ee:	3714      	adds	r7, #20
 80141f0:	46bd      	mov	sp, r7
 80141f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141f6:	4770      	bx	lr

080141f8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80141f8:	b480      	push	{r7}
 80141fa:	b085      	sub	sp, #20
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	695b      	ldr	r3, [r3, #20]
 8014204:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	699b      	ldr	r3, [r3, #24]
 801420a:	68fa      	ldr	r2, [r7, #12]
 801420c:	4013      	ands	r3, r2
 801420e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8014210:	68fb      	ldr	r3, [r7, #12]
}
 8014212:	4618      	mov	r0, r3
 8014214:	3714      	adds	r7, #20
 8014216:	46bd      	mov	sp, r7
 8014218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801421c:	4770      	bx	lr

0801421e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801421e:	b480      	push	{r7}
 8014220:	b085      	sub	sp, #20
 8014222:	af00      	add	r7, sp, #0
 8014224:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014230:	699b      	ldr	r3, [r3, #24]
 8014232:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801423a:	69db      	ldr	r3, [r3, #28]
 801423c:	68ba      	ldr	r2, [r7, #8]
 801423e:	4013      	ands	r3, r2
 8014240:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8014242:	68bb      	ldr	r3, [r7, #8]
 8014244:	0c1b      	lsrs	r3, r3, #16
}
 8014246:	4618      	mov	r0, r3
 8014248:	3714      	adds	r7, #20
 801424a:	46bd      	mov	sp, r7
 801424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014250:	4770      	bx	lr

08014252 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014252:	b480      	push	{r7}
 8014254:	b085      	sub	sp, #20
 8014256:	af00      	add	r7, sp, #0
 8014258:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014264:	699b      	ldr	r3, [r3, #24]
 8014266:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014268:	68fb      	ldr	r3, [r7, #12]
 801426a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801426e:	69db      	ldr	r3, [r3, #28]
 8014270:	68ba      	ldr	r2, [r7, #8]
 8014272:	4013      	ands	r3, r2
 8014274:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8014276:	68bb      	ldr	r3, [r7, #8]
 8014278:	b29b      	uxth	r3, r3
}
 801427a:	4618      	mov	r0, r3
 801427c:	3714      	adds	r7, #20
 801427e:	46bd      	mov	sp, r7
 8014280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014284:	4770      	bx	lr

08014286 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014286:	b480      	push	{r7}
 8014288:	b085      	sub	sp, #20
 801428a:	af00      	add	r7, sp, #0
 801428c:	6078      	str	r0, [r7, #4]
 801428e:	460b      	mov	r3, r1
 8014290:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8014296:	78fb      	ldrb	r3, [r7, #3]
 8014298:	015a      	lsls	r2, r3, #5
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	4413      	add	r3, r2
 801429e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80142a2:	689b      	ldr	r3, [r3, #8]
 80142a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80142ac:	695b      	ldr	r3, [r3, #20]
 80142ae:	68ba      	ldr	r2, [r7, #8]
 80142b0:	4013      	ands	r3, r2
 80142b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80142b4:	68bb      	ldr	r3, [r7, #8]
}
 80142b6:	4618      	mov	r0, r3
 80142b8:	3714      	adds	r7, #20
 80142ba:	46bd      	mov	sp, r7
 80142bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142c0:	4770      	bx	lr

080142c2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80142c2:	b480      	push	{r7}
 80142c4:	b087      	sub	sp, #28
 80142c6:	af00      	add	r7, sp, #0
 80142c8:	6078      	str	r0, [r7, #4]
 80142ca:	460b      	mov	r3, r1
 80142cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80142d2:	697b      	ldr	r3, [r7, #20]
 80142d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80142d8:	691b      	ldr	r3, [r3, #16]
 80142da:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80142dc:	697b      	ldr	r3, [r7, #20]
 80142de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80142e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80142e4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80142e6:	78fb      	ldrb	r3, [r7, #3]
 80142e8:	f003 030f 	and.w	r3, r3, #15
 80142ec:	68fa      	ldr	r2, [r7, #12]
 80142ee:	fa22 f303 	lsr.w	r3, r2, r3
 80142f2:	01db      	lsls	r3, r3, #7
 80142f4:	b2db      	uxtb	r3, r3
 80142f6:	693a      	ldr	r2, [r7, #16]
 80142f8:	4313      	orrs	r3, r2
 80142fa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80142fc:	78fb      	ldrb	r3, [r7, #3]
 80142fe:	015a      	lsls	r2, r3, #5
 8014300:	697b      	ldr	r3, [r7, #20]
 8014302:	4413      	add	r3, r2
 8014304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014308:	689b      	ldr	r3, [r3, #8]
 801430a:	693a      	ldr	r2, [r7, #16]
 801430c:	4013      	ands	r3, r2
 801430e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014310:	68bb      	ldr	r3, [r7, #8]
}
 8014312:	4618      	mov	r0, r3
 8014314:	371c      	adds	r7, #28
 8014316:	46bd      	mov	sp, r7
 8014318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801431c:	4770      	bx	lr

0801431e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801431e:	b480      	push	{r7}
 8014320:	b083      	sub	sp, #12
 8014322:	af00      	add	r7, sp, #0
 8014324:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	695b      	ldr	r3, [r3, #20]
 801432a:	f003 0301 	and.w	r3, r3, #1
}
 801432e:	4618      	mov	r0, r3
 8014330:	370c      	adds	r7, #12
 8014332:	46bd      	mov	sp, r7
 8014334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014338:	4770      	bx	lr
	...

0801433c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801433c:	b480      	push	{r7}
 801433e:	b085      	sub	sp, #20
 8014340:	af00      	add	r7, sp, #0
 8014342:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801434e:	681a      	ldr	r2, [r3, #0]
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014356:	4619      	mov	r1, r3
 8014358:	4b09      	ldr	r3, [pc, #36]	; (8014380 <USB_ActivateSetup+0x44>)
 801435a:	4013      	ands	r3, r2
 801435c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801435e:	68fb      	ldr	r3, [r7, #12]
 8014360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014364:	685b      	ldr	r3, [r3, #4]
 8014366:	68fa      	ldr	r2, [r7, #12]
 8014368:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801436c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014370:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014372:	2300      	movs	r3, #0
}
 8014374:	4618      	mov	r0, r3
 8014376:	3714      	adds	r7, #20
 8014378:	46bd      	mov	sp, r7
 801437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801437e:	4770      	bx	lr
 8014380:	fffff800 	.word	0xfffff800

08014384 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8014384:	b480      	push	{r7}
 8014386:	b087      	sub	sp, #28
 8014388:	af00      	add	r7, sp, #0
 801438a:	60f8      	str	r0, [r7, #12]
 801438c:	460b      	mov	r3, r1
 801438e:	607a      	str	r2, [r7, #4]
 8014390:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	333c      	adds	r3, #60	; 0x3c
 801439a:	3304      	adds	r3, #4
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80143a0:	693b      	ldr	r3, [r7, #16]
 80143a2:	4a26      	ldr	r2, [pc, #152]	; (801443c <USB_EP0_OutStart+0xb8>)
 80143a4:	4293      	cmp	r3, r2
 80143a6:	d90a      	bls.n	80143be <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80143a8:	697b      	ldr	r3, [r7, #20]
 80143aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80143b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80143b8:	d101      	bne.n	80143be <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80143ba:	2300      	movs	r3, #0
 80143bc:	e037      	b.n	801442e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80143be:	697b      	ldr	r3, [r7, #20]
 80143c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80143c4:	461a      	mov	r2, r3
 80143c6:	2300      	movs	r3, #0
 80143c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80143ca:	697b      	ldr	r3, [r7, #20]
 80143cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80143d0:	691b      	ldr	r3, [r3, #16]
 80143d2:	697a      	ldr	r2, [r7, #20]
 80143d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80143d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80143dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80143de:	697b      	ldr	r3, [r7, #20]
 80143e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80143e4:	691b      	ldr	r3, [r3, #16]
 80143e6:	697a      	ldr	r2, [r7, #20]
 80143e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80143ec:	f043 0318 	orr.w	r3, r3, #24
 80143f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80143f2:	697b      	ldr	r3, [r7, #20]
 80143f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80143f8:	691b      	ldr	r3, [r3, #16]
 80143fa:	697a      	ldr	r2, [r7, #20]
 80143fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014400:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8014404:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8014406:	7afb      	ldrb	r3, [r7, #11]
 8014408:	2b01      	cmp	r3, #1
 801440a:	d10f      	bne.n	801442c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801440c:	697b      	ldr	r3, [r7, #20]
 801440e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014412:	461a      	mov	r2, r3
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8014418:	697b      	ldr	r3, [r7, #20]
 801441a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801441e:	681b      	ldr	r3, [r3, #0]
 8014420:	697a      	ldr	r2, [r7, #20]
 8014422:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014426:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801442a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801442c:	2300      	movs	r3, #0
}
 801442e:	4618      	mov	r0, r3
 8014430:	371c      	adds	r7, #28
 8014432:	46bd      	mov	sp, r7
 8014434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014438:	4770      	bx	lr
 801443a:	bf00      	nop
 801443c:	4f54300a 	.word	0x4f54300a

08014440 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8014440:	b480      	push	{r7}
 8014442:	b085      	sub	sp, #20
 8014444:	af00      	add	r7, sp, #0
 8014446:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014448:	2300      	movs	r3, #0
 801444a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801444c:	68fb      	ldr	r3, [r7, #12]
 801444e:	3301      	adds	r3, #1
 8014450:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	4a13      	ldr	r2, [pc, #76]	; (80144a4 <USB_CoreReset+0x64>)
 8014456:	4293      	cmp	r3, r2
 8014458:	d901      	bls.n	801445e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801445a:	2303      	movs	r3, #3
 801445c:	e01b      	b.n	8014496 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	691b      	ldr	r3, [r3, #16]
 8014462:	2b00      	cmp	r3, #0
 8014464:	daf2      	bge.n	801444c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8014466:	2300      	movs	r3, #0
 8014468:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	691b      	ldr	r3, [r3, #16]
 801446e:	f043 0201 	orr.w	r2, r3, #1
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	3301      	adds	r3, #1
 801447a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	4a09      	ldr	r2, [pc, #36]	; (80144a4 <USB_CoreReset+0x64>)
 8014480:	4293      	cmp	r3, r2
 8014482:	d901      	bls.n	8014488 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8014484:	2303      	movs	r3, #3
 8014486:	e006      	b.n	8014496 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	691b      	ldr	r3, [r3, #16]
 801448c:	f003 0301 	and.w	r3, r3, #1
 8014490:	2b01      	cmp	r3, #1
 8014492:	d0f0      	beq.n	8014476 <USB_CoreReset+0x36>

  return HAL_OK;
 8014494:	2300      	movs	r3, #0
}
 8014496:	4618      	mov	r0, r3
 8014498:	3714      	adds	r7, #20
 801449a:	46bd      	mov	sp, r7
 801449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144a0:	4770      	bx	lr
 80144a2:	bf00      	nop
 80144a4:	00030d40 	.word	0x00030d40

080144a8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80144a8:	b580      	push	{r7, lr}
 80144aa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80144ac:	4904      	ldr	r1, [pc, #16]	; (80144c0 <MX_FATFS_Init+0x18>)
 80144ae:	4805      	ldr	r0, [pc, #20]	; (80144c4 <MX_FATFS_Init+0x1c>)
 80144b0:	f002 fa56 	bl	8016960 <FATFS_LinkDriver>
 80144b4:	4603      	mov	r3, r0
 80144b6:	461a      	mov	r2, r3
 80144b8:	4b03      	ldr	r3, [pc, #12]	; (80144c8 <MX_FATFS_Init+0x20>)
 80144ba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80144bc:	bf00      	nop
 80144be:	bd80      	pop	{r7, pc}
 80144c0:	24001704 	.word	0x24001704
 80144c4:	0801c440 	.word	0x0801c440
 80144c8:	24001700 	.word	0x24001700

080144cc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80144cc:	b580      	push	{r7, lr}
 80144ce:	b082      	sub	sp, #8
 80144d0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80144d2:	2300      	movs	r3, #0
 80144d4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80144d6:	f000 f885 	bl	80145e4 <BSP_SD_IsDetected>
 80144da:	4603      	mov	r3, r0
 80144dc:	2b01      	cmp	r3, #1
 80144de:	d001      	beq.n	80144e4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80144e0:	2302      	movs	r3, #2
 80144e2:	e012      	b.n	801450a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 80144e4:	480b      	ldr	r0, [pc, #44]	; (8014514 <BSP_SD_Init+0x48>)
 80144e6:	f7f8 ff99 	bl	800d41c <HAL_SD_Init>
 80144ea:	4603      	mov	r3, r0
 80144ec:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80144ee:	79fb      	ldrb	r3, [r7, #7]
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d109      	bne.n	8014508 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80144f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80144f8:	4806      	ldr	r0, [pc, #24]	; (8014514 <BSP_SD_Init+0x48>)
 80144fa:	f7f9 fe4f 	bl	800e19c <HAL_SD_ConfigWideBusOperation>
 80144fe:	4603      	mov	r3, r0
 8014500:	2b00      	cmp	r3, #0
 8014502:	d001      	beq.n	8014508 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8014504:	2301      	movs	r3, #1
 8014506:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8014508:	79fb      	ldrb	r3, [r7, #7]
}
 801450a:	4618      	mov	r0, r3
 801450c:	3708      	adds	r7, #8
 801450e:	46bd      	mov	sp, r7
 8014510:	bd80      	pop	{r7, pc}
 8014512:	bf00      	nop
 8014514:	24001034 	.word	0x24001034

08014518 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8014518:	b580      	push	{r7, lr}
 801451a:	b086      	sub	sp, #24
 801451c:	af00      	add	r7, sp, #0
 801451e:	60f8      	str	r0, [r7, #12]
 8014520:	60b9      	str	r1, [r7, #8]
 8014522:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014524:	2300      	movs	r3, #0
 8014526:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	68ba      	ldr	r2, [r7, #8]
 801452c:	68f9      	ldr	r1, [r7, #12]
 801452e:	4806      	ldr	r0, [pc, #24]	; (8014548 <BSP_SD_ReadBlocks_DMA+0x30>)
 8014530:	f7f9 f894 	bl	800d65c <HAL_SD_ReadBlocks_DMA>
 8014534:	4603      	mov	r3, r0
 8014536:	2b00      	cmp	r3, #0
 8014538:	d001      	beq.n	801453e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801453a:	2301      	movs	r3, #1
 801453c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801453e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014540:	4618      	mov	r0, r3
 8014542:	3718      	adds	r7, #24
 8014544:	46bd      	mov	sp, r7
 8014546:	bd80      	pop	{r7, pc}
 8014548:	24001034 	.word	0x24001034

0801454c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 801454c:	b580      	push	{r7, lr}
 801454e:	b086      	sub	sp, #24
 8014550:	af00      	add	r7, sp, #0
 8014552:	60f8      	str	r0, [r7, #12]
 8014554:	60b9      	str	r1, [r7, #8]
 8014556:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014558:	2300      	movs	r3, #0
 801455a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	68ba      	ldr	r2, [r7, #8]
 8014560:	68f9      	ldr	r1, [r7, #12]
 8014562:	4806      	ldr	r0, [pc, #24]	; (801457c <BSP_SD_WriteBlocks_DMA+0x30>)
 8014564:	f7f9 f922 	bl	800d7ac <HAL_SD_WriteBlocks_DMA>
 8014568:	4603      	mov	r3, r0
 801456a:	2b00      	cmp	r3, #0
 801456c:	d001      	beq.n	8014572 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801456e:	2301      	movs	r3, #1
 8014570:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8014572:	7dfb      	ldrb	r3, [r7, #23]
}
 8014574:	4618      	mov	r0, r3
 8014576:	3718      	adds	r7, #24
 8014578:	46bd      	mov	sp, r7
 801457a:	bd80      	pop	{r7, pc}
 801457c:	24001034 	.word	0x24001034

08014580 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8014580:	b580      	push	{r7, lr}
 8014582:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8014584:	4805      	ldr	r0, [pc, #20]	; (801459c <BSP_SD_GetCardState+0x1c>)
 8014586:	f7f9 ff1b 	bl	800e3c0 <HAL_SD_GetCardState>
 801458a:	4603      	mov	r3, r0
 801458c:	2b04      	cmp	r3, #4
 801458e:	bf14      	ite	ne
 8014590:	2301      	movne	r3, #1
 8014592:	2300      	moveq	r3, #0
 8014594:	b2db      	uxtb	r3, r3
}
 8014596:	4618      	mov	r0, r3
 8014598:	bd80      	pop	{r7, pc}
 801459a:	bf00      	nop
 801459c:	24001034 	.word	0x24001034

080145a0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80145a0:	b580      	push	{r7, lr}
 80145a2:	b082      	sub	sp, #8
 80145a4:	af00      	add	r7, sp, #0
 80145a6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 80145a8:	6879      	ldr	r1, [r7, #4]
 80145aa:	4803      	ldr	r0, [pc, #12]	; (80145b8 <BSP_SD_GetCardInfo+0x18>)
 80145ac:	f7f9 fdca 	bl	800e144 <HAL_SD_GetCardInfo>
}
 80145b0:	bf00      	nop
 80145b2:	3708      	adds	r7, #8
 80145b4:	46bd      	mov	sp, r7
 80145b6:	bd80      	pop	{r7, pc}
 80145b8:	24001034 	.word	0x24001034

080145bc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80145bc:	b580      	push	{r7, lr}
 80145be:	b082      	sub	sp, #8
 80145c0:	af00      	add	r7, sp, #0
 80145c2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80145c4:	f000 f9a0 	bl	8014908 <BSP_SD_WriteCpltCallback>
}
 80145c8:	bf00      	nop
 80145ca:	3708      	adds	r7, #8
 80145cc:	46bd      	mov	sp, r7
 80145ce:	bd80      	pop	{r7, pc}

080145d0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80145d0:	b580      	push	{r7, lr}
 80145d2:	b082      	sub	sp, #8
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80145d8:	f000 f9a2 	bl	8014920 <BSP_SD_ReadCpltCallback>
}
 80145dc:	bf00      	nop
 80145de:	3708      	adds	r7, #8
 80145e0:	46bd      	mov	sp, r7
 80145e2:	bd80      	pop	{r7, pc}

080145e4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80145e4:	b580      	push	{r7, lr}
 80145e6:	b082      	sub	sp, #8
 80145e8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80145ea:	2301      	movs	r3, #1
 80145ec:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80145ee:	f000 f80b 	bl	8014608 <BSP_PlatformIsDetected>
 80145f2:	4603      	mov	r3, r0
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d101      	bne.n	80145fc <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80145f8:	2300      	movs	r3, #0
 80145fa:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80145fc:	79fb      	ldrb	r3, [r7, #7]
 80145fe:	b2db      	uxtb	r3, r3
}
 8014600:	4618      	mov	r0, r3
 8014602:	3708      	adds	r7, #8
 8014604:	46bd      	mov	sp, r7
 8014606:	bd80      	pop	{r7, pc}

08014608 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8014608:	b580      	push	{r7, lr}
 801460a:	b082      	sub	sp, #8
 801460c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801460e:	2301      	movs	r3, #1
 8014610:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8014612:	2104      	movs	r1, #4
 8014614:	4806      	ldr	r0, [pc, #24]	; (8014630 <BSP_PlatformIsDetected+0x28>)
 8014616:	f7f3 feef 	bl	80083f8 <HAL_GPIO_ReadPin>
 801461a:	4603      	mov	r3, r0
 801461c:	2b00      	cmp	r3, #0
 801461e:	d001      	beq.n	8014624 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8014620:	2300      	movs	r3, #0
 8014622:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8014624:	79fb      	ldrb	r3, [r7, #7]
}
 8014626:	4618      	mov	r0, r3
 8014628:	3708      	adds	r7, #8
 801462a:	46bd      	mov	sp, r7
 801462c:	bd80      	pop	{r7, pc}
 801462e:	bf00      	nop
 8014630:	58020400 	.word	0x58020400

08014634 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8014634:	b580      	push	{r7, lr}
 8014636:	b084      	sub	sp, #16
 8014638:	af00      	add	r7, sp, #0
 801463a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 801463c:	f7ef fc36 	bl	8003eac <HAL_GetTick>
 8014640:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8014642:	e006      	b.n	8014652 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014644:	f7ff ff9c 	bl	8014580 <BSP_SD_GetCardState>
 8014648:	4603      	mov	r3, r0
 801464a:	2b00      	cmp	r3, #0
 801464c:	d101      	bne.n	8014652 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801464e:	2300      	movs	r3, #0
 8014650:	e009      	b.n	8014666 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8014652:	f7ef fc2b 	bl	8003eac <HAL_GetTick>
 8014656:	4602      	mov	r2, r0
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	1ad3      	subs	r3, r2, r3
 801465c:	687a      	ldr	r2, [r7, #4]
 801465e:	429a      	cmp	r2, r3
 8014660:	d8f0      	bhi.n	8014644 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8014662:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014666:	4618      	mov	r0, r3
 8014668:	3710      	adds	r7, #16
 801466a:	46bd      	mov	sp, r7
 801466c:	bd80      	pop	{r7, pc}
	...

08014670 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8014670:	b580      	push	{r7, lr}
 8014672:	b082      	sub	sp, #8
 8014674:	af00      	add	r7, sp, #0
 8014676:	4603      	mov	r3, r0
 8014678:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801467a:	4b0b      	ldr	r3, [pc, #44]	; (80146a8 <SD_CheckStatus+0x38>)
 801467c:	2201      	movs	r2, #1
 801467e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8014680:	f7ff ff7e 	bl	8014580 <BSP_SD_GetCardState>
 8014684:	4603      	mov	r3, r0
 8014686:	2b00      	cmp	r3, #0
 8014688:	d107      	bne.n	801469a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801468a:	4b07      	ldr	r3, [pc, #28]	; (80146a8 <SD_CheckStatus+0x38>)
 801468c:	781b      	ldrb	r3, [r3, #0]
 801468e:	b2db      	uxtb	r3, r3
 8014690:	f023 0301 	bic.w	r3, r3, #1
 8014694:	b2da      	uxtb	r2, r3
 8014696:	4b04      	ldr	r3, [pc, #16]	; (80146a8 <SD_CheckStatus+0x38>)
 8014698:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801469a:	4b03      	ldr	r3, [pc, #12]	; (80146a8 <SD_CheckStatus+0x38>)
 801469c:	781b      	ldrb	r3, [r3, #0]
 801469e:	b2db      	uxtb	r3, r3
}
 80146a0:	4618      	mov	r0, r3
 80146a2:	3708      	adds	r7, #8
 80146a4:	46bd      	mov	sp, r7
 80146a6:	bd80      	pop	{r7, pc}
 80146a8:	2400000d 	.word	0x2400000d

080146ac <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80146ac:	b580      	push	{r7, lr}
 80146ae:	b082      	sub	sp, #8
 80146b0:	af00      	add	r7, sp, #0
 80146b2:	4603      	mov	r3, r0
 80146b4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80146b6:	f7ff ff09 	bl	80144cc <BSP_SD_Init>
 80146ba:	4603      	mov	r3, r0
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d107      	bne.n	80146d0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80146c0:	79fb      	ldrb	r3, [r7, #7]
 80146c2:	4618      	mov	r0, r3
 80146c4:	f7ff ffd4 	bl	8014670 <SD_CheckStatus>
 80146c8:	4603      	mov	r3, r0
 80146ca:	461a      	mov	r2, r3
 80146cc:	4b04      	ldr	r3, [pc, #16]	; (80146e0 <SD_initialize+0x34>)
 80146ce:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80146d0:	4b03      	ldr	r3, [pc, #12]	; (80146e0 <SD_initialize+0x34>)
 80146d2:	781b      	ldrb	r3, [r3, #0]
 80146d4:	b2db      	uxtb	r3, r3
}
 80146d6:	4618      	mov	r0, r3
 80146d8:	3708      	adds	r7, #8
 80146da:	46bd      	mov	sp, r7
 80146dc:	bd80      	pop	{r7, pc}
 80146de:	bf00      	nop
 80146e0:	2400000d 	.word	0x2400000d

080146e4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80146e4:	b580      	push	{r7, lr}
 80146e6:	b082      	sub	sp, #8
 80146e8:	af00      	add	r7, sp, #0
 80146ea:	4603      	mov	r3, r0
 80146ec:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80146ee:	79fb      	ldrb	r3, [r7, #7]
 80146f0:	4618      	mov	r0, r3
 80146f2:	f7ff ffbd 	bl	8014670 <SD_CheckStatus>
 80146f6:	4603      	mov	r3, r0
}
 80146f8:	4618      	mov	r0, r3
 80146fa:	3708      	adds	r7, #8
 80146fc:	46bd      	mov	sp, r7
 80146fe:	bd80      	pop	{r7, pc}

08014700 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8014700:	b580      	push	{r7, lr}
 8014702:	b086      	sub	sp, #24
 8014704:	af00      	add	r7, sp, #0
 8014706:	60b9      	str	r1, [r7, #8]
 8014708:	607a      	str	r2, [r7, #4]
 801470a:	603b      	str	r3, [r7, #0]
 801470c:	4603      	mov	r3, r0
 801470e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014710:	2301      	movs	r3, #1
 8014712:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014714:	f247 5030 	movw	r0, #30000	; 0x7530
 8014718:	f7ff ff8c 	bl	8014634 <SD_CheckStatusWithTimeout>
 801471c:	4603      	mov	r3, r0
 801471e:	2b00      	cmp	r3, #0
 8014720:	da01      	bge.n	8014726 <SD_read+0x26>
  {
    return res;
 8014722:	7dfb      	ldrb	r3, [r7, #23]
 8014724:	e03b      	b.n	801479e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8014726:	683a      	ldr	r2, [r7, #0]
 8014728:	6879      	ldr	r1, [r7, #4]
 801472a:	68b8      	ldr	r0, [r7, #8]
 801472c:	f7ff fef4 	bl	8014518 <BSP_SD_ReadBlocks_DMA>
 8014730:	4603      	mov	r3, r0
 8014732:	2b00      	cmp	r3, #0
 8014734:	d132      	bne.n	801479c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8014736:	4b1c      	ldr	r3, [pc, #112]	; (80147a8 <SD_read+0xa8>)
 8014738:	2200      	movs	r2, #0
 801473a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 801473c:	f7ef fbb6 	bl	8003eac <HAL_GetTick>
 8014740:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8014742:	bf00      	nop
 8014744:	4b18      	ldr	r3, [pc, #96]	; (80147a8 <SD_read+0xa8>)
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d108      	bne.n	801475e <SD_read+0x5e>
 801474c:	f7ef fbae 	bl	8003eac <HAL_GetTick>
 8014750:	4602      	mov	r2, r0
 8014752:	693b      	ldr	r3, [r7, #16]
 8014754:	1ad3      	subs	r3, r2, r3
 8014756:	f247 522f 	movw	r2, #29999	; 0x752f
 801475a:	4293      	cmp	r3, r2
 801475c:	d9f2      	bls.n	8014744 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 801475e:	4b12      	ldr	r3, [pc, #72]	; (80147a8 <SD_read+0xa8>)
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d102      	bne.n	801476c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8014766:	2301      	movs	r3, #1
 8014768:	75fb      	strb	r3, [r7, #23]
 801476a:	e017      	b.n	801479c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 801476c:	4b0e      	ldr	r3, [pc, #56]	; (80147a8 <SD_read+0xa8>)
 801476e:	2200      	movs	r2, #0
 8014770:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8014772:	f7ef fb9b 	bl	8003eac <HAL_GetTick>
 8014776:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014778:	e007      	b.n	801478a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801477a:	f7ff ff01 	bl	8014580 <BSP_SD_GetCardState>
 801477e:	4603      	mov	r3, r0
 8014780:	2b00      	cmp	r3, #0
 8014782:	d102      	bne.n	801478a <SD_read+0x8a>
          {
            res = RES_OK;
 8014784:	2300      	movs	r3, #0
 8014786:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8014788:	e008      	b.n	801479c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801478a:	f7ef fb8f 	bl	8003eac <HAL_GetTick>
 801478e:	4602      	mov	r2, r0
 8014790:	693b      	ldr	r3, [r7, #16]
 8014792:	1ad3      	subs	r3, r2, r3
 8014794:	f247 522f 	movw	r2, #29999	; 0x752f
 8014798:	4293      	cmp	r3, r2
 801479a:	d9ee      	bls.n	801477a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 801479c:	7dfb      	ldrb	r3, [r7, #23]
}
 801479e:	4618      	mov	r0, r3
 80147a0:	3718      	adds	r7, #24
 80147a2:	46bd      	mov	sp, r7
 80147a4:	bd80      	pop	{r7, pc}
 80147a6:	bf00      	nop
 80147a8:	2400170c 	.word	0x2400170c

080147ac <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80147ac:	b580      	push	{r7, lr}
 80147ae:	b086      	sub	sp, #24
 80147b0:	af00      	add	r7, sp, #0
 80147b2:	60b9      	str	r1, [r7, #8]
 80147b4:	607a      	str	r2, [r7, #4]
 80147b6:	603b      	str	r3, [r7, #0]
 80147b8:	4603      	mov	r3, r0
 80147ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80147bc:	2301      	movs	r3, #1
 80147be:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80147c0:	4b24      	ldr	r3, [pc, #144]	; (8014854 <SD_write+0xa8>)
 80147c2:	2200      	movs	r2, #0
 80147c4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80147c6:	f247 5030 	movw	r0, #30000	; 0x7530
 80147ca:	f7ff ff33 	bl	8014634 <SD_CheckStatusWithTimeout>
 80147ce:	4603      	mov	r3, r0
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	da01      	bge.n	80147d8 <SD_write+0x2c>
  {
    return res;
 80147d4:	7dfb      	ldrb	r3, [r7, #23]
 80147d6:	e038      	b.n	801484a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80147d8:	683a      	ldr	r2, [r7, #0]
 80147da:	6879      	ldr	r1, [r7, #4]
 80147dc:	68b8      	ldr	r0, [r7, #8]
 80147de:	f7ff feb5 	bl	801454c <BSP_SD_WriteBlocks_DMA>
 80147e2:	4603      	mov	r3, r0
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d12f      	bne.n	8014848 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80147e8:	f7ef fb60 	bl	8003eac <HAL_GetTick>
 80147ec:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80147ee:	bf00      	nop
 80147f0:	4b18      	ldr	r3, [pc, #96]	; (8014854 <SD_write+0xa8>)
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d108      	bne.n	801480a <SD_write+0x5e>
 80147f8:	f7ef fb58 	bl	8003eac <HAL_GetTick>
 80147fc:	4602      	mov	r2, r0
 80147fe:	693b      	ldr	r3, [r7, #16]
 8014800:	1ad3      	subs	r3, r2, r3
 8014802:	f247 522f 	movw	r2, #29999	; 0x752f
 8014806:	4293      	cmp	r3, r2
 8014808:	d9f2      	bls.n	80147f0 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 801480a:	4b12      	ldr	r3, [pc, #72]	; (8014854 <SD_write+0xa8>)
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	2b00      	cmp	r3, #0
 8014810:	d102      	bne.n	8014818 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8014812:	2301      	movs	r3, #1
 8014814:	75fb      	strb	r3, [r7, #23]
 8014816:	e017      	b.n	8014848 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8014818:	4b0e      	ldr	r3, [pc, #56]	; (8014854 <SD_write+0xa8>)
 801481a:	2200      	movs	r2, #0
 801481c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801481e:	f7ef fb45 	bl	8003eac <HAL_GetTick>
 8014822:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014824:	e007      	b.n	8014836 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014826:	f7ff feab 	bl	8014580 <BSP_SD_GetCardState>
 801482a:	4603      	mov	r3, r0
 801482c:	2b00      	cmp	r3, #0
 801482e:	d102      	bne.n	8014836 <SD_write+0x8a>
          {
            res = RES_OK;
 8014830:	2300      	movs	r3, #0
 8014832:	75fb      	strb	r3, [r7, #23]
            break;
 8014834:	e008      	b.n	8014848 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014836:	f7ef fb39 	bl	8003eac <HAL_GetTick>
 801483a:	4602      	mov	r2, r0
 801483c:	693b      	ldr	r3, [r7, #16]
 801483e:	1ad3      	subs	r3, r2, r3
 8014840:	f247 522f 	movw	r2, #29999	; 0x752f
 8014844:	4293      	cmp	r3, r2
 8014846:	d9ee      	bls.n	8014826 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8014848:	7dfb      	ldrb	r3, [r7, #23]
}
 801484a:	4618      	mov	r0, r3
 801484c:	3718      	adds	r7, #24
 801484e:	46bd      	mov	sp, r7
 8014850:	bd80      	pop	{r7, pc}
 8014852:	bf00      	nop
 8014854:	24001708 	.word	0x24001708

08014858 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8014858:	b580      	push	{r7, lr}
 801485a:	b08c      	sub	sp, #48	; 0x30
 801485c:	af00      	add	r7, sp, #0
 801485e:	4603      	mov	r3, r0
 8014860:	603a      	str	r2, [r7, #0]
 8014862:	71fb      	strb	r3, [r7, #7]
 8014864:	460b      	mov	r3, r1
 8014866:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8014868:	2301      	movs	r3, #1
 801486a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801486e:	4b25      	ldr	r3, [pc, #148]	; (8014904 <SD_ioctl+0xac>)
 8014870:	781b      	ldrb	r3, [r3, #0]
 8014872:	b2db      	uxtb	r3, r3
 8014874:	f003 0301 	and.w	r3, r3, #1
 8014878:	2b00      	cmp	r3, #0
 801487a:	d001      	beq.n	8014880 <SD_ioctl+0x28>
 801487c:	2303      	movs	r3, #3
 801487e:	e03c      	b.n	80148fa <SD_ioctl+0xa2>

  switch (cmd)
 8014880:	79bb      	ldrb	r3, [r7, #6]
 8014882:	2b03      	cmp	r3, #3
 8014884:	d834      	bhi.n	80148f0 <SD_ioctl+0x98>
 8014886:	a201      	add	r2, pc, #4	; (adr r2, 801488c <SD_ioctl+0x34>)
 8014888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801488c:	0801489d 	.word	0x0801489d
 8014890:	080148a5 	.word	0x080148a5
 8014894:	080148bd 	.word	0x080148bd
 8014898:	080148d7 	.word	0x080148d7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801489c:	2300      	movs	r3, #0
 801489e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80148a2:	e028      	b.n	80148f6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80148a4:	f107 0308 	add.w	r3, r7, #8
 80148a8:	4618      	mov	r0, r3
 80148aa:	f7ff fe79 	bl	80145a0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80148ae:	6a3a      	ldr	r2, [r7, #32]
 80148b0:	683b      	ldr	r3, [r7, #0]
 80148b2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80148b4:	2300      	movs	r3, #0
 80148b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80148ba:	e01c      	b.n	80148f6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80148bc:	f107 0308 	add.w	r3, r7, #8
 80148c0:	4618      	mov	r0, r3
 80148c2:	f7ff fe6d 	bl	80145a0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80148c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148c8:	b29a      	uxth	r2, r3
 80148ca:	683b      	ldr	r3, [r7, #0]
 80148cc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80148ce:	2300      	movs	r3, #0
 80148d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80148d4:	e00f      	b.n	80148f6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80148d6:	f107 0308 	add.w	r3, r7, #8
 80148da:	4618      	mov	r0, r3
 80148dc:	f7ff fe60 	bl	80145a0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80148e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148e2:	0a5a      	lsrs	r2, r3, #9
 80148e4:	683b      	ldr	r3, [r7, #0]
 80148e6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80148e8:	2300      	movs	r3, #0
 80148ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80148ee:	e002      	b.n	80148f6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80148f0:	2304      	movs	r3, #4
 80148f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80148f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80148fa:	4618      	mov	r0, r3
 80148fc:	3730      	adds	r7, #48	; 0x30
 80148fe:	46bd      	mov	sp, r7
 8014900:	bd80      	pop	{r7, pc}
 8014902:	bf00      	nop
 8014904:	2400000d 	.word	0x2400000d

08014908 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8014908:	b480      	push	{r7}
 801490a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 801490c:	4b03      	ldr	r3, [pc, #12]	; (801491c <BSP_SD_WriteCpltCallback+0x14>)
 801490e:	2201      	movs	r2, #1
 8014910:	601a      	str	r2, [r3, #0]
}
 8014912:	bf00      	nop
 8014914:	46bd      	mov	sp, r7
 8014916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801491a:	4770      	bx	lr
 801491c:	24001708 	.word	0x24001708

08014920 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8014920:	b480      	push	{r7}
 8014922:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8014924:	4b03      	ldr	r3, [pc, #12]	; (8014934 <BSP_SD_ReadCpltCallback+0x14>)
 8014926:	2201      	movs	r2, #1
 8014928:	601a      	str	r2, [r3, #0]
}
 801492a:	bf00      	nop
 801492c:	46bd      	mov	sp, r7
 801492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014932:	4770      	bx	lr
 8014934:	2400170c 	.word	0x2400170c

08014938 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014938:	b580      	push	{r7, lr}
 801493a:	b084      	sub	sp, #16
 801493c:	af00      	add	r7, sp, #0
 801493e:	6078      	str	r0, [r7, #4]
 8014940:	460b      	mov	r3, r1
 8014942:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014944:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8014948:	f002 fd00 	bl	801734c <USBD_static_malloc>
 801494c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	2b00      	cmp	r3, #0
 8014952:	d109      	bne.n	8014968 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	32b0      	adds	r2, #176	; 0xb0
 801495e:	2100      	movs	r1, #0
 8014960:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8014964:	2302      	movs	r3, #2
 8014966:	e0d4      	b.n	8014b12 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8014968:	f44f 7207 	mov.w	r2, #540	; 0x21c
 801496c:	2100      	movs	r1, #0
 801496e:	68f8      	ldr	r0, [r7, #12]
 8014970:	f003 fcc3 	bl	80182fa <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	32b0      	adds	r2, #176	; 0xb0
 801497e:	68f9      	ldr	r1, [r7, #12]
 8014980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	32b0      	adds	r2, #176	; 0xb0
 801498e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	7c1b      	ldrb	r3, [r3, #16]
 801499c:	2b00      	cmp	r3, #0
 801499e:	d138      	bne.n	8014a12 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80149a0:	4b5e      	ldr	r3, [pc, #376]	; (8014b1c <USBD_CDC_Init+0x1e4>)
 80149a2:	7819      	ldrb	r1, [r3, #0]
 80149a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80149a8:	2202      	movs	r2, #2
 80149aa:	6878      	ldr	r0, [r7, #4]
 80149ac:	f002 fbab 	bl	8017106 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80149b0:	4b5a      	ldr	r3, [pc, #360]	; (8014b1c <USBD_CDC_Init+0x1e4>)
 80149b2:	781b      	ldrb	r3, [r3, #0]
 80149b4:	f003 020f 	and.w	r2, r3, #15
 80149b8:	6879      	ldr	r1, [r7, #4]
 80149ba:	4613      	mov	r3, r2
 80149bc:	009b      	lsls	r3, r3, #2
 80149be:	4413      	add	r3, r2
 80149c0:	009b      	lsls	r3, r3, #2
 80149c2:	440b      	add	r3, r1
 80149c4:	3324      	adds	r3, #36	; 0x24
 80149c6:	2201      	movs	r2, #1
 80149c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80149ca:	4b55      	ldr	r3, [pc, #340]	; (8014b20 <USBD_CDC_Init+0x1e8>)
 80149cc:	7819      	ldrb	r1, [r3, #0]
 80149ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80149d2:	2202      	movs	r2, #2
 80149d4:	6878      	ldr	r0, [r7, #4]
 80149d6:	f002 fb96 	bl	8017106 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80149da:	4b51      	ldr	r3, [pc, #324]	; (8014b20 <USBD_CDC_Init+0x1e8>)
 80149dc:	781b      	ldrb	r3, [r3, #0]
 80149de:	f003 020f 	and.w	r2, r3, #15
 80149e2:	6879      	ldr	r1, [r7, #4]
 80149e4:	4613      	mov	r3, r2
 80149e6:	009b      	lsls	r3, r3, #2
 80149e8:	4413      	add	r3, r2
 80149ea:	009b      	lsls	r3, r3, #2
 80149ec:	440b      	add	r3, r1
 80149ee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80149f2:	2201      	movs	r2, #1
 80149f4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80149f6:	4b4b      	ldr	r3, [pc, #300]	; (8014b24 <USBD_CDC_Init+0x1ec>)
 80149f8:	781b      	ldrb	r3, [r3, #0]
 80149fa:	f003 020f 	and.w	r2, r3, #15
 80149fe:	6879      	ldr	r1, [r7, #4]
 8014a00:	4613      	mov	r3, r2
 8014a02:	009b      	lsls	r3, r3, #2
 8014a04:	4413      	add	r3, r2
 8014a06:	009b      	lsls	r3, r3, #2
 8014a08:	440b      	add	r3, r1
 8014a0a:	3326      	adds	r3, #38	; 0x26
 8014a0c:	2210      	movs	r2, #16
 8014a0e:	801a      	strh	r2, [r3, #0]
 8014a10:	e035      	b.n	8014a7e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014a12:	4b42      	ldr	r3, [pc, #264]	; (8014b1c <USBD_CDC_Init+0x1e4>)
 8014a14:	7819      	ldrb	r1, [r3, #0]
 8014a16:	2340      	movs	r3, #64	; 0x40
 8014a18:	2202      	movs	r2, #2
 8014a1a:	6878      	ldr	r0, [r7, #4]
 8014a1c:	f002 fb73 	bl	8017106 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014a20:	4b3e      	ldr	r3, [pc, #248]	; (8014b1c <USBD_CDC_Init+0x1e4>)
 8014a22:	781b      	ldrb	r3, [r3, #0]
 8014a24:	f003 020f 	and.w	r2, r3, #15
 8014a28:	6879      	ldr	r1, [r7, #4]
 8014a2a:	4613      	mov	r3, r2
 8014a2c:	009b      	lsls	r3, r3, #2
 8014a2e:	4413      	add	r3, r2
 8014a30:	009b      	lsls	r3, r3, #2
 8014a32:	440b      	add	r3, r1
 8014a34:	3324      	adds	r3, #36	; 0x24
 8014a36:	2201      	movs	r2, #1
 8014a38:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014a3a:	4b39      	ldr	r3, [pc, #228]	; (8014b20 <USBD_CDC_Init+0x1e8>)
 8014a3c:	7819      	ldrb	r1, [r3, #0]
 8014a3e:	2340      	movs	r3, #64	; 0x40
 8014a40:	2202      	movs	r2, #2
 8014a42:	6878      	ldr	r0, [r7, #4]
 8014a44:	f002 fb5f 	bl	8017106 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014a48:	4b35      	ldr	r3, [pc, #212]	; (8014b20 <USBD_CDC_Init+0x1e8>)
 8014a4a:	781b      	ldrb	r3, [r3, #0]
 8014a4c:	f003 020f 	and.w	r2, r3, #15
 8014a50:	6879      	ldr	r1, [r7, #4]
 8014a52:	4613      	mov	r3, r2
 8014a54:	009b      	lsls	r3, r3, #2
 8014a56:	4413      	add	r3, r2
 8014a58:	009b      	lsls	r3, r3, #2
 8014a5a:	440b      	add	r3, r1
 8014a5c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014a60:	2201      	movs	r2, #1
 8014a62:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014a64:	4b2f      	ldr	r3, [pc, #188]	; (8014b24 <USBD_CDC_Init+0x1ec>)
 8014a66:	781b      	ldrb	r3, [r3, #0]
 8014a68:	f003 020f 	and.w	r2, r3, #15
 8014a6c:	6879      	ldr	r1, [r7, #4]
 8014a6e:	4613      	mov	r3, r2
 8014a70:	009b      	lsls	r3, r3, #2
 8014a72:	4413      	add	r3, r2
 8014a74:	009b      	lsls	r3, r3, #2
 8014a76:	440b      	add	r3, r1
 8014a78:	3326      	adds	r3, #38	; 0x26
 8014a7a:	2210      	movs	r2, #16
 8014a7c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014a7e:	4b29      	ldr	r3, [pc, #164]	; (8014b24 <USBD_CDC_Init+0x1ec>)
 8014a80:	7819      	ldrb	r1, [r3, #0]
 8014a82:	2308      	movs	r3, #8
 8014a84:	2203      	movs	r2, #3
 8014a86:	6878      	ldr	r0, [r7, #4]
 8014a88:	f002 fb3d 	bl	8017106 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8014a8c:	4b25      	ldr	r3, [pc, #148]	; (8014b24 <USBD_CDC_Init+0x1ec>)
 8014a8e:	781b      	ldrb	r3, [r3, #0]
 8014a90:	f003 020f 	and.w	r2, r3, #15
 8014a94:	6879      	ldr	r1, [r7, #4]
 8014a96:	4613      	mov	r3, r2
 8014a98:	009b      	lsls	r3, r3, #2
 8014a9a:	4413      	add	r3, r2
 8014a9c:	009b      	lsls	r3, r3, #2
 8014a9e:	440b      	add	r3, r1
 8014aa0:	3324      	adds	r3, #36	; 0x24
 8014aa2:	2201      	movs	r2, #1
 8014aa4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	2200      	movs	r2, #0
 8014aaa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014ab4:	687a      	ldr	r2, [r7, #4]
 8014ab6:	33b0      	adds	r3, #176	; 0xb0
 8014ab8:	009b      	lsls	r3, r3, #2
 8014aba:	4413      	add	r3, r2
 8014abc:	685b      	ldr	r3, [r3, #4]
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8014ac2:	68fb      	ldr	r3, [r7, #12]
 8014ac4:	2200      	movs	r2, #0
 8014ac6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8014aca:	68fb      	ldr	r3, [r7, #12]
 8014acc:	2200      	movs	r2, #0
 8014ace:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8014ad2:	68fb      	ldr	r3, [r7, #12]
 8014ad4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d101      	bne.n	8014ae0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8014adc:	2302      	movs	r3, #2
 8014ade:	e018      	b.n	8014b12 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	7c1b      	ldrb	r3, [r3, #16]
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d10a      	bne.n	8014afe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014ae8:	4b0d      	ldr	r3, [pc, #52]	; (8014b20 <USBD_CDC_Init+0x1e8>)
 8014aea:	7819      	ldrb	r1, [r3, #0]
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014af2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014af6:	6878      	ldr	r0, [r7, #4]
 8014af8:	f002 fbf4 	bl	80172e4 <USBD_LL_PrepareReceive>
 8014afc:	e008      	b.n	8014b10 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014afe:	4b08      	ldr	r3, [pc, #32]	; (8014b20 <USBD_CDC_Init+0x1e8>)
 8014b00:	7819      	ldrb	r1, [r3, #0]
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014b08:	2340      	movs	r3, #64	; 0x40
 8014b0a:	6878      	ldr	r0, [r7, #4]
 8014b0c:	f002 fbea 	bl	80172e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014b10:	2300      	movs	r3, #0
}
 8014b12:	4618      	mov	r0, r3
 8014b14:	3710      	adds	r7, #16
 8014b16:	46bd      	mov	sp, r7
 8014b18:	bd80      	pop	{r7, pc}
 8014b1a:	bf00      	nop
 8014b1c:	24000097 	.word	0x24000097
 8014b20:	24000098 	.word	0x24000098
 8014b24:	24000099 	.word	0x24000099

08014b28 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014b28:	b580      	push	{r7, lr}
 8014b2a:	b082      	sub	sp, #8
 8014b2c:	af00      	add	r7, sp, #0
 8014b2e:	6078      	str	r0, [r7, #4]
 8014b30:	460b      	mov	r3, r1
 8014b32:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8014b34:	4b3a      	ldr	r3, [pc, #232]	; (8014c20 <USBD_CDC_DeInit+0xf8>)
 8014b36:	781b      	ldrb	r3, [r3, #0]
 8014b38:	4619      	mov	r1, r3
 8014b3a:	6878      	ldr	r0, [r7, #4]
 8014b3c:	f002 fb09 	bl	8017152 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8014b40:	4b37      	ldr	r3, [pc, #220]	; (8014c20 <USBD_CDC_DeInit+0xf8>)
 8014b42:	781b      	ldrb	r3, [r3, #0]
 8014b44:	f003 020f 	and.w	r2, r3, #15
 8014b48:	6879      	ldr	r1, [r7, #4]
 8014b4a:	4613      	mov	r3, r2
 8014b4c:	009b      	lsls	r3, r3, #2
 8014b4e:	4413      	add	r3, r2
 8014b50:	009b      	lsls	r3, r3, #2
 8014b52:	440b      	add	r3, r1
 8014b54:	3324      	adds	r3, #36	; 0x24
 8014b56:	2200      	movs	r2, #0
 8014b58:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8014b5a:	4b32      	ldr	r3, [pc, #200]	; (8014c24 <USBD_CDC_DeInit+0xfc>)
 8014b5c:	781b      	ldrb	r3, [r3, #0]
 8014b5e:	4619      	mov	r1, r3
 8014b60:	6878      	ldr	r0, [r7, #4]
 8014b62:	f002 faf6 	bl	8017152 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8014b66:	4b2f      	ldr	r3, [pc, #188]	; (8014c24 <USBD_CDC_DeInit+0xfc>)
 8014b68:	781b      	ldrb	r3, [r3, #0]
 8014b6a:	f003 020f 	and.w	r2, r3, #15
 8014b6e:	6879      	ldr	r1, [r7, #4]
 8014b70:	4613      	mov	r3, r2
 8014b72:	009b      	lsls	r3, r3, #2
 8014b74:	4413      	add	r3, r2
 8014b76:	009b      	lsls	r3, r3, #2
 8014b78:	440b      	add	r3, r1
 8014b7a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014b7e:	2200      	movs	r2, #0
 8014b80:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8014b82:	4b29      	ldr	r3, [pc, #164]	; (8014c28 <USBD_CDC_DeInit+0x100>)
 8014b84:	781b      	ldrb	r3, [r3, #0]
 8014b86:	4619      	mov	r1, r3
 8014b88:	6878      	ldr	r0, [r7, #4]
 8014b8a:	f002 fae2 	bl	8017152 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8014b8e:	4b26      	ldr	r3, [pc, #152]	; (8014c28 <USBD_CDC_DeInit+0x100>)
 8014b90:	781b      	ldrb	r3, [r3, #0]
 8014b92:	f003 020f 	and.w	r2, r3, #15
 8014b96:	6879      	ldr	r1, [r7, #4]
 8014b98:	4613      	mov	r3, r2
 8014b9a:	009b      	lsls	r3, r3, #2
 8014b9c:	4413      	add	r3, r2
 8014b9e:	009b      	lsls	r3, r3, #2
 8014ba0:	440b      	add	r3, r1
 8014ba2:	3324      	adds	r3, #36	; 0x24
 8014ba4:	2200      	movs	r2, #0
 8014ba6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8014ba8:	4b1f      	ldr	r3, [pc, #124]	; (8014c28 <USBD_CDC_DeInit+0x100>)
 8014baa:	781b      	ldrb	r3, [r3, #0]
 8014bac:	f003 020f 	and.w	r2, r3, #15
 8014bb0:	6879      	ldr	r1, [r7, #4]
 8014bb2:	4613      	mov	r3, r2
 8014bb4:	009b      	lsls	r3, r3, #2
 8014bb6:	4413      	add	r3, r2
 8014bb8:	009b      	lsls	r3, r3, #2
 8014bba:	440b      	add	r3, r1
 8014bbc:	3326      	adds	r3, #38	; 0x26
 8014bbe:	2200      	movs	r2, #0
 8014bc0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	32b0      	adds	r2, #176	; 0xb0
 8014bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d01f      	beq.n	8014c14 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014bda:	687a      	ldr	r2, [r7, #4]
 8014bdc:	33b0      	adds	r3, #176	; 0xb0
 8014bde:	009b      	lsls	r3, r3, #2
 8014be0:	4413      	add	r3, r2
 8014be2:	685b      	ldr	r3, [r3, #4]
 8014be4:	685b      	ldr	r3, [r3, #4]
 8014be6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	32b0      	adds	r2, #176	; 0xb0
 8014bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014bf6:	4618      	mov	r0, r3
 8014bf8:	f002 fbb6 	bl	8017368 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	32b0      	adds	r2, #176	; 0xb0
 8014c06:	2100      	movs	r1, #0
 8014c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	2200      	movs	r2, #0
 8014c10:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014c14:	2300      	movs	r3, #0
}
 8014c16:	4618      	mov	r0, r3
 8014c18:	3708      	adds	r7, #8
 8014c1a:	46bd      	mov	sp, r7
 8014c1c:	bd80      	pop	{r7, pc}
 8014c1e:	bf00      	nop
 8014c20:	24000097 	.word	0x24000097
 8014c24:	24000098 	.word	0x24000098
 8014c28:	24000099 	.word	0x24000099

08014c2c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8014c2c:	b580      	push	{r7, lr}
 8014c2e:	b086      	sub	sp, #24
 8014c30:	af00      	add	r7, sp, #0
 8014c32:	6078      	str	r0, [r7, #4]
 8014c34:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	32b0      	adds	r2, #176	; 0xb0
 8014c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c44:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8014c46:	2300      	movs	r3, #0
 8014c48:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8014c4a:	2300      	movs	r3, #0
 8014c4c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8014c4e:	2300      	movs	r3, #0
 8014c50:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8014c52:	693b      	ldr	r3, [r7, #16]
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d101      	bne.n	8014c5c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8014c58:	2303      	movs	r3, #3
 8014c5a:	e0bf      	b.n	8014ddc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014c5c:	683b      	ldr	r3, [r7, #0]
 8014c5e:	781b      	ldrb	r3, [r3, #0]
 8014c60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d050      	beq.n	8014d0a <USBD_CDC_Setup+0xde>
 8014c68:	2b20      	cmp	r3, #32
 8014c6a:	f040 80af 	bne.w	8014dcc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8014c6e:	683b      	ldr	r3, [r7, #0]
 8014c70:	88db      	ldrh	r3, [r3, #6]
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d03a      	beq.n	8014cec <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8014c76:	683b      	ldr	r3, [r7, #0]
 8014c78:	781b      	ldrb	r3, [r3, #0]
 8014c7a:	b25b      	sxtb	r3, r3
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	da1b      	bge.n	8014cb8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014c86:	687a      	ldr	r2, [r7, #4]
 8014c88:	33b0      	adds	r3, #176	; 0xb0
 8014c8a:	009b      	lsls	r3, r3, #2
 8014c8c:	4413      	add	r3, r2
 8014c8e:	685b      	ldr	r3, [r3, #4]
 8014c90:	689b      	ldr	r3, [r3, #8]
 8014c92:	683a      	ldr	r2, [r7, #0]
 8014c94:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8014c96:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014c98:	683a      	ldr	r2, [r7, #0]
 8014c9a:	88d2      	ldrh	r2, [r2, #6]
 8014c9c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8014c9e:	683b      	ldr	r3, [r7, #0]
 8014ca0:	88db      	ldrh	r3, [r3, #6]
 8014ca2:	2b07      	cmp	r3, #7
 8014ca4:	bf28      	it	cs
 8014ca6:	2307      	movcs	r3, #7
 8014ca8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8014caa:	693b      	ldr	r3, [r7, #16]
 8014cac:	89fa      	ldrh	r2, [r7, #14]
 8014cae:	4619      	mov	r1, r3
 8014cb0:	6878      	ldr	r0, [r7, #4]
 8014cb2:	f001 fd89 	bl	80167c8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8014cb6:	e090      	b.n	8014dda <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8014cb8:	683b      	ldr	r3, [r7, #0]
 8014cba:	785a      	ldrb	r2, [r3, #1]
 8014cbc:	693b      	ldr	r3, [r7, #16]
 8014cbe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8014cc2:	683b      	ldr	r3, [r7, #0]
 8014cc4:	88db      	ldrh	r3, [r3, #6]
 8014cc6:	2b3f      	cmp	r3, #63	; 0x3f
 8014cc8:	d803      	bhi.n	8014cd2 <USBD_CDC_Setup+0xa6>
 8014cca:	683b      	ldr	r3, [r7, #0]
 8014ccc:	88db      	ldrh	r3, [r3, #6]
 8014cce:	b2da      	uxtb	r2, r3
 8014cd0:	e000      	b.n	8014cd4 <USBD_CDC_Setup+0xa8>
 8014cd2:	2240      	movs	r2, #64	; 0x40
 8014cd4:	693b      	ldr	r3, [r7, #16]
 8014cd6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8014cda:	6939      	ldr	r1, [r7, #16]
 8014cdc:	693b      	ldr	r3, [r7, #16]
 8014cde:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8014ce2:	461a      	mov	r2, r3
 8014ce4:	6878      	ldr	r0, [r7, #4]
 8014ce6:	f001 fd9b 	bl	8016820 <USBD_CtlPrepareRx>
      break;
 8014cea:	e076      	b.n	8014dda <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014cf2:	687a      	ldr	r2, [r7, #4]
 8014cf4:	33b0      	adds	r3, #176	; 0xb0
 8014cf6:	009b      	lsls	r3, r3, #2
 8014cf8:	4413      	add	r3, r2
 8014cfa:	685b      	ldr	r3, [r3, #4]
 8014cfc:	689b      	ldr	r3, [r3, #8]
 8014cfe:	683a      	ldr	r2, [r7, #0]
 8014d00:	7850      	ldrb	r0, [r2, #1]
 8014d02:	2200      	movs	r2, #0
 8014d04:	6839      	ldr	r1, [r7, #0]
 8014d06:	4798      	blx	r3
      break;
 8014d08:	e067      	b.n	8014dda <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014d0a:	683b      	ldr	r3, [r7, #0]
 8014d0c:	785b      	ldrb	r3, [r3, #1]
 8014d0e:	2b0b      	cmp	r3, #11
 8014d10:	d851      	bhi.n	8014db6 <USBD_CDC_Setup+0x18a>
 8014d12:	a201      	add	r2, pc, #4	; (adr r2, 8014d18 <USBD_CDC_Setup+0xec>)
 8014d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d18:	08014d49 	.word	0x08014d49
 8014d1c:	08014dc5 	.word	0x08014dc5
 8014d20:	08014db7 	.word	0x08014db7
 8014d24:	08014db7 	.word	0x08014db7
 8014d28:	08014db7 	.word	0x08014db7
 8014d2c:	08014db7 	.word	0x08014db7
 8014d30:	08014db7 	.word	0x08014db7
 8014d34:	08014db7 	.word	0x08014db7
 8014d38:	08014db7 	.word	0x08014db7
 8014d3c:	08014db7 	.word	0x08014db7
 8014d40:	08014d73 	.word	0x08014d73
 8014d44:	08014d9d 	.word	0x08014d9d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014d4e:	b2db      	uxtb	r3, r3
 8014d50:	2b03      	cmp	r3, #3
 8014d52:	d107      	bne.n	8014d64 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014d54:	f107 030a 	add.w	r3, r7, #10
 8014d58:	2202      	movs	r2, #2
 8014d5a:	4619      	mov	r1, r3
 8014d5c:	6878      	ldr	r0, [r7, #4]
 8014d5e:	f001 fd33 	bl	80167c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014d62:	e032      	b.n	8014dca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014d64:	6839      	ldr	r1, [r7, #0]
 8014d66:	6878      	ldr	r0, [r7, #4]
 8014d68:	f001 fcbd 	bl	80166e6 <USBD_CtlError>
            ret = USBD_FAIL;
 8014d6c:	2303      	movs	r3, #3
 8014d6e:	75fb      	strb	r3, [r7, #23]
          break;
 8014d70:	e02b      	b.n	8014dca <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014d78:	b2db      	uxtb	r3, r3
 8014d7a:	2b03      	cmp	r3, #3
 8014d7c:	d107      	bne.n	8014d8e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014d7e:	f107 030d 	add.w	r3, r7, #13
 8014d82:	2201      	movs	r2, #1
 8014d84:	4619      	mov	r1, r3
 8014d86:	6878      	ldr	r0, [r7, #4]
 8014d88:	f001 fd1e 	bl	80167c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014d8c:	e01d      	b.n	8014dca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014d8e:	6839      	ldr	r1, [r7, #0]
 8014d90:	6878      	ldr	r0, [r7, #4]
 8014d92:	f001 fca8 	bl	80166e6 <USBD_CtlError>
            ret = USBD_FAIL;
 8014d96:	2303      	movs	r3, #3
 8014d98:	75fb      	strb	r3, [r7, #23]
          break;
 8014d9a:	e016      	b.n	8014dca <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014da2:	b2db      	uxtb	r3, r3
 8014da4:	2b03      	cmp	r3, #3
 8014da6:	d00f      	beq.n	8014dc8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8014da8:	6839      	ldr	r1, [r7, #0]
 8014daa:	6878      	ldr	r0, [r7, #4]
 8014dac:	f001 fc9b 	bl	80166e6 <USBD_CtlError>
            ret = USBD_FAIL;
 8014db0:	2303      	movs	r3, #3
 8014db2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014db4:	e008      	b.n	8014dc8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8014db6:	6839      	ldr	r1, [r7, #0]
 8014db8:	6878      	ldr	r0, [r7, #4]
 8014dba:	f001 fc94 	bl	80166e6 <USBD_CtlError>
          ret = USBD_FAIL;
 8014dbe:	2303      	movs	r3, #3
 8014dc0:	75fb      	strb	r3, [r7, #23]
          break;
 8014dc2:	e002      	b.n	8014dca <USBD_CDC_Setup+0x19e>
          break;
 8014dc4:	bf00      	nop
 8014dc6:	e008      	b.n	8014dda <USBD_CDC_Setup+0x1ae>
          break;
 8014dc8:	bf00      	nop
      }
      break;
 8014dca:	e006      	b.n	8014dda <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8014dcc:	6839      	ldr	r1, [r7, #0]
 8014dce:	6878      	ldr	r0, [r7, #4]
 8014dd0:	f001 fc89 	bl	80166e6 <USBD_CtlError>
      ret = USBD_FAIL;
 8014dd4:	2303      	movs	r3, #3
 8014dd6:	75fb      	strb	r3, [r7, #23]
      break;
 8014dd8:	bf00      	nop
  }

  return (uint8_t)ret;
 8014dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8014ddc:	4618      	mov	r0, r3
 8014dde:	3718      	adds	r7, #24
 8014de0:	46bd      	mov	sp, r7
 8014de2:	bd80      	pop	{r7, pc}

08014de4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014de4:	b580      	push	{r7, lr}
 8014de6:	b084      	sub	sp, #16
 8014de8:	af00      	add	r7, sp, #0
 8014dea:	6078      	str	r0, [r7, #4]
 8014dec:	460b      	mov	r3, r1
 8014dee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014df6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	32b0      	adds	r2, #176	; 0xb0
 8014e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d101      	bne.n	8014e0e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8014e0a:	2303      	movs	r3, #3
 8014e0c:	e065      	b.n	8014eda <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	32b0      	adds	r2, #176	; 0xb0
 8014e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e1c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014e1e:	78fb      	ldrb	r3, [r7, #3]
 8014e20:	f003 020f 	and.w	r2, r3, #15
 8014e24:	6879      	ldr	r1, [r7, #4]
 8014e26:	4613      	mov	r3, r2
 8014e28:	009b      	lsls	r3, r3, #2
 8014e2a:	4413      	add	r3, r2
 8014e2c:	009b      	lsls	r3, r3, #2
 8014e2e:	440b      	add	r3, r1
 8014e30:	3318      	adds	r3, #24
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d02f      	beq.n	8014e98 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8014e38:	78fb      	ldrb	r3, [r7, #3]
 8014e3a:	f003 020f 	and.w	r2, r3, #15
 8014e3e:	6879      	ldr	r1, [r7, #4]
 8014e40:	4613      	mov	r3, r2
 8014e42:	009b      	lsls	r3, r3, #2
 8014e44:	4413      	add	r3, r2
 8014e46:	009b      	lsls	r3, r3, #2
 8014e48:	440b      	add	r3, r1
 8014e4a:	3318      	adds	r3, #24
 8014e4c:	681a      	ldr	r2, [r3, #0]
 8014e4e:	78fb      	ldrb	r3, [r7, #3]
 8014e50:	f003 010f 	and.w	r1, r3, #15
 8014e54:	68f8      	ldr	r0, [r7, #12]
 8014e56:	460b      	mov	r3, r1
 8014e58:	00db      	lsls	r3, r3, #3
 8014e5a:	440b      	add	r3, r1
 8014e5c:	009b      	lsls	r3, r3, #2
 8014e5e:	4403      	add	r3, r0
 8014e60:	3344      	adds	r3, #68	; 0x44
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	fbb2 f1f3 	udiv	r1, r2, r3
 8014e68:	fb01 f303 	mul.w	r3, r1, r3
 8014e6c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d112      	bne.n	8014e98 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8014e72:	78fb      	ldrb	r3, [r7, #3]
 8014e74:	f003 020f 	and.w	r2, r3, #15
 8014e78:	6879      	ldr	r1, [r7, #4]
 8014e7a:	4613      	mov	r3, r2
 8014e7c:	009b      	lsls	r3, r3, #2
 8014e7e:	4413      	add	r3, r2
 8014e80:	009b      	lsls	r3, r3, #2
 8014e82:	440b      	add	r3, r1
 8014e84:	3318      	adds	r3, #24
 8014e86:	2200      	movs	r2, #0
 8014e88:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8014e8a:	78f9      	ldrb	r1, [r7, #3]
 8014e8c:	2300      	movs	r3, #0
 8014e8e:	2200      	movs	r2, #0
 8014e90:	6878      	ldr	r0, [r7, #4]
 8014e92:	f002 fa06 	bl	80172a2 <USBD_LL_Transmit>
 8014e96:	e01f      	b.n	8014ed8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8014e98:	68bb      	ldr	r3, [r7, #8]
 8014e9a:	2200      	movs	r2, #0
 8014e9c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014ea6:	687a      	ldr	r2, [r7, #4]
 8014ea8:	33b0      	adds	r3, #176	; 0xb0
 8014eaa:	009b      	lsls	r3, r3, #2
 8014eac:	4413      	add	r3, r2
 8014eae:	685b      	ldr	r3, [r3, #4]
 8014eb0:	691b      	ldr	r3, [r3, #16]
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d010      	beq.n	8014ed8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014ebc:	687a      	ldr	r2, [r7, #4]
 8014ebe:	33b0      	adds	r3, #176	; 0xb0
 8014ec0:	009b      	lsls	r3, r3, #2
 8014ec2:	4413      	add	r3, r2
 8014ec4:	685b      	ldr	r3, [r3, #4]
 8014ec6:	691b      	ldr	r3, [r3, #16]
 8014ec8:	68ba      	ldr	r2, [r7, #8]
 8014eca:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8014ece:	68ba      	ldr	r2, [r7, #8]
 8014ed0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8014ed4:	78fa      	ldrb	r2, [r7, #3]
 8014ed6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8014ed8:	2300      	movs	r3, #0
}
 8014eda:	4618      	mov	r0, r3
 8014edc:	3710      	adds	r7, #16
 8014ede:	46bd      	mov	sp, r7
 8014ee0:	bd80      	pop	{r7, pc}

08014ee2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014ee2:	b580      	push	{r7, lr}
 8014ee4:	b084      	sub	sp, #16
 8014ee6:	af00      	add	r7, sp, #0
 8014ee8:	6078      	str	r0, [r7, #4]
 8014eea:	460b      	mov	r3, r1
 8014eec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	32b0      	adds	r2, #176	; 0xb0
 8014ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014efc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	32b0      	adds	r2, #176	; 0xb0
 8014f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d101      	bne.n	8014f14 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8014f10:	2303      	movs	r3, #3
 8014f12:	e01a      	b.n	8014f4a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014f14:	78fb      	ldrb	r3, [r7, #3]
 8014f16:	4619      	mov	r1, r3
 8014f18:	6878      	ldr	r0, [r7, #4]
 8014f1a:	f002 fa04 	bl	8017326 <USBD_LL_GetRxDataSize>
 8014f1e:	4602      	mov	r2, r0
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014f2c:	687a      	ldr	r2, [r7, #4]
 8014f2e:	33b0      	adds	r3, #176	; 0xb0
 8014f30:	009b      	lsls	r3, r3, #2
 8014f32:	4413      	add	r3, r2
 8014f34:	685b      	ldr	r3, [r3, #4]
 8014f36:	68db      	ldr	r3, [r3, #12]
 8014f38:	68fa      	ldr	r2, [r7, #12]
 8014f3a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8014f3e:	68fa      	ldr	r2, [r7, #12]
 8014f40:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8014f44:	4611      	mov	r1, r2
 8014f46:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8014f48:	2300      	movs	r3, #0
}
 8014f4a:	4618      	mov	r0, r3
 8014f4c:	3710      	adds	r7, #16
 8014f4e:	46bd      	mov	sp, r7
 8014f50:	bd80      	pop	{r7, pc}

08014f52 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014f52:	b580      	push	{r7, lr}
 8014f54:	b084      	sub	sp, #16
 8014f56:	af00      	add	r7, sp, #0
 8014f58:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	32b0      	adds	r2, #176	; 0xb0
 8014f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f68:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d101      	bne.n	8014f74 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014f70:	2303      	movs	r3, #3
 8014f72:	e025      	b.n	8014fc0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014f7a:	687a      	ldr	r2, [r7, #4]
 8014f7c:	33b0      	adds	r3, #176	; 0xb0
 8014f7e:	009b      	lsls	r3, r3, #2
 8014f80:	4413      	add	r3, r2
 8014f82:	685b      	ldr	r3, [r3, #4]
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d01a      	beq.n	8014fbe <USBD_CDC_EP0_RxReady+0x6c>
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8014f8e:	2bff      	cmp	r3, #255	; 0xff
 8014f90:	d015      	beq.n	8014fbe <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014f98:	687a      	ldr	r2, [r7, #4]
 8014f9a:	33b0      	adds	r3, #176	; 0xb0
 8014f9c:	009b      	lsls	r3, r3, #2
 8014f9e:	4413      	add	r3, r2
 8014fa0:	685b      	ldr	r3, [r3, #4]
 8014fa2:	689b      	ldr	r3, [r3, #8]
 8014fa4:	68fa      	ldr	r2, [r7, #12]
 8014fa6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8014faa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8014fac:	68fa      	ldr	r2, [r7, #12]
 8014fae:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014fb2:	b292      	uxth	r2, r2
 8014fb4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	22ff      	movs	r2, #255	; 0xff
 8014fba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8014fbe:	2300      	movs	r3, #0
}
 8014fc0:	4618      	mov	r0, r3
 8014fc2:	3710      	adds	r7, #16
 8014fc4:	46bd      	mov	sp, r7
 8014fc6:	bd80      	pop	{r7, pc}

08014fc8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014fc8:	b580      	push	{r7, lr}
 8014fca:	b086      	sub	sp, #24
 8014fcc:	af00      	add	r7, sp, #0
 8014fce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014fd0:	2182      	movs	r1, #130	; 0x82
 8014fd2:	4818      	ldr	r0, [pc, #96]	; (8015034 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014fd4:	f000 fd4f 	bl	8015a76 <USBD_GetEpDesc>
 8014fd8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014fda:	2101      	movs	r1, #1
 8014fdc:	4815      	ldr	r0, [pc, #84]	; (8015034 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014fde:	f000 fd4a 	bl	8015a76 <USBD_GetEpDesc>
 8014fe2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014fe4:	2181      	movs	r1, #129	; 0x81
 8014fe6:	4813      	ldr	r0, [pc, #76]	; (8015034 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014fe8:	f000 fd45 	bl	8015a76 <USBD_GetEpDesc>
 8014fec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014fee:	697b      	ldr	r3, [r7, #20]
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d002      	beq.n	8014ffa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014ff4:	697b      	ldr	r3, [r7, #20]
 8014ff6:	2210      	movs	r2, #16
 8014ff8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014ffa:	693b      	ldr	r3, [r7, #16]
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d006      	beq.n	801500e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015000:	693b      	ldr	r3, [r7, #16]
 8015002:	2200      	movs	r2, #0
 8015004:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015008:	711a      	strb	r2, [r3, #4]
 801500a:	2200      	movs	r2, #0
 801500c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	2b00      	cmp	r3, #0
 8015012:	d006      	beq.n	8015022 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	2200      	movs	r2, #0
 8015018:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801501c:	711a      	strb	r2, [r3, #4]
 801501e:	2200      	movs	r2, #0
 8015020:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	2243      	movs	r2, #67	; 0x43
 8015026:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015028:	4b02      	ldr	r3, [pc, #8]	; (8015034 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801502a:	4618      	mov	r0, r3
 801502c:	3718      	adds	r7, #24
 801502e:	46bd      	mov	sp, r7
 8015030:	bd80      	pop	{r7, pc}
 8015032:	bf00      	nop
 8015034:	24000054 	.word	0x24000054

08015038 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8015038:	b580      	push	{r7, lr}
 801503a:	b086      	sub	sp, #24
 801503c:	af00      	add	r7, sp, #0
 801503e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015040:	2182      	movs	r1, #130	; 0x82
 8015042:	4818      	ldr	r0, [pc, #96]	; (80150a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015044:	f000 fd17 	bl	8015a76 <USBD_GetEpDesc>
 8015048:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801504a:	2101      	movs	r1, #1
 801504c:	4815      	ldr	r0, [pc, #84]	; (80150a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801504e:	f000 fd12 	bl	8015a76 <USBD_GetEpDesc>
 8015052:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015054:	2181      	movs	r1, #129	; 0x81
 8015056:	4813      	ldr	r0, [pc, #76]	; (80150a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015058:	f000 fd0d 	bl	8015a76 <USBD_GetEpDesc>
 801505c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801505e:	697b      	ldr	r3, [r7, #20]
 8015060:	2b00      	cmp	r3, #0
 8015062:	d002      	beq.n	801506a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8015064:	697b      	ldr	r3, [r7, #20]
 8015066:	2210      	movs	r2, #16
 8015068:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801506a:	693b      	ldr	r3, [r7, #16]
 801506c:	2b00      	cmp	r3, #0
 801506e:	d006      	beq.n	801507e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015070:	693b      	ldr	r3, [r7, #16]
 8015072:	2200      	movs	r2, #0
 8015074:	711a      	strb	r2, [r3, #4]
 8015076:	2200      	movs	r2, #0
 8015078:	f042 0202 	orr.w	r2, r2, #2
 801507c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	2b00      	cmp	r3, #0
 8015082:	d006      	beq.n	8015092 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	2200      	movs	r2, #0
 8015088:	711a      	strb	r2, [r3, #4]
 801508a:	2200      	movs	r2, #0
 801508c:	f042 0202 	orr.w	r2, r2, #2
 8015090:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	2243      	movs	r2, #67	; 0x43
 8015096:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015098:	4b02      	ldr	r3, [pc, #8]	; (80150a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801509a:	4618      	mov	r0, r3
 801509c:	3718      	adds	r7, #24
 801509e:	46bd      	mov	sp, r7
 80150a0:	bd80      	pop	{r7, pc}
 80150a2:	bf00      	nop
 80150a4:	24000054 	.word	0x24000054

080150a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80150a8:	b580      	push	{r7, lr}
 80150aa:	b086      	sub	sp, #24
 80150ac:	af00      	add	r7, sp, #0
 80150ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80150b0:	2182      	movs	r1, #130	; 0x82
 80150b2:	4818      	ldr	r0, [pc, #96]	; (8015114 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80150b4:	f000 fcdf 	bl	8015a76 <USBD_GetEpDesc>
 80150b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80150ba:	2101      	movs	r1, #1
 80150bc:	4815      	ldr	r0, [pc, #84]	; (8015114 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80150be:	f000 fcda 	bl	8015a76 <USBD_GetEpDesc>
 80150c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80150c4:	2181      	movs	r1, #129	; 0x81
 80150c6:	4813      	ldr	r0, [pc, #76]	; (8015114 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80150c8:	f000 fcd5 	bl	8015a76 <USBD_GetEpDesc>
 80150cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80150ce:	697b      	ldr	r3, [r7, #20]
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d002      	beq.n	80150da <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80150d4:	697b      	ldr	r3, [r7, #20]
 80150d6:	2210      	movs	r2, #16
 80150d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80150da:	693b      	ldr	r3, [r7, #16]
 80150dc:	2b00      	cmp	r3, #0
 80150de:	d006      	beq.n	80150ee <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80150e0:	693b      	ldr	r3, [r7, #16]
 80150e2:	2200      	movs	r2, #0
 80150e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80150e8:	711a      	strb	r2, [r3, #4]
 80150ea:	2200      	movs	r2, #0
 80150ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80150ee:	68fb      	ldr	r3, [r7, #12]
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d006      	beq.n	8015102 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	2200      	movs	r2, #0
 80150f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80150fc:	711a      	strb	r2, [r3, #4]
 80150fe:	2200      	movs	r2, #0
 8015100:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	2243      	movs	r2, #67	; 0x43
 8015106:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015108:	4b02      	ldr	r3, [pc, #8]	; (8015114 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801510a:	4618      	mov	r0, r3
 801510c:	3718      	adds	r7, #24
 801510e:	46bd      	mov	sp, r7
 8015110:	bd80      	pop	{r7, pc}
 8015112:	bf00      	nop
 8015114:	24000054 	.word	0x24000054

08015118 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8015118:	b480      	push	{r7}
 801511a:	b083      	sub	sp, #12
 801511c:	af00      	add	r7, sp, #0
 801511e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	220a      	movs	r2, #10
 8015124:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8015126:	4b03      	ldr	r3, [pc, #12]	; (8015134 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8015128:	4618      	mov	r0, r3
 801512a:	370c      	adds	r7, #12
 801512c:	46bd      	mov	sp, r7
 801512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015132:	4770      	bx	lr
 8015134:	24000010 	.word	0x24000010

08015138 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8015138:	b480      	push	{r7}
 801513a:	b083      	sub	sp, #12
 801513c:	af00      	add	r7, sp, #0
 801513e:	6078      	str	r0, [r7, #4]
 8015140:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8015142:	683b      	ldr	r3, [r7, #0]
 8015144:	2b00      	cmp	r3, #0
 8015146:	d101      	bne.n	801514c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8015148:	2303      	movs	r3, #3
 801514a:	e009      	b.n	8015160 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015152:	687a      	ldr	r2, [r7, #4]
 8015154:	33b0      	adds	r3, #176	; 0xb0
 8015156:	009b      	lsls	r3, r3, #2
 8015158:	4413      	add	r3, r2
 801515a:	683a      	ldr	r2, [r7, #0]
 801515c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801515e:	2300      	movs	r3, #0
}
 8015160:	4618      	mov	r0, r3
 8015162:	370c      	adds	r7, #12
 8015164:	46bd      	mov	sp, r7
 8015166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801516a:	4770      	bx	lr

0801516c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801516c:	b480      	push	{r7}
 801516e:	b087      	sub	sp, #28
 8015170:	af00      	add	r7, sp, #0
 8015172:	60f8      	str	r0, [r7, #12]
 8015174:	60b9      	str	r1, [r7, #8]
 8015176:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	32b0      	adds	r2, #176	; 0xb0
 8015182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015186:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015188:	697b      	ldr	r3, [r7, #20]
 801518a:	2b00      	cmp	r3, #0
 801518c:	d101      	bne.n	8015192 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801518e:	2303      	movs	r3, #3
 8015190:	e008      	b.n	80151a4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8015192:	697b      	ldr	r3, [r7, #20]
 8015194:	68ba      	ldr	r2, [r7, #8]
 8015196:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801519a:	697b      	ldr	r3, [r7, #20]
 801519c:	687a      	ldr	r2, [r7, #4]
 801519e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80151a2:	2300      	movs	r3, #0
}
 80151a4:	4618      	mov	r0, r3
 80151a6:	371c      	adds	r7, #28
 80151a8:	46bd      	mov	sp, r7
 80151aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ae:	4770      	bx	lr

080151b0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80151b0:	b480      	push	{r7}
 80151b2:	b085      	sub	sp, #20
 80151b4:	af00      	add	r7, sp, #0
 80151b6:	6078      	str	r0, [r7, #4]
 80151b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	32b0      	adds	r2, #176	; 0xb0
 80151c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151c8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80151ca:	68fb      	ldr	r3, [r7, #12]
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d101      	bne.n	80151d4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80151d0:	2303      	movs	r3, #3
 80151d2:	e004      	b.n	80151de <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80151d4:	68fb      	ldr	r3, [r7, #12]
 80151d6:	683a      	ldr	r2, [r7, #0]
 80151d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80151dc:	2300      	movs	r3, #0
}
 80151de:	4618      	mov	r0, r3
 80151e0:	3714      	adds	r7, #20
 80151e2:	46bd      	mov	sp, r7
 80151e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151e8:	4770      	bx	lr
	...

080151ec <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80151ec:	b580      	push	{r7, lr}
 80151ee:	b084      	sub	sp, #16
 80151f0:	af00      	add	r7, sp, #0
 80151f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	32b0      	adds	r2, #176	; 0xb0
 80151fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015202:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8015204:	2301      	movs	r3, #1
 8015206:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015208:	68bb      	ldr	r3, [r7, #8]
 801520a:	2b00      	cmp	r3, #0
 801520c:	d101      	bne.n	8015212 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801520e:	2303      	movs	r3, #3
 8015210:	e025      	b.n	801525e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8015212:	68bb      	ldr	r3, [r7, #8]
 8015214:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015218:	2b00      	cmp	r3, #0
 801521a:	d11f      	bne.n	801525c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801521c:	68bb      	ldr	r3, [r7, #8]
 801521e:	2201      	movs	r2, #1
 8015220:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8015224:	4b10      	ldr	r3, [pc, #64]	; (8015268 <USBD_CDC_TransmitPacket+0x7c>)
 8015226:	781b      	ldrb	r3, [r3, #0]
 8015228:	f003 020f 	and.w	r2, r3, #15
 801522c:	68bb      	ldr	r3, [r7, #8]
 801522e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8015232:	6878      	ldr	r0, [r7, #4]
 8015234:	4613      	mov	r3, r2
 8015236:	009b      	lsls	r3, r3, #2
 8015238:	4413      	add	r3, r2
 801523a:	009b      	lsls	r3, r3, #2
 801523c:	4403      	add	r3, r0
 801523e:	3318      	adds	r3, #24
 8015240:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8015242:	4b09      	ldr	r3, [pc, #36]	; (8015268 <USBD_CDC_TransmitPacket+0x7c>)
 8015244:	7819      	ldrb	r1, [r3, #0]
 8015246:	68bb      	ldr	r3, [r7, #8]
 8015248:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801524c:	68bb      	ldr	r3, [r7, #8]
 801524e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8015252:	6878      	ldr	r0, [r7, #4]
 8015254:	f002 f825 	bl	80172a2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8015258:	2300      	movs	r3, #0
 801525a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801525c:	7bfb      	ldrb	r3, [r7, #15]
}
 801525e:	4618      	mov	r0, r3
 8015260:	3710      	adds	r7, #16
 8015262:	46bd      	mov	sp, r7
 8015264:	bd80      	pop	{r7, pc}
 8015266:	bf00      	nop
 8015268:	24000097 	.word	0x24000097

0801526c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801526c:	b580      	push	{r7, lr}
 801526e:	b084      	sub	sp, #16
 8015270:	af00      	add	r7, sp, #0
 8015272:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	32b0      	adds	r2, #176	; 0xb0
 801527e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015282:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	32b0      	adds	r2, #176	; 0xb0
 801528e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015292:	2b00      	cmp	r3, #0
 8015294:	d101      	bne.n	801529a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8015296:	2303      	movs	r3, #3
 8015298:	e018      	b.n	80152cc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	7c1b      	ldrb	r3, [r3, #16]
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d10a      	bne.n	80152b8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80152a2:	4b0c      	ldr	r3, [pc, #48]	; (80152d4 <USBD_CDC_ReceivePacket+0x68>)
 80152a4:	7819      	ldrb	r1, [r3, #0]
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80152ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80152b0:	6878      	ldr	r0, [r7, #4]
 80152b2:	f002 f817 	bl	80172e4 <USBD_LL_PrepareReceive>
 80152b6:	e008      	b.n	80152ca <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80152b8:	4b06      	ldr	r3, [pc, #24]	; (80152d4 <USBD_CDC_ReceivePacket+0x68>)
 80152ba:	7819      	ldrb	r1, [r3, #0]
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80152c2:	2340      	movs	r3, #64	; 0x40
 80152c4:	6878      	ldr	r0, [r7, #4]
 80152c6:	f002 f80d 	bl	80172e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80152ca:	2300      	movs	r3, #0
}
 80152cc:	4618      	mov	r0, r3
 80152ce:	3710      	adds	r7, #16
 80152d0:	46bd      	mov	sp, r7
 80152d2:	bd80      	pop	{r7, pc}
 80152d4:	24000098 	.word	0x24000098

080152d8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80152d8:	b580      	push	{r7, lr}
 80152da:	b086      	sub	sp, #24
 80152dc:	af00      	add	r7, sp, #0
 80152de:	60f8      	str	r0, [r7, #12]
 80152e0:	60b9      	str	r1, [r7, #8]
 80152e2:	4613      	mov	r3, r2
 80152e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d101      	bne.n	80152f0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80152ec:	2303      	movs	r3, #3
 80152ee:	e01f      	b.n	8015330 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	2200      	movs	r2, #0
 80152f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80152f8:	68fb      	ldr	r3, [r7, #12]
 80152fa:	2200      	movs	r2, #0
 80152fc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	2200      	movs	r2, #0
 8015304:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015308:	68bb      	ldr	r3, [r7, #8]
 801530a:	2b00      	cmp	r3, #0
 801530c:	d003      	beq.n	8015316 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	68ba      	ldr	r2, [r7, #8]
 8015312:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015316:	68fb      	ldr	r3, [r7, #12]
 8015318:	2201      	movs	r2, #1
 801531a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	79fa      	ldrb	r2, [r7, #7]
 8015322:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8015324:	68f8      	ldr	r0, [r7, #12]
 8015326:	f001 fe81 	bl	801702c <USBD_LL_Init>
 801532a:	4603      	mov	r3, r0
 801532c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801532e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015330:	4618      	mov	r0, r3
 8015332:	3718      	adds	r7, #24
 8015334:	46bd      	mov	sp, r7
 8015336:	bd80      	pop	{r7, pc}

08015338 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015338:	b580      	push	{r7, lr}
 801533a:	b084      	sub	sp, #16
 801533c:	af00      	add	r7, sp, #0
 801533e:	6078      	str	r0, [r7, #4]
 8015340:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015342:	2300      	movs	r3, #0
 8015344:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8015346:	683b      	ldr	r3, [r7, #0]
 8015348:	2b00      	cmp	r3, #0
 801534a:	d101      	bne.n	8015350 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801534c:	2303      	movs	r3, #3
 801534e:	e025      	b.n	801539c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	683a      	ldr	r2, [r7, #0]
 8015354:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	32ae      	adds	r2, #174	; 0xae
 8015362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015368:	2b00      	cmp	r3, #0
 801536a:	d00f      	beq.n	801538c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	32ae      	adds	r2, #174	; 0xae
 8015376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801537a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801537c:	f107 020e 	add.w	r2, r7, #14
 8015380:	4610      	mov	r0, r2
 8015382:	4798      	blx	r3
 8015384:	4602      	mov	r2, r0
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015392:	1c5a      	adds	r2, r3, #1
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 801539a:	2300      	movs	r3, #0
}
 801539c:	4618      	mov	r0, r3
 801539e:	3710      	adds	r7, #16
 80153a0:	46bd      	mov	sp, r7
 80153a2:	bd80      	pop	{r7, pc}

080153a4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80153a4:	b580      	push	{r7, lr}
 80153a6:	b082      	sub	sp, #8
 80153a8:	af00      	add	r7, sp, #0
 80153aa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80153ac:	6878      	ldr	r0, [r7, #4]
 80153ae:	f001 fe8f 	bl	80170d0 <USBD_LL_Start>
 80153b2:	4603      	mov	r3, r0
}
 80153b4:	4618      	mov	r0, r3
 80153b6:	3708      	adds	r7, #8
 80153b8:	46bd      	mov	sp, r7
 80153ba:	bd80      	pop	{r7, pc}

080153bc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80153bc:	b480      	push	{r7}
 80153be:	b083      	sub	sp, #12
 80153c0:	af00      	add	r7, sp, #0
 80153c2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80153c4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80153c6:	4618      	mov	r0, r3
 80153c8:	370c      	adds	r7, #12
 80153ca:	46bd      	mov	sp, r7
 80153cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153d0:	4770      	bx	lr

080153d2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80153d2:	b580      	push	{r7, lr}
 80153d4:	b084      	sub	sp, #16
 80153d6:	af00      	add	r7, sp, #0
 80153d8:	6078      	str	r0, [r7, #4]
 80153da:	460b      	mov	r3, r1
 80153dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80153de:	2300      	movs	r3, #0
 80153e0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d009      	beq.n	8015400 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	78fa      	ldrb	r2, [r7, #3]
 80153f6:	4611      	mov	r1, r2
 80153f8:	6878      	ldr	r0, [r7, #4]
 80153fa:	4798      	blx	r3
 80153fc:	4603      	mov	r3, r0
 80153fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015400:	7bfb      	ldrb	r3, [r7, #15]
}
 8015402:	4618      	mov	r0, r3
 8015404:	3710      	adds	r7, #16
 8015406:	46bd      	mov	sp, r7
 8015408:	bd80      	pop	{r7, pc}

0801540a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801540a:	b580      	push	{r7, lr}
 801540c:	b084      	sub	sp, #16
 801540e:	af00      	add	r7, sp, #0
 8015410:	6078      	str	r0, [r7, #4]
 8015412:	460b      	mov	r3, r1
 8015414:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015416:	2300      	movs	r3, #0
 8015418:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015420:	685b      	ldr	r3, [r3, #4]
 8015422:	78fa      	ldrb	r2, [r7, #3]
 8015424:	4611      	mov	r1, r2
 8015426:	6878      	ldr	r0, [r7, #4]
 8015428:	4798      	blx	r3
 801542a:	4603      	mov	r3, r0
 801542c:	2b00      	cmp	r3, #0
 801542e:	d001      	beq.n	8015434 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8015430:	2303      	movs	r3, #3
 8015432:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015434:	7bfb      	ldrb	r3, [r7, #15]
}
 8015436:	4618      	mov	r0, r3
 8015438:	3710      	adds	r7, #16
 801543a:	46bd      	mov	sp, r7
 801543c:	bd80      	pop	{r7, pc}

0801543e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801543e:	b580      	push	{r7, lr}
 8015440:	b084      	sub	sp, #16
 8015442:	af00      	add	r7, sp, #0
 8015444:	6078      	str	r0, [r7, #4]
 8015446:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801544e:	6839      	ldr	r1, [r7, #0]
 8015450:	4618      	mov	r0, r3
 8015452:	f001 f90e 	bl	8016672 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	2201      	movs	r2, #1
 801545a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8015464:	461a      	mov	r2, r3
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015472:	f003 031f 	and.w	r3, r3, #31
 8015476:	2b02      	cmp	r3, #2
 8015478:	d01a      	beq.n	80154b0 <USBD_LL_SetupStage+0x72>
 801547a:	2b02      	cmp	r3, #2
 801547c:	d822      	bhi.n	80154c4 <USBD_LL_SetupStage+0x86>
 801547e:	2b00      	cmp	r3, #0
 8015480:	d002      	beq.n	8015488 <USBD_LL_SetupStage+0x4a>
 8015482:	2b01      	cmp	r3, #1
 8015484:	d00a      	beq.n	801549c <USBD_LL_SetupStage+0x5e>
 8015486:	e01d      	b.n	80154c4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801548e:	4619      	mov	r1, r3
 8015490:	6878      	ldr	r0, [r7, #4]
 8015492:	f000 fb65 	bl	8015b60 <USBD_StdDevReq>
 8015496:	4603      	mov	r3, r0
 8015498:	73fb      	strb	r3, [r7, #15]
      break;
 801549a:	e020      	b.n	80154de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80154a2:	4619      	mov	r1, r3
 80154a4:	6878      	ldr	r0, [r7, #4]
 80154a6:	f000 fbcd 	bl	8015c44 <USBD_StdItfReq>
 80154aa:	4603      	mov	r3, r0
 80154ac:	73fb      	strb	r3, [r7, #15]
      break;
 80154ae:	e016      	b.n	80154de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80154b6:	4619      	mov	r1, r3
 80154b8:	6878      	ldr	r0, [r7, #4]
 80154ba:	f000 fc2f 	bl	8015d1c <USBD_StdEPReq>
 80154be:	4603      	mov	r3, r0
 80154c0:	73fb      	strb	r3, [r7, #15]
      break;
 80154c2:	e00c      	b.n	80154de <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80154ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80154ce:	b2db      	uxtb	r3, r3
 80154d0:	4619      	mov	r1, r3
 80154d2:	6878      	ldr	r0, [r7, #4]
 80154d4:	f001 fe5c 	bl	8017190 <USBD_LL_StallEP>
 80154d8:	4603      	mov	r3, r0
 80154da:	73fb      	strb	r3, [r7, #15]
      break;
 80154dc:	bf00      	nop
  }

  return ret;
 80154de:	7bfb      	ldrb	r3, [r7, #15]
}
 80154e0:	4618      	mov	r0, r3
 80154e2:	3710      	adds	r7, #16
 80154e4:	46bd      	mov	sp, r7
 80154e6:	bd80      	pop	{r7, pc}

080154e8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80154e8:	b580      	push	{r7, lr}
 80154ea:	b086      	sub	sp, #24
 80154ec:	af00      	add	r7, sp, #0
 80154ee:	60f8      	str	r0, [r7, #12]
 80154f0:	460b      	mov	r3, r1
 80154f2:	607a      	str	r2, [r7, #4]
 80154f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80154f6:	2300      	movs	r3, #0
 80154f8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80154fa:	7afb      	ldrb	r3, [r7, #11]
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	d16e      	bne.n	80155de <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8015500:	68fb      	ldr	r3, [r7, #12]
 8015502:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015506:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015508:	68fb      	ldr	r3, [r7, #12]
 801550a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801550e:	2b03      	cmp	r3, #3
 8015510:	f040 8098 	bne.w	8015644 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8015514:	693b      	ldr	r3, [r7, #16]
 8015516:	689a      	ldr	r2, [r3, #8]
 8015518:	693b      	ldr	r3, [r7, #16]
 801551a:	68db      	ldr	r3, [r3, #12]
 801551c:	429a      	cmp	r2, r3
 801551e:	d913      	bls.n	8015548 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8015520:	693b      	ldr	r3, [r7, #16]
 8015522:	689a      	ldr	r2, [r3, #8]
 8015524:	693b      	ldr	r3, [r7, #16]
 8015526:	68db      	ldr	r3, [r3, #12]
 8015528:	1ad2      	subs	r2, r2, r3
 801552a:	693b      	ldr	r3, [r7, #16]
 801552c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801552e:	693b      	ldr	r3, [r7, #16]
 8015530:	68da      	ldr	r2, [r3, #12]
 8015532:	693b      	ldr	r3, [r7, #16]
 8015534:	689b      	ldr	r3, [r3, #8]
 8015536:	4293      	cmp	r3, r2
 8015538:	bf28      	it	cs
 801553a:	4613      	movcs	r3, r2
 801553c:	461a      	mov	r2, r3
 801553e:	6879      	ldr	r1, [r7, #4]
 8015540:	68f8      	ldr	r0, [r7, #12]
 8015542:	f001 f98a 	bl	801685a <USBD_CtlContinueRx>
 8015546:	e07d      	b.n	8015644 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8015548:	68fb      	ldr	r3, [r7, #12]
 801554a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801554e:	f003 031f 	and.w	r3, r3, #31
 8015552:	2b02      	cmp	r3, #2
 8015554:	d014      	beq.n	8015580 <USBD_LL_DataOutStage+0x98>
 8015556:	2b02      	cmp	r3, #2
 8015558:	d81d      	bhi.n	8015596 <USBD_LL_DataOutStage+0xae>
 801555a:	2b00      	cmp	r3, #0
 801555c:	d002      	beq.n	8015564 <USBD_LL_DataOutStage+0x7c>
 801555e:	2b01      	cmp	r3, #1
 8015560:	d003      	beq.n	801556a <USBD_LL_DataOutStage+0x82>
 8015562:	e018      	b.n	8015596 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8015564:	2300      	movs	r3, #0
 8015566:	75bb      	strb	r3, [r7, #22]
            break;
 8015568:	e018      	b.n	801559c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801556a:	68fb      	ldr	r3, [r7, #12]
 801556c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015570:	b2db      	uxtb	r3, r3
 8015572:	4619      	mov	r1, r3
 8015574:	68f8      	ldr	r0, [r7, #12]
 8015576:	f000 fa64 	bl	8015a42 <USBD_CoreFindIF>
 801557a:	4603      	mov	r3, r0
 801557c:	75bb      	strb	r3, [r7, #22]
            break;
 801557e:	e00d      	b.n	801559c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8015580:	68fb      	ldr	r3, [r7, #12]
 8015582:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015586:	b2db      	uxtb	r3, r3
 8015588:	4619      	mov	r1, r3
 801558a:	68f8      	ldr	r0, [r7, #12]
 801558c:	f000 fa66 	bl	8015a5c <USBD_CoreFindEP>
 8015590:	4603      	mov	r3, r0
 8015592:	75bb      	strb	r3, [r7, #22]
            break;
 8015594:	e002      	b.n	801559c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8015596:	2300      	movs	r3, #0
 8015598:	75bb      	strb	r3, [r7, #22]
            break;
 801559a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 801559c:	7dbb      	ldrb	r3, [r7, #22]
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d119      	bne.n	80155d6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80155a2:	68fb      	ldr	r3, [r7, #12]
 80155a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80155a8:	b2db      	uxtb	r3, r3
 80155aa:	2b03      	cmp	r3, #3
 80155ac:	d113      	bne.n	80155d6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80155ae:	7dba      	ldrb	r2, [r7, #22]
 80155b0:	68fb      	ldr	r3, [r7, #12]
 80155b2:	32ae      	adds	r2, #174	; 0xae
 80155b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155b8:	691b      	ldr	r3, [r3, #16]
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d00b      	beq.n	80155d6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80155be:	7dba      	ldrb	r2, [r7, #22]
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80155c6:	7dba      	ldrb	r2, [r7, #22]
 80155c8:	68fb      	ldr	r3, [r7, #12]
 80155ca:	32ae      	adds	r2, #174	; 0xae
 80155cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155d0:	691b      	ldr	r3, [r3, #16]
 80155d2:	68f8      	ldr	r0, [r7, #12]
 80155d4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80155d6:	68f8      	ldr	r0, [r7, #12]
 80155d8:	f001 f950 	bl	801687c <USBD_CtlSendStatus>
 80155dc:	e032      	b.n	8015644 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80155de:	7afb      	ldrb	r3, [r7, #11]
 80155e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80155e4:	b2db      	uxtb	r3, r3
 80155e6:	4619      	mov	r1, r3
 80155e8:	68f8      	ldr	r0, [r7, #12]
 80155ea:	f000 fa37 	bl	8015a5c <USBD_CoreFindEP>
 80155ee:	4603      	mov	r3, r0
 80155f0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80155f2:	7dbb      	ldrb	r3, [r7, #22]
 80155f4:	2bff      	cmp	r3, #255	; 0xff
 80155f6:	d025      	beq.n	8015644 <USBD_LL_DataOutStage+0x15c>
 80155f8:	7dbb      	ldrb	r3, [r7, #22]
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d122      	bne.n	8015644 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80155fe:	68fb      	ldr	r3, [r7, #12]
 8015600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015604:	b2db      	uxtb	r3, r3
 8015606:	2b03      	cmp	r3, #3
 8015608:	d117      	bne.n	801563a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801560a:	7dba      	ldrb	r2, [r7, #22]
 801560c:	68fb      	ldr	r3, [r7, #12]
 801560e:	32ae      	adds	r2, #174	; 0xae
 8015610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015614:	699b      	ldr	r3, [r3, #24]
 8015616:	2b00      	cmp	r3, #0
 8015618:	d00f      	beq.n	801563a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801561a:	7dba      	ldrb	r2, [r7, #22]
 801561c:	68fb      	ldr	r3, [r7, #12]
 801561e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8015622:	7dba      	ldrb	r2, [r7, #22]
 8015624:	68fb      	ldr	r3, [r7, #12]
 8015626:	32ae      	adds	r2, #174	; 0xae
 8015628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801562c:	699b      	ldr	r3, [r3, #24]
 801562e:	7afa      	ldrb	r2, [r7, #11]
 8015630:	4611      	mov	r1, r2
 8015632:	68f8      	ldr	r0, [r7, #12]
 8015634:	4798      	blx	r3
 8015636:	4603      	mov	r3, r0
 8015638:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801563a:	7dfb      	ldrb	r3, [r7, #23]
 801563c:	2b00      	cmp	r3, #0
 801563e:	d001      	beq.n	8015644 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8015640:	7dfb      	ldrb	r3, [r7, #23]
 8015642:	e000      	b.n	8015646 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8015644:	2300      	movs	r3, #0
}
 8015646:	4618      	mov	r0, r3
 8015648:	3718      	adds	r7, #24
 801564a:	46bd      	mov	sp, r7
 801564c:	bd80      	pop	{r7, pc}

0801564e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801564e:	b580      	push	{r7, lr}
 8015650:	b086      	sub	sp, #24
 8015652:	af00      	add	r7, sp, #0
 8015654:	60f8      	str	r0, [r7, #12]
 8015656:	460b      	mov	r3, r1
 8015658:	607a      	str	r2, [r7, #4]
 801565a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801565c:	7afb      	ldrb	r3, [r7, #11]
 801565e:	2b00      	cmp	r3, #0
 8015660:	d16f      	bne.n	8015742 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8015662:	68fb      	ldr	r3, [r7, #12]
 8015664:	3314      	adds	r3, #20
 8015666:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015668:	68fb      	ldr	r3, [r7, #12]
 801566a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801566e:	2b02      	cmp	r3, #2
 8015670:	d15a      	bne.n	8015728 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8015672:	693b      	ldr	r3, [r7, #16]
 8015674:	689a      	ldr	r2, [r3, #8]
 8015676:	693b      	ldr	r3, [r7, #16]
 8015678:	68db      	ldr	r3, [r3, #12]
 801567a:	429a      	cmp	r2, r3
 801567c:	d914      	bls.n	80156a8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801567e:	693b      	ldr	r3, [r7, #16]
 8015680:	689a      	ldr	r2, [r3, #8]
 8015682:	693b      	ldr	r3, [r7, #16]
 8015684:	68db      	ldr	r3, [r3, #12]
 8015686:	1ad2      	subs	r2, r2, r3
 8015688:	693b      	ldr	r3, [r7, #16]
 801568a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801568c:	693b      	ldr	r3, [r7, #16]
 801568e:	689b      	ldr	r3, [r3, #8]
 8015690:	461a      	mov	r2, r3
 8015692:	6879      	ldr	r1, [r7, #4]
 8015694:	68f8      	ldr	r0, [r7, #12]
 8015696:	f001 f8b2 	bl	80167fe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801569a:	2300      	movs	r3, #0
 801569c:	2200      	movs	r2, #0
 801569e:	2100      	movs	r1, #0
 80156a0:	68f8      	ldr	r0, [r7, #12]
 80156a2:	f001 fe1f 	bl	80172e4 <USBD_LL_PrepareReceive>
 80156a6:	e03f      	b.n	8015728 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80156a8:	693b      	ldr	r3, [r7, #16]
 80156aa:	68da      	ldr	r2, [r3, #12]
 80156ac:	693b      	ldr	r3, [r7, #16]
 80156ae:	689b      	ldr	r3, [r3, #8]
 80156b0:	429a      	cmp	r2, r3
 80156b2:	d11c      	bne.n	80156ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80156b4:	693b      	ldr	r3, [r7, #16]
 80156b6:	685a      	ldr	r2, [r3, #4]
 80156b8:	693b      	ldr	r3, [r7, #16]
 80156ba:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80156bc:	429a      	cmp	r2, r3
 80156be:	d316      	bcc.n	80156ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80156c0:	693b      	ldr	r3, [r7, #16]
 80156c2:	685a      	ldr	r2, [r3, #4]
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80156ca:	429a      	cmp	r2, r3
 80156cc:	d20f      	bcs.n	80156ee <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80156ce:	2200      	movs	r2, #0
 80156d0:	2100      	movs	r1, #0
 80156d2:	68f8      	ldr	r0, [r7, #12]
 80156d4:	f001 f893 	bl	80167fe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80156d8:	68fb      	ldr	r3, [r7, #12]
 80156da:	2200      	movs	r2, #0
 80156dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80156e0:	2300      	movs	r3, #0
 80156e2:	2200      	movs	r2, #0
 80156e4:	2100      	movs	r1, #0
 80156e6:	68f8      	ldr	r0, [r7, #12]
 80156e8:	f001 fdfc 	bl	80172e4 <USBD_LL_PrepareReceive>
 80156ec:	e01c      	b.n	8015728 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80156f4:	b2db      	uxtb	r3, r3
 80156f6:	2b03      	cmp	r3, #3
 80156f8:	d10f      	bne.n	801571a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80156fa:	68fb      	ldr	r3, [r7, #12]
 80156fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015700:	68db      	ldr	r3, [r3, #12]
 8015702:	2b00      	cmp	r3, #0
 8015704:	d009      	beq.n	801571a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8015706:	68fb      	ldr	r3, [r7, #12]
 8015708:	2200      	movs	r2, #0
 801570a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801570e:	68fb      	ldr	r3, [r7, #12]
 8015710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015714:	68db      	ldr	r3, [r3, #12]
 8015716:	68f8      	ldr	r0, [r7, #12]
 8015718:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801571a:	2180      	movs	r1, #128	; 0x80
 801571c:	68f8      	ldr	r0, [r7, #12]
 801571e:	f001 fd37 	bl	8017190 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015722:	68f8      	ldr	r0, [r7, #12]
 8015724:	f001 f8bd 	bl	80168a2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8015728:	68fb      	ldr	r3, [r7, #12]
 801572a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801572e:	2b00      	cmp	r3, #0
 8015730:	d03a      	beq.n	80157a8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8015732:	68f8      	ldr	r0, [r7, #12]
 8015734:	f7ff fe42 	bl	80153bc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015738:	68fb      	ldr	r3, [r7, #12]
 801573a:	2200      	movs	r2, #0
 801573c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8015740:	e032      	b.n	80157a8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8015742:	7afb      	ldrb	r3, [r7, #11]
 8015744:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015748:	b2db      	uxtb	r3, r3
 801574a:	4619      	mov	r1, r3
 801574c:	68f8      	ldr	r0, [r7, #12]
 801574e:	f000 f985 	bl	8015a5c <USBD_CoreFindEP>
 8015752:	4603      	mov	r3, r0
 8015754:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015756:	7dfb      	ldrb	r3, [r7, #23]
 8015758:	2bff      	cmp	r3, #255	; 0xff
 801575a:	d025      	beq.n	80157a8 <USBD_LL_DataInStage+0x15a>
 801575c:	7dfb      	ldrb	r3, [r7, #23]
 801575e:	2b00      	cmp	r3, #0
 8015760:	d122      	bne.n	80157a8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015768:	b2db      	uxtb	r3, r3
 801576a:	2b03      	cmp	r3, #3
 801576c:	d11c      	bne.n	80157a8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801576e:	7dfa      	ldrb	r2, [r7, #23]
 8015770:	68fb      	ldr	r3, [r7, #12]
 8015772:	32ae      	adds	r2, #174	; 0xae
 8015774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015778:	695b      	ldr	r3, [r3, #20]
 801577a:	2b00      	cmp	r3, #0
 801577c:	d014      	beq.n	80157a8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801577e:	7dfa      	ldrb	r2, [r7, #23]
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8015786:	7dfa      	ldrb	r2, [r7, #23]
 8015788:	68fb      	ldr	r3, [r7, #12]
 801578a:	32ae      	adds	r2, #174	; 0xae
 801578c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015790:	695b      	ldr	r3, [r3, #20]
 8015792:	7afa      	ldrb	r2, [r7, #11]
 8015794:	4611      	mov	r1, r2
 8015796:	68f8      	ldr	r0, [r7, #12]
 8015798:	4798      	blx	r3
 801579a:	4603      	mov	r3, r0
 801579c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801579e:	7dbb      	ldrb	r3, [r7, #22]
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d001      	beq.n	80157a8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80157a4:	7dbb      	ldrb	r3, [r7, #22]
 80157a6:	e000      	b.n	80157aa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80157a8:	2300      	movs	r3, #0
}
 80157aa:	4618      	mov	r0, r3
 80157ac:	3718      	adds	r7, #24
 80157ae:	46bd      	mov	sp, r7
 80157b0:	bd80      	pop	{r7, pc}

080157b2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80157b2:	b580      	push	{r7, lr}
 80157b4:	b084      	sub	sp, #16
 80157b6:	af00      	add	r7, sp, #0
 80157b8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80157ba:	2300      	movs	r3, #0
 80157bc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	2201      	movs	r2, #1
 80157c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	2200      	movs	r2, #0
 80157ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	2200      	movs	r2, #0
 80157d2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	2200      	movs	r2, #0
 80157d8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	2200      	movs	r2, #0
 80157e0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d014      	beq.n	8015818 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80157f4:	685b      	ldr	r3, [r3, #4]
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d00e      	beq.n	8015818 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015800:	685b      	ldr	r3, [r3, #4]
 8015802:	687a      	ldr	r2, [r7, #4]
 8015804:	6852      	ldr	r2, [r2, #4]
 8015806:	b2d2      	uxtb	r2, r2
 8015808:	4611      	mov	r1, r2
 801580a:	6878      	ldr	r0, [r7, #4]
 801580c:	4798      	blx	r3
 801580e:	4603      	mov	r3, r0
 8015810:	2b00      	cmp	r3, #0
 8015812:	d001      	beq.n	8015818 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8015814:	2303      	movs	r3, #3
 8015816:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015818:	2340      	movs	r3, #64	; 0x40
 801581a:	2200      	movs	r2, #0
 801581c:	2100      	movs	r1, #0
 801581e:	6878      	ldr	r0, [r7, #4]
 8015820:	f001 fc71 	bl	8017106 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	2201      	movs	r2, #1
 8015828:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	2240      	movs	r2, #64	; 0x40
 8015830:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015834:	2340      	movs	r3, #64	; 0x40
 8015836:	2200      	movs	r2, #0
 8015838:	2180      	movs	r1, #128	; 0x80
 801583a:	6878      	ldr	r0, [r7, #4]
 801583c:	f001 fc63 	bl	8017106 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	2201      	movs	r2, #1
 8015844:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	2240      	movs	r2, #64	; 0x40
 801584a:	621a      	str	r2, [r3, #32]

  return ret;
 801584c:	7bfb      	ldrb	r3, [r7, #15]
}
 801584e:	4618      	mov	r0, r3
 8015850:	3710      	adds	r7, #16
 8015852:	46bd      	mov	sp, r7
 8015854:	bd80      	pop	{r7, pc}

08015856 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015856:	b480      	push	{r7}
 8015858:	b083      	sub	sp, #12
 801585a:	af00      	add	r7, sp, #0
 801585c:	6078      	str	r0, [r7, #4]
 801585e:	460b      	mov	r3, r1
 8015860:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	78fa      	ldrb	r2, [r7, #3]
 8015866:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015868:	2300      	movs	r3, #0
}
 801586a:	4618      	mov	r0, r3
 801586c:	370c      	adds	r7, #12
 801586e:	46bd      	mov	sp, r7
 8015870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015874:	4770      	bx	lr

08015876 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015876:	b480      	push	{r7}
 8015878:	b083      	sub	sp, #12
 801587a:	af00      	add	r7, sp, #0
 801587c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015884:	b2db      	uxtb	r3, r3
 8015886:	2b04      	cmp	r3, #4
 8015888:	d006      	beq.n	8015898 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015890:	b2da      	uxtb	r2, r3
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	2204      	movs	r2, #4
 801589c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80158a0:	2300      	movs	r3, #0
}
 80158a2:	4618      	mov	r0, r3
 80158a4:	370c      	adds	r7, #12
 80158a6:	46bd      	mov	sp, r7
 80158a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ac:	4770      	bx	lr

080158ae <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80158ae:	b480      	push	{r7}
 80158b0:	b083      	sub	sp, #12
 80158b2:	af00      	add	r7, sp, #0
 80158b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80158bc:	b2db      	uxtb	r3, r3
 80158be:	2b04      	cmp	r3, #4
 80158c0:	d106      	bne.n	80158d0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80158c8:	b2da      	uxtb	r2, r3
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80158d0:	2300      	movs	r3, #0
}
 80158d2:	4618      	mov	r0, r3
 80158d4:	370c      	adds	r7, #12
 80158d6:	46bd      	mov	sp, r7
 80158d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158dc:	4770      	bx	lr

080158de <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80158de:	b580      	push	{r7, lr}
 80158e0:	b082      	sub	sp, #8
 80158e2:	af00      	add	r7, sp, #0
 80158e4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80158ec:	b2db      	uxtb	r3, r3
 80158ee:	2b03      	cmp	r3, #3
 80158f0:	d110      	bne.n	8015914 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d00b      	beq.n	8015914 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015902:	69db      	ldr	r3, [r3, #28]
 8015904:	2b00      	cmp	r3, #0
 8015906:	d005      	beq.n	8015914 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801590e:	69db      	ldr	r3, [r3, #28]
 8015910:	6878      	ldr	r0, [r7, #4]
 8015912:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8015914:	2300      	movs	r3, #0
}
 8015916:	4618      	mov	r0, r3
 8015918:	3708      	adds	r7, #8
 801591a:	46bd      	mov	sp, r7
 801591c:	bd80      	pop	{r7, pc}

0801591e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801591e:	b580      	push	{r7, lr}
 8015920:	b082      	sub	sp, #8
 8015922:	af00      	add	r7, sp, #0
 8015924:	6078      	str	r0, [r7, #4]
 8015926:	460b      	mov	r3, r1
 8015928:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	32ae      	adds	r2, #174	; 0xae
 8015934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015938:	2b00      	cmp	r3, #0
 801593a:	d101      	bne.n	8015940 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801593c:	2303      	movs	r3, #3
 801593e:	e01c      	b.n	801597a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015946:	b2db      	uxtb	r3, r3
 8015948:	2b03      	cmp	r3, #3
 801594a:	d115      	bne.n	8015978 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	32ae      	adds	r2, #174	; 0xae
 8015956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801595a:	6a1b      	ldr	r3, [r3, #32]
 801595c:	2b00      	cmp	r3, #0
 801595e:	d00b      	beq.n	8015978 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	32ae      	adds	r2, #174	; 0xae
 801596a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801596e:	6a1b      	ldr	r3, [r3, #32]
 8015970:	78fa      	ldrb	r2, [r7, #3]
 8015972:	4611      	mov	r1, r2
 8015974:	6878      	ldr	r0, [r7, #4]
 8015976:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015978:	2300      	movs	r3, #0
}
 801597a:	4618      	mov	r0, r3
 801597c:	3708      	adds	r7, #8
 801597e:	46bd      	mov	sp, r7
 8015980:	bd80      	pop	{r7, pc}

08015982 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015982:	b580      	push	{r7, lr}
 8015984:	b082      	sub	sp, #8
 8015986:	af00      	add	r7, sp, #0
 8015988:	6078      	str	r0, [r7, #4]
 801598a:	460b      	mov	r3, r1
 801598c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	32ae      	adds	r2, #174	; 0xae
 8015998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801599c:	2b00      	cmp	r3, #0
 801599e:	d101      	bne.n	80159a4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80159a0:	2303      	movs	r3, #3
 80159a2:	e01c      	b.n	80159de <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80159aa:	b2db      	uxtb	r3, r3
 80159ac:	2b03      	cmp	r3, #3
 80159ae:	d115      	bne.n	80159dc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	32ae      	adds	r2, #174	; 0xae
 80159ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	d00b      	beq.n	80159dc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	32ae      	adds	r2, #174	; 0xae
 80159ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159d4:	78fa      	ldrb	r2, [r7, #3]
 80159d6:	4611      	mov	r1, r2
 80159d8:	6878      	ldr	r0, [r7, #4]
 80159da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80159dc:	2300      	movs	r3, #0
}
 80159de:	4618      	mov	r0, r3
 80159e0:	3708      	adds	r7, #8
 80159e2:	46bd      	mov	sp, r7
 80159e4:	bd80      	pop	{r7, pc}

080159e6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80159e6:	b480      	push	{r7}
 80159e8:	b083      	sub	sp, #12
 80159ea:	af00      	add	r7, sp, #0
 80159ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80159ee:	2300      	movs	r3, #0
}
 80159f0:	4618      	mov	r0, r3
 80159f2:	370c      	adds	r7, #12
 80159f4:	46bd      	mov	sp, r7
 80159f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159fa:	4770      	bx	lr

080159fc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80159fc:	b580      	push	{r7, lr}
 80159fe:	b084      	sub	sp, #16
 8015a00:	af00      	add	r7, sp, #0
 8015a02:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8015a04:	2300      	movs	r3, #0
 8015a06:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	2201      	movs	r2, #1
 8015a0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d00e      	beq.n	8015a38 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a20:	685b      	ldr	r3, [r3, #4]
 8015a22:	687a      	ldr	r2, [r7, #4]
 8015a24:	6852      	ldr	r2, [r2, #4]
 8015a26:	b2d2      	uxtb	r2, r2
 8015a28:	4611      	mov	r1, r2
 8015a2a:	6878      	ldr	r0, [r7, #4]
 8015a2c:	4798      	blx	r3
 8015a2e:	4603      	mov	r3, r0
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d001      	beq.n	8015a38 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8015a34:	2303      	movs	r3, #3
 8015a36:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8015a3a:	4618      	mov	r0, r3
 8015a3c:	3710      	adds	r7, #16
 8015a3e:	46bd      	mov	sp, r7
 8015a40:	bd80      	pop	{r7, pc}

08015a42 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015a42:	b480      	push	{r7}
 8015a44:	b083      	sub	sp, #12
 8015a46:	af00      	add	r7, sp, #0
 8015a48:	6078      	str	r0, [r7, #4]
 8015a4a:	460b      	mov	r3, r1
 8015a4c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015a4e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015a50:	4618      	mov	r0, r3
 8015a52:	370c      	adds	r7, #12
 8015a54:	46bd      	mov	sp, r7
 8015a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a5a:	4770      	bx	lr

08015a5c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015a5c:	b480      	push	{r7}
 8015a5e:	b083      	sub	sp, #12
 8015a60:	af00      	add	r7, sp, #0
 8015a62:	6078      	str	r0, [r7, #4]
 8015a64:	460b      	mov	r3, r1
 8015a66:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015a68:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015a6a:	4618      	mov	r0, r3
 8015a6c:	370c      	adds	r7, #12
 8015a6e:	46bd      	mov	sp, r7
 8015a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a74:	4770      	bx	lr

08015a76 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8015a76:	b580      	push	{r7, lr}
 8015a78:	b086      	sub	sp, #24
 8015a7a:	af00      	add	r7, sp, #0
 8015a7c:	6078      	str	r0, [r7, #4]
 8015a7e:	460b      	mov	r3, r1
 8015a80:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8015a8a:	2300      	movs	r3, #0
 8015a8c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8015a8e:	68fb      	ldr	r3, [r7, #12]
 8015a90:	885b      	ldrh	r3, [r3, #2]
 8015a92:	b29a      	uxth	r2, r3
 8015a94:	68fb      	ldr	r3, [r7, #12]
 8015a96:	781b      	ldrb	r3, [r3, #0]
 8015a98:	b29b      	uxth	r3, r3
 8015a9a:	429a      	cmp	r2, r3
 8015a9c:	d920      	bls.n	8015ae0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8015a9e:	68fb      	ldr	r3, [r7, #12]
 8015aa0:	781b      	ldrb	r3, [r3, #0]
 8015aa2:	b29b      	uxth	r3, r3
 8015aa4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8015aa6:	e013      	b.n	8015ad0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8015aa8:	f107 030a 	add.w	r3, r7, #10
 8015aac:	4619      	mov	r1, r3
 8015aae:	6978      	ldr	r0, [r7, #20]
 8015ab0:	f000 f81b 	bl	8015aea <USBD_GetNextDesc>
 8015ab4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8015ab6:	697b      	ldr	r3, [r7, #20]
 8015ab8:	785b      	ldrb	r3, [r3, #1]
 8015aba:	2b05      	cmp	r3, #5
 8015abc:	d108      	bne.n	8015ad0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8015abe:	697b      	ldr	r3, [r7, #20]
 8015ac0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8015ac2:	693b      	ldr	r3, [r7, #16]
 8015ac4:	789b      	ldrb	r3, [r3, #2]
 8015ac6:	78fa      	ldrb	r2, [r7, #3]
 8015ac8:	429a      	cmp	r2, r3
 8015aca:	d008      	beq.n	8015ade <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8015acc:	2300      	movs	r3, #0
 8015ace:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8015ad0:	68fb      	ldr	r3, [r7, #12]
 8015ad2:	885b      	ldrh	r3, [r3, #2]
 8015ad4:	b29a      	uxth	r2, r3
 8015ad6:	897b      	ldrh	r3, [r7, #10]
 8015ad8:	429a      	cmp	r2, r3
 8015ada:	d8e5      	bhi.n	8015aa8 <USBD_GetEpDesc+0x32>
 8015adc:	e000      	b.n	8015ae0 <USBD_GetEpDesc+0x6a>
          break;
 8015ade:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8015ae0:	693b      	ldr	r3, [r7, #16]
}
 8015ae2:	4618      	mov	r0, r3
 8015ae4:	3718      	adds	r7, #24
 8015ae6:	46bd      	mov	sp, r7
 8015ae8:	bd80      	pop	{r7, pc}

08015aea <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8015aea:	b480      	push	{r7}
 8015aec:	b085      	sub	sp, #20
 8015aee:	af00      	add	r7, sp, #0
 8015af0:	6078      	str	r0, [r7, #4]
 8015af2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8015af8:	683b      	ldr	r3, [r7, #0]
 8015afa:	881a      	ldrh	r2, [r3, #0]
 8015afc:	68fb      	ldr	r3, [r7, #12]
 8015afe:	781b      	ldrb	r3, [r3, #0]
 8015b00:	b29b      	uxth	r3, r3
 8015b02:	4413      	add	r3, r2
 8015b04:	b29a      	uxth	r2, r3
 8015b06:	683b      	ldr	r3, [r7, #0]
 8015b08:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8015b0a:	68fb      	ldr	r3, [r7, #12]
 8015b0c:	781b      	ldrb	r3, [r3, #0]
 8015b0e:	461a      	mov	r2, r3
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	4413      	add	r3, r2
 8015b14:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8015b16:	68fb      	ldr	r3, [r7, #12]
}
 8015b18:	4618      	mov	r0, r3
 8015b1a:	3714      	adds	r7, #20
 8015b1c:	46bd      	mov	sp, r7
 8015b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b22:	4770      	bx	lr

08015b24 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015b24:	b480      	push	{r7}
 8015b26:	b087      	sub	sp, #28
 8015b28:	af00      	add	r7, sp, #0
 8015b2a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015b30:	697b      	ldr	r3, [r7, #20]
 8015b32:	781b      	ldrb	r3, [r3, #0]
 8015b34:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8015b36:	697b      	ldr	r3, [r7, #20]
 8015b38:	3301      	adds	r3, #1
 8015b3a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015b3c:	697b      	ldr	r3, [r7, #20]
 8015b3e:	781b      	ldrb	r3, [r3, #0]
 8015b40:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015b42:	8a3b      	ldrh	r3, [r7, #16]
 8015b44:	021b      	lsls	r3, r3, #8
 8015b46:	b21a      	sxth	r2, r3
 8015b48:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015b4c:	4313      	orrs	r3, r2
 8015b4e:	b21b      	sxth	r3, r3
 8015b50:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015b52:	89fb      	ldrh	r3, [r7, #14]
}
 8015b54:	4618      	mov	r0, r3
 8015b56:	371c      	adds	r7, #28
 8015b58:	46bd      	mov	sp, r7
 8015b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b5e:	4770      	bx	lr

08015b60 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015b60:	b580      	push	{r7, lr}
 8015b62:	b084      	sub	sp, #16
 8015b64:	af00      	add	r7, sp, #0
 8015b66:	6078      	str	r0, [r7, #4]
 8015b68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015b6a:	2300      	movs	r3, #0
 8015b6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015b6e:	683b      	ldr	r3, [r7, #0]
 8015b70:	781b      	ldrb	r3, [r3, #0]
 8015b72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015b76:	2b40      	cmp	r3, #64	; 0x40
 8015b78:	d005      	beq.n	8015b86 <USBD_StdDevReq+0x26>
 8015b7a:	2b40      	cmp	r3, #64	; 0x40
 8015b7c:	d857      	bhi.n	8015c2e <USBD_StdDevReq+0xce>
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d00f      	beq.n	8015ba2 <USBD_StdDevReq+0x42>
 8015b82:	2b20      	cmp	r3, #32
 8015b84:	d153      	bne.n	8015c2e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	32ae      	adds	r2, #174	; 0xae
 8015b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b94:	689b      	ldr	r3, [r3, #8]
 8015b96:	6839      	ldr	r1, [r7, #0]
 8015b98:	6878      	ldr	r0, [r7, #4]
 8015b9a:	4798      	blx	r3
 8015b9c:	4603      	mov	r3, r0
 8015b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8015ba0:	e04a      	b.n	8015c38 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015ba2:	683b      	ldr	r3, [r7, #0]
 8015ba4:	785b      	ldrb	r3, [r3, #1]
 8015ba6:	2b09      	cmp	r3, #9
 8015ba8:	d83b      	bhi.n	8015c22 <USBD_StdDevReq+0xc2>
 8015baa:	a201      	add	r2, pc, #4	; (adr r2, 8015bb0 <USBD_StdDevReq+0x50>)
 8015bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015bb0:	08015c05 	.word	0x08015c05
 8015bb4:	08015c19 	.word	0x08015c19
 8015bb8:	08015c23 	.word	0x08015c23
 8015bbc:	08015c0f 	.word	0x08015c0f
 8015bc0:	08015c23 	.word	0x08015c23
 8015bc4:	08015be3 	.word	0x08015be3
 8015bc8:	08015bd9 	.word	0x08015bd9
 8015bcc:	08015c23 	.word	0x08015c23
 8015bd0:	08015bfb 	.word	0x08015bfb
 8015bd4:	08015bed 	.word	0x08015bed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015bd8:	6839      	ldr	r1, [r7, #0]
 8015bda:	6878      	ldr	r0, [r7, #4]
 8015bdc:	f000 fa3c 	bl	8016058 <USBD_GetDescriptor>
          break;
 8015be0:	e024      	b.n	8015c2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8015be2:	6839      	ldr	r1, [r7, #0]
 8015be4:	6878      	ldr	r0, [r7, #4]
 8015be6:	f000 fba1 	bl	801632c <USBD_SetAddress>
          break;
 8015bea:	e01f      	b.n	8015c2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8015bec:	6839      	ldr	r1, [r7, #0]
 8015bee:	6878      	ldr	r0, [r7, #4]
 8015bf0:	f000 fbe0 	bl	80163b4 <USBD_SetConfig>
 8015bf4:	4603      	mov	r3, r0
 8015bf6:	73fb      	strb	r3, [r7, #15]
          break;
 8015bf8:	e018      	b.n	8015c2c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8015bfa:	6839      	ldr	r1, [r7, #0]
 8015bfc:	6878      	ldr	r0, [r7, #4]
 8015bfe:	f000 fc83 	bl	8016508 <USBD_GetConfig>
          break;
 8015c02:	e013      	b.n	8015c2c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8015c04:	6839      	ldr	r1, [r7, #0]
 8015c06:	6878      	ldr	r0, [r7, #4]
 8015c08:	f000 fcb4 	bl	8016574 <USBD_GetStatus>
          break;
 8015c0c:	e00e      	b.n	8015c2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8015c0e:	6839      	ldr	r1, [r7, #0]
 8015c10:	6878      	ldr	r0, [r7, #4]
 8015c12:	f000 fce3 	bl	80165dc <USBD_SetFeature>
          break;
 8015c16:	e009      	b.n	8015c2c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015c18:	6839      	ldr	r1, [r7, #0]
 8015c1a:	6878      	ldr	r0, [r7, #4]
 8015c1c:	f000 fd07 	bl	801662e <USBD_ClrFeature>
          break;
 8015c20:	e004      	b.n	8015c2c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8015c22:	6839      	ldr	r1, [r7, #0]
 8015c24:	6878      	ldr	r0, [r7, #4]
 8015c26:	f000 fd5e 	bl	80166e6 <USBD_CtlError>
          break;
 8015c2a:	bf00      	nop
      }
      break;
 8015c2c:	e004      	b.n	8015c38 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8015c2e:	6839      	ldr	r1, [r7, #0]
 8015c30:	6878      	ldr	r0, [r7, #4]
 8015c32:	f000 fd58 	bl	80166e6 <USBD_CtlError>
      break;
 8015c36:	bf00      	nop
  }

  return ret;
 8015c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c3a:	4618      	mov	r0, r3
 8015c3c:	3710      	adds	r7, #16
 8015c3e:	46bd      	mov	sp, r7
 8015c40:	bd80      	pop	{r7, pc}
 8015c42:	bf00      	nop

08015c44 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015c44:	b580      	push	{r7, lr}
 8015c46:	b084      	sub	sp, #16
 8015c48:	af00      	add	r7, sp, #0
 8015c4a:	6078      	str	r0, [r7, #4]
 8015c4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015c4e:	2300      	movs	r3, #0
 8015c50:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015c52:	683b      	ldr	r3, [r7, #0]
 8015c54:	781b      	ldrb	r3, [r3, #0]
 8015c56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015c5a:	2b40      	cmp	r3, #64	; 0x40
 8015c5c:	d005      	beq.n	8015c6a <USBD_StdItfReq+0x26>
 8015c5e:	2b40      	cmp	r3, #64	; 0x40
 8015c60:	d852      	bhi.n	8015d08 <USBD_StdItfReq+0xc4>
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d001      	beq.n	8015c6a <USBD_StdItfReq+0x26>
 8015c66:	2b20      	cmp	r3, #32
 8015c68:	d14e      	bne.n	8015d08 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015c70:	b2db      	uxtb	r3, r3
 8015c72:	3b01      	subs	r3, #1
 8015c74:	2b02      	cmp	r3, #2
 8015c76:	d840      	bhi.n	8015cfa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015c78:	683b      	ldr	r3, [r7, #0]
 8015c7a:	889b      	ldrh	r3, [r3, #4]
 8015c7c:	b2db      	uxtb	r3, r3
 8015c7e:	2b01      	cmp	r3, #1
 8015c80:	d836      	bhi.n	8015cf0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8015c82:	683b      	ldr	r3, [r7, #0]
 8015c84:	889b      	ldrh	r3, [r3, #4]
 8015c86:	b2db      	uxtb	r3, r3
 8015c88:	4619      	mov	r1, r3
 8015c8a:	6878      	ldr	r0, [r7, #4]
 8015c8c:	f7ff fed9 	bl	8015a42 <USBD_CoreFindIF>
 8015c90:	4603      	mov	r3, r0
 8015c92:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015c94:	7bbb      	ldrb	r3, [r7, #14]
 8015c96:	2bff      	cmp	r3, #255	; 0xff
 8015c98:	d01d      	beq.n	8015cd6 <USBD_StdItfReq+0x92>
 8015c9a:	7bbb      	ldrb	r3, [r7, #14]
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d11a      	bne.n	8015cd6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8015ca0:	7bba      	ldrb	r2, [r7, #14]
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	32ae      	adds	r2, #174	; 0xae
 8015ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015caa:	689b      	ldr	r3, [r3, #8]
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d00f      	beq.n	8015cd0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8015cb0:	7bba      	ldrb	r2, [r7, #14]
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015cb8:	7bba      	ldrb	r2, [r7, #14]
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	32ae      	adds	r2, #174	; 0xae
 8015cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cc2:	689b      	ldr	r3, [r3, #8]
 8015cc4:	6839      	ldr	r1, [r7, #0]
 8015cc6:	6878      	ldr	r0, [r7, #4]
 8015cc8:	4798      	blx	r3
 8015cca:	4603      	mov	r3, r0
 8015ccc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015cce:	e004      	b.n	8015cda <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8015cd0:	2303      	movs	r3, #3
 8015cd2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015cd4:	e001      	b.n	8015cda <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8015cd6:	2303      	movs	r3, #3
 8015cd8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8015cda:	683b      	ldr	r3, [r7, #0]
 8015cdc:	88db      	ldrh	r3, [r3, #6]
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d110      	bne.n	8015d04 <USBD_StdItfReq+0xc0>
 8015ce2:	7bfb      	ldrb	r3, [r7, #15]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d10d      	bne.n	8015d04 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8015ce8:	6878      	ldr	r0, [r7, #4]
 8015cea:	f000 fdc7 	bl	801687c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8015cee:	e009      	b.n	8015d04 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8015cf0:	6839      	ldr	r1, [r7, #0]
 8015cf2:	6878      	ldr	r0, [r7, #4]
 8015cf4:	f000 fcf7 	bl	80166e6 <USBD_CtlError>
          break;
 8015cf8:	e004      	b.n	8015d04 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8015cfa:	6839      	ldr	r1, [r7, #0]
 8015cfc:	6878      	ldr	r0, [r7, #4]
 8015cfe:	f000 fcf2 	bl	80166e6 <USBD_CtlError>
          break;
 8015d02:	e000      	b.n	8015d06 <USBD_StdItfReq+0xc2>
          break;
 8015d04:	bf00      	nop
      }
      break;
 8015d06:	e004      	b.n	8015d12 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8015d08:	6839      	ldr	r1, [r7, #0]
 8015d0a:	6878      	ldr	r0, [r7, #4]
 8015d0c:	f000 fceb 	bl	80166e6 <USBD_CtlError>
      break;
 8015d10:	bf00      	nop
  }

  return ret;
 8015d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d14:	4618      	mov	r0, r3
 8015d16:	3710      	adds	r7, #16
 8015d18:	46bd      	mov	sp, r7
 8015d1a:	bd80      	pop	{r7, pc}

08015d1c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015d1c:	b580      	push	{r7, lr}
 8015d1e:	b084      	sub	sp, #16
 8015d20:	af00      	add	r7, sp, #0
 8015d22:	6078      	str	r0, [r7, #4]
 8015d24:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8015d26:	2300      	movs	r3, #0
 8015d28:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8015d2a:	683b      	ldr	r3, [r7, #0]
 8015d2c:	889b      	ldrh	r3, [r3, #4]
 8015d2e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015d30:	683b      	ldr	r3, [r7, #0]
 8015d32:	781b      	ldrb	r3, [r3, #0]
 8015d34:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015d38:	2b40      	cmp	r3, #64	; 0x40
 8015d3a:	d007      	beq.n	8015d4c <USBD_StdEPReq+0x30>
 8015d3c:	2b40      	cmp	r3, #64	; 0x40
 8015d3e:	f200 817f 	bhi.w	8016040 <USBD_StdEPReq+0x324>
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d02a      	beq.n	8015d9c <USBD_StdEPReq+0x80>
 8015d46:	2b20      	cmp	r3, #32
 8015d48:	f040 817a 	bne.w	8016040 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8015d4c:	7bbb      	ldrb	r3, [r7, #14]
 8015d4e:	4619      	mov	r1, r3
 8015d50:	6878      	ldr	r0, [r7, #4]
 8015d52:	f7ff fe83 	bl	8015a5c <USBD_CoreFindEP>
 8015d56:	4603      	mov	r3, r0
 8015d58:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015d5a:	7b7b      	ldrb	r3, [r7, #13]
 8015d5c:	2bff      	cmp	r3, #255	; 0xff
 8015d5e:	f000 8174 	beq.w	801604a <USBD_StdEPReq+0x32e>
 8015d62:	7b7b      	ldrb	r3, [r7, #13]
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	f040 8170 	bne.w	801604a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8015d6a:	7b7a      	ldrb	r2, [r7, #13]
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8015d72:	7b7a      	ldrb	r2, [r7, #13]
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	32ae      	adds	r2, #174	; 0xae
 8015d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d7c:	689b      	ldr	r3, [r3, #8]
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	f000 8163 	beq.w	801604a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015d84:	7b7a      	ldrb	r2, [r7, #13]
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	32ae      	adds	r2, #174	; 0xae
 8015d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d8e:	689b      	ldr	r3, [r3, #8]
 8015d90:	6839      	ldr	r1, [r7, #0]
 8015d92:	6878      	ldr	r0, [r7, #4]
 8015d94:	4798      	blx	r3
 8015d96:	4603      	mov	r3, r0
 8015d98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8015d9a:	e156      	b.n	801604a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015d9c:	683b      	ldr	r3, [r7, #0]
 8015d9e:	785b      	ldrb	r3, [r3, #1]
 8015da0:	2b03      	cmp	r3, #3
 8015da2:	d008      	beq.n	8015db6 <USBD_StdEPReq+0x9a>
 8015da4:	2b03      	cmp	r3, #3
 8015da6:	f300 8145 	bgt.w	8016034 <USBD_StdEPReq+0x318>
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	f000 809b 	beq.w	8015ee6 <USBD_StdEPReq+0x1ca>
 8015db0:	2b01      	cmp	r3, #1
 8015db2:	d03c      	beq.n	8015e2e <USBD_StdEPReq+0x112>
 8015db4:	e13e      	b.n	8016034 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015dbc:	b2db      	uxtb	r3, r3
 8015dbe:	2b02      	cmp	r3, #2
 8015dc0:	d002      	beq.n	8015dc8 <USBD_StdEPReq+0xac>
 8015dc2:	2b03      	cmp	r3, #3
 8015dc4:	d016      	beq.n	8015df4 <USBD_StdEPReq+0xd8>
 8015dc6:	e02c      	b.n	8015e22 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015dc8:	7bbb      	ldrb	r3, [r7, #14]
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d00d      	beq.n	8015dea <USBD_StdEPReq+0xce>
 8015dce:	7bbb      	ldrb	r3, [r7, #14]
 8015dd0:	2b80      	cmp	r3, #128	; 0x80
 8015dd2:	d00a      	beq.n	8015dea <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015dd4:	7bbb      	ldrb	r3, [r7, #14]
 8015dd6:	4619      	mov	r1, r3
 8015dd8:	6878      	ldr	r0, [r7, #4]
 8015dda:	f001 f9d9 	bl	8017190 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015dde:	2180      	movs	r1, #128	; 0x80
 8015de0:	6878      	ldr	r0, [r7, #4]
 8015de2:	f001 f9d5 	bl	8017190 <USBD_LL_StallEP>
 8015de6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015de8:	e020      	b.n	8015e2c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8015dea:	6839      	ldr	r1, [r7, #0]
 8015dec:	6878      	ldr	r0, [r7, #4]
 8015dee:	f000 fc7a 	bl	80166e6 <USBD_CtlError>
              break;
 8015df2:	e01b      	b.n	8015e2c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015df4:	683b      	ldr	r3, [r7, #0]
 8015df6:	885b      	ldrh	r3, [r3, #2]
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d10e      	bne.n	8015e1a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015dfc:	7bbb      	ldrb	r3, [r7, #14]
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d00b      	beq.n	8015e1a <USBD_StdEPReq+0xfe>
 8015e02:	7bbb      	ldrb	r3, [r7, #14]
 8015e04:	2b80      	cmp	r3, #128	; 0x80
 8015e06:	d008      	beq.n	8015e1a <USBD_StdEPReq+0xfe>
 8015e08:	683b      	ldr	r3, [r7, #0]
 8015e0a:	88db      	ldrh	r3, [r3, #6]
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d104      	bne.n	8015e1a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015e10:	7bbb      	ldrb	r3, [r7, #14]
 8015e12:	4619      	mov	r1, r3
 8015e14:	6878      	ldr	r0, [r7, #4]
 8015e16:	f001 f9bb 	bl	8017190 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8015e1a:	6878      	ldr	r0, [r7, #4]
 8015e1c:	f000 fd2e 	bl	801687c <USBD_CtlSendStatus>

              break;
 8015e20:	e004      	b.n	8015e2c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8015e22:	6839      	ldr	r1, [r7, #0]
 8015e24:	6878      	ldr	r0, [r7, #4]
 8015e26:	f000 fc5e 	bl	80166e6 <USBD_CtlError>
              break;
 8015e2a:	bf00      	nop
          }
          break;
 8015e2c:	e107      	b.n	801603e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015e34:	b2db      	uxtb	r3, r3
 8015e36:	2b02      	cmp	r3, #2
 8015e38:	d002      	beq.n	8015e40 <USBD_StdEPReq+0x124>
 8015e3a:	2b03      	cmp	r3, #3
 8015e3c:	d016      	beq.n	8015e6c <USBD_StdEPReq+0x150>
 8015e3e:	e04b      	b.n	8015ed8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015e40:	7bbb      	ldrb	r3, [r7, #14]
 8015e42:	2b00      	cmp	r3, #0
 8015e44:	d00d      	beq.n	8015e62 <USBD_StdEPReq+0x146>
 8015e46:	7bbb      	ldrb	r3, [r7, #14]
 8015e48:	2b80      	cmp	r3, #128	; 0x80
 8015e4a:	d00a      	beq.n	8015e62 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015e4c:	7bbb      	ldrb	r3, [r7, #14]
 8015e4e:	4619      	mov	r1, r3
 8015e50:	6878      	ldr	r0, [r7, #4]
 8015e52:	f001 f99d 	bl	8017190 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015e56:	2180      	movs	r1, #128	; 0x80
 8015e58:	6878      	ldr	r0, [r7, #4]
 8015e5a:	f001 f999 	bl	8017190 <USBD_LL_StallEP>
 8015e5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015e60:	e040      	b.n	8015ee4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8015e62:	6839      	ldr	r1, [r7, #0]
 8015e64:	6878      	ldr	r0, [r7, #4]
 8015e66:	f000 fc3e 	bl	80166e6 <USBD_CtlError>
              break;
 8015e6a:	e03b      	b.n	8015ee4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015e6c:	683b      	ldr	r3, [r7, #0]
 8015e6e:	885b      	ldrh	r3, [r3, #2]
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d136      	bne.n	8015ee2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015e74:	7bbb      	ldrb	r3, [r7, #14]
 8015e76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d004      	beq.n	8015e88 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015e7e:	7bbb      	ldrb	r3, [r7, #14]
 8015e80:	4619      	mov	r1, r3
 8015e82:	6878      	ldr	r0, [r7, #4]
 8015e84:	f001 f9a3 	bl	80171ce <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015e88:	6878      	ldr	r0, [r7, #4]
 8015e8a:	f000 fcf7 	bl	801687c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8015e8e:	7bbb      	ldrb	r3, [r7, #14]
 8015e90:	4619      	mov	r1, r3
 8015e92:	6878      	ldr	r0, [r7, #4]
 8015e94:	f7ff fde2 	bl	8015a5c <USBD_CoreFindEP>
 8015e98:	4603      	mov	r3, r0
 8015e9a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015e9c:	7b7b      	ldrb	r3, [r7, #13]
 8015e9e:	2bff      	cmp	r3, #255	; 0xff
 8015ea0:	d01f      	beq.n	8015ee2 <USBD_StdEPReq+0x1c6>
 8015ea2:	7b7b      	ldrb	r3, [r7, #13]
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d11c      	bne.n	8015ee2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8015ea8:	7b7a      	ldrb	r2, [r7, #13]
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8015eb0:	7b7a      	ldrb	r2, [r7, #13]
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	32ae      	adds	r2, #174	; 0xae
 8015eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015eba:	689b      	ldr	r3, [r3, #8]
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d010      	beq.n	8015ee2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015ec0:	7b7a      	ldrb	r2, [r7, #13]
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	32ae      	adds	r2, #174	; 0xae
 8015ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015eca:	689b      	ldr	r3, [r3, #8]
 8015ecc:	6839      	ldr	r1, [r7, #0]
 8015ece:	6878      	ldr	r0, [r7, #4]
 8015ed0:	4798      	blx	r3
 8015ed2:	4603      	mov	r3, r0
 8015ed4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8015ed6:	e004      	b.n	8015ee2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8015ed8:	6839      	ldr	r1, [r7, #0]
 8015eda:	6878      	ldr	r0, [r7, #4]
 8015edc:	f000 fc03 	bl	80166e6 <USBD_CtlError>
              break;
 8015ee0:	e000      	b.n	8015ee4 <USBD_StdEPReq+0x1c8>
              break;
 8015ee2:	bf00      	nop
          }
          break;
 8015ee4:	e0ab      	b.n	801603e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015eec:	b2db      	uxtb	r3, r3
 8015eee:	2b02      	cmp	r3, #2
 8015ef0:	d002      	beq.n	8015ef8 <USBD_StdEPReq+0x1dc>
 8015ef2:	2b03      	cmp	r3, #3
 8015ef4:	d032      	beq.n	8015f5c <USBD_StdEPReq+0x240>
 8015ef6:	e097      	b.n	8016028 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015ef8:	7bbb      	ldrb	r3, [r7, #14]
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d007      	beq.n	8015f0e <USBD_StdEPReq+0x1f2>
 8015efe:	7bbb      	ldrb	r3, [r7, #14]
 8015f00:	2b80      	cmp	r3, #128	; 0x80
 8015f02:	d004      	beq.n	8015f0e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8015f04:	6839      	ldr	r1, [r7, #0]
 8015f06:	6878      	ldr	r0, [r7, #4]
 8015f08:	f000 fbed 	bl	80166e6 <USBD_CtlError>
                break;
 8015f0c:	e091      	b.n	8016032 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015f0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	da0b      	bge.n	8015f2e <USBD_StdEPReq+0x212>
 8015f16:	7bbb      	ldrb	r3, [r7, #14]
 8015f18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015f1c:	4613      	mov	r3, r2
 8015f1e:	009b      	lsls	r3, r3, #2
 8015f20:	4413      	add	r3, r2
 8015f22:	009b      	lsls	r3, r3, #2
 8015f24:	3310      	adds	r3, #16
 8015f26:	687a      	ldr	r2, [r7, #4]
 8015f28:	4413      	add	r3, r2
 8015f2a:	3304      	adds	r3, #4
 8015f2c:	e00b      	b.n	8015f46 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015f2e:	7bbb      	ldrb	r3, [r7, #14]
 8015f30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015f34:	4613      	mov	r3, r2
 8015f36:	009b      	lsls	r3, r3, #2
 8015f38:	4413      	add	r3, r2
 8015f3a:	009b      	lsls	r3, r3, #2
 8015f3c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015f40:	687a      	ldr	r2, [r7, #4]
 8015f42:	4413      	add	r3, r2
 8015f44:	3304      	adds	r3, #4
 8015f46:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015f48:	68bb      	ldr	r3, [r7, #8]
 8015f4a:	2200      	movs	r2, #0
 8015f4c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015f4e:	68bb      	ldr	r3, [r7, #8]
 8015f50:	2202      	movs	r2, #2
 8015f52:	4619      	mov	r1, r3
 8015f54:	6878      	ldr	r0, [r7, #4]
 8015f56:	f000 fc37 	bl	80167c8 <USBD_CtlSendData>
              break;
 8015f5a:	e06a      	b.n	8016032 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015f5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	da11      	bge.n	8015f88 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015f64:	7bbb      	ldrb	r3, [r7, #14]
 8015f66:	f003 020f 	and.w	r2, r3, #15
 8015f6a:	6879      	ldr	r1, [r7, #4]
 8015f6c:	4613      	mov	r3, r2
 8015f6e:	009b      	lsls	r3, r3, #2
 8015f70:	4413      	add	r3, r2
 8015f72:	009b      	lsls	r3, r3, #2
 8015f74:	440b      	add	r3, r1
 8015f76:	3324      	adds	r3, #36	; 0x24
 8015f78:	881b      	ldrh	r3, [r3, #0]
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d117      	bne.n	8015fae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015f7e:	6839      	ldr	r1, [r7, #0]
 8015f80:	6878      	ldr	r0, [r7, #4]
 8015f82:	f000 fbb0 	bl	80166e6 <USBD_CtlError>
                  break;
 8015f86:	e054      	b.n	8016032 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015f88:	7bbb      	ldrb	r3, [r7, #14]
 8015f8a:	f003 020f 	and.w	r2, r3, #15
 8015f8e:	6879      	ldr	r1, [r7, #4]
 8015f90:	4613      	mov	r3, r2
 8015f92:	009b      	lsls	r3, r3, #2
 8015f94:	4413      	add	r3, r2
 8015f96:	009b      	lsls	r3, r3, #2
 8015f98:	440b      	add	r3, r1
 8015f9a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015f9e:	881b      	ldrh	r3, [r3, #0]
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d104      	bne.n	8015fae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015fa4:	6839      	ldr	r1, [r7, #0]
 8015fa6:	6878      	ldr	r0, [r7, #4]
 8015fa8:	f000 fb9d 	bl	80166e6 <USBD_CtlError>
                  break;
 8015fac:	e041      	b.n	8016032 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015fae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	da0b      	bge.n	8015fce <USBD_StdEPReq+0x2b2>
 8015fb6:	7bbb      	ldrb	r3, [r7, #14]
 8015fb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015fbc:	4613      	mov	r3, r2
 8015fbe:	009b      	lsls	r3, r3, #2
 8015fc0:	4413      	add	r3, r2
 8015fc2:	009b      	lsls	r3, r3, #2
 8015fc4:	3310      	adds	r3, #16
 8015fc6:	687a      	ldr	r2, [r7, #4]
 8015fc8:	4413      	add	r3, r2
 8015fca:	3304      	adds	r3, #4
 8015fcc:	e00b      	b.n	8015fe6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015fce:	7bbb      	ldrb	r3, [r7, #14]
 8015fd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015fd4:	4613      	mov	r3, r2
 8015fd6:	009b      	lsls	r3, r3, #2
 8015fd8:	4413      	add	r3, r2
 8015fda:	009b      	lsls	r3, r3, #2
 8015fdc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015fe0:	687a      	ldr	r2, [r7, #4]
 8015fe2:	4413      	add	r3, r2
 8015fe4:	3304      	adds	r3, #4
 8015fe6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015fe8:	7bbb      	ldrb	r3, [r7, #14]
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d002      	beq.n	8015ff4 <USBD_StdEPReq+0x2d8>
 8015fee:	7bbb      	ldrb	r3, [r7, #14]
 8015ff0:	2b80      	cmp	r3, #128	; 0x80
 8015ff2:	d103      	bne.n	8015ffc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8015ff4:	68bb      	ldr	r3, [r7, #8]
 8015ff6:	2200      	movs	r2, #0
 8015ff8:	601a      	str	r2, [r3, #0]
 8015ffa:	e00e      	b.n	801601a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015ffc:	7bbb      	ldrb	r3, [r7, #14]
 8015ffe:	4619      	mov	r1, r3
 8016000:	6878      	ldr	r0, [r7, #4]
 8016002:	f001 f903 	bl	801720c <USBD_LL_IsStallEP>
 8016006:	4603      	mov	r3, r0
 8016008:	2b00      	cmp	r3, #0
 801600a:	d003      	beq.n	8016014 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 801600c:	68bb      	ldr	r3, [r7, #8]
 801600e:	2201      	movs	r2, #1
 8016010:	601a      	str	r2, [r3, #0]
 8016012:	e002      	b.n	801601a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8016014:	68bb      	ldr	r3, [r7, #8]
 8016016:	2200      	movs	r2, #0
 8016018:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801601a:	68bb      	ldr	r3, [r7, #8]
 801601c:	2202      	movs	r2, #2
 801601e:	4619      	mov	r1, r3
 8016020:	6878      	ldr	r0, [r7, #4]
 8016022:	f000 fbd1 	bl	80167c8 <USBD_CtlSendData>
              break;
 8016026:	e004      	b.n	8016032 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8016028:	6839      	ldr	r1, [r7, #0]
 801602a:	6878      	ldr	r0, [r7, #4]
 801602c:	f000 fb5b 	bl	80166e6 <USBD_CtlError>
              break;
 8016030:	bf00      	nop
          }
          break;
 8016032:	e004      	b.n	801603e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8016034:	6839      	ldr	r1, [r7, #0]
 8016036:	6878      	ldr	r0, [r7, #4]
 8016038:	f000 fb55 	bl	80166e6 <USBD_CtlError>
          break;
 801603c:	bf00      	nop
      }
      break;
 801603e:	e005      	b.n	801604c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8016040:	6839      	ldr	r1, [r7, #0]
 8016042:	6878      	ldr	r0, [r7, #4]
 8016044:	f000 fb4f 	bl	80166e6 <USBD_CtlError>
      break;
 8016048:	e000      	b.n	801604c <USBD_StdEPReq+0x330>
      break;
 801604a:	bf00      	nop
  }

  return ret;
 801604c:	7bfb      	ldrb	r3, [r7, #15]
}
 801604e:	4618      	mov	r0, r3
 8016050:	3710      	adds	r7, #16
 8016052:	46bd      	mov	sp, r7
 8016054:	bd80      	pop	{r7, pc}
	...

08016058 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016058:	b580      	push	{r7, lr}
 801605a:	b084      	sub	sp, #16
 801605c:	af00      	add	r7, sp, #0
 801605e:	6078      	str	r0, [r7, #4]
 8016060:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016062:	2300      	movs	r3, #0
 8016064:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8016066:	2300      	movs	r3, #0
 8016068:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801606a:	2300      	movs	r3, #0
 801606c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801606e:	683b      	ldr	r3, [r7, #0]
 8016070:	885b      	ldrh	r3, [r3, #2]
 8016072:	0a1b      	lsrs	r3, r3, #8
 8016074:	b29b      	uxth	r3, r3
 8016076:	3b01      	subs	r3, #1
 8016078:	2b06      	cmp	r3, #6
 801607a:	f200 8128 	bhi.w	80162ce <USBD_GetDescriptor+0x276>
 801607e:	a201      	add	r2, pc, #4	; (adr r2, 8016084 <USBD_GetDescriptor+0x2c>)
 8016080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016084:	080160a1 	.word	0x080160a1
 8016088:	080160b9 	.word	0x080160b9
 801608c:	080160f9 	.word	0x080160f9
 8016090:	080162cf 	.word	0x080162cf
 8016094:	080162cf 	.word	0x080162cf
 8016098:	0801626f 	.word	0x0801626f
 801609c:	0801629b 	.word	0x0801629b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80160a6:	681b      	ldr	r3, [r3, #0]
 80160a8:	687a      	ldr	r2, [r7, #4]
 80160aa:	7c12      	ldrb	r2, [r2, #16]
 80160ac:	f107 0108 	add.w	r1, r7, #8
 80160b0:	4610      	mov	r0, r2
 80160b2:	4798      	blx	r3
 80160b4:	60f8      	str	r0, [r7, #12]
      break;
 80160b6:	e112      	b.n	80162de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	7c1b      	ldrb	r3, [r3, #16]
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d10d      	bne.n	80160dc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80160c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80160c8:	f107 0208 	add.w	r2, r7, #8
 80160cc:	4610      	mov	r0, r2
 80160ce:	4798      	blx	r3
 80160d0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	3301      	adds	r3, #1
 80160d6:	2202      	movs	r2, #2
 80160d8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80160da:	e100      	b.n	80162de <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80160e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80160e4:	f107 0208 	add.w	r2, r7, #8
 80160e8:	4610      	mov	r0, r2
 80160ea:	4798      	blx	r3
 80160ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80160ee:	68fb      	ldr	r3, [r7, #12]
 80160f0:	3301      	adds	r3, #1
 80160f2:	2202      	movs	r2, #2
 80160f4:	701a      	strb	r2, [r3, #0]
      break;
 80160f6:	e0f2      	b.n	80162de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80160f8:	683b      	ldr	r3, [r7, #0]
 80160fa:	885b      	ldrh	r3, [r3, #2]
 80160fc:	b2db      	uxtb	r3, r3
 80160fe:	2b05      	cmp	r3, #5
 8016100:	f200 80ac 	bhi.w	801625c <USBD_GetDescriptor+0x204>
 8016104:	a201      	add	r2, pc, #4	; (adr r2, 801610c <USBD_GetDescriptor+0xb4>)
 8016106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801610a:	bf00      	nop
 801610c:	08016125 	.word	0x08016125
 8016110:	08016159 	.word	0x08016159
 8016114:	0801618d 	.word	0x0801618d
 8016118:	080161c1 	.word	0x080161c1
 801611c:	080161f5 	.word	0x080161f5
 8016120:	08016229 	.word	0x08016229
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801612a:	685b      	ldr	r3, [r3, #4]
 801612c:	2b00      	cmp	r3, #0
 801612e:	d00b      	beq.n	8016148 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016136:	685b      	ldr	r3, [r3, #4]
 8016138:	687a      	ldr	r2, [r7, #4]
 801613a:	7c12      	ldrb	r2, [r2, #16]
 801613c:	f107 0108 	add.w	r1, r7, #8
 8016140:	4610      	mov	r0, r2
 8016142:	4798      	blx	r3
 8016144:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016146:	e091      	b.n	801626c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016148:	6839      	ldr	r1, [r7, #0]
 801614a:	6878      	ldr	r0, [r7, #4]
 801614c:	f000 facb 	bl	80166e6 <USBD_CtlError>
            err++;
 8016150:	7afb      	ldrb	r3, [r7, #11]
 8016152:	3301      	adds	r3, #1
 8016154:	72fb      	strb	r3, [r7, #11]
          break;
 8016156:	e089      	b.n	801626c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801615e:	689b      	ldr	r3, [r3, #8]
 8016160:	2b00      	cmp	r3, #0
 8016162:	d00b      	beq.n	801617c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801616a:	689b      	ldr	r3, [r3, #8]
 801616c:	687a      	ldr	r2, [r7, #4]
 801616e:	7c12      	ldrb	r2, [r2, #16]
 8016170:	f107 0108 	add.w	r1, r7, #8
 8016174:	4610      	mov	r0, r2
 8016176:	4798      	blx	r3
 8016178:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801617a:	e077      	b.n	801626c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801617c:	6839      	ldr	r1, [r7, #0]
 801617e:	6878      	ldr	r0, [r7, #4]
 8016180:	f000 fab1 	bl	80166e6 <USBD_CtlError>
            err++;
 8016184:	7afb      	ldrb	r3, [r7, #11]
 8016186:	3301      	adds	r3, #1
 8016188:	72fb      	strb	r3, [r7, #11]
          break;
 801618a:	e06f      	b.n	801626c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016192:	68db      	ldr	r3, [r3, #12]
 8016194:	2b00      	cmp	r3, #0
 8016196:	d00b      	beq.n	80161b0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801619e:	68db      	ldr	r3, [r3, #12]
 80161a0:	687a      	ldr	r2, [r7, #4]
 80161a2:	7c12      	ldrb	r2, [r2, #16]
 80161a4:	f107 0108 	add.w	r1, r7, #8
 80161a8:	4610      	mov	r0, r2
 80161aa:	4798      	blx	r3
 80161ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80161ae:	e05d      	b.n	801626c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80161b0:	6839      	ldr	r1, [r7, #0]
 80161b2:	6878      	ldr	r0, [r7, #4]
 80161b4:	f000 fa97 	bl	80166e6 <USBD_CtlError>
            err++;
 80161b8:	7afb      	ldrb	r3, [r7, #11]
 80161ba:	3301      	adds	r3, #1
 80161bc:	72fb      	strb	r3, [r7, #11]
          break;
 80161be:	e055      	b.n	801626c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80161c6:	691b      	ldr	r3, [r3, #16]
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d00b      	beq.n	80161e4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80161d2:	691b      	ldr	r3, [r3, #16]
 80161d4:	687a      	ldr	r2, [r7, #4]
 80161d6:	7c12      	ldrb	r2, [r2, #16]
 80161d8:	f107 0108 	add.w	r1, r7, #8
 80161dc:	4610      	mov	r0, r2
 80161de:	4798      	blx	r3
 80161e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80161e2:	e043      	b.n	801626c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80161e4:	6839      	ldr	r1, [r7, #0]
 80161e6:	6878      	ldr	r0, [r7, #4]
 80161e8:	f000 fa7d 	bl	80166e6 <USBD_CtlError>
            err++;
 80161ec:	7afb      	ldrb	r3, [r7, #11]
 80161ee:	3301      	adds	r3, #1
 80161f0:	72fb      	strb	r3, [r7, #11]
          break;
 80161f2:	e03b      	b.n	801626c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80161fa:	695b      	ldr	r3, [r3, #20]
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d00b      	beq.n	8016218 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016206:	695b      	ldr	r3, [r3, #20]
 8016208:	687a      	ldr	r2, [r7, #4]
 801620a:	7c12      	ldrb	r2, [r2, #16]
 801620c:	f107 0108 	add.w	r1, r7, #8
 8016210:	4610      	mov	r0, r2
 8016212:	4798      	blx	r3
 8016214:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016216:	e029      	b.n	801626c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016218:	6839      	ldr	r1, [r7, #0]
 801621a:	6878      	ldr	r0, [r7, #4]
 801621c:	f000 fa63 	bl	80166e6 <USBD_CtlError>
            err++;
 8016220:	7afb      	ldrb	r3, [r7, #11]
 8016222:	3301      	adds	r3, #1
 8016224:	72fb      	strb	r3, [r7, #11]
          break;
 8016226:	e021      	b.n	801626c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801622e:	699b      	ldr	r3, [r3, #24]
 8016230:	2b00      	cmp	r3, #0
 8016232:	d00b      	beq.n	801624c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801623a:	699b      	ldr	r3, [r3, #24]
 801623c:	687a      	ldr	r2, [r7, #4]
 801623e:	7c12      	ldrb	r2, [r2, #16]
 8016240:	f107 0108 	add.w	r1, r7, #8
 8016244:	4610      	mov	r0, r2
 8016246:	4798      	blx	r3
 8016248:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801624a:	e00f      	b.n	801626c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801624c:	6839      	ldr	r1, [r7, #0]
 801624e:	6878      	ldr	r0, [r7, #4]
 8016250:	f000 fa49 	bl	80166e6 <USBD_CtlError>
            err++;
 8016254:	7afb      	ldrb	r3, [r7, #11]
 8016256:	3301      	adds	r3, #1
 8016258:	72fb      	strb	r3, [r7, #11]
          break;
 801625a:	e007      	b.n	801626c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801625c:	6839      	ldr	r1, [r7, #0]
 801625e:	6878      	ldr	r0, [r7, #4]
 8016260:	f000 fa41 	bl	80166e6 <USBD_CtlError>
          err++;
 8016264:	7afb      	ldrb	r3, [r7, #11]
 8016266:	3301      	adds	r3, #1
 8016268:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801626a:	bf00      	nop
      }
      break;
 801626c:	e037      	b.n	80162de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	7c1b      	ldrb	r3, [r3, #16]
 8016272:	2b00      	cmp	r3, #0
 8016274:	d109      	bne.n	801628a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801627c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801627e:	f107 0208 	add.w	r2, r7, #8
 8016282:	4610      	mov	r0, r2
 8016284:	4798      	blx	r3
 8016286:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016288:	e029      	b.n	80162de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801628a:	6839      	ldr	r1, [r7, #0]
 801628c:	6878      	ldr	r0, [r7, #4]
 801628e:	f000 fa2a 	bl	80166e6 <USBD_CtlError>
        err++;
 8016292:	7afb      	ldrb	r3, [r7, #11]
 8016294:	3301      	adds	r3, #1
 8016296:	72fb      	strb	r3, [r7, #11]
      break;
 8016298:	e021      	b.n	80162de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	7c1b      	ldrb	r3, [r3, #16]
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d10d      	bne.n	80162be <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80162a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80162aa:	f107 0208 	add.w	r2, r7, #8
 80162ae:	4610      	mov	r0, r2
 80162b0:	4798      	blx	r3
 80162b2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80162b4:	68fb      	ldr	r3, [r7, #12]
 80162b6:	3301      	adds	r3, #1
 80162b8:	2207      	movs	r2, #7
 80162ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80162bc:	e00f      	b.n	80162de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80162be:	6839      	ldr	r1, [r7, #0]
 80162c0:	6878      	ldr	r0, [r7, #4]
 80162c2:	f000 fa10 	bl	80166e6 <USBD_CtlError>
        err++;
 80162c6:	7afb      	ldrb	r3, [r7, #11]
 80162c8:	3301      	adds	r3, #1
 80162ca:	72fb      	strb	r3, [r7, #11]
      break;
 80162cc:	e007      	b.n	80162de <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80162ce:	6839      	ldr	r1, [r7, #0]
 80162d0:	6878      	ldr	r0, [r7, #4]
 80162d2:	f000 fa08 	bl	80166e6 <USBD_CtlError>
      err++;
 80162d6:	7afb      	ldrb	r3, [r7, #11]
 80162d8:	3301      	adds	r3, #1
 80162da:	72fb      	strb	r3, [r7, #11]
      break;
 80162dc:	bf00      	nop
  }

  if (err != 0U)
 80162de:	7afb      	ldrb	r3, [r7, #11]
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d11e      	bne.n	8016322 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80162e4:	683b      	ldr	r3, [r7, #0]
 80162e6:	88db      	ldrh	r3, [r3, #6]
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d016      	beq.n	801631a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80162ec:	893b      	ldrh	r3, [r7, #8]
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d00e      	beq.n	8016310 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80162f2:	683b      	ldr	r3, [r7, #0]
 80162f4:	88da      	ldrh	r2, [r3, #6]
 80162f6:	893b      	ldrh	r3, [r7, #8]
 80162f8:	4293      	cmp	r3, r2
 80162fa:	bf28      	it	cs
 80162fc:	4613      	movcs	r3, r2
 80162fe:	b29b      	uxth	r3, r3
 8016300:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8016302:	893b      	ldrh	r3, [r7, #8]
 8016304:	461a      	mov	r2, r3
 8016306:	68f9      	ldr	r1, [r7, #12]
 8016308:	6878      	ldr	r0, [r7, #4]
 801630a:	f000 fa5d 	bl	80167c8 <USBD_CtlSendData>
 801630e:	e009      	b.n	8016324 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8016310:	6839      	ldr	r1, [r7, #0]
 8016312:	6878      	ldr	r0, [r7, #4]
 8016314:	f000 f9e7 	bl	80166e6 <USBD_CtlError>
 8016318:	e004      	b.n	8016324 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801631a:	6878      	ldr	r0, [r7, #4]
 801631c:	f000 faae 	bl	801687c <USBD_CtlSendStatus>
 8016320:	e000      	b.n	8016324 <USBD_GetDescriptor+0x2cc>
    return;
 8016322:	bf00      	nop
  }
}
 8016324:	3710      	adds	r7, #16
 8016326:	46bd      	mov	sp, r7
 8016328:	bd80      	pop	{r7, pc}
 801632a:	bf00      	nop

0801632c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801632c:	b580      	push	{r7, lr}
 801632e:	b084      	sub	sp, #16
 8016330:	af00      	add	r7, sp, #0
 8016332:	6078      	str	r0, [r7, #4]
 8016334:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8016336:	683b      	ldr	r3, [r7, #0]
 8016338:	889b      	ldrh	r3, [r3, #4]
 801633a:	2b00      	cmp	r3, #0
 801633c:	d131      	bne.n	80163a2 <USBD_SetAddress+0x76>
 801633e:	683b      	ldr	r3, [r7, #0]
 8016340:	88db      	ldrh	r3, [r3, #6]
 8016342:	2b00      	cmp	r3, #0
 8016344:	d12d      	bne.n	80163a2 <USBD_SetAddress+0x76>
 8016346:	683b      	ldr	r3, [r7, #0]
 8016348:	885b      	ldrh	r3, [r3, #2]
 801634a:	2b7f      	cmp	r3, #127	; 0x7f
 801634c:	d829      	bhi.n	80163a2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801634e:	683b      	ldr	r3, [r7, #0]
 8016350:	885b      	ldrh	r3, [r3, #2]
 8016352:	b2db      	uxtb	r3, r3
 8016354:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016358:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016360:	b2db      	uxtb	r3, r3
 8016362:	2b03      	cmp	r3, #3
 8016364:	d104      	bne.n	8016370 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8016366:	6839      	ldr	r1, [r7, #0]
 8016368:	6878      	ldr	r0, [r7, #4]
 801636a:	f000 f9bc 	bl	80166e6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801636e:	e01d      	b.n	80163ac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	7bfa      	ldrb	r2, [r7, #15]
 8016374:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016378:	7bfb      	ldrb	r3, [r7, #15]
 801637a:	4619      	mov	r1, r3
 801637c:	6878      	ldr	r0, [r7, #4]
 801637e:	f000 ff71 	bl	8017264 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8016382:	6878      	ldr	r0, [r7, #4]
 8016384:	f000 fa7a 	bl	801687c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8016388:	7bfb      	ldrb	r3, [r7, #15]
 801638a:	2b00      	cmp	r3, #0
 801638c:	d004      	beq.n	8016398 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	2202      	movs	r2, #2
 8016392:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016396:	e009      	b.n	80163ac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	2201      	movs	r2, #1
 801639c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80163a0:	e004      	b.n	80163ac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80163a2:	6839      	ldr	r1, [r7, #0]
 80163a4:	6878      	ldr	r0, [r7, #4]
 80163a6:	f000 f99e 	bl	80166e6 <USBD_CtlError>
  }
}
 80163aa:	bf00      	nop
 80163ac:	bf00      	nop
 80163ae:	3710      	adds	r7, #16
 80163b0:	46bd      	mov	sp, r7
 80163b2:	bd80      	pop	{r7, pc}

080163b4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80163b4:	b580      	push	{r7, lr}
 80163b6:	b084      	sub	sp, #16
 80163b8:	af00      	add	r7, sp, #0
 80163ba:	6078      	str	r0, [r7, #4]
 80163bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80163be:	2300      	movs	r3, #0
 80163c0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80163c2:	683b      	ldr	r3, [r7, #0]
 80163c4:	885b      	ldrh	r3, [r3, #2]
 80163c6:	b2da      	uxtb	r2, r3
 80163c8:	4b4e      	ldr	r3, [pc, #312]	; (8016504 <USBD_SetConfig+0x150>)
 80163ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80163cc:	4b4d      	ldr	r3, [pc, #308]	; (8016504 <USBD_SetConfig+0x150>)
 80163ce:	781b      	ldrb	r3, [r3, #0]
 80163d0:	2b01      	cmp	r3, #1
 80163d2:	d905      	bls.n	80163e0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80163d4:	6839      	ldr	r1, [r7, #0]
 80163d6:	6878      	ldr	r0, [r7, #4]
 80163d8:	f000 f985 	bl	80166e6 <USBD_CtlError>
    return USBD_FAIL;
 80163dc:	2303      	movs	r3, #3
 80163de:	e08c      	b.n	80164fa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80163e6:	b2db      	uxtb	r3, r3
 80163e8:	2b02      	cmp	r3, #2
 80163ea:	d002      	beq.n	80163f2 <USBD_SetConfig+0x3e>
 80163ec:	2b03      	cmp	r3, #3
 80163ee:	d029      	beq.n	8016444 <USBD_SetConfig+0x90>
 80163f0:	e075      	b.n	80164de <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80163f2:	4b44      	ldr	r3, [pc, #272]	; (8016504 <USBD_SetConfig+0x150>)
 80163f4:	781b      	ldrb	r3, [r3, #0]
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d020      	beq.n	801643c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80163fa:	4b42      	ldr	r3, [pc, #264]	; (8016504 <USBD_SetConfig+0x150>)
 80163fc:	781b      	ldrb	r3, [r3, #0]
 80163fe:	461a      	mov	r2, r3
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016404:	4b3f      	ldr	r3, [pc, #252]	; (8016504 <USBD_SetConfig+0x150>)
 8016406:	781b      	ldrb	r3, [r3, #0]
 8016408:	4619      	mov	r1, r3
 801640a:	6878      	ldr	r0, [r7, #4]
 801640c:	f7fe ffe1 	bl	80153d2 <USBD_SetClassConfig>
 8016410:	4603      	mov	r3, r0
 8016412:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8016414:	7bfb      	ldrb	r3, [r7, #15]
 8016416:	2b00      	cmp	r3, #0
 8016418:	d008      	beq.n	801642c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801641a:	6839      	ldr	r1, [r7, #0]
 801641c:	6878      	ldr	r0, [r7, #4]
 801641e:	f000 f962 	bl	80166e6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	2202      	movs	r2, #2
 8016426:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801642a:	e065      	b.n	80164f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801642c:	6878      	ldr	r0, [r7, #4]
 801642e:	f000 fa25 	bl	801687c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	2203      	movs	r2, #3
 8016436:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801643a:	e05d      	b.n	80164f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801643c:	6878      	ldr	r0, [r7, #4]
 801643e:	f000 fa1d 	bl	801687c <USBD_CtlSendStatus>
      break;
 8016442:	e059      	b.n	80164f8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8016444:	4b2f      	ldr	r3, [pc, #188]	; (8016504 <USBD_SetConfig+0x150>)
 8016446:	781b      	ldrb	r3, [r3, #0]
 8016448:	2b00      	cmp	r3, #0
 801644a:	d112      	bne.n	8016472 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	2202      	movs	r2, #2
 8016450:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8016454:	4b2b      	ldr	r3, [pc, #172]	; (8016504 <USBD_SetConfig+0x150>)
 8016456:	781b      	ldrb	r3, [r3, #0]
 8016458:	461a      	mov	r2, r3
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801645e:	4b29      	ldr	r3, [pc, #164]	; (8016504 <USBD_SetConfig+0x150>)
 8016460:	781b      	ldrb	r3, [r3, #0]
 8016462:	4619      	mov	r1, r3
 8016464:	6878      	ldr	r0, [r7, #4]
 8016466:	f7fe ffd0 	bl	801540a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801646a:	6878      	ldr	r0, [r7, #4]
 801646c:	f000 fa06 	bl	801687c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016470:	e042      	b.n	80164f8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8016472:	4b24      	ldr	r3, [pc, #144]	; (8016504 <USBD_SetConfig+0x150>)
 8016474:	781b      	ldrb	r3, [r3, #0]
 8016476:	461a      	mov	r2, r3
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	685b      	ldr	r3, [r3, #4]
 801647c:	429a      	cmp	r2, r3
 801647e:	d02a      	beq.n	80164d6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	685b      	ldr	r3, [r3, #4]
 8016484:	b2db      	uxtb	r3, r3
 8016486:	4619      	mov	r1, r3
 8016488:	6878      	ldr	r0, [r7, #4]
 801648a:	f7fe ffbe 	bl	801540a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801648e:	4b1d      	ldr	r3, [pc, #116]	; (8016504 <USBD_SetConfig+0x150>)
 8016490:	781b      	ldrb	r3, [r3, #0]
 8016492:	461a      	mov	r2, r3
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016498:	4b1a      	ldr	r3, [pc, #104]	; (8016504 <USBD_SetConfig+0x150>)
 801649a:	781b      	ldrb	r3, [r3, #0]
 801649c:	4619      	mov	r1, r3
 801649e:	6878      	ldr	r0, [r7, #4]
 80164a0:	f7fe ff97 	bl	80153d2 <USBD_SetClassConfig>
 80164a4:	4603      	mov	r3, r0
 80164a6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80164a8:	7bfb      	ldrb	r3, [r7, #15]
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d00f      	beq.n	80164ce <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80164ae:	6839      	ldr	r1, [r7, #0]
 80164b0:	6878      	ldr	r0, [r7, #4]
 80164b2:	f000 f918 	bl	80166e6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	685b      	ldr	r3, [r3, #4]
 80164ba:	b2db      	uxtb	r3, r3
 80164bc:	4619      	mov	r1, r3
 80164be:	6878      	ldr	r0, [r7, #4]
 80164c0:	f7fe ffa3 	bl	801540a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	2202      	movs	r2, #2
 80164c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80164cc:	e014      	b.n	80164f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80164ce:	6878      	ldr	r0, [r7, #4]
 80164d0:	f000 f9d4 	bl	801687c <USBD_CtlSendStatus>
      break;
 80164d4:	e010      	b.n	80164f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80164d6:	6878      	ldr	r0, [r7, #4]
 80164d8:	f000 f9d0 	bl	801687c <USBD_CtlSendStatus>
      break;
 80164dc:	e00c      	b.n	80164f8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80164de:	6839      	ldr	r1, [r7, #0]
 80164e0:	6878      	ldr	r0, [r7, #4]
 80164e2:	f000 f900 	bl	80166e6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80164e6:	4b07      	ldr	r3, [pc, #28]	; (8016504 <USBD_SetConfig+0x150>)
 80164e8:	781b      	ldrb	r3, [r3, #0]
 80164ea:	4619      	mov	r1, r3
 80164ec:	6878      	ldr	r0, [r7, #4]
 80164ee:	f7fe ff8c 	bl	801540a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80164f2:	2303      	movs	r3, #3
 80164f4:	73fb      	strb	r3, [r7, #15]
      break;
 80164f6:	bf00      	nop
  }

  return ret;
 80164f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80164fa:	4618      	mov	r0, r3
 80164fc:	3710      	adds	r7, #16
 80164fe:	46bd      	mov	sp, r7
 8016500:	bd80      	pop	{r7, pc}
 8016502:	bf00      	nop
 8016504:	24001710 	.word	0x24001710

08016508 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016508:	b580      	push	{r7, lr}
 801650a:	b082      	sub	sp, #8
 801650c:	af00      	add	r7, sp, #0
 801650e:	6078      	str	r0, [r7, #4]
 8016510:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8016512:	683b      	ldr	r3, [r7, #0]
 8016514:	88db      	ldrh	r3, [r3, #6]
 8016516:	2b01      	cmp	r3, #1
 8016518:	d004      	beq.n	8016524 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801651a:	6839      	ldr	r1, [r7, #0]
 801651c:	6878      	ldr	r0, [r7, #4]
 801651e:	f000 f8e2 	bl	80166e6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8016522:	e023      	b.n	801656c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801652a:	b2db      	uxtb	r3, r3
 801652c:	2b02      	cmp	r3, #2
 801652e:	dc02      	bgt.n	8016536 <USBD_GetConfig+0x2e>
 8016530:	2b00      	cmp	r3, #0
 8016532:	dc03      	bgt.n	801653c <USBD_GetConfig+0x34>
 8016534:	e015      	b.n	8016562 <USBD_GetConfig+0x5a>
 8016536:	2b03      	cmp	r3, #3
 8016538:	d00b      	beq.n	8016552 <USBD_GetConfig+0x4a>
 801653a:	e012      	b.n	8016562 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	2200      	movs	r2, #0
 8016540:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	3308      	adds	r3, #8
 8016546:	2201      	movs	r2, #1
 8016548:	4619      	mov	r1, r3
 801654a:	6878      	ldr	r0, [r7, #4]
 801654c:	f000 f93c 	bl	80167c8 <USBD_CtlSendData>
        break;
 8016550:	e00c      	b.n	801656c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	3304      	adds	r3, #4
 8016556:	2201      	movs	r2, #1
 8016558:	4619      	mov	r1, r3
 801655a:	6878      	ldr	r0, [r7, #4]
 801655c:	f000 f934 	bl	80167c8 <USBD_CtlSendData>
        break;
 8016560:	e004      	b.n	801656c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8016562:	6839      	ldr	r1, [r7, #0]
 8016564:	6878      	ldr	r0, [r7, #4]
 8016566:	f000 f8be 	bl	80166e6 <USBD_CtlError>
        break;
 801656a:	bf00      	nop
}
 801656c:	bf00      	nop
 801656e:	3708      	adds	r7, #8
 8016570:	46bd      	mov	sp, r7
 8016572:	bd80      	pop	{r7, pc}

08016574 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016574:	b580      	push	{r7, lr}
 8016576:	b082      	sub	sp, #8
 8016578:	af00      	add	r7, sp, #0
 801657a:	6078      	str	r0, [r7, #4]
 801657c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016584:	b2db      	uxtb	r3, r3
 8016586:	3b01      	subs	r3, #1
 8016588:	2b02      	cmp	r3, #2
 801658a:	d81e      	bhi.n	80165ca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801658c:	683b      	ldr	r3, [r7, #0]
 801658e:	88db      	ldrh	r3, [r3, #6]
 8016590:	2b02      	cmp	r3, #2
 8016592:	d004      	beq.n	801659e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8016594:	6839      	ldr	r1, [r7, #0]
 8016596:	6878      	ldr	r0, [r7, #4]
 8016598:	f000 f8a5 	bl	80166e6 <USBD_CtlError>
        break;
 801659c:	e01a      	b.n	80165d4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	2201      	movs	r2, #1
 80165a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80165aa:	2b00      	cmp	r3, #0
 80165ac:	d005      	beq.n	80165ba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	68db      	ldr	r3, [r3, #12]
 80165b2:	f043 0202 	orr.w	r2, r3, #2
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	330c      	adds	r3, #12
 80165be:	2202      	movs	r2, #2
 80165c0:	4619      	mov	r1, r3
 80165c2:	6878      	ldr	r0, [r7, #4]
 80165c4:	f000 f900 	bl	80167c8 <USBD_CtlSendData>
      break;
 80165c8:	e004      	b.n	80165d4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80165ca:	6839      	ldr	r1, [r7, #0]
 80165cc:	6878      	ldr	r0, [r7, #4]
 80165ce:	f000 f88a 	bl	80166e6 <USBD_CtlError>
      break;
 80165d2:	bf00      	nop
  }
}
 80165d4:	bf00      	nop
 80165d6:	3708      	adds	r7, #8
 80165d8:	46bd      	mov	sp, r7
 80165da:	bd80      	pop	{r7, pc}

080165dc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80165dc:	b580      	push	{r7, lr}
 80165de:	b082      	sub	sp, #8
 80165e0:	af00      	add	r7, sp, #0
 80165e2:	6078      	str	r0, [r7, #4]
 80165e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80165e6:	683b      	ldr	r3, [r7, #0]
 80165e8:	885b      	ldrh	r3, [r3, #2]
 80165ea:	2b01      	cmp	r3, #1
 80165ec:	d107      	bne.n	80165fe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	2201      	movs	r2, #1
 80165f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80165f6:	6878      	ldr	r0, [r7, #4]
 80165f8:	f000 f940 	bl	801687c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80165fc:	e013      	b.n	8016626 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80165fe:	683b      	ldr	r3, [r7, #0]
 8016600:	885b      	ldrh	r3, [r3, #2]
 8016602:	2b02      	cmp	r3, #2
 8016604:	d10b      	bne.n	801661e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8016606:	683b      	ldr	r3, [r7, #0]
 8016608:	889b      	ldrh	r3, [r3, #4]
 801660a:	0a1b      	lsrs	r3, r3, #8
 801660c:	b29b      	uxth	r3, r3
 801660e:	b2da      	uxtb	r2, r3
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8016616:	6878      	ldr	r0, [r7, #4]
 8016618:	f000 f930 	bl	801687c <USBD_CtlSendStatus>
}
 801661c:	e003      	b.n	8016626 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801661e:	6839      	ldr	r1, [r7, #0]
 8016620:	6878      	ldr	r0, [r7, #4]
 8016622:	f000 f860 	bl	80166e6 <USBD_CtlError>
}
 8016626:	bf00      	nop
 8016628:	3708      	adds	r7, #8
 801662a:	46bd      	mov	sp, r7
 801662c:	bd80      	pop	{r7, pc}

0801662e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801662e:	b580      	push	{r7, lr}
 8016630:	b082      	sub	sp, #8
 8016632:	af00      	add	r7, sp, #0
 8016634:	6078      	str	r0, [r7, #4]
 8016636:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801663e:	b2db      	uxtb	r3, r3
 8016640:	3b01      	subs	r3, #1
 8016642:	2b02      	cmp	r3, #2
 8016644:	d80b      	bhi.n	801665e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016646:	683b      	ldr	r3, [r7, #0]
 8016648:	885b      	ldrh	r3, [r3, #2]
 801664a:	2b01      	cmp	r3, #1
 801664c:	d10c      	bne.n	8016668 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	2200      	movs	r2, #0
 8016652:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8016656:	6878      	ldr	r0, [r7, #4]
 8016658:	f000 f910 	bl	801687c <USBD_CtlSendStatus>
      }
      break;
 801665c:	e004      	b.n	8016668 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801665e:	6839      	ldr	r1, [r7, #0]
 8016660:	6878      	ldr	r0, [r7, #4]
 8016662:	f000 f840 	bl	80166e6 <USBD_CtlError>
      break;
 8016666:	e000      	b.n	801666a <USBD_ClrFeature+0x3c>
      break;
 8016668:	bf00      	nop
  }
}
 801666a:	bf00      	nop
 801666c:	3708      	adds	r7, #8
 801666e:	46bd      	mov	sp, r7
 8016670:	bd80      	pop	{r7, pc}

08016672 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8016672:	b580      	push	{r7, lr}
 8016674:	b084      	sub	sp, #16
 8016676:	af00      	add	r7, sp, #0
 8016678:	6078      	str	r0, [r7, #4]
 801667a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801667c:	683b      	ldr	r3, [r7, #0]
 801667e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016680:	68fb      	ldr	r3, [r7, #12]
 8016682:	781a      	ldrb	r2, [r3, #0]
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8016688:	68fb      	ldr	r3, [r7, #12]
 801668a:	3301      	adds	r3, #1
 801668c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	781a      	ldrb	r2, [r3, #0]
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8016696:	68fb      	ldr	r3, [r7, #12]
 8016698:	3301      	adds	r3, #1
 801669a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801669c:	68f8      	ldr	r0, [r7, #12]
 801669e:	f7ff fa41 	bl	8015b24 <SWAPBYTE>
 80166a2:	4603      	mov	r3, r0
 80166a4:	461a      	mov	r2, r3
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80166aa:	68fb      	ldr	r3, [r7, #12]
 80166ac:	3301      	adds	r3, #1
 80166ae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80166b0:	68fb      	ldr	r3, [r7, #12]
 80166b2:	3301      	adds	r3, #1
 80166b4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80166b6:	68f8      	ldr	r0, [r7, #12]
 80166b8:	f7ff fa34 	bl	8015b24 <SWAPBYTE>
 80166bc:	4603      	mov	r3, r0
 80166be:	461a      	mov	r2, r3
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80166c4:	68fb      	ldr	r3, [r7, #12]
 80166c6:	3301      	adds	r3, #1
 80166c8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80166ca:	68fb      	ldr	r3, [r7, #12]
 80166cc:	3301      	adds	r3, #1
 80166ce:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80166d0:	68f8      	ldr	r0, [r7, #12]
 80166d2:	f7ff fa27 	bl	8015b24 <SWAPBYTE>
 80166d6:	4603      	mov	r3, r0
 80166d8:	461a      	mov	r2, r3
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	80da      	strh	r2, [r3, #6]
}
 80166de:	bf00      	nop
 80166e0:	3710      	adds	r7, #16
 80166e2:	46bd      	mov	sp, r7
 80166e4:	bd80      	pop	{r7, pc}

080166e6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80166e6:	b580      	push	{r7, lr}
 80166e8:	b082      	sub	sp, #8
 80166ea:	af00      	add	r7, sp, #0
 80166ec:	6078      	str	r0, [r7, #4]
 80166ee:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80166f0:	2180      	movs	r1, #128	; 0x80
 80166f2:	6878      	ldr	r0, [r7, #4]
 80166f4:	f000 fd4c 	bl	8017190 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80166f8:	2100      	movs	r1, #0
 80166fa:	6878      	ldr	r0, [r7, #4]
 80166fc:	f000 fd48 	bl	8017190 <USBD_LL_StallEP>
}
 8016700:	bf00      	nop
 8016702:	3708      	adds	r7, #8
 8016704:	46bd      	mov	sp, r7
 8016706:	bd80      	pop	{r7, pc}

08016708 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016708:	b580      	push	{r7, lr}
 801670a:	b086      	sub	sp, #24
 801670c:	af00      	add	r7, sp, #0
 801670e:	60f8      	str	r0, [r7, #12]
 8016710:	60b9      	str	r1, [r7, #8]
 8016712:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016714:	2300      	movs	r3, #0
 8016716:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016718:	68fb      	ldr	r3, [r7, #12]
 801671a:	2b00      	cmp	r3, #0
 801671c:	d036      	beq.n	801678c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801671e:	68fb      	ldr	r3, [r7, #12]
 8016720:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8016722:	6938      	ldr	r0, [r7, #16]
 8016724:	f000 f836 	bl	8016794 <USBD_GetLen>
 8016728:	4603      	mov	r3, r0
 801672a:	3301      	adds	r3, #1
 801672c:	b29b      	uxth	r3, r3
 801672e:	005b      	lsls	r3, r3, #1
 8016730:	b29a      	uxth	r2, r3
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8016736:	7dfb      	ldrb	r3, [r7, #23]
 8016738:	68ba      	ldr	r2, [r7, #8]
 801673a:	4413      	add	r3, r2
 801673c:	687a      	ldr	r2, [r7, #4]
 801673e:	7812      	ldrb	r2, [r2, #0]
 8016740:	701a      	strb	r2, [r3, #0]
  idx++;
 8016742:	7dfb      	ldrb	r3, [r7, #23]
 8016744:	3301      	adds	r3, #1
 8016746:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016748:	7dfb      	ldrb	r3, [r7, #23]
 801674a:	68ba      	ldr	r2, [r7, #8]
 801674c:	4413      	add	r3, r2
 801674e:	2203      	movs	r2, #3
 8016750:	701a      	strb	r2, [r3, #0]
  idx++;
 8016752:	7dfb      	ldrb	r3, [r7, #23]
 8016754:	3301      	adds	r3, #1
 8016756:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016758:	e013      	b.n	8016782 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801675a:	7dfb      	ldrb	r3, [r7, #23]
 801675c:	68ba      	ldr	r2, [r7, #8]
 801675e:	4413      	add	r3, r2
 8016760:	693a      	ldr	r2, [r7, #16]
 8016762:	7812      	ldrb	r2, [r2, #0]
 8016764:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016766:	693b      	ldr	r3, [r7, #16]
 8016768:	3301      	adds	r3, #1
 801676a:	613b      	str	r3, [r7, #16]
    idx++;
 801676c:	7dfb      	ldrb	r3, [r7, #23]
 801676e:	3301      	adds	r3, #1
 8016770:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8016772:	7dfb      	ldrb	r3, [r7, #23]
 8016774:	68ba      	ldr	r2, [r7, #8]
 8016776:	4413      	add	r3, r2
 8016778:	2200      	movs	r2, #0
 801677a:	701a      	strb	r2, [r3, #0]
    idx++;
 801677c:	7dfb      	ldrb	r3, [r7, #23]
 801677e:	3301      	adds	r3, #1
 8016780:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016782:	693b      	ldr	r3, [r7, #16]
 8016784:	781b      	ldrb	r3, [r3, #0]
 8016786:	2b00      	cmp	r3, #0
 8016788:	d1e7      	bne.n	801675a <USBD_GetString+0x52>
 801678a:	e000      	b.n	801678e <USBD_GetString+0x86>
    return;
 801678c:	bf00      	nop
  }
}
 801678e:	3718      	adds	r7, #24
 8016790:	46bd      	mov	sp, r7
 8016792:	bd80      	pop	{r7, pc}

08016794 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016794:	b480      	push	{r7}
 8016796:	b085      	sub	sp, #20
 8016798:	af00      	add	r7, sp, #0
 801679a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801679c:	2300      	movs	r3, #0
 801679e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80167a4:	e005      	b.n	80167b2 <USBD_GetLen+0x1e>
  {
    len++;
 80167a6:	7bfb      	ldrb	r3, [r7, #15]
 80167a8:	3301      	adds	r3, #1
 80167aa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80167ac:	68bb      	ldr	r3, [r7, #8]
 80167ae:	3301      	adds	r3, #1
 80167b0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80167b2:	68bb      	ldr	r3, [r7, #8]
 80167b4:	781b      	ldrb	r3, [r3, #0]
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d1f5      	bne.n	80167a6 <USBD_GetLen+0x12>
  }

  return len;
 80167ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80167bc:	4618      	mov	r0, r3
 80167be:	3714      	adds	r7, #20
 80167c0:	46bd      	mov	sp, r7
 80167c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167c6:	4770      	bx	lr

080167c8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80167c8:	b580      	push	{r7, lr}
 80167ca:	b084      	sub	sp, #16
 80167cc:	af00      	add	r7, sp, #0
 80167ce:	60f8      	str	r0, [r7, #12]
 80167d0:	60b9      	str	r1, [r7, #8]
 80167d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80167d4:	68fb      	ldr	r3, [r7, #12]
 80167d6:	2202      	movs	r2, #2
 80167d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80167dc:	68fb      	ldr	r3, [r7, #12]
 80167de:	687a      	ldr	r2, [r7, #4]
 80167e0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80167e2:	68fb      	ldr	r3, [r7, #12]
 80167e4:	687a      	ldr	r2, [r7, #4]
 80167e6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	68ba      	ldr	r2, [r7, #8]
 80167ec:	2100      	movs	r1, #0
 80167ee:	68f8      	ldr	r0, [r7, #12]
 80167f0:	f000 fd57 	bl	80172a2 <USBD_LL_Transmit>

  return USBD_OK;
 80167f4:	2300      	movs	r3, #0
}
 80167f6:	4618      	mov	r0, r3
 80167f8:	3710      	adds	r7, #16
 80167fa:	46bd      	mov	sp, r7
 80167fc:	bd80      	pop	{r7, pc}

080167fe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80167fe:	b580      	push	{r7, lr}
 8016800:	b084      	sub	sp, #16
 8016802:	af00      	add	r7, sp, #0
 8016804:	60f8      	str	r0, [r7, #12]
 8016806:	60b9      	str	r1, [r7, #8]
 8016808:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	68ba      	ldr	r2, [r7, #8]
 801680e:	2100      	movs	r1, #0
 8016810:	68f8      	ldr	r0, [r7, #12]
 8016812:	f000 fd46 	bl	80172a2 <USBD_LL_Transmit>

  return USBD_OK;
 8016816:	2300      	movs	r3, #0
}
 8016818:	4618      	mov	r0, r3
 801681a:	3710      	adds	r7, #16
 801681c:	46bd      	mov	sp, r7
 801681e:	bd80      	pop	{r7, pc}

08016820 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8016820:	b580      	push	{r7, lr}
 8016822:	b084      	sub	sp, #16
 8016824:	af00      	add	r7, sp, #0
 8016826:	60f8      	str	r0, [r7, #12]
 8016828:	60b9      	str	r1, [r7, #8]
 801682a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801682c:	68fb      	ldr	r3, [r7, #12]
 801682e:	2203      	movs	r2, #3
 8016830:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8016834:	68fb      	ldr	r3, [r7, #12]
 8016836:	687a      	ldr	r2, [r7, #4]
 8016838:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801683c:	68fb      	ldr	r3, [r7, #12]
 801683e:	687a      	ldr	r2, [r7, #4]
 8016840:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	68ba      	ldr	r2, [r7, #8]
 8016848:	2100      	movs	r1, #0
 801684a:	68f8      	ldr	r0, [r7, #12]
 801684c:	f000 fd4a 	bl	80172e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016850:	2300      	movs	r3, #0
}
 8016852:	4618      	mov	r0, r3
 8016854:	3710      	adds	r7, #16
 8016856:	46bd      	mov	sp, r7
 8016858:	bd80      	pop	{r7, pc}

0801685a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801685a:	b580      	push	{r7, lr}
 801685c:	b084      	sub	sp, #16
 801685e:	af00      	add	r7, sp, #0
 8016860:	60f8      	str	r0, [r7, #12]
 8016862:	60b9      	str	r1, [r7, #8]
 8016864:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	68ba      	ldr	r2, [r7, #8]
 801686a:	2100      	movs	r1, #0
 801686c:	68f8      	ldr	r0, [r7, #12]
 801686e:	f000 fd39 	bl	80172e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016872:	2300      	movs	r3, #0
}
 8016874:	4618      	mov	r0, r3
 8016876:	3710      	adds	r7, #16
 8016878:	46bd      	mov	sp, r7
 801687a:	bd80      	pop	{r7, pc}

0801687c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801687c:	b580      	push	{r7, lr}
 801687e:	b082      	sub	sp, #8
 8016880:	af00      	add	r7, sp, #0
 8016882:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	2204      	movs	r2, #4
 8016888:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801688c:	2300      	movs	r3, #0
 801688e:	2200      	movs	r2, #0
 8016890:	2100      	movs	r1, #0
 8016892:	6878      	ldr	r0, [r7, #4]
 8016894:	f000 fd05 	bl	80172a2 <USBD_LL_Transmit>

  return USBD_OK;
 8016898:	2300      	movs	r3, #0
}
 801689a:	4618      	mov	r0, r3
 801689c:	3708      	adds	r7, #8
 801689e:	46bd      	mov	sp, r7
 80168a0:	bd80      	pop	{r7, pc}

080168a2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80168a2:	b580      	push	{r7, lr}
 80168a4:	b082      	sub	sp, #8
 80168a6:	af00      	add	r7, sp, #0
 80168a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	2205      	movs	r2, #5
 80168ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80168b2:	2300      	movs	r3, #0
 80168b4:	2200      	movs	r2, #0
 80168b6:	2100      	movs	r1, #0
 80168b8:	6878      	ldr	r0, [r7, #4]
 80168ba:	f000 fd13 	bl	80172e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80168be:	2300      	movs	r3, #0
}
 80168c0:	4618      	mov	r0, r3
 80168c2:	3708      	adds	r7, #8
 80168c4:	46bd      	mov	sp, r7
 80168c6:	bd80      	pop	{r7, pc}

080168c8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80168c8:	b480      	push	{r7}
 80168ca:	b087      	sub	sp, #28
 80168cc:	af00      	add	r7, sp, #0
 80168ce:	60f8      	str	r0, [r7, #12]
 80168d0:	60b9      	str	r1, [r7, #8]
 80168d2:	4613      	mov	r3, r2
 80168d4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80168d6:	2301      	movs	r3, #1
 80168d8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80168da:	2300      	movs	r3, #0
 80168dc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80168de:	4b1f      	ldr	r3, [pc, #124]	; (801695c <FATFS_LinkDriverEx+0x94>)
 80168e0:	7a5b      	ldrb	r3, [r3, #9]
 80168e2:	b2db      	uxtb	r3, r3
 80168e4:	2b00      	cmp	r3, #0
 80168e6:	d131      	bne.n	801694c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80168e8:	4b1c      	ldr	r3, [pc, #112]	; (801695c <FATFS_LinkDriverEx+0x94>)
 80168ea:	7a5b      	ldrb	r3, [r3, #9]
 80168ec:	b2db      	uxtb	r3, r3
 80168ee:	461a      	mov	r2, r3
 80168f0:	4b1a      	ldr	r3, [pc, #104]	; (801695c <FATFS_LinkDriverEx+0x94>)
 80168f2:	2100      	movs	r1, #0
 80168f4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80168f6:	4b19      	ldr	r3, [pc, #100]	; (801695c <FATFS_LinkDriverEx+0x94>)
 80168f8:	7a5b      	ldrb	r3, [r3, #9]
 80168fa:	b2db      	uxtb	r3, r3
 80168fc:	4a17      	ldr	r2, [pc, #92]	; (801695c <FATFS_LinkDriverEx+0x94>)
 80168fe:	009b      	lsls	r3, r3, #2
 8016900:	4413      	add	r3, r2
 8016902:	68fa      	ldr	r2, [r7, #12]
 8016904:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8016906:	4b15      	ldr	r3, [pc, #84]	; (801695c <FATFS_LinkDriverEx+0x94>)
 8016908:	7a5b      	ldrb	r3, [r3, #9]
 801690a:	b2db      	uxtb	r3, r3
 801690c:	461a      	mov	r2, r3
 801690e:	4b13      	ldr	r3, [pc, #76]	; (801695c <FATFS_LinkDriverEx+0x94>)
 8016910:	4413      	add	r3, r2
 8016912:	79fa      	ldrb	r2, [r7, #7]
 8016914:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8016916:	4b11      	ldr	r3, [pc, #68]	; (801695c <FATFS_LinkDriverEx+0x94>)
 8016918:	7a5b      	ldrb	r3, [r3, #9]
 801691a:	b2db      	uxtb	r3, r3
 801691c:	1c5a      	adds	r2, r3, #1
 801691e:	b2d1      	uxtb	r1, r2
 8016920:	4a0e      	ldr	r2, [pc, #56]	; (801695c <FATFS_LinkDriverEx+0x94>)
 8016922:	7251      	strb	r1, [r2, #9]
 8016924:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8016926:	7dbb      	ldrb	r3, [r7, #22]
 8016928:	3330      	adds	r3, #48	; 0x30
 801692a:	b2da      	uxtb	r2, r3
 801692c:	68bb      	ldr	r3, [r7, #8]
 801692e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8016930:	68bb      	ldr	r3, [r7, #8]
 8016932:	3301      	adds	r3, #1
 8016934:	223a      	movs	r2, #58	; 0x3a
 8016936:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8016938:	68bb      	ldr	r3, [r7, #8]
 801693a:	3302      	adds	r3, #2
 801693c:	222f      	movs	r2, #47	; 0x2f
 801693e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8016940:	68bb      	ldr	r3, [r7, #8]
 8016942:	3303      	adds	r3, #3
 8016944:	2200      	movs	r2, #0
 8016946:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8016948:	2300      	movs	r3, #0
 801694a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801694c:	7dfb      	ldrb	r3, [r7, #23]
}
 801694e:	4618      	mov	r0, r3
 8016950:	371c      	adds	r7, #28
 8016952:	46bd      	mov	sp, r7
 8016954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016958:	4770      	bx	lr
 801695a:	bf00      	nop
 801695c:	24001714 	.word	0x24001714

08016960 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016960:	b580      	push	{r7, lr}
 8016962:	b082      	sub	sp, #8
 8016964:	af00      	add	r7, sp, #0
 8016966:	6078      	str	r0, [r7, #4]
 8016968:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801696a:	2200      	movs	r2, #0
 801696c:	6839      	ldr	r1, [r7, #0]
 801696e:	6878      	ldr	r0, [r7, #4]
 8016970:	f7ff ffaa 	bl	80168c8 <FATFS_LinkDriverEx>
 8016974:	4603      	mov	r3, r0
}
 8016976:	4618      	mov	r0, r3
 8016978:	3708      	adds	r7, #8
 801697a:	46bd      	mov	sp, r7
 801697c:	bd80      	pop	{r7, pc}
	...

08016980 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016980:	b580      	push	{r7, lr}
 8016982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8016984:	2201      	movs	r2, #1
 8016986:	4913      	ldr	r1, [pc, #76]	; (80169d4 <MX_USB_DEVICE_Init+0x54>)
 8016988:	4813      	ldr	r0, [pc, #76]	; (80169d8 <MX_USB_DEVICE_Init+0x58>)
 801698a:	f7fe fca5 	bl	80152d8 <USBD_Init>
 801698e:	4603      	mov	r3, r0
 8016990:	2b00      	cmp	r3, #0
 8016992:	d001      	beq.n	8016998 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016994:	f7ec f99c 	bl	8002cd0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8016998:	4910      	ldr	r1, [pc, #64]	; (80169dc <MX_USB_DEVICE_Init+0x5c>)
 801699a:	480f      	ldr	r0, [pc, #60]	; (80169d8 <MX_USB_DEVICE_Init+0x58>)
 801699c:	f7fe fccc 	bl	8015338 <USBD_RegisterClass>
 80169a0:	4603      	mov	r3, r0
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	d001      	beq.n	80169aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80169a6:	f7ec f993 	bl	8002cd0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 80169aa:	490d      	ldr	r1, [pc, #52]	; (80169e0 <MX_USB_DEVICE_Init+0x60>)
 80169ac:	480a      	ldr	r0, [pc, #40]	; (80169d8 <MX_USB_DEVICE_Init+0x58>)
 80169ae:	f7fe fbc3 	bl	8015138 <USBD_CDC_RegisterInterface>
 80169b2:	4603      	mov	r3, r0
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d001      	beq.n	80169bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80169b8:	f7ec f98a 	bl	8002cd0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 80169bc:	4806      	ldr	r0, [pc, #24]	; (80169d8 <MX_USB_DEVICE_Init+0x58>)
 80169be:	f7fe fcf1 	bl	80153a4 <USBD_Start>
 80169c2:	4603      	mov	r3, r0
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	d001      	beq.n	80169cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80169c8:	f7ec f982 	bl	8002cd0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80169cc:	f7f3 f960 	bl	8009c90 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80169d0:	bf00      	nop
 80169d2:	bd80      	pop	{r7, pc}
 80169d4:	240000b0 	.word	0x240000b0
 80169d8:	24001720 	.word	0x24001720
 80169dc:	2400001c 	.word	0x2400001c
 80169e0:	2400009c 	.word	0x2400009c

080169e4 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80169e4:	b580      	push	{r7, lr}
 80169e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80169e8:	2200      	movs	r2, #0
 80169ea:	4905      	ldr	r1, [pc, #20]	; (8016a00 <CDC_Init_HS+0x1c>)
 80169ec:	4805      	ldr	r0, [pc, #20]	; (8016a04 <CDC_Init_HS+0x20>)
 80169ee:	f7fe fbbd 	bl	801516c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80169f2:	4905      	ldr	r1, [pc, #20]	; (8016a08 <CDC_Init_HS+0x24>)
 80169f4:	4803      	ldr	r0, [pc, #12]	; (8016a04 <CDC_Init_HS+0x20>)
 80169f6:	f7fe fbdb 	bl	80151b0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80169fa:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80169fc:	4618      	mov	r0, r3
 80169fe:	bd80      	pop	{r7, pc}
 8016a00:	240021fc 	.word	0x240021fc
 8016a04:	24001720 	.word	0x24001720
 8016a08:	240019fc 	.word	0x240019fc

08016a0c <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8016a0c:	b480      	push	{r7}
 8016a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8016a10:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8016a12:	4618      	mov	r0, r3
 8016a14:	46bd      	mov	sp, r7
 8016a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a1a:	4770      	bx	lr

08016a1c <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016a1c:	b480      	push	{r7}
 8016a1e:	b083      	sub	sp, #12
 8016a20:	af00      	add	r7, sp, #0
 8016a22:	4603      	mov	r3, r0
 8016a24:	6039      	str	r1, [r7, #0]
 8016a26:	71fb      	strb	r3, [r7, #7]
 8016a28:	4613      	mov	r3, r2
 8016a2a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8016a2c:	79fb      	ldrb	r3, [r7, #7]
 8016a2e:	2b23      	cmp	r3, #35	; 0x23
 8016a30:	d84a      	bhi.n	8016ac8 <CDC_Control_HS+0xac>
 8016a32:	a201      	add	r2, pc, #4	; (adr r2, 8016a38 <CDC_Control_HS+0x1c>)
 8016a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a38:	08016ac9 	.word	0x08016ac9
 8016a3c:	08016ac9 	.word	0x08016ac9
 8016a40:	08016ac9 	.word	0x08016ac9
 8016a44:	08016ac9 	.word	0x08016ac9
 8016a48:	08016ac9 	.word	0x08016ac9
 8016a4c:	08016ac9 	.word	0x08016ac9
 8016a50:	08016ac9 	.word	0x08016ac9
 8016a54:	08016ac9 	.word	0x08016ac9
 8016a58:	08016ac9 	.word	0x08016ac9
 8016a5c:	08016ac9 	.word	0x08016ac9
 8016a60:	08016ac9 	.word	0x08016ac9
 8016a64:	08016ac9 	.word	0x08016ac9
 8016a68:	08016ac9 	.word	0x08016ac9
 8016a6c:	08016ac9 	.word	0x08016ac9
 8016a70:	08016ac9 	.word	0x08016ac9
 8016a74:	08016ac9 	.word	0x08016ac9
 8016a78:	08016ac9 	.word	0x08016ac9
 8016a7c:	08016ac9 	.word	0x08016ac9
 8016a80:	08016ac9 	.word	0x08016ac9
 8016a84:	08016ac9 	.word	0x08016ac9
 8016a88:	08016ac9 	.word	0x08016ac9
 8016a8c:	08016ac9 	.word	0x08016ac9
 8016a90:	08016ac9 	.word	0x08016ac9
 8016a94:	08016ac9 	.word	0x08016ac9
 8016a98:	08016ac9 	.word	0x08016ac9
 8016a9c:	08016ac9 	.word	0x08016ac9
 8016aa0:	08016ac9 	.word	0x08016ac9
 8016aa4:	08016ac9 	.word	0x08016ac9
 8016aa8:	08016ac9 	.word	0x08016ac9
 8016aac:	08016ac9 	.word	0x08016ac9
 8016ab0:	08016ac9 	.word	0x08016ac9
 8016ab4:	08016ac9 	.word	0x08016ac9
 8016ab8:	08016ac9 	.word	0x08016ac9
 8016abc:	08016ac9 	.word	0x08016ac9
 8016ac0:	08016ac9 	.word	0x08016ac9
 8016ac4:	08016ac9 	.word	0x08016ac9
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016ac8:	bf00      	nop
  }

  return (USBD_OK);
 8016aca:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8016acc:	4618      	mov	r0, r3
 8016ace:	370c      	adds	r7, #12
 8016ad0:	46bd      	mov	sp, r7
 8016ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ad6:	4770      	bx	lr

08016ad8 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8016ad8:	b580      	push	{r7, lr}
 8016ada:	b084      	sub	sp, #16
 8016adc:	af00      	add	r7, sp, #0
 8016ade:	6078      	str	r0, [r7, #4]
 8016ae0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8016ae2:	6879      	ldr	r1, [r7, #4]
 8016ae4:	480e      	ldr	r0, [pc, #56]	; (8016b20 <CDC_Receive_HS+0x48>)
 8016ae6:	f7fe fb63 	bl	80151b0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8016aea:	480d      	ldr	r0, [pc, #52]	; (8016b20 <CDC_Receive_HS+0x48>)
 8016aec:	f7fe fbbe 	bl	801526c <USBD_CDC_ReceivePacket>

  extern uint8_t usbDataBuffer[usbBufferLen];
  extern uint32_t usbBytesReady;

  uint32_t cpyLen = *Len;
 8016af0:	683b      	ldr	r3, [r7, #0]
 8016af2:	681b      	ldr	r3, [r3, #0]
 8016af4:	60fb      	str	r3, [r7, #12]
  memcpy(usbDataBuffer + usbBytesReady, Buf, cpyLen);
 8016af6:	4b0b      	ldr	r3, [pc, #44]	; (8016b24 <CDC_Receive_HS+0x4c>)
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	4a0b      	ldr	r2, [pc, #44]	; (8016b28 <CDC_Receive_HS+0x50>)
 8016afc:	4413      	add	r3, r2
 8016afe:	68fa      	ldr	r2, [r7, #12]
 8016b00:	6879      	ldr	r1, [r7, #4]
 8016b02:	4618      	mov	r0, r3
 8016b04:	f001 fc81 	bl	801840a <memcpy>
  usbBytesReady += cpyLen;
 8016b08:	4b06      	ldr	r3, [pc, #24]	; (8016b24 <CDC_Receive_HS+0x4c>)
 8016b0a:	681a      	ldr	r2, [r3, #0]
 8016b0c:	68fb      	ldr	r3, [r7, #12]
 8016b0e:	4413      	add	r3, r2
 8016b10:	4a04      	ldr	r2, [pc, #16]	; (8016b24 <CDC_Receive_HS+0x4c>)
 8016b12:	6013      	str	r3, [r2, #0]
  
  return (USBD_OK);
 8016b14:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8016b16:	4618      	mov	r0, r3
 8016b18:	3710      	adds	r7, #16
 8016b1a:	46bd      	mov	sp, r7
 8016b1c:	bd80      	pop	{r7, pc}
 8016b1e:	bf00      	nop
 8016b20:	24001720 	.word	0x24001720
 8016b24:	240003e4 	.word	0x240003e4
 8016b28:	240002e4 	.word	0x240002e4

08016b2c <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8016b2c:	b580      	push	{r7, lr}
 8016b2e:	b084      	sub	sp, #16
 8016b30:	af00      	add	r7, sp, #0
 8016b32:	6078      	str	r0, [r7, #4]
 8016b34:	460b      	mov	r3, r1
 8016b36:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8016b38:	2300      	movs	r3, #0
 8016b3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8016b3c:	4b0d      	ldr	r3, [pc, #52]	; (8016b74 <CDC_Transmit_HS+0x48>)
 8016b3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016b42:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016b44:	68bb      	ldr	r3, [r7, #8]
 8016b46:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d001      	beq.n	8016b52 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8016b4e:	2301      	movs	r3, #1
 8016b50:	e00b      	b.n	8016b6a <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8016b52:	887b      	ldrh	r3, [r7, #2]
 8016b54:	461a      	mov	r2, r3
 8016b56:	6879      	ldr	r1, [r7, #4]
 8016b58:	4806      	ldr	r0, [pc, #24]	; (8016b74 <CDC_Transmit_HS+0x48>)
 8016b5a:	f7fe fb07 	bl	801516c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8016b5e:	4805      	ldr	r0, [pc, #20]	; (8016b74 <CDC_Transmit_HS+0x48>)
 8016b60:	f7fe fb44 	bl	80151ec <USBD_CDC_TransmitPacket>
 8016b64:	4603      	mov	r3, r0
 8016b66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8016b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b6a:	4618      	mov	r0, r3
 8016b6c:	3710      	adds	r7, #16
 8016b6e:	46bd      	mov	sp, r7
 8016b70:	bd80      	pop	{r7, pc}
 8016b72:	bf00      	nop
 8016b74:	24001720 	.word	0x24001720

08016b78 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016b78:	b480      	push	{r7}
 8016b7a:	b087      	sub	sp, #28
 8016b7c:	af00      	add	r7, sp, #0
 8016b7e:	60f8      	str	r0, [r7, #12]
 8016b80:	60b9      	str	r1, [r7, #8]
 8016b82:	4613      	mov	r3, r2
 8016b84:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8016b86:	2300      	movs	r3, #0
 8016b88:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8016b8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016b8e:	4618      	mov	r0, r3
 8016b90:	371c      	adds	r7, #28
 8016b92:	46bd      	mov	sp, r7
 8016b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b98:	4770      	bx	lr
	...

08016b9c <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016b9c:	b480      	push	{r7}
 8016b9e:	b083      	sub	sp, #12
 8016ba0:	af00      	add	r7, sp, #0
 8016ba2:	4603      	mov	r3, r0
 8016ba4:	6039      	str	r1, [r7, #0]
 8016ba6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8016ba8:	683b      	ldr	r3, [r7, #0]
 8016baa:	2212      	movs	r2, #18
 8016bac:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8016bae:	4b03      	ldr	r3, [pc, #12]	; (8016bbc <USBD_HS_DeviceDescriptor+0x20>)
}
 8016bb0:	4618      	mov	r0, r3
 8016bb2:	370c      	adds	r7, #12
 8016bb4:	46bd      	mov	sp, r7
 8016bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bba:	4770      	bx	lr
 8016bbc:	240000cc 	.word	0x240000cc

08016bc0 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016bc0:	b480      	push	{r7}
 8016bc2:	b083      	sub	sp, #12
 8016bc4:	af00      	add	r7, sp, #0
 8016bc6:	4603      	mov	r3, r0
 8016bc8:	6039      	str	r1, [r7, #0]
 8016bca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016bcc:	683b      	ldr	r3, [r7, #0]
 8016bce:	2204      	movs	r2, #4
 8016bd0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016bd2:	4b03      	ldr	r3, [pc, #12]	; (8016be0 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8016bd4:	4618      	mov	r0, r3
 8016bd6:	370c      	adds	r7, #12
 8016bd8:	46bd      	mov	sp, r7
 8016bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bde:	4770      	bx	lr
 8016be0:	240000e0 	.word	0x240000e0

08016be4 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016be4:	b580      	push	{r7, lr}
 8016be6:	b082      	sub	sp, #8
 8016be8:	af00      	add	r7, sp, #0
 8016bea:	4603      	mov	r3, r0
 8016bec:	6039      	str	r1, [r7, #0]
 8016bee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016bf0:	79fb      	ldrb	r3, [r7, #7]
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d105      	bne.n	8016c02 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8016bf6:	683a      	ldr	r2, [r7, #0]
 8016bf8:	4907      	ldr	r1, [pc, #28]	; (8016c18 <USBD_HS_ProductStrDescriptor+0x34>)
 8016bfa:	4808      	ldr	r0, [pc, #32]	; (8016c1c <USBD_HS_ProductStrDescriptor+0x38>)
 8016bfc:	f7ff fd84 	bl	8016708 <USBD_GetString>
 8016c00:	e004      	b.n	8016c0c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8016c02:	683a      	ldr	r2, [r7, #0]
 8016c04:	4904      	ldr	r1, [pc, #16]	; (8016c18 <USBD_HS_ProductStrDescriptor+0x34>)
 8016c06:	4805      	ldr	r0, [pc, #20]	; (8016c1c <USBD_HS_ProductStrDescriptor+0x38>)
 8016c08:	f7ff fd7e 	bl	8016708 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016c0c:	4b02      	ldr	r3, [pc, #8]	; (8016c18 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8016c0e:	4618      	mov	r0, r3
 8016c10:	3708      	adds	r7, #8
 8016c12:	46bd      	mov	sp, r7
 8016c14:	bd80      	pop	{r7, pc}
 8016c16:	bf00      	nop
 8016c18:	240029fc 	.word	0x240029fc
 8016c1c:	0801c348 	.word	0x0801c348

08016c20 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016c20:	b580      	push	{r7, lr}
 8016c22:	b082      	sub	sp, #8
 8016c24:	af00      	add	r7, sp, #0
 8016c26:	4603      	mov	r3, r0
 8016c28:	6039      	str	r1, [r7, #0]
 8016c2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016c2c:	683a      	ldr	r2, [r7, #0]
 8016c2e:	4904      	ldr	r1, [pc, #16]	; (8016c40 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8016c30:	4804      	ldr	r0, [pc, #16]	; (8016c44 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8016c32:	f7ff fd69 	bl	8016708 <USBD_GetString>
  return USBD_StrDesc;
 8016c36:	4b02      	ldr	r3, [pc, #8]	; (8016c40 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8016c38:	4618      	mov	r0, r3
 8016c3a:	3708      	adds	r7, #8
 8016c3c:	46bd      	mov	sp, r7
 8016c3e:	bd80      	pop	{r7, pc}
 8016c40:	240029fc 	.word	0x240029fc
 8016c44:	0801c364 	.word	0x0801c364

08016c48 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016c48:	b580      	push	{r7, lr}
 8016c4a:	b082      	sub	sp, #8
 8016c4c:	af00      	add	r7, sp, #0
 8016c4e:	4603      	mov	r3, r0
 8016c50:	6039      	str	r1, [r7, #0]
 8016c52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016c54:	683b      	ldr	r3, [r7, #0]
 8016c56:	221a      	movs	r2, #26
 8016c58:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016c5a:	f000 f843 	bl	8016ce4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8016c5e:	4b02      	ldr	r3, [pc, #8]	; (8016c68 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8016c60:	4618      	mov	r0, r3
 8016c62:	3708      	adds	r7, #8
 8016c64:	46bd      	mov	sp, r7
 8016c66:	bd80      	pop	{r7, pc}
 8016c68:	240000e4 	.word	0x240000e4

08016c6c <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016c6c:	b580      	push	{r7, lr}
 8016c6e:	b082      	sub	sp, #8
 8016c70:	af00      	add	r7, sp, #0
 8016c72:	4603      	mov	r3, r0
 8016c74:	6039      	str	r1, [r7, #0]
 8016c76:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016c78:	79fb      	ldrb	r3, [r7, #7]
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	d105      	bne.n	8016c8a <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8016c7e:	683a      	ldr	r2, [r7, #0]
 8016c80:	4907      	ldr	r1, [pc, #28]	; (8016ca0 <USBD_HS_ConfigStrDescriptor+0x34>)
 8016c82:	4808      	ldr	r0, [pc, #32]	; (8016ca4 <USBD_HS_ConfigStrDescriptor+0x38>)
 8016c84:	f7ff fd40 	bl	8016708 <USBD_GetString>
 8016c88:	e004      	b.n	8016c94 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8016c8a:	683a      	ldr	r2, [r7, #0]
 8016c8c:	4904      	ldr	r1, [pc, #16]	; (8016ca0 <USBD_HS_ConfigStrDescriptor+0x34>)
 8016c8e:	4805      	ldr	r0, [pc, #20]	; (8016ca4 <USBD_HS_ConfigStrDescriptor+0x38>)
 8016c90:	f7ff fd3a 	bl	8016708 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016c94:	4b02      	ldr	r3, [pc, #8]	; (8016ca0 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8016c96:	4618      	mov	r0, r3
 8016c98:	3708      	adds	r7, #8
 8016c9a:	46bd      	mov	sp, r7
 8016c9c:	bd80      	pop	{r7, pc}
 8016c9e:	bf00      	nop
 8016ca0:	240029fc 	.word	0x240029fc
 8016ca4:	0801c368 	.word	0x0801c368

08016ca8 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016ca8:	b580      	push	{r7, lr}
 8016caa:	b082      	sub	sp, #8
 8016cac:	af00      	add	r7, sp, #0
 8016cae:	4603      	mov	r3, r0
 8016cb0:	6039      	str	r1, [r7, #0]
 8016cb2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016cb4:	79fb      	ldrb	r3, [r7, #7]
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d105      	bne.n	8016cc6 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8016cba:	683a      	ldr	r2, [r7, #0]
 8016cbc:	4907      	ldr	r1, [pc, #28]	; (8016cdc <USBD_HS_InterfaceStrDescriptor+0x34>)
 8016cbe:	4808      	ldr	r0, [pc, #32]	; (8016ce0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8016cc0:	f7ff fd22 	bl	8016708 <USBD_GetString>
 8016cc4:	e004      	b.n	8016cd0 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8016cc6:	683a      	ldr	r2, [r7, #0]
 8016cc8:	4904      	ldr	r1, [pc, #16]	; (8016cdc <USBD_HS_InterfaceStrDescriptor+0x34>)
 8016cca:	4805      	ldr	r0, [pc, #20]	; (8016ce0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8016ccc:	f7ff fd1c 	bl	8016708 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016cd0:	4b02      	ldr	r3, [pc, #8]	; (8016cdc <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8016cd2:	4618      	mov	r0, r3
 8016cd4:	3708      	adds	r7, #8
 8016cd6:	46bd      	mov	sp, r7
 8016cd8:	bd80      	pop	{r7, pc}
 8016cda:	bf00      	nop
 8016cdc:	240029fc 	.word	0x240029fc
 8016ce0:	0801c374 	.word	0x0801c374

08016ce4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016ce4:	b580      	push	{r7, lr}
 8016ce6:	b084      	sub	sp, #16
 8016ce8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016cea:	4b0f      	ldr	r3, [pc, #60]	; (8016d28 <Get_SerialNum+0x44>)
 8016cec:	681b      	ldr	r3, [r3, #0]
 8016cee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016cf0:	4b0e      	ldr	r3, [pc, #56]	; (8016d2c <Get_SerialNum+0x48>)
 8016cf2:	681b      	ldr	r3, [r3, #0]
 8016cf4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016cf6:	4b0e      	ldr	r3, [pc, #56]	; (8016d30 <Get_SerialNum+0x4c>)
 8016cf8:	681b      	ldr	r3, [r3, #0]
 8016cfa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016cfc:	68fa      	ldr	r2, [r7, #12]
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	4413      	add	r3, r2
 8016d02:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016d04:	68fb      	ldr	r3, [r7, #12]
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	d009      	beq.n	8016d1e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016d0a:	2208      	movs	r2, #8
 8016d0c:	4909      	ldr	r1, [pc, #36]	; (8016d34 <Get_SerialNum+0x50>)
 8016d0e:	68f8      	ldr	r0, [r7, #12]
 8016d10:	f000 f814 	bl	8016d3c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016d14:	2204      	movs	r2, #4
 8016d16:	4908      	ldr	r1, [pc, #32]	; (8016d38 <Get_SerialNum+0x54>)
 8016d18:	68b8      	ldr	r0, [r7, #8]
 8016d1a:	f000 f80f 	bl	8016d3c <IntToUnicode>
  }
}
 8016d1e:	bf00      	nop
 8016d20:	3710      	adds	r7, #16
 8016d22:	46bd      	mov	sp, r7
 8016d24:	bd80      	pop	{r7, pc}
 8016d26:	bf00      	nop
 8016d28:	1ff1e800 	.word	0x1ff1e800
 8016d2c:	1ff1e804 	.word	0x1ff1e804
 8016d30:	1ff1e808 	.word	0x1ff1e808
 8016d34:	240000e6 	.word	0x240000e6
 8016d38:	240000f6 	.word	0x240000f6

08016d3c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016d3c:	b480      	push	{r7}
 8016d3e:	b087      	sub	sp, #28
 8016d40:	af00      	add	r7, sp, #0
 8016d42:	60f8      	str	r0, [r7, #12]
 8016d44:	60b9      	str	r1, [r7, #8]
 8016d46:	4613      	mov	r3, r2
 8016d48:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016d4a:	2300      	movs	r3, #0
 8016d4c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016d4e:	2300      	movs	r3, #0
 8016d50:	75fb      	strb	r3, [r7, #23]
 8016d52:	e027      	b.n	8016da4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016d54:	68fb      	ldr	r3, [r7, #12]
 8016d56:	0f1b      	lsrs	r3, r3, #28
 8016d58:	2b09      	cmp	r3, #9
 8016d5a:	d80b      	bhi.n	8016d74 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016d5c:	68fb      	ldr	r3, [r7, #12]
 8016d5e:	0f1b      	lsrs	r3, r3, #28
 8016d60:	b2da      	uxtb	r2, r3
 8016d62:	7dfb      	ldrb	r3, [r7, #23]
 8016d64:	005b      	lsls	r3, r3, #1
 8016d66:	4619      	mov	r1, r3
 8016d68:	68bb      	ldr	r3, [r7, #8]
 8016d6a:	440b      	add	r3, r1
 8016d6c:	3230      	adds	r2, #48	; 0x30
 8016d6e:	b2d2      	uxtb	r2, r2
 8016d70:	701a      	strb	r2, [r3, #0]
 8016d72:	e00a      	b.n	8016d8a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016d74:	68fb      	ldr	r3, [r7, #12]
 8016d76:	0f1b      	lsrs	r3, r3, #28
 8016d78:	b2da      	uxtb	r2, r3
 8016d7a:	7dfb      	ldrb	r3, [r7, #23]
 8016d7c:	005b      	lsls	r3, r3, #1
 8016d7e:	4619      	mov	r1, r3
 8016d80:	68bb      	ldr	r3, [r7, #8]
 8016d82:	440b      	add	r3, r1
 8016d84:	3237      	adds	r2, #55	; 0x37
 8016d86:	b2d2      	uxtb	r2, r2
 8016d88:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016d8a:	68fb      	ldr	r3, [r7, #12]
 8016d8c:	011b      	lsls	r3, r3, #4
 8016d8e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016d90:	7dfb      	ldrb	r3, [r7, #23]
 8016d92:	005b      	lsls	r3, r3, #1
 8016d94:	3301      	adds	r3, #1
 8016d96:	68ba      	ldr	r2, [r7, #8]
 8016d98:	4413      	add	r3, r2
 8016d9a:	2200      	movs	r2, #0
 8016d9c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016d9e:	7dfb      	ldrb	r3, [r7, #23]
 8016da0:	3301      	adds	r3, #1
 8016da2:	75fb      	strb	r3, [r7, #23]
 8016da4:	7dfa      	ldrb	r2, [r7, #23]
 8016da6:	79fb      	ldrb	r3, [r7, #7]
 8016da8:	429a      	cmp	r2, r3
 8016daa:	d3d3      	bcc.n	8016d54 <IntToUnicode+0x18>
  }
}
 8016dac:	bf00      	nop
 8016dae:	bf00      	nop
 8016db0:	371c      	adds	r7, #28
 8016db2:	46bd      	mov	sp, r7
 8016db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016db8:	4770      	bx	lr
	...

08016dbc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016dbc:	b580      	push	{r7, lr}
 8016dbe:	b0b2      	sub	sp, #200	; 0xc8
 8016dc0:	af00      	add	r7, sp, #0
 8016dc2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8016dc4:	f107 0310 	add.w	r3, r7, #16
 8016dc8:	22b8      	movs	r2, #184	; 0xb8
 8016dca:	2100      	movs	r1, #0
 8016dcc:	4618      	mov	r0, r3
 8016dce:	f001 fa94 	bl	80182fa <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	681b      	ldr	r3, [r3, #0]
 8016dd6:	4a1a      	ldr	r2, [pc, #104]	; (8016e40 <HAL_PCD_MspInit+0x84>)
 8016dd8:	4293      	cmp	r3, r2
 8016dda:	d12c      	bne.n	8016e36 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8016ddc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8016de0:	f04f 0300 	mov.w	r3, #0
 8016de4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8016de8:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8016dec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8016df0:	f107 0310 	add.w	r3, r7, #16
 8016df4:	4618      	mov	r0, r3
 8016df6:	f7f3 ff2b 	bl	800ac50 <HAL_RCCEx_PeriphCLKConfig>
 8016dfa:	4603      	mov	r3, r0
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d001      	beq.n	8016e04 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8016e00:	f7eb ff66 	bl	8002cd0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8016e04:	f7f2 ff44 	bl	8009c90 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8016e08:	4b0e      	ldr	r3, [pc, #56]	; (8016e44 <HAL_PCD_MspInit+0x88>)
 8016e0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016e0e:	4a0d      	ldr	r2, [pc, #52]	; (8016e44 <HAL_PCD_MspInit+0x88>)
 8016e10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8016e14:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8016e18:	4b0a      	ldr	r3, [pc, #40]	; (8016e44 <HAL_PCD_MspInit+0x88>)
 8016e1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016e22:	60fb      	str	r3, [r7, #12]
 8016e24:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8016e26:	2200      	movs	r2, #0
 8016e28:	2100      	movs	r1, #0
 8016e2a:	204d      	movs	r0, #77	; 0x4d
 8016e2c:	f7ee fccf 	bl	80057ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8016e30:	204d      	movs	r0, #77	; 0x4d
 8016e32:	f7ee fce6 	bl	8005802 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8016e36:	bf00      	nop
 8016e38:	37c8      	adds	r7, #200	; 0xc8
 8016e3a:	46bd      	mov	sp, r7
 8016e3c:	bd80      	pop	{r7, pc}
 8016e3e:	bf00      	nop
 8016e40:	40040000 	.word	0x40040000
 8016e44:	58024400 	.word	0x58024400

08016e48 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016e48:	b580      	push	{r7, lr}
 8016e4a:	b082      	sub	sp, #8
 8016e4c:	af00      	add	r7, sp, #0
 8016e4e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8016e5c:	4619      	mov	r1, r3
 8016e5e:	4610      	mov	r0, r2
 8016e60:	f7fe faed 	bl	801543e <USBD_LL_SetupStage>
}
 8016e64:	bf00      	nop
 8016e66:	3708      	adds	r7, #8
 8016e68:	46bd      	mov	sp, r7
 8016e6a:	bd80      	pop	{r7, pc}

08016e6c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016e6c:	b580      	push	{r7, lr}
 8016e6e:	b082      	sub	sp, #8
 8016e70:	af00      	add	r7, sp, #0
 8016e72:	6078      	str	r0, [r7, #4]
 8016e74:	460b      	mov	r3, r1
 8016e76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016e7e:	78fa      	ldrb	r2, [r7, #3]
 8016e80:	6879      	ldr	r1, [r7, #4]
 8016e82:	4613      	mov	r3, r2
 8016e84:	00db      	lsls	r3, r3, #3
 8016e86:	4413      	add	r3, r2
 8016e88:	009b      	lsls	r3, r3, #2
 8016e8a:	440b      	add	r3, r1
 8016e8c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8016e90:	681a      	ldr	r2, [r3, #0]
 8016e92:	78fb      	ldrb	r3, [r7, #3]
 8016e94:	4619      	mov	r1, r3
 8016e96:	f7fe fb27 	bl	80154e8 <USBD_LL_DataOutStage>
}
 8016e9a:	bf00      	nop
 8016e9c:	3708      	adds	r7, #8
 8016e9e:	46bd      	mov	sp, r7
 8016ea0:	bd80      	pop	{r7, pc}

08016ea2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ea2:	b580      	push	{r7, lr}
 8016ea4:	b082      	sub	sp, #8
 8016ea6:	af00      	add	r7, sp, #0
 8016ea8:	6078      	str	r0, [r7, #4]
 8016eaa:	460b      	mov	r3, r1
 8016eac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016eb4:	78fa      	ldrb	r2, [r7, #3]
 8016eb6:	6879      	ldr	r1, [r7, #4]
 8016eb8:	4613      	mov	r3, r2
 8016eba:	00db      	lsls	r3, r3, #3
 8016ebc:	4413      	add	r3, r2
 8016ebe:	009b      	lsls	r3, r3, #2
 8016ec0:	440b      	add	r3, r1
 8016ec2:	3348      	adds	r3, #72	; 0x48
 8016ec4:	681a      	ldr	r2, [r3, #0]
 8016ec6:	78fb      	ldrb	r3, [r7, #3]
 8016ec8:	4619      	mov	r1, r3
 8016eca:	f7fe fbc0 	bl	801564e <USBD_LL_DataInStage>
}
 8016ece:	bf00      	nop
 8016ed0:	3708      	adds	r7, #8
 8016ed2:	46bd      	mov	sp, r7
 8016ed4:	bd80      	pop	{r7, pc}

08016ed6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ed6:	b580      	push	{r7, lr}
 8016ed8:	b082      	sub	sp, #8
 8016eda:	af00      	add	r7, sp, #0
 8016edc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016ee4:	4618      	mov	r0, r3
 8016ee6:	f7fe fcfa 	bl	80158de <USBD_LL_SOF>
}
 8016eea:	bf00      	nop
 8016eec:	3708      	adds	r7, #8
 8016eee:	46bd      	mov	sp, r7
 8016ef0:	bd80      	pop	{r7, pc}

08016ef2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ef2:	b580      	push	{r7, lr}
 8016ef4:	b084      	sub	sp, #16
 8016ef6:	af00      	add	r7, sp, #0
 8016ef8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016efa:	2301      	movs	r3, #1
 8016efc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	691b      	ldr	r3, [r3, #16]
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	d102      	bne.n	8016f0c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8016f06:	2300      	movs	r3, #0
 8016f08:	73fb      	strb	r3, [r7, #15]
 8016f0a:	e008      	b.n	8016f1e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	691b      	ldr	r3, [r3, #16]
 8016f10:	2b02      	cmp	r3, #2
 8016f12:	d102      	bne.n	8016f1a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016f14:	2301      	movs	r3, #1
 8016f16:	73fb      	strb	r3, [r7, #15]
 8016f18:	e001      	b.n	8016f1e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8016f1a:	f7eb fed9 	bl	8002cd0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016f24:	7bfa      	ldrb	r2, [r7, #15]
 8016f26:	4611      	mov	r1, r2
 8016f28:	4618      	mov	r0, r3
 8016f2a:	f7fe fc94 	bl	8015856 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016f34:	4618      	mov	r0, r3
 8016f36:	f7fe fc3c 	bl	80157b2 <USBD_LL_Reset>
}
 8016f3a:	bf00      	nop
 8016f3c:	3710      	adds	r7, #16
 8016f3e:	46bd      	mov	sp, r7
 8016f40:	bd80      	pop	{r7, pc}
	...

08016f44 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016f44:	b580      	push	{r7, lr}
 8016f46:	b082      	sub	sp, #8
 8016f48:	af00      	add	r7, sp, #0
 8016f4a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016f52:	4618      	mov	r0, r3
 8016f54:	f7fe fc8f 	bl	8015876 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	681b      	ldr	r3, [r3, #0]
 8016f5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016f60:	681b      	ldr	r3, [r3, #0]
 8016f62:	687a      	ldr	r2, [r7, #4]
 8016f64:	6812      	ldr	r2, [r2, #0]
 8016f66:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016f6a:	f043 0301 	orr.w	r3, r3, #1
 8016f6e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	6a1b      	ldr	r3, [r3, #32]
 8016f74:	2b00      	cmp	r3, #0
 8016f76:	d005      	beq.n	8016f84 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016f78:	4b04      	ldr	r3, [pc, #16]	; (8016f8c <HAL_PCD_SuspendCallback+0x48>)
 8016f7a:	691b      	ldr	r3, [r3, #16]
 8016f7c:	4a03      	ldr	r2, [pc, #12]	; (8016f8c <HAL_PCD_SuspendCallback+0x48>)
 8016f7e:	f043 0306 	orr.w	r3, r3, #6
 8016f82:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016f84:	bf00      	nop
 8016f86:	3708      	adds	r7, #8
 8016f88:	46bd      	mov	sp, r7
 8016f8a:	bd80      	pop	{r7, pc}
 8016f8c:	e000ed00 	.word	0xe000ed00

08016f90 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016f90:	b580      	push	{r7, lr}
 8016f92:	b082      	sub	sp, #8
 8016f94:	af00      	add	r7, sp, #0
 8016f96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016f9e:	4618      	mov	r0, r3
 8016fa0:	f7fe fc85 	bl	80158ae <USBD_LL_Resume>
}
 8016fa4:	bf00      	nop
 8016fa6:	3708      	adds	r7, #8
 8016fa8:	46bd      	mov	sp, r7
 8016faa:	bd80      	pop	{r7, pc}

08016fac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016fac:	b580      	push	{r7, lr}
 8016fae:	b082      	sub	sp, #8
 8016fb0:	af00      	add	r7, sp, #0
 8016fb2:	6078      	str	r0, [r7, #4]
 8016fb4:	460b      	mov	r3, r1
 8016fb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016fbe:	78fa      	ldrb	r2, [r7, #3]
 8016fc0:	4611      	mov	r1, r2
 8016fc2:	4618      	mov	r0, r3
 8016fc4:	f7fe fcdd 	bl	8015982 <USBD_LL_IsoOUTIncomplete>
}
 8016fc8:	bf00      	nop
 8016fca:	3708      	adds	r7, #8
 8016fcc:	46bd      	mov	sp, r7
 8016fce:	bd80      	pop	{r7, pc}

08016fd0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016fd0:	b580      	push	{r7, lr}
 8016fd2:	b082      	sub	sp, #8
 8016fd4:	af00      	add	r7, sp, #0
 8016fd6:	6078      	str	r0, [r7, #4]
 8016fd8:	460b      	mov	r3, r1
 8016fda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016fe2:	78fa      	ldrb	r2, [r7, #3]
 8016fe4:	4611      	mov	r1, r2
 8016fe6:	4618      	mov	r0, r3
 8016fe8:	f7fe fc99 	bl	801591e <USBD_LL_IsoINIncomplete>
}
 8016fec:	bf00      	nop
 8016fee:	3708      	adds	r7, #8
 8016ff0:	46bd      	mov	sp, r7
 8016ff2:	bd80      	pop	{r7, pc}

08016ff4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ff4:	b580      	push	{r7, lr}
 8016ff6:	b082      	sub	sp, #8
 8016ff8:	af00      	add	r7, sp, #0
 8016ffa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017002:	4618      	mov	r0, r3
 8017004:	f7fe fcef 	bl	80159e6 <USBD_LL_DevConnected>
}
 8017008:	bf00      	nop
 801700a:	3708      	adds	r7, #8
 801700c:	46bd      	mov	sp, r7
 801700e:	bd80      	pop	{r7, pc}

08017010 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017010:	b580      	push	{r7, lr}
 8017012:	b082      	sub	sp, #8
 8017014:	af00      	add	r7, sp, #0
 8017016:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801701e:	4618      	mov	r0, r3
 8017020:	f7fe fcec 	bl	80159fc <USBD_LL_DevDisconnected>
}
 8017024:	bf00      	nop
 8017026:	3708      	adds	r7, #8
 8017028:	46bd      	mov	sp, r7
 801702a:	bd80      	pop	{r7, pc}

0801702c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801702c:	b580      	push	{r7, lr}
 801702e:	b082      	sub	sp, #8
 8017030:	af00      	add	r7, sp, #0
 8017032:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	781b      	ldrb	r3, [r3, #0]
 8017038:	2b01      	cmp	r3, #1
 801703a:	d140      	bne.n	80170be <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 801703c:	4a22      	ldr	r2, [pc, #136]	; (80170c8 <USBD_LL_Init+0x9c>)
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	4a20      	ldr	r2, [pc, #128]	; (80170c8 <USBD_LL_Init+0x9c>)
 8017048:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 801704c:	4b1e      	ldr	r3, [pc, #120]	; (80170c8 <USBD_LL_Init+0x9c>)
 801704e:	4a1f      	ldr	r2, [pc, #124]	; (80170cc <USBD_LL_Init+0xa0>)
 8017050:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8017052:	4b1d      	ldr	r3, [pc, #116]	; (80170c8 <USBD_LL_Init+0x9c>)
 8017054:	2209      	movs	r2, #9
 8017056:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8017058:	4b1b      	ldr	r3, [pc, #108]	; (80170c8 <USBD_LL_Init+0x9c>)
 801705a:	2202      	movs	r2, #2
 801705c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801705e:	4b1a      	ldr	r3, [pc, #104]	; (80170c8 <USBD_LL_Init+0x9c>)
 8017060:	2200      	movs	r2, #0
 8017062:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8017064:	4b18      	ldr	r3, [pc, #96]	; (80170c8 <USBD_LL_Init+0x9c>)
 8017066:	2202      	movs	r2, #2
 8017068:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801706a:	4b17      	ldr	r3, [pc, #92]	; (80170c8 <USBD_LL_Init+0x9c>)
 801706c:	2200      	movs	r2, #0
 801706e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8017070:	4b15      	ldr	r3, [pc, #84]	; (80170c8 <USBD_LL_Init+0x9c>)
 8017072:	2200      	movs	r2, #0
 8017074:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8017076:	4b14      	ldr	r3, [pc, #80]	; (80170c8 <USBD_LL_Init+0x9c>)
 8017078:	2200      	movs	r2, #0
 801707a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 801707c:	4b12      	ldr	r3, [pc, #72]	; (80170c8 <USBD_LL_Init+0x9c>)
 801707e:	2200      	movs	r2, #0
 8017080:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8017082:	4b11      	ldr	r3, [pc, #68]	; (80170c8 <USBD_LL_Init+0x9c>)
 8017084:	2200      	movs	r2, #0
 8017086:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8017088:	4b0f      	ldr	r3, [pc, #60]	; (80170c8 <USBD_LL_Init+0x9c>)
 801708a:	2200      	movs	r2, #0
 801708c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 801708e:	480e      	ldr	r0, [pc, #56]	; (80170c8 <USBD_LL_Init+0x9c>)
 8017090:	f7f1 fb0b 	bl	80086aa <HAL_PCD_Init>
 8017094:	4603      	mov	r3, r0
 8017096:	2b00      	cmp	r3, #0
 8017098:	d001      	beq.n	801709e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801709a:	f7eb fe19 	bl	8002cd0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 801709e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80170a2:	4809      	ldr	r0, [pc, #36]	; (80170c8 <USBD_LL_Init+0x9c>)
 80170a4:	f7f2 fd79 	bl	8009b9a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 80170a8:	2280      	movs	r2, #128	; 0x80
 80170aa:	2100      	movs	r1, #0
 80170ac:	4806      	ldr	r0, [pc, #24]	; (80170c8 <USBD_LL_Init+0x9c>)
 80170ae:	f7f2 fd2d 	bl	8009b0c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 80170b2:	f44f 72ba 	mov.w	r2, #372	; 0x174
 80170b6:	2101      	movs	r1, #1
 80170b8:	4803      	ldr	r0, [pc, #12]	; (80170c8 <USBD_LL_Init+0x9c>)
 80170ba:	f7f2 fd27 	bl	8009b0c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 80170be:	2300      	movs	r3, #0
}
 80170c0:	4618      	mov	r0, r3
 80170c2:	3708      	adds	r7, #8
 80170c4:	46bd      	mov	sp, r7
 80170c6:	bd80      	pop	{r7, pc}
 80170c8:	24002bfc 	.word	0x24002bfc
 80170cc:	40040000 	.word	0x40040000

080170d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80170d0:	b580      	push	{r7, lr}
 80170d2:	b084      	sub	sp, #16
 80170d4:	af00      	add	r7, sp, #0
 80170d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80170d8:	2300      	movs	r3, #0
 80170da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80170dc:	2300      	movs	r3, #0
 80170de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80170e6:	4618      	mov	r0, r3
 80170e8:	f7f1 fc03 	bl	80088f2 <HAL_PCD_Start>
 80170ec:	4603      	mov	r3, r0
 80170ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80170f0:	7bfb      	ldrb	r3, [r7, #15]
 80170f2:	4618      	mov	r0, r3
 80170f4:	f000 f942 	bl	801737c <USBD_Get_USB_Status>
 80170f8:	4603      	mov	r3, r0
 80170fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80170fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80170fe:	4618      	mov	r0, r3
 8017100:	3710      	adds	r7, #16
 8017102:	46bd      	mov	sp, r7
 8017104:	bd80      	pop	{r7, pc}

08017106 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017106:	b580      	push	{r7, lr}
 8017108:	b084      	sub	sp, #16
 801710a:	af00      	add	r7, sp, #0
 801710c:	6078      	str	r0, [r7, #4]
 801710e:	4608      	mov	r0, r1
 8017110:	4611      	mov	r1, r2
 8017112:	461a      	mov	r2, r3
 8017114:	4603      	mov	r3, r0
 8017116:	70fb      	strb	r3, [r7, #3]
 8017118:	460b      	mov	r3, r1
 801711a:	70bb      	strb	r3, [r7, #2]
 801711c:	4613      	mov	r3, r2
 801711e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017120:	2300      	movs	r3, #0
 8017122:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017124:	2300      	movs	r3, #0
 8017126:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801712e:	78bb      	ldrb	r3, [r7, #2]
 8017130:	883a      	ldrh	r2, [r7, #0]
 8017132:	78f9      	ldrb	r1, [r7, #3]
 8017134:	f7f2 f903 	bl	800933e <HAL_PCD_EP_Open>
 8017138:	4603      	mov	r3, r0
 801713a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801713c:	7bfb      	ldrb	r3, [r7, #15]
 801713e:	4618      	mov	r0, r3
 8017140:	f000 f91c 	bl	801737c <USBD_Get_USB_Status>
 8017144:	4603      	mov	r3, r0
 8017146:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017148:	7bbb      	ldrb	r3, [r7, #14]
}
 801714a:	4618      	mov	r0, r3
 801714c:	3710      	adds	r7, #16
 801714e:	46bd      	mov	sp, r7
 8017150:	bd80      	pop	{r7, pc}

08017152 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017152:	b580      	push	{r7, lr}
 8017154:	b084      	sub	sp, #16
 8017156:	af00      	add	r7, sp, #0
 8017158:	6078      	str	r0, [r7, #4]
 801715a:	460b      	mov	r3, r1
 801715c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801715e:	2300      	movs	r3, #0
 8017160:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017162:	2300      	movs	r3, #0
 8017164:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801716c:	78fa      	ldrb	r2, [r7, #3]
 801716e:	4611      	mov	r1, r2
 8017170:	4618      	mov	r0, r3
 8017172:	f7f2 f94c 	bl	800940e <HAL_PCD_EP_Close>
 8017176:	4603      	mov	r3, r0
 8017178:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801717a:	7bfb      	ldrb	r3, [r7, #15]
 801717c:	4618      	mov	r0, r3
 801717e:	f000 f8fd 	bl	801737c <USBD_Get_USB_Status>
 8017182:	4603      	mov	r3, r0
 8017184:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017186:	7bbb      	ldrb	r3, [r7, #14]
}
 8017188:	4618      	mov	r0, r3
 801718a:	3710      	adds	r7, #16
 801718c:	46bd      	mov	sp, r7
 801718e:	bd80      	pop	{r7, pc}

08017190 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017190:	b580      	push	{r7, lr}
 8017192:	b084      	sub	sp, #16
 8017194:	af00      	add	r7, sp, #0
 8017196:	6078      	str	r0, [r7, #4]
 8017198:	460b      	mov	r3, r1
 801719a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801719c:	2300      	movs	r3, #0
 801719e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80171a0:	2300      	movs	r3, #0
 80171a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80171aa:	78fa      	ldrb	r2, [r7, #3]
 80171ac:	4611      	mov	r1, r2
 80171ae:	4618      	mov	r0, r3
 80171b0:	f7f2 fa06 	bl	80095c0 <HAL_PCD_EP_SetStall>
 80171b4:	4603      	mov	r3, r0
 80171b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80171b8:	7bfb      	ldrb	r3, [r7, #15]
 80171ba:	4618      	mov	r0, r3
 80171bc:	f000 f8de 	bl	801737c <USBD_Get_USB_Status>
 80171c0:	4603      	mov	r3, r0
 80171c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80171c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80171c6:	4618      	mov	r0, r3
 80171c8:	3710      	adds	r7, #16
 80171ca:	46bd      	mov	sp, r7
 80171cc:	bd80      	pop	{r7, pc}

080171ce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80171ce:	b580      	push	{r7, lr}
 80171d0:	b084      	sub	sp, #16
 80171d2:	af00      	add	r7, sp, #0
 80171d4:	6078      	str	r0, [r7, #4]
 80171d6:	460b      	mov	r3, r1
 80171d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80171da:	2300      	movs	r3, #0
 80171dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80171de:	2300      	movs	r3, #0
 80171e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80171e8:	78fa      	ldrb	r2, [r7, #3]
 80171ea:	4611      	mov	r1, r2
 80171ec:	4618      	mov	r0, r3
 80171ee:	f7f2 fa4b 	bl	8009688 <HAL_PCD_EP_ClrStall>
 80171f2:	4603      	mov	r3, r0
 80171f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80171f6:	7bfb      	ldrb	r3, [r7, #15]
 80171f8:	4618      	mov	r0, r3
 80171fa:	f000 f8bf 	bl	801737c <USBD_Get_USB_Status>
 80171fe:	4603      	mov	r3, r0
 8017200:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017202:	7bbb      	ldrb	r3, [r7, #14]
}
 8017204:	4618      	mov	r0, r3
 8017206:	3710      	adds	r7, #16
 8017208:	46bd      	mov	sp, r7
 801720a:	bd80      	pop	{r7, pc}

0801720c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801720c:	b480      	push	{r7}
 801720e:	b085      	sub	sp, #20
 8017210:	af00      	add	r7, sp, #0
 8017212:	6078      	str	r0, [r7, #4]
 8017214:	460b      	mov	r3, r1
 8017216:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801721e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017220:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017224:	2b00      	cmp	r3, #0
 8017226:	da0b      	bge.n	8017240 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017228:	78fb      	ldrb	r3, [r7, #3]
 801722a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801722e:	68f9      	ldr	r1, [r7, #12]
 8017230:	4613      	mov	r3, r2
 8017232:	00db      	lsls	r3, r3, #3
 8017234:	4413      	add	r3, r2
 8017236:	009b      	lsls	r3, r3, #2
 8017238:	440b      	add	r3, r1
 801723a:	333e      	adds	r3, #62	; 0x3e
 801723c:	781b      	ldrb	r3, [r3, #0]
 801723e:	e00b      	b.n	8017258 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017240:	78fb      	ldrb	r3, [r7, #3]
 8017242:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017246:	68f9      	ldr	r1, [r7, #12]
 8017248:	4613      	mov	r3, r2
 801724a:	00db      	lsls	r3, r3, #3
 801724c:	4413      	add	r3, r2
 801724e:	009b      	lsls	r3, r3, #2
 8017250:	440b      	add	r3, r1
 8017252:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8017256:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017258:	4618      	mov	r0, r3
 801725a:	3714      	adds	r7, #20
 801725c:	46bd      	mov	sp, r7
 801725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017262:	4770      	bx	lr

08017264 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017264:	b580      	push	{r7, lr}
 8017266:	b084      	sub	sp, #16
 8017268:	af00      	add	r7, sp, #0
 801726a:	6078      	str	r0, [r7, #4]
 801726c:	460b      	mov	r3, r1
 801726e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017270:	2300      	movs	r3, #0
 8017272:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017274:	2300      	movs	r3, #0
 8017276:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801727e:	78fa      	ldrb	r2, [r7, #3]
 8017280:	4611      	mov	r1, r2
 8017282:	4618      	mov	r0, r3
 8017284:	f7f2 f836 	bl	80092f4 <HAL_PCD_SetAddress>
 8017288:	4603      	mov	r3, r0
 801728a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801728c:	7bfb      	ldrb	r3, [r7, #15]
 801728e:	4618      	mov	r0, r3
 8017290:	f000 f874 	bl	801737c <USBD_Get_USB_Status>
 8017294:	4603      	mov	r3, r0
 8017296:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017298:	7bbb      	ldrb	r3, [r7, #14]
}
 801729a:	4618      	mov	r0, r3
 801729c:	3710      	adds	r7, #16
 801729e:	46bd      	mov	sp, r7
 80172a0:	bd80      	pop	{r7, pc}

080172a2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80172a2:	b580      	push	{r7, lr}
 80172a4:	b086      	sub	sp, #24
 80172a6:	af00      	add	r7, sp, #0
 80172a8:	60f8      	str	r0, [r7, #12]
 80172aa:	607a      	str	r2, [r7, #4]
 80172ac:	603b      	str	r3, [r7, #0]
 80172ae:	460b      	mov	r3, r1
 80172b0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80172b2:	2300      	movs	r3, #0
 80172b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80172b6:	2300      	movs	r3, #0
 80172b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80172ba:	68fb      	ldr	r3, [r7, #12]
 80172bc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80172c0:	7af9      	ldrb	r1, [r7, #11]
 80172c2:	683b      	ldr	r3, [r7, #0]
 80172c4:	687a      	ldr	r2, [r7, #4]
 80172c6:	f7f2 f940 	bl	800954a <HAL_PCD_EP_Transmit>
 80172ca:	4603      	mov	r3, r0
 80172cc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80172ce:	7dfb      	ldrb	r3, [r7, #23]
 80172d0:	4618      	mov	r0, r3
 80172d2:	f000 f853 	bl	801737c <USBD_Get_USB_Status>
 80172d6:	4603      	mov	r3, r0
 80172d8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80172da:	7dbb      	ldrb	r3, [r7, #22]
}
 80172dc:	4618      	mov	r0, r3
 80172de:	3718      	adds	r7, #24
 80172e0:	46bd      	mov	sp, r7
 80172e2:	bd80      	pop	{r7, pc}

080172e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80172e4:	b580      	push	{r7, lr}
 80172e6:	b086      	sub	sp, #24
 80172e8:	af00      	add	r7, sp, #0
 80172ea:	60f8      	str	r0, [r7, #12]
 80172ec:	607a      	str	r2, [r7, #4]
 80172ee:	603b      	str	r3, [r7, #0]
 80172f0:	460b      	mov	r3, r1
 80172f2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80172f4:	2300      	movs	r3, #0
 80172f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80172f8:	2300      	movs	r3, #0
 80172fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80172fc:	68fb      	ldr	r3, [r7, #12]
 80172fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017302:	7af9      	ldrb	r1, [r7, #11]
 8017304:	683b      	ldr	r3, [r7, #0]
 8017306:	687a      	ldr	r2, [r7, #4]
 8017308:	f7f2 f8cb 	bl	80094a2 <HAL_PCD_EP_Receive>
 801730c:	4603      	mov	r3, r0
 801730e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017310:	7dfb      	ldrb	r3, [r7, #23]
 8017312:	4618      	mov	r0, r3
 8017314:	f000 f832 	bl	801737c <USBD_Get_USB_Status>
 8017318:	4603      	mov	r3, r0
 801731a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801731c:	7dbb      	ldrb	r3, [r7, #22]
}
 801731e:	4618      	mov	r0, r3
 8017320:	3718      	adds	r7, #24
 8017322:	46bd      	mov	sp, r7
 8017324:	bd80      	pop	{r7, pc}

08017326 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017326:	b580      	push	{r7, lr}
 8017328:	b082      	sub	sp, #8
 801732a:	af00      	add	r7, sp, #0
 801732c:	6078      	str	r0, [r7, #4]
 801732e:	460b      	mov	r3, r1
 8017330:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017338:	78fa      	ldrb	r2, [r7, #3]
 801733a:	4611      	mov	r1, r2
 801733c:	4618      	mov	r0, r3
 801733e:	f7f2 f8ec 	bl	800951a <HAL_PCD_EP_GetRxCount>
 8017342:	4603      	mov	r3, r0
}
 8017344:	4618      	mov	r0, r3
 8017346:	3708      	adds	r7, #8
 8017348:	46bd      	mov	sp, r7
 801734a:	bd80      	pop	{r7, pc}

0801734c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801734c:	b480      	push	{r7}
 801734e:	b083      	sub	sp, #12
 8017350:	af00      	add	r7, sp, #0
 8017352:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017354:	4b03      	ldr	r3, [pc, #12]	; (8017364 <USBD_static_malloc+0x18>)
}
 8017356:	4618      	mov	r0, r3
 8017358:	370c      	adds	r7, #12
 801735a:	46bd      	mov	sp, r7
 801735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017360:	4770      	bx	lr
 8017362:	bf00      	nop
 8017364:	24003108 	.word	0x24003108

08017368 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017368:	b480      	push	{r7}
 801736a:	b083      	sub	sp, #12
 801736c:	af00      	add	r7, sp, #0
 801736e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8017370:	bf00      	nop
 8017372:	370c      	adds	r7, #12
 8017374:	46bd      	mov	sp, r7
 8017376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801737a:	4770      	bx	lr

0801737c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801737c:	b480      	push	{r7}
 801737e:	b085      	sub	sp, #20
 8017380:	af00      	add	r7, sp, #0
 8017382:	4603      	mov	r3, r0
 8017384:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017386:	2300      	movs	r3, #0
 8017388:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801738a:	79fb      	ldrb	r3, [r7, #7]
 801738c:	2b03      	cmp	r3, #3
 801738e:	d817      	bhi.n	80173c0 <USBD_Get_USB_Status+0x44>
 8017390:	a201      	add	r2, pc, #4	; (adr r2, 8017398 <USBD_Get_USB_Status+0x1c>)
 8017392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017396:	bf00      	nop
 8017398:	080173a9 	.word	0x080173a9
 801739c:	080173af 	.word	0x080173af
 80173a0:	080173b5 	.word	0x080173b5
 80173a4:	080173bb 	.word	0x080173bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80173a8:	2300      	movs	r3, #0
 80173aa:	73fb      	strb	r3, [r7, #15]
    break;
 80173ac:	e00b      	b.n	80173c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80173ae:	2303      	movs	r3, #3
 80173b0:	73fb      	strb	r3, [r7, #15]
    break;
 80173b2:	e008      	b.n	80173c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80173b4:	2301      	movs	r3, #1
 80173b6:	73fb      	strb	r3, [r7, #15]
    break;
 80173b8:	e005      	b.n	80173c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80173ba:	2303      	movs	r3, #3
 80173bc:	73fb      	strb	r3, [r7, #15]
    break;
 80173be:	e002      	b.n	80173c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80173c0:	2303      	movs	r3, #3
 80173c2:	73fb      	strb	r3, [r7, #15]
    break;
 80173c4:	bf00      	nop
  }
  return usb_status;
 80173c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80173c8:	4618      	mov	r0, r3
 80173ca:	3714      	adds	r7, #20
 80173cc:	46bd      	mov	sp, r7
 80173ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173d2:	4770      	bx	lr

080173d4 <__cvt>:
 80173d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80173d6:	ed2d 8b02 	vpush	{d8}
 80173da:	eeb0 8b40 	vmov.f64	d8, d0
 80173de:	b085      	sub	sp, #20
 80173e0:	4617      	mov	r7, r2
 80173e2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80173e4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80173e6:	ee18 2a90 	vmov	r2, s17
 80173ea:	f025 0520 	bic.w	r5, r5, #32
 80173ee:	2a00      	cmp	r2, #0
 80173f0:	bfb6      	itet	lt
 80173f2:	222d      	movlt	r2, #45	; 0x2d
 80173f4:	2200      	movge	r2, #0
 80173f6:	eeb1 8b40 	vneglt.f64	d8, d0
 80173fa:	2d46      	cmp	r5, #70	; 0x46
 80173fc:	460c      	mov	r4, r1
 80173fe:	701a      	strb	r2, [r3, #0]
 8017400:	d004      	beq.n	801740c <__cvt+0x38>
 8017402:	2d45      	cmp	r5, #69	; 0x45
 8017404:	d100      	bne.n	8017408 <__cvt+0x34>
 8017406:	3401      	adds	r4, #1
 8017408:	2102      	movs	r1, #2
 801740a:	e000      	b.n	801740e <__cvt+0x3a>
 801740c:	2103      	movs	r1, #3
 801740e:	ab03      	add	r3, sp, #12
 8017410:	9301      	str	r3, [sp, #4]
 8017412:	ab02      	add	r3, sp, #8
 8017414:	9300      	str	r3, [sp, #0]
 8017416:	4622      	mov	r2, r4
 8017418:	4633      	mov	r3, r6
 801741a:	eeb0 0b48 	vmov.f64	d0, d8
 801741e:	f001 f893 	bl	8018548 <_dtoa_r>
 8017422:	2d47      	cmp	r5, #71	; 0x47
 8017424:	d101      	bne.n	801742a <__cvt+0x56>
 8017426:	07fb      	lsls	r3, r7, #31
 8017428:	d51a      	bpl.n	8017460 <__cvt+0x8c>
 801742a:	2d46      	cmp	r5, #70	; 0x46
 801742c:	eb00 0204 	add.w	r2, r0, r4
 8017430:	d10c      	bne.n	801744c <__cvt+0x78>
 8017432:	7803      	ldrb	r3, [r0, #0]
 8017434:	2b30      	cmp	r3, #48	; 0x30
 8017436:	d107      	bne.n	8017448 <__cvt+0x74>
 8017438:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801743c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017440:	bf1c      	itt	ne
 8017442:	f1c4 0401 	rsbne	r4, r4, #1
 8017446:	6034      	strne	r4, [r6, #0]
 8017448:	6833      	ldr	r3, [r6, #0]
 801744a:	441a      	add	r2, r3
 801744c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8017450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017454:	bf08      	it	eq
 8017456:	9203      	streq	r2, [sp, #12]
 8017458:	2130      	movs	r1, #48	; 0x30
 801745a:	9b03      	ldr	r3, [sp, #12]
 801745c:	4293      	cmp	r3, r2
 801745e:	d307      	bcc.n	8017470 <__cvt+0x9c>
 8017460:	9b03      	ldr	r3, [sp, #12]
 8017462:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017464:	1a1b      	subs	r3, r3, r0
 8017466:	6013      	str	r3, [r2, #0]
 8017468:	b005      	add	sp, #20
 801746a:	ecbd 8b02 	vpop	{d8}
 801746e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017470:	1c5c      	adds	r4, r3, #1
 8017472:	9403      	str	r4, [sp, #12]
 8017474:	7019      	strb	r1, [r3, #0]
 8017476:	e7f0      	b.n	801745a <__cvt+0x86>

08017478 <__exponent>:
 8017478:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801747a:	4603      	mov	r3, r0
 801747c:	2900      	cmp	r1, #0
 801747e:	bfb8      	it	lt
 8017480:	4249      	neglt	r1, r1
 8017482:	f803 2b02 	strb.w	r2, [r3], #2
 8017486:	bfb4      	ite	lt
 8017488:	222d      	movlt	r2, #45	; 0x2d
 801748a:	222b      	movge	r2, #43	; 0x2b
 801748c:	2909      	cmp	r1, #9
 801748e:	7042      	strb	r2, [r0, #1]
 8017490:	dd2a      	ble.n	80174e8 <__exponent+0x70>
 8017492:	f10d 0207 	add.w	r2, sp, #7
 8017496:	4617      	mov	r7, r2
 8017498:	260a      	movs	r6, #10
 801749a:	4694      	mov	ip, r2
 801749c:	fb91 f5f6 	sdiv	r5, r1, r6
 80174a0:	fb06 1415 	mls	r4, r6, r5, r1
 80174a4:	3430      	adds	r4, #48	; 0x30
 80174a6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80174aa:	460c      	mov	r4, r1
 80174ac:	2c63      	cmp	r4, #99	; 0x63
 80174ae:	f102 32ff 	add.w	r2, r2, #4294967295
 80174b2:	4629      	mov	r1, r5
 80174b4:	dcf1      	bgt.n	801749a <__exponent+0x22>
 80174b6:	3130      	adds	r1, #48	; 0x30
 80174b8:	f1ac 0402 	sub.w	r4, ip, #2
 80174bc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80174c0:	1c41      	adds	r1, r0, #1
 80174c2:	4622      	mov	r2, r4
 80174c4:	42ba      	cmp	r2, r7
 80174c6:	d30a      	bcc.n	80174de <__exponent+0x66>
 80174c8:	f10d 0209 	add.w	r2, sp, #9
 80174cc:	eba2 020c 	sub.w	r2, r2, ip
 80174d0:	42bc      	cmp	r4, r7
 80174d2:	bf88      	it	hi
 80174d4:	2200      	movhi	r2, #0
 80174d6:	4413      	add	r3, r2
 80174d8:	1a18      	subs	r0, r3, r0
 80174da:	b003      	add	sp, #12
 80174dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80174de:	f812 5b01 	ldrb.w	r5, [r2], #1
 80174e2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80174e6:	e7ed      	b.n	80174c4 <__exponent+0x4c>
 80174e8:	2330      	movs	r3, #48	; 0x30
 80174ea:	3130      	adds	r1, #48	; 0x30
 80174ec:	7083      	strb	r3, [r0, #2]
 80174ee:	70c1      	strb	r1, [r0, #3]
 80174f0:	1d03      	adds	r3, r0, #4
 80174f2:	e7f1      	b.n	80174d8 <__exponent+0x60>
 80174f4:	0000      	movs	r0, r0
	...

080174f8 <_printf_float>:
 80174f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174fc:	b08b      	sub	sp, #44	; 0x2c
 80174fe:	460c      	mov	r4, r1
 8017500:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8017504:	4616      	mov	r6, r2
 8017506:	461f      	mov	r7, r3
 8017508:	4605      	mov	r5, r0
 801750a:	f000 feff 	bl	801830c <_localeconv_r>
 801750e:	f8d0 b000 	ldr.w	fp, [r0]
 8017512:	4658      	mov	r0, fp
 8017514:	f7e8 ff5c 	bl	80003d0 <strlen>
 8017518:	2300      	movs	r3, #0
 801751a:	9308      	str	r3, [sp, #32]
 801751c:	f8d8 3000 	ldr.w	r3, [r8]
 8017520:	f894 9018 	ldrb.w	r9, [r4, #24]
 8017524:	6822      	ldr	r2, [r4, #0]
 8017526:	3307      	adds	r3, #7
 8017528:	f023 0307 	bic.w	r3, r3, #7
 801752c:	f103 0108 	add.w	r1, r3, #8
 8017530:	f8c8 1000 	str.w	r1, [r8]
 8017534:	ed93 0b00 	vldr	d0, [r3]
 8017538:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8017798 <_printf_float+0x2a0>
 801753c:	eeb0 7bc0 	vabs.f64	d7, d0
 8017540:	eeb4 7b46 	vcmp.f64	d7, d6
 8017544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017548:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 801754c:	4682      	mov	sl, r0
 801754e:	dd24      	ble.n	801759a <_printf_float+0xa2>
 8017550:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8017554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017558:	d502      	bpl.n	8017560 <_printf_float+0x68>
 801755a:	232d      	movs	r3, #45	; 0x2d
 801755c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017560:	498f      	ldr	r1, [pc, #572]	; (80177a0 <_printf_float+0x2a8>)
 8017562:	4b90      	ldr	r3, [pc, #576]	; (80177a4 <_printf_float+0x2ac>)
 8017564:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8017568:	bf94      	ite	ls
 801756a:	4688      	movls	r8, r1
 801756c:	4698      	movhi	r8, r3
 801756e:	2303      	movs	r3, #3
 8017570:	6123      	str	r3, [r4, #16]
 8017572:	f022 0204 	bic.w	r2, r2, #4
 8017576:	2300      	movs	r3, #0
 8017578:	6022      	str	r2, [r4, #0]
 801757a:	9304      	str	r3, [sp, #16]
 801757c:	9700      	str	r7, [sp, #0]
 801757e:	4633      	mov	r3, r6
 8017580:	aa09      	add	r2, sp, #36	; 0x24
 8017582:	4621      	mov	r1, r4
 8017584:	4628      	mov	r0, r5
 8017586:	f000 f9d1 	bl	801792c <_printf_common>
 801758a:	3001      	adds	r0, #1
 801758c:	f040 808a 	bne.w	80176a4 <_printf_float+0x1ac>
 8017590:	f04f 30ff 	mov.w	r0, #4294967295
 8017594:	b00b      	add	sp, #44	; 0x2c
 8017596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801759a:	eeb4 0b40 	vcmp.f64	d0, d0
 801759e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175a2:	d709      	bvc.n	80175b8 <_printf_float+0xc0>
 80175a4:	ee10 3a90 	vmov	r3, s1
 80175a8:	2b00      	cmp	r3, #0
 80175aa:	bfbc      	itt	lt
 80175ac:	232d      	movlt	r3, #45	; 0x2d
 80175ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80175b2:	497d      	ldr	r1, [pc, #500]	; (80177a8 <_printf_float+0x2b0>)
 80175b4:	4b7d      	ldr	r3, [pc, #500]	; (80177ac <_printf_float+0x2b4>)
 80175b6:	e7d5      	b.n	8017564 <_printf_float+0x6c>
 80175b8:	6863      	ldr	r3, [r4, #4]
 80175ba:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80175be:	9104      	str	r1, [sp, #16]
 80175c0:	1c59      	adds	r1, r3, #1
 80175c2:	d13c      	bne.n	801763e <_printf_float+0x146>
 80175c4:	2306      	movs	r3, #6
 80175c6:	6063      	str	r3, [r4, #4]
 80175c8:	2300      	movs	r3, #0
 80175ca:	9303      	str	r3, [sp, #12]
 80175cc:	ab08      	add	r3, sp, #32
 80175ce:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80175d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80175d6:	ab07      	add	r3, sp, #28
 80175d8:	6861      	ldr	r1, [r4, #4]
 80175da:	9300      	str	r3, [sp, #0]
 80175dc:	6022      	str	r2, [r4, #0]
 80175de:	f10d 031b 	add.w	r3, sp, #27
 80175e2:	4628      	mov	r0, r5
 80175e4:	f7ff fef6 	bl	80173d4 <__cvt>
 80175e8:	9b04      	ldr	r3, [sp, #16]
 80175ea:	9907      	ldr	r1, [sp, #28]
 80175ec:	2b47      	cmp	r3, #71	; 0x47
 80175ee:	4680      	mov	r8, r0
 80175f0:	d108      	bne.n	8017604 <_printf_float+0x10c>
 80175f2:	1cc8      	adds	r0, r1, #3
 80175f4:	db02      	blt.n	80175fc <_printf_float+0x104>
 80175f6:	6863      	ldr	r3, [r4, #4]
 80175f8:	4299      	cmp	r1, r3
 80175fa:	dd41      	ble.n	8017680 <_printf_float+0x188>
 80175fc:	f1a9 0902 	sub.w	r9, r9, #2
 8017600:	fa5f f989 	uxtb.w	r9, r9
 8017604:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8017608:	d820      	bhi.n	801764c <_printf_float+0x154>
 801760a:	3901      	subs	r1, #1
 801760c:	464a      	mov	r2, r9
 801760e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8017612:	9107      	str	r1, [sp, #28]
 8017614:	f7ff ff30 	bl	8017478 <__exponent>
 8017618:	9a08      	ldr	r2, [sp, #32]
 801761a:	9004      	str	r0, [sp, #16]
 801761c:	1813      	adds	r3, r2, r0
 801761e:	2a01      	cmp	r2, #1
 8017620:	6123      	str	r3, [r4, #16]
 8017622:	dc02      	bgt.n	801762a <_printf_float+0x132>
 8017624:	6822      	ldr	r2, [r4, #0]
 8017626:	07d2      	lsls	r2, r2, #31
 8017628:	d501      	bpl.n	801762e <_printf_float+0x136>
 801762a:	3301      	adds	r3, #1
 801762c:	6123      	str	r3, [r4, #16]
 801762e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8017632:	2b00      	cmp	r3, #0
 8017634:	d0a2      	beq.n	801757c <_printf_float+0x84>
 8017636:	232d      	movs	r3, #45	; 0x2d
 8017638:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801763c:	e79e      	b.n	801757c <_printf_float+0x84>
 801763e:	9904      	ldr	r1, [sp, #16]
 8017640:	2947      	cmp	r1, #71	; 0x47
 8017642:	d1c1      	bne.n	80175c8 <_printf_float+0xd0>
 8017644:	2b00      	cmp	r3, #0
 8017646:	d1bf      	bne.n	80175c8 <_printf_float+0xd0>
 8017648:	2301      	movs	r3, #1
 801764a:	e7bc      	b.n	80175c6 <_printf_float+0xce>
 801764c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8017650:	d118      	bne.n	8017684 <_printf_float+0x18c>
 8017652:	2900      	cmp	r1, #0
 8017654:	6863      	ldr	r3, [r4, #4]
 8017656:	dd0b      	ble.n	8017670 <_printf_float+0x178>
 8017658:	6121      	str	r1, [r4, #16]
 801765a:	b913      	cbnz	r3, 8017662 <_printf_float+0x16a>
 801765c:	6822      	ldr	r2, [r4, #0]
 801765e:	07d0      	lsls	r0, r2, #31
 8017660:	d502      	bpl.n	8017668 <_printf_float+0x170>
 8017662:	3301      	adds	r3, #1
 8017664:	440b      	add	r3, r1
 8017666:	6123      	str	r3, [r4, #16]
 8017668:	2300      	movs	r3, #0
 801766a:	65a1      	str	r1, [r4, #88]	; 0x58
 801766c:	9304      	str	r3, [sp, #16]
 801766e:	e7de      	b.n	801762e <_printf_float+0x136>
 8017670:	b913      	cbnz	r3, 8017678 <_printf_float+0x180>
 8017672:	6822      	ldr	r2, [r4, #0]
 8017674:	07d2      	lsls	r2, r2, #31
 8017676:	d501      	bpl.n	801767c <_printf_float+0x184>
 8017678:	3302      	adds	r3, #2
 801767a:	e7f4      	b.n	8017666 <_printf_float+0x16e>
 801767c:	2301      	movs	r3, #1
 801767e:	e7f2      	b.n	8017666 <_printf_float+0x16e>
 8017680:	f04f 0967 	mov.w	r9, #103	; 0x67
 8017684:	9b08      	ldr	r3, [sp, #32]
 8017686:	4299      	cmp	r1, r3
 8017688:	db05      	blt.n	8017696 <_printf_float+0x19e>
 801768a:	6823      	ldr	r3, [r4, #0]
 801768c:	6121      	str	r1, [r4, #16]
 801768e:	07d8      	lsls	r0, r3, #31
 8017690:	d5ea      	bpl.n	8017668 <_printf_float+0x170>
 8017692:	1c4b      	adds	r3, r1, #1
 8017694:	e7e7      	b.n	8017666 <_printf_float+0x16e>
 8017696:	2900      	cmp	r1, #0
 8017698:	bfd4      	ite	le
 801769a:	f1c1 0202 	rsble	r2, r1, #2
 801769e:	2201      	movgt	r2, #1
 80176a0:	4413      	add	r3, r2
 80176a2:	e7e0      	b.n	8017666 <_printf_float+0x16e>
 80176a4:	6823      	ldr	r3, [r4, #0]
 80176a6:	055a      	lsls	r2, r3, #21
 80176a8:	d407      	bmi.n	80176ba <_printf_float+0x1c2>
 80176aa:	6923      	ldr	r3, [r4, #16]
 80176ac:	4642      	mov	r2, r8
 80176ae:	4631      	mov	r1, r6
 80176b0:	4628      	mov	r0, r5
 80176b2:	47b8      	blx	r7
 80176b4:	3001      	adds	r0, #1
 80176b6:	d12a      	bne.n	801770e <_printf_float+0x216>
 80176b8:	e76a      	b.n	8017590 <_printf_float+0x98>
 80176ba:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80176be:	f240 80e0 	bls.w	8017882 <_printf_float+0x38a>
 80176c2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80176c6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80176ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176ce:	d133      	bne.n	8017738 <_printf_float+0x240>
 80176d0:	4a37      	ldr	r2, [pc, #220]	; (80177b0 <_printf_float+0x2b8>)
 80176d2:	2301      	movs	r3, #1
 80176d4:	4631      	mov	r1, r6
 80176d6:	4628      	mov	r0, r5
 80176d8:	47b8      	blx	r7
 80176da:	3001      	adds	r0, #1
 80176dc:	f43f af58 	beq.w	8017590 <_printf_float+0x98>
 80176e0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80176e4:	429a      	cmp	r2, r3
 80176e6:	db02      	blt.n	80176ee <_printf_float+0x1f6>
 80176e8:	6823      	ldr	r3, [r4, #0]
 80176ea:	07d8      	lsls	r0, r3, #31
 80176ec:	d50f      	bpl.n	801770e <_printf_float+0x216>
 80176ee:	4653      	mov	r3, sl
 80176f0:	465a      	mov	r2, fp
 80176f2:	4631      	mov	r1, r6
 80176f4:	4628      	mov	r0, r5
 80176f6:	47b8      	blx	r7
 80176f8:	3001      	adds	r0, #1
 80176fa:	f43f af49 	beq.w	8017590 <_printf_float+0x98>
 80176fe:	f04f 0800 	mov.w	r8, #0
 8017702:	f104 091a 	add.w	r9, r4, #26
 8017706:	9b08      	ldr	r3, [sp, #32]
 8017708:	3b01      	subs	r3, #1
 801770a:	4543      	cmp	r3, r8
 801770c:	dc09      	bgt.n	8017722 <_printf_float+0x22a>
 801770e:	6823      	ldr	r3, [r4, #0]
 8017710:	079b      	lsls	r3, r3, #30
 8017712:	f100 8106 	bmi.w	8017922 <_printf_float+0x42a>
 8017716:	68e0      	ldr	r0, [r4, #12]
 8017718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801771a:	4298      	cmp	r0, r3
 801771c:	bfb8      	it	lt
 801771e:	4618      	movlt	r0, r3
 8017720:	e738      	b.n	8017594 <_printf_float+0x9c>
 8017722:	2301      	movs	r3, #1
 8017724:	464a      	mov	r2, r9
 8017726:	4631      	mov	r1, r6
 8017728:	4628      	mov	r0, r5
 801772a:	47b8      	blx	r7
 801772c:	3001      	adds	r0, #1
 801772e:	f43f af2f 	beq.w	8017590 <_printf_float+0x98>
 8017732:	f108 0801 	add.w	r8, r8, #1
 8017736:	e7e6      	b.n	8017706 <_printf_float+0x20e>
 8017738:	9b07      	ldr	r3, [sp, #28]
 801773a:	2b00      	cmp	r3, #0
 801773c:	dc3a      	bgt.n	80177b4 <_printf_float+0x2bc>
 801773e:	4a1c      	ldr	r2, [pc, #112]	; (80177b0 <_printf_float+0x2b8>)
 8017740:	2301      	movs	r3, #1
 8017742:	4631      	mov	r1, r6
 8017744:	4628      	mov	r0, r5
 8017746:	47b8      	blx	r7
 8017748:	3001      	adds	r0, #1
 801774a:	f43f af21 	beq.w	8017590 <_printf_float+0x98>
 801774e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8017752:	4313      	orrs	r3, r2
 8017754:	d102      	bne.n	801775c <_printf_float+0x264>
 8017756:	6823      	ldr	r3, [r4, #0]
 8017758:	07d9      	lsls	r1, r3, #31
 801775a:	d5d8      	bpl.n	801770e <_printf_float+0x216>
 801775c:	4653      	mov	r3, sl
 801775e:	465a      	mov	r2, fp
 8017760:	4631      	mov	r1, r6
 8017762:	4628      	mov	r0, r5
 8017764:	47b8      	blx	r7
 8017766:	3001      	adds	r0, #1
 8017768:	f43f af12 	beq.w	8017590 <_printf_float+0x98>
 801776c:	f04f 0900 	mov.w	r9, #0
 8017770:	f104 0a1a 	add.w	sl, r4, #26
 8017774:	9b07      	ldr	r3, [sp, #28]
 8017776:	425b      	negs	r3, r3
 8017778:	454b      	cmp	r3, r9
 801777a:	dc01      	bgt.n	8017780 <_printf_float+0x288>
 801777c:	9b08      	ldr	r3, [sp, #32]
 801777e:	e795      	b.n	80176ac <_printf_float+0x1b4>
 8017780:	2301      	movs	r3, #1
 8017782:	4652      	mov	r2, sl
 8017784:	4631      	mov	r1, r6
 8017786:	4628      	mov	r0, r5
 8017788:	47b8      	blx	r7
 801778a:	3001      	adds	r0, #1
 801778c:	f43f af00 	beq.w	8017590 <_printf_float+0x98>
 8017790:	f109 0901 	add.w	r9, r9, #1
 8017794:	e7ee      	b.n	8017774 <_printf_float+0x27c>
 8017796:	bf00      	nop
 8017798:	ffffffff 	.word	0xffffffff
 801779c:	7fefffff 	.word	0x7fefffff
 80177a0:	0801c454 	.word	0x0801c454
 80177a4:	0801c458 	.word	0x0801c458
 80177a8:	0801c45c 	.word	0x0801c45c
 80177ac:	0801c460 	.word	0x0801c460
 80177b0:	0801c7f0 	.word	0x0801c7f0
 80177b4:	9a08      	ldr	r2, [sp, #32]
 80177b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80177b8:	429a      	cmp	r2, r3
 80177ba:	bfa8      	it	ge
 80177bc:	461a      	movge	r2, r3
 80177be:	2a00      	cmp	r2, #0
 80177c0:	4691      	mov	r9, r2
 80177c2:	dc38      	bgt.n	8017836 <_printf_float+0x33e>
 80177c4:	2300      	movs	r3, #0
 80177c6:	9305      	str	r3, [sp, #20]
 80177c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80177cc:	f104 021a 	add.w	r2, r4, #26
 80177d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80177d2:	9905      	ldr	r1, [sp, #20]
 80177d4:	9304      	str	r3, [sp, #16]
 80177d6:	eba3 0309 	sub.w	r3, r3, r9
 80177da:	428b      	cmp	r3, r1
 80177dc:	dc33      	bgt.n	8017846 <_printf_float+0x34e>
 80177de:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80177e2:	429a      	cmp	r2, r3
 80177e4:	db3c      	blt.n	8017860 <_printf_float+0x368>
 80177e6:	6823      	ldr	r3, [r4, #0]
 80177e8:	07da      	lsls	r2, r3, #31
 80177ea:	d439      	bmi.n	8017860 <_printf_float+0x368>
 80177ec:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80177f0:	eba2 0903 	sub.w	r9, r2, r3
 80177f4:	9b04      	ldr	r3, [sp, #16]
 80177f6:	1ad2      	subs	r2, r2, r3
 80177f8:	4591      	cmp	r9, r2
 80177fa:	bfa8      	it	ge
 80177fc:	4691      	movge	r9, r2
 80177fe:	f1b9 0f00 	cmp.w	r9, #0
 8017802:	dc35      	bgt.n	8017870 <_printf_float+0x378>
 8017804:	f04f 0800 	mov.w	r8, #0
 8017808:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801780c:	f104 0a1a 	add.w	sl, r4, #26
 8017810:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8017814:	1a9b      	subs	r3, r3, r2
 8017816:	eba3 0309 	sub.w	r3, r3, r9
 801781a:	4543      	cmp	r3, r8
 801781c:	f77f af77 	ble.w	801770e <_printf_float+0x216>
 8017820:	2301      	movs	r3, #1
 8017822:	4652      	mov	r2, sl
 8017824:	4631      	mov	r1, r6
 8017826:	4628      	mov	r0, r5
 8017828:	47b8      	blx	r7
 801782a:	3001      	adds	r0, #1
 801782c:	f43f aeb0 	beq.w	8017590 <_printf_float+0x98>
 8017830:	f108 0801 	add.w	r8, r8, #1
 8017834:	e7ec      	b.n	8017810 <_printf_float+0x318>
 8017836:	4613      	mov	r3, r2
 8017838:	4631      	mov	r1, r6
 801783a:	4642      	mov	r2, r8
 801783c:	4628      	mov	r0, r5
 801783e:	47b8      	blx	r7
 8017840:	3001      	adds	r0, #1
 8017842:	d1bf      	bne.n	80177c4 <_printf_float+0x2cc>
 8017844:	e6a4      	b.n	8017590 <_printf_float+0x98>
 8017846:	2301      	movs	r3, #1
 8017848:	4631      	mov	r1, r6
 801784a:	4628      	mov	r0, r5
 801784c:	9204      	str	r2, [sp, #16]
 801784e:	47b8      	blx	r7
 8017850:	3001      	adds	r0, #1
 8017852:	f43f ae9d 	beq.w	8017590 <_printf_float+0x98>
 8017856:	9b05      	ldr	r3, [sp, #20]
 8017858:	9a04      	ldr	r2, [sp, #16]
 801785a:	3301      	adds	r3, #1
 801785c:	9305      	str	r3, [sp, #20]
 801785e:	e7b7      	b.n	80177d0 <_printf_float+0x2d8>
 8017860:	4653      	mov	r3, sl
 8017862:	465a      	mov	r2, fp
 8017864:	4631      	mov	r1, r6
 8017866:	4628      	mov	r0, r5
 8017868:	47b8      	blx	r7
 801786a:	3001      	adds	r0, #1
 801786c:	d1be      	bne.n	80177ec <_printf_float+0x2f4>
 801786e:	e68f      	b.n	8017590 <_printf_float+0x98>
 8017870:	9a04      	ldr	r2, [sp, #16]
 8017872:	464b      	mov	r3, r9
 8017874:	4442      	add	r2, r8
 8017876:	4631      	mov	r1, r6
 8017878:	4628      	mov	r0, r5
 801787a:	47b8      	blx	r7
 801787c:	3001      	adds	r0, #1
 801787e:	d1c1      	bne.n	8017804 <_printf_float+0x30c>
 8017880:	e686      	b.n	8017590 <_printf_float+0x98>
 8017882:	9a08      	ldr	r2, [sp, #32]
 8017884:	2a01      	cmp	r2, #1
 8017886:	dc01      	bgt.n	801788c <_printf_float+0x394>
 8017888:	07db      	lsls	r3, r3, #31
 801788a:	d537      	bpl.n	80178fc <_printf_float+0x404>
 801788c:	2301      	movs	r3, #1
 801788e:	4642      	mov	r2, r8
 8017890:	4631      	mov	r1, r6
 8017892:	4628      	mov	r0, r5
 8017894:	47b8      	blx	r7
 8017896:	3001      	adds	r0, #1
 8017898:	f43f ae7a 	beq.w	8017590 <_printf_float+0x98>
 801789c:	4653      	mov	r3, sl
 801789e:	465a      	mov	r2, fp
 80178a0:	4631      	mov	r1, r6
 80178a2:	4628      	mov	r0, r5
 80178a4:	47b8      	blx	r7
 80178a6:	3001      	adds	r0, #1
 80178a8:	f43f ae72 	beq.w	8017590 <_printf_float+0x98>
 80178ac:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80178b0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80178b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178b8:	9b08      	ldr	r3, [sp, #32]
 80178ba:	d01a      	beq.n	80178f2 <_printf_float+0x3fa>
 80178bc:	3b01      	subs	r3, #1
 80178be:	f108 0201 	add.w	r2, r8, #1
 80178c2:	4631      	mov	r1, r6
 80178c4:	4628      	mov	r0, r5
 80178c6:	47b8      	blx	r7
 80178c8:	3001      	adds	r0, #1
 80178ca:	d10e      	bne.n	80178ea <_printf_float+0x3f2>
 80178cc:	e660      	b.n	8017590 <_printf_float+0x98>
 80178ce:	2301      	movs	r3, #1
 80178d0:	464a      	mov	r2, r9
 80178d2:	4631      	mov	r1, r6
 80178d4:	4628      	mov	r0, r5
 80178d6:	47b8      	blx	r7
 80178d8:	3001      	adds	r0, #1
 80178da:	f43f ae59 	beq.w	8017590 <_printf_float+0x98>
 80178de:	f108 0801 	add.w	r8, r8, #1
 80178e2:	9b08      	ldr	r3, [sp, #32]
 80178e4:	3b01      	subs	r3, #1
 80178e6:	4543      	cmp	r3, r8
 80178e8:	dcf1      	bgt.n	80178ce <_printf_float+0x3d6>
 80178ea:	9b04      	ldr	r3, [sp, #16]
 80178ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80178f0:	e6dd      	b.n	80176ae <_printf_float+0x1b6>
 80178f2:	f04f 0800 	mov.w	r8, #0
 80178f6:	f104 091a 	add.w	r9, r4, #26
 80178fa:	e7f2      	b.n	80178e2 <_printf_float+0x3ea>
 80178fc:	2301      	movs	r3, #1
 80178fe:	4642      	mov	r2, r8
 8017900:	e7df      	b.n	80178c2 <_printf_float+0x3ca>
 8017902:	2301      	movs	r3, #1
 8017904:	464a      	mov	r2, r9
 8017906:	4631      	mov	r1, r6
 8017908:	4628      	mov	r0, r5
 801790a:	47b8      	blx	r7
 801790c:	3001      	adds	r0, #1
 801790e:	f43f ae3f 	beq.w	8017590 <_printf_float+0x98>
 8017912:	f108 0801 	add.w	r8, r8, #1
 8017916:	68e3      	ldr	r3, [r4, #12]
 8017918:	9909      	ldr	r1, [sp, #36]	; 0x24
 801791a:	1a5b      	subs	r3, r3, r1
 801791c:	4543      	cmp	r3, r8
 801791e:	dcf0      	bgt.n	8017902 <_printf_float+0x40a>
 8017920:	e6f9      	b.n	8017716 <_printf_float+0x21e>
 8017922:	f04f 0800 	mov.w	r8, #0
 8017926:	f104 0919 	add.w	r9, r4, #25
 801792a:	e7f4      	b.n	8017916 <_printf_float+0x41e>

0801792c <_printf_common>:
 801792c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017930:	4616      	mov	r6, r2
 8017932:	4699      	mov	r9, r3
 8017934:	688a      	ldr	r2, [r1, #8]
 8017936:	690b      	ldr	r3, [r1, #16]
 8017938:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801793c:	4293      	cmp	r3, r2
 801793e:	bfb8      	it	lt
 8017940:	4613      	movlt	r3, r2
 8017942:	6033      	str	r3, [r6, #0]
 8017944:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017948:	4607      	mov	r7, r0
 801794a:	460c      	mov	r4, r1
 801794c:	b10a      	cbz	r2, 8017952 <_printf_common+0x26>
 801794e:	3301      	adds	r3, #1
 8017950:	6033      	str	r3, [r6, #0]
 8017952:	6823      	ldr	r3, [r4, #0]
 8017954:	0699      	lsls	r1, r3, #26
 8017956:	bf42      	ittt	mi
 8017958:	6833      	ldrmi	r3, [r6, #0]
 801795a:	3302      	addmi	r3, #2
 801795c:	6033      	strmi	r3, [r6, #0]
 801795e:	6825      	ldr	r5, [r4, #0]
 8017960:	f015 0506 	ands.w	r5, r5, #6
 8017964:	d106      	bne.n	8017974 <_printf_common+0x48>
 8017966:	f104 0a19 	add.w	sl, r4, #25
 801796a:	68e3      	ldr	r3, [r4, #12]
 801796c:	6832      	ldr	r2, [r6, #0]
 801796e:	1a9b      	subs	r3, r3, r2
 8017970:	42ab      	cmp	r3, r5
 8017972:	dc26      	bgt.n	80179c2 <_printf_common+0x96>
 8017974:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017978:	1e13      	subs	r3, r2, #0
 801797a:	6822      	ldr	r2, [r4, #0]
 801797c:	bf18      	it	ne
 801797e:	2301      	movne	r3, #1
 8017980:	0692      	lsls	r2, r2, #26
 8017982:	d42b      	bmi.n	80179dc <_printf_common+0xb0>
 8017984:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017988:	4649      	mov	r1, r9
 801798a:	4638      	mov	r0, r7
 801798c:	47c0      	blx	r8
 801798e:	3001      	adds	r0, #1
 8017990:	d01e      	beq.n	80179d0 <_printf_common+0xa4>
 8017992:	6823      	ldr	r3, [r4, #0]
 8017994:	6922      	ldr	r2, [r4, #16]
 8017996:	f003 0306 	and.w	r3, r3, #6
 801799a:	2b04      	cmp	r3, #4
 801799c:	bf02      	ittt	eq
 801799e:	68e5      	ldreq	r5, [r4, #12]
 80179a0:	6833      	ldreq	r3, [r6, #0]
 80179a2:	1aed      	subeq	r5, r5, r3
 80179a4:	68a3      	ldr	r3, [r4, #8]
 80179a6:	bf0c      	ite	eq
 80179a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80179ac:	2500      	movne	r5, #0
 80179ae:	4293      	cmp	r3, r2
 80179b0:	bfc4      	itt	gt
 80179b2:	1a9b      	subgt	r3, r3, r2
 80179b4:	18ed      	addgt	r5, r5, r3
 80179b6:	2600      	movs	r6, #0
 80179b8:	341a      	adds	r4, #26
 80179ba:	42b5      	cmp	r5, r6
 80179bc:	d11a      	bne.n	80179f4 <_printf_common+0xc8>
 80179be:	2000      	movs	r0, #0
 80179c0:	e008      	b.n	80179d4 <_printf_common+0xa8>
 80179c2:	2301      	movs	r3, #1
 80179c4:	4652      	mov	r2, sl
 80179c6:	4649      	mov	r1, r9
 80179c8:	4638      	mov	r0, r7
 80179ca:	47c0      	blx	r8
 80179cc:	3001      	adds	r0, #1
 80179ce:	d103      	bne.n	80179d8 <_printf_common+0xac>
 80179d0:	f04f 30ff 	mov.w	r0, #4294967295
 80179d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80179d8:	3501      	adds	r5, #1
 80179da:	e7c6      	b.n	801796a <_printf_common+0x3e>
 80179dc:	18e1      	adds	r1, r4, r3
 80179de:	1c5a      	adds	r2, r3, #1
 80179e0:	2030      	movs	r0, #48	; 0x30
 80179e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80179e6:	4422      	add	r2, r4
 80179e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80179ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80179f0:	3302      	adds	r3, #2
 80179f2:	e7c7      	b.n	8017984 <_printf_common+0x58>
 80179f4:	2301      	movs	r3, #1
 80179f6:	4622      	mov	r2, r4
 80179f8:	4649      	mov	r1, r9
 80179fa:	4638      	mov	r0, r7
 80179fc:	47c0      	blx	r8
 80179fe:	3001      	adds	r0, #1
 8017a00:	d0e6      	beq.n	80179d0 <_printf_common+0xa4>
 8017a02:	3601      	adds	r6, #1
 8017a04:	e7d9      	b.n	80179ba <_printf_common+0x8e>
	...

08017a08 <_printf_i>:
 8017a08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017a0c:	7e0f      	ldrb	r7, [r1, #24]
 8017a0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017a10:	2f78      	cmp	r7, #120	; 0x78
 8017a12:	4691      	mov	r9, r2
 8017a14:	4680      	mov	r8, r0
 8017a16:	460c      	mov	r4, r1
 8017a18:	469a      	mov	sl, r3
 8017a1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017a1e:	d807      	bhi.n	8017a30 <_printf_i+0x28>
 8017a20:	2f62      	cmp	r7, #98	; 0x62
 8017a22:	d80a      	bhi.n	8017a3a <_printf_i+0x32>
 8017a24:	2f00      	cmp	r7, #0
 8017a26:	f000 80d4 	beq.w	8017bd2 <_printf_i+0x1ca>
 8017a2a:	2f58      	cmp	r7, #88	; 0x58
 8017a2c:	f000 80c0 	beq.w	8017bb0 <_printf_i+0x1a8>
 8017a30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017a34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017a38:	e03a      	b.n	8017ab0 <_printf_i+0xa8>
 8017a3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017a3e:	2b15      	cmp	r3, #21
 8017a40:	d8f6      	bhi.n	8017a30 <_printf_i+0x28>
 8017a42:	a101      	add	r1, pc, #4	; (adr r1, 8017a48 <_printf_i+0x40>)
 8017a44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017a48:	08017aa1 	.word	0x08017aa1
 8017a4c:	08017ab5 	.word	0x08017ab5
 8017a50:	08017a31 	.word	0x08017a31
 8017a54:	08017a31 	.word	0x08017a31
 8017a58:	08017a31 	.word	0x08017a31
 8017a5c:	08017a31 	.word	0x08017a31
 8017a60:	08017ab5 	.word	0x08017ab5
 8017a64:	08017a31 	.word	0x08017a31
 8017a68:	08017a31 	.word	0x08017a31
 8017a6c:	08017a31 	.word	0x08017a31
 8017a70:	08017a31 	.word	0x08017a31
 8017a74:	08017bb9 	.word	0x08017bb9
 8017a78:	08017ae1 	.word	0x08017ae1
 8017a7c:	08017b73 	.word	0x08017b73
 8017a80:	08017a31 	.word	0x08017a31
 8017a84:	08017a31 	.word	0x08017a31
 8017a88:	08017bdb 	.word	0x08017bdb
 8017a8c:	08017a31 	.word	0x08017a31
 8017a90:	08017ae1 	.word	0x08017ae1
 8017a94:	08017a31 	.word	0x08017a31
 8017a98:	08017a31 	.word	0x08017a31
 8017a9c:	08017b7b 	.word	0x08017b7b
 8017aa0:	682b      	ldr	r3, [r5, #0]
 8017aa2:	1d1a      	adds	r2, r3, #4
 8017aa4:	681b      	ldr	r3, [r3, #0]
 8017aa6:	602a      	str	r2, [r5, #0]
 8017aa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017aac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017ab0:	2301      	movs	r3, #1
 8017ab2:	e09f      	b.n	8017bf4 <_printf_i+0x1ec>
 8017ab4:	6820      	ldr	r0, [r4, #0]
 8017ab6:	682b      	ldr	r3, [r5, #0]
 8017ab8:	0607      	lsls	r7, r0, #24
 8017aba:	f103 0104 	add.w	r1, r3, #4
 8017abe:	6029      	str	r1, [r5, #0]
 8017ac0:	d501      	bpl.n	8017ac6 <_printf_i+0xbe>
 8017ac2:	681e      	ldr	r6, [r3, #0]
 8017ac4:	e003      	b.n	8017ace <_printf_i+0xc6>
 8017ac6:	0646      	lsls	r6, r0, #25
 8017ac8:	d5fb      	bpl.n	8017ac2 <_printf_i+0xba>
 8017aca:	f9b3 6000 	ldrsh.w	r6, [r3]
 8017ace:	2e00      	cmp	r6, #0
 8017ad0:	da03      	bge.n	8017ada <_printf_i+0xd2>
 8017ad2:	232d      	movs	r3, #45	; 0x2d
 8017ad4:	4276      	negs	r6, r6
 8017ad6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017ada:	485a      	ldr	r0, [pc, #360]	; (8017c44 <_printf_i+0x23c>)
 8017adc:	230a      	movs	r3, #10
 8017ade:	e012      	b.n	8017b06 <_printf_i+0xfe>
 8017ae0:	682b      	ldr	r3, [r5, #0]
 8017ae2:	6820      	ldr	r0, [r4, #0]
 8017ae4:	1d19      	adds	r1, r3, #4
 8017ae6:	6029      	str	r1, [r5, #0]
 8017ae8:	0605      	lsls	r5, r0, #24
 8017aea:	d501      	bpl.n	8017af0 <_printf_i+0xe8>
 8017aec:	681e      	ldr	r6, [r3, #0]
 8017aee:	e002      	b.n	8017af6 <_printf_i+0xee>
 8017af0:	0641      	lsls	r1, r0, #25
 8017af2:	d5fb      	bpl.n	8017aec <_printf_i+0xe4>
 8017af4:	881e      	ldrh	r6, [r3, #0]
 8017af6:	4853      	ldr	r0, [pc, #332]	; (8017c44 <_printf_i+0x23c>)
 8017af8:	2f6f      	cmp	r7, #111	; 0x6f
 8017afa:	bf0c      	ite	eq
 8017afc:	2308      	moveq	r3, #8
 8017afe:	230a      	movne	r3, #10
 8017b00:	2100      	movs	r1, #0
 8017b02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017b06:	6865      	ldr	r5, [r4, #4]
 8017b08:	60a5      	str	r5, [r4, #8]
 8017b0a:	2d00      	cmp	r5, #0
 8017b0c:	bfa2      	ittt	ge
 8017b0e:	6821      	ldrge	r1, [r4, #0]
 8017b10:	f021 0104 	bicge.w	r1, r1, #4
 8017b14:	6021      	strge	r1, [r4, #0]
 8017b16:	b90e      	cbnz	r6, 8017b1c <_printf_i+0x114>
 8017b18:	2d00      	cmp	r5, #0
 8017b1a:	d04b      	beq.n	8017bb4 <_printf_i+0x1ac>
 8017b1c:	4615      	mov	r5, r2
 8017b1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8017b22:	fb03 6711 	mls	r7, r3, r1, r6
 8017b26:	5dc7      	ldrb	r7, [r0, r7]
 8017b28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017b2c:	4637      	mov	r7, r6
 8017b2e:	42bb      	cmp	r3, r7
 8017b30:	460e      	mov	r6, r1
 8017b32:	d9f4      	bls.n	8017b1e <_printf_i+0x116>
 8017b34:	2b08      	cmp	r3, #8
 8017b36:	d10b      	bne.n	8017b50 <_printf_i+0x148>
 8017b38:	6823      	ldr	r3, [r4, #0]
 8017b3a:	07de      	lsls	r6, r3, #31
 8017b3c:	d508      	bpl.n	8017b50 <_printf_i+0x148>
 8017b3e:	6923      	ldr	r3, [r4, #16]
 8017b40:	6861      	ldr	r1, [r4, #4]
 8017b42:	4299      	cmp	r1, r3
 8017b44:	bfde      	ittt	le
 8017b46:	2330      	movle	r3, #48	; 0x30
 8017b48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017b4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017b50:	1b52      	subs	r2, r2, r5
 8017b52:	6122      	str	r2, [r4, #16]
 8017b54:	f8cd a000 	str.w	sl, [sp]
 8017b58:	464b      	mov	r3, r9
 8017b5a:	aa03      	add	r2, sp, #12
 8017b5c:	4621      	mov	r1, r4
 8017b5e:	4640      	mov	r0, r8
 8017b60:	f7ff fee4 	bl	801792c <_printf_common>
 8017b64:	3001      	adds	r0, #1
 8017b66:	d14a      	bne.n	8017bfe <_printf_i+0x1f6>
 8017b68:	f04f 30ff 	mov.w	r0, #4294967295
 8017b6c:	b004      	add	sp, #16
 8017b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b72:	6823      	ldr	r3, [r4, #0]
 8017b74:	f043 0320 	orr.w	r3, r3, #32
 8017b78:	6023      	str	r3, [r4, #0]
 8017b7a:	4833      	ldr	r0, [pc, #204]	; (8017c48 <_printf_i+0x240>)
 8017b7c:	2778      	movs	r7, #120	; 0x78
 8017b7e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017b82:	6823      	ldr	r3, [r4, #0]
 8017b84:	6829      	ldr	r1, [r5, #0]
 8017b86:	061f      	lsls	r7, r3, #24
 8017b88:	f851 6b04 	ldr.w	r6, [r1], #4
 8017b8c:	d402      	bmi.n	8017b94 <_printf_i+0x18c>
 8017b8e:	065f      	lsls	r7, r3, #25
 8017b90:	bf48      	it	mi
 8017b92:	b2b6      	uxthmi	r6, r6
 8017b94:	07df      	lsls	r7, r3, #31
 8017b96:	bf48      	it	mi
 8017b98:	f043 0320 	orrmi.w	r3, r3, #32
 8017b9c:	6029      	str	r1, [r5, #0]
 8017b9e:	bf48      	it	mi
 8017ba0:	6023      	strmi	r3, [r4, #0]
 8017ba2:	b91e      	cbnz	r6, 8017bac <_printf_i+0x1a4>
 8017ba4:	6823      	ldr	r3, [r4, #0]
 8017ba6:	f023 0320 	bic.w	r3, r3, #32
 8017baa:	6023      	str	r3, [r4, #0]
 8017bac:	2310      	movs	r3, #16
 8017bae:	e7a7      	b.n	8017b00 <_printf_i+0xf8>
 8017bb0:	4824      	ldr	r0, [pc, #144]	; (8017c44 <_printf_i+0x23c>)
 8017bb2:	e7e4      	b.n	8017b7e <_printf_i+0x176>
 8017bb4:	4615      	mov	r5, r2
 8017bb6:	e7bd      	b.n	8017b34 <_printf_i+0x12c>
 8017bb8:	682b      	ldr	r3, [r5, #0]
 8017bba:	6826      	ldr	r6, [r4, #0]
 8017bbc:	6961      	ldr	r1, [r4, #20]
 8017bbe:	1d18      	adds	r0, r3, #4
 8017bc0:	6028      	str	r0, [r5, #0]
 8017bc2:	0635      	lsls	r5, r6, #24
 8017bc4:	681b      	ldr	r3, [r3, #0]
 8017bc6:	d501      	bpl.n	8017bcc <_printf_i+0x1c4>
 8017bc8:	6019      	str	r1, [r3, #0]
 8017bca:	e002      	b.n	8017bd2 <_printf_i+0x1ca>
 8017bcc:	0670      	lsls	r0, r6, #25
 8017bce:	d5fb      	bpl.n	8017bc8 <_printf_i+0x1c0>
 8017bd0:	8019      	strh	r1, [r3, #0]
 8017bd2:	2300      	movs	r3, #0
 8017bd4:	6123      	str	r3, [r4, #16]
 8017bd6:	4615      	mov	r5, r2
 8017bd8:	e7bc      	b.n	8017b54 <_printf_i+0x14c>
 8017bda:	682b      	ldr	r3, [r5, #0]
 8017bdc:	1d1a      	adds	r2, r3, #4
 8017bde:	602a      	str	r2, [r5, #0]
 8017be0:	681d      	ldr	r5, [r3, #0]
 8017be2:	6862      	ldr	r2, [r4, #4]
 8017be4:	2100      	movs	r1, #0
 8017be6:	4628      	mov	r0, r5
 8017be8:	f7e8 fba2 	bl	8000330 <memchr>
 8017bec:	b108      	cbz	r0, 8017bf2 <_printf_i+0x1ea>
 8017bee:	1b40      	subs	r0, r0, r5
 8017bf0:	6060      	str	r0, [r4, #4]
 8017bf2:	6863      	ldr	r3, [r4, #4]
 8017bf4:	6123      	str	r3, [r4, #16]
 8017bf6:	2300      	movs	r3, #0
 8017bf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017bfc:	e7aa      	b.n	8017b54 <_printf_i+0x14c>
 8017bfe:	6923      	ldr	r3, [r4, #16]
 8017c00:	462a      	mov	r2, r5
 8017c02:	4649      	mov	r1, r9
 8017c04:	4640      	mov	r0, r8
 8017c06:	47d0      	blx	sl
 8017c08:	3001      	adds	r0, #1
 8017c0a:	d0ad      	beq.n	8017b68 <_printf_i+0x160>
 8017c0c:	6823      	ldr	r3, [r4, #0]
 8017c0e:	079b      	lsls	r3, r3, #30
 8017c10:	d413      	bmi.n	8017c3a <_printf_i+0x232>
 8017c12:	68e0      	ldr	r0, [r4, #12]
 8017c14:	9b03      	ldr	r3, [sp, #12]
 8017c16:	4298      	cmp	r0, r3
 8017c18:	bfb8      	it	lt
 8017c1a:	4618      	movlt	r0, r3
 8017c1c:	e7a6      	b.n	8017b6c <_printf_i+0x164>
 8017c1e:	2301      	movs	r3, #1
 8017c20:	4632      	mov	r2, r6
 8017c22:	4649      	mov	r1, r9
 8017c24:	4640      	mov	r0, r8
 8017c26:	47d0      	blx	sl
 8017c28:	3001      	adds	r0, #1
 8017c2a:	d09d      	beq.n	8017b68 <_printf_i+0x160>
 8017c2c:	3501      	adds	r5, #1
 8017c2e:	68e3      	ldr	r3, [r4, #12]
 8017c30:	9903      	ldr	r1, [sp, #12]
 8017c32:	1a5b      	subs	r3, r3, r1
 8017c34:	42ab      	cmp	r3, r5
 8017c36:	dcf2      	bgt.n	8017c1e <_printf_i+0x216>
 8017c38:	e7eb      	b.n	8017c12 <_printf_i+0x20a>
 8017c3a:	2500      	movs	r5, #0
 8017c3c:	f104 0619 	add.w	r6, r4, #25
 8017c40:	e7f5      	b.n	8017c2e <_printf_i+0x226>
 8017c42:	bf00      	nop
 8017c44:	0801c464 	.word	0x0801c464
 8017c48:	0801c475 	.word	0x0801c475

08017c4c <_scanf_float>:
 8017c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c50:	b087      	sub	sp, #28
 8017c52:	4617      	mov	r7, r2
 8017c54:	9303      	str	r3, [sp, #12]
 8017c56:	688b      	ldr	r3, [r1, #8]
 8017c58:	1e5a      	subs	r2, r3, #1
 8017c5a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8017c5e:	bf83      	ittte	hi
 8017c60:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017c64:	195b      	addhi	r3, r3, r5
 8017c66:	9302      	strhi	r3, [sp, #8]
 8017c68:	2300      	movls	r3, #0
 8017c6a:	bf86      	itte	hi
 8017c6c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017c70:	608b      	strhi	r3, [r1, #8]
 8017c72:	9302      	strls	r3, [sp, #8]
 8017c74:	680b      	ldr	r3, [r1, #0]
 8017c76:	468b      	mov	fp, r1
 8017c78:	2500      	movs	r5, #0
 8017c7a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8017c7e:	f84b 3b1c 	str.w	r3, [fp], #28
 8017c82:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8017c86:	4680      	mov	r8, r0
 8017c88:	460c      	mov	r4, r1
 8017c8a:	465e      	mov	r6, fp
 8017c8c:	46aa      	mov	sl, r5
 8017c8e:	46a9      	mov	r9, r5
 8017c90:	9501      	str	r5, [sp, #4]
 8017c92:	68a2      	ldr	r2, [r4, #8]
 8017c94:	b152      	cbz	r2, 8017cac <_scanf_float+0x60>
 8017c96:	683b      	ldr	r3, [r7, #0]
 8017c98:	781b      	ldrb	r3, [r3, #0]
 8017c9a:	2b4e      	cmp	r3, #78	; 0x4e
 8017c9c:	d864      	bhi.n	8017d68 <_scanf_float+0x11c>
 8017c9e:	2b40      	cmp	r3, #64	; 0x40
 8017ca0:	d83c      	bhi.n	8017d1c <_scanf_float+0xd0>
 8017ca2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8017ca6:	b2c8      	uxtb	r0, r1
 8017ca8:	280e      	cmp	r0, #14
 8017caa:	d93a      	bls.n	8017d22 <_scanf_float+0xd6>
 8017cac:	f1b9 0f00 	cmp.w	r9, #0
 8017cb0:	d003      	beq.n	8017cba <_scanf_float+0x6e>
 8017cb2:	6823      	ldr	r3, [r4, #0]
 8017cb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017cb8:	6023      	str	r3, [r4, #0]
 8017cba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017cbe:	f1ba 0f01 	cmp.w	sl, #1
 8017cc2:	f200 8113 	bhi.w	8017eec <_scanf_float+0x2a0>
 8017cc6:	455e      	cmp	r6, fp
 8017cc8:	f200 8105 	bhi.w	8017ed6 <_scanf_float+0x28a>
 8017ccc:	2501      	movs	r5, #1
 8017cce:	4628      	mov	r0, r5
 8017cd0:	b007      	add	sp, #28
 8017cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cd6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8017cda:	2a0d      	cmp	r2, #13
 8017cdc:	d8e6      	bhi.n	8017cac <_scanf_float+0x60>
 8017cde:	a101      	add	r1, pc, #4	; (adr r1, 8017ce4 <_scanf_float+0x98>)
 8017ce0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017ce4:	08017e23 	.word	0x08017e23
 8017ce8:	08017cad 	.word	0x08017cad
 8017cec:	08017cad 	.word	0x08017cad
 8017cf0:	08017cad 	.word	0x08017cad
 8017cf4:	08017e83 	.word	0x08017e83
 8017cf8:	08017e5b 	.word	0x08017e5b
 8017cfc:	08017cad 	.word	0x08017cad
 8017d00:	08017cad 	.word	0x08017cad
 8017d04:	08017e31 	.word	0x08017e31
 8017d08:	08017cad 	.word	0x08017cad
 8017d0c:	08017cad 	.word	0x08017cad
 8017d10:	08017cad 	.word	0x08017cad
 8017d14:	08017cad 	.word	0x08017cad
 8017d18:	08017de9 	.word	0x08017de9
 8017d1c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8017d20:	e7db      	b.n	8017cda <_scanf_float+0x8e>
 8017d22:	290e      	cmp	r1, #14
 8017d24:	d8c2      	bhi.n	8017cac <_scanf_float+0x60>
 8017d26:	a001      	add	r0, pc, #4	; (adr r0, 8017d2c <_scanf_float+0xe0>)
 8017d28:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8017d2c:	08017ddb 	.word	0x08017ddb
 8017d30:	08017cad 	.word	0x08017cad
 8017d34:	08017ddb 	.word	0x08017ddb
 8017d38:	08017e6f 	.word	0x08017e6f
 8017d3c:	08017cad 	.word	0x08017cad
 8017d40:	08017d89 	.word	0x08017d89
 8017d44:	08017dc5 	.word	0x08017dc5
 8017d48:	08017dc5 	.word	0x08017dc5
 8017d4c:	08017dc5 	.word	0x08017dc5
 8017d50:	08017dc5 	.word	0x08017dc5
 8017d54:	08017dc5 	.word	0x08017dc5
 8017d58:	08017dc5 	.word	0x08017dc5
 8017d5c:	08017dc5 	.word	0x08017dc5
 8017d60:	08017dc5 	.word	0x08017dc5
 8017d64:	08017dc5 	.word	0x08017dc5
 8017d68:	2b6e      	cmp	r3, #110	; 0x6e
 8017d6a:	d809      	bhi.n	8017d80 <_scanf_float+0x134>
 8017d6c:	2b60      	cmp	r3, #96	; 0x60
 8017d6e:	d8b2      	bhi.n	8017cd6 <_scanf_float+0x8a>
 8017d70:	2b54      	cmp	r3, #84	; 0x54
 8017d72:	d077      	beq.n	8017e64 <_scanf_float+0x218>
 8017d74:	2b59      	cmp	r3, #89	; 0x59
 8017d76:	d199      	bne.n	8017cac <_scanf_float+0x60>
 8017d78:	2d07      	cmp	r5, #7
 8017d7a:	d197      	bne.n	8017cac <_scanf_float+0x60>
 8017d7c:	2508      	movs	r5, #8
 8017d7e:	e029      	b.n	8017dd4 <_scanf_float+0x188>
 8017d80:	2b74      	cmp	r3, #116	; 0x74
 8017d82:	d06f      	beq.n	8017e64 <_scanf_float+0x218>
 8017d84:	2b79      	cmp	r3, #121	; 0x79
 8017d86:	e7f6      	b.n	8017d76 <_scanf_float+0x12a>
 8017d88:	6821      	ldr	r1, [r4, #0]
 8017d8a:	05c8      	lsls	r0, r1, #23
 8017d8c:	d51a      	bpl.n	8017dc4 <_scanf_float+0x178>
 8017d8e:	9b02      	ldr	r3, [sp, #8]
 8017d90:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8017d94:	6021      	str	r1, [r4, #0]
 8017d96:	f109 0901 	add.w	r9, r9, #1
 8017d9a:	b11b      	cbz	r3, 8017da4 <_scanf_float+0x158>
 8017d9c:	3b01      	subs	r3, #1
 8017d9e:	3201      	adds	r2, #1
 8017da0:	9302      	str	r3, [sp, #8]
 8017da2:	60a2      	str	r2, [r4, #8]
 8017da4:	68a3      	ldr	r3, [r4, #8]
 8017da6:	3b01      	subs	r3, #1
 8017da8:	60a3      	str	r3, [r4, #8]
 8017daa:	6923      	ldr	r3, [r4, #16]
 8017dac:	3301      	adds	r3, #1
 8017dae:	6123      	str	r3, [r4, #16]
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	3b01      	subs	r3, #1
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	607b      	str	r3, [r7, #4]
 8017db8:	f340 8084 	ble.w	8017ec4 <_scanf_float+0x278>
 8017dbc:	683b      	ldr	r3, [r7, #0]
 8017dbe:	3301      	adds	r3, #1
 8017dc0:	603b      	str	r3, [r7, #0]
 8017dc2:	e766      	b.n	8017c92 <_scanf_float+0x46>
 8017dc4:	eb1a 0f05 	cmn.w	sl, r5
 8017dc8:	f47f af70 	bne.w	8017cac <_scanf_float+0x60>
 8017dcc:	6822      	ldr	r2, [r4, #0]
 8017dce:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8017dd2:	6022      	str	r2, [r4, #0]
 8017dd4:	f806 3b01 	strb.w	r3, [r6], #1
 8017dd8:	e7e4      	b.n	8017da4 <_scanf_float+0x158>
 8017dda:	6822      	ldr	r2, [r4, #0]
 8017ddc:	0610      	lsls	r0, r2, #24
 8017dde:	f57f af65 	bpl.w	8017cac <_scanf_float+0x60>
 8017de2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8017de6:	e7f4      	b.n	8017dd2 <_scanf_float+0x186>
 8017de8:	f1ba 0f00 	cmp.w	sl, #0
 8017dec:	d10e      	bne.n	8017e0c <_scanf_float+0x1c0>
 8017dee:	f1b9 0f00 	cmp.w	r9, #0
 8017df2:	d10e      	bne.n	8017e12 <_scanf_float+0x1c6>
 8017df4:	6822      	ldr	r2, [r4, #0]
 8017df6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8017dfa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8017dfe:	d108      	bne.n	8017e12 <_scanf_float+0x1c6>
 8017e00:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017e04:	6022      	str	r2, [r4, #0]
 8017e06:	f04f 0a01 	mov.w	sl, #1
 8017e0a:	e7e3      	b.n	8017dd4 <_scanf_float+0x188>
 8017e0c:	f1ba 0f02 	cmp.w	sl, #2
 8017e10:	d055      	beq.n	8017ebe <_scanf_float+0x272>
 8017e12:	2d01      	cmp	r5, #1
 8017e14:	d002      	beq.n	8017e1c <_scanf_float+0x1d0>
 8017e16:	2d04      	cmp	r5, #4
 8017e18:	f47f af48 	bne.w	8017cac <_scanf_float+0x60>
 8017e1c:	3501      	adds	r5, #1
 8017e1e:	b2ed      	uxtb	r5, r5
 8017e20:	e7d8      	b.n	8017dd4 <_scanf_float+0x188>
 8017e22:	f1ba 0f01 	cmp.w	sl, #1
 8017e26:	f47f af41 	bne.w	8017cac <_scanf_float+0x60>
 8017e2a:	f04f 0a02 	mov.w	sl, #2
 8017e2e:	e7d1      	b.n	8017dd4 <_scanf_float+0x188>
 8017e30:	b97d      	cbnz	r5, 8017e52 <_scanf_float+0x206>
 8017e32:	f1b9 0f00 	cmp.w	r9, #0
 8017e36:	f47f af3c 	bne.w	8017cb2 <_scanf_float+0x66>
 8017e3a:	6822      	ldr	r2, [r4, #0]
 8017e3c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8017e40:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8017e44:	f47f af39 	bne.w	8017cba <_scanf_float+0x6e>
 8017e48:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017e4c:	6022      	str	r2, [r4, #0]
 8017e4e:	2501      	movs	r5, #1
 8017e50:	e7c0      	b.n	8017dd4 <_scanf_float+0x188>
 8017e52:	2d03      	cmp	r5, #3
 8017e54:	d0e2      	beq.n	8017e1c <_scanf_float+0x1d0>
 8017e56:	2d05      	cmp	r5, #5
 8017e58:	e7de      	b.n	8017e18 <_scanf_float+0x1cc>
 8017e5a:	2d02      	cmp	r5, #2
 8017e5c:	f47f af26 	bne.w	8017cac <_scanf_float+0x60>
 8017e60:	2503      	movs	r5, #3
 8017e62:	e7b7      	b.n	8017dd4 <_scanf_float+0x188>
 8017e64:	2d06      	cmp	r5, #6
 8017e66:	f47f af21 	bne.w	8017cac <_scanf_float+0x60>
 8017e6a:	2507      	movs	r5, #7
 8017e6c:	e7b2      	b.n	8017dd4 <_scanf_float+0x188>
 8017e6e:	6822      	ldr	r2, [r4, #0]
 8017e70:	0591      	lsls	r1, r2, #22
 8017e72:	f57f af1b 	bpl.w	8017cac <_scanf_float+0x60>
 8017e76:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8017e7a:	6022      	str	r2, [r4, #0]
 8017e7c:	f8cd 9004 	str.w	r9, [sp, #4]
 8017e80:	e7a8      	b.n	8017dd4 <_scanf_float+0x188>
 8017e82:	6822      	ldr	r2, [r4, #0]
 8017e84:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8017e88:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8017e8c:	d006      	beq.n	8017e9c <_scanf_float+0x250>
 8017e8e:	0550      	lsls	r0, r2, #21
 8017e90:	f57f af0c 	bpl.w	8017cac <_scanf_float+0x60>
 8017e94:	f1b9 0f00 	cmp.w	r9, #0
 8017e98:	f43f af0f 	beq.w	8017cba <_scanf_float+0x6e>
 8017e9c:	0591      	lsls	r1, r2, #22
 8017e9e:	bf58      	it	pl
 8017ea0:	9901      	ldrpl	r1, [sp, #4]
 8017ea2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017ea6:	bf58      	it	pl
 8017ea8:	eba9 0101 	subpl.w	r1, r9, r1
 8017eac:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8017eb0:	bf58      	it	pl
 8017eb2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8017eb6:	6022      	str	r2, [r4, #0]
 8017eb8:	f04f 0900 	mov.w	r9, #0
 8017ebc:	e78a      	b.n	8017dd4 <_scanf_float+0x188>
 8017ebe:	f04f 0a03 	mov.w	sl, #3
 8017ec2:	e787      	b.n	8017dd4 <_scanf_float+0x188>
 8017ec4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017ec8:	4639      	mov	r1, r7
 8017eca:	4640      	mov	r0, r8
 8017ecc:	4798      	blx	r3
 8017ece:	2800      	cmp	r0, #0
 8017ed0:	f43f aedf 	beq.w	8017c92 <_scanf_float+0x46>
 8017ed4:	e6ea      	b.n	8017cac <_scanf_float+0x60>
 8017ed6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017eda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017ede:	463a      	mov	r2, r7
 8017ee0:	4640      	mov	r0, r8
 8017ee2:	4798      	blx	r3
 8017ee4:	6923      	ldr	r3, [r4, #16]
 8017ee6:	3b01      	subs	r3, #1
 8017ee8:	6123      	str	r3, [r4, #16]
 8017eea:	e6ec      	b.n	8017cc6 <_scanf_float+0x7a>
 8017eec:	1e6b      	subs	r3, r5, #1
 8017eee:	2b06      	cmp	r3, #6
 8017ef0:	d825      	bhi.n	8017f3e <_scanf_float+0x2f2>
 8017ef2:	2d02      	cmp	r5, #2
 8017ef4:	d836      	bhi.n	8017f64 <_scanf_float+0x318>
 8017ef6:	455e      	cmp	r6, fp
 8017ef8:	f67f aee8 	bls.w	8017ccc <_scanf_float+0x80>
 8017efc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017f00:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017f04:	463a      	mov	r2, r7
 8017f06:	4640      	mov	r0, r8
 8017f08:	4798      	blx	r3
 8017f0a:	6923      	ldr	r3, [r4, #16]
 8017f0c:	3b01      	subs	r3, #1
 8017f0e:	6123      	str	r3, [r4, #16]
 8017f10:	e7f1      	b.n	8017ef6 <_scanf_float+0x2aa>
 8017f12:	9802      	ldr	r0, [sp, #8]
 8017f14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017f18:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8017f1c:	9002      	str	r0, [sp, #8]
 8017f1e:	463a      	mov	r2, r7
 8017f20:	4640      	mov	r0, r8
 8017f22:	4798      	blx	r3
 8017f24:	6923      	ldr	r3, [r4, #16]
 8017f26:	3b01      	subs	r3, #1
 8017f28:	6123      	str	r3, [r4, #16]
 8017f2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017f2e:	fa5f fa8a 	uxtb.w	sl, sl
 8017f32:	f1ba 0f02 	cmp.w	sl, #2
 8017f36:	d1ec      	bne.n	8017f12 <_scanf_float+0x2c6>
 8017f38:	3d03      	subs	r5, #3
 8017f3a:	b2ed      	uxtb	r5, r5
 8017f3c:	1b76      	subs	r6, r6, r5
 8017f3e:	6823      	ldr	r3, [r4, #0]
 8017f40:	05da      	lsls	r2, r3, #23
 8017f42:	d52f      	bpl.n	8017fa4 <_scanf_float+0x358>
 8017f44:	055b      	lsls	r3, r3, #21
 8017f46:	d510      	bpl.n	8017f6a <_scanf_float+0x31e>
 8017f48:	455e      	cmp	r6, fp
 8017f4a:	f67f aebf 	bls.w	8017ccc <_scanf_float+0x80>
 8017f4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017f52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017f56:	463a      	mov	r2, r7
 8017f58:	4640      	mov	r0, r8
 8017f5a:	4798      	blx	r3
 8017f5c:	6923      	ldr	r3, [r4, #16]
 8017f5e:	3b01      	subs	r3, #1
 8017f60:	6123      	str	r3, [r4, #16]
 8017f62:	e7f1      	b.n	8017f48 <_scanf_float+0x2fc>
 8017f64:	46aa      	mov	sl, r5
 8017f66:	9602      	str	r6, [sp, #8]
 8017f68:	e7df      	b.n	8017f2a <_scanf_float+0x2de>
 8017f6a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8017f6e:	6923      	ldr	r3, [r4, #16]
 8017f70:	2965      	cmp	r1, #101	; 0x65
 8017f72:	f103 33ff 	add.w	r3, r3, #4294967295
 8017f76:	f106 35ff 	add.w	r5, r6, #4294967295
 8017f7a:	6123      	str	r3, [r4, #16]
 8017f7c:	d00c      	beq.n	8017f98 <_scanf_float+0x34c>
 8017f7e:	2945      	cmp	r1, #69	; 0x45
 8017f80:	d00a      	beq.n	8017f98 <_scanf_float+0x34c>
 8017f82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017f86:	463a      	mov	r2, r7
 8017f88:	4640      	mov	r0, r8
 8017f8a:	4798      	blx	r3
 8017f8c:	6923      	ldr	r3, [r4, #16]
 8017f8e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8017f92:	3b01      	subs	r3, #1
 8017f94:	1eb5      	subs	r5, r6, #2
 8017f96:	6123      	str	r3, [r4, #16]
 8017f98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017f9c:	463a      	mov	r2, r7
 8017f9e:	4640      	mov	r0, r8
 8017fa0:	4798      	blx	r3
 8017fa2:	462e      	mov	r6, r5
 8017fa4:	6825      	ldr	r5, [r4, #0]
 8017fa6:	f015 0510 	ands.w	r5, r5, #16
 8017faa:	d14d      	bne.n	8018048 <_scanf_float+0x3fc>
 8017fac:	7035      	strb	r5, [r6, #0]
 8017fae:	6823      	ldr	r3, [r4, #0]
 8017fb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8017fb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017fb8:	d11a      	bne.n	8017ff0 <_scanf_float+0x3a4>
 8017fba:	9b01      	ldr	r3, [sp, #4]
 8017fbc:	454b      	cmp	r3, r9
 8017fbe:	eba3 0209 	sub.w	r2, r3, r9
 8017fc2:	d122      	bne.n	801800a <_scanf_float+0x3be>
 8017fc4:	2200      	movs	r2, #0
 8017fc6:	4659      	mov	r1, fp
 8017fc8:	4640      	mov	r0, r8
 8017fca:	f002 fb9f 	bl	801a70c <_strtod_r>
 8017fce:	9b03      	ldr	r3, [sp, #12]
 8017fd0:	6821      	ldr	r1, [r4, #0]
 8017fd2:	681b      	ldr	r3, [r3, #0]
 8017fd4:	f011 0f02 	tst.w	r1, #2
 8017fd8:	f103 0204 	add.w	r2, r3, #4
 8017fdc:	d020      	beq.n	8018020 <_scanf_float+0x3d4>
 8017fde:	9903      	ldr	r1, [sp, #12]
 8017fe0:	600a      	str	r2, [r1, #0]
 8017fe2:	681b      	ldr	r3, [r3, #0]
 8017fe4:	ed83 0b00 	vstr	d0, [r3]
 8017fe8:	68e3      	ldr	r3, [r4, #12]
 8017fea:	3301      	adds	r3, #1
 8017fec:	60e3      	str	r3, [r4, #12]
 8017fee:	e66e      	b.n	8017cce <_scanf_float+0x82>
 8017ff0:	9b04      	ldr	r3, [sp, #16]
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	d0e6      	beq.n	8017fc4 <_scanf_float+0x378>
 8017ff6:	9905      	ldr	r1, [sp, #20]
 8017ff8:	230a      	movs	r3, #10
 8017ffa:	462a      	mov	r2, r5
 8017ffc:	3101      	adds	r1, #1
 8017ffe:	4640      	mov	r0, r8
 8018000:	f002 fc0c 	bl	801a81c <_strtol_r>
 8018004:	9b04      	ldr	r3, [sp, #16]
 8018006:	9e05      	ldr	r6, [sp, #20]
 8018008:	1ac2      	subs	r2, r0, r3
 801800a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801800e:	429e      	cmp	r6, r3
 8018010:	bf28      	it	cs
 8018012:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8018016:	490d      	ldr	r1, [pc, #52]	; (801804c <_scanf_float+0x400>)
 8018018:	4630      	mov	r0, r6
 801801a:	f000 f8dd 	bl	80181d8 <siprintf>
 801801e:	e7d1      	b.n	8017fc4 <_scanf_float+0x378>
 8018020:	f011 0f04 	tst.w	r1, #4
 8018024:	9903      	ldr	r1, [sp, #12]
 8018026:	600a      	str	r2, [r1, #0]
 8018028:	d1db      	bne.n	8017fe2 <_scanf_float+0x396>
 801802a:	eeb4 0b40 	vcmp.f64	d0, d0
 801802e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018032:	681e      	ldr	r6, [r3, #0]
 8018034:	d705      	bvc.n	8018042 <_scanf_float+0x3f6>
 8018036:	4806      	ldr	r0, [pc, #24]	; (8018050 <_scanf_float+0x404>)
 8018038:	f000 f9f6 	bl	8018428 <nanf>
 801803c:	ed86 0a00 	vstr	s0, [r6]
 8018040:	e7d2      	b.n	8017fe8 <_scanf_float+0x39c>
 8018042:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8018046:	e7f9      	b.n	801803c <_scanf_float+0x3f0>
 8018048:	2500      	movs	r5, #0
 801804a:	e640      	b.n	8017cce <_scanf_float+0x82>
 801804c:	0801c486 	.word	0x0801c486
 8018050:	0801c838 	.word	0x0801c838

08018054 <std>:
 8018054:	2300      	movs	r3, #0
 8018056:	b510      	push	{r4, lr}
 8018058:	4604      	mov	r4, r0
 801805a:	e9c0 3300 	strd	r3, r3, [r0]
 801805e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018062:	6083      	str	r3, [r0, #8]
 8018064:	8181      	strh	r1, [r0, #12]
 8018066:	6643      	str	r3, [r0, #100]	; 0x64
 8018068:	81c2      	strh	r2, [r0, #14]
 801806a:	6183      	str	r3, [r0, #24]
 801806c:	4619      	mov	r1, r3
 801806e:	2208      	movs	r2, #8
 8018070:	305c      	adds	r0, #92	; 0x5c
 8018072:	f000 f942 	bl	80182fa <memset>
 8018076:	4b0d      	ldr	r3, [pc, #52]	; (80180ac <std+0x58>)
 8018078:	6263      	str	r3, [r4, #36]	; 0x24
 801807a:	4b0d      	ldr	r3, [pc, #52]	; (80180b0 <std+0x5c>)
 801807c:	62a3      	str	r3, [r4, #40]	; 0x28
 801807e:	4b0d      	ldr	r3, [pc, #52]	; (80180b4 <std+0x60>)
 8018080:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018082:	4b0d      	ldr	r3, [pc, #52]	; (80180b8 <std+0x64>)
 8018084:	6323      	str	r3, [r4, #48]	; 0x30
 8018086:	4b0d      	ldr	r3, [pc, #52]	; (80180bc <std+0x68>)
 8018088:	6224      	str	r4, [r4, #32]
 801808a:	429c      	cmp	r4, r3
 801808c:	d006      	beq.n	801809c <std+0x48>
 801808e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8018092:	4294      	cmp	r4, r2
 8018094:	d002      	beq.n	801809c <std+0x48>
 8018096:	33d0      	adds	r3, #208	; 0xd0
 8018098:	429c      	cmp	r4, r3
 801809a:	d105      	bne.n	80180a8 <std+0x54>
 801809c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80180a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80180a4:	f000 b9a6 	b.w	80183f4 <__retarget_lock_init_recursive>
 80180a8:	bd10      	pop	{r4, pc}
 80180aa:	bf00      	nop
 80180ac:	08018271 	.word	0x08018271
 80180b0:	08018297 	.word	0x08018297
 80180b4:	080182cf 	.word	0x080182cf
 80180b8:	080182f3 	.word	0x080182f3
 80180bc:	24003328 	.word	0x24003328

080180c0 <stdio_exit_handler>:
 80180c0:	4a02      	ldr	r2, [pc, #8]	; (80180cc <stdio_exit_handler+0xc>)
 80180c2:	4903      	ldr	r1, [pc, #12]	; (80180d0 <stdio_exit_handler+0x10>)
 80180c4:	4803      	ldr	r0, [pc, #12]	; (80180d4 <stdio_exit_handler+0x14>)
 80180c6:	f000 b869 	b.w	801819c <_fwalk_sglue>
 80180ca:	bf00      	nop
 80180cc:	24000100 	.word	0x24000100
 80180d0:	0801b21d 	.word	0x0801b21d
 80180d4:	2400010c 	.word	0x2400010c

080180d8 <cleanup_stdio>:
 80180d8:	6841      	ldr	r1, [r0, #4]
 80180da:	4b0c      	ldr	r3, [pc, #48]	; (801810c <cleanup_stdio+0x34>)
 80180dc:	4299      	cmp	r1, r3
 80180de:	b510      	push	{r4, lr}
 80180e0:	4604      	mov	r4, r0
 80180e2:	d001      	beq.n	80180e8 <cleanup_stdio+0x10>
 80180e4:	f003 f89a 	bl	801b21c <_fflush_r>
 80180e8:	68a1      	ldr	r1, [r4, #8]
 80180ea:	4b09      	ldr	r3, [pc, #36]	; (8018110 <cleanup_stdio+0x38>)
 80180ec:	4299      	cmp	r1, r3
 80180ee:	d002      	beq.n	80180f6 <cleanup_stdio+0x1e>
 80180f0:	4620      	mov	r0, r4
 80180f2:	f003 f893 	bl	801b21c <_fflush_r>
 80180f6:	68e1      	ldr	r1, [r4, #12]
 80180f8:	4b06      	ldr	r3, [pc, #24]	; (8018114 <cleanup_stdio+0x3c>)
 80180fa:	4299      	cmp	r1, r3
 80180fc:	d004      	beq.n	8018108 <cleanup_stdio+0x30>
 80180fe:	4620      	mov	r0, r4
 8018100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018104:	f003 b88a 	b.w	801b21c <_fflush_r>
 8018108:	bd10      	pop	{r4, pc}
 801810a:	bf00      	nop
 801810c:	24003328 	.word	0x24003328
 8018110:	24003390 	.word	0x24003390
 8018114:	240033f8 	.word	0x240033f8

08018118 <global_stdio_init.part.0>:
 8018118:	b510      	push	{r4, lr}
 801811a:	4b0b      	ldr	r3, [pc, #44]	; (8018148 <global_stdio_init.part.0+0x30>)
 801811c:	4c0b      	ldr	r4, [pc, #44]	; (801814c <global_stdio_init.part.0+0x34>)
 801811e:	4a0c      	ldr	r2, [pc, #48]	; (8018150 <global_stdio_init.part.0+0x38>)
 8018120:	601a      	str	r2, [r3, #0]
 8018122:	4620      	mov	r0, r4
 8018124:	2200      	movs	r2, #0
 8018126:	2104      	movs	r1, #4
 8018128:	f7ff ff94 	bl	8018054 <std>
 801812c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8018130:	2201      	movs	r2, #1
 8018132:	2109      	movs	r1, #9
 8018134:	f7ff ff8e 	bl	8018054 <std>
 8018138:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801813c:	2202      	movs	r2, #2
 801813e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018142:	2112      	movs	r1, #18
 8018144:	f7ff bf86 	b.w	8018054 <std>
 8018148:	24003460 	.word	0x24003460
 801814c:	24003328 	.word	0x24003328
 8018150:	080180c1 	.word	0x080180c1

08018154 <__sfp_lock_acquire>:
 8018154:	4801      	ldr	r0, [pc, #4]	; (801815c <__sfp_lock_acquire+0x8>)
 8018156:	f000 b94e 	b.w	80183f6 <__retarget_lock_acquire_recursive>
 801815a:	bf00      	nop
 801815c:	24003469 	.word	0x24003469

08018160 <__sfp_lock_release>:
 8018160:	4801      	ldr	r0, [pc, #4]	; (8018168 <__sfp_lock_release+0x8>)
 8018162:	f000 b949 	b.w	80183f8 <__retarget_lock_release_recursive>
 8018166:	bf00      	nop
 8018168:	24003469 	.word	0x24003469

0801816c <__sinit>:
 801816c:	b510      	push	{r4, lr}
 801816e:	4604      	mov	r4, r0
 8018170:	f7ff fff0 	bl	8018154 <__sfp_lock_acquire>
 8018174:	6a23      	ldr	r3, [r4, #32]
 8018176:	b11b      	cbz	r3, 8018180 <__sinit+0x14>
 8018178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801817c:	f7ff bff0 	b.w	8018160 <__sfp_lock_release>
 8018180:	4b04      	ldr	r3, [pc, #16]	; (8018194 <__sinit+0x28>)
 8018182:	6223      	str	r3, [r4, #32]
 8018184:	4b04      	ldr	r3, [pc, #16]	; (8018198 <__sinit+0x2c>)
 8018186:	681b      	ldr	r3, [r3, #0]
 8018188:	2b00      	cmp	r3, #0
 801818a:	d1f5      	bne.n	8018178 <__sinit+0xc>
 801818c:	f7ff ffc4 	bl	8018118 <global_stdio_init.part.0>
 8018190:	e7f2      	b.n	8018178 <__sinit+0xc>
 8018192:	bf00      	nop
 8018194:	080180d9 	.word	0x080180d9
 8018198:	24003460 	.word	0x24003460

0801819c <_fwalk_sglue>:
 801819c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80181a0:	4607      	mov	r7, r0
 80181a2:	4688      	mov	r8, r1
 80181a4:	4614      	mov	r4, r2
 80181a6:	2600      	movs	r6, #0
 80181a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80181ac:	f1b9 0901 	subs.w	r9, r9, #1
 80181b0:	d505      	bpl.n	80181be <_fwalk_sglue+0x22>
 80181b2:	6824      	ldr	r4, [r4, #0]
 80181b4:	2c00      	cmp	r4, #0
 80181b6:	d1f7      	bne.n	80181a8 <_fwalk_sglue+0xc>
 80181b8:	4630      	mov	r0, r6
 80181ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80181be:	89ab      	ldrh	r3, [r5, #12]
 80181c0:	2b01      	cmp	r3, #1
 80181c2:	d907      	bls.n	80181d4 <_fwalk_sglue+0x38>
 80181c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80181c8:	3301      	adds	r3, #1
 80181ca:	d003      	beq.n	80181d4 <_fwalk_sglue+0x38>
 80181cc:	4629      	mov	r1, r5
 80181ce:	4638      	mov	r0, r7
 80181d0:	47c0      	blx	r8
 80181d2:	4306      	orrs	r6, r0
 80181d4:	3568      	adds	r5, #104	; 0x68
 80181d6:	e7e9      	b.n	80181ac <_fwalk_sglue+0x10>

080181d8 <siprintf>:
 80181d8:	b40e      	push	{r1, r2, r3}
 80181da:	b500      	push	{lr}
 80181dc:	b09c      	sub	sp, #112	; 0x70
 80181de:	ab1d      	add	r3, sp, #116	; 0x74
 80181e0:	9002      	str	r0, [sp, #8]
 80181e2:	9006      	str	r0, [sp, #24]
 80181e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80181e8:	4809      	ldr	r0, [pc, #36]	; (8018210 <siprintf+0x38>)
 80181ea:	9107      	str	r1, [sp, #28]
 80181ec:	9104      	str	r1, [sp, #16]
 80181ee:	4909      	ldr	r1, [pc, #36]	; (8018214 <siprintf+0x3c>)
 80181f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80181f4:	9105      	str	r1, [sp, #20]
 80181f6:	6800      	ldr	r0, [r0, #0]
 80181f8:	9301      	str	r3, [sp, #4]
 80181fa:	a902      	add	r1, sp, #8
 80181fc:	f002 fb6a 	bl	801a8d4 <_svfiprintf_r>
 8018200:	9b02      	ldr	r3, [sp, #8]
 8018202:	2200      	movs	r2, #0
 8018204:	701a      	strb	r2, [r3, #0]
 8018206:	b01c      	add	sp, #112	; 0x70
 8018208:	f85d eb04 	ldr.w	lr, [sp], #4
 801820c:	b003      	add	sp, #12
 801820e:	4770      	bx	lr
 8018210:	24000158 	.word	0x24000158
 8018214:	ffff0208 	.word	0xffff0208

08018218 <siscanf>:
 8018218:	b40e      	push	{r1, r2, r3}
 801821a:	b510      	push	{r4, lr}
 801821c:	b09f      	sub	sp, #124	; 0x7c
 801821e:	ac21      	add	r4, sp, #132	; 0x84
 8018220:	f44f 7101 	mov.w	r1, #516	; 0x204
 8018224:	f854 2b04 	ldr.w	r2, [r4], #4
 8018228:	9201      	str	r2, [sp, #4]
 801822a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801822e:	9004      	str	r0, [sp, #16]
 8018230:	9008      	str	r0, [sp, #32]
 8018232:	f7e8 f8cd 	bl	80003d0 <strlen>
 8018236:	4b0c      	ldr	r3, [pc, #48]	; (8018268 <siscanf+0x50>)
 8018238:	9005      	str	r0, [sp, #20]
 801823a:	9009      	str	r0, [sp, #36]	; 0x24
 801823c:	930d      	str	r3, [sp, #52]	; 0x34
 801823e:	480b      	ldr	r0, [pc, #44]	; (801826c <siscanf+0x54>)
 8018240:	9a01      	ldr	r2, [sp, #4]
 8018242:	6800      	ldr	r0, [r0, #0]
 8018244:	9403      	str	r4, [sp, #12]
 8018246:	2300      	movs	r3, #0
 8018248:	9311      	str	r3, [sp, #68]	; 0x44
 801824a:	9316      	str	r3, [sp, #88]	; 0x58
 801824c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018250:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018254:	a904      	add	r1, sp, #16
 8018256:	4623      	mov	r3, r4
 8018258:	f002 fc94 	bl	801ab84 <__ssvfiscanf_r>
 801825c:	b01f      	add	sp, #124	; 0x7c
 801825e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018262:	b003      	add	sp, #12
 8018264:	4770      	bx	lr
 8018266:	bf00      	nop
 8018268:	08018293 	.word	0x08018293
 801826c:	24000158 	.word	0x24000158

08018270 <__sread>:
 8018270:	b510      	push	{r4, lr}
 8018272:	460c      	mov	r4, r1
 8018274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018278:	f000 f86e 	bl	8018358 <_read_r>
 801827c:	2800      	cmp	r0, #0
 801827e:	bfab      	itete	ge
 8018280:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018282:	89a3      	ldrhlt	r3, [r4, #12]
 8018284:	181b      	addge	r3, r3, r0
 8018286:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801828a:	bfac      	ite	ge
 801828c:	6563      	strge	r3, [r4, #84]	; 0x54
 801828e:	81a3      	strhlt	r3, [r4, #12]
 8018290:	bd10      	pop	{r4, pc}

08018292 <__seofread>:
 8018292:	2000      	movs	r0, #0
 8018294:	4770      	bx	lr

08018296 <__swrite>:
 8018296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801829a:	461f      	mov	r7, r3
 801829c:	898b      	ldrh	r3, [r1, #12]
 801829e:	05db      	lsls	r3, r3, #23
 80182a0:	4605      	mov	r5, r0
 80182a2:	460c      	mov	r4, r1
 80182a4:	4616      	mov	r6, r2
 80182a6:	d505      	bpl.n	80182b4 <__swrite+0x1e>
 80182a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80182ac:	2302      	movs	r3, #2
 80182ae:	2200      	movs	r2, #0
 80182b0:	f000 f840 	bl	8018334 <_lseek_r>
 80182b4:	89a3      	ldrh	r3, [r4, #12]
 80182b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80182ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80182be:	81a3      	strh	r3, [r4, #12]
 80182c0:	4632      	mov	r2, r6
 80182c2:	463b      	mov	r3, r7
 80182c4:	4628      	mov	r0, r5
 80182c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80182ca:	f000 b857 	b.w	801837c <_write_r>

080182ce <__sseek>:
 80182ce:	b510      	push	{r4, lr}
 80182d0:	460c      	mov	r4, r1
 80182d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80182d6:	f000 f82d 	bl	8018334 <_lseek_r>
 80182da:	1c43      	adds	r3, r0, #1
 80182dc:	89a3      	ldrh	r3, [r4, #12]
 80182de:	bf15      	itete	ne
 80182e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80182e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80182e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80182ea:	81a3      	strheq	r3, [r4, #12]
 80182ec:	bf18      	it	ne
 80182ee:	81a3      	strhne	r3, [r4, #12]
 80182f0:	bd10      	pop	{r4, pc}

080182f2 <__sclose>:
 80182f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80182f6:	f000 b80d 	b.w	8018314 <_close_r>

080182fa <memset>:
 80182fa:	4402      	add	r2, r0
 80182fc:	4603      	mov	r3, r0
 80182fe:	4293      	cmp	r3, r2
 8018300:	d100      	bne.n	8018304 <memset+0xa>
 8018302:	4770      	bx	lr
 8018304:	f803 1b01 	strb.w	r1, [r3], #1
 8018308:	e7f9      	b.n	80182fe <memset+0x4>
	...

0801830c <_localeconv_r>:
 801830c:	4800      	ldr	r0, [pc, #0]	; (8018310 <_localeconv_r+0x4>)
 801830e:	4770      	bx	lr
 8018310:	2400024c 	.word	0x2400024c

08018314 <_close_r>:
 8018314:	b538      	push	{r3, r4, r5, lr}
 8018316:	4d06      	ldr	r5, [pc, #24]	; (8018330 <_close_r+0x1c>)
 8018318:	2300      	movs	r3, #0
 801831a:	4604      	mov	r4, r0
 801831c:	4608      	mov	r0, r1
 801831e:	602b      	str	r3, [r5, #0]
 8018320:	f7eb fc31 	bl	8003b86 <_close>
 8018324:	1c43      	adds	r3, r0, #1
 8018326:	d102      	bne.n	801832e <_close_r+0x1a>
 8018328:	682b      	ldr	r3, [r5, #0]
 801832a:	b103      	cbz	r3, 801832e <_close_r+0x1a>
 801832c:	6023      	str	r3, [r4, #0]
 801832e:	bd38      	pop	{r3, r4, r5, pc}
 8018330:	24003464 	.word	0x24003464

08018334 <_lseek_r>:
 8018334:	b538      	push	{r3, r4, r5, lr}
 8018336:	4d07      	ldr	r5, [pc, #28]	; (8018354 <_lseek_r+0x20>)
 8018338:	4604      	mov	r4, r0
 801833a:	4608      	mov	r0, r1
 801833c:	4611      	mov	r1, r2
 801833e:	2200      	movs	r2, #0
 8018340:	602a      	str	r2, [r5, #0]
 8018342:	461a      	mov	r2, r3
 8018344:	f7eb fc46 	bl	8003bd4 <_lseek>
 8018348:	1c43      	adds	r3, r0, #1
 801834a:	d102      	bne.n	8018352 <_lseek_r+0x1e>
 801834c:	682b      	ldr	r3, [r5, #0]
 801834e:	b103      	cbz	r3, 8018352 <_lseek_r+0x1e>
 8018350:	6023      	str	r3, [r4, #0]
 8018352:	bd38      	pop	{r3, r4, r5, pc}
 8018354:	24003464 	.word	0x24003464

08018358 <_read_r>:
 8018358:	b538      	push	{r3, r4, r5, lr}
 801835a:	4d07      	ldr	r5, [pc, #28]	; (8018378 <_read_r+0x20>)
 801835c:	4604      	mov	r4, r0
 801835e:	4608      	mov	r0, r1
 8018360:	4611      	mov	r1, r2
 8018362:	2200      	movs	r2, #0
 8018364:	602a      	str	r2, [r5, #0]
 8018366:	461a      	mov	r2, r3
 8018368:	f7eb fbd4 	bl	8003b14 <_read>
 801836c:	1c43      	adds	r3, r0, #1
 801836e:	d102      	bne.n	8018376 <_read_r+0x1e>
 8018370:	682b      	ldr	r3, [r5, #0]
 8018372:	b103      	cbz	r3, 8018376 <_read_r+0x1e>
 8018374:	6023      	str	r3, [r4, #0]
 8018376:	bd38      	pop	{r3, r4, r5, pc}
 8018378:	24003464 	.word	0x24003464

0801837c <_write_r>:
 801837c:	b538      	push	{r3, r4, r5, lr}
 801837e:	4d07      	ldr	r5, [pc, #28]	; (801839c <_write_r+0x20>)
 8018380:	4604      	mov	r4, r0
 8018382:	4608      	mov	r0, r1
 8018384:	4611      	mov	r1, r2
 8018386:	2200      	movs	r2, #0
 8018388:	602a      	str	r2, [r5, #0]
 801838a:	461a      	mov	r2, r3
 801838c:	f7eb fbdf 	bl	8003b4e <_write>
 8018390:	1c43      	adds	r3, r0, #1
 8018392:	d102      	bne.n	801839a <_write_r+0x1e>
 8018394:	682b      	ldr	r3, [r5, #0]
 8018396:	b103      	cbz	r3, 801839a <_write_r+0x1e>
 8018398:	6023      	str	r3, [r4, #0]
 801839a:	bd38      	pop	{r3, r4, r5, pc}
 801839c:	24003464 	.word	0x24003464

080183a0 <__errno>:
 80183a0:	4b01      	ldr	r3, [pc, #4]	; (80183a8 <__errno+0x8>)
 80183a2:	6818      	ldr	r0, [r3, #0]
 80183a4:	4770      	bx	lr
 80183a6:	bf00      	nop
 80183a8:	24000158 	.word	0x24000158

080183ac <__libc_init_array>:
 80183ac:	b570      	push	{r4, r5, r6, lr}
 80183ae:	4d0d      	ldr	r5, [pc, #52]	; (80183e4 <__libc_init_array+0x38>)
 80183b0:	4c0d      	ldr	r4, [pc, #52]	; (80183e8 <__libc_init_array+0x3c>)
 80183b2:	1b64      	subs	r4, r4, r5
 80183b4:	10a4      	asrs	r4, r4, #2
 80183b6:	2600      	movs	r6, #0
 80183b8:	42a6      	cmp	r6, r4
 80183ba:	d109      	bne.n	80183d0 <__libc_init_array+0x24>
 80183bc:	4d0b      	ldr	r5, [pc, #44]	; (80183ec <__libc_init_array+0x40>)
 80183be:	4c0c      	ldr	r4, [pc, #48]	; (80183f0 <__libc_init_array+0x44>)
 80183c0:	f003 ff1e 	bl	801c200 <_init>
 80183c4:	1b64      	subs	r4, r4, r5
 80183c6:	10a4      	asrs	r4, r4, #2
 80183c8:	2600      	movs	r6, #0
 80183ca:	42a6      	cmp	r6, r4
 80183cc:	d105      	bne.n	80183da <__libc_init_array+0x2e>
 80183ce:	bd70      	pop	{r4, r5, r6, pc}
 80183d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80183d4:	4798      	blx	r3
 80183d6:	3601      	adds	r6, #1
 80183d8:	e7ee      	b.n	80183b8 <__libc_init_array+0xc>
 80183da:	f855 3b04 	ldr.w	r3, [r5], #4
 80183de:	4798      	blx	r3
 80183e0:	3601      	adds	r6, #1
 80183e2:	e7f2      	b.n	80183ca <__libc_init_array+0x1e>
 80183e4:	0801c8a4 	.word	0x0801c8a4
 80183e8:	0801c8a4 	.word	0x0801c8a4
 80183ec:	0801c8a4 	.word	0x0801c8a4
 80183f0:	0801c8a8 	.word	0x0801c8a8

080183f4 <__retarget_lock_init_recursive>:
 80183f4:	4770      	bx	lr

080183f6 <__retarget_lock_acquire_recursive>:
 80183f6:	4770      	bx	lr

080183f8 <__retarget_lock_release_recursive>:
 80183f8:	4770      	bx	lr

080183fa <strcpy>:
 80183fa:	4603      	mov	r3, r0
 80183fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018400:	f803 2b01 	strb.w	r2, [r3], #1
 8018404:	2a00      	cmp	r2, #0
 8018406:	d1f9      	bne.n	80183fc <strcpy+0x2>
 8018408:	4770      	bx	lr

0801840a <memcpy>:
 801840a:	440a      	add	r2, r1
 801840c:	4291      	cmp	r1, r2
 801840e:	f100 33ff 	add.w	r3, r0, #4294967295
 8018412:	d100      	bne.n	8018416 <memcpy+0xc>
 8018414:	4770      	bx	lr
 8018416:	b510      	push	{r4, lr}
 8018418:	f811 4b01 	ldrb.w	r4, [r1], #1
 801841c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018420:	4291      	cmp	r1, r2
 8018422:	d1f9      	bne.n	8018418 <memcpy+0xe>
 8018424:	bd10      	pop	{r4, pc}
	...

08018428 <nanf>:
 8018428:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8018430 <nanf+0x8>
 801842c:	4770      	bx	lr
 801842e:	bf00      	nop
 8018430:	7fc00000 	.word	0x7fc00000

08018434 <quorem>:
 8018434:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018438:	6903      	ldr	r3, [r0, #16]
 801843a:	690c      	ldr	r4, [r1, #16]
 801843c:	42a3      	cmp	r3, r4
 801843e:	4607      	mov	r7, r0
 8018440:	db7e      	blt.n	8018540 <quorem+0x10c>
 8018442:	3c01      	subs	r4, #1
 8018444:	f101 0814 	add.w	r8, r1, #20
 8018448:	f100 0514 	add.w	r5, r0, #20
 801844c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018450:	9301      	str	r3, [sp, #4]
 8018452:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8018456:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801845a:	3301      	adds	r3, #1
 801845c:	429a      	cmp	r2, r3
 801845e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8018462:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8018466:	fbb2 f6f3 	udiv	r6, r2, r3
 801846a:	d331      	bcc.n	80184d0 <quorem+0x9c>
 801846c:	f04f 0e00 	mov.w	lr, #0
 8018470:	4640      	mov	r0, r8
 8018472:	46ac      	mov	ip, r5
 8018474:	46f2      	mov	sl, lr
 8018476:	f850 2b04 	ldr.w	r2, [r0], #4
 801847a:	b293      	uxth	r3, r2
 801847c:	fb06 e303 	mla	r3, r6, r3, lr
 8018480:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8018484:	0c1a      	lsrs	r2, r3, #16
 8018486:	b29b      	uxth	r3, r3
 8018488:	ebaa 0303 	sub.w	r3, sl, r3
 801848c:	f8dc a000 	ldr.w	sl, [ip]
 8018490:	fa13 f38a 	uxtah	r3, r3, sl
 8018494:	fb06 220e 	mla	r2, r6, lr, r2
 8018498:	9300      	str	r3, [sp, #0]
 801849a:	9b00      	ldr	r3, [sp, #0]
 801849c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80184a0:	b292      	uxth	r2, r2
 80184a2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80184a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80184aa:	f8bd 3000 	ldrh.w	r3, [sp]
 80184ae:	4581      	cmp	r9, r0
 80184b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80184b4:	f84c 3b04 	str.w	r3, [ip], #4
 80184b8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80184bc:	d2db      	bcs.n	8018476 <quorem+0x42>
 80184be:	f855 300b 	ldr.w	r3, [r5, fp]
 80184c2:	b92b      	cbnz	r3, 80184d0 <quorem+0x9c>
 80184c4:	9b01      	ldr	r3, [sp, #4]
 80184c6:	3b04      	subs	r3, #4
 80184c8:	429d      	cmp	r5, r3
 80184ca:	461a      	mov	r2, r3
 80184cc:	d32c      	bcc.n	8018528 <quorem+0xf4>
 80184ce:	613c      	str	r4, [r7, #16]
 80184d0:	4638      	mov	r0, r7
 80184d2:	f001 f96b 	bl	80197ac <__mcmp>
 80184d6:	2800      	cmp	r0, #0
 80184d8:	db22      	blt.n	8018520 <quorem+0xec>
 80184da:	3601      	adds	r6, #1
 80184dc:	4629      	mov	r1, r5
 80184de:	2000      	movs	r0, #0
 80184e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80184e4:	f8d1 c000 	ldr.w	ip, [r1]
 80184e8:	b293      	uxth	r3, r2
 80184ea:	1ac3      	subs	r3, r0, r3
 80184ec:	0c12      	lsrs	r2, r2, #16
 80184ee:	fa13 f38c 	uxtah	r3, r3, ip
 80184f2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80184f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80184fa:	b29b      	uxth	r3, r3
 80184fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018500:	45c1      	cmp	r9, r8
 8018502:	f841 3b04 	str.w	r3, [r1], #4
 8018506:	ea4f 4022 	mov.w	r0, r2, asr #16
 801850a:	d2e9      	bcs.n	80184e0 <quorem+0xac>
 801850c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018510:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018514:	b922      	cbnz	r2, 8018520 <quorem+0xec>
 8018516:	3b04      	subs	r3, #4
 8018518:	429d      	cmp	r5, r3
 801851a:	461a      	mov	r2, r3
 801851c:	d30a      	bcc.n	8018534 <quorem+0x100>
 801851e:	613c      	str	r4, [r7, #16]
 8018520:	4630      	mov	r0, r6
 8018522:	b003      	add	sp, #12
 8018524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018528:	6812      	ldr	r2, [r2, #0]
 801852a:	3b04      	subs	r3, #4
 801852c:	2a00      	cmp	r2, #0
 801852e:	d1ce      	bne.n	80184ce <quorem+0x9a>
 8018530:	3c01      	subs	r4, #1
 8018532:	e7c9      	b.n	80184c8 <quorem+0x94>
 8018534:	6812      	ldr	r2, [r2, #0]
 8018536:	3b04      	subs	r3, #4
 8018538:	2a00      	cmp	r2, #0
 801853a:	d1f0      	bne.n	801851e <quorem+0xea>
 801853c:	3c01      	subs	r4, #1
 801853e:	e7eb      	b.n	8018518 <quorem+0xe4>
 8018540:	2000      	movs	r0, #0
 8018542:	e7ee      	b.n	8018522 <quorem+0xee>
 8018544:	0000      	movs	r0, r0
	...

08018548 <_dtoa_r>:
 8018548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801854c:	ed2d 8b02 	vpush	{d8}
 8018550:	69c5      	ldr	r5, [r0, #28]
 8018552:	b091      	sub	sp, #68	; 0x44
 8018554:	ed8d 0b02 	vstr	d0, [sp, #8]
 8018558:	ec59 8b10 	vmov	r8, r9, d0
 801855c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801855e:	9106      	str	r1, [sp, #24]
 8018560:	4606      	mov	r6, r0
 8018562:	9208      	str	r2, [sp, #32]
 8018564:	930c      	str	r3, [sp, #48]	; 0x30
 8018566:	b975      	cbnz	r5, 8018586 <_dtoa_r+0x3e>
 8018568:	2010      	movs	r0, #16
 801856a:	f000 fda5 	bl	80190b8 <malloc>
 801856e:	4602      	mov	r2, r0
 8018570:	61f0      	str	r0, [r6, #28]
 8018572:	b920      	cbnz	r0, 801857e <_dtoa_r+0x36>
 8018574:	4ba6      	ldr	r3, [pc, #664]	; (8018810 <_dtoa_r+0x2c8>)
 8018576:	21ef      	movs	r1, #239	; 0xef
 8018578:	48a6      	ldr	r0, [pc, #664]	; (8018814 <_dtoa_r+0x2cc>)
 801857a:	f002 ff31 	bl	801b3e0 <__assert_func>
 801857e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018582:	6005      	str	r5, [r0, #0]
 8018584:	60c5      	str	r5, [r0, #12]
 8018586:	69f3      	ldr	r3, [r6, #28]
 8018588:	6819      	ldr	r1, [r3, #0]
 801858a:	b151      	cbz	r1, 80185a2 <_dtoa_r+0x5a>
 801858c:	685a      	ldr	r2, [r3, #4]
 801858e:	604a      	str	r2, [r1, #4]
 8018590:	2301      	movs	r3, #1
 8018592:	4093      	lsls	r3, r2
 8018594:	608b      	str	r3, [r1, #8]
 8018596:	4630      	mov	r0, r6
 8018598:	f000 fe82 	bl	80192a0 <_Bfree>
 801859c:	69f3      	ldr	r3, [r6, #28]
 801859e:	2200      	movs	r2, #0
 80185a0:	601a      	str	r2, [r3, #0]
 80185a2:	f1b9 0300 	subs.w	r3, r9, #0
 80185a6:	bfbb      	ittet	lt
 80185a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80185ac:	9303      	strlt	r3, [sp, #12]
 80185ae:	2300      	movge	r3, #0
 80185b0:	2201      	movlt	r2, #1
 80185b2:	bfac      	ite	ge
 80185b4:	6023      	strge	r3, [r4, #0]
 80185b6:	6022      	strlt	r2, [r4, #0]
 80185b8:	4b97      	ldr	r3, [pc, #604]	; (8018818 <_dtoa_r+0x2d0>)
 80185ba:	9c03      	ldr	r4, [sp, #12]
 80185bc:	43a3      	bics	r3, r4
 80185be:	d11c      	bne.n	80185fa <_dtoa_r+0xb2>
 80185c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80185c2:	f242 730f 	movw	r3, #9999	; 0x270f
 80185c6:	6013      	str	r3, [r2, #0]
 80185c8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80185cc:	ea53 0308 	orrs.w	r3, r3, r8
 80185d0:	f000 84fb 	beq.w	8018fca <_dtoa_r+0xa82>
 80185d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80185d6:	b963      	cbnz	r3, 80185f2 <_dtoa_r+0xaa>
 80185d8:	4b90      	ldr	r3, [pc, #576]	; (801881c <_dtoa_r+0x2d4>)
 80185da:	e020      	b.n	801861e <_dtoa_r+0xd6>
 80185dc:	4b90      	ldr	r3, [pc, #576]	; (8018820 <_dtoa_r+0x2d8>)
 80185de:	9301      	str	r3, [sp, #4]
 80185e0:	3308      	adds	r3, #8
 80185e2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80185e4:	6013      	str	r3, [r2, #0]
 80185e6:	9801      	ldr	r0, [sp, #4]
 80185e8:	b011      	add	sp, #68	; 0x44
 80185ea:	ecbd 8b02 	vpop	{d8}
 80185ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185f2:	4b8a      	ldr	r3, [pc, #552]	; (801881c <_dtoa_r+0x2d4>)
 80185f4:	9301      	str	r3, [sp, #4]
 80185f6:	3303      	adds	r3, #3
 80185f8:	e7f3      	b.n	80185e2 <_dtoa_r+0x9a>
 80185fa:	ed9d 8b02 	vldr	d8, [sp, #8]
 80185fe:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8018602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018606:	d10c      	bne.n	8018622 <_dtoa_r+0xda>
 8018608:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801860a:	2301      	movs	r3, #1
 801860c:	6013      	str	r3, [r2, #0]
 801860e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018610:	2b00      	cmp	r3, #0
 8018612:	f000 84d7 	beq.w	8018fc4 <_dtoa_r+0xa7c>
 8018616:	4b83      	ldr	r3, [pc, #524]	; (8018824 <_dtoa_r+0x2dc>)
 8018618:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801861a:	6013      	str	r3, [r2, #0]
 801861c:	3b01      	subs	r3, #1
 801861e:	9301      	str	r3, [sp, #4]
 8018620:	e7e1      	b.n	80185e6 <_dtoa_r+0x9e>
 8018622:	aa0e      	add	r2, sp, #56	; 0x38
 8018624:	a90f      	add	r1, sp, #60	; 0x3c
 8018626:	4630      	mov	r0, r6
 8018628:	eeb0 0b48 	vmov.f64	d0, d8
 801862c:	f001 f9d4 	bl	80199d8 <__d2b>
 8018630:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8018634:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018636:	4605      	mov	r5, r0
 8018638:	2b00      	cmp	r3, #0
 801863a:	d046      	beq.n	80186ca <_dtoa_r+0x182>
 801863c:	eeb0 7b48 	vmov.f64	d7, d8
 8018640:	ee18 1a90 	vmov	r1, s17
 8018644:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8018648:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801864c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8018650:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8018654:	2000      	movs	r0, #0
 8018656:	ee07 1a90 	vmov	s15, r1
 801865a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 801865e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80187f8 <_dtoa_r+0x2b0>
 8018662:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018666:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8018800 <_dtoa_r+0x2b8>
 801866a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801866e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8018808 <_dtoa_r+0x2c0>
 8018672:	ee07 3a90 	vmov	s15, r3
 8018676:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801867a:	eeb0 7b46 	vmov.f64	d7, d6
 801867e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8018682:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8018686:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801868a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801868e:	ee16 ba90 	vmov	fp, s13
 8018692:	9009      	str	r0, [sp, #36]	; 0x24
 8018694:	d508      	bpl.n	80186a8 <_dtoa_r+0x160>
 8018696:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801869a:	eeb4 6b47 	vcmp.f64	d6, d7
 801869e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186a2:	bf18      	it	ne
 80186a4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80186a8:	f1bb 0f16 	cmp.w	fp, #22
 80186ac:	d82b      	bhi.n	8018706 <_dtoa_r+0x1be>
 80186ae:	495e      	ldr	r1, [pc, #376]	; (8018828 <_dtoa_r+0x2e0>)
 80186b0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80186b4:	ed91 7b00 	vldr	d7, [r1]
 80186b8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80186bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186c0:	d501      	bpl.n	80186c6 <_dtoa_r+0x17e>
 80186c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80186c6:	2100      	movs	r1, #0
 80186c8:	e01e      	b.n	8018708 <_dtoa_r+0x1c0>
 80186ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80186cc:	4413      	add	r3, r2
 80186ce:	f203 4132 	addw	r1, r3, #1074	; 0x432
 80186d2:	2920      	cmp	r1, #32
 80186d4:	bfc1      	itttt	gt
 80186d6:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 80186da:	408c      	lslgt	r4, r1
 80186dc:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 80186e0:	fa28 f101 	lsrgt.w	r1, r8, r1
 80186e4:	bfd6      	itet	le
 80186e6:	f1c1 0120 	rsble	r1, r1, #32
 80186ea:	4321      	orrgt	r1, r4
 80186ec:	fa08 f101 	lslle.w	r1, r8, r1
 80186f0:	ee07 1a90 	vmov	s15, r1
 80186f4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80186f8:	3b01      	subs	r3, #1
 80186fa:	ee17 1a90 	vmov	r1, s15
 80186fe:	2001      	movs	r0, #1
 8018700:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8018704:	e7a7      	b.n	8018656 <_dtoa_r+0x10e>
 8018706:	2101      	movs	r1, #1
 8018708:	1ad2      	subs	r2, r2, r3
 801870a:	1e53      	subs	r3, r2, #1
 801870c:	9305      	str	r3, [sp, #20]
 801870e:	bf45      	ittet	mi
 8018710:	f1c2 0301 	rsbmi	r3, r2, #1
 8018714:	9304      	strmi	r3, [sp, #16]
 8018716:	2300      	movpl	r3, #0
 8018718:	2300      	movmi	r3, #0
 801871a:	bf4c      	ite	mi
 801871c:	9305      	strmi	r3, [sp, #20]
 801871e:	9304      	strpl	r3, [sp, #16]
 8018720:	f1bb 0f00 	cmp.w	fp, #0
 8018724:	910b      	str	r1, [sp, #44]	; 0x2c
 8018726:	db18      	blt.n	801875a <_dtoa_r+0x212>
 8018728:	9b05      	ldr	r3, [sp, #20]
 801872a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801872e:	445b      	add	r3, fp
 8018730:	9305      	str	r3, [sp, #20]
 8018732:	2300      	movs	r3, #0
 8018734:	9a06      	ldr	r2, [sp, #24]
 8018736:	2a09      	cmp	r2, #9
 8018738:	d848      	bhi.n	80187cc <_dtoa_r+0x284>
 801873a:	2a05      	cmp	r2, #5
 801873c:	bfc4      	itt	gt
 801873e:	3a04      	subgt	r2, #4
 8018740:	9206      	strgt	r2, [sp, #24]
 8018742:	9a06      	ldr	r2, [sp, #24]
 8018744:	f1a2 0202 	sub.w	r2, r2, #2
 8018748:	bfcc      	ite	gt
 801874a:	2400      	movgt	r4, #0
 801874c:	2401      	movle	r4, #1
 801874e:	2a03      	cmp	r2, #3
 8018750:	d847      	bhi.n	80187e2 <_dtoa_r+0x29a>
 8018752:	e8df f002 	tbb	[pc, r2]
 8018756:	2d0b      	.short	0x2d0b
 8018758:	392b      	.short	0x392b
 801875a:	9b04      	ldr	r3, [sp, #16]
 801875c:	2200      	movs	r2, #0
 801875e:	eba3 030b 	sub.w	r3, r3, fp
 8018762:	9304      	str	r3, [sp, #16]
 8018764:	920a      	str	r2, [sp, #40]	; 0x28
 8018766:	f1cb 0300 	rsb	r3, fp, #0
 801876a:	e7e3      	b.n	8018734 <_dtoa_r+0x1ec>
 801876c:	2200      	movs	r2, #0
 801876e:	9207      	str	r2, [sp, #28]
 8018770:	9a08      	ldr	r2, [sp, #32]
 8018772:	2a00      	cmp	r2, #0
 8018774:	dc38      	bgt.n	80187e8 <_dtoa_r+0x2a0>
 8018776:	f04f 0a01 	mov.w	sl, #1
 801877a:	46d1      	mov	r9, sl
 801877c:	4652      	mov	r2, sl
 801877e:	f8cd a020 	str.w	sl, [sp, #32]
 8018782:	69f7      	ldr	r7, [r6, #28]
 8018784:	2100      	movs	r1, #0
 8018786:	2004      	movs	r0, #4
 8018788:	f100 0c14 	add.w	ip, r0, #20
 801878c:	4594      	cmp	ip, r2
 801878e:	d930      	bls.n	80187f2 <_dtoa_r+0x2aa>
 8018790:	6079      	str	r1, [r7, #4]
 8018792:	4630      	mov	r0, r6
 8018794:	930d      	str	r3, [sp, #52]	; 0x34
 8018796:	f000 fd43 	bl	8019220 <_Balloc>
 801879a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801879c:	9001      	str	r0, [sp, #4]
 801879e:	4602      	mov	r2, r0
 80187a0:	2800      	cmp	r0, #0
 80187a2:	d145      	bne.n	8018830 <_dtoa_r+0x2e8>
 80187a4:	4b21      	ldr	r3, [pc, #132]	; (801882c <_dtoa_r+0x2e4>)
 80187a6:	f240 11af 	movw	r1, #431	; 0x1af
 80187aa:	e6e5      	b.n	8018578 <_dtoa_r+0x30>
 80187ac:	2201      	movs	r2, #1
 80187ae:	e7de      	b.n	801876e <_dtoa_r+0x226>
 80187b0:	2200      	movs	r2, #0
 80187b2:	9207      	str	r2, [sp, #28]
 80187b4:	9a08      	ldr	r2, [sp, #32]
 80187b6:	eb0b 0a02 	add.w	sl, fp, r2
 80187ba:	f10a 0901 	add.w	r9, sl, #1
 80187be:	464a      	mov	r2, r9
 80187c0:	2a01      	cmp	r2, #1
 80187c2:	bfb8      	it	lt
 80187c4:	2201      	movlt	r2, #1
 80187c6:	e7dc      	b.n	8018782 <_dtoa_r+0x23a>
 80187c8:	2201      	movs	r2, #1
 80187ca:	e7f2      	b.n	80187b2 <_dtoa_r+0x26a>
 80187cc:	2401      	movs	r4, #1
 80187ce:	2200      	movs	r2, #0
 80187d0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80187d4:	f04f 3aff 	mov.w	sl, #4294967295
 80187d8:	2100      	movs	r1, #0
 80187da:	46d1      	mov	r9, sl
 80187dc:	2212      	movs	r2, #18
 80187de:	9108      	str	r1, [sp, #32]
 80187e0:	e7cf      	b.n	8018782 <_dtoa_r+0x23a>
 80187e2:	2201      	movs	r2, #1
 80187e4:	9207      	str	r2, [sp, #28]
 80187e6:	e7f5      	b.n	80187d4 <_dtoa_r+0x28c>
 80187e8:	f8dd a020 	ldr.w	sl, [sp, #32]
 80187ec:	46d1      	mov	r9, sl
 80187ee:	4652      	mov	r2, sl
 80187f0:	e7c7      	b.n	8018782 <_dtoa_r+0x23a>
 80187f2:	3101      	adds	r1, #1
 80187f4:	0040      	lsls	r0, r0, #1
 80187f6:	e7c7      	b.n	8018788 <_dtoa_r+0x240>
 80187f8:	636f4361 	.word	0x636f4361
 80187fc:	3fd287a7 	.word	0x3fd287a7
 8018800:	8b60c8b3 	.word	0x8b60c8b3
 8018804:	3fc68a28 	.word	0x3fc68a28
 8018808:	509f79fb 	.word	0x509f79fb
 801880c:	3fd34413 	.word	0x3fd34413
 8018810:	0801c498 	.word	0x0801c498
 8018814:	0801c4af 	.word	0x0801c4af
 8018818:	7ff00000 	.word	0x7ff00000
 801881c:	0801c494 	.word	0x0801c494
 8018820:	0801c48b 	.word	0x0801c48b
 8018824:	0801c7f1 	.word	0x0801c7f1
 8018828:	0801c5a0 	.word	0x0801c5a0
 801882c:	0801c507 	.word	0x0801c507
 8018830:	69f2      	ldr	r2, [r6, #28]
 8018832:	9901      	ldr	r1, [sp, #4]
 8018834:	6011      	str	r1, [r2, #0]
 8018836:	f1b9 0f0e 	cmp.w	r9, #14
 801883a:	d86c      	bhi.n	8018916 <_dtoa_r+0x3ce>
 801883c:	2c00      	cmp	r4, #0
 801883e:	d06a      	beq.n	8018916 <_dtoa_r+0x3ce>
 8018840:	f1bb 0f00 	cmp.w	fp, #0
 8018844:	f340 80a0 	ble.w	8018988 <_dtoa_r+0x440>
 8018848:	4ac1      	ldr	r2, [pc, #772]	; (8018b50 <_dtoa_r+0x608>)
 801884a:	f00b 010f 	and.w	r1, fp, #15
 801884e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8018852:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8018856:	ed92 7b00 	vldr	d7, [r2]
 801885a:	ea4f 122b 	mov.w	r2, fp, asr #4
 801885e:	f000 8087 	beq.w	8018970 <_dtoa_r+0x428>
 8018862:	49bc      	ldr	r1, [pc, #752]	; (8018b54 <_dtoa_r+0x60c>)
 8018864:	ed91 6b08 	vldr	d6, [r1, #32]
 8018868:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801886c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8018870:	f002 020f 	and.w	r2, r2, #15
 8018874:	2103      	movs	r1, #3
 8018876:	48b7      	ldr	r0, [pc, #732]	; (8018b54 <_dtoa_r+0x60c>)
 8018878:	2a00      	cmp	r2, #0
 801887a:	d17b      	bne.n	8018974 <_dtoa_r+0x42c>
 801887c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8018880:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8018884:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018888:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801888a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801888e:	2a00      	cmp	r2, #0
 8018890:	f000 80a0 	beq.w	80189d4 <_dtoa_r+0x48c>
 8018894:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8018898:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801889c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188a0:	f140 8098 	bpl.w	80189d4 <_dtoa_r+0x48c>
 80188a4:	f1b9 0f00 	cmp.w	r9, #0
 80188a8:	f000 8094 	beq.w	80189d4 <_dtoa_r+0x48c>
 80188ac:	f1ba 0f00 	cmp.w	sl, #0
 80188b0:	dd2f      	ble.n	8018912 <_dtoa_r+0x3ca>
 80188b2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80188b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80188ba:	ed8d 7b02 	vstr	d7, [sp, #8]
 80188be:	f10b 32ff 	add.w	r2, fp, #4294967295
 80188c2:	3101      	adds	r1, #1
 80188c4:	4654      	mov	r4, sl
 80188c6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80188ca:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80188ce:	ee07 1a90 	vmov	s15, r1
 80188d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80188d6:	eea7 5b06 	vfma.f64	d5, d7, d6
 80188da:	ee15 7a90 	vmov	r7, s11
 80188de:	ec51 0b15 	vmov	r0, r1, d5
 80188e2:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 80188e6:	2c00      	cmp	r4, #0
 80188e8:	d177      	bne.n	80189da <_dtoa_r+0x492>
 80188ea:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80188ee:	ee36 6b47 	vsub.f64	d6, d6, d7
 80188f2:	ec41 0b17 	vmov	d7, r0, r1
 80188f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80188fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188fe:	f300 826a 	bgt.w	8018dd6 <_dtoa_r+0x88e>
 8018902:	eeb1 7b47 	vneg.f64	d7, d7
 8018906:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801890a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801890e:	f100 8260 	bmi.w	8018dd2 <_dtoa_r+0x88a>
 8018912:	ed8d 8b02 	vstr	d8, [sp, #8]
 8018916:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018918:	2a00      	cmp	r2, #0
 801891a:	f2c0 811d 	blt.w	8018b58 <_dtoa_r+0x610>
 801891e:	f1bb 0f0e 	cmp.w	fp, #14
 8018922:	f300 8119 	bgt.w	8018b58 <_dtoa_r+0x610>
 8018926:	4b8a      	ldr	r3, [pc, #552]	; (8018b50 <_dtoa_r+0x608>)
 8018928:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801892c:	ed93 6b00 	vldr	d6, [r3]
 8018930:	9b08      	ldr	r3, [sp, #32]
 8018932:	2b00      	cmp	r3, #0
 8018934:	f280 80b7 	bge.w	8018aa6 <_dtoa_r+0x55e>
 8018938:	f1b9 0f00 	cmp.w	r9, #0
 801893c:	f300 80b3 	bgt.w	8018aa6 <_dtoa_r+0x55e>
 8018940:	f040 8246 	bne.w	8018dd0 <_dtoa_r+0x888>
 8018944:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8018948:	ee26 6b07 	vmul.f64	d6, d6, d7
 801894c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018950:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018958:	464c      	mov	r4, r9
 801895a:	464f      	mov	r7, r9
 801895c:	f280 821c 	bge.w	8018d98 <_dtoa_r+0x850>
 8018960:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018964:	2331      	movs	r3, #49	; 0x31
 8018966:	f808 3b01 	strb.w	r3, [r8], #1
 801896a:	f10b 0b01 	add.w	fp, fp, #1
 801896e:	e218      	b.n	8018da2 <_dtoa_r+0x85a>
 8018970:	2102      	movs	r1, #2
 8018972:	e780      	b.n	8018876 <_dtoa_r+0x32e>
 8018974:	07d4      	lsls	r4, r2, #31
 8018976:	d504      	bpl.n	8018982 <_dtoa_r+0x43a>
 8018978:	ed90 6b00 	vldr	d6, [r0]
 801897c:	3101      	adds	r1, #1
 801897e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018982:	1052      	asrs	r2, r2, #1
 8018984:	3008      	adds	r0, #8
 8018986:	e777      	b.n	8018878 <_dtoa_r+0x330>
 8018988:	d022      	beq.n	80189d0 <_dtoa_r+0x488>
 801898a:	f1cb 0200 	rsb	r2, fp, #0
 801898e:	4970      	ldr	r1, [pc, #448]	; (8018b50 <_dtoa_r+0x608>)
 8018990:	f002 000f 	and.w	r0, r2, #15
 8018994:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8018998:	ed91 7b00 	vldr	d7, [r1]
 801899c:	ee28 7b07 	vmul.f64	d7, d8, d7
 80189a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80189a4:	486b      	ldr	r0, [pc, #428]	; (8018b54 <_dtoa_r+0x60c>)
 80189a6:	1112      	asrs	r2, r2, #4
 80189a8:	2400      	movs	r4, #0
 80189aa:	2102      	movs	r1, #2
 80189ac:	b92a      	cbnz	r2, 80189ba <_dtoa_r+0x472>
 80189ae:	2c00      	cmp	r4, #0
 80189b0:	f43f af6a 	beq.w	8018888 <_dtoa_r+0x340>
 80189b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80189b8:	e766      	b.n	8018888 <_dtoa_r+0x340>
 80189ba:	07d7      	lsls	r7, r2, #31
 80189bc:	d505      	bpl.n	80189ca <_dtoa_r+0x482>
 80189be:	ed90 6b00 	vldr	d6, [r0]
 80189c2:	3101      	adds	r1, #1
 80189c4:	2401      	movs	r4, #1
 80189c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80189ca:	1052      	asrs	r2, r2, #1
 80189cc:	3008      	adds	r0, #8
 80189ce:	e7ed      	b.n	80189ac <_dtoa_r+0x464>
 80189d0:	2102      	movs	r1, #2
 80189d2:	e759      	b.n	8018888 <_dtoa_r+0x340>
 80189d4:	465a      	mov	r2, fp
 80189d6:	464c      	mov	r4, r9
 80189d8:	e775      	b.n	80188c6 <_dtoa_r+0x37e>
 80189da:	ec41 0b17 	vmov	d7, r0, r1
 80189de:	495c      	ldr	r1, [pc, #368]	; (8018b50 <_dtoa_r+0x608>)
 80189e0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80189e4:	ed11 4b02 	vldr	d4, [r1, #-8]
 80189e8:	9901      	ldr	r1, [sp, #4]
 80189ea:	440c      	add	r4, r1
 80189ec:	9907      	ldr	r1, [sp, #28]
 80189ee:	b351      	cbz	r1, 8018a46 <_dtoa_r+0x4fe>
 80189f0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80189f4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80189f8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80189fc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8018a00:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8018a04:	ee35 7b47 	vsub.f64	d7, d5, d7
 8018a08:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8018a0c:	ee14 1a90 	vmov	r1, s9
 8018a10:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8018a14:	3130      	adds	r1, #48	; 0x30
 8018a16:	ee36 6b45 	vsub.f64	d6, d6, d5
 8018a1a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a22:	f808 1b01 	strb.w	r1, [r8], #1
 8018a26:	d439      	bmi.n	8018a9c <_dtoa_r+0x554>
 8018a28:	ee32 5b46 	vsub.f64	d5, d2, d6
 8018a2c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8018a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a34:	d472      	bmi.n	8018b1c <_dtoa_r+0x5d4>
 8018a36:	45a0      	cmp	r8, r4
 8018a38:	f43f af6b 	beq.w	8018912 <_dtoa_r+0x3ca>
 8018a3c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8018a40:	ee26 6b03 	vmul.f64	d6, d6, d3
 8018a44:	e7e0      	b.n	8018a08 <_dtoa_r+0x4c0>
 8018a46:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018a4a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8018a4e:	4620      	mov	r0, r4
 8018a50:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8018a54:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8018a58:	ee14 1a90 	vmov	r1, s9
 8018a5c:	3130      	adds	r1, #48	; 0x30
 8018a5e:	f808 1b01 	strb.w	r1, [r8], #1
 8018a62:	45a0      	cmp	r8, r4
 8018a64:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8018a68:	ee36 6b45 	vsub.f64	d6, d6, d5
 8018a6c:	d118      	bne.n	8018aa0 <_dtoa_r+0x558>
 8018a6e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8018a72:	ee37 4b05 	vadd.f64	d4, d7, d5
 8018a76:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8018a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a7e:	dc4d      	bgt.n	8018b1c <_dtoa_r+0x5d4>
 8018a80:	ee35 5b47 	vsub.f64	d5, d5, d7
 8018a84:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8018a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a8c:	f57f af41 	bpl.w	8018912 <_dtoa_r+0x3ca>
 8018a90:	4680      	mov	r8, r0
 8018a92:	3801      	subs	r0, #1
 8018a94:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8018a98:	2b30      	cmp	r3, #48	; 0x30
 8018a9a:	d0f9      	beq.n	8018a90 <_dtoa_r+0x548>
 8018a9c:	4693      	mov	fp, r2
 8018a9e:	e02a      	b.n	8018af6 <_dtoa_r+0x5ae>
 8018aa0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8018aa4:	e7d6      	b.n	8018a54 <_dtoa_r+0x50c>
 8018aa6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018aaa:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8018aae:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018ab2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8018ab6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8018aba:	ee15 3a10 	vmov	r3, s10
 8018abe:	3330      	adds	r3, #48	; 0x30
 8018ac0:	f808 3b01 	strb.w	r3, [r8], #1
 8018ac4:	9b01      	ldr	r3, [sp, #4]
 8018ac6:	eba8 0303 	sub.w	r3, r8, r3
 8018aca:	4599      	cmp	r9, r3
 8018acc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8018ad0:	eea3 7b46 	vfms.f64	d7, d3, d6
 8018ad4:	d133      	bne.n	8018b3e <_dtoa_r+0x5f6>
 8018ad6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8018ada:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8018ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ae2:	dc1a      	bgt.n	8018b1a <_dtoa_r+0x5d2>
 8018ae4:	eeb4 7b46 	vcmp.f64	d7, d6
 8018ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018aec:	d103      	bne.n	8018af6 <_dtoa_r+0x5ae>
 8018aee:	ee15 3a10 	vmov	r3, s10
 8018af2:	07d9      	lsls	r1, r3, #31
 8018af4:	d411      	bmi.n	8018b1a <_dtoa_r+0x5d2>
 8018af6:	4629      	mov	r1, r5
 8018af8:	4630      	mov	r0, r6
 8018afa:	f000 fbd1 	bl	80192a0 <_Bfree>
 8018afe:	2300      	movs	r3, #0
 8018b00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018b02:	f888 3000 	strb.w	r3, [r8]
 8018b06:	f10b 0301 	add.w	r3, fp, #1
 8018b0a:	6013      	str	r3, [r2, #0]
 8018b0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018b0e:	2b00      	cmp	r3, #0
 8018b10:	f43f ad69 	beq.w	80185e6 <_dtoa_r+0x9e>
 8018b14:	f8c3 8000 	str.w	r8, [r3]
 8018b18:	e565      	b.n	80185e6 <_dtoa_r+0x9e>
 8018b1a:	465a      	mov	r2, fp
 8018b1c:	4643      	mov	r3, r8
 8018b1e:	4698      	mov	r8, r3
 8018b20:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8018b24:	2939      	cmp	r1, #57	; 0x39
 8018b26:	d106      	bne.n	8018b36 <_dtoa_r+0x5ee>
 8018b28:	9901      	ldr	r1, [sp, #4]
 8018b2a:	4299      	cmp	r1, r3
 8018b2c:	d1f7      	bne.n	8018b1e <_dtoa_r+0x5d6>
 8018b2e:	9801      	ldr	r0, [sp, #4]
 8018b30:	2130      	movs	r1, #48	; 0x30
 8018b32:	3201      	adds	r2, #1
 8018b34:	7001      	strb	r1, [r0, #0]
 8018b36:	7819      	ldrb	r1, [r3, #0]
 8018b38:	3101      	adds	r1, #1
 8018b3a:	7019      	strb	r1, [r3, #0]
 8018b3c:	e7ae      	b.n	8018a9c <_dtoa_r+0x554>
 8018b3e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8018b42:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b4a:	d1b2      	bne.n	8018ab2 <_dtoa_r+0x56a>
 8018b4c:	e7d3      	b.n	8018af6 <_dtoa_r+0x5ae>
 8018b4e:	bf00      	nop
 8018b50:	0801c5a0 	.word	0x0801c5a0
 8018b54:	0801c578 	.word	0x0801c578
 8018b58:	9907      	ldr	r1, [sp, #28]
 8018b5a:	2900      	cmp	r1, #0
 8018b5c:	f000 80d0 	beq.w	8018d00 <_dtoa_r+0x7b8>
 8018b60:	9906      	ldr	r1, [sp, #24]
 8018b62:	2901      	cmp	r1, #1
 8018b64:	f300 80b4 	bgt.w	8018cd0 <_dtoa_r+0x788>
 8018b68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018b6a:	2900      	cmp	r1, #0
 8018b6c:	f000 80ac 	beq.w	8018cc8 <_dtoa_r+0x780>
 8018b70:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8018b74:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8018b78:	461c      	mov	r4, r3
 8018b7a:	9309      	str	r3, [sp, #36]	; 0x24
 8018b7c:	9b04      	ldr	r3, [sp, #16]
 8018b7e:	4413      	add	r3, r2
 8018b80:	9304      	str	r3, [sp, #16]
 8018b82:	9b05      	ldr	r3, [sp, #20]
 8018b84:	2101      	movs	r1, #1
 8018b86:	4413      	add	r3, r2
 8018b88:	4630      	mov	r0, r6
 8018b8a:	9305      	str	r3, [sp, #20]
 8018b8c:	f000 fc88 	bl	80194a0 <__i2b>
 8018b90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b92:	4607      	mov	r7, r0
 8018b94:	f1b8 0f00 	cmp.w	r8, #0
 8018b98:	d00d      	beq.n	8018bb6 <_dtoa_r+0x66e>
 8018b9a:	9a05      	ldr	r2, [sp, #20]
 8018b9c:	2a00      	cmp	r2, #0
 8018b9e:	dd0a      	ble.n	8018bb6 <_dtoa_r+0x66e>
 8018ba0:	4542      	cmp	r2, r8
 8018ba2:	9904      	ldr	r1, [sp, #16]
 8018ba4:	bfa8      	it	ge
 8018ba6:	4642      	movge	r2, r8
 8018ba8:	1a89      	subs	r1, r1, r2
 8018baa:	9104      	str	r1, [sp, #16]
 8018bac:	9905      	ldr	r1, [sp, #20]
 8018bae:	eba8 0802 	sub.w	r8, r8, r2
 8018bb2:	1a8a      	subs	r2, r1, r2
 8018bb4:	9205      	str	r2, [sp, #20]
 8018bb6:	b303      	cbz	r3, 8018bfa <_dtoa_r+0x6b2>
 8018bb8:	9a07      	ldr	r2, [sp, #28]
 8018bba:	2a00      	cmp	r2, #0
 8018bbc:	f000 80a5 	beq.w	8018d0a <_dtoa_r+0x7c2>
 8018bc0:	2c00      	cmp	r4, #0
 8018bc2:	dd13      	ble.n	8018bec <_dtoa_r+0x6a4>
 8018bc4:	4639      	mov	r1, r7
 8018bc6:	4622      	mov	r2, r4
 8018bc8:	4630      	mov	r0, r6
 8018bca:	930d      	str	r3, [sp, #52]	; 0x34
 8018bcc:	f000 fd28 	bl	8019620 <__pow5mult>
 8018bd0:	462a      	mov	r2, r5
 8018bd2:	4601      	mov	r1, r0
 8018bd4:	4607      	mov	r7, r0
 8018bd6:	4630      	mov	r0, r6
 8018bd8:	f000 fc78 	bl	80194cc <__multiply>
 8018bdc:	4629      	mov	r1, r5
 8018bde:	9009      	str	r0, [sp, #36]	; 0x24
 8018be0:	4630      	mov	r0, r6
 8018be2:	f000 fb5d 	bl	80192a0 <_Bfree>
 8018be6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018be8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018bea:	4615      	mov	r5, r2
 8018bec:	1b1a      	subs	r2, r3, r4
 8018bee:	d004      	beq.n	8018bfa <_dtoa_r+0x6b2>
 8018bf0:	4629      	mov	r1, r5
 8018bf2:	4630      	mov	r0, r6
 8018bf4:	f000 fd14 	bl	8019620 <__pow5mult>
 8018bf8:	4605      	mov	r5, r0
 8018bfa:	2101      	movs	r1, #1
 8018bfc:	4630      	mov	r0, r6
 8018bfe:	f000 fc4f 	bl	80194a0 <__i2b>
 8018c02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018c04:	2b00      	cmp	r3, #0
 8018c06:	4604      	mov	r4, r0
 8018c08:	f340 8081 	ble.w	8018d0e <_dtoa_r+0x7c6>
 8018c0c:	461a      	mov	r2, r3
 8018c0e:	4601      	mov	r1, r0
 8018c10:	4630      	mov	r0, r6
 8018c12:	f000 fd05 	bl	8019620 <__pow5mult>
 8018c16:	9b06      	ldr	r3, [sp, #24]
 8018c18:	2b01      	cmp	r3, #1
 8018c1a:	4604      	mov	r4, r0
 8018c1c:	dd7a      	ble.n	8018d14 <_dtoa_r+0x7cc>
 8018c1e:	2300      	movs	r3, #0
 8018c20:	9309      	str	r3, [sp, #36]	; 0x24
 8018c22:	6922      	ldr	r2, [r4, #16]
 8018c24:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8018c28:	6910      	ldr	r0, [r2, #16]
 8018c2a:	f000 fbeb 	bl	8019404 <__hi0bits>
 8018c2e:	f1c0 0020 	rsb	r0, r0, #32
 8018c32:	9b05      	ldr	r3, [sp, #20]
 8018c34:	4418      	add	r0, r3
 8018c36:	f010 001f 	ands.w	r0, r0, #31
 8018c3a:	f000 8093 	beq.w	8018d64 <_dtoa_r+0x81c>
 8018c3e:	f1c0 0220 	rsb	r2, r0, #32
 8018c42:	2a04      	cmp	r2, #4
 8018c44:	f340 8085 	ble.w	8018d52 <_dtoa_r+0x80a>
 8018c48:	9b04      	ldr	r3, [sp, #16]
 8018c4a:	f1c0 001c 	rsb	r0, r0, #28
 8018c4e:	4403      	add	r3, r0
 8018c50:	9304      	str	r3, [sp, #16]
 8018c52:	9b05      	ldr	r3, [sp, #20]
 8018c54:	4480      	add	r8, r0
 8018c56:	4403      	add	r3, r0
 8018c58:	9305      	str	r3, [sp, #20]
 8018c5a:	9b04      	ldr	r3, [sp, #16]
 8018c5c:	2b00      	cmp	r3, #0
 8018c5e:	dd05      	ble.n	8018c6c <_dtoa_r+0x724>
 8018c60:	4629      	mov	r1, r5
 8018c62:	461a      	mov	r2, r3
 8018c64:	4630      	mov	r0, r6
 8018c66:	f000 fd35 	bl	80196d4 <__lshift>
 8018c6a:	4605      	mov	r5, r0
 8018c6c:	9b05      	ldr	r3, [sp, #20]
 8018c6e:	2b00      	cmp	r3, #0
 8018c70:	dd05      	ble.n	8018c7e <_dtoa_r+0x736>
 8018c72:	4621      	mov	r1, r4
 8018c74:	461a      	mov	r2, r3
 8018c76:	4630      	mov	r0, r6
 8018c78:	f000 fd2c 	bl	80196d4 <__lshift>
 8018c7c:	4604      	mov	r4, r0
 8018c7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018c80:	2b00      	cmp	r3, #0
 8018c82:	d071      	beq.n	8018d68 <_dtoa_r+0x820>
 8018c84:	4621      	mov	r1, r4
 8018c86:	4628      	mov	r0, r5
 8018c88:	f000 fd90 	bl	80197ac <__mcmp>
 8018c8c:	2800      	cmp	r0, #0
 8018c8e:	da6b      	bge.n	8018d68 <_dtoa_r+0x820>
 8018c90:	2300      	movs	r3, #0
 8018c92:	4629      	mov	r1, r5
 8018c94:	220a      	movs	r2, #10
 8018c96:	4630      	mov	r0, r6
 8018c98:	f000 fb24 	bl	80192e4 <__multadd>
 8018c9c:	9b07      	ldr	r3, [sp, #28]
 8018c9e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018ca2:	4605      	mov	r5, r0
 8018ca4:	2b00      	cmp	r3, #0
 8018ca6:	f000 8197 	beq.w	8018fd8 <_dtoa_r+0xa90>
 8018caa:	4639      	mov	r1, r7
 8018cac:	2300      	movs	r3, #0
 8018cae:	220a      	movs	r2, #10
 8018cb0:	4630      	mov	r0, r6
 8018cb2:	f000 fb17 	bl	80192e4 <__multadd>
 8018cb6:	f1ba 0f00 	cmp.w	sl, #0
 8018cba:	4607      	mov	r7, r0
 8018cbc:	f300 8093 	bgt.w	8018de6 <_dtoa_r+0x89e>
 8018cc0:	9b06      	ldr	r3, [sp, #24]
 8018cc2:	2b02      	cmp	r3, #2
 8018cc4:	dc57      	bgt.n	8018d76 <_dtoa_r+0x82e>
 8018cc6:	e08e      	b.n	8018de6 <_dtoa_r+0x89e>
 8018cc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018cca:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8018cce:	e751      	b.n	8018b74 <_dtoa_r+0x62c>
 8018cd0:	f109 34ff 	add.w	r4, r9, #4294967295
 8018cd4:	42a3      	cmp	r3, r4
 8018cd6:	bfbf      	itttt	lt
 8018cd8:	1ae2      	sublt	r2, r4, r3
 8018cda:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8018cdc:	189b      	addlt	r3, r3, r2
 8018cde:	930a      	strlt	r3, [sp, #40]	; 0x28
 8018ce0:	bfae      	itee	ge
 8018ce2:	1b1c      	subge	r4, r3, r4
 8018ce4:	4623      	movlt	r3, r4
 8018ce6:	2400      	movlt	r4, #0
 8018ce8:	f1b9 0f00 	cmp.w	r9, #0
 8018cec:	bfb5      	itete	lt
 8018cee:	9a04      	ldrlt	r2, [sp, #16]
 8018cf0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8018cf4:	eba2 0809 	sublt.w	r8, r2, r9
 8018cf8:	464a      	movge	r2, r9
 8018cfa:	bfb8      	it	lt
 8018cfc:	2200      	movlt	r2, #0
 8018cfe:	e73c      	b.n	8018b7a <_dtoa_r+0x632>
 8018d00:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8018d04:	9f07      	ldr	r7, [sp, #28]
 8018d06:	461c      	mov	r4, r3
 8018d08:	e744      	b.n	8018b94 <_dtoa_r+0x64c>
 8018d0a:	461a      	mov	r2, r3
 8018d0c:	e770      	b.n	8018bf0 <_dtoa_r+0x6a8>
 8018d0e:	9b06      	ldr	r3, [sp, #24]
 8018d10:	2b01      	cmp	r3, #1
 8018d12:	dc18      	bgt.n	8018d46 <_dtoa_r+0x7fe>
 8018d14:	9b02      	ldr	r3, [sp, #8]
 8018d16:	b9b3      	cbnz	r3, 8018d46 <_dtoa_r+0x7fe>
 8018d18:	9b03      	ldr	r3, [sp, #12]
 8018d1a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8018d1e:	b9a2      	cbnz	r2, 8018d4a <_dtoa_r+0x802>
 8018d20:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8018d24:	0d12      	lsrs	r2, r2, #20
 8018d26:	0512      	lsls	r2, r2, #20
 8018d28:	b18a      	cbz	r2, 8018d4e <_dtoa_r+0x806>
 8018d2a:	9b04      	ldr	r3, [sp, #16]
 8018d2c:	3301      	adds	r3, #1
 8018d2e:	9304      	str	r3, [sp, #16]
 8018d30:	9b05      	ldr	r3, [sp, #20]
 8018d32:	3301      	adds	r3, #1
 8018d34:	9305      	str	r3, [sp, #20]
 8018d36:	2301      	movs	r3, #1
 8018d38:	9309      	str	r3, [sp, #36]	; 0x24
 8018d3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	f47f af70 	bne.w	8018c22 <_dtoa_r+0x6da>
 8018d42:	2001      	movs	r0, #1
 8018d44:	e775      	b.n	8018c32 <_dtoa_r+0x6ea>
 8018d46:	2300      	movs	r3, #0
 8018d48:	e7f6      	b.n	8018d38 <_dtoa_r+0x7f0>
 8018d4a:	9b02      	ldr	r3, [sp, #8]
 8018d4c:	e7f4      	b.n	8018d38 <_dtoa_r+0x7f0>
 8018d4e:	9209      	str	r2, [sp, #36]	; 0x24
 8018d50:	e7f3      	b.n	8018d3a <_dtoa_r+0x7f2>
 8018d52:	d082      	beq.n	8018c5a <_dtoa_r+0x712>
 8018d54:	9b04      	ldr	r3, [sp, #16]
 8018d56:	321c      	adds	r2, #28
 8018d58:	4413      	add	r3, r2
 8018d5a:	9304      	str	r3, [sp, #16]
 8018d5c:	9b05      	ldr	r3, [sp, #20]
 8018d5e:	4490      	add	r8, r2
 8018d60:	4413      	add	r3, r2
 8018d62:	e779      	b.n	8018c58 <_dtoa_r+0x710>
 8018d64:	4602      	mov	r2, r0
 8018d66:	e7f5      	b.n	8018d54 <_dtoa_r+0x80c>
 8018d68:	f1b9 0f00 	cmp.w	r9, #0
 8018d6c:	dc36      	bgt.n	8018ddc <_dtoa_r+0x894>
 8018d6e:	9b06      	ldr	r3, [sp, #24]
 8018d70:	2b02      	cmp	r3, #2
 8018d72:	dd33      	ble.n	8018ddc <_dtoa_r+0x894>
 8018d74:	46ca      	mov	sl, r9
 8018d76:	f1ba 0f00 	cmp.w	sl, #0
 8018d7a:	d10d      	bne.n	8018d98 <_dtoa_r+0x850>
 8018d7c:	4621      	mov	r1, r4
 8018d7e:	4653      	mov	r3, sl
 8018d80:	2205      	movs	r2, #5
 8018d82:	4630      	mov	r0, r6
 8018d84:	f000 faae 	bl	80192e4 <__multadd>
 8018d88:	4601      	mov	r1, r0
 8018d8a:	4604      	mov	r4, r0
 8018d8c:	4628      	mov	r0, r5
 8018d8e:	f000 fd0d 	bl	80197ac <__mcmp>
 8018d92:	2800      	cmp	r0, #0
 8018d94:	f73f ade4 	bgt.w	8018960 <_dtoa_r+0x418>
 8018d98:	9b08      	ldr	r3, [sp, #32]
 8018d9a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018d9e:	ea6f 0b03 	mvn.w	fp, r3
 8018da2:	f04f 0900 	mov.w	r9, #0
 8018da6:	4621      	mov	r1, r4
 8018da8:	4630      	mov	r0, r6
 8018daa:	f000 fa79 	bl	80192a0 <_Bfree>
 8018dae:	2f00      	cmp	r7, #0
 8018db0:	f43f aea1 	beq.w	8018af6 <_dtoa_r+0x5ae>
 8018db4:	f1b9 0f00 	cmp.w	r9, #0
 8018db8:	d005      	beq.n	8018dc6 <_dtoa_r+0x87e>
 8018dba:	45b9      	cmp	r9, r7
 8018dbc:	d003      	beq.n	8018dc6 <_dtoa_r+0x87e>
 8018dbe:	4649      	mov	r1, r9
 8018dc0:	4630      	mov	r0, r6
 8018dc2:	f000 fa6d 	bl	80192a0 <_Bfree>
 8018dc6:	4639      	mov	r1, r7
 8018dc8:	4630      	mov	r0, r6
 8018dca:	f000 fa69 	bl	80192a0 <_Bfree>
 8018dce:	e692      	b.n	8018af6 <_dtoa_r+0x5ae>
 8018dd0:	2400      	movs	r4, #0
 8018dd2:	4627      	mov	r7, r4
 8018dd4:	e7e0      	b.n	8018d98 <_dtoa_r+0x850>
 8018dd6:	4693      	mov	fp, r2
 8018dd8:	4627      	mov	r7, r4
 8018dda:	e5c1      	b.n	8018960 <_dtoa_r+0x418>
 8018ddc:	9b07      	ldr	r3, [sp, #28]
 8018dde:	46ca      	mov	sl, r9
 8018de0:	2b00      	cmp	r3, #0
 8018de2:	f000 8100 	beq.w	8018fe6 <_dtoa_r+0xa9e>
 8018de6:	f1b8 0f00 	cmp.w	r8, #0
 8018dea:	dd05      	ble.n	8018df8 <_dtoa_r+0x8b0>
 8018dec:	4639      	mov	r1, r7
 8018dee:	4642      	mov	r2, r8
 8018df0:	4630      	mov	r0, r6
 8018df2:	f000 fc6f 	bl	80196d4 <__lshift>
 8018df6:	4607      	mov	r7, r0
 8018df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	d05d      	beq.n	8018eba <_dtoa_r+0x972>
 8018dfe:	6879      	ldr	r1, [r7, #4]
 8018e00:	4630      	mov	r0, r6
 8018e02:	f000 fa0d 	bl	8019220 <_Balloc>
 8018e06:	4680      	mov	r8, r0
 8018e08:	b928      	cbnz	r0, 8018e16 <_dtoa_r+0x8ce>
 8018e0a:	4b82      	ldr	r3, [pc, #520]	; (8019014 <_dtoa_r+0xacc>)
 8018e0c:	4602      	mov	r2, r0
 8018e0e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8018e12:	f7ff bbb1 	b.w	8018578 <_dtoa_r+0x30>
 8018e16:	693a      	ldr	r2, [r7, #16]
 8018e18:	3202      	adds	r2, #2
 8018e1a:	0092      	lsls	r2, r2, #2
 8018e1c:	f107 010c 	add.w	r1, r7, #12
 8018e20:	300c      	adds	r0, #12
 8018e22:	f7ff faf2 	bl	801840a <memcpy>
 8018e26:	2201      	movs	r2, #1
 8018e28:	4641      	mov	r1, r8
 8018e2a:	4630      	mov	r0, r6
 8018e2c:	f000 fc52 	bl	80196d4 <__lshift>
 8018e30:	9b01      	ldr	r3, [sp, #4]
 8018e32:	3301      	adds	r3, #1
 8018e34:	9304      	str	r3, [sp, #16]
 8018e36:	9b01      	ldr	r3, [sp, #4]
 8018e38:	4453      	add	r3, sl
 8018e3a:	9308      	str	r3, [sp, #32]
 8018e3c:	9b02      	ldr	r3, [sp, #8]
 8018e3e:	f003 0301 	and.w	r3, r3, #1
 8018e42:	46b9      	mov	r9, r7
 8018e44:	9307      	str	r3, [sp, #28]
 8018e46:	4607      	mov	r7, r0
 8018e48:	9b04      	ldr	r3, [sp, #16]
 8018e4a:	4621      	mov	r1, r4
 8018e4c:	3b01      	subs	r3, #1
 8018e4e:	4628      	mov	r0, r5
 8018e50:	9302      	str	r3, [sp, #8]
 8018e52:	f7ff faef 	bl	8018434 <quorem>
 8018e56:	4603      	mov	r3, r0
 8018e58:	3330      	adds	r3, #48	; 0x30
 8018e5a:	9005      	str	r0, [sp, #20]
 8018e5c:	4649      	mov	r1, r9
 8018e5e:	4628      	mov	r0, r5
 8018e60:	9309      	str	r3, [sp, #36]	; 0x24
 8018e62:	f000 fca3 	bl	80197ac <__mcmp>
 8018e66:	463a      	mov	r2, r7
 8018e68:	4682      	mov	sl, r0
 8018e6a:	4621      	mov	r1, r4
 8018e6c:	4630      	mov	r0, r6
 8018e6e:	f000 fcb9 	bl	80197e4 <__mdiff>
 8018e72:	68c2      	ldr	r2, [r0, #12]
 8018e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018e76:	4680      	mov	r8, r0
 8018e78:	bb0a      	cbnz	r2, 8018ebe <_dtoa_r+0x976>
 8018e7a:	4601      	mov	r1, r0
 8018e7c:	4628      	mov	r0, r5
 8018e7e:	f000 fc95 	bl	80197ac <__mcmp>
 8018e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018e84:	4602      	mov	r2, r0
 8018e86:	4641      	mov	r1, r8
 8018e88:	4630      	mov	r0, r6
 8018e8a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8018e8e:	f000 fa07 	bl	80192a0 <_Bfree>
 8018e92:	9b06      	ldr	r3, [sp, #24]
 8018e94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018e96:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8018e9a:	ea43 0102 	orr.w	r1, r3, r2
 8018e9e:	9b07      	ldr	r3, [sp, #28]
 8018ea0:	4319      	orrs	r1, r3
 8018ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ea4:	d10d      	bne.n	8018ec2 <_dtoa_r+0x97a>
 8018ea6:	2b39      	cmp	r3, #57	; 0x39
 8018ea8:	d029      	beq.n	8018efe <_dtoa_r+0x9b6>
 8018eaa:	f1ba 0f00 	cmp.w	sl, #0
 8018eae:	dd01      	ble.n	8018eb4 <_dtoa_r+0x96c>
 8018eb0:	9b05      	ldr	r3, [sp, #20]
 8018eb2:	3331      	adds	r3, #49	; 0x31
 8018eb4:	9a02      	ldr	r2, [sp, #8]
 8018eb6:	7013      	strb	r3, [r2, #0]
 8018eb8:	e775      	b.n	8018da6 <_dtoa_r+0x85e>
 8018eba:	4638      	mov	r0, r7
 8018ebc:	e7b8      	b.n	8018e30 <_dtoa_r+0x8e8>
 8018ebe:	2201      	movs	r2, #1
 8018ec0:	e7e1      	b.n	8018e86 <_dtoa_r+0x93e>
 8018ec2:	f1ba 0f00 	cmp.w	sl, #0
 8018ec6:	db06      	blt.n	8018ed6 <_dtoa_r+0x98e>
 8018ec8:	9906      	ldr	r1, [sp, #24]
 8018eca:	ea41 0a0a 	orr.w	sl, r1, sl
 8018ece:	9907      	ldr	r1, [sp, #28]
 8018ed0:	ea5a 0a01 	orrs.w	sl, sl, r1
 8018ed4:	d120      	bne.n	8018f18 <_dtoa_r+0x9d0>
 8018ed6:	2a00      	cmp	r2, #0
 8018ed8:	ddec      	ble.n	8018eb4 <_dtoa_r+0x96c>
 8018eda:	4629      	mov	r1, r5
 8018edc:	2201      	movs	r2, #1
 8018ede:	4630      	mov	r0, r6
 8018ee0:	9304      	str	r3, [sp, #16]
 8018ee2:	f000 fbf7 	bl	80196d4 <__lshift>
 8018ee6:	4621      	mov	r1, r4
 8018ee8:	4605      	mov	r5, r0
 8018eea:	f000 fc5f 	bl	80197ac <__mcmp>
 8018eee:	2800      	cmp	r0, #0
 8018ef0:	9b04      	ldr	r3, [sp, #16]
 8018ef2:	dc02      	bgt.n	8018efa <_dtoa_r+0x9b2>
 8018ef4:	d1de      	bne.n	8018eb4 <_dtoa_r+0x96c>
 8018ef6:	07da      	lsls	r2, r3, #31
 8018ef8:	d5dc      	bpl.n	8018eb4 <_dtoa_r+0x96c>
 8018efa:	2b39      	cmp	r3, #57	; 0x39
 8018efc:	d1d8      	bne.n	8018eb0 <_dtoa_r+0x968>
 8018efe:	9a02      	ldr	r2, [sp, #8]
 8018f00:	2339      	movs	r3, #57	; 0x39
 8018f02:	7013      	strb	r3, [r2, #0]
 8018f04:	4643      	mov	r3, r8
 8018f06:	4698      	mov	r8, r3
 8018f08:	3b01      	subs	r3, #1
 8018f0a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8018f0e:	2a39      	cmp	r2, #57	; 0x39
 8018f10:	d051      	beq.n	8018fb6 <_dtoa_r+0xa6e>
 8018f12:	3201      	adds	r2, #1
 8018f14:	701a      	strb	r2, [r3, #0]
 8018f16:	e746      	b.n	8018da6 <_dtoa_r+0x85e>
 8018f18:	2a00      	cmp	r2, #0
 8018f1a:	dd03      	ble.n	8018f24 <_dtoa_r+0x9dc>
 8018f1c:	2b39      	cmp	r3, #57	; 0x39
 8018f1e:	d0ee      	beq.n	8018efe <_dtoa_r+0x9b6>
 8018f20:	3301      	adds	r3, #1
 8018f22:	e7c7      	b.n	8018eb4 <_dtoa_r+0x96c>
 8018f24:	9a04      	ldr	r2, [sp, #16]
 8018f26:	9908      	ldr	r1, [sp, #32]
 8018f28:	f802 3c01 	strb.w	r3, [r2, #-1]
 8018f2c:	428a      	cmp	r2, r1
 8018f2e:	d02b      	beq.n	8018f88 <_dtoa_r+0xa40>
 8018f30:	4629      	mov	r1, r5
 8018f32:	2300      	movs	r3, #0
 8018f34:	220a      	movs	r2, #10
 8018f36:	4630      	mov	r0, r6
 8018f38:	f000 f9d4 	bl	80192e4 <__multadd>
 8018f3c:	45b9      	cmp	r9, r7
 8018f3e:	4605      	mov	r5, r0
 8018f40:	f04f 0300 	mov.w	r3, #0
 8018f44:	f04f 020a 	mov.w	r2, #10
 8018f48:	4649      	mov	r1, r9
 8018f4a:	4630      	mov	r0, r6
 8018f4c:	d107      	bne.n	8018f5e <_dtoa_r+0xa16>
 8018f4e:	f000 f9c9 	bl	80192e4 <__multadd>
 8018f52:	4681      	mov	r9, r0
 8018f54:	4607      	mov	r7, r0
 8018f56:	9b04      	ldr	r3, [sp, #16]
 8018f58:	3301      	adds	r3, #1
 8018f5a:	9304      	str	r3, [sp, #16]
 8018f5c:	e774      	b.n	8018e48 <_dtoa_r+0x900>
 8018f5e:	f000 f9c1 	bl	80192e4 <__multadd>
 8018f62:	4639      	mov	r1, r7
 8018f64:	4681      	mov	r9, r0
 8018f66:	2300      	movs	r3, #0
 8018f68:	220a      	movs	r2, #10
 8018f6a:	4630      	mov	r0, r6
 8018f6c:	f000 f9ba 	bl	80192e4 <__multadd>
 8018f70:	4607      	mov	r7, r0
 8018f72:	e7f0      	b.n	8018f56 <_dtoa_r+0xa0e>
 8018f74:	f1ba 0f00 	cmp.w	sl, #0
 8018f78:	9a01      	ldr	r2, [sp, #4]
 8018f7a:	bfcc      	ite	gt
 8018f7c:	46d0      	movgt	r8, sl
 8018f7e:	f04f 0801 	movle.w	r8, #1
 8018f82:	4490      	add	r8, r2
 8018f84:	f04f 0900 	mov.w	r9, #0
 8018f88:	4629      	mov	r1, r5
 8018f8a:	2201      	movs	r2, #1
 8018f8c:	4630      	mov	r0, r6
 8018f8e:	9302      	str	r3, [sp, #8]
 8018f90:	f000 fba0 	bl	80196d4 <__lshift>
 8018f94:	4621      	mov	r1, r4
 8018f96:	4605      	mov	r5, r0
 8018f98:	f000 fc08 	bl	80197ac <__mcmp>
 8018f9c:	2800      	cmp	r0, #0
 8018f9e:	dcb1      	bgt.n	8018f04 <_dtoa_r+0x9bc>
 8018fa0:	d102      	bne.n	8018fa8 <_dtoa_r+0xa60>
 8018fa2:	9b02      	ldr	r3, [sp, #8]
 8018fa4:	07db      	lsls	r3, r3, #31
 8018fa6:	d4ad      	bmi.n	8018f04 <_dtoa_r+0x9bc>
 8018fa8:	4643      	mov	r3, r8
 8018faa:	4698      	mov	r8, r3
 8018fac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018fb0:	2a30      	cmp	r2, #48	; 0x30
 8018fb2:	d0fa      	beq.n	8018faa <_dtoa_r+0xa62>
 8018fb4:	e6f7      	b.n	8018da6 <_dtoa_r+0x85e>
 8018fb6:	9a01      	ldr	r2, [sp, #4]
 8018fb8:	429a      	cmp	r2, r3
 8018fba:	d1a4      	bne.n	8018f06 <_dtoa_r+0x9be>
 8018fbc:	f10b 0b01 	add.w	fp, fp, #1
 8018fc0:	2331      	movs	r3, #49	; 0x31
 8018fc2:	e778      	b.n	8018eb6 <_dtoa_r+0x96e>
 8018fc4:	4b14      	ldr	r3, [pc, #80]	; (8019018 <_dtoa_r+0xad0>)
 8018fc6:	f7ff bb2a 	b.w	801861e <_dtoa_r+0xd6>
 8018fca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018fcc:	2b00      	cmp	r3, #0
 8018fce:	f47f ab05 	bne.w	80185dc <_dtoa_r+0x94>
 8018fd2:	4b12      	ldr	r3, [pc, #72]	; (801901c <_dtoa_r+0xad4>)
 8018fd4:	f7ff bb23 	b.w	801861e <_dtoa_r+0xd6>
 8018fd8:	f1ba 0f00 	cmp.w	sl, #0
 8018fdc:	dc03      	bgt.n	8018fe6 <_dtoa_r+0xa9e>
 8018fde:	9b06      	ldr	r3, [sp, #24]
 8018fe0:	2b02      	cmp	r3, #2
 8018fe2:	f73f aec8 	bgt.w	8018d76 <_dtoa_r+0x82e>
 8018fe6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018fea:	4621      	mov	r1, r4
 8018fec:	4628      	mov	r0, r5
 8018fee:	f7ff fa21 	bl	8018434 <quorem>
 8018ff2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8018ff6:	f808 3b01 	strb.w	r3, [r8], #1
 8018ffa:	9a01      	ldr	r2, [sp, #4]
 8018ffc:	eba8 0202 	sub.w	r2, r8, r2
 8019000:	4592      	cmp	sl, r2
 8019002:	ddb7      	ble.n	8018f74 <_dtoa_r+0xa2c>
 8019004:	4629      	mov	r1, r5
 8019006:	2300      	movs	r3, #0
 8019008:	220a      	movs	r2, #10
 801900a:	4630      	mov	r0, r6
 801900c:	f000 f96a 	bl	80192e4 <__multadd>
 8019010:	4605      	mov	r5, r0
 8019012:	e7ea      	b.n	8018fea <_dtoa_r+0xaa2>
 8019014:	0801c507 	.word	0x0801c507
 8019018:	0801c7f0 	.word	0x0801c7f0
 801901c:	0801c48b 	.word	0x0801c48b

08019020 <_free_r>:
 8019020:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019022:	2900      	cmp	r1, #0
 8019024:	d044      	beq.n	80190b0 <_free_r+0x90>
 8019026:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801902a:	9001      	str	r0, [sp, #4]
 801902c:	2b00      	cmp	r3, #0
 801902e:	f1a1 0404 	sub.w	r4, r1, #4
 8019032:	bfb8      	it	lt
 8019034:	18e4      	addlt	r4, r4, r3
 8019036:	f000 f8e7 	bl	8019208 <__malloc_lock>
 801903a:	4a1e      	ldr	r2, [pc, #120]	; (80190b4 <_free_r+0x94>)
 801903c:	9801      	ldr	r0, [sp, #4]
 801903e:	6813      	ldr	r3, [r2, #0]
 8019040:	b933      	cbnz	r3, 8019050 <_free_r+0x30>
 8019042:	6063      	str	r3, [r4, #4]
 8019044:	6014      	str	r4, [r2, #0]
 8019046:	b003      	add	sp, #12
 8019048:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801904c:	f000 b8e2 	b.w	8019214 <__malloc_unlock>
 8019050:	42a3      	cmp	r3, r4
 8019052:	d908      	bls.n	8019066 <_free_r+0x46>
 8019054:	6825      	ldr	r5, [r4, #0]
 8019056:	1961      	adds	r1, r4, r5
 8019058:	428b      	cmp	r3, r1
 801905a:	bf01      	itttt	eq
 801905c:	6819      	ldreq	r1, [r3, #0]
 801905e:	685b      	ldreq	r3, [r3, #4]
 8019060:	1949      	addeq	r1, r1, r5
 8019062:	6021      	streq	r1, [r4, #0]
 8019064:	e7ed      	b.n	8019042 <_free_r+0x22>
 8019066:	461a      	mov	r2, r3
 8019068:	685b      	ldr	r3, [r3, #4]
 801906a:	b10b      	cbz	r3, 8019070 <_free_r+0x50>
 801906c:	42a3      	cmp	r3, r4
 801906e:	d9fa      	bls.n	8019066 <_free_r+0x46>
 8019070:	6811      	ldr	r1, [r2, #0]
 8019072:	1855      	adds	r5, r2, r1
 8019074:	42a5      	cmp	r5, r4
 8019076:	d10b      	bne.n	8019090 <_free_r+0x70>
 8019078:	6824      	ldr	r4, [r4, #0]
 801907a:	4421      	add	r1, r4
 801907c:	1854      	adds	r4, r2, r1
 801907e:	42a3      	cmp	r3, r4
 8019080:	6011      	str	r1, [r2, #0]
 8019082:	d1e0      	bne.n	8019046 <_free_r+0x26>
 8019084:	681c      	ldr	r4, [r3, #0]
 8019086:	685b      	ldr	r3, [r3, #4]
 8019088:	6053      	str	r3, [r2, #4]
 801908a:	440c      	add	r4, r1
 801908c:	6014      	str	r4, [r2, #0]
 801908e:	e7da      	b.n	8019046 <_free_r+0x26>
 8019090:	d902      	bls.n	8019098 <_free_r+0x78>
 8019092:	230c      	movs	r3, #12
 8019094:	6003      	str	r3, [r0, #0]
 8019096:	e7d6      	b.n	8019046 <_free_r+0x26>
 8019098:	6825      	ldr	r5, [r4, #0]
 801909a:	1961      	adds	r1, r4, r5
 801909c:	428b      	cmp	r3, r1
 801909e:	bf04      	itt	eq
 80190a0:	6819      	ldreq	r1, [r3, #0]
 80190a2:	685b      	ldreq	r3, [r3, #4]
 80190a4:	6063      	str	r3, [r4, #4]
 80190a6:	bf04      	itt	eq
 80190a8:	1949      	addeq	r1, r1, r5
 80190aa:	6021      	streq	r1, [r4, #0]
 80190ac:	6054      	str	r4, [r2, #4]
 80190ae:	e7ca      	b.n	8019046 <_free_r+0x26>
 80190b0:	b003      	add	sp, #12
 80190b2:	bd30      	pop	{r4, r5, pc}
 80190b4:	2400346c 	.word	0x2400346c

080190b8 <malloc>:
 80190b8:	4b02      	ldr	r3, [pc, #8]	; (80190c4 <malloc+0xc>)
 80190ba:	4601      	mov	r1, r0
 80190bc:	6818      	ldr	r0, [r3, #0]
 80190be:	f000 b823 	b.w	8019108 <_malloc_r>
 80190c2:	bf00      	nop
 80190c4:	24000158 	.word	0x24000158

080190c8 <sbrk_aligned>:
 80190c8:	b570      	push	{r4, r5, r6, lr}
 80190ca:	4e0e      	ldr	r6, [pc, #56]	; (8019104 <sbrk_aligned+0x3c>)
 80190cc:	460c      	mov	r4, r1
 80190ce:	6831      	ldr	r1, [r6, #0]
 80190d0:	4605      	mov	r5, r0
 80190d2:	b911      	cbnz	r1, 80190da <sbrk_aligned+0x12>
 80190d4:	f002 f96a 	bl	801b3ac <_sbrk_r>
 80190d8:	6030      	str	r0, [r6, #0]
 80190da:	4621      	mov	r1, r4
 80190dc:	4628      	mov	r0, r5
 80190de:	f002 f965 	bl	801b3ac <_sbrk_r>
 80190e2:	1c43      	adds	r3, r0, #1
 80190e4:	d00a      	beq.n	80190fc <sbrk_aligned+0x34>
 80190e6:	1cc4      	adds	r4, r0, #3
 80190e8:	f024 0403 	bic.w	r4, r4, #3
 80190ec:	42a0      	cmp	r0, r4
 80190ee:	d007      	beq.n	8019100 <sbrk_aligned+0x38>
 80190f0:	1a21      	subs	r1, r4, r0
 80190f2:	4628      	mov	r0, r5
 80190f4:	f002 f95a 	bl	801b3ac <_sbrk_r>
 80190f8:	3001      	adds	r0, #1
 80190fa:	d101      	bne.n	8019100 <sbrk_aligned+0x38>
 80190fc:	f04f 34ff 	mov.w	r4, #4294967295
 8019100:	4620      	mov	r0, r4
 8019102:	bd70      	pop	{r4, r5, r6, pc}
 8019104:	24003470 	.word	0x24003470

08019108 <_malloc_r>:
 8019108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801910c:	1ccd      	adds	r5, r1, #3
 801910e:	f025 0503 	bic.w	r5, r5, #3
 8019112:	3508      	adds	r5, #8
 8019114:	2d0c      	cmp	r5, #12
 8019116:	bf38      	it	cc
 8019118:	250c      	movcc	r5, #12
 801911a:	2d00      	cmp	r5, #0
 801911c:	4607      	mov	r7, r0
 801911e:	db01      	blt.n	8019124 <_malloc_r+0x1c>
 8019120:	42a9      	cmp	r1, r5
 8019122:	d905      	bls.n	8019130 <_malloc_r+0x28>
 8019124:	230c      	movs	r3, #12
 8019126:	603b      	str	r3, [r7, #0]
 8019128:	2600      	movs	r6, #0
 801912a:	4630      	mov	r0, r6
 801912c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019130:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8019204 <_malloc_r+0xfc>
 8019134:	f000 f868 	bl	8019208 <__malloc_lock>
 8019138:	f8d8 3000 	ldr.w	r3, [r8]
 801913c:	461c      	mov	r4, r3
 801913e:	bb5c      	cbnz	r4, 8019198 <_malloc_r+0x90>
 8019140:	4629      	mov	r1, r5
 8019142:	4638      	mov	r0, r7
 8019144:	f7ff ffc0 	bl	80190c8 <sbrk_aligned>
 8019148:	1c43      	adds	r3, r0, #1
 801914a:	4604      	mov	r4, r0
 801914c:	d155      	bne.n	80191fa <_malloc_r+0xf2>
 801914e:	f8d8 4000 	ldr.w	r4, [r8]
 8019152:	4626      	mov	r6, r4
 8019154:	2e00      	cmp	r6, #0
 8019156:	d145      	bne.n	80191e4 <_malloc_r+0xdc>
 8019158:	2c00      	cmp	r4, #0
 801915a:	d048      	beq.n	80191ee <_malloc_r+0xe6>
 801915c:	6823      	ldr	r3, [r4, #0]
 801915e:	4631      	mov	r1, r6
 8019160:	4638      	mov	r0, r7
 8019162:	eb04 0903 	add.w	r9, r4, r3
 8019166:	f002 f921 	bl	801b3ac <_sbrk_r>
 801916a:	4581      	cmp	r9, r0
 801916c:	d13f      	bne.n	80191ee <_malloc_r+0xe6>
 801916e:	6821      	ldr	r1, [r4, #0]
 8019170:	1a6d      	subs	r5, r5, r1
 8019172:	4629      	mov	r1, r5
 8019174:	4638      	mov	r0, r7
 8019176:	f7ff ffa7 	bl	80190c8 <sbrk_aligned>
 801917a:	3001      	adds	r0, #1
 801917c:	d037      	beq.n	80191ee <_malloc_r+0xe6>
 801917e:	6823      	ldr	r3, [r4, #0]
 8019180:	442b      	add	r3, r5
 8019182:	6023      	str	r3, [r4, #0]
 8019184:	f8d8 3000 	ldr.w	r3, [r8]
 8019188:	2b00      	cmp	r3, #0
 801918a:	d038      	beq.n	80191fe <_malloc_r+0xf6>
 801918c:	685a      	ldr	r2, [r3, #4]
 801918e:	42a2      	cmp	r2, r4
 8019190:	d12b      	bne.n	80191ea <_malloc_r+0xe2>
 8019192:	2200      	movs	r2, #0
 8019194:	605a      	str	r2, [r3, #4]
 8019196:	e00f      	b.n	80191b8 <_malloc_r+0xb0>
 8019198:	6822      	ldr	r2, [r4, #0]
 801919a:	1b52      	subs	r2, r2, r5
 801919c:	d41f      	bmi.n	80191de <_malloc_r+0xd6>
 801919e:	2a0b      	cmp	r2, #11
 80191a0:	d917      	bls.n	80191d2 <_malloc_r+0xca>
 80191a2:	1961      	adds	r1, r4, r5
 80191a4:	42a3      	cmp	r3, r4
 80191a6:	6025      	str	r5, [r4, #0]
 80191a8:	bf18      	it	ne
 80191aa:	6059      	strne	r1, [r3, #4]
 80191ac:	6863      	ldr	r3, [r4, #4]
 80191ae:	bf08      	it	eq
 80191b0:	f8c8 1000 	streq.w	r1, [r8]
 80191b4:	5162      	str	r2, [r4, r5]
 80191b6:	604b      	str	r3, [r1, #4]
 80191b8:	4638      	mov	r0, r7
 80191ba:	f104 060b 	add.w	r6, r4, #11
 80191be:	f000 f829 	bl	8019214 <__malloc_unlock>
 80191c2:	f026 0607 	bic.w	r6, r6, #7
 80191c6:	1d23      	adds	r3, r4, #4
 80191c8:	1af2      	subs	r2, r6, r3
 80191ca:	d0ae      	beq.n	801912a <_malloc_r+0x22>
 80191cc:	1b9b      	subs	r3, r3, r6
 80191ce:	50a3      	str	r3, [r4, r2]
 80191d0:	e7ab      	b.n	801912a <_malloc_r+0x22>
 80191d2:	42a3      	cmp	r3, r4
 80191d4:	6862      	ldr	r2, [r4, #4]
 80191d6:	d1dd      	bne.n	8019194 <_malloc_r+0x8c>
 80191d8:	f8c8 2000 	str.w	r2, [r8]
 80191dc:	e7ec      	b.n	80191b8 <_malloc_r+0xb0>
 80191de:	4623      	mov	r3, r4
 80191e0:	6864      	ldr	r4, [r4, #4]
 80191e2:	e7ac      	b.n	801913e <_malloc_r+0x36>
 80191e4:	4634      	mov	r4, r6
 80191e6:	6876      	ldr	r6, [r6, #4]
 80191e8:	e7b4      	b.n	8019154 <_malloc_r+0x4c>
 80191ea:	4613      	mov	r3, r2
 80191ec:	e7cc      	b.n	8019188 <_malloc_r+0x80>
 80191ee:	230c      	movs	r3, #12
 80191f0:	603b      	str	r3, [r7, #0]
 80191f2:	4638      	mov	r0, r7
 80191f4:	f000 f80e 	bl	8019214 <__malloc_unlock>
 80191f8:	e797      	b.n	801912a <_malloc_r+0x22>
 80191fa:	6025      	str	r5, [r4, #0]
 80191fc:	e7dc      	b.n	80191b8 <_malloc_r+0xb0>
 80191fe:	605b      	str	r3, [r3, #4]
 8019200:	deff      	udf	#255	; 0xff
 8019202:	bf00      	nop
 8019204:	2400346c 	.word	0x2400346c

08019208 <__malloc_lock>:
 8019208:	4801      	ldr	r0, [pc, #4]	; (8019210 <__malloc_lock+0x8>)
 801920a:	f7ff b8f4 	b.w	80183f6 <__retarget_lock_acquire_recursive>
 801920e:	bf00      	nop
 8019210:	24003468 	.word	0x24003468

08019214 <__malloc_unlock>:
 8019214:	4801      	ldr	r0, [pc, #4]	; (801921c <__malloc_unlock+0x8>)
 8019216:	f7ff b8ef 	b.w	80183f8 <__retarget_lock_release_recursive>
 801921a:	bf00      	nop
 801921c:	24003468 	.word	0x24003468

08019220 <_Balloc>:
 8019220:	b570      	push	{r4, r5, r6, lr}
 8019222:	69c6      	ldr	r6, [r0, #28]
 8019224:	4604      	mov	r4, r0
 8019226:	460d      	mov	r5, r1
 8019228:	b976      	cbnz	r6, 8019248 <_Balloc+0x28>
 801922a:	2010      	movs	r0, #16
 801922c:	f7ff ff44 	bl	80190b8 <malloc>
 8019230:	4602      	mov	r2, r0
 8019232:	61e0      	str	r0, [r4, #28]
 8019234:	b920      	cbnz	r0, 8019240 <_Balloc+0x20>
 8019236:	4b18      	ldr	r3, [pc, #96]	; (8019298 <_Balloc+0x78>)
 8019238:	4818      	ldr	r0, [pc, #96]	; (801929c <_Balloc+0x7c>)
 801923a:	216b      	movs	r1, #107	; 0x6b
 801923c:	f002 f8d0 	bl	801b3e0 <__assert_func>
 8019240:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019244:	6006      	str	r6, [r0, #0]
 8019246:	60c6      	str	r6, [r0, #12]
 8019248:	69e6      	ldr	r6, [r4, #28]
 801924a:	68f3      	ldr	r3, [r6, #12]
 801924c:	b183      	cbz	r3, 8019270 <_Balloc+0x50>
 801924e:	69e3      	ldr	r3, [r4, #28]
 8019250:	68db      	ldr	r3, [r3, #12]
 8019252:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019256:	b9b8      	cbnz	r0, 8019288 <_Balloc+0x68>
 8019258:	2101      	movs	r1, #1
 801925a:	fa01 f605 	lsl.w	r6, r1, r5
 801925e:	1d72      	adds	r2, r6, #5
 8019260:	0092      	lsls	r2, r2, #2
 8019262:	4620      	mov	r0, r4
 8019264:	f002 f8da 	bl	801b41c <_calloc_r>
 8019268:	b160      	cbz	r0, 8019284 <_Balloc+0x64>
 801926a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801926e:	e00e      	b.n	801928e <_Balloc+0x6e>
 8019270:	2221      	movs	r2, #33	; 0x21
 8019272:	2104      	movs	r1, #4
 8019274:	4620      	mov	r0, r4
 8019276:	f002 f8d1 	bl	801b41c <_calloc_r>
 801927a:	69e3      	ldr	r3, [r4, #28]
 801927c:	60f0      	str	r0, [r6, #12]
 801927e:	68db      	ldr	r3, [r3, #12]
 8019280:	2b00      	cmp	r3, #0
 8019282:	d1e4      	bne.n	801924e <_Balloc+0x2e>
 8019284:	2000      	movs	r0, #0
 8019286:	bd70      	pop	{r4, r5, r6, pc}
 8019288:	6802      	ldr	r2, [r0, #0]
 801928a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801928e:	2300      	movs	r3, #0
 8019290:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019294:	e7f7      	b.n	8019286 <_Balloc+0x66>
 8019296:	bf00      	nop
 8019298:	0801c498 	.word	0x0801c498
 801929c:	0801c518 	.word	0x0801c518

080192a0 <_Bfree>:
 80192a0:	b570      	push	{r4, r5, r6, lr}
 80192a2:	69c6      	ldr	r6, [r0, #28]
 80192a4:	4605      	mov	r5, r0
 80192a6:	460c      	mov	r4, r1
 80192a8:	b976      	cbnz	r6, 80192c8 <_Bfree+0x28>
 80192aa:	2010      	movs	r0, #16
 80192ac:	f7ff ff04 	bl	80190b8 <malloc>
 80192b0:	4602      	mov	r2, r0
 80192b2:	61e8      	str	r0, [r5, #28]
 80192b4:	b920      	cbnz	r0, 80192c0 <_Bfree+0x20>
 80192b6:	4b09      	ldr	r3, [pc, #36]	; (80192dc <_Bfree+0x3c>)
 80192b8:	4809      	ldr	r0, [pc, #36]	; (80192e0 <_Bfree+0x40>)
 80192ba:	218f      	movs	r1, #143	; 0x8f
 80192bc:	f002 f890 	bl	801b3e0 <__assert_func>
 80192c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80192c4:	6006      	str	r6, [r0, #0]
 80192c6:	60c6      	str	r6, [r0, #12]
 80192c8:	b13c      	cbz	r4, 80192da <_Bfree+0x3a>
 80192ca:	69eb      	ldr	r3, [r5, #28]
 80192cc:	6862      	ldr	r2, [r4, #4]
 80192ce:	68db      	ldr	r3, [r3, #12]
 80192d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80192d4:	6021      	str	r1, [r4, #0]
 80192d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80192da:	bd70      	pop	{r4, r5, r6, pc}
 80192dc:	0801c498 	.word	0x0801c498
 80192e0:	0801c518 	.word	0x0801c518

080192e4 <__multadd>:
 80192e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80192e8:	690d      	ldr	r5, [r1, #16]
 80192ea:	4607      	mov	r7, r0
 80192ec:	460c      	mov	r4, r1
 80192ee:	461e      	mov	r6, r3
 80192f0:	f101 0c14 	add.w	ip, r1, #20
 80192f4:	2000      	movs	r0, #0
 80192f6:	f8dc 3000 	ldr.w	r3, [ip]
 80192fa:	b299      	uxth	r1, r3
 80192fc:	fb02 6101 	mla	r1, r2, r1, r6
 8019300:	0c1e      	lsrs	r6, r3, #16
 8019302:	0c0b      	lsrs	r3, r1, #16
 8019304:	fb02 3306 	mla	r3, r2, r6, r3
 8019308:	b289      	uxth	r1, r1
 801930a:	3001      	adds	r0, #1
 801930c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8019310:	4285      	cmp	r5, r0
 8019312:	f84c 1b04 	str.w	r1, [ip], #4
 8019316:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801931a:	dcec      	bgt.n	80192f6 <__multadd+0x12>
 801931c:	b30e      	cbz	r6, 8019362 <__multadd+0x7e>
 801931e:	68a3      	ldr	r3, [r4, #8]
 8019320:	42ab      	cmp	r3, r5
 8019322:	dc19      	bgt.n	8019358 <__multadd+0x74>
 8019324:	6861      	ldr	r1, [r4, #4]
 8019326:	4638      	mov	r0, r7
 8019328:	3101      	adds	r1, #1
 801932a:	f7ff ff79 	bl	8019220 <_Balloc>
 801932e:	4680      	mov	r8, r0
 8019330:	b928      	cbnz	r0, 801933e <__multadd+0x5a>
 8019332:	4602      	mov	r2, r0
 8019334:	4b0c      	ldr	r3, [pc, #48]	; (8019368 <__multadd+0x84>)
 8019336:	480d      	ldr	r0, [pc, #52]	; (801936c <__multadd+0x88>)
 8019338:	21ba      	movs	r1, #186	; 0xba
 801933a:	f002 f851 	bl	801b3e0 <__assert_func>
 801933e:	6922      	ldr	r2, [r4, #16]
 8019340:	3202      	adds	r2, #2
 8019342:	f104 010c 	add.w	r1, r4, #12
 8019346:	0092      	lsls	r2, r2, #2
 8019348:	300c      	adds	r0, #12
 801934a:	f7ff f85e 	bl	801840a <memcpy>
 801934e:	4621      	mov	r1, r4
 8019350:	4638      	mov	r0, r7
 8019352:	f7ff ffa5 	bl	80192a0 <_Bfree>
 8019356:	4644      	mov	r4, r8
 8019358:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801935c:	3501      	adds	r5, #1
 801935e:	615e      	str	r6, [r3, #20]
 8019360:	6125      	str	r5, [r4, #16]
 8019362:	4620      	mov	r0, r4
 8019364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019368:	0801c507 	.word	0x0801c507
 801936c:	0801c518 	.word	0x0801c518

08019370 <__s2b>:
 8019370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019374:	460c      	mov	r4, r1
 8019376:	4615      	mov	r5, r2
 8019378:	461f      	mov	r7, r3
 801937a:	2209      	movs	r2, #9
 801937c:	3308      	adds	r3, #8
 801937e:	4606      	mov	r6, r0
 8019380:	fb93 f3f2 	sdiv	r3, r3, r2
 8019384:	2100      	movs	r1, #0
 8019386:	2201      	movs	r2, #1
 8019388:	429a      	cmp	r2, r3
 801938a:	db09      	blt.n	80193a0 <__s2b+0x30>
 801938c:	4630      	mov	r0, r6
 801938e:	f7ff ff47 	bl	8019220 <_Balloc>
 8019392:	b940      	cbnz	r0, 80193a6 <__s2b+0x36>
 8019394:	4602      	mov	r2, r0
 8019396:	4b19      	ldr	r3, [pc, #100]	; (80193fc <__s2b+0x8c>)
 8019398:	4819      	ldr	r0, [pc, #100]	; (8019400 <__s2b+0x90>)
 801939a:	21d3      	movs	r1, #211	; 0xd3
 801939c:	f002 f820 	bl	801b3e0 <__assert_func>
 80193a0:	0052      	lsls	r2, r2, #1
 80193a2:	3101      	adds	r1, #1
 80193a4:	e7f0      	b.n	8019388 <__s2b+0x18>
 80193a6:	9b08      	ldr	r3, [sp, #32]
 80193a8:	6143      	str	r3, [r0, #20]
 80193aa:	2d09      	cmp	r5, #9
 80193ac:	f04f 0301 	mov.w	r3, #1
 80193b0:	6103      	str	r3, [r0, #16]
 80193b2:	dd16      	ble.n	80193e2 <__s2b+0x72>
 80193b4:	f104 0909 	add.w	r9, r4, #9
 80193b8:	46c8      	mov	r8, r9
 80193ba:	442c      	add	r4, r5
 80193bc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80193c0:	4601      	mov	r1, r0
 80193c2:	3b30      	subs	r3, #48	; 0x30
 80193c4:	220a      	movs	r2, #10
 80193c6:	4630      	mov	r0, r6
 80193c8:	f7ff ff8c 	bl	80192e4 <__multadd>
 80193cc:	45a0      	cmp	r8, r4
 80193ce:	d1f5      	bne.n	80193bc <__s2b+0x4c>
 80193d0:	f1a5 0408 	sub.w	r4, r5, #8
 80193d4:	444c      	add	r4, r9
 80193d6:	1b2d      	subs	r5, r5, r4
 80193d8:	1963      	adds	r3, r4, r5
 80193da:	42bb      	cmp	r3, r7
 80193dc:	db04      	blt.n	80193e8 <__s2b+0x78>
 80193de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80193e2:	340a      	adds	r4, #10
 80193e4:	2509      	movs	r5, #9
 80193e6:	e7f6      	b.n	80193d6 <__s2b+0x66>
 80193e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80193ec:	4601      	mov	r1, r0
 80193ee:	3b30      	subs	r3, #48	; 0x30
 80193f0:	220a      	movs	r2, #10
 80193f2:	4630      	mov	r0, r6
 80193f4:	f7ff ff76 	bl	80192e4 <__multadd>
 80193f8:	e7ee      	b.n	80193d8 <__s2b+0x68>
 80193fa:	bf00      	nop
 80193fc:	0801c507 	.word	0x0801c507
 8019400:	0801c518 	.word	0x0801c518

08019404 <__hi0bits>:
 8019404:	0c03      	lsrs	r3, r0, #16
 8019406:	041b      	lsls	r3, r3, #16
 8019408:	b9d3      	cbnz	r3, 8019440 <__hi0bits+0x3c>
 801940a:	0400      	lsls	r0, r0, #16
 801940c:	2310      	movs	r3, #16
 801940e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8019412:	bf04      	itt	eq
 8019414:	0200      	lsleq	r0, r0, #8
 8019416:	3308      	addeq	r3, #8
 8019418:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801941c:	bf04      	itt	eq
 801941e:	0100      	lsleq	r0, r0, #4
 8019420:	3304      	addeq	r3, #4
 8019422:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8019426:	bf04      	itt	eq
 8019428:	0080      	lsleq	r0, r0, #2
 801942a:	3302      	addeq	r3, #2
 801942c:	2800      	cmp	r0, #0
 801942e:	db05      	blt.n	801943c <__hi0bits+0x38>
 8019430:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8019434:	f103 0301 	add.w	r3, r3, #1
 8019438:	bf08      	it	eq
 801943a:	2320      	moveq	r3, #32
 801943c:	4618      	mov	r0, r3
 801943e:	4770      	bx	lr
 8019440:	2300      	movs	r3, #0
 8019442:	e7e4      	b.n	801940e <__hi0bits+0xa>

08019444 <__lo0bits>:
 8019444:	6803      	ldr	r3, [r0, #0]
 8019446:	f013 0207 	ands.w	r2, r3, #7
 801944a:	d00c      	beq.n	8019466 <__lo0bits+0x22>
 801944c:	07d9      	lsls	r1, r3, #31
 801944e:	d422      	bmi.n	8019496 <__lo0bits+0x52>
 8019450:	079a      	lsls	r2, r3, #30
 8019452:	bf49      	itett	mi
 8019454:	085b      	lsrmi	r3, r3, #1
 8019456:	089b      	lsrpl	r3, r3, #2
 8019458:	6003      	strmi	r3, [r0, #0]
 801945a:	2201      	movmi	r2, #1
 801945c:	bf5c      	itt	pl
 801945e:	6003      	strpl	r3, [r0, #0]
 8019460:	2202      	movpl	r2, #2
 8019462:	4610      	mov	r0, r2
 8019464:	4770      	bx	lr
 8019466:	b299      	uxth	r1, r3
 8019468:	b909      	cbnz	r1, 801946e <__lo0bits+0x2a>
 801946a:	0c1b      	lsrs	r3, r3, #16
 801946c:	2210      	movs	r2, #16
 801946e:	b2d9      	uxtb	r1, r3
 8019470:	b909      	cbnz	r1, 8019476 <__lo0bits+0x32>
 8019472:	3208      	adds	r2, #8
 8019474:	0a1b      	lsrs	r3, r3, #8
 8019476:	0719      	lsls	r1, r3, #28
 8019478:	bf04      	itt	eq
 801947a:	091b      	lsreq	r3, r3, #4
 801947c:	3204      	addeq	r2, #4
 801947e:	0799      	lsls	r1, r3, #30
 8019480:	bf04      	itt	eq
 8019482:	089b      	lsreq	r3, r3, #2
 8019484:	3202      	addeq	r2, #2
 8019486:	07d9      	lsls	r1, r3, #31
 8019488:	d403      	bmi.n	8019492 <__lo0bits+0x4e>
 801948a:	085b      	lsrs	r3, r3, #1
 801948c:	f102 0201 	add.w	r2, r2, #1
 8019490:	d003      	beq.n	801949a <__lo0bits+0x56>
 8019492:	6003      	str	r3, [r0, #0]
 8019494:	e7e5      	b.n	8019462 <__lo0bits+0x1e>
 8019496:	2200      	movs	r2, #0
 8019498:	e7e3      	b.n	8019462 <__lo0bits+0x1e>
 801949a:	2220      	movs	r2, #32
 801949c:	e7e1      	b.n	8019462 <__lo0bits+0x1e>
	...

080194a0 <__i2b>:
 80194a0:	b510      	push	{r4, lr}
 80194a2:	460c      	mov	r4, r1
 80194a4:	2101      	movs	r1, #1
 80194a6:	f7ff febb 	bl	8019220 <_Balloc>
 80194aa:	4602      	mov	r2, r0
 80194ac:	b928      	cbnz	r0, 80194ba <__i2b+0x1a>
 80194ae:	4b05      	ldr	r3, [pc, #20]	; (80194c4 <__i2b+0x24>)
 80194b0:	4805      	ldr	r0, [pc, #20]	; (80194c8 <__i2b+0x28>)
 80194b2:	f240 1145 	movw	r1, #325	; 0x145
 80194b6:	f001 ff93 	bl	801b3e0 <__assert_func>
 80194ba:	2301      	movs	r3, #1
 80194bc:	6144      	str	r4, [r0, #20]
 80194be:	6103      	str	r3, [r0, #16]
 80194c0:	bd10      	pop	{r4, pc}
 80194c2:	bf00      	nop
 80194c4:	0801c507 	.word	0x0801c507
 80194c8:	0801c518 	.word	0x0801c518

080194cc <__multiply>:
 80194cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194d0:	4691      	mov	r9, r2
 80194d2:	690a      	ldr	r2, [r1, #16]
 80194d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80194d8:	429a      	cmp	r2, r3
 80194da:	bfb8      	it	lt
 80194dc:	460b      	movlt	r3, r1
 80194de:	460c      	mov	r4, r1
 80194e0:	bfbc      	itt	lt
 80194e2:	464c      	movlt	r4, r9
 80194e4:	4699      	movlt	r9, r3
 80194e6:	6927      	ldr	r7, [r4, #16]
 80194e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80194ec:	68a3      	ldr	r3, [r4, #8]
 80194ee:	6861      	ldr	r1, [r4, #4]
 80194f0:	eb07 060a 	add.w	r6, r7, sl
 80194f4:	42b3      	cmp	r3, r6
 80194f6:	b085      	sub	sp, #20
 80194f8:	bfb8      	it	lt
 80194fa:	3101      	addlt	r1, #1
 80194fc:	f7ff fe90 	bl	8019220 <_Balloc>
 8019500:	b930      	cbnz	r0, 8019510 <__multiply+0x44>
 8019502:	4602      	mov	r2, r0
 8019504:	4b44      	ldr	r3, [pc, #272]	; (8019618 <__multiply+0x14c>)
 8019506:	4845      	ldr	r0, [pc, #276]	; (801961c <__multiply+0x150>)
 8019508:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801950c:	f001 ff68 	bl	801b3e0 <__assert_func>
 8019510:	f100 0514 	add.w	r5, r0, #20
 8019514:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8019518:	462b      	mov	r3, r5
 801951a:	2200      	movs	r2, #0
 801951c:	4543      	cmp	r3, r8
 801951e:	d321      	bcc.n	8019564 <__multiply+0x98>
 8019520:	f104 0314 	add.w	r3, r4, #20
 8019524:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8019528:	f109 0314 	add.w	r3, r9, #20
 801952c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8019530:	9202      	str	r2, [sp, #8]
 8019532:	1b3a      	subs	r2, r7, r4
 8019534:	3a15      	subs	r2, #21
 8019536:	f022 0203 	bic.w	r2, r2, #3
 801953a:	3204      	adds	r2, #4
 801953c:	f104 0115 	add.w	r1, r4, #21
 8019540:	428f      	cmp	r7, r1
 8019542:	bf38      	it	cc
 8019544:	2204      	movcc	r2, #4
 8019546:	9201      	str	r2, [sp, #4]
 8019548:	9a02      	ldr	r2, [sp, #8]
 801954a:	9303      	str	r3, [sp, #12]
 801954c:	429a      	cmp	r2, r3
 801954e:	d80c      	bhi.n	801956a <__multiply+0x9e>
 8019550:	2e00      	cmp	r6, #0
 8019552:	dd03      	ble.n	801955c <__multiply+0x90>
 8019554:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8019558:	2b00      	cmp	r3, #0
 801955a:	d05b      	beq.n	8019614 <__multiply+0x148>
 801955c:	6106      	str	r6, [r0, #16]
 801955e:	b005      	add	sp, #20
 8019560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019564:	f843 2b04 	str.w	r2, [r3], #4
 8019568:	e7d8      	b.n	801951c <__multiply+0x50>
 801956a:	f8b3 a000 	ldrh.w	sl, [r3]
 801956e:	f1ba 0f00 	cmp.w	sl, #0
 8019572:	d024      	beq.n	80195be <__multiply+0xf2>
 8019574:	f104 0e14 	add.w	lr, r4, #20
 8019578:	46a9      	mov	r9, r5
 801957a:	f04f 0c00 	mov.w	ip, #0
 801957e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8019582:	f8d9 1000 	ldr.w	r1, [r9]
 8019586:	fa1f fb82 	uxth.w	fp, r2
 801958a:	b289      	uxth	r1, r1
 801958c:	fb0a 110b 	mla	r1, sl, fp, r1
 8019590:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8019594:	f8d9 2000 	ldr.w	r2, [r9]
 8019598:	4461      	add	r1, ip
 801959a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801959e:	fb0a c20b 	mla	r2, sl, fp, ip
 80195a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80195a6:	b289      	uxth	r1, r1
 80195a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80195ac:	4577      	cmp	r7, lr
 80195ae:	f849 1b04 	str.w	r1, [r9], #4
 80195b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80195b6:	d8e2      	bhi.n	801957e <__multiply+0xb2>
 80195b8:	9a01      	ldr	r2, [sp, #4]
 80195ba:	f845 c002 	str.w	ip, [r5, r2]
 80195be:	9a03      	ldr	r2, [sp, #12]
 80195c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80195c4:	3304      	adds	r3, #4
 80195c6:	f1b9 0f00 	cmp.w	r9, #0
 80195ca:	d021      	beq.n	8019610 <__multiply+0x144>
 80195cc:	6829      	ldr	r1, [r5, #0]
 80195ce:	f104 0c14 	add.w	ip, r4, #20
 80195d2:	46ae      	mov	lr, r5
 80195d4:	f04f 0a00 	mov.w	sl, #0
 80195d8:	f8bc b000 	ldrh.w	fp, [ip]
 80195dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80195e0:	fb09 220b 	mla	r2, r9, fp, r2
 80195e4:	4452      	add	r2, sl
 80195e6:	b289      	uxth	r1, r1
 80195e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80195ec:	f84e 1b04 	str.w	r1, [lr], #4
 80195f0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80195f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80195f8:	f8be 1000 	ldrh.w	r1, [lr]
 80195fc:	fb09 110a 	mla	r1, r9, sl, r1
 8019600:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8019604:	4567      	cmp	r7, ip
 8019606:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801960a:	d8e5      	bhi.n	80195d8 <__multiply+0x10c>
 801960c:	9a01      	ldr	r2, [sp, #4]
 801960e:	50a9      	str	r1, [r5, r2]
 8019610:	3504      	adds	r5, #4
 8019612:	e799      	b.n	8019548 <__multiply+0x7c>
 8019614:	3e01      	subs	r6, #1
 8019616:	e79b      	b.n	8019550 <__multiply+0x84>
 8019618:	0801c507 	.word	0x0801c507
 801961c:	0801c518 	.word	0x0801c518

08019620 <__pow5mult>:
 8019620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019624:	4615      	mov	r5, r2
 8019626:	f012 0203 	ands.w	r2, r2, #3
 801962a:	4606      	mov	r6, r0
 801962c:	460f      	mov	r7, r1
 801962e:	d007      	beq.n	8019640 <__pow5mult+0x20>
 8019630:	4c25      	ldr	r4, [pc, #148]	; (80196c8 <__pow5mult+0xa8>)
 8019632:	3a01      	subs	r2, #1
 8019634:	2300      	movs	r3, #0
 8019636:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801963a:	f7ff fe53 	bl	80192e4 <__multadd>
 801963e:	4607      	mov	r7, r0
 8019640:	10ad      	asrs	r5, r5, #2
 8019642:	d03d      	beq.n	80196c0 <__pow5mult+0xa0>
 8019644:	69f4      	ldr	r4, [r6, #28]
 8019646:	b97c      	cbnz	r4, 8019668 <__pow5mult+0x48>
 8019648:	2010      	movs	r0, #16
 801964a:	f7ff fd35 	bl	80190b8 <malloc>
 801964e:	4602      	mov	r2, r0
 8019650:	61f0      	str	r0, [r6, #28]
 8019652:	b928      	cbnz	r0, 8019660 <__pow5mult+0x40>
 8019654:	4b1d      	ldr	r3, [pc, #116]	; (80196cc <__pow5mult+0xac>)
 8019656:	481e      	ldr	r0, [pc, #120]	; (80196d0 <__pow5mult+0xb0>)
 8019658:	f240 11b3 	movw	r1, #435	; 0x1b3
 801965c:	f001 fec0 	bl	801b3e0 <__assert_func>
 8019660:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019664:	6004      	str	r4, [r0, #0]
 8019666:	60c4      	str	r4, [r0, #12]
 8019668:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801966c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019670:	b94c      	cbnz	r4, 8019686 <__pow5mult+0x66>
 8019672:	f240 2171 	movw	r1, #625	; 0x271
 8019676:	4630      	mov	r0, r6
 8019678:	f7ff ff12 	bl	80194a0 <__i2b>
 801967c:	2300      	movs	r3, #0
 801967e:	f8c8 0008 	str.w	r0, [r8, #8]
 8019682:	4604      	mov	r4, r0
 8019684:	6003      	str	r3, [r0, #0]
 8019686:	f04f 0900 	mov.w	r9, #0
 801968a:	07eb      	lsls	r3, r5, #31
 801968c:	d50a      	bpl.n	80196a4 <__pow5mult+0x84>
 801968e:	4639      	mov	r1, r7
 8019690:	4622      	mov	r2, r4
 8019692:	4630      	mov	r0, r6
 8019694:	f7ff ff1a 	bl	80194cc <__multiply>
 8019698:	4639      	mov	r1, r7
 801969a:	4680      	mov	r8, r0
 801969c:	4630      	mov	r0, r6
 801969e:	f7ff fdff 	bl	80192a0 <_Bfree>
 80196a2:	4647      	mov	r7, r8
 80196a4:	106d      	asrs	r5, r5, #1
 80196a6:	d00b      	beq.n	80196c0 <__pow5mult+0xa0>
 80196a8:	6820      	ldr	r0, [r4, #0]
 80196aa:	b938      	cbnz	r0, 80196bc <__pow5mult+0x9c>
 80196ac:	4622      	mov	r2, r4
 80196ae:	4621      	mov	r1, r4
 80196b0:	4630      	mov	r0, r6
 80196b2:	f7ff ff0b 	bl	80194cc <__multiply>
 80196b6:	6020      	str	r0, [r4, #0]
 80196b8:	f8c0 9000 	str.w	r9, [r0]
 80196bc:	4604      	mov	r4, r0
 80196be:	e7e4      	b.n	801968a <__pow5mult+0x6a>
 80196c0:	4638      	mov	r0, r7
 80196c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80196c6:	bf00      	nop
 80196c8:	0801c668 	.word	0x0801c668
 80196cc:	0801c498 	.word	0x0801c498
 80196d0:	0801c518 	.word	0x0801c518

080196d4 <__lshift>:
 80196d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80196d8:	460c      	mov	r4, r1
 80196da:	6849      	ldr	r1, [r1, #4]
 80196dc:	6923      	ldr	r3, [r4, #16]
 80196de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80196e2:	68a3      	ldr	r3, [r4, #8]
 80196e4:	4607      	mov	r7, r0
 80196e6:	4691      	mov	r9, r2
 80196e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80196ec:	f108 0601 	add.w	r6, r8, #1
 80196f0:	42b3      	cmp	r3, r6
 80196f2:	db0b      	blt.n	801970c <__lshift+0x38>
 80196f4:	4638      	mov	r0, r7
 80196f6:	f7ff fd93 	bl	8019220 <_Balloc>
 80196fa:	4605      	mov	r5, r0
 80196fc:	b948      	cbnz	r0, 8019712 <__lshift+0x3e>
 80196fe:	4602      	mov	r2, r0
 8019700:	4b28      	ldr	r3, [pc, #160]	; (80197a4 <__lshift+0xd0>)
 8019702:	4829      	ldr	r0, [pc, #164]	; (80197a8 <__lshift+0xd4>)
 8019704:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8019708:	f001 fe6a 	bl	801b3e0 <__assert_func>
 801970c:	3101      	adds	r1, #1
 801970e:	005b      	lsls	r3, r3, #1
 8019710:	e7ee      	b.n	80196f0 <__lshift+0x1c>
 8019712:	2300      	movs	r3, #0
 8019714:	f100 0114 	add.w	r1, r0, #20
 8019718:	f100 0210 	add.w	r2, r0, #16
 801971c:	4618      	mov	r0, r3
 801971e:	4553      	cmp	r3, sl
 8019720:	db33      	blt.n	801978a <__lshift+0xb6>
 8019722:	6920      	ldr	r0, [r4, #16]
 8019724:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019728:	f104 0314 	add.w	r3, r4, #20
 801972c:	f019 091f 	ands.w	r9, r9, #31
 8019730:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019734:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019738:	d02b      	beq.n	8019792 <__lshift+0xbe>
 801973a:	f1c9 0e20 	rsb	lr, r9, #32
 801973e:	468a      	mov	sl, r1
 8019740:	2200      	movs	r2, #0
 8019742:	6818      	ldr	r0, [r3, #0]
 8019744:	fa00 f009 	lsl.w	r0, r0, r9
 8019748:	4310      	orrs	r0, r2
 801974a:	f84a 0b04 	str.w	r0, [sl], #4
 801974e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019752:	459c      	cmp	ip, r3
 8019754:	fa22 f20e 	lsr.w	r2, r2, lr
 8019758:	d8f3      	bhi.n	8019742 <__lshift+0x6e>
 801975a:	ebac 0304 	sub.w	r3, ip, r4
 801975e:	3b15      	subs	r3, #21
 8019760:	f023 0303 	bic.w	r3, r3, #3
 8019764:	3304      	adds	r3, #4
 8019766:	f104 0015 	add.w	r0, r4, #21
 801976a:	4584      	cmp	ip, r0
 801976c:	bf38      	it	cc
 801976e:	2304      	movcc	r3, #4
 8019770:	50ca      	str	r2, [r1, r3]
 8019772:	b10a      	cbz	r2, 8019778 <__lshift+0xa4>
 8019774:	f108 0602 	add.w	r6, r8, #2
 8019778:	3e01      	subs	r6, #1
 801977a:	4638      	mov	r0, r7
 801977c:	612e      	str	r6, [r5, #16]
 801977e:	4621      	mov	r1, r4
 8019780:	f7ff fd8e 	bl	80192a0 <_Bfree>
 8019784:	4628      	mov	r0, r5
 8019786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801978a:	f842 0f04 	str.w	r0, [r2, #4]!
 801978e:	3301      	adds	r3, #1
 8019790:	e7c5      	b.n	801971e <__lshift+0x4a>
 8019792:	3904      	subs	r1, #4
 8019794:	f853 2b04 	ldr.w	r2, [r3], #4
 8019798:	f841 2f04 	str.w	r2, [r1, #4]!
 801979c:	459c      	cmp	ip, r3
 801979e:	d8f9      	bhi.n	8019794 <__lshift+0xc0>
 80197a0:	e7ea      	b.n	8019778 <__lshift+0xa4>
 80197a2:	bf00      	nop
 80197a4:	0801c507 	.word	0x0801c507
 80197a8:	0801c518 	.word	0x0801c518

080197ac <__mcmp>:
 80197ac:	b530      	push	{r4, r5, lr}
 80197ae:	6902      	ldr	r2, [r0, #16]
 80197b0:	690c      	ldr	r4, [r1, #16]
 80197b2:	1b12      	subs	r2, r2, r4
 80197b4:	d10e      	bne.n	80197d4 <__mcmp+0x28>
 80197b6:	f100 0314 	add.w	r3, r0, #20
 80197ba:	3114      	adds	r1, #20
 80197bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80197c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80197c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80197c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80197cc:	42a5      	cmp	r5, r4
 80197ce:	d003      	beq.n	80197d8 <__mcmp+0x2c>
 80197d0:	d305      	bcc.n	80197de <__mcmp+0x32>
 80197d2:	2201      	movs	r2, #1
 80197d4:	4610      	mov	r0, r2
 80197d6:	bd30      	pop	{r4, r5, pc}
 80197d8:	4283      	cmp	r3, r0
 80197da:	d3f3      	bcc.n	80197c4 <__mcmp+0x18>
 80197dc:	e7fa      	b.n	80197d4 <__mcmp+0x28>
 80197de:	f04f 32ff 	mov.w	r2, #4294967295
 80197e2:	e7f7      	b.n	80197d4 <__mcmp+0x28>

080197e4 <__mdiff>:
 80197e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197e8:	460c      	mov	r4, r1
 80197ea:	4606      	mov	r6, r0
 80197ec:	4611      	mov	r1, r2
 80197ee:	4620      	mov	r0, r4
 80197f0:	4690      	mov	r8, r2
 80197f2:	f7ff ffdb 	bl	80197ac <__mcmp>
 80197f6:	1e05      	subs	r5, r0, #0
 80197f8:	d110      	bne.n	801981c <__mdiff+0x38>
 80197fa:	4629      	mov	r1, r5
 80197fc:	4630      	mov	r0, r6
 80197fe:	f7ff fd0f 	bl	8019220 <_Balloc>
 8019802:	b930      	cbnz	r0, 8019812 <__mdiff+0x2e>
 8019804:	4b3a      	ldr	r3, [pc, #232]	; (80198f0 <__mdiff+0x10c>)
 8019806:	4602      	mov	r2, r0
 8019808:	f240 2137 	movw	r1, #567	; 0x237
 801980c:	4839      	ldr	r0, [pc, #228]	; (80198f4 <__mdiff+0x110>)
 801980e:	f001 fde7 	bl	801b3e0 <__assert_func>
 8019812:	2301      	movs	r3, #1
 8019814:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019818:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801981c:	bfa4      	itt	ge
 801981e:	4643      	movge	r3, r8
 8019820:	46a0      	movge	r8, r4
 8019822:	4630      	mov	r0, r6
 8019824:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8019828:	bfa6      	itte	ge
 801982a:	461c      	movge	r4, r3
 801982c:	2500      	movge	r5, #0
 801982e:	2501      	movlt	r5, #1
 8019830:	f7ff fcf6 	bl	8019220 <_Balloc>
 8019834:	b920      	cbnz	r0, 8019840 <__mdiff+0x5c>
 8019836:	4b2e      	ldr	r3, [pc, #184]	; (80198f0 <__mdiff+0x10c>)
 8019838:	4602      	mov	r2, r0
 801983a:	f240 2145 	movw	r1, #581	; 0x245
 801983e:	e7e5      	b.n	801980c <__mdiff+0x28>
 8019840:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8019844:	6926      	ldr	r6, [r4, #16]
 8019846:	60c5      	str	r5, [r0, #12]
 8019848:	f104 0914 	add.w	r9, r4, #20
 801984c:	f108 0514 	add.w	r5, r8, #20
 8019850:	f100 0e14 	add.w	lr, r0, #20
 8019854:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8019858:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801985c:	f108 0210 	add.w	r2, r8, #16
 8019860:	46f2      	mov	sl, lr
 8019862:	2100      	movs	r1, #0
 8019864:	f859 3b04 	ldr.w	r3, [r9], #4
 8019868:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801986c:	fa11 f88b 	uxtah	r8, r1, fp
 8019870:	b299      	uxth	r1, r3
 8019872:	0c1b      	lsrs	r3, r3, #16
 8019874:	eba8 0801 	sub.w	r8, r8, r1
 8019878:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801987c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8019880:	fa1f f888 	uxth.w	r8, r8
 8019884:	1419      	asrs	r1, r3, #16
 8019886:	454e      	cmp	r6, r9
 8019888:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801988c:	f84a 3b04 	str.w	r3, [sl], #4
 8019890:	d8e8      	bhi.n	8019864 <__mdiff+0x80>
 8019892:	1b33      	subs	r3, r6, r4
 8019894:	3b15      	subs	r3, #21
 8019896:	f023 0303 	bic.w	r3, r3, #3
 801989a:	3304      	adds	r3, #4
 801989c:	3415      	adds	r4, #21
 801989e:	42a6      	cmp	r6, r4
 80198a0:	bf38      	it	cc
 80198a2:	2304      	movcc	r3, #4
 80198a4:	441d      	add	r5, r3
 80198a6:	4473      	add	r3, lr
 80198a8:	469e      	mov	lr, r3
 80198aa:	462e      	mov	r6, r5
 80198ac:	4566      	cmp	r6, ip
 80198ae:	d30e      	bcc.n	80198ce <__mdiff+0xea>
 80198b0:	f10c 0203 	add.w	r2, ip, #3
 80198b4:	1b52      	subs	r2, r2, r5
 80198b6:	f022 0203 	bic.w	r2, r2, #3
 80198ba:	3d03      	subs	r5, #3
 80198bc:	45ac      	cmp	ip, r5
 80198be:	bf38      	it	cc
 80198c0:	2200      	movcc	r2, #0
 80198c2:	4413      	add	r3, r2
 80198c4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80198c8:	b17a      	cbz	r2, 80198ea <__mdiff+0x106>
 80198ca:	6107      	str	r7, [r0, #16]
 80198cc:	e7a4      	b.n	8019818 <__mdiff+0x34>
 80198ce:	f856 8b04 	ldr.w	r8, [r6], #4
 80198d2:	fa11 f288 	uxtah	r2, r1, r8
 80198d6:	1414      	asrs	r4, r2, #16
 80198d8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80198dc:	b292      	uxth	r2, r2
 80198de:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80198e2:	f84e 2b04 	str.w	r2, [lr], #4
 80198e6:	1421      	asrs	r1, r4, #16
 80198e8:	e7e0      	b.n	80198ac <__mdiff+0xc8>
 80198ea:	3f01      	subs	r7, #1
 80198ec:	e7ea      	b.n	80198c4 <__mdiff+0xe0>
 80198ee:	bf00      	nop
 80198f0:	0801c507 	.word	0x0801c507
 80198f4:	0801c518 	.word	0x0801c518

080198f8 <__ulp>:
 80198f8:	b082      	sub	sp, #8
 80198fa:	ed8d 0b00 	vstr	d0, [sp]
 80198fe:	9a01      	ldr	r2, [sp, #4]
 8019900:	4b0f      	ldr	r3, [pc, #60]	; (8019940 <__ulp+0x48>)
 8019902:	4013      	ands	r3, r2
 8019904:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8019908:	2b00      	cmp	r3, #0
 801990a:	dc08      	bgt.n	801991e <__ulp+0x26>
 801990c:	425b      	negs	r3, r3
 801990e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8019912:	ea4f 5223 	mov.w	r2, r3, asr #20
 8019916:	da04      	bge.n	8019922 <__ulp+0x2a>
 8019918:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801991c:	4113      	asrs	r3, r2
 801991e:	2200      	movs	r2, #0
 8019920:	e008      	b.n	8019934 <__ulp+0x3c>
 8019922:	f1a2 0314 	sub.w	r3, r2, #20
 8019926:	2b1e      	cmp	r3, #30
 8019928:	bfda      	itte	le
 801992a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801992e:	40da      	lsrle	r2, r3
 8019930:	2201      	movgt	r2, #1
 8019932:	2300      	movs	r3, #0
 8019934:	4619      	mov	r1, r3
 8019936:	4610      	mov	r0, r2
 8019938:	ec41 0b10 	vmov	d0, r0, r1
 801993c:	b002      	add	sp, #8
 801993e:	4770      	bx	lr
 8019940:	7ff00000 	.word	0x7ff00000

08019944 <__b2d>:
 8019944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019948:	6906      	ldr	r6, [r0, #16]
 801994a:	f100 0814 	add.w	r8, r0, #20
 801994e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8019952:	1f37      	subs	r7, r6, #4
 8019954:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8019958:	4610      	mov	r0, r2
 801995a:	f7ff fd53 	bl	8019404 <__hi0bits>
 801995e:	f1c0 0320 	rsb	r3, r0, #32
 8019962:	280a      	cmp	r0, #10
 8019964:	600b      	str	r3, [r1, #0]
 8019966:	491b      	ldr	r1, [pc, #108]	; (80199d4 <__b2d+0x90>)
 8019968:	dc15      	bgt.n	8019996 <__b2d+0x52>
 801996a:	f1c0 0c0b 	rsb	ip, r0, #11
 801996e:	fa22 f30c 	lsr.w	r3, r2, ip
 8019972:	45b8      	cmp	r8, r7
 8019974:	ea43 0501 	orr.w	r5, r3, r1
 8019978:	bf34      	ite	cc
 801997a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801997e:	2300      	movcs	r3, #0
 8019980:	3015      	adds	r0, #21
 8019982:	fa02 f000 	lsl.w	r0, r2, r0
 8019986:	fa23 f30c 	lsr.w	r3, r3, ip
 801998a:	4303      	orrs	r3, r0
 801998c:	461c      	mov	r4, r3
 801998e:	ec45 4b10 	vmov	d0, r4, r5
 8019992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019996:	45b8      	cmp	r8, r7
 8019998:	bf3a      	itte	cc
 801999a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801999e:	f1a6 0708 	subcc.w	r7, r6, #8
 80199a2:	2300      	movcs	r3, #0
 80199a4:	380b      	subs	r0, #11
 80199a6:	d012      	beq.n	80199ce <__b2d+0x8a>
 80199a8:	f1c0 0120 	rsb	r1, r0, #32
 80199ac:	fa23 f401 	lsr.w	r4, r3, r1
 80199b0:	4082      	lsls	r2, r0
 80199b2:	4322      	orrs	r2, r4
 80199b4:	4547      	cmp	r7, r8
 80199b6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80199ba:	bf8c      	ite	hi
 80199bc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80199c0:	2200      	movls	r2, #0
 80199c2:	4083      	lsls	r3, r0
 80199c4:	40ca      	lsrs	r2, r1
 80199c6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80199ca:	4313      	orrs	r3, r2
 80199cc:	e7de      	b.n	801998c <__b2d+0x48>
 80199ce:	ea42 0501 	orr.w	r5, r2, r1
 80199d2:	e7db      	b.n	801998c <__b2d+0x48>
 80199d4:	3ff00000 	.word	0x3ff00000

080199d8 <__d2b>:
 80199d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80199dc:	460f      	mov	r7, r1
 80199de:	2101      	movs	r1, #1
 80199e0:	ec59 8b10 	vmov	r8, r9, d0
 80199e4:	4616      	mov	r6, r2
 80199e6:	f7ff fc1b 	bl	8019220 <_Balloc>
 80199ea:	4604      	mov	r4, r0
 80199ec:	b930      	cbnz	r0, 80199fc <__d2b+0x24>
 80199ee:	4602      	mov	r2, r0
 80199f0:	4b24      	ldr	r3, [pc, #144]	; (8019a84 <__d2b+0xac>)
 80199f2:	4825      	ldr	r0, [pc, #148]	; (8019a88 <__d2b+0xb0>)
 80199f4:	f240 310f 	movw	r1, #783	; 0x30f
 80199f8:	f001 fcf2 	bl	801b3e0 <__assert_func>
 80199fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8019a00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019a04:	bb2d      	cbnz	r5, 8019a52 <__d2b+0x7a>
 8019a06:	9301      	str	r3, [sp, #4]
 8019a08:	f1b8 0300 	subs.w	r3, r8, #0
 8019a0c:	d026      	beq.n	8019a5c <__d2b+0x84>
 8019a0e:	4668      	mov	r0, sp
 8019a10:	9300      	str	r3, [sp, #0]
 8019a12:	f7ff fd17 	bl	8019444 <__lo0bits>
 8019a16:	e9dd 1200 	ldrd	r1, r2, [sp]
 8019a1a:	b1e8      	cbz	r0, 8019a58 <__d2b+0x80>
 8019a1c:	f1c0 0320 	rsb	r3, r0, #32
 8019a20:	fa02 f303 	lsl.w	r3, r2, r3
 8019a24:	430b      	orrs	r3, r1
 8019a26:	40c2      	lsrs	r2, r0
 8019a28:	6163      	str	r3, [r4, #20]
 8019a2a:	9201      	str	r2, [sp, #4]
 8019a2c:	9b01      	ldr	r3, [sp, #4]
 8019a2e:	61a3      	str	r3, [r4, #24]
 8019a30:	2b00      	cmp	r3, #0
 8019a32:	bf14      	ite	ne
 8019a34:	2202      	movne	r2, #2
 8019a36:	2201      	moveq	r2, #1
 8019a38:	6122      	str	r2, [r4, #16]
 8019a3a:	b1bd      	cbz	r5, 8019a6c <__d2b+0x94>
 8019a3c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019a40:	4405      	add	r5, r0
 8019a42:	603d      	str	r5, [r7, #0]
 8019a44:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019a48:	6030      	str	r0, [r6, #0]
 8019a4a:	4620      	mov	r0, r4
 8019a4c:	b003      	add	sp, #12
 8019a4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019a52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019a56:	e7d6      	b.n	8019a06 <__d2b+0x2e>
 8019a58:	6161      	str	r1, [r4, #20]
 8019a5a:	e7e7      	b.n	8019a2c <__d2b+0x54>
 8019a5c:	a801      	add	r0, sp, #4
 8019a5e:	f7ff fcf1 	bl	8019444 <__lo0bits>
 8019a62:	9b01      	ldr	r3, [sp, #4]
 8019a64:	6163      	str	r3, [r4, #20]
 8019a66:	3020      	adds	r0, #32
 8019a68:	2201      	movs	r2, #1
 8019a6a:	e7e5      	b.n	8019a38 <__d2b+0x60>
 8019a6c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019a70:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019a74:	6038      	str	r0, [r7, #0]
 8019a76:	6918      	ldr	r0, [r3, #16]
 8019a78:	f7ff fcc4 	bl	8019404 <__hi0bits>
 8019a7c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019a80:	e7e2      	b.n	8019a48 <__d2b+0x70>
 8019a82:	bf00      	nop
 8019a84:	0801c507 	.word	0x0801c507
 8019a88:	0801c518 	.word	0x0801c518

08019a8c <__ratio>:
 8019a8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a90:	4688      	mov	r8, r1
 8019a92:	4669      	mov	r1, sp
 8019a94:	4681      	mov	r9, r0
 8019a96:	f7ff ff55 	bl	8019944 <__b2d>
 8019a9a:	a901      	add	r1, sp, #4
 8019a9c:	4640      	mov	r0, r8
 8019a9e:	ec55 4b10 	vmov	r4, r5, d0
 8019aa2:	ee10 aa10 	vmov	sl, s0
 8019aa6:	f7ff ff4d 	bl	8019944 <__b2d>
 8019aaa:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8019aae:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8019ab2:	1ad2      	subs	r2, r2, r3
 8019ab4:	e9dd 3100 	ldrd	r3, r1, [sp]
 8019ab8:	1a5b      	subs	r3, r3, r1
 8019aba:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8019abe:	ec57 6b10 	vmov	r6, r7, d0
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	bfd6      	itet	le
 8019ac6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019aca:	462a      	movgt	r2, r5
 8019acc:	463a      	movle	r2, r7
 8019ace:	46ab      	mov	fp, r5
 8019ad0:	bfd6      	itet	le
 8019ad2:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8019ad6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8019ada:	ee00 3a90 	vmovle	s1, r3
 8019ade:	ec4b ab17 	vmov	d7, sl, fp
 8019ae2:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8019ae6:	b003      	add	sp, #12
 8019ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019aec <__copybits>:
 8019aec:	3901      	subs	r1, #1
 8019aee:	b570      	push	{r4, r5, r6, lr}
 8019af0:	1149      	asrs	r1, r1, #5
 8019af2:	6914      	ldr	r4, [r2, #16]
 8019af4:	3101      	adds	r1, #1
 8019af6:	f102 0314 	add.w	r3, r2, #20
 8019afa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019afe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019b02:	1f05      	subs	r5, r0, #4
 8019b04:	42a3      	cmp	r3, r4
 8019b06:	d30c      	bcc.n	8019b22 <__copybits+0x36>
 8019b08:	1aa3      	subs	r3, r4, r2
 8019b0a:	3b11      	subs	r3, #17
 8019b0c:	f023 0303 	bic.w	r3, r3, #3
 8019b10:	3211      	adds	r2, #17
 8019b12:	42a2      	cmp	r2, r4
 8019b14:	bf88      	it	hi
 8019b16:	2300      	movhi	r3, #0
 8019b18:	4418      	add	r0, r3
 8019b1a:	2300      	movs	r3, #0
 8019b1c:	4288      	cmp	r0, r1
 8019b1e:	d305      	bcc.n	8019b2c <__copybits+0x40>
 8019b20:	bd70      	pop	{r4, r5, r6, pc}
 8019b22:	f853 6b04 	ldr.w	r6, [r3], #4
 8019b26:	f845 6f04 	str.w	r6, [r5, #4]!
 8019b2a:	e7eb      	b.n	8019b04 <__copybits+0x18>
 8019b2c:	f840 3b04 	str.w	r3, [r0], #4
 8019b30:	e7f4      	b.n	8019b1c <__copybits+0x30>

08019b32 <__any_on>:
 8019b32:	f100 0214 	add.w	r2, r0, #20
 8019b36:	6900      	ldr	r0, [r0, #16]
 8019b38:	114b      	asrs	r3, r1, #5
 8019b3a:	4298      	cmp	r0, r3
 8019b3c:	b510      	push	{r4, lr}
 8019b3e:	db11      	blt.n	8019b64 <__any_on+0x32>
 8019b40:	dd0a      	ble.n	8019b58 <__any_on+0x26>
 8019b42:	f011 011f 	ands.w	r1, r1, #31
 8019b46:	d007      	beq.n	8019b58 <__any_on+0x26>
 8019b48:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019b4c:	fa24 f001 	lsr.w	r0, r4, r1
 8019b50:	fa00 f101 	lsl.w	r1, r0, r1
 8019b54:	428c      	cmp	r4, r1
 8019b56:	d10b      	bne.n	8019b70 <__any_on+0x3e>
 8019b58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019b5c:	4293      	cmp	r3, r2
 8019b5e:	d803      	bhi.n	8019b68 <__any_on+0x36>
 8019b60:	2000      	movs	r0, #0
 8019b62:	bd10      	pop	{r4, pc}
 8019b64:	4603      	mov	r3, r0
 8019b66:	e7f7      	b.n	8019b58 <__any_on+0x26>
 8019b68:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019b6c:	2900      	cmp	r1, #0
 8019b6e:	d0f5      	beq.n	8019b5c <__any_on+0x2a>
 8019b70:	2001      	movs	r0, #1
 8019b72:	e7f6      	b.n	8019b62 <__any_on+0x30>

08019b74 <sulp>:
 8019b74:	b570      	push	{r4, r5, r6, lr}
 8019b76:	4604      	mov	r4, r0
 8019b78:	460d      	mov	r5, r1
 8019b7a:	4616      	mov	r6, r2
 8019b7c:	ec45 4b10 	vmov	d0, r4, r5
 8019b80:	f7ff feba 	bl	80198f8 <__ulp>
 8019b84:	b17e      	cbz	r6, 8019ba6 <sulp+0x32>
 8019b86:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8019b8a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8019b8e:	2b00      	cmp	r3, #0
 8019b90:	dd09      	ble.n	8019ba6 <sulp+0x32>
 8019b92:	051b      	lsls	r3, r3, #20
 8019b94:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8019b98:	2000      	movs	r0, #0
 8019b9a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8019b9e:	ec41 0b17 	vmov	d7, r0, r1
 8019ba2:	ee20 0b07 	vmul.f64	d0, d0, d7
 8019ba6:	bd70      	pop	{r4, r5, r6, pc}

08019ba8 <_strtod_l>:
 8019ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019bac:	ed2d 8b0e 	vpush	{d8-d14}
 8019bb0:	b097      	sub	sp, #92	; 0x5c
 8019bb2:	4604      	mov	r4, r0
 8019bb4:	920d      	str	r2, [sp, #52]	; 0x34
 8019bb6:	2200      	movs	r2, #0
 8019bb8:	9212      	str	r2, [sp, #72]	; 0x48
 8019bba:	468a      	mov	sl, r1
 8019bbc:	f04f 0800 	mov.w	r8, #0
 8019bc0:	f04f 0900 	mov.w	r9, #0
 8019bc4:	460a      	mov	r2, r1
 8019bc6:	9211      	str	r2, [sp, #68]	; 0x44
 8019bc8:	7811      	ldrb	r1, [r2, #0]
 8019bca:	292b      	cmp	r1, #43	; 0x2b
 8019bcc:	d04c      	beq.n	8019c68 <_strtod_l+0xc0>
 8019bce:	d839      	bhi.n	8019c44 <_strtod_l+0x9c>
 8019bd0:	290d      	cmp	r1, #13
 8019bd2:	d833      	bhi.n	8019c3c <_strtod_l+0x94>
 8019bd4:	2908      	cmp	r1, #8
 8019bd6:	d833      	bhi.n	8019c40 <_strtod_l+0x98>
 8019bd8:	2900      	cmp	r1, #0
 8019bda:	d03c      	beq.n	8019c56 <_strtod_l+0xae>
 8019bdc:	2200      	movs	r2, #0
 8019bde:	9208      	str	r2, [sp, #32]
 8019be0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8019be2:	7832      	ldrb	r2, [r6, #0]
 8019be4:	2a30      	cmp	r2, #48	; 0x30
 8019be6:	f040 80b8 	bne.w	8019d5a <_strtod_l+0x1b2>
 8019bea:	7872      	ldrb	r2, [r6, #1]
 8019bec:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8019bf0:	2a58      	cmp	r2, #88	; 0x58
 8019bf2:	d170      	bne.n	8019cd6 <_strtod_l+0x12e>
 8019bf4:	9302      	str	r3, [sp, #8]
 8019bf6:	9b08      	ldr	r3, [sp, #32]
 8019bf8:	9301      	str	r3, [sp, #4]
 8019bfa:	ab12      	add	r3, sp, #72	; 0x48
 8019bfc:	9300      	str	r3, [sp, #0]
 8019bfe:	4a91      	ldr	r2, [pc, #580]	; (8019e44 <_strtod_l+0x29c>)
 8019c00:	ab13      	add	r3, sp, #76	; 0x4c
 8019c02:	a911      	add	r1, sp, #68	; 0x44
 8019c04:	4620      	mov	r0, r4
 8019c06:	f001 fc87 	bl	801b518 <__gethex>
 8019c0a:	f010 070f 	ands.w	r7, r0, #15
 8019c0e:	4605      	mov	r5, r0
 8019c10:	d005      	beq.n	8019c1e <_strtod_l+0x76>
 8019c12:	2f06      	cmp	r7, #6
 8019c14:	d12a      	bne.n	8019c6c <_strtod_l+0xc4>
 8019c16:	3601      	adds	r6, #1
 8019c18:	2300      	movs	r3, #0
 8019c1a:	9611      	str	r6, [sp, #68]	; 0x44
 8019c1c:	9308      	str	r3, [sp, #32]
 8019c1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019c20:	2b00      	cmp	r3, #0
 8019c22:	f040 8555 	bne.w	801a6d0 <_strtod_l+0xb28>
 8019c26:	9b08      	ldr	r3, [sp, #32]
 8019c28:	ec49 8b10 	vmov	d0, r8, r9
 8019c2c:	b1cb      	cbz	r3, 8019c62 <_strtod_l+0xba>
 8019c2e:	eeb1 0b40 	vneg.f64	d0, d0
 8019c32:	b017      	add	sp, #92	; 0x5c
 8019c34:	ecbd 8b0e 	vpop	{d8-d14}
 8019c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c3c:	2920      	cmp	r1, #32
 8019c3e:	d1cd      	bne.n	8019bdc <_strtod_l+0x34>
 8019c40:	3201      	adds	r2, #1
 8019c42:	e7c0      	b.n	8019bc6 <_strtod_l+0x1e>
 8019c44:	292d      	cmp	r1, #45	; 0x2d
 8019c46:	d1c9      	bne.n	8019bdc <_strtod_l+0x34>
 8019c48:	2101      	movs	r1, #1
 8019c4a:	9108      	str	r1, [sp, #32]
 8019c4c:	1c51      	adds	r1, r2, #1
 8019c4e:	9111      	str	r1, [sp, #68]	; 0x44
 8019c50:	7852      	ldrb	r2, [r2, #1]
 8019c52:	2a00      	cmp	r2, #0
 8019c54:	d1c4      	bne.n	8019be0 <_strtod_l+0x38>
 8019c56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019c58:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8019c5c:	2b00      	cmp	r3, #0
 8019c5e:	f040 8535 	bne.w	801a6cc <_strtod_l+0xb24>
 8019c62:	ec49 8b10 	vmov	d0, r8, r9
 8019c66:	e7e4      	b.n	8019c32 <_strtod_l+0x8a>
 8019c68:	2100      	movs	r1, #0
 8019c6a:	e7ee      	b.n	8019c4a <_strtod_l+0xa2>
 8019c6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019c6e:	b13a      	cbz	r2, 8019c80 <_strtod_l+0xd8>
 8019c70:	2135      	movs	r1, #53	; 0x35
 8019c72:	a814      	add	r0, sp, #80	; 0x50
 8019c74:	f7ff ff3a 	bl	8019aec <__copybits>
 8019c78:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019c7a:	4620      	mov	r0, r4
 8019c7c:	f7ff fb10 	bl	80192a0 <_Bfree>
 8019c80:	1e7b      	subs	r3, r7, #1
 8019c82:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019c84:	2b04      	cmp	r3, #4
 8019c86:	d806      	bhi.n	8019c96 <_strtod_l+0xee>
 8019c88:	e8df f003 	tbb	[pc, r3]
 8019c8c:	201d0314 	.word	0x201d0314
 8019c90:	14          	.byte	0x14
 8019c91:	00          	.byte	0x00
 8019c92:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8019c96:	05eb      	lsls	r3, r5, #23
 8019c98:	bf48      	it	mi
 8019c9a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8019c9e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019ca2:	0d1b      	lsrs	r3, r3, #20
 8019ca4:	051b      	lsls	r3, r3, #20
 8019ca6:	2b00      	cmp	r3, #0
 8019ca8:	d1b9      	bne.n	8019c1e <_strtod_l+0x76>
 8019caa:	f7fe fb79 	bl	80183a0 <__errno>
 8019cae:	2322      	movs	r3, #34	; 0x22
 8019cb0:	6003      	str	r3, [r0, #0]
 8019cb2:	e7b4      	b.n	8019c1e <_strtod_l+0x76>
 8019cb4:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8019cb8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8019cbc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8019cc0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8019cc4:	e7e7      	b.n	8019c96 <_strtod_l+0xee>
 8019cc6:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8019e4c <_strtod_l+0x2a4>
 8019cca:	e7e4      	b.n	8019c96 <_strtod_l+0xee>
 8019ccc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8019cd0:	f04f 38ff 	mov.w	r8, #4294967295
 8019cd4:	e7df      	b.n	8019c96 <_strtod_l+0xee>
 8019cd6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019cd8:	1c5a      	adds	r2, r3, #1
 8019cda:	9211      	str	r2, [sp, #68]	; 0x44
 8019cdc:	785b      	ldrb	r3, [r3, #1]
 8019cde:	2b30      	cmp	r3, #48	; 0x30
 8019ce0:	d0f9      	beq.n	8019cd6 <_strtod_l+0x12e>
 8019ce2:	2b00      	cmp	r3, #0
 8019ce4:	d09b      	beq.n	8019c1e <_strtod_l+0x76>
 8019ce6:	2301      	movs	r3, #1
 8019ce8:	9306      	str	r3, [sp, #24]
 8019cea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019cec:	9309      	str	r3, [sp, #36]	; 0x24
 8019cee:	2300      	movs	r3, #0
 8019cf0:	9305      	str	r3, [sp, #20]
 8019cf2:	9307      	str	r3, [sp, #28]
 8019cf4:	461e      	mov	r6, r3
 8019cf6:	220a      	movs	r2, #10
 8019cf8:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019cfa:	7805      	ldrb	r5, [r0, #0]
 8019cfc:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8019d00:	b2d9      	uxtb	r1, r3
 8019d02:	2909      	cmp	r1, #9
 8019d04:	d92b      	bls.n	8019d5e <_strtod_l+0x1b6>
 8019d06:	4950      	ldr	r1, [pc, #320]	; (8019e48 <_strtod_l+0x2a0>)
 8019d08:	2201      	movs	r2, #1
 8019d0a:	f001 fb3c 	bl	801b386 <strncmp>
 8019d0e:	2800      	cmp	r0, #0
 8019d10:	d035      	beq.n	8019d7e <_strtod_l+0x1d6>
 8019d12:	2000      	movs	r0, #0
 8019d14:	462a      	mov	r2, r5
 8019d16:	4633      	mov	r3, r6
 8019d18:	4683      	mov	fp, r0
 8019d1a:	4601      	mov	r1, r0
 8019d1c:	2a65      	cmp	r2, #101	; 0x65
 8019d1e:	d001      	beq.n	8019d24 <_strtod_l+0x17c>
 8019d20:	2a45      	cmp	r2, #69	; 0x45
 8019d22:	d118      	bne.n	8019d56 <_strtod_l+0x1ae>
 8019d24:	b91b      	cbnz	r3, 8019d2e <_strtod_l+0x186>
 8019d26:	9b06      	ldr	r3, [sp, #24]
 8019d28:	4303      	orrs	r3, r0
 8019d2a:	d094      	beq.n	8019c56 <_strtod_l+0xae>
 8019d2c:	2300      	movs	r3, #0
 8019d2e:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8019d32:	f10a 0201 	add.w	r2, sl, #1
 8019d36:	9211      	str	r2, [sp, #68]	; 0x44
 8019d38:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8019d3c:	2a2b      	cmp	r2, #43	; 0x2b
 8019d3e:	d075      	beq.n	8019e2c <_strtod_l+0x284>
 8019d40:	2a2d      	cmp	r2, #45	; 0x2d
 8019d42:	d07b      	beq.n	8019e3c <_strtod_l+0x294>
 8019d44:	f04f 0e00 	mov.w	lr, #0
 8019d48:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8019d4c:	2d09      	cmp	r5, #9
 8019d4e:	f240 8083 	bls.w	8019e58 <_strtod_l+0x2b0>
 8019d52:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8019d56:	2500      	movs	r5, #0
 8019d58:	e09e      	b.n	8019e98 <_strtod_l+0x2f0>
 8019d5a:	2300      	movs	r3, #0
 8019d5c:	e7c4      	b.n	8019ce8 <_strtod_l+0x140>
 8019d5e:	2e08      	cmp	r6, #8
 8019d60:	bfd5      	itete	le
 8019d62:	9907      	ldrle	r1, [sp, #28]
 8019d64:	9905      	ldrgt	r1, [sp, #20]
 8019d66:	fb02 3301 	mlale	r3, r2, r1, r3
 8019d6a:	fb02 3301 	mlagt	r3, r2, r1, r3
 8019d6e:	f100 0001 	add.w	r0, r0, #1
 8019d72:	bfd4      	ite	le
 8019d74:	9307      	strle	r3, [sp, #28]
 8019d76:	9305      	strgt	r3, [sp, #20]
 8019d78:	3601      	adds	r6, #1
 8019d7a:	9011      	str	r0, [sp, #68]	; 0x44
 8019d7c:	e7bc      	b.n	8019cf8 <_strtod_l+0x150>
 8019d7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019d80:	1c5a      	adds	r2, r3, #1
 8019d82:	9211      	str	r2, [sp, #68]	; 0x44
 8019d84:	785a      	ldrb	r2, [r3, #1]
 8019d86:	b3ae      	cbz	r6, 8019df4 <_strtod_l+0x24c>
 8019d88:	4683      	mov	fp, r0
 8019d8a:	4633      	mov	r3, r6
 8019d8c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8019d90:	2909      	cmp	r1, #9
 8019d92:	d912      	bls.n	8019dba <_strtod_l+0x212>
 8019d94:	2101      	movs	r1, #1
 8019d96:	e7c1      	b.n	8019d1c <_strtod_l+0x174>
 8019d98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019d9a:	1c5a      	adds	r2, r3, #1
 8019d9c:	9211      	str	r2, [sp, #68]	; 0x44
 8019d9e:	785a      	ldrb	r2, [r3, #1]
 8019da0:	3001      	adds	r0, #1
 8019da2:	2a30      	cmp	r2, #48	; 0x30
 8019da4:	d0f8      	beq.n	8019d98 <_strtod_l+0x1f0>
 8019da6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8019daa:	2b08      	cmp	r3, #8
 8019dac:	f200 8495 	bhi.w	801a6da <_strtod_l+0xb32>
 8019db0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019db2:	9309      	str	r3, [sp, #36]	; 0x24
 8019db4:	4683      	mov	fp, r0
 8019db6:	2000      	movs	r0, #0
 8019db8:	4603      	mov	r3, r0
 8019dba:	3a30      	subs	r2, #48	; 0x30
 8019dbc:	f100 0101 	add.w	r1, r0, #1
 8019dc0:	d012      	beq.n	8019de8 <_strtod_l+0x240>
 8019dc2:	448b      	add	fp, r1
 8019dc4:	eb00 0c03 	add.w	ip, r0, r3
 8019dc8:	4619      	mov	r1, r3
 8019dca:	250a      	movs	r5, #10
 8019dcc:	4561      	cmp	r1, ip
 8019dce:	d113      	bne.n	8019df8 <_strtod_l+0x250>
 8019dd0:	1819      	adds	r1, r3, r0
 8019dd2:	2908      	cmp	r1, #8
 8019dd4:	f103 0301 	add.w	r3, r3, #1
 8019dd8:	4403      	add	r3, r0
 8019dda:	dc1b      	bgt.n	8019e14 <_strtod_l+0x26c>
 8019ddc:	9807      	ldr	r0, [sp, #28]
 8019dde:	210a      	movs	r1, #10
 8019de0:	fb01 2200 	mla	r2, r1, r0, r2
 8019de4:	9207      	str	r2, [sp, #28]
 8019de6:	2100      	movs	r1, #0
 8019de8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019dea:	1c50      	adds	r0, r2, #1
 8019dec:	9011      	str	r0, [sp, #68]	; 0x44
 8019dee:	7852      	ldrb	r2, [r2, #1]
 8019df0:	4608      	mov	r0, r1
 8019df2:	e7cb      	b.n	8019d8c <_strtod_l+0x1e4>
 8019df4:	4630      	mov	r0, r6
 8019df6:	e7d4      	b.n	8019da2 <_strtod_l+0x1fa>
 8019df8:	2908      	cmp	r1, #8
 8019dfa:	f101 0101 	add.w	r1, r1, #1
 8019dfe:	dc03      	bgt.n	8019e08 <_strtod_l+0x260>
 8019e00:	9f07      	ldr	r7, [sp, #28]
 8019e02:	436f      	muls	r7, r5
 8019e04:	9707      	str	r7, [sp, #28]
 8019e06:	e7e1      	b.n	8019dcc <_strtod_l+0x224>
 8019e08:	2910      	cmp	r1, #16
 8019e0a:	bfde      	ittt	le
 8019e0c:	9f05      	ldrle	r7, [sp, #20]
 8019e0e:	436f      	mulle	r7, r5
 8019e10:	9705      	strle	r7, [sp, #20]
 8019e12:	e7db      	b.n	8019dcc <_strtod_l+0x224>
 8019e14:	2b10      	cmp	r3, #16
 8019e16:	bfdf      	itttt	le
 8019e18:	9805      	ldrle	r0, [sp, #20]
 8019e1a:	210a      	movle	r1, #10
 8019e1c:	fb01 2200 	mlale	r2, r1, r0, r2
 8019e20:	9205      	strle	r2, [sp, #20]
 8019e22:	e7e0      	b.n	8019de6 <_strtod_l+0x23e>
 8019e24:	f04f 0b00 	mov.w	fp, #0
 8019e28:	2101      	movs	r1, #1
 8019e2a:	e77c      	b.n	8019d26 <_strtod_l+0x17e>
 8019e2c:	f04f 0e00 	mov.w	lr, #0
 8019e30:	f10a 0202 	add.w	r2, sl, #2
 8019e34:	9211      	str	r2, [sp, #68]	; 0x44
 8019e36:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8019e3a:	e785      	b.n	8019d48 <_strtod_l+0x1a0>
 8019e3c:	f04f 0e01 	mov.w	lr, #1
 8019e40:	e7f6      	b.n	8019e30 <_strtod_l+0x288>
 8019e42:	bf00      	nop
 8019e44:	0801c678 	.word	0x0801c678
 8019e48:	0801c674 	.word	0x0801c674
 8019e4c:	7ff00000 	.word	0x7ff00000
 8019e50:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019e52:	1c55      	adds	r5, r2, #1
 8019e54:	9511      	str	r5, [sp, #68]	; 0x44
 8019e56:	7852      	ldrb	r2, [r2, #1]
 8019e58:	2a30      	cmp	r2, #48	; 0x30
 8019e5a:	d0f9      	beq.n	8019e50 <_strtod_l+0x2a8>
 8019e5c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8019e60:	2d08      	cmp	r5, #8
 8019e62:	f63f af78 	bhi.w	8019d56 <_strtod_l+0x1ae>
 8019e66:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8019e6a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019e6c:	920a      	str	r2, [sp, #40]	; 0x28
 8019e6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019e70:	1c55      	adds	r5, r2, #1
 8019e72:	9511      	str	r5, [sp, #68]	; 0x44
 8019e74:	7852      	ldrb	r2, [r2, #1]
 8019e76:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8019e7a:	2f09      	cmp	r7, #9
 8019e7c:	d937      	bls.n	8019eee <_strtod_l+0x346>
 8019e7e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8019e80:	1bed      	subs	r5, r5, r7
 8019e82:	2d08      	cmp	r5, #8
 8019e84:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8019e88:	dc02      	bgt.n	8019e90 <_strtod_l+0x2e8>
 8019e8a:	4565      	cmp	r5, ip
 8019e8c:	bfa8      	it	ge
 8019e8e:	4665      	movge	r5, ip
 8019e90:	f1be 0f00 	cmp.w	lr, #0
 8019e94:	d000      	beq.n	8019e98 <_strtod_l+0x2f0>
 8019e96:	426d      	negs	r5, r5
 8019e98:	2b00      	cmp	r3, #0
 8019e9a:	d14d      	bne.n	8019f38 <_strtod_l+0x390>
 8019e9c:	9b06      	ldr	r3, [sp, #24]
 8019e9e:	4303      	orrs	r3, r0
 8019ea0:	f47f aebd 	bne.w	8019c1e <_strtod_l+0x76>
 8019ea4:	2900      	cmp	r1, #0
 8019ea6:	f47f aed6 	bne.w	8019c56 <_strtod_l+0xae>
 8019eaa:	2a69      	cmp	r2, #105	; 0x69
 8019eac:	d027      	beq.n	8019efe <_strtod_l+0x356>
 8019eae:	dc24      	bgt.n	8019efa <_strtod_l+0x352>
 8019eb0:	2a49      	cmp	r2, #73	; 0x49
 8019eb2:	d024      	beq.n	8019efe <_strtod_l+0x356>
 8019eb4:	2a4e      	cmp	r2, #78	; 0x4e
 8019eb6:	f47f aece 	bne.w	8019c56 <_strtod_l+0xae>
 8019eba:	4995      	ldr	r1, [pc, #596]	; (801a110 <_strtod_l+0x568>)
 8019ebc:	a811      	add	r0, sp, #68	; 0x44
 8019ebe:	f001 fd6b 	bl	801b998 <__match>
 8019ec2:	2800      	cmp	r0, #0
 8019ec4:	f43f aec7 	beq.w	8019c56 <_strtod_l+0xae>
 8019ec8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019eca:	781b      	ldrb	r3, [r3, #0]
 8019ecc:	2b28      	cmp	r3, #40	; 0x28
 8019ece:	d12d      	bne.n	8019f2c <_strtod_l+0x384>
 8019ed0:	4990      	ldr	r1, [pc, #576]	; (801a114 <_strtod_l+0x56c>)
 8019ed2:	aa14      	add	r2, sp, #80	; 0x50
 8019ed4:	a811      	add	r0, sp, #68	; 0x44
 8019ed6:	f001 fd73 	bl	801b9c0 <__hexnan>
 8019eda:	2805      	cmp	r0, #5
 8019edc:	d126      	bne.n	8019f2c <_strtod_l+0x384>
 8019ede:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019ee0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8019ee4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8019ee8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8019eec:	e697      	b.n	8019c1e <_strtod_l+0x76>
 8019eee:	250a      	movs	r5, #10
 8019ef0:	fb05 2c0c 	mla	ip, r5, ip, r2
 8019ef4:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8019ef8:	e7b9      	b.n	8019e6e <_strtod_l+0x2c6>
 8019efa:	2a6e      	cmp	r2, #110	; 0x6e
 8019efc:	e7db      	b.n	8019eb6 <_strtod_l+0x30e>
 8019efe:	4986      	ldr	r1, [pc, #536]	; (801a118 <_strtod_l+0x570>)
 8019f00:	a811      	add	r0, sp, #68	; 0x44
 8019f02:	f001 fd49 	bl	801b998 <__match>
 8019f06:	2800      	cmp	r0, #0
 8019f08:	f43f aea5 	beq.w	8019c56 <_strtod_l+0xae>
 8019f0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019f0e:	4983      	ldr	r1, [pc, #524]	; (801a11c <_strtod_l+0x574>)
 8019f10:	3b01      	subs	r3, #1
 8019f12:	a811      	add	r0, sp, #68	; 0x44
 8019f14:	9311      	str	r3, [sp, #68]	; 0x44
 8019f16:	f001 fd3f 	bl	801b998 <__match>
 8019f1a:	b910      	cbnz	r0, 8019f22 <_strtod_l+0x37a>
 8019f1c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019f1e:	3301      	adds	r3, #1
 8019f20:	9311      	str	r3, [sp, #68]	; 0x44
 8019f22:	f8df 920c 	ldr.w	r9, [pc, #524]	; 801a130 <_strtod_l+0x588>
 8019f26:	f04f 0800 	mov.w	r8, #0
 8019f2a:	e678      	b.n	8019c1e <_strtod_l+0x76>
 8019f2c:	487c      	ldr	r0, [pc, #496]	; (801a120 <_strtod_l+0x578>)
 8019f2e:	f001 fa4f 	bl	801b3d0 <nan>
 8019f32:	ec59 8b10 	vmov	r8, r9, d0
 8019f36:	e672      	b.n	8019c1e <_strtod_l+0x76>
 8019f38:	eddd 7a07 	vldr	s15, [sp, #28]
 8019f3c:	eba5 020b 	sub.w	r2, r5, fp
 8019f40:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8019f44:	2e00      	cmp	r6, #0
 8019f46:	bf08      	it	eq
 8019f48:	461e      	moveq	r6, r3
 8019f4a:	2b10      	cmp	r3, #16
 8019f4c:	9206      	str	r2, [sp, #24]
 8019f4e:	461a      	mov	r2, r3
 8019f50:	bfa8      	it	ge
 8019f52:	2210      	movge	r2, #16
 8019f54:	2b09      	cmp	r3, #9
 8019f56:	ec59 8b17 	vmov	r8, r9, d7
 8019f5a:	dd0c      	ble.n	8019f76 <_strtod_l+0x3ce>
 8019f5c:	4971      	ldr	r1, [pc, #452]	; (801a124 <_strtod_l+0x57c>)
 8019f5e:	eddd 6a05 	vldr	s13, [sp, #20]
 8019f62:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8019f66:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8019f6a:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8019f6e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8019f72:	ec59 8b16 	vmov	r8, r9, d6
 8019f76:	2b0f      	cmp	r3, #15
 8019f78:	dc37      	bgt.n	8019fea <_strtod_l+0x442>
 8019f7a:	9906      	ldr	r1, [sp, #24]
 8019f7c:	2900      	cmp	r1, #0
 8019f7e:	f43f ae4e 	beq.w	8019c1e <_strtod_l+0x76>
 8019f82:	dd23      	ble.n	8019fcc <_strtod_l+0x424>
 8019f84:	2916      	cmp	r1, #22
 8019f86:	dc0b      	bgt.n	8019fa0 <_strtod_l+0x3f8>
 8019f88:	4b66      	ldr	r3, [pc, #408]	; (801a124 <_strtod_l+0x57c>)
 8019f8a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8019f8e:	ed93 7b00 	vldr	d7, [r3]
 8019f92:	ec49 8b16 	vmov	d6, r8, r9
 8019f96:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019f9a:	ec59 8b17 	vmov	r8, r9, d7
 8019f9e:	e63e      	b.n	8019c1e <_strtod_l+0x76>
 8019fa0:	9806      	ldr	r0, [sp, #24]
 8019fa2:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8019fa6:	4281      	cmp	r1, r0
 8019fa8:	db1f      	blt.n	8019fea <_strtod_l+0x442>
 8019faa:	4a5e      	ldr	r2, [pc, #376]	; (801a124 <_strtod_l+0x57c>)
 8019fac:	f1c3 030f 	rsb	r3, r3, #15
 8019fb0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8019fb4:	ed91 7b00 	vldr	d7, [r1]
 8019fb8:	ec49 8b16 	vmov	d6, r8, r9
 8019fbc:	1ac3      	subs	r3, r0, r3
 8019fbe:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8019fc2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019fc6:	ed92 6b00 	vldr	d6, [r2]
 8019fca:	e7e4      	b.n	8019f96 <_strtod_l+0x3ee>
 8019fcc:	9906      	ldr	r1, [sp, #24]
 8019fce:	3116      	adds	r1, #22
 8019fd0:	db0b      	blt.n	8019fea <_strtod_l+0x442>
 8019fd2:	4b54      	ldr	r3, [pc, #336]	; (801a124 <_strtod_l+0x57c>)
 8019fd4:	ebab 0505 	sub.w	r5, fp, r5
 8019fd8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8019fdc:	ed95 7b00 	vldr	d7, [r5]
 8019fe0:	ec49 8b16 	vmov	d6, r8, r9
 8019fe4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8019fe8:	e7d7      	b.n	8019f9a <_strtod_l+0x3f2>
 8019fea:	9906      	ldr	r1, [sp, #24]
 8019fec:	1a9a      	subs	r2, r3, r2
 8019fee:	440a      	add	r2, r1
 8019ff0:	2a00      	cmp	r2, #0
 8019ff2:	dd6e      	ble.n	801a0d2 <_strtod_l+0x52a>
 8019ff4:	f012 000f 	ands.w	r0, r2, #15
 8019ff8:	d00a      	beq.n	801a010 <_strtod_l+0x468>
 8019ffa:	494a      	ldr	r1, [pc, #296]	; (801a124 <_strtod_l+0x57c>)
 8019ffc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801a000:	ed91 7b00 	vldr	d7, [r1]
 801a004:	ec49 8b16 	vmov	d6, r8, r9
 801a008:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a00c:	ec59 8b17 	vmov	r8, r9, d7
 801a010:	f032 020f 	bics.w	r2, r2, #15
 801a014:	d04e      	beq.n	801a0b4 <_strtod_l+0x50c>
 801a016:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801a01a:	dd22      	ble.n	801a062 <_strtod_l+0x4ba>
 801a01c:	2500      	movs	r5, #0
 801a01e:	462e      	mov	r6, r5
 801a020:	9507      	str	r5, [sp, #28]
 801a022:	462f      	mov	r7, r5
 801a024:	2322      	movs	r3, #34	; 0x22
 801a026:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801a130 <_strtod_l+0x588>
 801a02a:	6023      	str	r3, [r4, #0]
 801a02c:	f04f 0800 	mov.w	r8, #0
 801a030:	9b07      	ldr	r3, [sp, #28]
 801a032:	2b00      	cmp	r3, #0
 801a034:	f43f adf3 	beq.w	8019c1e <_strtod_l+0x76>
 801a038:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a03a:	4620      	mov	r0, r4
 801a03c:	f7ff f930 	bl	80192a0 <_Bfree>
 801a040:	4639      	mov	r1, r7
 801a042:	4620      	mov	r0, r4
 801a044:	f7ff f92c 	bl	80192a0 <_Bfree>
 801a048:	4631      	mov	r1, r6
 801a04a:	4620      	mov	r0, r4
 801a04c:	f7ff f928 	bl	80192a0 <_Bfree>
 801a050:	9907      	ldr	r1, [sp, #28]
 801a052:	4620      	mov	r0, r4
 801a054:	f7ff f924 	bl	80192a0 <_Bfree>
 801a058:	4629      	mov	r1, r5
 801a05a:	4620      	mov	r0, r4
 801a05c:	f7ff f920 	bl	80192a0 <_Bfree>
 801a060:	e5dd      	b.n	8019c1e <_strtod_l+0x76>
 801a062:	2000      	movs	r0, #0
 801a064:	ec49 8b17 	vmov	d7, r8, r9
 801a068:	4f2f      	ldr	r7, [pc, #188]	; (801a128 <_strtod_l+0x580>)
 801a06a:	1112      	asrs	r2, r2, #4
 801a06c:	4601      	mov	r1, r0
 801a06e:	2a01      	cmp	r2, #1
 801a070:	dc23      	bgt.n	801a0ba <_strtod_l+0x512>
 801a072:	b108      	cbz	r0, 801a078 <_strtod_l+0x4d0>
 801a074:	ec59 8b17 	vmov	r8, r9, d7
 801a078:	4a2b      	ldr	r2, [pc, #172]	; (801a128 <_strtod_l+0x580>)
 801a07a:	482c      	ldr	r0, [pc, #176]	; (801a12c <_strtod_l+0x584>)
 801a07c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801a080:	ed92 7b00 	vldr	d7, [r2]
 801a084:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801a088:	ec49 8b16 	vmov	d6, r8, r9
 801a08c:	4a28      	ldr	r2, [pc, #160]	; (801a130 <_strtod_l+0x588>)
 801a08e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a092:	ee17 1a90 	vmov	r1, s15
 801a096:	400a      	ands	r2, r1
 801a098:	4282      	cmp	r2, r0
 801a09a:	ec59 8b17 	vmov	r8, r9, d7
 801a09e:	d8bd      	bhi.n	801a01c <_strtod_l+0x474>
 801a0a0:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801a0a4:	4282      	cmp	r2, r0
 801a0a6:	bf86      	itte	hi
 801a0a8:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 801a134 <_strtod_l+0x58c>
 801a0ac:	f04f 38ff 	movhi.w	r8, #4294967295
 801a0b0:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801a0b4:	2200      	movs	r2, #0
 801a0b6:	9205      	str	r2, [sp, #20]
 801a0b8:	e076      	b.n	801a1a8 <_strtod_l+0x600>
 801a0ba:	f012 0f01 	tst.w	r2, #1
 801a0be:	d004      	beq.n	801a0ca <_strtod_l+0x522>
 801a0c0:	ed97 6b00 	vldr	d6, [r7]
 801a0c4:	2001      	movs	r0, #1
 801a0c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a0ca:	3101      	adds	r1, #1
 801a0cc:	1052      	asrs	r2, r2, #1
 801a0ce:	3708      	adds	r7, #8
 801a0d0:	e7cd      	b.n	801a06e <_strtod_l+0x4c6>
 801a0d2:	d0ef      	beq.n	801a0b4 <_strtod_l+0x50c>
 801a0d4:	4252      	negs	r2, r2
 801a0d6:	f012 000f 	ands.w	r0, r2, #15
 801a0da:	d00a      	beq.n	801a0f2 <_strtod_l+0x54a>
 801a0dc:	4911      	ldr	r1, [pc, #68]	; (801a124 <_strtod_l+0x57c>)
 801a0de:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801a0e2:	ed91 7b00 	vldr	d7, [r1]
 801a0e6:	ec49 8b16 	vmov	d6, r8, r9
 801a0ea:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801a0ee:	ec59 8b17 	vmov	r8, r9, d7
 801a0f2:	1112      	asrs	r2, r2, #4
 801a0f4:	d0de      	beq.n	801a0b4 <_strtod_l+0x50c>
 801a0f6:	2a1f      	cmp	r2, #31
 801a0f8:	dd1e      	ble.n	801a138 <_strtod_l+0x590>
 801a0fa:	2500      	movs	r5, #0
 801a0fc:	462e      	mov	r6, r5
 801a0fe:	9507      	str	r5, [sp, #28]
 801a100:	462f      	mov	r7, r5
 801a102:	2322      	movs	r3, #34	; 0x22
 801a104:	f04f 0800 	mov.w	r8, #0
 801a108:	f04f 0900 	mov.w	r9, #0
 801a10c:	6023      	str	r3, [r4, #0]
 801a10e:	e78f      	b.n	801a030 <_strtod_l+0x488>
 801a110:	0801c461 	.word	0x0801c461
 801a114:	0801c68c 	.word	0x0801c68c
 801a118:	0801c459 	.word	0x0801c459
 801a11c:	0801c48e 	.word	0x0801c48e
 801a120:	0801c838 	.word	0x0801c838
 801a124:	0801c5a0 	.word	0x0801c5a0
 801a128:	0801c578 	.word	0x0801c578
 801a12c:	7ca00000 	.word	0x7ca00000
 801a130:	7ff00000 	.word	0x7ff00000
 801a134:	7fefffff 	.word	0x7fefffff
 801a138:	f012 0110 	ands.w	r1, r2, #16
 801a13c:	bf18      	it	ne
 801a13e:	216a      	movne	r1, #106	; 0x6a
 801a140:	9105      	str	r1, [sp, #20]
 801a142:	ec49 8b17 	vmov	d7, r8, r9
 801a146:	49be      	ldr	r1, [pc, #760]	; (801a440 <_strtod_l+0x898>)
 801a148:	2000      	movs	r0, #0
 801a14a:	07d7      	lsls	r7, r2, #31
 801a14c:	d504      	bpl.n	801a158 <_strtod_l+0x5b0>
 801a14e:	ed91 6b00 	vldr	d6, [r1]
 801a152:	2001      	movs	r0, #1
 801a154:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a158:	1052      	asrs	r2, r2, #1
 801a15a:	f101 0108 	add.w	r1, r1, #8
 801a15e:	d1f4      	bne.n	801a14a <_strtod_l+0x5a2>
 801a160:	b108      	cbz	r0, 801a166 <_strtod_l+0x5be>
 801a162:	ec59 8b17 	vmov	r8, r9, d7
 801a166:	9a05      	ldr	r2, [sp, #20]
 801a168:	b1ba      	cbz	r2, 801a19a <_strtod_l+0x5f2>
 801a16a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 801a16e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 801a172:	2a00      	cmp	r2, #0
 801a174:	4648      	mov	r0, r9
 801a176:	dd10      	ble.n	801a19a <_strtod_l+0x5f2>
 801a178:	2a1f      	cmp	r2, #31
 801a17a:	f340 812c 	ble.w	801a3d6 <_strtod_l+0x82e>
 801a17e:	2a34      	cmp	r2, #52	; 0x34
 801a180:	bfde      	ittt	le
 801a182:	f04f 32ff 	movle.w	r2, #4294967295
 801a186:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 801a18a:	408a      	lslle	r2, r1
 801a18c:	f04f 0800 	mov.w	r8, #0
 801a190:	bfcc      	ite	gt
 801a192:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801a196:	ea02 0900 	andle.w	r9, r2, r0
 801a19a:	ec49 8b17 	vmov	d7, r8, r9
 801a19e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a1a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a1a6:	d0a8      	beq.n	801a0fa <_strtod_l+0x552>
 801a1a8:	9a07      	ldr	r2, [sp, #28]
 801a1aa:	9200      	str	r2, [sp, #0]
 801a1ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a1ae:	4632      	mov	r2, r6
 801a1b0:	4620      	mov	r0, r4
 801a1b2:	f7ff f8dd 	bl	8019370 <__s2b>
 801a1b6:	9007      	str	r0, [sp, #28]
 801a1b8:	2800      	cmp	r0, #0
 801a1ba:	f43f af2f 	beq.w	801a01c <_strtod_l+0x474>
 801a1be:	9a06      	ldr	r2, [sp, #24]
 801a1c0:	2a00      	cmp	r2, #0
 801a1c2:	ebab 0305 	sub.w	r3, fp, r5
 801a1c6:	ed9f 9b96 	vldr	d9, [pc, #600]	; 801a420 <_strtod_l+0x878>
 801a1ca:	bfa8      	it	ge
 801a1cc:	2300      	movge	r3, #0
 801a1ce:	ed9f ab96 	vldr	d10, [pc, #600]	; 801a428 <_strtod_l+0x880>
 801a1d2:	ed9f bb97 	vldr	d11, [pc, #604]	; 801a430 <_strtod_l+0x888>
 801a1d6:	9309      	str	r3, [sp, #36]	; 0x24
 801a1d8:	2500      	movs	r5, #0
 801a1da:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801a1de:	930c      	str	r3, [sp, #48]	; 0x30
 801a1e0:	462e      	mov	r6, r5
 801a1e2:	9b07      	ldr	r3, [sp, #28]
 801a1e4:	4620      	mov	r0, r4
 801a1e6:	6859      	ldr	r1, [r3, #4]
 801a1e8:	f7ff f81a 	bl	8019220 <_Balloc>
 801a1ec:	4607      	mov	r7, r0
 801a1ee:	2800      	cmp	r0, #0
 801a1f0:	f43f af18 	beq.w	801a024 <_strtod_l+0x47c>
 801a1f4:	9b07      	ldr	r3, [sp, #28]
 801a1f6:	691a      	ldr	r2, [r3, #16]
 801a1f8:	3202      	adds	r2, #2
 801a1fa:	f103 010c 	add.w	r1, r3, #12
 801a1fe:	0092      	lsls	r2, r2, #2
 801a200:	300c      	adds	r0, #12
 801a202:	f7fe f902 	bl	801840a <memcpy>
 801a206:	ec49 8b10 	vmov	d0, r8, r9
 801a20a:	aa14      	add	r2, sp, #80	; 0x50
 801a20c:	a913      	add	r1, sp, #76	; 0x4c
 801a20e:	4620      	mov	r0, r4
 801a210:	f7ff fbe2 	bl	80199d8 <__d2b>
 801a214:	ec49 8b18 	vmov	d8, r8, r9
 801a218:	9012      	str	r0, [sp, #72]	; 0x48
 801a21a:	2800      	cmp	r0, #0
 801a21c:	f43f af02 	beq.w	801a024 <_strtod_l+0x47c>
 801a220:	2101      	movs	r1, #1
 801a222:	4620      	mov	r0, r4
 801a224:	f7ff f93c 	bl	80194a0 <__i2b>
 801a228:	4606      	mov	r6, r0
 801a22a:	2800      	cmp	r0, #0
 801a22c:	f43f aefa 	beq.w	801a024 <_strtod_l+0x47c>
 801a230:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a232:	9914      	ldr	r1, [sp, #80]	; 0x50
 801a234:	2b00      	cmp	r3, #0
 801a236:	bfab      	itete	ge
 801a238:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 801a23a:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 801a23c:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 801a240:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 801a244:	bfac      	ite	ge
 801a246:	eb03 0b02 	addge.w	fp, r3, r2
 801a24a:	eba2 0a03 	sublt.w	sl, r2, r3
 801a24e:	9a05      	ldr	r2, [sp, #20]
 801a250:	1a9b      	subs	r3, r3, r2
 801a252:	440b      	add	r3, r1
 801a254:	4a7b      	ldr	r2, [pc, #492]	; (801a444 <_strtod_l+0x89c>)
 801a256:	3b01      	subs	r3, #1
 801a258:	4293      	cmp	r3, r2
 801a25a:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 801a25e:	f280 80cd 	bge.w	801a3fc <_strtod_l+0x854>
 801a262:	1ad2      	subs	r2, r2, r3
 801a264:	2a1f      	cmp	r2, #31
 801a266:	eba1 0102 	sub.w	r1, r1, r2
 801a26a:	f04f 0001 	mov.w	r0, #1
 801a26e:	f300 80b9 	bgt.w	801a3e4 <_strtod_l+0x83c>
 801a272:	fa00 f302 	lsl.w	r3, r0, r2
 801a276:	930b      	str	r3, [sp, #44]	; 0x2c
 801a278:	2300      	movs	r3, #0
 801a27a:	930a      	str	r3, [sp, #40]	; 0x28
 801a27c:	eb0b 0301 	add.w	r3, fp, r1
 801a280:	9a05      	ldr	r2, [sp, #20]
 801a282:	459b      	cmp	fp, r3
 801a284:	448a      	add	sl, r1
 801a286:	4492      	add	sl, r2
 801a288:	465a      	mov	r2, fp
 801a28a:	bfa8      	it	ge
 801a28c:	461a      	movge	r2, r3
 801a28e:	4552      	cmp	r2, sl
 801a290:	bfa8      	it	ge
 801a292:	4652      	movge	r2, sl
 801a294:	2a00      	cmp	r2, #0
 801a296:	bfc2      	ittt	gt
 801a298:	1a9b      	subgt	r3, r3, r2
 801a29a:	ebaa 0a02 	subgt.w	sl, sl, r2
 801a29e:	ebab 0b02 	subgt.w	fp, fp, r2
 801a2a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a2a4:	2a00      	cmp	r2, #0
 801a2a6:	dd18      	ble.n	801a2da <_strtod_l+0x732>
 801a2a8:	4631      	mov	r1, r6
 801a2aa:	4620      	mov	r0, r4
 801a2ac:	930f      	str	r3, [sp, #60]	; 0x3c
 801a2ae:	f7ff f9b7 	bl	8019620 <__pow5mult>
 801a2b2:	4606      	mov	r6, r0
 801a2b4:	2800      	cmp	r0, #0
 801a2b6:	f43f aeb5 	beq.w	801a024 <_strtod_l+0x47c>
 801a2ba:	4601      	mov	r1, r0
 801a2bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a2be:	4620      	mov	r0, r4
 801a2c0:	f7ff f904 	bl	80194cc <__multiply>
 801a2c4:	900e      	str	r0, [sp, #56]	; 0x38
 801a2c6:	2800      	cmp	r0, #0
 801a2c8:	f43f aeac 	beq.w	801a024 <_strtod_l+0x47c>
 801a2cc:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a2ce:	4620      	mov	r0, r4
 801a2d0:	f7fe ffe6 	bl	80192a0 <_Bfree>
 801a2d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a2d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a2d8:	9212      	str	r2, [sp, #72]	; 0x48
 801a2da:	2b00      	cmp	r3, #0
 801a2dc:	f300 8093 	bgt.w	801a406 <_strtod_l+0x85e>
 801a2e0:	9b06      	ldr	r3, [sp, #24]
 801a2e2:	2b00      	cmp	r3, #0
 801a2e4:	dd08      	ble.n	801a2f8 <_strtod_l+0x750>
 801a2e6:	4639      	mov	r1, r7
 801a2e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a2ea:	4620      	mov	r0, r4
 801a2ec:	f7ff f998 	bl	8019620 <__pow5mult>
 801a2f0:	4607      	mov	r7, r0
 801a2f2:	2800      	cmp	r0, #0
 801a2f4:	f43f ae96 	beq.w	801a024 <_strtod_l+0x47c>
 801a2f8:	f1ba 0f00 	cmp.w	sl, #0
 801a2fc:	dd08      	ble.n	801a310 <_strtod_l+0x768>
 801a2fe:	4639      	mov	r1, r7
 801a300:	4652      	mov	r2, sl
 801a302:	4620      	mov	r0, r4
 801a304:	f7ff f9e6 	bl	80196d4 <__lshift>
 801a308:	4607      	mov	r7, r0
 801a30a:	2800      	cmp	r0, #0
 801a30c:	f43f ae8a 	beq.w	801a024 <_strtod_l+0x47c>
 801a310:	f1bb 0f00 	cmp.w	fp, #0
 801a314:	dd08      	ble.n	801a328 <_strtod_l+0x780>
 801a316:	4631      	mov	r1, r6
 801a318:	465a      	mov	r2, fp
 801a31a:	4620      	mov	r0, r4
 801a31c:	f7ff f9da 	bl	80196d4 <__lshift>
 801a320:	4606      	mov	r6, r0
 801a322:	2800      	cmp	r0, #0
 801a324:	f43f ae7e 	beq.w	801a024 <_strtod_l+0x47c>
 801a328:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a32a:	463a      	mov	r2, r7
 801a32c:	4620      	mov	r0, r4
 801a32e:	f7ff fa59 	bl	80197e4 <__mdiff>
 801a332:	4605      	mov	r5, r0
 801a334:	2800      	cmp	r0, #0
 801a336:	f43f ae75 	beq.w	801a024 <_strtod_l+0x47c>
 801a33a:	2300      	movs	r3, #0
 801a33c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 801a340:	60c3      	str	r3, [r0, #12]
 801a342:	4631      	mov	r1, r6
 801a344:	f7ff fa32 	bl	80197ac <__mcmp>
 801a348:	2800      	cmp	r0, #0
 801a34a:	da7f      	bge.n	801a44c <_strtod_l+0x8a4>
 801a34c:	ea5a 0a08 	orrs.w	sl, sl, r8
 801a350:	f040 80a5 	bne.w	801a49e <_strtod_l+0x8f6>
 801a354:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a358:	2b00      	cmp	r3, #0
 801a35a:	f040 80a0 	bne.w	801a49e <_strtod_l+0x8f6>
 801a35e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801a362:	0d1b      	lsrs	r3, r3, #20
 801a364:	051b      	lsls	r3, r3, #20
 801a366:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801a36a:	f240 8098 	bls.w	801a49e <_strtod_l+0x8f6>
 801a36e:	696b      	ldr	r3, [r5, #20]
 801a370:	b91b      	cbnz	r3, 801a37a <_strtod_l+0x7d2>
 801a372:	692b      	ldr	r3, [r5, #16]
 801a374:	2b01      	cmp	r3, #1
 801a376:	f340 8092 	ble.w	801a49e <_strtod_l+0x8f6>
 801a37a:	4629      	mov	r1, r5
 801a37c:	2201      	movs	r2, #1
 801a37e:	4620      	mov	r0, r4
 801a380:	f7ff f9a8 	bl	80196d4 <__lshift>
 801a384:	4631      	mov	r1, r6
 801a386:	4605      	mov	r5, r0
 801a388:	f7ff fa10 	bl	80197ac <__mcmp>
 801a38c:	2800      	cmp	r0, #0
 801a38e:	f340 8086 	ble.w	801a49e <_strtod_l+0x8f6>
 801a392:	9905      	ldr	r1, [sp, #20]
 801a394:	4a2c      	ldr	r2, [pc, #176]	; (801a448 <_strtod_l+0x8a0>)
 801a396:	464b      	mov	r3, r9
 801a398:	2900      	cmp	r1, #0
 801a39a:	f000 809f 	beq.w	801a4dc <_strtod_l+0x934>
 801a39e:	ea02 0109 	and.w	r1, r2, r9
 801a3a2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801a3a6:	f300 8099 	bgt.w	801a4dc <_strtod_l+0x934>
 801a3aa:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801a3ae:	f77f aea8 	ble.w	801a102 <_strtod_l+0x55a>
 801a3b2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 801a438 <_strtod_l+0x890>
 801a3b6:	ec49 8b16 	vmov	d6, r8, r9
 801a3ba:	4b23      	ldr	r3, [pc, #140]	; (801a448 <_strtod_l+0x8a0>)
 801a3bc:	ee26 7b07 	vmul.f64	d7, d6, d7
 801a3c0:	ee17 2a90 	vmov	r2, s15
 801a3c4:	4013      	ands	r3, r2
 801a3c6:	ec59 8b17 	vmov	r8, r9, d7
 801a3ca:	2b00      	cmp	r3, #0
 801a3cc:	f47f ae34 	bne.w	801a038 <_strtod_l+0x490>
 801a3d0:	2322      	movs	r3, #34	; 0x22
 801a3d2:	6023      	str	r3, [r4, #0]
 801a3d4:	e630      	b.n	801a038 <_strtod_l+0x490>
 801a3d6:	f04f 31ff 	mov.w	r1, #4294967295
 801a3da:	fa01 f202 	lsl.w	r2, r1, r2
 801a3de:	ea02 0808 	and.w	r8, r2, r8
 801a3e2:	e6da      	b.n	801a19a <_strtod_l+0x5f2>
 801a3e4:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 801a3e8:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801a3ec:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801a3f0:	33e2      	adds	r3, #226	; 0xe2
 801a3f2:	fa00 f303 	lsl.w	r3, r0, r3
 801a3f6:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 801a3fa:	e73f      	b.n	801a27c <_strtod_l+0x6d4>
 801a3fc:	2200      	movs	r2, #0
 801a3fe:	2301      	movs	r3, #1
 801a400:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801a404:	e73a      	b.n	801a27c <_strtod_l+0x6d4>
 801a406:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a408:	461a      	mov	r2, r3
 801a40a:	4620      	mov	r0, r4
 801a40c:	f7ff f962 	bl	80196d4 <__lshift>
 801a410:	9012      	str	r0, [sp, #72]	; 0x48
 801a412:	2800      	cmp	r0, #0
 801a414:	f47f af64 	bne.w	801a2e0 <_strtod_l+0x738>
 801a418:	e604      	b.n	801a024 <_strtod_l+0x47c>
 801a41a:	bf00      	nop
 801a41c:	f3af 8000 	nop.w
 801a420:	94a03595 	.word	0x94a03595
 801a424:	3fcfffff 	.word	0x3fcfffff
 801a428:	94a03595 	.word	0x94a03595
 801a42c:	3fdfffff 	.word	0x3fdfffff
 801a430:	35afe535 	.word	0x35afe535
 801a434:	3fe00000 	.word	0x3fe00000
 801a438:	00000000 	.word	0x00000000
 801a43c:	39500000 	.word	0x39500000
 801a440:	0801c6a0 	.word	0x0801c6a0
 801a444:	fffffc02 	.word	0xfffffc02
 801a448:	7ff00000 	.word	0x7ff00000
 801a44c:	46cb      	mov	fp, r9
 801a44e:	d15f      	bne.n	801a510 <_strtod_l+0x968>
 801a450:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a454:	f1ba 0f00 	cmp.w	sl, #0
 801a458:	d02a      	beq.n	801a4b0 <_strtod_l+0x908>
 801a45a:	4aa7      	ldr	r2, [pc, #668]	; (801a6f8 <_strtod_l+0xb50>)
 801a45c:	4293      	cmp	r3, r2
 801a45e:	d12b      	bne.n	801a4b8 <_strtod_l+0x910>
 801a460:	9b05      	ldr	r3, [sp, #20]
 801a462:	4642      	mov	r2, r8
 801a464:	b1fb      	cbz	r3, 801a4a6 <_strtod_l+0x8fe>
 801a466:	4ba5      	ldr	r3, [pc, #660]	; (801a6fc <_strtod_l+0xb54>)
 801a468:	ea09 0303 	and.w	r3, r9, r3
 801a46c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801a470:	f04f 31ff 	mov.w	r1, #4294967295
 801a474:	d81a      	bhi.n	801a4ac <_strtod_l+0x904>
 801a476:	0d1b      	lsrs	r3, r3, #20
 801a478:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a47c:	fa01 f303 	lsl.w	r3, r1, r3
 801a480:	429a      	cmp	r2, r3
 801a482:	d119      	bne.n	801a4b8 <_strtod_l+0x910>
 801a484:	4b9e      	ldr	r3, [pc, #632]	; (801a700 <_strtod_l+0xb58>)
 801a486:	459b      	cmp	fp, r3
 801a488:	d102      	bne.n	801a490 <_strtod_l+0x8e8>
 801a48a:	3201      	adds	r2, #1
 801a48c:	f43f adca 	beq.w	801a024 <_strtod_l+0x47c>
 801a490:	4b9a      	ldr	r3, [pc, #616]	; (801a6fc <_strtod_l+0xb54>)
 801a492:	ea0b 0303 	and.w	r3, fp, r3
 801a496:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801a49a:	f04f 0800 	mov.w	r8, #0
 801a49e:	9b05      	ldr	r3, [sp, #20]
 801a4a0:	2b00      	cmp	r3, #0
 801a4a2:	d186      	bne.n	801a3b2 <_strtod_l+0x80a>
 801a4a4:	e5c8      	b.n	801a038 <_strtod_l+0x490>
 801a4a6:	f04f 33ff 	mov.w	r3, #4294967295
 801a4aa:	e7e9      	b.n	801a480 <_strtod_l+0x8d8>
 801a4ac:	460b      	mov	r3, r1
 801a4ae:	e7e7      	b.n	801a480 <_strtod_l+0x8d8>
 801a4b0:	ea53 0308 	orrs.w	r3, r3, r8
 801a4b4:	f43f af6d 	beq.w	801a392 <_strtod_l+0x7ea>
 801a4b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a4ba:	b1cb      	cbz	r3, 801a4f0 <_strtod_l+0x948>
 801a4bc:	ea13 0f0b 	tst.w	r3, fp
 801a4c0:	d0ed      	beq.n	801a49e <_strtod_l+0x8f6>
 801a4c2:	9a05      	ldr	r2, [sp, #20]
 801a4c4:	4640      	mov	r0, r8
 801a4c6:	4649      	mov	r1, r9
 801a4c8:	f1ba 0f00 	cmp.w	sl, #0
 801a4cc:	d014      	beq.n	801a4f8 <_strtod_l+0x950>
 801a4ce:	f7ff fb51 	bl	8019b74 <sulp>
 801a4d2:	ee38 7b00 	vadd.f64	d7, d8, d0
 801a4d6:	ec59 8b17 	vmov	r8, r9, d7
 801a4da:	e7e0      	b.n	801a49e <_strtod_l+0x8f6>
 801a4dc:	4013      	ands	r3, r2
 801a4de:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801a4e2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801a4e6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801a4ea:	f04f 38ff 	mov.w	r8, #4294967295
 801a4ee:	e7d6      	b.n	801a49e <_strtod_l+0x8f6>
 801a4f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a4f2:	ea13 0f08 	tst.w	r3, r8
 801a4f6:	e7e3      	b.n	801a4c0 <_strtod_l+0x918>
 801a4f8:	f7ff fb3c 	bl	8019b74 <sulp>
 801a4fc:	ee38 0b40 	vsub.f64	d0, d8, d0
 801a500:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801a504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a508:	ec59 8b10 	vmov	r8, r9, d0
 801a50c:	d1c7      	bne.n	801a49e <_strtod_l+0x8f6>
 801a50e:	e5f8      	b.n	801a102 <_strtod_l+0x55a>
 801a510:	4631      	mov	r1, r6
 801a512:	4628      	mov	r0, r5
 801a514:	f7ff faba 	bl	8019a8c <__ratio>
 801a518:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801a51c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801a520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a524:	d85f      	bhi.n	801a5e6 <_strtod_l+0xa3e>
 801a526:	f1ba 0f00 	cmp.w	sl, #0
 801a52a:	d166      	bne.n	801a5fa <_strtod_l+0xa52>
 801a52c:	f1b8 0f00 	cmp.w	r8, #0
 801a530:	d14d      	bne.n	801a5ce <_strtod_l+0xa26>
 801a532:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a536:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801a53a:	2b00      	cmp	r3, #0
 801a53c:	d162      	bne.n	801a604 <_strtod_l+0xa5c>
 801a53e:	eeb4 0bcd 	vcmpe.f64	d0, d13
 801a542:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801a546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a54a:	d401      	bmi.n	801a550 <_strtod_l+0x9a8>
 801a54c:	ee20 db0d 	vmul.f64	d13, d0, d13
 801a550:	eeb1 cb4d 	vneg.f64	d12, d13
 801a554:	4869      	ldr	r0, [pc, #420]	; (801a6fc <_strtod_l+0xb54>)
 801a556:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 801a708 <_strtod_l+0xb60>
 801a55a:	ea0b 0100 	and.w	r1, fp, r0
 801a55e:	4561      	cmp	r1, ip
 801a560:	ec53 2b1c 	vmov	r2, r3, d12
 801a564:	d17a      	bne.n	801a65c <_strtod_l+0xab4>
 801a566:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 801a56a:	ec49 8b10 	vmov	d0, r8, r9
 801a56e:	910a      	str	r1, [sp, #40]	; 0x28
 801a570:	f7ff f9c2 	bl	80198f8 <__ulp>
 801a574:	ec49 8b1e 	vmov	d14, r8, r9
 801a578:	4860      	ldr	r0, [pc, #384]	; (801a6fc <_strtod_l+0xb54>)
 801a57a:	eea0 eb0c 	vfma.f64	d14, d0, d12
 801a57e:	ee1e 3a90 	vmov	r3, s29
 801a582:	4a60      	ldr	r2, [pc, #384]	; (801a704 <_strtod_l+0xb5c>)
 801a584:	990a      	ldr	r1, [sp, #40]	; 0x28
 801a586:	4018      	ands	r0, r3
 801a588:	4290      	cmp	r0, r2
 801a58a:	ec59 8b1e 	vmov	r8, r9, d14
 801a58e:	d93c      	bls.n	801a60a <_strtod_l+0xa62>
 801a590:	ee18 2a90 	vmov	r2, s17
 801a594:	4b5a      	ldr	r3, [pc, #360]	; (801a700 <_strtod_l+0xb58>)
 801a596:	429a      	cmp	r2, r3
 801a598:	d104      	bne.n	801a5a4 <_strtod_l+0x9fc>
 801a59a:	ee18 3a10 	vmov	r3, s16
 801a59e:	3301      	adds	r3, #1
 801a5a0:	f43f ad40 	beq.w	801a024 <_strtod_l+0x47c>
 801a5a4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 801a700 <_strtod_l+0xb58>
 801a5a8:	f04f 38ff 	mov.w	r8, #4294967295
 801a5ac:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a5ae:	4620      	mov	r0, r4
 801a5b0:	f7fe fe76 	bl	80192a0 <_Bfree>
 801a5b4:	4639      	mov	r1, r7
 801a5b6:	4620      	mov	r0, r4
 801a5b8:	f7fe fe72 	bl	80192a0 <_Bfree>
 801a5bc:	4631      	mov	r1, r6
 801a5be:	4620      	mov	r0, r4
 801a5c0:	f7fe fe6e 	bl	80192a0 <_Bfree>
 801a5c4:	4629      	mov	r1, r5
 801a5c6:	4620      	mov	r0, r4
 801a5c8:	f7fe fe6a 	bl	80192a0 <_Bfree>
 801a5cc:	e609      	b.n	801a1e2 <_strtod_l+0x63a>
 801a5ce:	f1b8 0f01 	cmp.w	r8, #1
 801a5d2:	d103      	bne.n	801a5dc <_strtod_l+0xa34>
 801a5d4:	f1b9 0f00 	cmp.w	r9, #0
 801a5d8:	f43f ad93 	beq.w	801a102 <_strtod_l+0x55a>
 801a5dc:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 801a5e0:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801a5e4:	e7b6      	b.n	801a554 <_strtod_l+0x9ac>
 801a5e6:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801a5ea:	ee20 db0d 	vmul.f64	d13, d0, d13
 801a5ee:	f1ba 0f00 	cmp.w	sl, #0
 801a5f2:	d0ad      	beq.n	801a550 <_strtod_l+0x9a8>
 801a5f4:	eeb0 cb4d 	vmov.f64	d12, d13
 801a5f8:	e7ac      	b.n	801a554 <_strtod_l+0x9ac>
 801a5fa:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 801a5fe:	eeb0 db4c 	vmov.f64	d13, d12
 801a602:	e7a7      	b.n	801a554 <_strtod_l+0x9ac>
 801a604:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 801a608:	e7a4      	b.n	801a554 <_strtod_l+0x9ac>
 801a60a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801a60e:	9b05      	ldr	r3, [sp, #20]
 801a610:	46cb      	mov	fp, r9
 801a612:	2b00      	cmp	r3, #0
 801a614:	d1ca      	bne.n	801a5ac <_strtod_l+0xa04>
 801a616:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801a61a:	0d1b      	lsrs	r3, r3, #20
 801a61c:	051b      	lsls	r3, r3, #20
 801a61e:	4299      	cmp	r1, r3
 801a620:	d1c4      	bne.n	801a5ac <_strtod_l+0xa04>
 801a622:	ec51 0b1d 	vmov	r0, r1, d13
 801a626:	f7e6 f8af 	bl	8000788 <__aeabi_d2lz>
 801a62a:	f7e6 f867 	bl	80006fc <__aeabi_l2d>
 801a62e:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 801a632:	ec41 0b17 	vmov	d7, r0, r1
 801a636:	ea4b 0b08 	orr.w	fp, fp, r8
 801a63a:	ea5b 0b0a 	orrs.w	fp, fp, sl
 801a63e:	ee3d db47 	vsub.f64	d13, d13, d7
 801a642:	d03c      	beq.n	801a6be <_strtod_l+0xb16>
 801a644:	eeb4 dbca 	vcmpe.f64	d13, d10
 801a648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a64c:	f53f acf4 	bmi.w	801a038 <_strtod_l+0x490>
 801a650:	eeb4 dbcb 	vcmpe.f64	d13, d11
 801a654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a658:	dda8      	ble.n	801a5ac <_strtod_l+0xa04>
 801a65a:	e4ed      	b.n	801a038 <_strtod_l+0x490>
 801a65c:	9805      	ldr	r0, [sp, #20]
 801a65e:	b1f0      	cbz	r0, 801a69e <_strtod_l+0xaf6>
 801a660:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 801a664:	d81b      	bhi.n	801a69e <_strtod_l+0xaf6>
 801a666:	ed9f 7b22 	vldr	d7, [pc, #136]	; 801a6f0 <_strtod_l+0xb48>
 801a66a:	eeb4 dbc7 	vcmpe.f64	d13, d7
 801a66e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a672:	d811      	bhi.n	801a698 <_strtod_l+0xaf0>
 801a674:	eebc dbcd 	vcvt.u32.f64	s26, d13
 801a678:	ee1d 3a10 	vmov	r3, s26
 801a67c:	2b01      	cmp	r3, #1
 801a67e:	bf38      	it	cc
 801a680:	2301      	movcc	r3, #1
 801a682:	ee0d 3a10 	vmov	s26, r3
 801a686:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 801a68a:	f1ba 0f00 	cmp.w	sl, #0
 801a68e:	d113      	bne.n	801a6b8 <_strtod_l+0xb10>
 801a690:	eeb1 7b4d 	vneg.f64	d7, d13
 801a694:	ec53 2b17 	vmov	r2, r3, d7
 801a698:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 801a69c:	1a43      	subs	r3, r0, r1
 801a69e:	eeb0 0b48 	vmov.f64	d0, d8
 801a6a2:	ec43 2b1c 	vmov	d12, r2, r3
 801a6a6:	910a      	str	r1, [sp, #40]	; 0x28
 801a6a8:	f7ff f926 	bl	80198f8 <__ulp>
 801a6ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 801a6ae:	eeac 8b00 	vfma.f64	d8, d12, d0
 801a6b2:	ec59 8b18 	vmov	r8, r9, d8
 801a6b6:	e7aa      	b.n	801a60e <_strtod_l+0xa66>
 801a6b8:	eeb0 7b4d 	vmov.f64	d7, d13
 801a6bc:	e7ea      	b.n	801a694 <_strtod_l+0xaec>
 801a6be:	eeb4 dbc9 	vcmpe.f64	d13, d9
 801a6c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6c6:	f57f af71 	bpl.w	801a5ac <_strtod_l+0xa04>
 801a6ca:	e4b5      	b.n	801a038 <_strtod_l+0x490>
 801a6cc:	2300      	movs	r3, #0
 801a6ce:	9308      	str	r3, [sp, #32]
 801a6d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a6d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a6d4:	6013      	str	r3, [r2, #0]
 801a6d6:	f7ff baa6 	b.w	8019c26 <_strtod_l+0x7e>
 801a6da:	2a65      	cmp	r2, #101	; 0x65
 801a6dc:	f43f aba2 	beq.w	8019e24 <_strtod_l+0x27c>
 801a6e0:	2a45      	cmp	r2, #69	; 0x45
 801a6e2:	f43f ab9f 	beq.w	8019e24 <_strtod_l+0x27c>
 801a6e6:	2101      	movs	r1, #1
 801a6e8:	f7ff bbd8 	b.w	8019e9c <_strtod_l+0x2f4>
 801a6ec:	f3af 8000 	nop.w
 801a6f0:	ffc00000 	.word	0xffc00000
 801a6f4:	41dfffff 	.word	0x41dfffff
 801a6f8:	000fffff 	.word	0x000fffff
 801a6fc:	7ff00000 	.word	0x7ff00000
 801a700:	7fefffff 	.word	0x7fefffff
 801a704:	7c9fffff 	.word	0x7c9fffff
 801a708:	7fe00000 	.word	0x7fe00000

0801a70c <_strtod_r>:
 801a70c:	4b01      	ldr	r3, [pc, #4]	; (801a714 <_strtod_r+0x8>)
 801a70e:	f7ff ba4b 	b.w	8019ba8 <_strtod_l>
 801a712:	bf00      	nop
 801a714:	2400015c 	.word	0x2400015c

0801a718 <_strtol_l.constprop.0>:
 801a718:	2b01      	cmp	r3, #1
 801a71a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a71e:	d001      	beq.n	801a724 <_strtol_l.constprop.0+0xc>
 801a720:	2b24      	cmp	r3, #36	; 0x24
 801a722:	d906      	bls.n	801a732 <_strtol_l.constprop.0+0x1a>
 801a724:	f7fd fe3c 	bl	80183a0 <__errno>
 801a728:	2316      	movs	r3, #22
 801a72a:	6003      	str	r3, [r0, #0]
 801a72c:	2000      	movs	r0, #0
 801a72e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a732:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801a818 <_strtol_l.constprop.0+0x100>
 801a736:	460d      	mov	r5, r1
 801a738:	462e      	mov	r6, r5
 801a73a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a73e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801a742:	f017 0708 	ands.w	r7, r7, #8
 801a746:	d1f7      	bne.n	801a738 <_strtol_l.constprop.0+0x20>
 801a748:	2c2d      	cmp	r4, #45	; 0x2d
 801a74a:	d132      	bne.n	801a7b2 <_strtol_l.constprop.0+0x9a>
 801a74c:	782c      	ldrb	r4, [r5, #0]
 801a74e:	2701      	movs	r7, #1
 801a750:	1cb5      	adds	r5, r6, #2
 801a752:	2b00      	cmp	r3, #0
 801a754:	d05b      	beq.n	801a80e <_strtol_l.constprop.0+0xf6>
 801a756:	2b10      	cmp	r3, #16
 801a758:	d109      	bne.n	801a76e <_strtol_l.constprop.0+0x56>
 801a75a:	2c30      	cmp	r4, #48	; 0x30
 801a75c:	d107      	bne.n	801a76e <_strtol_l.constprop.0+0x56>
 801a75e:	782c      	ldrb	r4, [r5, #0]
 801a760:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801a764:	2c58      	cmp	r4, #88	; 0x58
 801a766:	d14d      	bne.n	801a804 <_strtol_l.constprop.0+0xec>
 801a768:	786c      	ldrb	r4, [r5, #1]
 801a76a:	2310      	movs	r3, #16
 801a76c:	3502      	adds	r5, #2
 801a76e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801a772:	f108 38ff 	add.w	r8, r8, #4294967295
 801a776:	f04f 0e00 	mov.w	lr, #0
 801a77a:	fbb8 f9f3 	udiv	r9, r8, r3
 801a77e:	4676      	mov	r6, lr
 801a780:	fb03 8a19 	mls	sl, r3, r9, r8
 801a784:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801a788:	f1bc 0f09 	cmp.w	ip, #9
 801a78c:	d816      	bhi.n	801a7bc <_strtol_l.constprop.0+0xa4>
 801a78e:	4664      	mov	r4, ip
 801a790:	42a3      	cmp	r3, r4
 801a792:	dd24      	ble.n	801a7de <_strtol_l.constprop.0+0xc6>
 801a794:	f1be 3fff 	cmp.w	lr, #4294967295
 801a798:	d008      	beq.n	801a7ac <_strtol_l.constprop.0+0x94>
 801a79a:	45b1      	cmp	r9, r6
 801a79c:	d31c      	bcc.n	801a7d8 <_strtol_l.constprop.0+0xc0>
 801a79e:	d101      	bne.n	801a7a4 <_strtol_l.constprop.0+0x8c>
 801a7a0:	45a2      	cmp	sl, r4
 801a7a2:	db19      	blt.n	801a7d8 <_strtol_l.constprop.0+0xc0>
 801a7a4:	fb06 4603 	mla	r6, r6, r3, r4
 801a7a8:	f04f 0e01 	mov.w	lr, #1
 801a7ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a7b0:	e7e8      	b.n	801a784 <_strtol_l.constprop.0+0x6c>
 801a7b2:	2c2b      	cmp	r4, #43	; 0x2b
 801a7b4:	bf04      	itt	eq
 801a7b6:	782c      	ldrbeq	r4, [r5, #0]
 801a7b8:	1cb5      	addeq	r5, r6, #2
 801a7ba:	e7ca      	b.n	801a752 <_strtol_l.constprop.0+0x3a>
 801a7bc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801a7c0:	f1bc 0f19 	cmp.w	ip, #25
 801a7c4:	d801      	bhi.n	801a7ca <_strtol_l.constprop.0+0xb2>
 801a7c6:	3c37      	subs	r4, #55	; 0x37
 801a7c8:	e7e2      	b.n	801a790 <_strtol_l.constprop.0+0x78>
 801a7ca:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801a7ce:	f1bc 0f19 	cmp.w	ip, #25
 801a7d2:	d804      	bhi.n	801a7de <_strtol_l.constprop.0+0xc6>
 801a7d4:	3c57      	subs	r4, #87	; 0x57
 801a7d6:	e7db      	b.n	801a790 <_strtol_l.constprop.0+0x78>
 801a7d8:	f04f 3eff 	mov.w	lr, #4294967295
 801a7dc:	e7e6      	b.n	801a7ac <_strtol_l.constprop.0+0x94>
 801a7de:	f1be 3fff 	cmp.w	lr, #4294967295
 801a7e2:	d105      	bne.n	801a7f0 <_strtol_l.constprop.0+0xd8>
 801a7e4:	2322      	movs	r3, #34	; 0x22
 801a7e6:	6003      	str	r3, [r0, #0]
 801a7e8:	4646      	mov	r6, r8
 801a7ea:	b942      	cbnz	r2, 801a7fe <_strtol_l.constprop.0+0xe6>
 801a7ec:	4630      	mov	r0, r6
 801a7ee:	e79e      	b.n	801a72e <_strtol_l.constprop.0+0x16>
 801a7f0:	b107      	cbz	r7, 801a7f4 <_strtol_l.constprop.0+0xdc>
 801a7f2:	4276      	negs	r6, r6
 801a7f4:	2a00      	cmp	r2, #0
 801a7f6:	d0f9      	beq.n	801a7ec <_strtol_l.constprop.0+0xd4>
 801a7f8:	f1be 0f00 	cmp.w	lr, #0
 801a7fc:	d000      	beq.n	801a800 <_strtol_l.constprop.0+0xe8>
 801a7fe:	1e69      	subs	r1, r5, #1
 801a800:	6011      	str	r1, [r2, #0]
 801a802:	e7f3      	b.n	801a7ec <_strtol_l.constprop.0+0xd4>
 801a804:	2430      	movs	r4, #48	; 0x30
 801a806:	2b00      	cmp	r3, #0
 801a808:	d1b1      	bne.n	801a76e <_strtol_l.constprop.0+0x56>
 801a80a:	2308      	movs	r3, #8
 801a80c:	e7af      	b.n	801a76e <_strtol_l.constprop.0+0x56>
 801a80e:	2c30      	cmp	r4, #48	; 0x30
 801a810:	d0a5      	beq.n	801a75e <_strtol_l.constprop.0+0x46>
 801a812:	230a      	movs	r3, #10
 801a814:	e7ab      	b.n	801a76e <_strtol_l.constprop.0+0x56>
 801a816:	bf00      	nop
 801a818:	0801c6c9 	.word	0x0801c6c9

0801a81c <_strtol_r>:
 801a81c:	f7ff bf7c 	b.w	801a718 <_strtol_l.constprop.0>

0801a820 <__ssputs_r>:
 801a820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a824:	688e      	ldr	r6, [r1, #8]
 801a826:	461f      	mov	r7, r3
 801a828:	42be      	cmp	r6, r7
 801a82a:	680b      	ldr	r3, [r1, #0]
 801a82c:	4682      	mov	sl, r0
 801a82e:	460c      	mov	r4, r1
 801a830:	4690      	mov	r8, r2
 801a832:	d82c      	bhi.n	801a88e <__ssputs_r+0x6e>
 801a834:	898a      	ldrh	r2, [r1, #12]
 801a836:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a83a:	d026      	beq.n	801a88a <__ssputs_r+0x6a>
 801a83c:	6965      	ldr	r5, [r4, #20]
 801a83e:	6909      	ldr	r1, [r1, #16]
 801a840:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a844:	eba3 0901 	sub.w	r9, r3, r1
 801a848:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a84c:	1c7b      	adds	r3, r7, #1
 801a84e:	444b      	add	r3, r9
 801a850:	106d      	asrs	r5, r5, #1
 801a852:	429d      	cmp	r5, r3
 801a854:	bf38      	it	cc
 801a856:	461d      	movcc	r5, r3
 801a858:	0553      	lsls	r3, r2, #21
 801a85a:	d527      	bpl.n	801a8ac <__ssputs_r+0x8c>
 801a85c:	4629      	mov	r1, r5
 801a85e:	f7fe fc53 	bl	8019108 <_malloc_r>
 801a862:	4606      	mov	r6, r0
 801a864:	b360      	cbz	r0, 801a8c0 <__ssputs_r+0xa0>
 801a866:	6921      	ldr	r1, [r4, #16]
 801a868:	464a      	mov	r2, r9
 801a86a:	f7fd fdce 	bl	801840a <memcpy>
 801a86e:	89a3      	ldrh	r3, [r4, #12]
 801a870:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a878:	81a3      	strh	r3, [r4, #12]
 801a87a:	6126      	str	r6, [r4, #16]
 801a87c:	6165      	str	r5, [r4, #20]
 801a87e:	444e      	add	r6, r9
 801a880:	eba5 0509 	sub.w	r5, r5, r9
 801a884:	6026      	str	r6, [r4, #0]
 801a886:	60a5      	str	r5, [r4, #8]
 801a888:	463e      	mov	r6, r7
 801a88a:	42be      	cmp	r6, r7
 801a88c:	d900      	bls.n	801a890 <__ssputs_r+0x70>
 801a88e:	463e      	mov	r6, r7
 801a890:	6820      	ldr	r0, [r4, #0]
 801a892:	4632      	mov	r2, r6
 801a894:	4641      	mov	r1, r8
 801a896:	f000 fd5c 	bl	801b352 <memmove>
 801a89a:	68a3      	ldr	r3, [r4, #8]
 801a89c:	1b9b      	subs	r3, r3, r6
 801a89e:	60a3      	str	r3, [r4, #8]
 801a8a0:	6823      	ldr	r3, [r4, #0]
 801a8a2:	4433      	add	r3, r6
 801a8a4:	6023      	str	r3, [r4, #0]
 801a8a6:	2000      	movs	r0, #0
 801a8a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a8ac:	462a      	mov	r2, r5
 801a8ae:	f001 f934 	bl	801bb1a <_realloc_r>
 801a8b2:	4606      	mov	r6, r0
 801a8b4:	2800      	cmp	r0, #0
 801a8b6:	d1e0      	bne.n	801a87a <__ssputs_r+0x5a>
 801a8b8:	6921      	ldr	r1, [r4, #16]
 801a8ba:	4650      	mov	r0, sl
 801a8bc:	f7fe fbb0 	bl	8019020 <_free_r>
 801a8c0:	230c      	movs	r3, #12
 801a8c2:	f8ca 3000 	str.w	r3, [sl]
 801a8c6:	89a3      	ldrh	r3, [r4, #12]
 801a8c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a8cc:	81a3      	strh	r3, [r4, #12]
 801a8ce:	f04f 30ff 	mov.w	r0, #4294967295
 801a8d2:	e7e9      	b.n	801a8a8 <__ssputs_r+0x88>

0801a8d4 <_svfiprintf_r>:
 801a8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8d8:	4698      	mov	r8, r3
 801a8da:	898b      	ldrh	r3, [r1, #12]
 801a8dc:	061b      	lsls	r3, r3, #24
 801a8de:	b09d      	sub	sp, #116	; 0x74
 801a8e0:	4607      	mov	r7, r0
 801a8e2:	460d      	mov	r5, r1
 801a8e4:	4614      	mov	r4, r2
 801a8e6:	d50e      	bpl.n	801a906 <_svfiprintf_r+0x32>
 801a8e8:	690b      	ldr	r3, [r1, #16]
 801a8ea:	b963      	cbnz	r3, 801a906 <_svfiprintf_r+0x32>
 801a8ec:	2140      	movs	r1, #64	; 0x40
 801a8ee:	f7fe fc0b 	bl	8019108 <_malloc_r>
 801a8f2:	6028      	str	r0, [r5, #0]
 801a8f4:	6128      	str	r0, [r5, #16]
 801a8f6:	b920      	cbnz	r0, 801a902 <_svfiprintf_r+0x2e>
 801a8f8:	230c      	movs	r3, #12
 801a8fa:	603b      	str	r3, [r7, #0]
 801a8fc:	f04f 30ff 	mov.w	r0, #4294967295
 801a900:	e0d0      	b.n	801aaa4 <_svfiprintf_r+0x1d0>
 801a902:	2340      	movs	r3, #64	; 0x40
 801a904:	616b      	str	r3, [r5, #20]
 801a906:	2300      	movs	r3, #0
 801a908:	9309      	str	r3, [sp, #36]	; 0x24
 801a90a:	2320      	movs	r3, #32
 801a90c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a910:	f8cd 800c 	str.w	r8, [sp, #12]
 801a914:	2330      	movs	r3, #48	; 0x30
 801a916:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801aabc <_svfiprintf_r+0x1e8>
 801a91a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a91e:	f04f 0901 	mov.w	r9, #1
 801a922:	4623      	mov	r3, r4
 801a924:	469a      	mov	sl, r3
 801a926:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a92a:	b10a      	cbz	r2, 801a930 <_svfiprintf_r+0x5c>
 801a92c:	2a25      	cmp	r2, #37	; 0x25
 801a92e:	d1f9      	bne.n	801a924 <_svfiprintf_r+0x50>
 801a930:	ebba 0b04 	subs.w	fp, sl, r4
 801a934:	d00b      	beq.n	801a94e <_svfiprintf_r+0x7a>
 801a936:	465b      	mov	r3, fp
 801a938:	4622      	mov	r2, r4
 801a93a:	4629      	mov	r1, r5
 801a93c:	4638      	mov	r0, r7
 801a93e:	f7ff ff6f 	bl	801a820 <__ssputs_r>
 801a942:	3001      	adds	r0, #1
 801a944:	f000 80a9 	beq.w	801aa9a <_svfiprintf_r+0x1c6>
 801a948:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a94a:	445a      	add	r2, fp
 801a94c:	9209      	str	r2, [sp, #36]	; 0x24
 801a94e:	f89a 3000 	ldrb.w	r3, [sl]
 801a952:	2b00      	cmp	r3, #0
 801a954:	f000 80a1 	beq.w	801aa9a <_svfiprintf_r+0x1c6>
 801a958:	2300      	movs	r3, #0
 801a95a:	f04f 32ff 	mov.w	r2, #4294967295
 801a95e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a962:	f10a 0a01 	add.w	sl, sl, #1
 801a966:	9304      	str	r3, [sp, #16]
 801a968:	9307      	str	r3, [sp, #28]
 801a96a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a96e:	931a      	str	r3, [sp, #104]	; 0x68
 801a970:	4654      	mov	r4, sl
 801a972:	2205      	movs	r2, #5
 801a974:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a978:	4850      	ldr	r0, [pc, #320]	; (801aabc <_svfiprintf_r+0x1e8>)
 801a97a:	f7e5 fcd9 	bl	8000330 <memchr>
 801a97e:	9a04      	ldr	r2, [sp, #16]
 801a980:	b9d8      	cbnz	r0, 801a9ba <_svfiprintf_r+0xe6>
 801a982:	06d0      	lsls	r0, r2, #27
 801a984:	bf44      	itt	mi
 801a986:	2320      	movmi	r3, #32
 801a988:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a98c:	0711      	lsls	r1, r2, #28
 801a98e:	bf44      	itt	mi
 801a990:	232b      	movmi	r3, #43	; 0x2b
 801a992:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a996:	f89a 3000 	ldrb.w	r3, [sl]
 801a99a:	2b2a      	cmp	r3, #42	; 0x2a
 801a99c:	d015      	beq.n	801a9ca <_svfiprintf_r+0xf6>
 801a99e:	9a07      	ldr	r2, [sp, #28]
 801a9a0:	4654      	mov	r4, sl
 801a9a2:	2000      	movs	r0, #0
 801a9a4:	f04f 0c0a 	mov.w	ip, #10
 801a9a8:	4621      	mov	r1, r4
 801a9aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a9ae:	3b30      	subs	r3, #48	; 0x30
 801a9b0:	2b09      	cmp	r3, #9
 801a9b2:	d94d      	bls.n	801aa50 <_svfiprintf_r+0x17c>
 801a9b4:	b1b0      	cbz	r0, 801a9e4 <_svfiprintf_r+0x110>
 801a9b6:	9207      	str	r2, [sp, #28]
 801a9b8:	e014      	b.n	801a9e4 <_svfiprintf_r+0x110>
 801a9ba:	eba0 0308 	sub.w	r3, r0, r8
 801a9be:	fa09 f303 	lsl.w	r3, r9, r3
 801a9c2:	4313      	orrs	r3, r2
 801a9c4:	9304      	str	r3, [sp, #16]
 801a9c6:	46a2      	mov	sl, r4
 801a9c8:	e7d2      	b.n	801a970 <_svfiprintf_r+0x9c>
 801a9ca:	9b03      	ldr	r3, [sp, #12]
 801a9cc:	1d19      	adds	r1, r3, #4
 801a9ce:	681b      	ldr	r3, [r3, #0]
 801a9d0:	9103      	str	r1, [sp, #12]
 801a9d2:	2b00      	cmp	r3, #0
 801a9d4:	bfbb      	ittet	lt
 801a9d6:	425b      	neglt	r3, r3
 801a9d8:	f042 0202 	orrlt.w	r2, r2, #2
 801a9dc:	9307      	strge	r3, [sp, #28]
 801a9de:	9307      	strlt	r3, [sp, #28]
 801a9e0:	bfb8      	it	lt
 801a9e2:	9204      	strlt	r2, [sp, #16]
 801a9e4:	7823      	ldrb	r3, [r4, #0]
 801a9e6:	2b2e      	cmp	r3, #46	; 0x2e
 801a9e8:	d10c      	bne.n	801aa04 <_svfiprintf_r+0x130>
 801a9ea:	7863      	ldrb	r3, [r4, #1]
 801a9ec:	2b2a      	cmp	r3, #42	; 0x2a
 801a9ee:	d134      	bne.n	801aa5a <_svfiprintf_r+0x186>
 801a9f0:	9b03      	ldr	r3, [sp, #12]
 801a9f2:	1d1a      	adds	r2, r3, #4
 801a9f4:	681b      	ldr	r3, [r3, #0]
 801a9f6:	9203      	str	r2, [sp, #12]
 801a9f8:	2b00      	cmp	r3, #0
 801a9fa:	bfb8      	it	lt
 801a9fc:	f04f 33ff 	movlt.w	r3, #4294967295
 801aa00:	3402      	adds	r4, #2
 801aa02:	9305      	str	r3, [sp, #20]
 801aa04:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801aacc <_svfiprintf_r+0x1f8>
 801aa08:	7821      	ldrb	r1, [r4, #0]
 801aa0a:	2203      	movs	r2, #3
 801aa0c:	4650      	mov	r0, sl
 801aa0e:	f7e5 fc8f 	bl	8000330 <memchr>
 801aa12:	b138      	cbz	r0, 801aa24 <_svfiprintf_r+0x150>
 801aa14:	9b04      	ldr	r3, [sp, #16]
 801aa16:	eba0 000a 	sub.w	r0, r0, sl
 801aa1a:	2240      	movs	r2, #64	; 0x40
 801aa1c:	4082      	lsls	r2, r0
 801aa1e:	4313      	orrs	r3, r2
 801aa20:	3401      	adds	r4, #1
 801aa22:	9304      	str	r3, [sp, #16]
 801aa24:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aa28:	4825      	ldr	r0, [pc, #148]	; (801aac0 <_svfiprintf_r+0x1ec>)
 801aa2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801aa2e:	2206      	movs	r2, #6
 801aa30:	f7e5 fc7e 	bl	8000330 <memchr>
 801aa34:	2800      	cmp	r0, #0
 801aa36:	d038      	beq.n	801aaaa <_svfiprintf_r+0x1d6>
 801aa38:	4b22      	ldr	r3, [pc, #136]	; (801aac4 <_svfiprintf_r+0x1f0>)
 801aa3a:	bb1b      	cbnz	r3, 801aa84 <_svfiprintf_r+0x1b0>
 801aa3c:	9b03      	ldr	r3, [sp, #12]
 801aa3e:	3307      	adds	r3, #7
 801aa40:	f023 0307 	bic.w	r3, r3, #7
 801aa44:	3308      	adds	r3, #8
 801aa46:	9303      	str	r3, [sp, #12]
 801aa48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa4a:	4433      	add	r3, r6
 801aa4c:	9309      	str	r3, [sp, #36]	; 0x24
 801aa4e:	e768      	b.n	801a922 <_svfiprintf_r+0x4e>
 801aa50:	fb0c 3202 	mla	r2, ip, r2, r3
 801aa54:	460c      	mov	r4, r1
 801aa56:	2001      	movs	r0, #1
 801aa58:	e7a6      	b.n	801a9a8 <_svfiprintf_r+0xd4>
 801aa5a:	2300      	movs	r3, #0
 801aa5c:	3401      	adds	r4, #1
 801aa5e:	9305      	str	r3, [sp, #20]
 801aa60:	4619      	mov	r1, r3
 801aa62:	f04f 0c0a 	mov.w	ip, #10
 801aa66:	4620      	mov	r0, r4
 801aa68:	f810 2b01 	ldrb.w	r2, [r0], #1
 801aa6c:	3a30      	subs	r2, #48	; 0x30
 801aa6e:	2a09      	cmp	r2, #9
 801aa70:	d903      	bls.n	801aa7a <_svfiprintf_r+0x1a6>
 801aa72:	2b00      	cmp	r3, #0
 801aa74:	d0c6      	beq.n	801aa04 <_svfiprintf_r+0x130>
 801aa76:	9105      	str	r1, [sp, #20]
 801aa78:	e7c4      	b.n	801aa04 <_svfiprintf_r+0x130>
 801aa7a:	fb0c 2101 	mla	r1, ip, r1, r2
 801aa7e:	4604      	mov	r4, r0
 801aa80:	2301      	movs	r3, #1
 801aa82:	e7f0      	b.n	801aa66 <_svfiprintf_r+0x192>
 801aa84:	ab03      	add	r3, sp, #12
 801aa86:	9300      	str	r3, [sp, #0]
 801aa88:	462a      	mov	r2, r5
 801aa8a:	4b0f      	ldr	r3, [pc, #60]	; (801aac8 <_svfiprintf_r+0x1f4>)
 801aa8c:	a904      	add	r1, sp, #16
 801aa8e:	4638      	mov	r0, r7
 801aa90:	f7fc fd32 	bl	80174f8 <_printf_float>
 801aa94:	1c42      	adds	r2, r0, #1
 801aa96:	4606      	mov	r6, r0
 801aa98:	d1d6      	bne.n	801aa48 <_svfiprintf_r+0x174>
 801aa9a:	89ab      	ldrh	r3, [r5, #12]
 801aa9c:	065b      	lsls	r3, r3, #25
 801aa9e:	f53f af2d 	bmi.w	801a8fc <_svfiprintf_r+0x28>
 801aaa2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aaa4:	b01d      	add	sp, #116	; 0x74
 801aaa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aaaa:	ab03      	add	r3, sp, #12
 801aaac:	9300      	str	r3, [sp, #0]
 801aaae:	462a      	mov	r2, r5
 801aab0:	4b05      	ldr	r3, [pc, #20]	; (801aac8 <_svfiprintf_r+0x1f4>)
 801aab2:	a904      	add	r1, sp, #16
 801aab4:	4638      	mov	r0, r7
 801aab6:	f7fc ffa7 	bl	8017a08 <_printf_i>
 801aaba:	e7eb      	b.n	801aa94 <_svfiprintf_r+0x1c0>
 801aabc:	0801c7c9 	.word	0x0801c7c9
 801aac0:	0801c7d3 	.word	0x0801c7d3
 801aac4:	080174f9 	.word	0x080174f9
 801aac8:	0801a821 	.word	0x0801a821
 801aacc:	0801c7cf 	.word	0x0801c7cf

0801aad0 <_sungetc_r>:
 801aad0:	b538      	push	{r3, r4, r5, lr}
 801aad2:	1c4b      	adds	r3, r1, #1
 801aad4:	4614      	mov	r4, r2
 801aad6:	d103      	bne.n	801aae0 <_sungetc_r+0x10>
 801aad8:	f04f 35ff 	mov.w	r5, #4294967295
 801aadc:	4628      	mov	r0, r5
 801aade:	bd38      	pop	{r3, r4, r5, pc}
 801aae0:	8993      	ldrh	r3, [r2, #12]
 801aae2:	f023 0320 	bic.w	r3, r3, #32
 801aae6:	8193      	strh	r3, [r2, #12]
 801aae8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801aaea:	6852      	ldr	r2, [r2, #4]
 801aaec:	b2cd      	uxtb	r5, r1
 801aaee:	b18b      	cbz	r3, 801ab14 <_sungetc_r+0x44>
 801aaf0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801aaf2:	4293      	cmp	r3, r2
 801aaf4:	dd08      	ble.n	801ab08 <_sungetc_r+0x38>
 801aaf6:	6823      	ldr	r3, [r4, #0]
 801aaf8:	1e5a      	subs	r2, r3, #1
 801aafa:	6022      	str	r2, [r4, #0]
 801aafc:	f803 5c01 	strb.w	r5, [r3, #-1]
 801ab00:	6863      	ldr	r3, [r4, #4]
 801ab02:	3301      	adds	r3, #1
 801ab04:	6063      	str	r3, [r4, #4]
 801ab06:	e7e9      	b.n	801aadc <_sungetc_r+0xc>
 801ab08:	4621      	mov	r1, r4
 801ab0a:	f000 fbe8 	bl	801b2de <__submore>
 801ab0e:	2800      	cmp	r0, #0
 801ab10:	d0f1      	beq.n	801aaf6 <_sungetc_r+0x26>
 801ab12:	e7e1      	b.n	801aad8 <_sungetc_r+0x8>
 801ab14:	6921      	ldr	r1, [r4, #16]
 801ab16:	6823      	ldr	r3, [r4, #0]
 801ab18:	b151      	cbz	r1, 801ab30 <_sungetc_r+0x60>
 801ab1a:	4299      	cmp	r1, r3
 801ab1c:	d208      	bcs.n	801ab30 <_sungetc_r+0x60>
 801ab1e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801ab22:	42a9      	cmp	r1, r5
 801ab24:	d104      	bne.n	801ab30 <_sungetc_r+0x60>
 801ab26:	3b01      	subs	r3, #1
 801ab28:	3201      	adds	r2, #1
 801ab2a:	6023      	str	r3, [r4, #0]
 801ab2c:	6062      	str	r2, [r4, #4]
 801ab2e:	e7d5      	b.n	801aadc <_sungetc_r+0xc>
 801ab30:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801ab34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ab38:	6363      	str	r3, [r4, #52]	; 0x34
 801ab3a:	2303      	movs	r3, #3
 801ab3c:	63a3      	str	r3, [r4, #56]	; 0x38
 801ab3e:	4623      	mov	r3, r4
 801ab40:	f803 5f46 	strb.w	r5, [r3, #70]!
 801ab44:	6023      	str	r3, [r4, #0]
 801ab46:	2301      	movs	r3, #1
 801ab48:	e7dc      	b.n	801ab04 <_sungetc_r+0x34>

0801ab4a <__ssrefill_r>:
 801ab4a:	b510      	push	{r4, lr}
 801ab4c:	460c      	mov	r4, r1
 801ab4e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801ab50:	b169      	cbz	r1, 801ab6e <__ssrefill_r+0x24>
 801ab52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ab56:	4299      	cmp	r1, r3
 801ab58:	d001      	beq.n	801ab5e <__ssrefill_r+0x14>
 801ab5a:	f7fe fa61 	bl	8019020 <_free_r>
 801ab5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ab60:	6063      	str	r3, [r4, #4]
 801ab62:	2000      	movs	r0, #0
 801ab64:	6360      	str	r0, [r4, #52]	; 0x34
 801ab66:	b113      	cbz	r3, 801ab6e <__ssrefill_r+0x24>
 801ab68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801ab6a:	6023      	str	r3, [r4, #0]
 801ab6c:	bd10      	pop	{r4, pc}
 801ab6e:	6923      	ldr	r3, [r4, #16]
 801ab70:	6023      	str	r3, [r4, #0]
 801ab72:	2300      	movs	r3, #0
 801ab74:	6063      	str	r3, [r4, #4]
 801ab76:	89a3      	ldrh	r3, [r4, #12]
 801ab78:	f043 0320 	orr.w	r3, r3, #32
 801ab7c:	81a3      	strh	r3, [r4, #12]
 801ab7e:	f04f 30ff 	mov.w	r0, #4294967295
 801ab82:	e7f3      	b.n	801ab6c <__ssrefill_r+0x22>

0801ab84 <__ssvfiscanf_r>:
 801ab84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ab88:	460c      	mov	r4, r1
 801ab8a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801ab8e:	2100      	movs	r1, #0
 801ab90:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801ab94:	49a6      	ldr	r1, [pc, #664]	; (801ae30 <__ssvfiscanf_r+0x2ac>)
 801ab96:	91a0      	str	r1, [sp, #640]	; 0x280
 801ab98:	f10d 0804 	add.w	r8, sp, #4
 801ab9c:	49a5      	ldr	r1, [pc, #660]	; (801ae34 <__ssvfiscanf_r+0x2b0>)
 801ab9e:	4fa6      	ldr	r7, [pc, #664]	; (801ae38 <__ssvfiscanf_r+0x2b4>)
 801aba0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 801ae3c <__ssvfiscanf_r+0x2b8>
 801aba4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801aba8:	4606      	mov	r6, r0
 801abaa:	91a1      	str	r1, [sp, #644]	; 0x284
 801abac:	9300      	str	r3, [sp, #0]
 801abae:	7813      	ldrb	r3, [r2, #0]
 801abb0:	2b00      	cmp	r3, #0
 801abb2:	f000 815a 	beq.w	801ae6a <__ssvfiscanf_r+0x2e6>
 801abb6:	5cf9      	ldrb	r1, [r7, r3]
 801abb8:	f011 0108 	ands.w	r1, r1, #8
 801abbc:	f102 0501 	add.w	r5, r2, #1
 801abc0:	d019      	beq.n	801abf6 <__ssvfiscanf_r+0x72>
 801abc2:	6863      	ldr	r3, [r4, #4]
 801abc4:	2b00      	cmp	r3, #0
 801abc6:	dd0f      	ble.n	801abe8 <__ssvfiscanf_r+0x64>
 801abc8:	6823      	ldr	r3, [r4, #0]
 801abca:	781a      	ldrb	r2, [r3, #0]
 801abcc:	5cba      	ldrb	r2, [r7, r2]
 801abce:	0712      	lsls	r2, r2, #28
 801abd0:	d401      	bmi.n	801abd6 <__ssvfiscanf_r+0x52>
 801abd2:	462a      	mov	r2, r5
 801abd4:	e7eb      	b.n	801abae <__ssvfiscanf_r+0x2a>
 801abd6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801abd8:	3201      	adds	r2, #1
 801abda:	9245      	str	r2, [sp, #276]	; 0x114
 801abdc:	6862      	ldr	r2, [r4, #4]
 801abde:	3301      	adds	r3, #1
 801abe0:	3a01      	subs	r2, #1
 801abe2:	6062      	str	r2, [r4, #4]
 801abe4:	6023      	str	r3, [r4, #0]
 801abe6:	e7ec      	b.n	801abc2 <__ssvfiscanf_r+0x3e>
 801abe8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801abea:	4621      	mov	r1, r4
 801abec:	4630      	mov	r0, r6
 801abee:	4798      	blx	r3
 801abf0:	2800      	cmp	r0, #0
 801abf2:	d0e9      	beq.n	801abc8 <__ssvfiscanf_r+0x44>
 801abf4:	e7ed      	b.n	801abd2 <__ssvfiscanf_r+0x4e>
 801abf6:	2b25      	cmp	r3, #37	; 0x25
 801abf8:	d012      	beq.n	801ac20 <__ssvfiscanf_r+0x9c>
 801abfa:	469a      	mov	sl, r3
 801abfc:	6863      	ldr	r3, [r4, #4]
 801abfe:	2b00      	cmp	r3, #0
 801ac00:	f340 8091 	ble.w	801ad26 <__ssvfiscanf_r+0x1a2>
 801ac04:	6822      	ldr	r2, [r4, #0]
 801ac06:	7813      	ldrb	r3, [r2, #0]
 801ac08:	4553      	cmp	r3, sl
 801ac0a:	f040 812e 	bne.w	801ae6a <__ssvfiscanf_r+0x2e6>
 801ac0e:	6863      	ldr	r3, [r4, #4]
 801ac10:	3b01      	subs	r3, #1
 801ac12:	6063      	str	r3, [r4, #4]
 801ac14:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801ac16:	3201      	adds	r2, #1
 801ac18:	3301      	adds	r3, #1
 801ac1a:	6022      	str	r2, [r4, #0]
 801ac1c:	9345      	str	r3, [sp, #276]	; 0x114
 801ac1e:	e7d8      	b.n	801abd2 <__ssvfiscanf_r+0x4e>
 801ac20:	9141      	str	r1, [sp, #260]	; 0x104
 801ac22:	9143      	str	r1, [sp, #268]	; 0x10c
 801ac24:	7853      	ldrb	r3, [r2, #1]
 801ac26:	2b2a      	cmp	r3, #42	; 0x2a
 801ac28:	bf02      	ittt	eq
 801ac2a:	2310      	moveq	r3, #16
 801ac2c:	1c95      	addeq	r5, r2, #2
 801ac2e:	9341      	streq	r3, [sp, #260]	; 0x104
 801ac30:	220a      	movs	r2, #10
 801ac32:	46aa      	mov	sl, r5
 801ac34:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801ac38:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801ac3c:	2b09      	cmp	r3, #9
 801ac3e:	d91c      	bls.n	801ac7a <__ssvfiscanf_r+0xf6>
 801ac40:	487e      	ldr	r0, [pc, #504]	; (801ae3c <__ssvfiscanf_r+0x2b8>)
 801ac42:	2203      	movs	r2, #3
 801ac44:	f7e5 fb74 	bl	8000330 <memchr>
 801ac48:	b138      	cbz	r0, 801ac5a <__ssvfiscanf_r+0xd6>
 801ac4a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801ac4c:	eba0 0009 	sub.w	r0, r0, r9
 801ac50:	2301      	movs	r3, #1
 801ac52:	4083      	lsls	r3, r0
 801ac54:	4313      	orrs	r3, r2
 801ac56:	9341      	str	r3, [sp, #260]	; 0x104
 801ac58:	4655      	mov	r5, sl
 801ac5a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801ac5e:	2b78      	cmp	r3, #120	; 0x78
 801ac60:	d806      	bhi.n	801ac70 <__ssvfiscanf_r+0xec>
 801ac62:	2b57      	cmp	r3, #87	; 0x57
 801ac64:	d810      	bhi.n	801ac88 <__ssvfiscanf_r+0x104>
 801ac66:	2b25      	cmp	r3, #37	; 0x25
 801ac68:	d0c7      	beq.n	801abfa <__ssvfiscanf_r+0x76>
 801ac6a:	d857      	bhi.n	801ad1c <__ssvfiscanf_r+0x198>
 801ac6c:	2b00      	cmp	r3, #0
 801ac6e:	d065      	beq.n	801ad3c <__ssvfiscanf_r+0x1b8>
 801ac70:	2303      	movs	r3, #3
 801ac72:	9347      	str	r3, [sp, #284]	; 0x11c
 801ac74:	230a      	movs	r3, #10
 801ac76:	9342      	str	r3, [sp, #264]	; 0x108
 801ac78:	e076      	b.n	801ad68 <__ssvfiscanf_r+0x1e4>
 801ac7a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801ac7c:	fb02 1103 	mla	r1, r2, r3, r1
 801ac80:	3930      	subs	r1, #48	; 0x30
 801ac82:	9143      	str	r1, [sp, #268]	; 0x10c
 801ac84:	4655      	mov	r5, sl
 801ac86:	e7d4      	b.n	801ac32 <__ssvfiscanf_r+0xae>
 801ac88:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801ac8c:	2a20      	cmp	r2, #32
 801ac8e:	d8ef      	bhi.n	801ac70 <__ssvfiscanf_r+0xec>
 801ac90:	a101      	add	r1, pc, #4	; (adr r1, 801ac98 <__ssvfiscanf_r+0x114>)
 801ac92:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801ac96:	bf00      	nop
 801ac98:	0801ad4b 	.word	0x0801ad4b
 801ac9c:	0801ac71 	.word	0x0801ac71
 801aca0:	0801ac71 	.word	0x0801ac71
 801aca4:	0801ada9 	.word	0x0801ada9
 801aca8:	0801ac71 	.word	0x0801ac71
 801acac:	0801ac71 	.word	0x0801ac71
 801acb0:	0801ac71 	.word	0x0801ac71
 801acb4:	0801ac71 	.word	0x0801ac71
 801acb8:	0801ac71 	.word	0x0801ac71
 801acbc:	0801ac71 	.word	0x0801ac71
 801acc0:	0801ac71 	.word	0x0801ac71
 801acc4:	0801adbf 	.word	0x0801adbf
 801acc8:	0801ada5 	.word	0x0801ada5
 801accc:	0801ad23 	.word	0x0801ad23
 801acd0:	0801ad23 	.word	0x0801ad23
 801acd4:	0801ad23 	.word	0x0801ad23
 801acd8:	0801ac71 	.word	0x0801ac71
 801acdc:	0801ad61 	.word	0x0801ad61
 801ace0:	0801ac71 	.word	0x0801ac71
 801ace4:	0801ac71 	.word	0x0801ac71
 801ace8:	0801ac71 	.word	0x0801ac71
 801acec:	0801ac71 	.word	0x0801ac71
 801acf0:	0801adcf 	.word	0x0801adcf
 801acf4:	0801ad9d 	.word	0x0801ad9d
 801acf8:	0801ad43 	.word	0x0801ad43
 801acfc:	0801ac71 	.word	0x0801ac71
 801ad00:	0801ac71 	.word	0x0801ac71
 801ad04:	0801adcb 	.word	0x0801adcb
 801ad08:	0801ac71 	.word	0x0801ac71
 801ad0c:	0801ada5 	.word	0x0801ada5
 801ad10:	0801ac71 	.word	0x0801ac71
 801ad14:	0801ac71 	.word	0x0801ac71
 801ad18:	0801ad4b 	.word	0x0801ad4b
 801ad1c:	3b45      	subs	r3, #69	; 0x45
 801ad1e:	2b02      	cmp	r3, #2
 801ad20:	d8a6      	bhi.n	801ac70 <__ssvfiscanf_r+0xec>
 801ad22:	2305      	movs	r3, #5
 801ad24:	e01f      	b.n	801ad66 <__ssvfiscanf_r+0x1e2>
 801ad26:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801ad28:	4621      	mov	r1, r4
 801ad2a:	4630      	mov	r0, r6
 801ad2c:	4798      	blx	r3
 801ad2e:	2800      	cmp	r0, #0
 801ad30:	f43f af68 	beq.w	801ac04 <__ssvfiscanf_r+0x80>
 801ad34:	9844      	ldr	r0, [sp, #272]	; 0x110
 801ad36:	2800      	cmp	r0, #0
 801ad38:	f040 808d 	bne.w	801ae56 <__ssvfiscanf_r+0x2d2>
 801ad3c:	f04f 30ff 	mov.w	r0, #4294967295
 801ad40:	e08f      	b.n	801ae62 <__ssvfiscanf_r+0x2de>
 801ad42:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801ad44:	f042 0220 	orr.w	r2, r2, #32
 801ad48:	9241      	str	r2, [sp, #260]	; 0x104
 801ad4a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801ad4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ad50:	9241      	str	r2, [sp, #260]	; 0x104
 801ad52:	2210      	movs	r2, #16
 801ad54:	2b6f      	cmp	r3, #111	; 0x6f
 801ad56:	9242      	str	r2, [sp, #264]	; 0x108
 801ad58:	bf34      	ite	cc
 801ad5a:	2303      	movcc	r3, #3
 801ad5c:	2304      	movcs	r3, #4
 801ad5e:	e002      	b.n	801ad66 <__ssvfiscanf_r+0x1e2>
 801ad60:	2300      	movs	r3, #0
 801ad62:	9342      	str	r3, [sp, #264]	; 0x108
 801ad64:	2303      	movs	r3, #3
 801ad66:	9347      	str	r3, [sp, #284]	; 0x11c
 801ad68:	6863      	ldr	r3, [r4, #4]
 801ad6a:	2b00      	cmp	r3, #0
 801ad6c:	dd3d      	ble.n	801adea <__ssvfiscanf_r+0x266>
 801ad6e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801ad70:	0659      	lsls	r1, r3, #25
 801ad72:	d404      	bmi.n	801ad7e <__ssvfiscanf_r+0x1fa>
 801ad74:	6823      	ldr	r3, [r4, #0]
 801ad76:	781a      	ldrb	r2, [r3, #0]
 801ad78:	5cba      	ldrb	r2, [r7, r2]
 801ad7a:	0712      	lsls	r2, r2, #28
 801ad7c:	d43c      	bmi.n	801adf8 <__ssvfiscanf_r+0x274>
 801ad7e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801ad80:	2b02      	cmp	r3, #2
 801ad82:	dc4b      	bgt.n	801ae1c <__ssvfiscanf_r+0x298>
 801ad84:	466b      	mov	r3, sp
 801ad86:	4622      	mov	r2, r4
 801ad88:	a941      	add	r1, sp, #260	; 0x104
 801ad8a:	4630      	mov	r0, r6
 801ad8c:	f000 f872 	bl	801ae74 <_scanf_chars>
 801ad90:	2801      	cmp	r0, #1
 801ad92:	d06a      	beq.n	801ae6a <__ssvfiscanf_r+0x2e6>
 801ad94:	2802      	cmp	r0, #2
 801ad96:	f47f af1c 	bne.w	801abd2 <__ssvfiscanf_r+0x4e>
 801ad9a:	e7cb      	b.n	801ad34 <__ssvfiscanf_r+0x1b0>
 801ad9c:	2308      	movs	r3, #8
 801ad9e:	9342      	str	r3, [sp, #264]	; 0x108
 801ada0:	2304      	movs	r3, #4
 801ada2:	e7e0      	b.n	801ad66 <__ssvfiscanf_r+0x1e2>
 801ada4:	220a      	movs	r2, #10
 801ada6:	e7d5      	b.n	801ad54 <__ssvfiscanf_r+0x1d0>
 801ada8:	4629      	mov	r1, r5
 801adaa:	4640      	mov	r0, r8
 801adac:	f000 fa5e 	bl	801b26c <__sccl>
 801adb0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801adb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801adb6:	9341      	str	r3, [sp, #260]	; 0x104
 801adb8:	4605      	mov	r5, r0
 801adba:	2301      	movs	r3, #1
 801adbc:	e7d3      	b.n	801ad66 <__ssvfiscanf_r+0x1e2>
 801adbe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801adc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801adc4:	9341      	str	r3, [sp, #260]	; 0x104
 801adc6:	2300      	movs	r3, #0
 801adc8:	e7cd      	b.n	801ad66 <__ssvfiscanf_r+0x1e2>
 801adca:	2302      	movs	r3, #2
 801adcc:	e7cb      	b.n	801ad66 <__ssvfiscanf_r+0x1e2>
 801adce:	9841      	ldr	r0, [sp, #260]	; 0x104
 801add0:	06c3      	lsls	r3, r0, #27
 801add2:	f53f aefe 	bmi.w	801abd2 <__ssvfiscanf_r+0x4e>
 801add6:	9b00      	ldr	r3, [sp, #0]
 801add8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801adda:	1d19      	adds	r1, r3, #4
 801addc:	9100      	str	r1, [sp, #0]
 801adde:	681b      	ldr	r3, [r3, #0]
 801ade0:	07c0      	lsls	r0, r0, #31
 801ade2:	bf4c      	ite	mi
 801ade4:	801a      	strhmi	r2, [r3, #0]
 801ade6:	601a      	strpl	r2, [r3, #0]
 801ade8:	e6f3      	b.n	801abd2 <__ssvfiscanf_r+0x4e>
 801adea:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801adec:	4621      	mov	r1, r4
 801adee:	4630      	mov	r0, r6
 801adf0:	4798      	blx	r3
 801adf2:	2800      	cmp	r0, #0
 801adf4:	d0bb      	beq.n	801ad6e <__ssvfiscanf_r+0x1ea>
 801adf6:	e79d      	b.n	801ad34 <__ssvfiscanf_r+0x1b0>
 801adf8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801adfa:	3201      	adds	r2, #1
 801adfc:	9245      	str	r2, [sp, #276]	; 0x114
 801adfe:	6862      	ldr	r2, [r4, #4]
 801ae00:	3a01      	subs	r2, #1
 801ae02:	2a00      	cmp	r2, #0
 801ae04:	6062      	str	r2, [r4, #4]
 801ae06:	dd02      	ble.n	801ae0e <__ssvfiscanf_r+0x28a>
 801ae08:	3301      	adds	r3, #1
 801ae0a:	6023      	str	r3, [r4, #0]
 801ae0c:	e7b2      	b.n	801ad74 <__ssvfiscanf_r+0x1f0>
 801ae0e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801ae10:	4621      	mov	r1, r4
 801ae12:	4630      	mov	r0, r6
 801ae14:	4798      	blx	r3
 801ae16:	2800      	cmp	r0, #0
 801ae18:	d0ac      	beq.n	801ad74 <__ssvfiscanf_r+0x1f0>
 801ae1a:	e78b      	b.n	801ad34 <__ssvfiscanf_r+0x1b0>
 801ae1c:	2b04      	cmp	r3, #4
 801ae1e:	dc0f      	bgt.n	801ae40 <__ssvfiscanf_r+0x2bc>
 801ae20:	466b      	mov	r3, sp
 801ae22:	4622      	mov	r2, r4
 801ae24:	a941      	add	r1, sp, #260	; 0x104
 801ae26:	4630      	mov	r0, r6
 801ae28:	f000 f87e 	bl	801af28 <_scanf_i>
 801ae2c:	e7b0      	b.n	801ad90 <__ssvfiscanf_r+0x20c>
 801ae2e:	bf00      	nop
 801ae30:	0801aad1 	.word	0x0801aad1
 801ae34:	0801ab4b 	.word	0x0801ab4b
 801ae38:	0801c6c9 	.word	0x0801c6c9
 801ae3c:	0801c7cf 	.word	0x0801c7cf
 801ae40:	4b0b      	ldr	r3, [pc, #44]	; (801ae70 <__ssvfiscanf_r+0x2ec>)
 801ae42:	2b00      	cmp	r3, #0
 801ae44:	f43f aec5 	beq.w	801abd2 <__ssvfiscanf_r+0x4e>
 801ae48:	466b      	mov	r3, sp
 801ae4a:	4622      	mov	r2, r4
 801ae4c:	a941      	add	r1, sp, #260	; 0x104
 801ae4e:	4630      	mov	r0, r6
 801ae50:	f7fc fefc 	bl	8017c4c <_scanf_float>
 801ae54:	e79c      	b.n	801ad90 <__ssvfiscanf_r+0x20c>
 801ae56:	89a3      	ldrh	r3, [r4, #12]
 801ae58:	f013 0f40 	tst.w	r3, #64	; 0x40
 801ae5c:	bf18      	it	ne
 801ae5e:	f04f 30ff 	movne.w	r0, #4294967295
 801ae62:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801ae66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ae6a:	9844      	ldr	r0, [sp, #272]	; 0x110
 801ae6c:	e7f9      	b.n	801ae62 <__ssvfiscanf_r+0x2de>
 801ae6e:	bf00      	nop
 801ae70:	08017c4d 	.word	0x08017c4d

0801ae74 <_scanf_chars>:
 801ae74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ae78:	4615      	mov	r5, r2
 801ae7a:	688a      	ldr	r2, [r1, #8]
 801ae7c:	4680      	mov	r8, r0
 801ae7e:	460c      	mov	r4, r1
 801ae80:	b932      	cbnz	r2, 801ae90 <_scanf_chars+0x1c>
 801ae82:	698a      	ldr	r2, [r1, #24]
 801ae84:	2a00      	cmp	r2, #0
 801ae86:	bf0c      	ite	eq
 801ae88:	2201      	moveq	r2, #1
 801ae8a:	f04f 32ff 	movne.w	r2, #4294967295
 801ae8e:	608a      	str	r2, [r1, #8]
 801ae90:	6822      	ldr	r2, [r4, #0]
 801ae92:	f8df 9090 	ldr.w	r9, [pc, #144]	; 801af24 <_scanf_chars+0xb0>
 801ae96:	06d1      	lsls	r1, r2, #27
 801ae98:	bf5f      	itttt	pl
 801ae9a:	681a      	ldrpl	r2, [r3, #0]
 801ae9c:	1d11      	addpl	r1, r2, #4
 801ae9e:	6019      	strpl	r1, [r3, #0]
 801aea0:	6816      	ldrpl	r6, [r2, #0]
 801aea2:	2700      	movs	r7, #0
 801aea4:	69a0      	ldr	r0, [r4, #24]
 801aea6:	b188      	cbz	r0, 801aecc <_scanf_chars+0x58>
 801aea8:	2801      	cmp	r0, #1
 801aeaa:	d107      	bne.n	801aebc <_scanf_chars+0x48>
 801aeac:	682a      	ldr	r2, [r5, #0]
 801aeae:	7811      	ldrb	r1, [r2, #0]
 801aeb0:	6962      	ldr	r2, [r4, #20]
 801aeb2:	5c52      	ldrb	r2, [r2, r1]
 801aeb4:	b952      	cbnz	r2, 801aecc <_scanf_chars+0x58>
 801aeb6:	2f00      	cmp	r7, #0
 801aeb8:	d031      	beq.n	801af1e <_scanf_chars+0xaa>
 801aeba:	e022      	b.n	801af02 <_scanf_chars+0x8e>
 801aebc:	2802      	cmp	r0, #2
 801aebe:	d120      	bne.n	801af02 <_scanf_chars+0x8e>
 801aec0:	682b      	ldr	r3, [r5, #0]
 801aec2:	781b      	ldrb	r3, [r3, #0]
 801aec4:	f819 3003 	ldrb.w	r3, [r9, r3]
 801aec8:	071b      	lsls	r3, r3, #28
 801aeca:	d41a      	bmi.n	801af02 <_scanf_chars+0x8e>
 801aecc:	6823      	ldr	r3, [r4, #0]
 801aece:	06da      	lsls	r2, r3, #27
 801aed0:	bf5e      	ittt	pl
 801aed2:	682b      	ldrpl	r3, [r5, #0]
 801aed4:	781b      	ldrbpl	r3, [r3, #0]
 801aed6:	f806 3b01 	strbpl.w	r3, [r6], #1
 801aeda:	682a      	ldr	r2, [r5, #0]
 801aedc:	686b      	ldr	r3, [r5, #4]
 801aede:	3201      	adds	r2, #1
 801aee0:	602a      	str	r2, [r5, #0]
 801aee2:	68a2      	ldr	r2, [r4, #8]
 801aee4:	3b01      	subs	r3, #1
 801aee6:	3a01      	subs	r2, #1
 801aee8:	606b      	str	r3, [r5, #4]
 801aeea:	3701      	adds	r7, #1
 801aeec:	60a2      	str	r2, [r4, #8]
 801aeee:	b142      	cbz	r2, 801af02 <_scanf_chars+0x8e>
 801aef0:	2b00      	cmp	r3, #0
 801aef2:	dcd7      	bgt.n	801aea4 <_scanf_chars+0x30>
 801aef4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801aef8:	4629      	mov	r1, r5
 801aefa:	4640      	mov	r0, r8
 801aefc:	4798      	blx	r3
 801aefe:	2800      	cmp	r0, #0
 801af00:	d0d0      	beq.n	801aea4 <_scanf_chars+0x30>
 801af02:	6823      	ldr	r3, [r4, #0]
 801af04:	f013 0310 	ands.w	r3, r3, #16
 801af08:	d105      	bne.n	801af16 <_scanf_chars+0xa2>
 801af0a:	68e2      	ldr	r2, [r4, #12]
 801af0c:	3201      	adds	r2, #1
 801af0e:	60e2      	str	r2, [r4, #12]
 801af10:	69a2      	ldr	r2, [r4, #24]
 801af12:	b102      	cbz	r2, 801af16 <_scanf_chars+0xa2>
 801af14:	7033      	strb	r3, [r6, #0]
 801af16:	6923      	ldr	r3, [r4, #16]
 801af18:	443b      	add	r3, r7
 801af1a:	6123      	str	r3, [r4, #16]
 801af1c:	2000      	movs	r0, #0
 801af1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801af22:	bf00      	nop
 801af24:	0801c6c9 	.word	0x0801c6c9

0801af28 <_scanf_i>:
 801af28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af2c:	4698      	mov	r8, r3
 801af2e:	4b74      	ldr	r3, [pc, #464]	; (801b100 <_scanf_i+0x1d8>)
 801af30:	460c      	mov	r4, r1
 801af32:	4682      	mov	sl, r0
 801af34:	4616      	mov	r6, r2
 801af36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801af3a:	b087      	sub	sp, #28
 801af3c:	ab03      	add	r3, sp, #12
 801af3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801af42:	4b70      	ldr	r3, [pc, #448]	; (801b104 <_scanf_i+0x1dc>)
 801af44:	69a1      	ldr	r1, [r4, #24]
 801af46:	4a70      	ldr	r2, [pc, #448]	; (801b108 <_scanf_i+0x1e0>)
 801af48:	2903      	cmp	r1, #3
 801af4a:	bf18      	it	ne
 801af4c:	461a      	movne	r2, r3
 801af4e:	68a3      	ldr	r3, [r4, #8]
 801af50:	9201      	str	r2, [sp, #4]
 801af52:	1e5a      	subs	r2, r3, #1
 801af54:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801af58:	bf88      	it	hi
 801af5a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801af5e:	4627      	mov	r7, r4
 801af60:	bf82      	ittt	hi
 801af62:	eb03 0905 	addhi.w	r9, r3, r5
 801af66:	f240 135d 	movwhi	r3, #349	; 0x15d
 801af6a:	60a3      	strhi	r3, [r4, #8]
 801af6c:	f857 3b1c 	ldr.w	r3, [r7], #28
 801af70:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801af74:	bf98      	it	ls
 801af76:	f04f 0900 	movls.w	r9, #0
 801af7a:	6023      	str	r3, [r4, #0]
 801af7c:	463d      	mov	r5, r7
 801af7e:	f04f 0b00 	mov.w	fp, #0
 801af82:	6831      	ldr	r1, [r6, #0]
 801af84:	ab03      	add	r3, sp, #12
 801af86:	7809      	ldrb	r1, [r1, #0]
 801af88:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801af8c:	2202      	movs	r2, #2
 801af8e:	f7e5 f9cf 	bl	8000330 <memchr>
 801af92:	b328      	cbz	r0, 801afe0 <_scanf_i+0xb8>
 801af94:	f1bb 0f01 	cmp.w	fp, #1
 801af98:	d159      	bne.n	801b04e <_scanf_i+0x126>
 801af9a:	6862      	ldr	r2, [r4, #4]
 801af9c:	b92a      	cbnz	r2, 801afaa <_scanf_i+0x82>
 801af9e:	6822      	ldr	r2, [r4, #0]
 801afa0:	2308      	movs	r3, #8
 801afa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801afa6:	6063      	str	r3, [r4, #4]
 801afa8:	6022      	str	r2, [r4, #0]
 801afaa:	6822      	ldr	r2, [r4, #0]
 801afac:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801afb0:	6022      	str	r2, [r4, #0]
 801afb2:	68a2      	ldr	r2, [r4, #8]
 801afb4:	1e51      	subs	r1, r2, #1
 801afb6:	60a1      	str	r1, [r4, #8]
 801afb8:	b192      	cbz	r2, 801afe0 <_scanf_i+0xb8>
 801afba:	6832      	ldr	r2, [r6, #0]
 801afbc:	1c51      	adds	r1, r2, #1
 801afbe:	6031      	str	r1, [r6, #0]
 801afc0:	7812      	ldrb	r2, [r2, #0]
 801afc2:	f805 2b01 	strb.w	r2, [r5], #1
 801afc6:	6872      	ldr	r2, [r6, #4]
 801afc8:	3a01      	subs	r2, #1
 801afca:	2a00      	cmp	r2, #0
 801afcc:	6072      	str	r2, [r6, #4]
 801afce:	dc07      	bgt.n	801afe0 <_scanf_i+0xb8>
 801afd0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801afd4:	4631      	mov	r1, r6
 801afd6:	4650      	mov	r0, sl
 801afd8:	4790      	blx	r2
 801afda:	2800      	cmp	r0, #0
 801afdc:	f040 8085 	bne.w	801b0ea <_scanf_i+0x1c2>
 801afe0:	f10b 0b01 	add.w	fp, fp, #1
 801afe4:	f1bb 0f03 	cmp.w	fp, #3
 801afe8:	d1cb      	bne.n	801af82 <_scanf_i+0x5a>
 801afea:	6863      	ldr	r3, [r4, #4]
 801afec:	b90b      	cbnz	r3, 801aff2 <_scanf_i+0xca>
 801afee:	230a      	movs	r3, #10
 801aff0:	6063      	str	r3, [r4, #4]
 801aff2:	6863      	ldr	r3, [r4, #4]
 801aff4:	4945      	ldr	r1, [pc, #276]	; (801b10c <_scanf_i+0x1e4>)
 801aff6:	6960      	ldr	r0, [r4, #20]
 801aff8:	1ac9      	subs	r1, r1, r3
 801affa:	f000 f937 	bl	801b26c <__sccl>
 801affe:	f04f 0b00 	mov.w	fp, #0
 801b002:	68a3      	ldr	r3, [r4, #8]
 801b004:	6822      	ldr	r2, [r4, #0]
 801b006:	2b00      	cmp	r3, #0
 801b008:	d03d      	beq.n	801b086 <_scanf_i+0x15e>
 801b00a:	6831      	ldr	r1, [r6, #0]
 801b00c:	6960      	ldr	r0, [r4, #20]
 801b00e:	f891 c000 	ldrb.w	ip, [r1]
 801b012:	f810 000c 	ldrb.w	r0, [r0, ip]
 801b016:	2800      	cmp	r0, #0
 801b018:	d035      	beq.n	801b086 <_scanf_i+0x15e>
 801b01a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801b01e:	d124      	bne.n	801b06a <_scanf_i+0x142>
 801b020:	0510      	lsls	r0, r2, #20
 801b022:	d522      	bpl.n	801b06a <_scanf_i+0x142>
 801b024:	f10b 0b01 	add.w	fp, fp, #1
 801b028:	f1b9 0f00 	cmp.w	r9, #0
 801b02c:	d003      	beq.n	801b036 <_scanf_i+0x10e>
 801b02e:	3301      	adds	r3, #1
 801b030:	f109 39ff 	add.w	r9, r9, #4294967295
 801b034:	60a3      	str	r3, [r4, #8]
 801b036:	6873      	ldr	r3, [r6, #4]
 801b038:	3b01      	subs	r3, #1
 801b03a:	2b00      	cmp	r3, #0
 801b03c:	6073      	str	r3, [r6, #4]
 801b03e:	dd1b      	ble.n	801b078 <_scanf_i+0x150>
 801b040:	6833      	ldr	r3, [r6, #0]
 801b042:	3301      	adds	r3, #1
 801b044:	6033      	str	r3, [r6, #0]
 801b046:	68a3      	ldr	r3, [r4, #8]
 801b048:	3b01      	subs	r3, #1
 801b04a:	60a3      	str	r3, [r4, #8]
 801b04c:	e7d9      	b.n	801b002 <_scanf_i+0xda>
 801b04e:	f1bb 0f02 	cmp.w	fp, #2
 801b052:	d1ae      	bne.n	801afb2 <_scanf_i+0x8a>
 801b054:	6822      	ldr	r2, [r4, #0]
 801b056:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801b05a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801b05e:	d1bf      	bne.n	801afe0 <_scanf_i+0xb8>
 801b060:	2310      	movs	r3, #16
 801b062:	6063      	str	r3, [r4, #4]
 801b064:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801b068:	e7a2      	b.n	801afb0 <_scanf_i+0x88>
 801b06a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801b06e:	6022      	str	r2, [r4, #0]
 801b070:	780b      	ldrb	r3, [r1, #0]
 801b072:	f805 3b01 	strb.w	r3, [r5], #1
 801b076:	e7de      	b.n	801b036 <_scanf_i+0x10e>
 801b078:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801b07c:	4631      	mov	r1, r6
 801b07e:	4650      	mov	r0, sl
 801b080:	4798      	blx	r3
 801b082:	2800      	cmp	r0, #0
 801b084:	d0df      	beq.n	801b046 <_scanf_i+0x11e>
 801b086:	6823      	ldr	r3, [r4, #0]
 801b088:	05d9      	lsls	r1, r3, #23
 801b08a:	d50d      	bpl.n	801b0a8 <_scanf_i+0x180>
 801b08c:	42bd      	cmp	r5, r7
 801b08e:	d909      	bls.n	801b0a4 <_scanf_i+0x17c>
 801b090:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801b094:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b098:	4632      	mov	r2, r6
 801b09a:	4650      	mov	r0, sl
 801b09c:	4798      	blx	r3
 801b09e:	f105 39ff 	add.w	r9, r5, #4294967295
 801b0a2:	464d      	mov	r5, r9
 801b0a4:	42bd      	cmp	r5, r7
 801b0a6:	d028      	beq.n	801b0fa <_scanf_i+0x1d2>
 801b0a8:	6822      	ldr	r2, [r4, #0]
 801b0aa:	f012 0210 	ands.w	r2, r2, #16
 801b0ae:	d113      	bne.n	801b0d8 <_scanf_i+0x1b0>
 801b0b0:	702a      	strb	r2, [r5, #0]
 801b0b2:	6863      	ldr	r3, [r4, #4]
 801b0b4:	9e01      	ldr	r6, [sp, #4]
 801b0b6:	4639      	mov	r1, r7
 801b0b8:	4650      	mov	r0, sl
 801b0ba:	47b0      	blx	r6
 801b0bc:	f8d8 3000 	ldr.w	r3, [r8]
 801b0c0:	6821      	ldr	r1, [r4, #0]
 801b0c2:	1d1a      	adds	r2, r3, #4
 801b0c4:	f8c8 2000 	str.w	r2, [r8]
 801b0c8:	f011 0f20 	tst.w	r1, #32
 801b0cc:	681b      	ldr	r3, [r3, #0]
 801b0ce:	d00f      	beq.n	801b0f0 <_scanf_i+0x1c8>
 801b0d0:	6018      	str	r0, [r3, #0]
 801b0d2:	68e3      	ldr	r3, [r4, #12]
 801b0d4:	3301      	adds	r3, #1
 801b0d6:	60e3      	str	r3, [r4, #12]
 801b0d8:	6923      	ldr	r3, [r4, #16]
 801b0da:	1bed      	subs	r5, r5, r7
 801b0dc:	445d      	add	r5, fp
 801b0de:	442b      	add	r3, r5
 801b0e0:	6123      	str	r3, [r4, #16]
 801b0e2:	2000      	movs	r0, #0
 801b0e4:	b007      	add	sp, #28
 801b0e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0ea:	f04f 0b00 	mov.w	fp, #0
 801b0ee:	e7ca      	b.n	801b086 <_scanf_i+0x15e>
 801b0f0:	07ca      	lsls	r2, r1, #31
 801b0f2:	bf4c      	ite	mi
 801b0f4:	8018      	strhmi	r0, [r3, #0]
 801b0f6:	6018      	strpl	r0, [r3, #0]
 801b0f8:	e7eb      	b.n	801b0d2 <_scanf_i+0x1aa>
 801b0fa:	2001      	movs	r0, #1
 801b0fc:	e7f2      	b.n	801b0e4 <_scanf_i+0x1bc>
 801b0fe:	bf00      	nop
 801b100:	0801c384 	.word	0x0801c384
 801b104:	0801bc5d 	.word	0x0801bc5d
 801b108:	0801a81d 	.word	0x0801a81d
 801b10c:	0801c7ea 	.word	0x0801c7ea

0801b110 <__sflush_r>:
 801b110:	898a      	ldrh	r2, [r1, #12]
 801b112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b116:	4605      	mov	r5, r0
 801b118:	0710      	lsls	r0, r2, #28
 801b11a:	460c      	mov	r4, r1
 801b11c:	d458      	bmi.n	801b1d0 <__sflush_r+0xc0>
 801b11e:	684b      	ldr	r3, [r1, #4]
 801b120:	2b00      	cmp	r3, #0
 801b122:	dc05      	bgt.n	801b130 <__sflush_r+0x20>
 801b124:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b126:	2b00      	cmp	r3, #0
 801b128:	dc02      	bgt.n	801b130 <__sflush_r+0x20>
 801b12a:	2000      	movs	r0, #0
 801b12c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b130:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b132:	2e00      	cmp	r6, #0
 801b134:	d0f9      	beq.n	801b12a <__sflush_r+0x1a>
 801b136:	2300      	movs	r3, #0
 801b138:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b13c:	682f      	ldr	r7, [r5, #0]
 801b13e:	6a21      	ldr	r1, [r4, #32]
 801b140:	602b      	str	r3, [r5, #0]
 801b142:	d032      	beq.n	801b1aa <__sflush_r+0x9a>
 801b144:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b146:	89a3      	ldrh	r3, [r4, #12]
 801b148:	075a      	lsls	r2, r3, #29
 801b14a:	d505      	bpl.n	801b158 <__sflush_r+0x48>
 801b14c:	6863      	ldr	r3, [r4, #4]
 801b14e:	1ac0      	subs	r0, r0, r3
 801b150:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b152:	b10b      	cbz	r3, 801b158 <__sflush_r+0x48>
 801b154:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b156:	1ac0      	subs	r0, r0, r3
 801b158:	2300      	movs	r3, #0
 801b15a:	4602      	mov	r2, r0
 801b15c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b15e:	6a21      	ldr	r1, [r4, #32]
 801b160:	4628      	mov	r0, r5
 801b162:	47b0      	blx	r6
 801b164:	1c43      	adds	r3, r0, #1
 801b166:	89a3      	ldrh	r3, [r4, #12]
 801b168:	d106      	bne.n	801b178 <__sflush_r+0x68>
 801b16a:	6829      	ldr	r1, [r5, #0]
 801b16c:	291d      	cmp	r1, #29
 801b16e:	d82b      	bhi.n	801b1c8 <__sflush_r+0xb8>
 801b170:	4a29      	ldr	r2, [pc, #164]	; (801b218 <__sflush_r+0x108>)
 801b172:	410a      	asrs	r2, r1
 801b174:	07d6      	lsls	r6, r2, #31
 801b176:	d427      	bmi.n	801b1c8 <__sflush_r+0xb8>
 801b178:	2200      	movs	r2, #0
 801b17a:	6062      	str	r2, [r4, #4]
 801b17c:	04d9      	lsls	r1, r3, #19
 801b17e:	6922      	ldr	r2, [r4, #16]
 801b180:	6022      	str	r2, [r4, #0]
 801b182:	d504      	bpl.n	801b18e <__sflush_r+0x7e>
 801b184:	1c42      	adds	r2, r0, #1
 801b186:	d101      	bne.n	801b18c <__sflush_r+0x7c>
 801b188:	682b      	ldr	r3, [r5, #0]
 801b18a:	b903      	cbnz	r3, 801b18e <__sflush_r+0x7e>
 801b18c:	6560      	str	r0, [r4, #84]	; 0x54
 801b18e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b190:	602f      	str	r7, [r5, #0]
 801b192:	2900      	cmp	r1, #0
 801b194:	d0c9      	beq.n	801b12a <__sflush_r+0x1a>
 801b196:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b19a:	4299      	cmp	r1, r3
 801b19c:	d002      	beq.n	801b1a4 <__sflush_r+0x94>
 801b19e:	4628      	mov	r0, r5
 801b1a0:	f7fd ff3e 	bl	8019020 <_free_r>
 801b1a4:	2000      	movs	r0, #0
 801b1a6:	6360      	str	r0, [r4, #52]	; 0x34
 801b1a8:	e7c0      	b.n	801b12c <__sflush_r+0x1c>
 801b1aa:	2301      	movs	r3, #1
 801b1ac:	4628      	mov	r0, r5
 801b1ae:	47b0      	blx	r6
 801b1b0:	1c41      	adds	r1, r0, #1
 801b1b2:	d1c8      	bne.n	801b146 <__sflush_r+0x36>
 801b1b4:	682b      	ldr	r3, [r5, #0]
 801b1b6:	2b00      	cmp	r3, #0
 801b1b8:	d0c5      	beq.n	801b146 <__sflush_r+0x36>
 801b1ba:	2b1d      	cmp	r3, #29
 801b1bc:	d001      	beq.n	801b1c2 <__sflush_r+0xb2>
 801b1be:	2b16      	cmp	r3, #22
 801b1c0:	d101      	bne.n	801b1c6 <__sflush_r+0xb6>
 801b1c2:	602f      	str	r7, [r5, #0]
 801b1c4:	e7b1      	b.n	801b12a <__sflush_r+0x1a>
 801b1c6:	89a3      	ldrh	r3, [r4, #12]
 801b1c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b1cc:	81a3      	strh	r3, [r4, #12]
 801b1ce:	e7ad      	b.n	801b12c <__sflush_r+0x1c>
 801b1d0:	690f      	ldr	r7, [r1, #16]
 801b1d2:	2f00      	cmp	r7, #0
 801b1d4:	d0a9      	beq.n	801b12a <__sflush_r+0x1a>
 801b1d6:	0793      	lsls	r3, r2, #30
 801b1d8:	680e      	ldr	r6, [r1, #0]
 801b1da:	bf08      	it	eq
 801b1dc:	694b      	ldreq	r3, [r1, #20]
 801b1de:	600f      	str	r7, [r1, #0]
 801b1e0:	bf18      	it	ne
 801b1e2:	2300      	movne	r3, #0
 801b1e4:	eba6 0807 	sub.w	r8, r6, r7
 801b1e8:	608b      	str	r3, [r1, #8]
 801b1ea:	f1b8 0f00 	cmp.w	r8, #0
 801b1ee:	dd9c      	ble.n	801b12a <__sflush_r+0x1a>
 801b1f0:	6a21      	ldr	r1, [r4, #32]
 801b1f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b1f4:	4643      	mov	r3, r8
 801b1f6:	463a      	mov	r2, r7
 801b1f8:	4628      	mov	r0, r5
 801b1fa:	47b0      	blx	r6
 801b1fc:	2800      	cmp	r0, #0
 801b1fe:	dc06      	bgt.n	801b20e <__sflush_r+0xfe>
 801b200:	89a3      	ldrh	r3, [r4, #12]
 801b202:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b206:	81a3      	strh	r3, [r4, #12]
 801b208:	f04f 30ff 	mov.w	r0, #4294967295
 801b20c:	e78e      	b.n	801b12c <__sflush_r+0x1c>
 801b20e:	4407      	add	r7, r0
 801b210:	eba8 0800 	sub.w	r8, r8, r0
 801b214:	e7e9      	b.n	801b1ea <__sflush_r+0xda>
 801b216:	bf00      	nop
 801b218:	dfbffffe 	.word	0xdfbffffe

0801b21c <_fflush_r>:
 801b21c:	b538      	push	{r3, r4, r5, lr}
 801b21e:	690b      	ldr	r3, [r1, #16]
 801b220:	4605      	mov	r5, r0
 801b222:	460c      	mov	r4, r1
 801b224:	b913      	cbnz	r3, 801b22c <_fflush_r+0x10>
 801b226:	2500      	movs	r5, #0
 801b228:	4628      	mov	r0, r5
 801b22a:	bd38      	pop	{r3, r4, r5, pc}
 801b22c:	b118      	cbz	r0, 801b236 <_fflush_r+0x1a>
 801b22e:	6a03      	ldr	r3, [r0, #32]
 801b230:	b90b      	cbnz	r3, 801b236 <_fflush_r+0x1a>
 801b232:	f7fc ff9b 	bl	801816c <__sinit>
 801b236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b23a:	2b00      	cmp	r3, #0
 801b23c:	d0f3      	beq.n	801b226 <_fflush_r+0xa>
 801b23e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b240:	07d0      	lsls	r0, r2, #31
 801b242:	d404      	bmi.n	801b24e <_fflush_r+0x32>
 801b244:	0599      	lsls	r1, r3, #22
 801b246:	d402      	bmi.n	801b24e <_fflush_r+0x32>
 801b248:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b24a:	f7fd f8d4 	bl	80183f6 <__retarget_lock_acquire_recursive>
 801b24e:	4628      	mov	r0, r5
 801b250:	4621      	mov	r1, r4
 801b252:	f7ff ff5d 	bl	801b110 <__sflush_r>
 801b256:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b258:	07da      	lsls	r2, r3, #31
 801b25a:	4605      	mov	r5, r0
 801b25c:	d4e4      	bmi.n	801b228 <_fflush_r+0xc>
 801b25e:	89a3      	ldrh	r3, [r4, #12]
 801b260:	059b      	lsls	r3, r3, #22
 801b262:	d4e1      	bmi.n	801b228 <_fflush_r+0xc>
 801b264:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b266:	f7fd f8c7 	bl	80183f8 <__retarget_lock_release_recursive>
 801b26a:	e7dd      	b.n	801b228 <_fflush_r+0xc>

0801b26c <__sccl>:
 801b26c:	b570      	push	{r4, r5, r6, lr}
 801b26e:	780b      	ldrb	r3, [r1, #0]
 801b270:	4604      	mov	r4, r0
 801b272:	2b5e      	cmp	r3, #94	; 0x5e
 801b274:	bf0b      	itete	eq
 801b276:	784b      	ldrbeq	r3, [r1, #1]
 801b278:	1c4a      	addne	r2, r1, #1
 801b27a:	1c8a      	addeq	r2, r1, #2
 801b27c:	2100      	movne	r1, #0
 801b27e:	bf08      	it	eq
 801b280:	2101      	moveq	r1, #1
 801b282:	3801      	subs	r0, #1
 801b284:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801b288:	f800 1f01 	strb.w	r1, [r0, #1]!
 801b28c:	42a8      	cmp	r0, r5
 801b28e:	d1fb      	bne.n	801b288 <__sccl+0x1c>
 801b290:	b90b      	cbnz	r3, 801b296 <__sccl+0x2a>
 801b292:	1e50      	subs	r0, r2, #1
 801b294:	bd70      	pop	{r4, r5, r6, pc}
 801b296:	f081 0101 	eor.w	r1, r1, #1
 801b29a:	54e1      	strb	r1, [r4, r3]
 801b29c:	4610      	mov	r0, r2
 801b29e:	4602      	mov	r2, r0
 801b2a0:	f812 5b01 	ldrb.w	r5, [r2], #1
 801b2a4:	2d2d      	cmp	r5, #45	; 0x2d
 801b2a6:	d005      	beq.n	801b2b4 <__sccl+0x48>
 801b2a8:	2d5d      	cmp	r5, #93	; 0x5d
 801b2aa:	d016      	beq.n	801b2da <__sccl+0x6e>
 801b2ac:	2d00      	cmp	r5, #0
 801b2ae:	d0f1      	beq.n	801b294 <__sccl+0x28>
 801b2b0:	462b      	mov	r3, r5
 801b2b2:	e7f2      	b.n	801b29a <__sccl+0x2e>
 801b2b4:	7846      	ldrb	r6, [r0, #1]
 801b2b6:	2e5d      	cmp	r6, #93	; 0x5d
 801b2b8:	d0fa      	beq.n	801b2b0 <__sccl+0x44>
 801b2ba:	42b3      	cmp	r3, r6
 801b2bc:	dcf8      	bgt.n	801b2b0 <__sccl+0x44>
 801b2be:	3002      	adds	r0, #2
 801b2c0:	461a      	mov	r2, r3
 801b2c2:	3201      	adds	r2, #1
 801b2c4:	4296      	cmp	r6, r2
 801b2c6:	54a1      	strb	r1, [r4, r2]
 801b2c8:	dcfb      	bgt.n	801b2c2 <__sccl+0x56>
 801b2ca:	1af2      	subs	r2, r6, r3
 801b2cc:	3a01      	subs	r2, #1
 801b2ce:	1c5d      	adds	r5, r3, #1
 801b2d0:	42b3      	cmp	r3, r6
 801b2d2:	bfa8      	it	ge
 801b2d4:	2200      	movge	r2, #0
 801b2d6:	18ab      	adds	r3, r5, r2
 801b2d8:	e7e1      	b.n	801b29e <__sccl+0x32>
 801b2da:	4610      	mov	r0, r2
 801b2dc:	e7da      	b.n	801b294 <__sccl+0x28>

0801b2de <__submore>:
 801b2de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b2e2:	460c      	mov	r4, r1
 801b2e4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801b2e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b2ea:	4299      	cmp	r1, r3
 801b2ec:	d11d      	bne.n	801b32a <__submore+0x4c>
 801b2ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801b2f2:	f7fd ff09 	bl	8019108 <_malloc_r>
 801b2f6:	b918      	cbnz	r0, 801b300 <__submore+0x22>
 801b2f8:	f04f 30ff 	mov.w	r0, #4294967295
 801b2fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b304:	63a3      	str	r3, [r4, #56]	; 0x38
 801b306:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801b30a:	6360      	str	r0, [r4, #52]	; 0x34
 801b30c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801b310:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801b314:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801b318:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801b31c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801b320:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801b324:	6020      	str	r0, [r4, #0]
 801b326:	2000      	movs	r0, #0
 801b328:	e7e8      	b.n	801b2fc <__submore+0x1e>
 801b32a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801b32c:	0077      	lsls	r7, r6, #1
 801b32e:	463a      	mov	r2, r7
 801b330:	f000 fbf3 	bl	801bb1a <_realloc_r>
 801b334:	4605      	mov	r5, r0
 801b336:	2800      	cmp	r0, #0
 801b338:	d0de      	beq.n	801b2f8 <__submore+0x1a>
 801b33a:	eb00 0806 	add.w	r8, r0, r6
 801b33e:	4601      	mov	r1, r0
 801b340:	4632      	mov	r2, r6
 801b342:	4640      	mov	r0, r8
 801b344:	f7fd f861 	bl	801840a <memcpy>
 801b348:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801b34c:	f8c4 8000 	str.w	r8, [r4]
 801b350:	e7e9      	b.n	801b326 <__submore+0x48>

0801b352 <memmove>:
 801b352:	4288      	cmp	r0, r1
 801b354:	b510      	push	{r4, lr}
 801b356:	eb01 0402 	add.w	r4, r1, r2
 801b35a:	d902      	bls.n	801b362 <memmove+0x10>
 801b35c:	4284      	cmp	r4, r0
 801b35e:	4623      	mov	r3, r4
 801b360:	d807      	bhi.n	801b372 <memmove+0x20>
 801b362:	1e43      	subs	r3, r0, #1
 801b364:	42a1      	cmp	r1, r4
 801b366:	d008      	beq.n	801b37a <memmove+0x28>
 801b368:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b36c:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b370:	e7f8      	b.n	801b364 <memmove+0x12>
 801b372:	4402      	add	r2, r0
 801b374:	4601      	mov	r1, r0
 801b376:	428a      	cmp	r2, r1
 801b378:	d100      	bne.n	801b37c <memmove+0x2a>
 801b37a:	bd10      	pop	{r4, pc}
 801b37c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b380:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b384:	e7f7      	b.n	801b376 <memmove+0x24>

0801b386 <strncmp>:
 801b386:	b510      	push	{r4, lr}
 801b388:	b16a      	cbz	r2, 801b3a6 <strncmp+0x20>
 801b38a:	3901      	subs	r1, #1
 801b38c:	1884      	adds	r4, r0, r2
 801b38e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b392:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801b396:	429a      	cmp	r2, r3
 801b398:	d103      	bne.n	801b3a2 <strncmp+0x1c>
 801b39a:	42a0      	cmp	r0, r4
 801b39c:	d001      	beq.n	801b3a2 <strncmp+0x1c>
 801b39e:	2a00      	cmp	r2, #0
 801b3a0:	d1f5      	bne.n	801b38e <strncmp+0x8>
 801b3a2:	1ad0      	subs	r0, r2, r3
 801b3a4:	bd10      	pop	{r4, pc}
 801b3a6:	4610      	mov	r0, r2
 801b3a8:	e7fc      	b.n	801b3a4 <strncmp+0x1e>
	...

0801b3ac <_sbrk_r>:
 801b3ac:	b538      	push	{r3, r4, r5, lr}
 801b3ae:	4d06      	ldr	r5, [pc, #24]	; (801b3c8 <_sbrk_r+0x1c>)
 801b3b0:	2300      	movs	r3, #0
 801b3b2:	4604      	mov	r4, r0
 801b3b4:	4608      	mov	r0, r1
 801b3b6:	602b      	str	r3, [r5, #0]
 801b3b8:	f7e8 fc1a 	bl	8003bf0 <_sbrk>
 801b3bc:	1c43      	adds	r3, r0, #1
 801b3be:	d102      	bne.n	801b3c6 <_sbrk_r+0x1a>
 801b3c0:	682b      	ldr	r3, [r5, #0]
 801b3c2:	b103      	cbz	r3, 801b3c6 <_sbrk_r+0x1a>
 801b3c4:	6023      	str	r3, [r4, #0]
 801b3c6:	bd38      	pop	{r3, r4, r5, pc}
 801b3c8:	24003464 	.word	0x24003464
 801b3cc:	00000000 	.word	0x00000000

0801b3d0 <nan>:
 801b3d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801b3d8 <nan+0x8>
 801b3d4:	4770      	bx	lr
 801b3d6:	bf00      	nop
 801b3d8:	00000000 	.word	0x00000000
 801b3dc:	7ff80000 	.word	0x7ff80000

0801b3e0 <__assert_func>:
 801b3e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b3e2:	4614      	mov	r4, r2
 801b3e4:	461a      	mov	r2, r3
 801b3e6:	4b09      	ldr	r3, [pc, #36]	; (801b40c <__assert_func+0x2c>)
 801b3e8:	681b      	ldr	r3, [r3, #0]
 801b3ea:	4605      	mov	r5, r0
 801b3ec:	68d8      	ldr	r0, [r3, #12]
 801b3ee:	b14c      	cbz	r4, 801b404 <__assert_func+0x24>
 801b3f0:	4b07      	ldr	r3, [pc, #28]	; (801b410 <__assert_func+0x30>)
 801b3f2:	9100      	str	r1, [sp, #0]
 801b3f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b3f8:	4906      	ldr	r1, [pc, #24]	; (801b414 <__assert_func+0x34>)
 801b3fa:	462b      	mov	r3, r5
 801b3fc:	f000 fc3e 	bl	801bc7c <fiprintf>
 801b400:	f000 fc4e 	bl	801bca0 <abort>
 801b404:	4b04      	ldr	r3, [pc, #16]	; (801b418 <__assert_func+0x38>)
 801b406:	461c      	mov	r4, r3
 801b408:	e7f3      	b.n	801b3f2 <__assert_func+0x12>
 801b40a:	bf00      	nop
 801b40c:	24000158 	.word	0x24000158
 801b410:	0801c7fd 	.word	0x0801c7fd
 801b414:	0801c80a 	.word	0x0801c80a
 801b418:	0801c838 	.word	0x0801c838

0801b41c <_calloc_r>:
 801b41c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b41e:	fba1 2402 	umull	r2, r4, r1, r2
 801b422:	b94c      	cbnz	r4, 801b438 <_calloc_r+0x1c>
 801b424:	4611      	mov	r1, r2
 801b426:	9201      	str	r2, [sp, #4]
 801b428:	f7fd fe6e 	bl	8019108 <_malloc_r>
 801b42c:	9a01      	ldr	r2, [sp, #4]
 801b42e:	4605      	mov	r5, r0
 801b430:	b930      	cbnz	r0, 801b440 <_calloc_r+0x24>
 801b432:	4628      	mov	r0, r5
 801b434:	b003      	add	sp, #12
 801b436:	bd30      	pop	{r4, r5, pc}
 801b438:	220c      	movs	r2, #12
 801b43a:	6002      	str	r2, [r0, #0]
 801b43c:	2500      	movs	r5, #0
 801b43e:	e7f8      	b.n	801b432 <_calloc_r+0x16>
 801b440:	4621      	mov	r1, r4
 801b442:	f7fc ff5a 	bl	80182fa <memset>
 801b446:	e7f4      	b.n	801b432 <_calloc_r+0x16>

0801b448 <rshift>:
 801b448:	6903      	ldr	r3, [r0, #16]
 801b44a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801b44e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b452:	ea4f 1261 	mov.w	r2, r1, asr #5
 801b456:	f100 0414 	add.w	r4, r0, #20
 801b45a:	dd45      	ble.n	801b4e8 <rshift+0xa0>
 801b45c:	f011 011f 	ands.w	r1, r1, #31
 801b460:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801b464:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801b468:	d10c      	bne.n	801b484 <rshift+0x3c>
 801b46a:	f100 0710 	add.w	r7, r0, #16
 801b46e:	4629      	mov	r1, r5
 801b470:	42b1      	cmp	r1, r6
 801b472:	d334      	bcc.n	801b4de <rshift+0x96>
 801b474:	1a9b      	subs	r3, r3, r2
 801b476:	009b      	lsls	r3, r3, #2
 801b478:	1eea      	subs	r2, r5, #3
 801b47a:	4296      	cmp	r6, r2
 801b47c:	bf38      	it	cc
 801b47e:	2300      	movcc	r3, #0
 801b480:	4423      	add	r3, r4
 801b482:	e015      	b.n	801b4b0 <rshift+0x68>
 801b484:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801b488:	f1c1 0820 	rsb	r8, r1, #32
 801b48c:	40cf      	lsrs	r7, r1
 801b48e:	f105 0e04 	add.w	lr, r5, #4
 801b492:	46a1      	mov	r9, r4
 801b494:	4576      	cmp	r6, lr
 801b496:	46f4      	mov	ip, lr
 801b498:	d815      	bhi.n	801b4c6 <rshift+0x7e>
 801b49a:	1a9a      	subs	r2, r3, r2
 801b49c:	0092      	lsls	r2, r2, #2
 801b49e:	3a04      	subs	r2, #4
 801b4a0:	3501      	adds	r5, #1
 801b4a2:	42ae      	cmp	r6, r5
 801b4a4:	bf38      	it	cc
 801b4a6:	2200      	movcc	r2, #0
 801b4a8:	18a3      	adds	r3, r4, r2
 801b4aa:	50a7      	str	r7, [r4, r2]
 801b4ac:	b107      	cbz	r7, 801b4b0 <rshift+0x68>
 801b4ae:	3304      	adds	r3, #4
 801b4b0:	1b1a      	subs	r2, r3, r4
 801b4b2:	42a3      	cmp	r3, r4
 801b4b4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801b4b8:	bf08      	it	eq
 801b4ba:	2300      	moveq	r3, #0
 801b4bc:	6102      	str	r2, [r0, #16]
 801b4be:	bf08      	it	eq
 801b4c0:	6143      	streq	r3, [r0, #20]
 801b4c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b4c6:	f8dc c000 	ldr.w	ip, [ip]
 801b4ca:	fa0c fc08 	lsl.w	ip, ip, r8
 801b4ce:	ea4c 0707 	orr.w	r7, ip, r7
 801b4d2:	f849 7b04 	str.w	r7, [r9], #4
 801b4d6:	f85e 7b04 	ldr.w	r7, [lr], #4
 801b4da:	40cf      	lsrs	r7, r1
 801b4dc:	e7da      	b.n	801b494 <rshift+0x4c>
 801b4de:	f851 cb04 	ldr.w	ip, [r1], #4
 801b4e2:	f847 cf04 	str.w	ip, [r7, #4]!
 801b4e6:	e7c3      	b.n	801b470 <rshift+0x28>
 801b4e8:	4623      	mov	r3, r4
 801b4ea:	e7e1      	b.n	801b4b0 <rshift+0x68>

0801b4ec <__hexdig_fun>:
 801b4ec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801b4f0:	2b09      	cmp	r3, #9
 801b4f2:	d802      	bhi.n	801b4fa <__hexdig_fun+0xe>
 801b4f4:	3820      	subs	r0, #32
 801b4f6:	b2c0      	uxtb	r0, r0
 801b4f8:	4770      	bx	lr
 801b4fa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801b4fe:	2b05      	cmp	r3, #5
 801b500:	d801      	bhi.n	801b506 <__hexdig_fun+0x1a>
 801b502:	3847      	subs	r0, #71	; 0x47
 801b504:	e7f7      	b.n	801b4f6 <__hexdig_fun+0xa>
 801b506:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801b50a:	2b05      	cmp	r3, #5
 801b50c:	d801      	bhi.n	801b512 <__hexdig_fun+0x26>
 801b50e:	3827      	subs	r0, #39	; 0x27
 801b510:	e7f1      	b.n	801b4f6 <__hexdig_fun+0xa>
 801b512:	2000      	movs	r0, #0
 801b514:	4770      	bx	lr
	...

0801b518 <__gethex>:
 801b518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b51c:	4617      	mov	r7, r2
 801b51e:	680a      	ldr	r2, [r1, #0]
 801b520:	b085      	sub	sp, #20
 801b522:	f102 0b02 	add.w	fp, r2, #2
 801b526:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801b52a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801b52e:	4681      	mov	r9, r0
 801b530:	468a      	mov	sl, r1
 801b532:	9302      	str	r3, [sp, #8]
 801b534:	32fe      	adds	r2, #254	; 0xfe
 801b536:	eb02 030b 	add.w	r3, r2, fp
 801b53a:	46d8      	mov	r8, fp
 801b53c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801b540:	9301      	str	r3, [sp, #4]
 801b542:	2830      	cmp	r0, #48	; 0x30
 801b544:	d0f7      	beq.n	801b536 <__gethex+0x1e>
 801b546:	f7ff ffd1 	bl	801b4ec <__hexdig_fun>
 801b54a:	4604      	mov	r4, r0
 801b54c:	2800      	cmp	r0, #0
 801b54e:	d138      	bne.n	801b5c2 <__gethex+0xaa>
 801b550:	49a7      	ldr	r1, [pc, #668]	; (801b7f0 <__gethex+0x2d8>)
 801b552:	2201      	movs	r2, #1
 801b554:	4640      	mov	r0, r8
 801b556:	f7ff ff16 	bl	801b386 <strncmp>
 801b55a:	4606      	mov	r6, r0
 801b55c:	2800      	cmp	r0, #0
 801b55e:	d169      	bne.n	801b634 <__gethex+0x11c>
 801b560:	f898 0001 	ldrb.w	r0, [r8, #1]
 801b564:	465d      	mov	r5, fp
 801b566:	f7ff ffc1 	bl	801b4ec <__hexdig_fun>
 801b56a:	2800      	cmp	r0, #0
 801b56c:	d064      	beq.n	801b638 <__gethex+0x120>
 801b56e:	465a      	mov	r2, fp
 801b570:	7810      	ldrb	r0, [r2, #0]
 801b572:	2830      	cmp	r0, #48	; 0x30
 801b574:	4690      	mov	r8, r2
 801b576:	f102 0201 	add.w	r2, r2, #1
 801b57a:	d0f9      	beq.n	801b570 <__gethex+0x58>
 801b57c:	f7ff ffb6 	bl	801b4ec <__hexdig_fun>
 801b580:	2301      	movs	r3, #1
 801b582:	fab0 f480 	clz	r4, r0
 801b586:	0964      	lsrs	r4, r4, #5
 801b588:	465e      	mov	r6, fp
 801b58a:	9301      	str	r3, [sp, #4]
 801b58c:	4642      	mov	r2, r8
 801b58e:	4615      	mov	r5, r2
 801b590:	3201      	adds	r2, #1
 801b592:	7828      	ldrb	r0, [r5, #0]
 801b594:	f7ff ffaa 	bl	801b4ec <__hexdig_fun>
 801b598:	2800      	cmp	r0, #0
 801b59a:	d1f8      	bne.n	801b58e <__gethex+0x76>
 801b59c:	4994      	ldr	r1, [pc, #592]	; (801b7f0 <__gethex+0x2d8>)
 801b59e:	2201      	movs	r2, #1
 801b5a0:	4628      	mov	r0, r5
 801b5a2:	f7ff fef0 	bl	801b386 <strncmp>
 801b5a6:	b978      	cbnz	r0, 801b5c8 <__gethex+0xb0>
 801b5a8:	b946      	cbnz	r6, 801b5bc <__gethex+0xa4>
 801b5aa:	1c6e      	adds	r6, r5, #1
 801b5ac:	4632      	mov	r2, r6
 801b5ae:	4615      	mov	r5, r2
 801b5b0:	3201      	adds	r2, #1
 801b5b2:	7828      	ldrb	r0, [r5, #0]
 801b5b4:	f7ff ff9a 	bl	801b4ec <__hexdig_fun>
 801b5b8:	2800      	cmp	r0, #0
 801b5ba:	d1f8      	bne.n	801b5ae <__gethex+0x96>
 801b5bc:	1b73      	subs	r3, r6, r5
 801b5be:	009e      	lsls	r6, r3, #2
 801b5c0:	e004      	b.n	801b5cc <__gethex+0xb4>
 801b5c2:	2400      	movs	r4, #0
 801b5c4:	4626      	mov	r6, r4
 801b5c6:	e7e1      	b.n	801b58c <__gethex+0x74>
 801b5c8:	2e00      	cmp	r6, #0
 801b5ca:	d1f7      	bne.n	801b5bc <__gethex+0xa4>
 801b5cc:	782b      	ldrb	r3, [r5, #0]
 801b5ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801b5d2:	2b50      	cmp	r3, #80	; 0x50
 801b5d4:	d13d      	bne.n	801b652 <__gethex+0x13a>
 801b5d6:	786b      	ldrb	r3, [r5, #1]
 801b5d8:	2b2b      	cmp	r3, #43	; 0x2b
 801b5da:	d02f      	beq.n	801b63c <__gethex+0x124>
 801b5dc:	2b2d      	cmp	r3, #45	; 0x2d
 801b5de:	d031      	beq.n	801b644 <__gethex+0x12c>
 801b5e0:	1c69      	adds	r1, r5, #1
 801b5e2:	f04f 0b00 	mov.w	fp, #0
 801b5e6:	7808      	ldrb	r0, [r1, #0]
 801b5e8:	f7ff ff80 	bl	801b4ec <__hexdig_fun>
 801b5ec:	1e42      	subs	r2, r0, #1
 801b5ee:	b2d2      	uxtb	r2, r2
 801b5f0:	2a18      	cmp	r2, #24
 801b5f2:	d82e      	bhi.n	801b652 <__gethex+0x13a>
 801b5f4:	f1a0 0210 	sub.w	r2, r0, #16
 801b5f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801b5fc:	f7ff ff76 	bl	801b4ec <__hexdig_fun>
 801b600:	f100 3cff 	add.w	ip, r0, #4294967295
 801b604:	fa5f fc8c 	uxtb.w	ip, ip
 801b608:	f1bc 0f18 	cmp.w	ip, #24
 801b60c:	d91d      	bls.n	801b64a <__gethex+0x132>
 801b60e:	f1bb 0f00 	cmp.w	fp, #0
 801b612:	d000      	beq.n	801b616 <__gethex+0xfe>
 801b614:	4252      	negs	r2, r2
 801b616:	4416      	add	r6, r2
 801b618:	f8ca 1000 	str.w	r1, [sl]
 801b61c:	b1dc      	cbz	r4, 801b656 <__gethex+0x13e>
 801b61e:	9b01      	ldr	r3, [sp, #4]
 801b620:	2b00      	cmp	r3, #0
 801b622:	bf14      	ite	ne
 801b624:	f04f 0800 	movne.w	r8, #0
 801b628:	f04f 0806 	moveq.w	r8, #6
 801b62c:	4640      	mov	r0, r8
 801b62e:	b005      	add	sp, #20
 801b630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b634:	4645      	mov	r5, r8
 801b636:	4626      	mov	r6, r4
 801b638:	2401      	movs	r4, #1
 801b63a:	e7c7      	b.n	801b5cc <__gethex+0xb4>
 801b63c:	f04f 0b00 	mov.w	fp, #0
 801b640:	1ca9      	adds	r1, r5, #2
 801b642:	e7d0      	b.n	801b5e6 <__gethex+0xce>
 801b644:	f04f 0b01 	mov.w	fp, #1
 801b648:	e7fa      	b.n	801b640 <__gethex+0x128>
 801b64a:	230a      	movs	r3, #10
 801b64c:	fb03 0002 	mla	r0, r3, r2, r0
 801b650:	e7d0      	b.n	801b5f4 <__gethex+0xdc>
 801b652:	4629      	mov	r1, r5
 801b654:	e7e0      	b.n	801b618 <__gethex+0x100>
 801b656:	eba5 0308 	sub.w	r3, r5, r8
 801b65a:	3b01      	subs	r3, #1
 801b65c:	4621      	mov	r1, r4
 801b65e:	2b07      	cmp	r3, #7
 801b660:	dc0a      	bgt.n	801b678 <__gethex+0x160>
 801b662:	4648      	mov	r0, r9
 801b664:	f7fd fddc 	bl	8019220 <_Balloc>
 801b668:	4604      	mov	r4, r0
 801b66a:	b940      	cbnz	r0, 801b67e <__gethex+0x166>
 801b66c:	4b61      	ldr	r3, [pc, #388]	; (801b7f4 <__gethex+0x2dc>)
 801b66e:	4602      	mov	r2, r0
 801b670:	21e4      	movs	r1, #228	; 0xe4
 801b672:	4861      	ldr	r0, [pc, #388]	; (801b7f8 <__gethex+0x2e0>)
 801b674:	f7ff feb4 	bl	801b3e0 <__assert_func>
 801b678:	3101      	adds	r1, #1
 801b67a:	105b      	asrs	r3, r3, #1
 801b67c:	e7ef      	b.n	801b65e <__gethex+0x146>
 801b67e:	f100 0a14 	add.w	sl, r0, #20
 801b682:	2300      	movs	r3, #0
 801b684:	495a      	ldr	r1, [pc, #360]	; (801b7f0 <__gethex+0x2d8>)
 801b686:	f8cd a004 	str.w	sl, [sp, #4]
 801b68a:	469b      	mov	fp, r3
 801b68c:	45a8      	cmp	r8, r5
 801b68e:	d342      	bcc.n	801b716 <__gethex+0x1fe>
 801b690:	9801      	ldr	r0, [sp, #4]
 801b692:	f840 bb04 	str.w	fp, [r0], #4
 801b696:	eba0 000a 	sub.w	r0, r0, sl
 801b69a:	1080      	asrs	r0, r0, #2
 801b69c:	6120      	str	r0, [r4, #16]
 801b69e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801b6a2:	4658      	mov	r0, fp
 801b6a4:	f7fd feae 	bl	8019404 <__hi0bits>
 801b6a8:	683d      	ldr	r5, [r7, #0]
 801b6aa:	eba8 0000 	sub.w	r0, r8, r0
 801b6ae:	42a8      	cmp	r0, r5
 801b6b0:	dd59      	ble.n	801b766 <__gethex+0x24e>
 801b6b2:	eba0 0805 	sub.w	r8, r0, r5
 801b6b6:	4641      	mov	r1, r8
 801b6b8:	4620      	mov	r0, r4
 801b6ba:	f7fe fa3a 	bl	8019b32 <__any_on>
 801b6be:	4683      	mov	fp, r0
 801b6c0:	b1b8      	cbz	r0, 801b6f2 <__gethex+0x1da>
 801b6c2:	f108 33ff 	add.w	r3, r8, #4294967295
 801b6c6:	1159      	asrs	r1, r3, #5
 801b6c8:	f003 021f 	and.w	r2, r3, #31
 801b6cc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801b6d0:	f04f 0b01 	mov.w	fp, #1
 801b6d4:	fa0b f202 	lsl.w	r2, fp, r2
 801b6d8:	420a      	tst	r2, r1
 801b6da:	d00a      	beq.n	801b6f2 <__gethex+0x1da>
 801b6dc:	455b      	cmp	r3, fp
 801b6de:	dd06      	ble.n	801b6ee <__gethex+0x1d6>
 801b6e0:	f1a8 0102 	sub.w	r1, r8, #2
 801b6e4:	4620      	mov	r0, r4
 801b6e6:	f7fe fa24 	bl	8019b32 <__any_on>
 801b6ea:	2800      	cmp	r0, #0
 801b6ec:	d138      	bne.n	801b760 <__gethex+0x248>
 801b6ee:	f04f 0b02 	mov.w	fp, #2
 801b6f2:	4641      	mov	r1, r8
 801b6f4:	4620      	mov	r0, r4
 801b6f6:	f7ff fea7 	bl	801b448 <rshift>
 801b6fa:	4446      	add	r6, r8
 801b6fc:	68bb      	ldr	r3, [r7, #8]
 801b6fe:	42b3      	cmp	r3, r6
 801b700:	da41      	bge.n	801b786 <__gethex+0x26e>
 801b702:	4621      	mov	r1, r4
 801b704:	4648      	mov	r0, r9
 801b706:	f7fd fdcb 	bl	80192a0 <_Bfree>
 801b70a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b70c:	2300      	movs	r3, #0
 801b70e:	6013      	str	r3, [r2, #0]
 801b710:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801b714:	e78a      	b.n	801b62c <__gethex+0x114>
 801b716:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801b71a:	2a2e      	cmp	r2, #46	; 0x2e
 801b71c:	d014      	beq.n	801b748 <__gethex+0x230>
 801b71e:	2b20      	cmp	r3, #32
 801b720:	d106      	bne.n	801b730 <__gethex+0x218>
 801b722:	9b01      	ldr	r3, [sp, #4]
 801b724:	f843 bb04 	str.w	fp, [r3], #4
 801b728:	f04f 0b00 	mov.w	fp, #0
 801b72c:	9301      	str	r3, [sp, #4]
 801b72e:	465b      	mov	r3, fp
 801b730:	7828      	ldrb	r0, [r5, #0]
 801b732:	9303      	str	r3, [sp, #12]
 801b734:	f7ff feda 	bl	801b4ec <__hexdig_fun>
 801b738:	9b03      	ldr	r3, [sp, #12]
 801b73a:	f000 000f 	and.w	r0, r0, #15
 801b73e:	4098      	lsls	r0, r3
 801b740:	ea4b 0b00 	orr.w	fp, fp, r0
 801b744:	3304      	adds	r3, #4
 801b746:	e7a1      	b.n	801b68c <__gethex+0x174>
 801b748:	45a8      	cmp	r8, r5
 801b74a:	d8e8      	bhi.n	801b71e <__gethex+0x206>
 801b74c:	2201      	movs	r2, #1
 801b74e:	4628      	mov	r0, r5
 801b750:	9303      	str	r3, [sp, #12]
 801b752:	f7ff fe18 	bl	801b386 <strncmp>
 801b756:	4926      	ldr	r1, [pc, #152]	; (801b7f0 <__gethex+0x2d8>)
 801b758:	9b03      	ldr	r3, [sp, #12]
 801b75a:	2800      	cmp	r0, #0
 801b75c:	d1df      	bne.n	801b71e <__gethex+0x206>
 801b75e:	e795      	b.n	801b68c <__gethex+0x174>
 801b760:	f04f 0b03 	mov.w	fp, #3
 801b764:	e7c5      	b.n	801b6f2 <__gethex+0x1da>
 801b766:	da0b      	bge.n	801b780 <__gethex+0x268>
 801b768:	eba5 0800 	sub.w	r8, r5, r0
 801b76c:	4621      	mov	r1, r4
 801b76e:	4642      	mov	r2, r8
 801b770:	4648      	mov	r0, r9
 801b772:	f7fd ffaf 	bl	80196d4 <__lshift>
 801b776:	eba6 0608 	sub.w	r6, r6, r8
 801b77a:	4604      	mov	r4, r0
 801b77c:	f100 0a14 	add.w	sl, r0, #20
 801b780:	f04f 0b00 	mov.w	fp, #0
 801b784:	e7ba      	b.n	801b6fc <__gethex+0x1e4>
 801b786:	687b      	ldr	r3, [r7, #4]
 801b788:	42b3      	cmp	r3, r6
 801b78a:	dd73      	ble.n	801b874 <__gethex+0x35c>
 801b78c:	1b9e      	subs	r6, r3, r6
 801b78e:	42b5      	cmp	r5, r6
 801b790:	dc34      	bgt.n	801b7fc <__gethex+0x2e4>
 801b792:	68fb      	ldr	r3, [r7, #12]
 801b794:	2b02      	cmp	r3, #2
 801b796:	d023      	beq.n	801b7e0 <__gethex+0x2c8>
 801b798:	2b03      	cmp	r3, #3
 801b79a:	d025      	beq.n	801b7e8 <__gethex+0x2d0>
 801b79c:	2b01      	cmp	r3, #1
 801b79e:	d115      	bne.n	801b7cc <__gethex+0x2b4>
 801b7a0:	42b5      	cmp	r5, r6
 801b7a2:	d113      	bne.n	801b7cc <__gethex+0x2b4>
 801b7a4:	2d01      	cmp	r5, #1
 801b7a6:	d10b      	bne.n	801b7c0 <__gethex+0x2a8>
 801b7a8:	9a02      	ldr	r2, [sp, #8]
 801b7aa:	687b      	ldr	r3, [r7, #4]
 801b7ac:	6013      	str	r3, [r2, #0]
 801b7ae:	2301      	movs	r3, #1
 801b7b0:	6123      	str	r3, [r4, #16]
 801b7b2:	f8ca 3000 	str.w	r3, [sl]
 801b7b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b7b8:	f04f 0862 	mov.w	r8, #98	; 0x62
 801b7bc:	601c      	str	r4, [r3, #0]
 801b7be:	e735      	b.n	801b62c <__gethex+0x114>
 801b7c0:	1e69      	subs	r1, r5, #1
 801b7c2:	4620      	mov	r0, r4
 801b7c4:	f7fe f9b5 	bl	8019b32 <__any_on>
 801b7c8:	2800      	cmp	r0, #0
 801b7ca:	d1ed      	bne.n	801b7a8 <__gethex+0x290>
 801b7cc:	4621      	mov	r1, r4
 801b7ce:	4648      	mov	r0, r9
 801b7d0:	f7fd fd66 	bl	80192a0 <_Bfree>
 801b7d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b7d6:	2300      	movs	r3, #0
 801b7d8:	6013      	str	r3, [r2, #0]
 801b7da:	f04f 0850 	mov.w	r8, #80	; 0x50
 801b7de:	e725      	b.n	801b62c <__gethex+0x114>
 801b7e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b7e2:	2b00      	cmp	r3, #0
 801b7e4:	d1f2      	bne.n	801b7cc <__gethex+0x2b4>
 801b7e6:	e7df      	b.n	801b7a8 <__gethex+0x290>
 801b7e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b7ea:	2b00      	cmp	r3, #0
 801b7ec:	d1dc      	bne.n	801b7a8 <__gethex+0x290>
 801b7ee:	e7ed      	b.n	801b7cc <__gethex+0x2b4>
 801b7f0:	0801c674 	.word	0x0801c674
 801b7f4:	0801c507 	.word	0x0801c507
 801b7f8:	0801c839 	.word	0x0801c839
 801b7fc:	f106 38ff 	add.w	r8, r6, #4294967295
 801b800:	f1bb 0f00 	cmp.w	fp, #0
 801b804:	d133      	bne.n	801b86e <__gethex+0x356>
 801b806:	f1b8 0f00 	cmp.w	r8, #0
 801b80a:	d004      	beq.n	801b816 <__gethex+0x2fe>
 801b80c:	4641      	mov	r1, r8
 801b80e:	4620      	mov	r0, r4
 801b810:	f7fe f98f 	bl	8019b32 <__any_on>
 801b814:	4683      	mov	fp, r0
 801b816:	ea4f 1268 	mov.w	r2, r8, asr #5
 801b81a:	2301      	movs	r3, #1
 801b81c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801b820:	f008 081f 	and.w	r8, r8, #31
 801b824:	fa03 f308 	lsl.w	r3, r3, r8
 801b828:	4213      	tst	r3, r2
 801b82a:	4631      	mov	r1, r6
 801b82c:	4620      	mov	r0, r4
 801b82e:	bf18      	it	ne
 801b830:	f04b 0b02 	orrne.w	fp, fp, #2
 801b834:	1bad      	subs	r5, r5, r6
 801b836:	f7ff fe07 	bl	801b448 <rshift>
 801b83a:	687e      	ldr	r6, [r7, #4]
 801b83c:	f04f 0802 	mov.w	r8, #2
 801b840:	f1bb 0f00 	cmp.w	fp, #0
 801b844:	d04a      	beq.n	801b8dc <__gethex+0x3c4>
 801b846:	68fb      	ldr	r3, [r7, #12]
 801b848:	2b02      	cmp	r3, #2
 801b84a:	d016      	beq.n	801b87a <__gethex+0x362>
 801b84c:	2b03      	cmp	r3, #3
 801b84e:	d018      	beq.n	801b882 <__gethex+0x36a>
 801b850:	2b01      	cmp	r3, #1
 801b852:	d109      	bne.n	801b868 <__gethex+0x350>
 801b854:	f01b 0f02 	tst.w	fp, #2
 801b858:	d006      	beq.n	801b868 <__gethex+0x350>
 801b85a:	f8da 3000 	ldr.w	r3, [sl]
 801b85e:	ea4b 0b03 	orr.w	fp, fp, r3
 801b862:	f01b 0f01 	tst.w	fp, #1
 801b866:	d10f      	bne.n	801b888 <__gethex+0x370>
 801b868:	f048 0810 	orr.w	r8, r8, #16
 801b86c:	e036      	b.n	801b8dc <__gethex+0x3c4>
 801b86e:	f04f 0b01 	mov.w	fp, #1
 801b872:	e7d0      	b.n	801b816 <__gethex+0x2fe>
 801b874:	f04f 0801 	mov.w	r8, #1
 801b878:	e7e2      	b.n	801b840 <__gethex+0x328>
 801b87a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b87c:	f1c3 0301 	rsb	r3, r3, #1
 801b880:	930f      	str	r3, [sp, #60]	; 0x3c
 801b882:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b884:	2b00      	cmp	r3, #0
 801b886:	d0ef      	beq.n	801b868 <__gethex+0x350>
 801b888:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801b88c:	f104 0214 	add.w	r2, r4, #20
 801b890:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801b894:	9301      	str	r3, [sp, #4]
 801b896:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801b89a:	2300      	movs	r3, #0
 801b89c:	4694      	mov	ip, r2
 801b89e:	f852 1b04 	ldr.w	r1, [r2], #4
 801b8a2:	f1b1 3fff 	cmp.w	r1, #4294967295
 801b8a6:	d01e      	beq.n	801b8e6 <__gethex+0x3ce>
 801b8a8:	3101      	adds	r1, #1
 801b8aa:	f8cc 1000 	str.w	r1, [ip]
 801b8ae:	f1b8 0f02 	cmp.w	r8, #2
 801b8b2:	f104 0214 	add.w	r2, r4, #20
 801b8b6:	d13d      	bne.n	801b934 <__gethex+0x41c>
 801b8b8:	683b      	ldr	r3, [r7, #0]
 801b8ba:	3b01      	subs	r3, #1
 801b8bc:	42ab      	cmp	r3, r5
 801b8be:	d10b      	bne.n	801b8d8 <__gethex+0x3c0>
 801b8c0:	1169      	asrs	r1, r5, #5
 801b8c2:	2301      	movs	r3, #1
 801b8c4:	f005 051f 	and.w	r5, r5, #31
 801b8c8:	fa03 f505 	lsl.w	r5, r3, r5
 801b8cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b8d0:	421d      	tst	r5, r3
 801b8d2:	bf18      	it	ne
 801b8d4:	f04f 0801 	movne.w	r8, #1
 801b8d8:	f048 0820 	orr.w	r8, r8, #32
 801b8dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b8de:	601c      	str	r4, [r3, #0]
 801b8e0:	9b02      	ldr	r3, [sp, #8]
 801b8e2:	601e      	str	r6, [r3, #0]
 801b8e4:	e6a2      	b.n	801b62c <__gethex+0x114>
 801b8e6:	4290      	cmp	r0, r2
 801b8e8:	f842 3c04 	str.w	r3, [r2, #-4]
 801b8ec:	d8d6      	bhi.n	801b89c <__gethex+0x384>
 801b8ee:	68a2      	ldr	r2, [r4, #8]
 801b8f0:	4593      	cmp	fp, r2
 801b8f2:	db17      	blt.n	801b924 <__gethex+0x40c>
 801b8f4:	6861      	ldr	r1, [r4, #4]
 801b8f6:	4648      	mov	r0, r9
 801b8f8:	3101      	adds	r1, #1
 801b8fa:	f7fd fc91 	bl	8019220 <_Balloc>
 801b8fe:	4682      	mov	sl, r0
 801b900:	b918      	cbnz	r0, 801b90a <__gethex+0x3f2>
 801b902:	4b1b      	ldr	r3, [pc, #108]	; (801b970 <__gethex+0x458>)
 801b904:	4602      	mov	r2, r0
 801b906:	2184      	movs	r1, #132	; 0x84
 801b908:	e6b3      	b.n	801b672 <__gethex+0x15a>
 801b90a:	6922      	ldr	r2, [r4, #16]
 801b90c:	3202      	adds	r2, #2
 801b90e:	f104 010c 	add.w	r1, r4, #12
 801b912:	0092      	lsls	r2, r2, #2
 801b914:	300c      	adds	r0, #12
 801b916:	f7fc fd78 	bl	801840a <memcpy>
 801b91a:	4621      	mov	r1, r4
 801b91c:	4648      	mov	r0, r9
 801b91e:	f7fd fcbf 	bl	80192a0 <_Bfree>
 801b922:	4654      	mov	r4, sl
 801b924:	6922      	ldr	r2, [r4, #16]
 801b926:	1c51      	adds	r1, r2, #1
 801b928:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801b92c:	6121      	str	r1, [r4, #16]
 801b92e:	2101      	movs	r1, #1
 801b930:	6151      	str	r1, [r2, #20]
 801b932:	e7bc      	b.n	801b8ae <__gethex+0x396>
 801b934:	6921      	ldr	r1, [r4, #16]
 801b936:	4559      	cmp	r1, fp
 801b938:	dd0b      	ble.n	801b952 <__gethex+0x43a>
 801b93a:	2101      	movs	r1, #1
 801b93c:	4620      	mov	r0, r4
 801b93e:	f7ff fd83 	bl	801b448 <rshift>
 801b942:	68bb      	ldr	r3, [r7, #8]
 801b944:	3601      	adds	r6, #1
 801b946:	42b3      	cmp	r3, r6
 801b948:	f6ff aedb 	blt.w	801b702 <__gethex+0x1ea>
 801b94c:	f04f 0801 	mov.w	r8, #1
 801b950:	e7c2      	b.n	801b8d8 <__gethex+0x3c0>
 801b952:	f015 051f 	ands.w	r5, r5, #31
 801b956:	d0f9      	beq.n	801b94c <__gethex+0x434>
 801b958:	9b01      	ldr	r3, [sp, #4]
 801b95a:	441a      	add	r2, r3
 801b95c:	f1c5 0520 	rsb	r5, r5, #32
 801b960:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801b964:	f7fd fd4e 	bl	8019404 <__hi0bits>
 801b968:	42a8      	cmp	r0, r5
 801b96a:	dbe6      	blt.n	801b93a <__gethex+0x422>
 801b96c:	e7ee      	b.n	801b94c <__gethex+0x434>
 801b96e:	bf00      	nop
 801b970:	0801c507 	.word	0x0801c507

0801b974 <L_shift>:
 801b974:	f1c2 0208 	rsb	r2, r2, #8
 801b978:	0092      	lsls	r2, r2, #2
 801b97a:	b570      	push	{r4, r5, r6, lr}
 801b97c:	f1c2 0620 	rsb	r6, r2, #32
 801b980:	6843      	ldr	r3, [r0, #4]
 801b982:	6804      	ldr	r4, [r0, #0]
 801b984:	fa03 f506 	lsl.w	r5, r3, r6
 801b988:	432c      	orrs	r4, r5
 801b98a:	40d3      	lsrs	r3, r2
 801b98c:	6004      	str	r4, [r0, #0]
 801b98e:	f840 3f04 	str.w	r3, [r0, #4]!
 801b992:	4288      	cmp	r0, r1
 801b994:	d3f4      	bcc.n	801b980 <L_shift+0xc>
 801b996:	bd70      	pop	{r4, r5, r6, pc}

0801b998 <__match>:
 801b998:	b530      	push	{r4, r5, lr}
 801b99a:	6803      	ldr	r3, [r0, #0]
 801b99c:	3301      	adds	r3, #1
 801b99e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b9a2:	b914      	cbnz	r4, 801b9aa <__match+0x12>
 801b9a4:	6003      	str	r3, [r0, #0]
 801b9a6:	2001      	movs	r0, #1
 801b9a8:	bd30      	pop	{r4, r5, pc}
 801b9aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b9ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801b9b2:	2d19      	cmp	r5, #25
 801b9b4:	bf98      	it	ls
 801b9b6:	3220      	addls	r2, #32
 801b9b8:	42a2      	cmp	r2, r4
 801b9ba:	d0f0      	beq.n	801b99e <__match+0x6>
 801b9bc:	2000      	movs	r0, #0
 801b9be:	e7f3      	b.n	801b9a8 <__match+0x10>

0801b9c0 <__hexnan>:
 801b9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9c4:	680b      	ldr	r3, [r1, #0]
 801b9c6:	6801      	ldr	r1, [r0, #0]
 801b9c8:	115e      	asrs	r6, r3, #5
 801b9ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801b9ce:	f013 031f 	ands.w	r3, r3, #31
 801b9d2:	b087      	sub	sp, #28
 801b9d4:	bf18      	it	ne
 801b9d6:	3604      	addne	r6, #4
 801b9d8:	2500      	movs	r5, #0
 801b9da:	1f37      	subs	r7, r6, #4
 801b9dc:	4682      	mov	sl, r0
 801b9de:	4690      	mov	r8, r2
 801b9e0:	9301      	str	r3, [sp, #4]
 801b9e2:	f846 5c04 	str.w	r5, [r6, #-4]
 801b9e6:	46b9      	mov	r9, r7
 801b9e8:	463c      	mov	r4, r7
 801b9ea:	9502      	str	r5, [sp, #8]
 801b9ec:	46ab      	mov	fp, r5
 801b9ee:	784a      	ldrb	r2, [r1, #1]
 801b9f0:	1c4b      	adds	r3, r1, #1
 801b9f2:	9303      	str	r3, [sp, #12]
 801b9f4:	b342      	cbz	r2, 801ba48 <__hexnan+0x88>
 801b9f6:	4610      	mov	r0, r2
 801b9f8:	9105      	str	r1, [sp, #20]
 801b9fa:	9204      	str	r2, [sp, #16]
 801b9fc:	f7ff fd76 	bl	801b4ec <__hexdig_fun>
 801ba00:	2800      	cmp	r0, #0
 801ba02:	d14f      	bne.n	801baa4 <__hexnan+0xe4>
 801ba04:	9a04      	ldr	r2, [sp, #16]
 801ba06:	9905      	ldr	r1, [sp, #20]
 801ba08:	2a20      	cmp	r2, #32
 801ba0a:	d818      	bhi.n	801ba3e <__hexnan+0x7e>
 801ba0c:	9b02      	ldr	r3, [sp, #8]
 801ba0e:	459b      	cmp	fp, r3
 801ba10:	dd13      	ble.n	801ba3a <__hexnan+0x7a>
 801ba12:	454c      	cmp	r4, r9
 801ba14:	d206      	bcs.n	801ba24 <__hexnan+0x64>
 801ba16:	2d07      	cmp	r5, #7
 801ba18:	dc04      	bgt.n	801ba24 <__hexnan+0x64>
 801ba1a:	462a      	mov	r2, r5
 801ba1c:	4649      	mov	r1, r9
 801ba1e:	4620      	mov	r0, r4
 801ba20:	f7ff ffa8 	bl	801b974 <L_shift>
 801ba24:	4544      	cmp	r4, r8
 801ba26:	d950      	bls.n	801baca <__hexnan+0x10a>
 801ba28:	2300      	movs	r3, #0
 801ba2a:	f1a4 0904 	sub.w	r9, r4, #4
 801ba2e:	f844 3c04 	str.w	r3, [r4, #-4]
 801ba32:	f8cd b008 	str.w	fp, [sp, #8]
 801ba36:	464c      	mov	r4, r9
 801ba38:	461d      	mov	r5, r3
 801ba3a:	9903      	ldr	r1, [sp, #12]
 801ba3c:	e7d7      	b.n	801b9ee <__hexnan+0x2e>
 801ba3e:	2a29      	cmp	r2, #41	; 0x29
 801ba40:	d155      	bne.n	801baee <__hexnan+0x12e>
 801ba42:	3102      	adds	r1, #2
 801ba44:	f8ca 1000 	str.w	r1, [sl]
 801ba48:	f1bb 0f00 	cmp.w	fp, #0
 801ba4c:	d04f      	beq.n	801baee <__hexnan+0x12e>
 801ba4e:	454c      	cmp	r4, r9
 801ba50:	d206      	bcs.n	801ba60 <__hexnan+0xa0>
 801ba52:	2d07      	cmp	r5, #7
 801ba54:	dc04      	bgt.n	801ba60 <__hexnan+0xa0>
 801ba56:	462a      	mov	r2, r5
 801ba58:	4649      	mov	r1, r9
 801ba5a:	4620      	mov	r0, r4
 801ba5c:	f7ff ff8a 	bl	801b974 <L_shift>
 801ba60:	4544      	cmp	r4, r8
 801ba62:	d934      	bls.n	801bace <__hexnan+0x10e>
 801ba64:	f1a8 0204 	sub.w	r2, r8, #4
 801ba68:	4623      	mov	r3, r4
 801ba6a:	f853 1b04 	ldr.w	r1, [r3], #4
 801ba6e:	f842 1f04 	str.w	r1, [r2, #4]!
 801ba72:	429f      	cmp	r7, r3
 801ba74:	d2f9      	bcs.n	801ba6a <__hexnan+0xaa>
 801ba76:	1b3b      	subs	r3, r7, r4
 801ba78:	f023 0303 	bic.w	r3, r3, #3
 801ba7c:	3304      	adds	r3, #4
 801ba7e:	3e03      	subs	r6, #3
 801ba80:	3401      	adds	r4, #1
 801ba82:	42a6      	cmp	r6, r4
 801ba84:	bf38      	it	cc
 801ba86:	2304      	movcc	r3, #4
 801ba88:	4443      	add	r3, r8
 801ba8a:	2200      	movs	r2, #0
 801ba8c:	f843 2b04 	str.w	r2, [r3], #4
 801ba90:	429f      	cmp	r7, r3
 801ba92:	d2fb      	bcs.n	801ba8c <__hexnan+0xcc>
 801ba94:	683b      	ldr	r3, [r7, #0]
 801ba96:	b91b      	cbnz	r3, 801baa0 <__hexnan+0xe0>
 801ba98:	4547      	cmp	r7, r8
 801ba9a:	d126      	bne.n	801baea <__hexnan+0x12a>
 801ba9c:	2301      	movs	r3, #1
 801ba9e:	603b      	str	r3, [r7, #0]
 801baa0:	2005      	movs	r0, #5
 801baa2:	e025      	b.n	801baf0 <__hexnan+0x130>
 801baa4:	3501      	adds	r5, #1
 801baa6:	2d08      	cmp	r5, #8
 801baa8:	f10b 0b01 	add.w	fp, fp, #1
 801baac:	dd06      	ble.n	801babc <__hexnan+0xfc>
 801baae:	4544      	cmp	r4, r8
 801bab0:	d9c3      	bls.n	801ba3a <__hexnan+0x7a>
 801bab2:	2300      	movs	r3, #0
 801bab4:	f844 3c04 	str.w	r3, [r4, #-4]
 801bab8:	2501      	movs	r5, #1
 801baba:	3c04      	subs	r4, #4
 801babc:	6822      	ldr	r2, [r4, #0]
 801babe:	f000 000f 	and.w	r0, r0, #15
 801bac2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801bac6:	6020      	str	r0, [r4, #0]
 801bac8:	e7b7      	b.n	801ba3a <__hexnan+0x7a>
 801baca:	2508      	movs	r5, #8
 801bacc:	e7b5      	b.n	801ba3a <__hexnan+0x7a>
 801bace:	9b01      	ldr	r3, [sp, #4]
 801bad0:	2b00      	cmp	r3, #0
 801bad2:	d0df      	beq.n	801ba94 <__hexnan+0xd4>
 801bad4:	f1c3 0320 	rsb	r3, r3, #32
 801bad8:	f04f 32ff 	mov.w	r2, #4294967295
 801badc:	40da      	lsrs	r2, r3
 801bade:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801bae2:	4013      	ands	r3, r2
 801bae4:	f846 3c04 	str.w	r3, [r6, #-4]
 801bae8:	e7d4      	b.n	801ba94 <__hexnan+0xd4>
 801baea:	3f04      	subs	r7, #4
 801baec:	e7d2      	b.n	801ba94 <__hexnan+0xd4>
 801baee:	2004      	movs	r0, #4
 801baf0:	b007      	add	sp, #28
 801baf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801baf6 <__ascii_mbtowc>:
 801baf6:	b082      	sub	sp, #8
 801baf8:	b901      	cbnz	r1, 801bafc <__ascii_mbtowc+0x6>
 801bafa:	a901      	add	r1, sp, #4
 801bafc:	b142      	cbz	r2, 801bb10 <__ascii_mbtowc+0x1a>
 801bafe:	b14b      	cbz	r3, 801bb14 <__ascii_mbtowc+0x1e>
 801bb00:	7813      	ldrb	r3, [r2, #0]
 801bb02:	600b      	str	r3, [r1, #0]
 801bb04:	7812      	ldrb	r2, [r2, #0]
 801bb06:	1e10      	subs	r0, r2, #0
 801bb08:	bf18      	it	ne
 801bb0a:	2001      	movne	r0, #1
 801bb0c:	b002      	add	sp, #8
 801bb0e:	4770      	bx	lr
 801bb10:	4610      	mov	r0, r2
 801bb12:	e7fb      	b.n	801bb0c <__ascii_mbtowc+0x16>
 801bb14:	f06f 0001 	mvn.w	r0, #1
 801bb18:	e7f8      	b.n	801bb0c <__ascii_mbtowc+0x16>

0801bb1a <_realloc_r>:
 801bb1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb1e:	4680      	mov	r8, r0
 801bb20:	4614      	mov	r4, r2
 801bb22:	460e      	mov	r6, r1
 801bb24:	b921      	cbnz	r1, 801bb30 <_realloc_r+0x16>
 801bb26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bb2a:	4611      	mov	r1, r2
 801bb2c:	f7fd baec 	b.w	8019108 <_malloc_r>
 801bb30:	b92a      	cbnz	r2, 801bb3e <_realloc_r+0x24>
 801bb32:	f7fd fa75 	bl	8019020 <_free_r>
 801bb36:	4625      	mov	r5, r4
 801bb38:	4628      	mov	r0, r5
 801bb3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bb3e:	f000 f8b6 	bl	801bcae <_malloc_usable_size_r>
 801bb42:	4284      	cmp	r4, r0
 801bb44:	4607      	mov	r7, r0
 801bb46:	d802      	bhi.n	801bb4e <_realloc_r+0x34>
 801bb48:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801bb4c:	d812      	bhi.n	801bb74 <_realloc_r+0x5a>
 801bb4e:	4621      	mov	r1, r4
 801bb50:	4640      	mov	r0, r8
 801bb52:	f7fd fad9 	bl	8019108 <_malloc_r>
 801bb56:	4605      	mov	r5, r0
 801bb58:	2800      	cmp	r0, #0
 801bb5a:	d0ed      	beq.n	801bb38 <_realloc_r+0x1e>
 801bb5c:	42bc      	cmp	r4, r7
 801bb5e:	4622      	mov	r2, r4
 801bb60:	4631      	mov	r1, r6
 801bb62:	bf28      	it	cs
 801bb64:	463a      	movcs	r2, r7
 801bb66:	f7fc fc50 	bl	801840a <memcpy>
 801bb6a:	4631      	mov	r1, r6
 801bb6c:	4640      	mov	r0, r8
 801bb6e:	f7fd fa57 	bl	8019020 <_free_r>
 801bb72:	e7e1      	b.n	801bb38 <_realloc_r+0x1e>
 801bb74:	4635      	mov	r5, r6
 801bb76:	e7df      	b.n	801bb38 <_realloc_r+0x1e>

0801bb78 <_strtoul_l.constprop.0>:
 801bb78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bb7c:	4f36      	ldr	r7, [pc, #216]	; (801bc58 <_strtoul_l.constprop.0+0xe0>)
 801bb7e:	4686      	mov	lr, r0
 801bb80:	460d      	mov	r5, r1
 801bb82:	4628      	mov	r0, r5
 801bb84:	f815 4b01 	ldrb.w	r4, [r5], #1
 801bb88:	5d3e      	ldrb	r6, [r7, r4]
 801bb8a:	f016 0608 	ands.w	r6, r6, #8
 801bb8e:	d1f8      	bne.n	801bb82 <_strtoul_l.constprop.0+0xa>
 801bb90:	2c2d      	cmp	r4, #45	; 0x2d
 801bb92:	d130      	bne.n	801bbf6 <_strtoul_l.constprop.0+0x7e>
 801bb94:	782c      	ldrb	r4, [r5, #0]
 801bb96:	2601      	movs	r6, #1
 801bb98:	1c85      	adds	r5, r0, #2
 801bb9a:	2b00      	cmp	r3, #0
 801bb9c:	d057      	beq.n	801bc4e <_strtoul_l.constprop.0+0xd6>
 801bb9e:	2b10      	cmp	r3, #16
 801bba0:	d109      	bne.n	801bbb6 <_strtoul_l.constprop.0+0x3e>
 801bba2:	2c30      	cmp	r4, #48	; 0x30
 801bba4:	d107      	bne.n	801bbb6 <_strtoul_l.constprop.0+0x3e>
 801bba6:	7828      	ldrb	r0, [r5, #0]
 801bba8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801bbac:	2858      	cmp	r0, #88	; 0x58
 801bbae:	d149      	bne.n	801bc44 <_strtoul_l.constprop.0+0xcc>
 801bbb0:	786c      	ldrb	r4, [r5, #1]
 801bbb2:	2310      	movs	r3, #16
 801bbb4:	3502      	adds	r5, #2
 801bbb6:	f04f 38ff 	mov.w	r8, #4294967295
 801bbba:	2700      	movs	r7, #0
 801bbbc:	fbb8 f8f3 	udiv	r8, r8, r3
 801bbc0:	fb03 f908 	mul.w	r9, r3, r8
 801bbc4:	ea6f 0909 	mvn.w	r9, r9
 801bbc8:	4638      	mov	r0, r7
 801bbca:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801bbce:	f1bc 0f09 	cmp.w	ip, #9
 801bbd2:	d815      	bhi.n	801bc00 <_strtoul_l.constprop.0+0x88>
 801bbd4:	4664      	mov	r4, ip
 801bbd6:	42a3      	cmp	r3, r4
 801bbd8:	dd23      	ble.n	801bc22 <_strtoul_l.constprop.0+0xaa>
 801bbda:	f1b7 3fff 	cmp.w	r7, #4294967295
 801bbde:	d007      	beq.n	801bbf0 <_strtoul_l.constprop.0+0x78>
 801bbe0:	4580      	cmp	r8, r0
 801bbe2:	d31b      	bcc.n	801bc1c <_strtoul_l.constprop.0+0xa4>
 801bbe4:	d101      	bne.n	801bbea <_strtoul_l.constprop.0+0x72>
 801bbe6:	45a1      	cmp	r9, r4
 801bbe8:	db18      	blt.n	801bc1c <_strtoul_l.constprop.0+0xa4>
 801bbea:	fb00 4003 	mla	r0, r0, r3, r4
 801bbee:	2701      	movs	r7, #1
 801bbf0:	f815 4b01 	ldrb.w	r4, [r5], #1
 801bbf4:	e7e9      	b.n	801bbca <_strtoul_l.constprop.0+0x52>
 801bbf6:	2c2b      	cmp	r4, #43	; 0x2b
 801bbf8:	bf04      	itt	eq
 801bbfa:	782c      	ldrbeq	r4, [r5, #0]
 801bbfc:	1c85      	addeq	r5, r0, #2
 801bbfe:	e7cc      	b.n	801bb9a <_strtoul_l.constprop.0+0x22>
 801bc00:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801bc04:	f1bc 0f19 	cmp.w	ip, #25
 801bc08:	d801      	bhi.n	801bc0e <_strtoul_l.constprop.0+0x96>
 801bc0a:	3c37      	subs	r4, #55	; 0x37
 801bc0c:	e7e3      	b.n	801bbd6 <_strtoul_l.constprop.0+0x5e>
 801bc0e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801bc12:	f1bc 0f19 	cmp.w	ip, #25
 801bc16:	d804      	bhi.n	801bc22 <_strtoul_l.constprop.0+0xaa>
 801bc18:	3c57      	subs	r4, #87	; 0x57
 801bc1a:	e7dc      	b.n	801bbd6 <_strtoul_l.constprop.0+0x5e>
 801bc1c:	f04f 37ff 	mov.w	r7, #4294967295
 801bc20:	e7e6      	b.n	801bbf0 <_strtoul_l.constprop.0+0x78>
 801bc22:	1c7b      	adds	r3, r7, #1
 801bc24:	d106      	bne.n	801bc34 <_strtoul_l.constprop.0+0xbc>
 801bc26:	2322      	movs	r3, #34	; 0x22
 801bc28:	f8ce 3000 	str.w	r3, [lr]
 801bc2c:	4638      	mov	r0, r7
 801bc2e:	b932      	cbnz	r2, 801bc3e <_strtoul_l.constprop.0+0xc6>
 801bc30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bc34:	b106      	cbz	r6, 801bc38 <_strtoul_l.constprop.0+0xc0>
 801bc36:	4240      	negs	r0, r0
 801bc38:	2a00      	cmp	r2, #0
 801bc3a:	d0f9      	beq.n	801bc30 <_strtoul_l.constprop.0+0xb8>
 801bc3c:	b107      	cbz	r7, 801bc40 <_strtoul_l.constprop.0+0xc8>
 801bc3e:	1e69      	subs	r1, r5, #1
 801bc40:	6011      	str	r1, [r2, #0]
 801bc42:	e7f5      	b.n	801bc30 <_strtoul_l.constprop.0+0xb8>
 801bc44:	2430      	movs	r4, #48	; 0x30
 801bc46:	2b00      	cmp	r3, #0
 801bc48:	d1b5      	bne.n	801bbb6 <_strtoul_l.constprop.0+0x3e>
 801bc4a:	2308      	movs	r3, #8
 801bc4c:	e7b3      	b.n	801bbb6 <_strtoul_l.constprop.0+0x3e>
 801bc4e:	2c30      	cmp	r4, #48	; 0x30
 801bc50:	d0a9      	beq.n	801bba6 <_strtoul_l.constprop.0+0x2e>
 801bc52:	230a      	movs	r3, #10
 801bc54:	e7af      	b.n	801bbb6 <_strtoul_l.constprop.0+0x3e>
 801bc56:	bf00      	nop
 801bc58:	0801c6c9 	.word	0x0801c6c9

0801bc5c <_strtoul_r>:
 801bc5c:	f7ff bf8c 	b.w	801bb78 <_strtoul_l.constprop.0>

0801bc60 <__ascii_wctomb>:
 801bc60:	b149      	cbz	r1, 801bc76 <__ascii_wctomb+0x16>
 801bc62:	2aff      	cmp	r2, #255	; 0xff
 801bc64:	bf85      	ittet	hi
 801bc66:	238a      	movhi	r3, #138	; 0x8a
 801bc68:	6003      	strhi	r3, [r0, #0]
 801bc6a:	700a      	strbls	r2, [r1, #0]
 801bc6c:	f04f 30ff 	movhi.w	r0, #4294967295
 801bc70:	bf98      	it	ls
 801bc72:	2001      	movls	r0, #1
 801bc74:	4770      	bx	lr
 801bc76:	4608      	mov	r0, r1
 801bc78:	4770      	bx	lr
	...

0801bc7c <fiprintf>:
 801bc7c:	b40e      	push	{r1, r2, r3}
 801bc7e:	b503      	push	{r0, r1, lr}
 801bc80:	4601      	mov	r1, r0
 801bc82:	ab03      	add	r3, sp, #12
 801bc84:	4805      	ldr	r0, [pc, #20]	; (801bc9c <fiprintf+0x20>)
 801bc86:	f853 2b04 	ldr.w	r2, [r3], #4
 801bc8a:	6800      	ldr	r0, [r0, #0]
 801bc8c:	9301      	str	r3, [sp, #4]
 801bc8e:	f000 f83f 	bl	801bd10 <_vfiprintf_r>
 801bc92:	b002      	add	sp, #8
 801bc94:	f85d eb04 	ldr.w	lr, [sp], #4
 801bc98:	b003      	add	sp, #12
 801bc9a:	4770      	bx	lr
 801bc9c:	24000158 	.word	0x24000158

0801bca0 <abort>:
 801bca0:	b508      	push	{r3, lr}
 801bca2:	2006      	movs	r0, #6
 801bca4:	f000 fa0c 	bl	801c0c0 <raise>
 801bca8:	2001      	movs	r0, #1
 801bcaa:	f7e7 ff29 	bl	8003b00 <_exit>

0801bcae <_malloc_usable_size_r>:
 801bcae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bcb2:	1f18      	subs	r0, r3, #4
 801bcb4:	2b00      	cmp	r3, #0
 801bcb6:	bfbc      	itt	lt
 801bcb8:	580b      	ldrlt	r3, [r1, r0]
 801bcba:	18c0      	addlt	r0, r0, r3
 801bcbc:	4770      	bx	lr

0801bcbe <__sfputc_r>:
 801bcbe:	6893      	ldr	r3, [r2, #8]
 801bcc0:	3b01      	subs	r3, #1
 801bcc2:	2b00      	cmp	r3, #0
 801bcc4:	b410      	push	{r4}
 801bcc6:	6093      	str	r3, [r2, #8]
 801bcc8:	da08      	bge.n	801bcdc <__sfputc_r+0x1e>
 801bcca:	6994      	ldr	r4, [r2, #24]
 801bccc:	42a3      	cmp	r3, r4
 801bcce:	db01      	blt.n	801bcd4 <__sfputc_r+0x16>
 801bcd0:	290a      	cmp	r1, #10
 801bcd2:	d103      	bne.n	801bcdc <__sfputc_r+0x1e>
 801bcd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bcd8:	f000 b934 	b.w	801bf44 <__swbuf_r>
 801bcdc:	6813      	ldr	r3, [r2, #0]
 801bcde:	1c58      	adds	r0, r3, #1
 801bce0:	6010      	str	r0, [r2, #0]
 801bce2:	7019      	strb	r1, [r3, #0]
 801bce4:	4608      	mov	r0, r1
 801bce6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bcea:	4770      	bx	lr

0801bcec <__sfputs_r>:
 801bcec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bcee:	4606      	mov	r6, r0
 801bcf0:	460f      	mov	r7, r1
 801bcf2:	4614      	mov	r4, r2
 801bcf4:	18d5      	adds	r5, r2, r3
 801bcf6:	42ac      	cmp	r4, r5
 801bcf8:	d101      	bne.n	801bcfe <__sfputs_r+0x12>
 801bcfa:	2000      	movs	r0, #0
 801bcfc:	e007      	b.n	801bd0e <__sfputs_r+0x22>
 801bcfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bd02:	463a      	mov	r2, r7
 801bd04:	4630      	mov	r0, r6
 801bd06:	f7ff ffda 	bl	801bcbe <__sfputc_r>
 801bd0a:	1c43      	adds	r3, r0, #1
 801bd0c:	d1f3      	bne.n	801bcf6 <__sfputs_r+0xa>
 801bd0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801bd10 <_vfiprintf_r>:
 801bd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd14:	460d      	mov	r5, r1
 801bd16:	b09d      	sub	sp, #116	; 0x74
 801bd18:	4614      	mov	r4, r2
 801bd1a:	4698      	mov	r8, r3
 801bd1c:	4606      	mov	r6, r0
 801bd1e:	b118      	cbz	r0, 801bd28 <_vfiprintf_r+0x18>
 801bd20:	6a03      	ldr	r3, [r0, #32]
 801bd22:	b90b      	cbnz	r3, 801bd28 <_vfiprintf_r+0x18>
 801bd24:	f7fc fa22 	bl	801816c <__sinit>
 801bd28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bd2a:	07d9      	lsls	r1, r3, #31
 801bd2c:	d405      	bmi.n	801bd3a <_vfiprintf_r+0x2a>
 801bd2e:	89ab      	ldrh	r3, [r5, #12]
 801bd30:	059a      	lsls	r2, r3, #22
 801bd32:	d402      	bmi.n	801bd3a <_vfiprintf_r+0x2a>
 801bd34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bd36:	f7fc fb5e 	bl	80183f6 <__retarget_lock_acquire_recursive>
 801bd3a:	89ab      	ldrh	r3, [r5, #12]
 801bd3c:	071b      	lsls	r3, r3, #28
 801bd3e:	d501      	bpl.n	801bd44 <_vfiprintf_r+0x34>
 801bd40:	692b      	ldr	r3, [r5, #16]
 801bd42:	b99b      	cbnz	r3, 801bd6c <_vfiprintf_r+0x5c>
 801bd44:	4629      	mov	r1, r5
 801bd46:	4630      	mov	r0, r6
 801bd48:	f000 f93a 	bl	801bfc0 <__swsetup_r>
 801bd4c:	b170      	cbz	r0, 801bd6c <_vfiprintf_r+0x5c>
 801bd4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bd50:	07dc      	lsls	r4, r3, #31
 801bd52:	d504      	bpl.n	801bd5e <_vfiprintf_r+0x4e>
 801bd54:	f04f 30ff 	mov.w	r0, #4294967295
 801bd58:	b01d      	add	sp, #116	; 0x74
 801bd5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd5e:	89ab      	ldrh	r3, [r5, #12]
 801bd60:	0598      	lsls	r0, r3, #22
 801bd62:	d4f7      	bmi.n	801bd54 <_vfiprintf_r+0x44>
 801bd64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bd66:	f7fc fb47 	bl	80183f8 <__retarget_lock_release_recursive>
 801bd6a:	e7f3      	b.n	801bd54 <_vfiprintf_r+0x44>
 801bd6c:	2300      	movs	r3, #0
 801bd6e:	9309      	str	r3, [sp, #36]	; 0x24
 801bd70:	2320      	movs	r3, #32
 801bd72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801bd76:	f8cd 800c 	str.w	r8, [sp, #12]
 801bd7a:	2330      	movs	r3, #48	; 0x30
 801bd7c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801bf30 <_vfiprintf_r+0x220>
 801bd80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801bd84:	f04f 0901 	mov.w	r9, #1
 801bd88:	4623      	mov	r3, r4
 801bd8a:	469a      	mov	sl, r3
 801bd8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bd90:	b10a      	cbz	r2, 801bd96 <_vfiprintf_r+0x86>
 801bd92:	2a25      	cmp	r2, #37	; 0x25
 801bd94:	d1f9      	bne.n	801bd8a <_vfiprintf_r+0x7a>
 801bd96:	ebba 0b04 	subs.w	fp, sl, r4
 801bd9a:	d00b      	beq.n	801bdb4 <_vfiprintf_r+0xa4>
 801bd9c:	465b      	mov	r3, fp
 801bd9e:	4622      	mov	r2, r4
 801bda0:	4629      	mov	r1, r5
 801bda2:	4630      	mov	r0, r6
 801bda4:	f7ff ffa2 	bl	801bcec <__sfputs_r>
 801bda8:	3001      	adds	r0, #1
 801bdaa:	f000 80a9 	beq.w	801bf00 <_vfiprintf_r+0x1f0>
 801bdae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bdb0:	445a      	add	r2, fp
 801bdb2:	9209      	str	r2, [sp, #36]	; 0x24
 801bdb4:	f89a 3000 	ldrb.w	r3, [sl]
 801bdb8:	2b00      	cmp	r3, #0
 801bdba:	f000 80a1 	beq.w	801bf00 <_vfiprintf_r+0x1f0>
 801bdbe:	2300      	movs	r3, #0
 801bdc0:	f04f 32ff 	mov.w	r2, #4294967295
 801bdc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bdc8:	f10a 0a01 	add.w	sl, sl, #1
 801bdcc:	9304      	str	r3, [sp, #16]
 801bdce:	9307      	str	r3, [sp, #28]
 801bdd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801bdd4:	931a      	str	r3, [sp, #104]	; 0x68
 801bdd6:	4654      	mov	r4, sl
 801bdd8:	2205      	movs	r2, #5
 801bdda:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bdde:	4854      	ldr	r0, [pc, #336]	; (801bf30 <_vfiprintf_r+0x220>)
 801bde0:	f7e4 faa6 	bl	8000330 <memchr>
 801bde4:	9a04      	ldr	r2, [sp, #16]
 801bde6:	b9d8      	cbnz	r0, 801be20 <_vfiprintf_r+0x110>
 801bde8:	06d1      	lsls	r1, r2, #27
 801bdea:	bf44      	itt	mi
 801bdec:	2320      	movmi	r3, #32
 801bdee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bdf2:	0713      	lsls	r3, r2, #28
 801bdf4:	bf44      	itt	mi
 801bdf6:	232b      	movmi	r3, #43	; 0x2b
 801bdf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bdfc:	f89a 3000 	ldrb.w	r3, [sl]
 801be00:	2b2a      	cmp	r3, #42	; 0x2a
 801be02:	d015      	beq.n	801be30 <_vfiprintf_r+0x120>
 801be04:	9a07      	ldr	r2, [sp, #28]
 801be06:	4654      	mov	r4, sl
 801be08:	2000      	movs	r0, #0
 801be0a:	f04f 0c0a 	mov.w	ip, #10
 801be0e:	4621      	mov	r1, r4
 801be10:	f811 3b01 	ldrb.w	r3, [r1], #1
 801be14:	3b30      	subs	r3, #48	; 0x30
 801be16:	2b09      	cmp	r3, #9
 801be18:	d94d      	bls.n	801beb6 <_vfiprintf_r+0x1a6>
 801be1a:	b1b0      	cbz	r0, 801be4a <_vfiprintf_r+0x13a>
 801be1c:	9207      	str	r2, [sp, #28]
 801be1e:	e014      	b.n	801be4a <_vfiprintf_r+0x13a>
 801be20:	eba0 0308 	sub.w	r3, r0, r8
 801be24:	fa09 f303 	lsl.w	r3, r9, r3
 801be28:	4313      	orrs	r3, r2
 801be2a:	9304      	str	r3, [sp, #16]
 801be2c:	46a2      	mov	sl, r4
 801be2e:	e7d2      	b.n	801bdd6 <_vfiprintf_r+0xc6>
 801be30:	9b03      	ldr	r3, [sp, #12]
 801be32:	1d19      	adds	r1, r3, #4
 801be34:	681b      	ldr	r3, [r3, #0]
 801be36:	9103      	str	r1, [sp, #12]
 801be38:	2b00      	cmp	r3, #0
 801be3a:	bfbb      	ittet	lt
 801be3c:	425b      	neglt	r3, r3
 801be3e:	f042 0202 	orrlt.w	r2, r2, #2
 801be42:	9307      	strge	r3, [sp, #28]
 801be44:	9307      	strlt	r3, [sp, #28]
 801be46:	bfb8      	it	lt
 801be48:	9204      	strlt	r2, [sp, #16]
 801be4a:	7823      	ldrb	r3, [r4, #0]
 801be4c:	2b2e      	cmp	r3, #46	; 0x2e
 801be4e:	d10c      	bne.n	801be6a <_vfiprintf_r+0x15a>
 801be50:	7863      	ldrb	r3, [r4, #1]
 801be52:	2b2a      	cmp	r3, #42	; 0x2a
 801be54:	d134      	bne.n	801bec0 <_vfiprintf_r+0x1b0>
 801be56:	9b03      	ldr	r3, [sp, #12]
 801be58:	1d1a      	adds	r2, r3, #4
 801be5a:	681b      	ldr	r3, [r3, #0]
 801be5c:	9203      	str	r2, [sp, #12]
 801be5e:	2b00      	cmp	r3, #0
 801be60:	bfb8      	it	lt
 801be62:	f04f 33ff 	movlt.w	r3, #4294967295
 801be66:	3402      	adds	r4, #2
 801be68:	9305      	str	r3, [sp, #20]
 801be6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801bf40 <_vfiprintf_r+0x230>
 801be6e:	7821      	ldrb	r1, [r4, #0]
 801be70:	2203      	movs	r2, #3
 801be72:	4650      	mov	r0, sl
 801be74:	f7e4 fa5c 	bl	8000330 <memchr>
 801be78:	b138      	cbz	r0, 801be8a <_vfiprintf_r+0x17a>
 801be7a:	9b04      	ldr	r3, [sp, #16]
 801be7c:	eba0 000a 	sub.w	r0, r0, sl
 801be80:	2240      	movs	r2, #64	; 0x40
 801be82:	4082      	lsls	r2, r0
 801be84:	4313      	orrs	r3, r2
 801be86:	3401      	adds	r4, #1
 801be88:	9304      	str	r3, [sp, #16]
 801be8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801be8e:	4829      	ldr	r0, [pc, #164]	; (801bf34 <_vfiprintf_r+0x224>)
 801be90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801be94:	2206      	movs	r2, #6
 801be96:	f7e4 fa4b 	bl	8000330 <memchr>
 801be9a:	2800      	cmp	r0, #0
 801be9c:	d03f      	beq.n	801bf1e <_vfiprintf_r+0x20e>
 801be9e:	4b26      	ldr	r3, [pc, #152]	; (801bf38 <_vfiprintf_r+0x228>)
 801bea0:	bb1b      	cbnz	r3, 801beea <_vfiprintf_r+0x1da>
 801bea2:	9b03      	ldr	r3, [sp, #12]
 801bea4:	3307      	adds	r3, #7
 801bea6:	f023 0307 	bic.w	r3, r3, #7
 801beaa:	3308      	adds	r3, #8
 801beac:	9303      	str	r3, [sp, #12]
 801beae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801beb0:	443b      	add	r3, r7
 801beb2:	9309      	str	r3, [sp, #36]	; 0x24
 801beb4:	e768      	b.n	801bd88 <_vfiprintf_r+0x78>
 801beb6:	fb0c 3202 	mla	r2, ip, r2, r3
 801beba:	460c      	mov	r4, r1
 801bebc:	2001      	movs	r0, #1
 801bebe:	e7a6      	b.n	801be0e <_vfiprintf_r+0xfe>
 801bec0:	2300      	movs	r3, #0
 801bec2:	3401      	adds	r4, #1
 801bec4:	9305      	str	r3, [sp, #20]
 801bec6:	4619      	mov	r1, r3
 801bec8:	f04f 0c0a 	mov.w	ip, #10
 801becc:	4620      	mov	r0, r4
 801bece:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bed2:	3a30      	subs	r2, #48	; 0x30
 801bed4:	2a09      	cmp	r2, #9
 801bed6:	d903      	bls.n	801bee0 <_vfiprintf_r+0x1d0>
 801bed8:	2b00      	cmp	r3, #0
 801beda:	d0c6      	beq.n	801be6a <_vfiprintf_r+0x15a>
 801bedc:	9105      	str	r1, [sp, #20]
 801bede:	e7c4      	b.n	801be6a <_vfiprintf_r+0x15a>
 801bee0:	fb0c 2101 	mla	r1, ip, r1, r2
 801bee4:	4604      	mov	r4, r0
 801bee6:	2301      	movs	r3, #1
 801bee8:	e7f0      	b.n	801becc <_vfiprintf_r+0x1bc>
 801beea:	ab03      	add	r3, sp, #12
 801beec:	9300      	str	r3, [sp, #0]
 801beee:	462a      	mov	r2, r5
 801bef0:	4b12      	ldr	r3, [pc, #72]	; (801bf3c <_vfiprintf_r+0x22c>)
 801bef2:	a904      	add	r1, sp, #16
 801bef4:	4630      	mov	r0, r6
 801bef6:	f7fb faff 	bl	80174f8 <_printf_float>
 801befa:	4607      	mov	r7, r0
 801befc:	1c78      	adds	r0, r7, #1
 801befe:	d1d6      	bne.n	801beae <_vfiprintf_r+0x19e>
 801bf00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bf02:	07d9      	lsls	r1, r3, #31
 801bf04:	d405      	bmi.n	801bf12 <_vfiprintf_r+0x202>
 801bf06:	89ab      	ldrh	r3, [r5, #12]
 801bf08:	059a      	lsls	r2, r3, #22
 801bf0a:	d402      	bmi.n	801bf12 <_vfiprintf_r+0x202>
 801bf0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bf0e:	f7fc fa73 	bl	80183f8 <__retarget_lock_release_recursive>
 801bf12:	89ab      	ldrh	r3, [r5, #12]
 801bf14:	065b      	lsls	r3, r3, #25
 801bf16:	f53f af1d 	bmi.w	801bd54 <_vfiprintf_r+0x44>
 801bf1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bf1c:	e71c      	b.n	801bd58 <_vfiprintf_r+0x48>
 801bf1e:	ab03      	add	r3, sp, #12
 801bf20:	9300      	str	r3, [sp, #0]
 801bf22:	462a      	mov	r2, r5
 801bf24:	4b05      	ldr	r3, [pc, #20]	; (801bf3c <_vfiprintf_r+0x22c>)
 801bf26:	a904      	add	r1, sp, #16
 801bf28:	4630      	mov	r0, r6
 801bf2a:	f7fb fd6d 	bl	8017a08 <_printf_i>
 801bf2e:	e7e4      	b.n	801befa <_vfiprintf_r+0x1ea>
 801bf30:	0801c7c9 	.word	0x0801c7c9
 801bf34:	0801c7d3 	.word	0x0801c7d3
 801bf38:	080174f9 	.word	0x080174f9
 801bf3c:	0801bced 	.word	0x0801bced
 801bf40:	0801c7cf 	.word	0x0801c7cf

0801bf44 <__swbuf_r>:
 801bf44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf46:	460e      	mov	r6, r1
 801bf48:	4614      	mov	r4, r2
 801bf4a:	4605      	mov	r5, r0
 801bf4c:	b118      	cbz	r0, 801bf56 <__swbuf_r+0x12>
 801bf4e:	6a03      	ldr	r3, [r0, #32]
 801bf50:	b90b      	cbnz	r3, 801bf56 <__swbuf_r+0x12>
 801bf52:	f7fc f90b 	bl	801816c <__sinit>
 801bf56:	69a3      	ldr	r3, [r4, #24]
 801bf58:	60a3      	str	r3, [r4, #8]
 801bf5a:	89a3      	ldrh	r3, [r4, #12]
 801bf5c:	071a      	lsls	r2, r3, #28
 801bf5e:	d525      	bpl.n	801bfac <__swbuf_r+0x68>
 801bf60:	6923      	ldr	r3, [r4, #16]
 801bf62:	b31b      	cbz	r3, 801bfac <__swbuf_r+0x68>
 801bf64:	6823      	ldr	r3, [r4, #0]
 801bf66:	6922      	ldr	r2, [r4, #16]
 801bf68:	1a98      	subs	r0, r3, r2
 801bf6a:	6963      	ldr	r3, [r4, #20]
 801bf6c:	b2f6      	uxtb	r6, r6
 801bf6e:	4283      	cmp	r3, r0
 801bf70:	4637      	mov	r7, r6
 801bf72:	dc04      	bgt.n	801bf7e <__swbuf_r+0x3a>
 801bf74:	4621      	mov	r1, r4
 801bf76:	4628      	mov	r0, r5
 801bf78:	f7ff f950 	bl	801b21c <_fflush_r>
 801bf7c:	b9e0      	cbnz	r0, 801bfb8 <__swbuf_r+0x74>
 801bf7e:	68a3      	ldr	r3, [r4, #8]
 801bf80:	3b01      	subs	r3, #1
 801bf82:	60a3      	str	r3, [r4, #8]
 801bf84:	6823      	ldr	r3, [r4, #0]
 801bf86:	1c5a      	adds	r2, r3, #1
 801bf88:	6022      	str	r2, [r4, #0]
 801bf8a:	701e      	strb	r6, [r3, #0]
 801bf8c:	6962      	ldr	r2, [r4, #20]
 801bf8e:	1c43      	adds	r3, r0, #1
 801bf90:	429a      	cmp	r2, r3
 801bf92:	d004      	beq.n	801bf9e <__swbuf_r+0x5a>
 801bf94:	89a3      	ldrh	r3, [r4, #12]
 801bf96:	07db      	lsls	r3, r3, #31
 801bf98:	d506      	bpl.n	801bfa8 <__swbuf_r+0x64>
 801bf9a:	2e0a      	cmp	r6, #10
 801bf9c:	d104      	bne.n	801bfa8 <__swbuf_r+0x64>
 801bf9e:	4621      	mov	r1, r4
 801bfa0:	4628      	mov	r0, r5
 801bfa2:	f7ff f93b 	bl	801b21c <_fflush_r>
 801bfa6:	b938      	cbnz	r0, 801bfb8 <__swbuf_r+0x74>
 801bfa8:	4638      	mov	r0, r7
 801bfaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bfac:	4621      	mov	r1, r4
 801bfae:	4628      	mov	r0, r5
 801bfb0:	f000 f806 	bl	801bfc0 <__swsetup_r>
 801bfb4:	2800      	cmp	r0, #0
 801bfb6:	d0d5      	beq.n	801bf64 <__swbuf_r+0x20>
 801bfb8:	f04f 37ff 	mov.w	r7, #4294967295
 801bfbc:	e7f4      	b.n	801bfa8 <__swbuf_r+0x64>
	...

0801bfc0 <__swsetup_r>:
 801bfc0:	b538      	push	{r3, r4, r5, lr}
 801bfc2:	4b2a      	ldr	r3, [pc, #168]	; (801c06c <__swsetup_r+0xac>)
 801bfc4:	4605      	mov	r5, r0
 801bfc6:	6818      	ldr	r0, [r3, #0]
 801bfc8:	460c      	mov	r4, r1
 801bfca:	b118      	cbz	r0, 801bfd4 <__swsetup_r+0x14>
 801bfcc:	6a03      	ldr	r3, [r0, #32]
 801bfce:	b90b      	cbnz	r3, 801bfd4 <__swsetup_r+0x14>
 801bfd0:	f7fc f8cc 	bl	801816c <__sinit>
 801bfd4:	89a3      	ldrh	r3, [r4, #12]
 801bfd6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bfda:	0718      	lsls	r0, r3, #28
 801bfdc:	d422      	bmi.n	801c024 <__swsetup_r+0x64>
 801bfde:	06d9      	lsls	r1, r3, #27
 801bfe0:	d407      	bmi.n	801bff2 <__swsetup_r+0x32>
 801bfe2:	2309      	movs	r3, #9
 801bfe4:	602b      	str	r3, [r5, #0]
 801bfe6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801bfea:	81a3      	strh	r3, [r4, #12]
 801bfec:	f04f 30ff 	mov.w	r0, #4294967295
 801bff0:	e034      	b.n	801c05c <__swsetup_r+0x9c>
 801bff2:	0758      	lsls	r0, r3, #29
 801bff4:	d512      	bpl.n	801c01c <__swsetup_r+0x5c>
 801bff6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bff8:	b141      	cbz	r1, 801c00c <__swsetup_r+0x4c>
 801bffa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bffe:	4299      	cmp	r1, r3
 801c000:	d002      	beq.n	801c008 <__swsetup_r+0x48>
 801c002:	4628      	mov	r0, r5
 801c004:	f7fd f80c 	bl	8019020 <_free_r>
 801c008:	2300      	movs	r3, #0
 801c00a:	6363      	str	r3, [r4, #52]	; 0x34
 801c00c:	89a3      	ldrh	r3, [r4, #12]
 801c00e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c012:	81a3      	strh	r3, [r4, #12]
 801c014:	2300      	movs	r3, #0
 801c016:	6063      	str	r3, [r4, #4]
 801c018:	6923      	ldr	r3, [r4, #16]
 801c01a:	6023      	str	r3, [r4, #0]
 801c01c:	89a3      	ldrh	r3, [r4, #12]
 801c01e:	f043 0308 	orr.w	r3, r3, #8
 801c022:	81a3      	strh	r3, [r4, #12]
 801c024:	6923      	ldr	r3, [r4, #16]
 801c026:	b94b      	cbnz	r3, 801c03c <__swsetup_r+0x7c>
 801c028:	89a3      	ldrh	r3, [r4, #12]
 801c02a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c02e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c032:	d003      	beq.n	801c03c <__swsetup_r+0x7c>
 801c034:	4621      	mov	r1, r4
 801c036:	4628      	mov	r0, r5
 801c038:	f000 f884 	bl	801c144 <__smakebuf_r>
 801c03c:	89a0      	ldrh	r0, [r4, #12]
 801c03e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c042:	f010 0301 	ands.w	r3, r0, #1
 801c046:	d00a      	beq.n	801c05e <__swsetup_r+0x9e>
 801c048:	2300      	movs	r3, #0
 801c04a:	60a3      	str	r3, [r4, #8]
 801c04c:	6963      	ldr	r3, [r4, #20]
 801c04e:	425b      	negs	r3, r3
 801c050:	61a3      	str	r3, [r4, #24]
 801c052:	6923      	ldr	r3, [r4, #16]
 801c054:	b943      	cbnz	r3, 801c068 <__swsetup_r+0xa8>
 801c056:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c05a:	d1c4      	bne.n	801bfe6 <__swsetup_r+0x26>
 801c05c:	bd38      	pop	{r3, r4, r5, pc}
 801c05e:	0781      	lsls	r1, r0, #30
 801c060:	bf58      	it	pl
 801c062:	6963      	ldrpl	r3, [r4, #20]
 801c064:	60a3      	str	r3, [r4, #8]
 801c066:	e7f4      	b.n	801c052 <__swsetup_r+0x92>
 801c068:	2000      	movs	r0, #0
 801c06a:	e7f7      	b.n	801c05c <__swsetup_r+0x9c>
 801c06c:	24000158 	.word	0x24000158

0801c070 <_raise_r>:
 801c070:	291f      	cmp	r1, #31
 801c072:	b538      	push	{r3, r4, r5, lr}
 801c074:	4604      	mov	r4, r0
 801c076:	460d      	mov	r5, r1
 801c078:	d904      	bls.n	801c084 <_raise_r+0x14>
 801c07a:	2316      	movs	r3, #22
 801c07c:	6003      	str	r3, [r0, #0]
 801c07e:	f04f 30ff 	mov.w	r0, #4294967295
 801c082:	bd38      	pop	{r3, r4, r5, pc}
 801c084:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801c086:	b112      	cbz	r2, 801c08e <_raise_r+0x1e>
 801c088:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c08c:	b94b      	cbnz	r3, 801c0a2 <_raise_r+0x32>
 801c08e:	4620      	mov	r0, r4
 801c090:	f000 f830 	bl	801c0f4 <_getpid_r>
 801c094:	462a      	mov	r2, r5
 801c096:	4601      	mov	r1, r0
 801c098:	4620      	mov	r0, r4
 801c09a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c09e:	f000 b817 	b.w	801c0d0 <_kill_r>
 801c0a2:	2b01      	cmp	r3, #1
 801c0a4:	d00a      	beq.n	801c0bc <_raise_r+0x4c>
 801c0a6:	1c59      	adds	r1, r3, #1
 801c0a8:	d103      	bne.n	801c0b2 <_raise_r+0x42>
 801c0aa:	2316      	movs	r3, #22
 801c0ac:	6003      	str	r3, [r0, #0]
 801c0ae:	2001      	movs	r0, #1
 801c0b0:	e7e7      	b.n	801c082 <_raise_r+0x12>
 801c0b2:	2400      	movs	r4, #0
 801c0b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801c0b8:	4628      	mov	r0, r5
 801c0ba:	4798      	blx	r3
 801c0bc:	2000      	movs	r0, #0
 801c0be:	e7e0      	b.n	801c082 <_raise_r+0x12>

0801c0c0 <raise>:
 801c0c0:	4b02      	ldr	r3, [pc, #8]	; (801c0cc <raise+0xc>)
 801c0c2:	4601      	mov	r1, r0
 801c0c4:	6818      	ldr	r0, [r3, #0]
 801c0c6:	f7ff bfd3 	b.w	801c070 <_raise_r>
 801c0ca:	bf00      	nop
 801c0cc:	24000158 	.word	0x24000158

0801c0d0 <_kill_r>:
 801c0d0:	b538      	push	{r3, r4, r5, lr}
 801c0d2:	4d07      	ldr	r5, [pc, #28]	; (801c0f0 <_kill_r+0x20>)
 801c0d4:	2300      	movs	r3, #0
 801c0d6:	4604      	mov	r4, r0
 801c0d8:	4608      	mov	r0, r1
 801c0da:	4611      	mov	r1, r2
 801c0dc:	602b      	str	r3, [r5, #0]
 801c0de:	f7e7 fcff 	bl	8003ae0 <_kill>
 801c0e2:	1c43      	adds	r3, r0, #1
 801c0e4:	d102      	bne.n	801c0ec <_kill_r+0x1c>
 801c0e6:	682b      	ldr	r3, [r5, #0]
 801c0e8:	b103      	cbz	r3, 801c0ec <_kill_r+0x1c>
 801c0ea:	6023      	str	r3, [r4, #0]
 801c0ec:	bd38      	pop	{r3, r4, r5, pc}
 801c0ee:	bf00      	nop
 801c0f0:	24003464 	.word	0x24003464

0801c0f4 <_getpid_r>:
 801c0f4:	f7e7 bcec 	b.w	8003ad0 <_getpid>

0801c0f8 <__swhatbuf_r>:
 801c0f8:	b570      	push	{r4, r5, r6, lr}
 801c0fa:	460c      	mov	r4, r1
 801c0fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c100:	2900      	cmp	r1, #0
 801c102:	b096      	sub	sp, #88	; 0x58
 801c104:	4615      	mov	r5, r2
 801c106:	461e      	mov	r6, r3
 801c108:	da0d      	bge.n	801c126 <__swhatbuf_r+0x2e>
 801c10a:	89a3      	ldrh	r3, [r4, #12]
 801c10c:	f013 0f80 	tst.w	r3, #128	; 0x80
 801c110:	f04f 0100 	mov.w	r1, #0
 801c114:	bf0c      	ite	eq
 801c116:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801c11a:	2340      	movne	r3, #64	; 0x40
 801c11c:	2000      	movs	r0, #0
 801c11e:	6031      	str	r1, [r6, #0]
 801c120:	602b      	str	r3, [r5, #0]
 801c122:	b016      	add	sp, #88	; 0x58
 801c124:	bd70      	pop	{r4, r5, r6, pc}
 801c126:	466a      	mov	r2, sp
 801c128:	f000 f848 	bl	801c1bc <_fstat_r>
 801c12c:	2800      	cmp	r0, #0
 801c12e:	dbec      	blt.n	801c10a <__swhatbuf_r+0x12>
 801c130:	9901      	ldr	r1, [sp, #4]
 801c132:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801c136:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801c13a:	4259      	negs	r1, r3
 801c13c:	4159      	adcs	r1, r3
 801c13e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c142:	e7eb      	b.n	801c11c <__swhatbuf_r+0x24>

0801c144 <__smakebuf_r>:
 801c144:	898b      	ldrh	r3, [r1, #12]
 801c146:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c148:	079d      	lsls	r5, r3, #30
 801c14a:	4606      	mov	r6, r0
 801c14c:	460c      	mov	r4, r1
 801c14e:	d507      	bpl.n	801c160 <__smakebuf_r+0x1c>
 801c150:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c154:	6023      	str	r3, [r4, #0]
 801c156:	6123      	str	r3, [r4, #16]
 801c158:	2301      	movs	r3, #1
 801c15a:	6163      	str	r3, [r4, #20]
 801c15c:	b002      	add	sp, #8
 801c15e:	bd70      	pop	{r4, r5, r6, pc}
 801c160:	ab01      	add	r3, sp, #4
 801c162:	466a      	mov	r2, sp
 801c164:	f7ff ffc8 	bl	801c0f8 <__swhatbuf_r>
 801c168:	9900      	ldr	r1, [sp, #0]
 801c16a:	4605      	mov	r5, r0
 801c16c:	4630      	mov	r0, r6
 801c16e:	f7fc ffcb 	bl	8019108 <_malloc_r>
 801c172:	b948      	cbnz	r0, 801c188 <__smakebuf_r+0x44>
 801c174:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c178:	059a      	lsls	r2, r3, #22
 801c17a:	d4ef      	bmi.n	801c15c <__smakebuf_r+0x18>
 801c17c:	f023 0303 	bic.w	r3, r3, #3
 801c180:	f043 0302 	orr.w	r3, r3, #2
 801c184:	81a3      	strh	r3, [r4, #12]
 801c186:	e7e3      	b.n	801c150 <__smakebuf_r+0xc>
 801c188:	89a3      	ldrh	r3, [r4, #12]
 801c18a:	6020      	str	r0, [r4, #0]
 801c18c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c190:	81a3      	strh	r3, [r4, #12]
 801c192:	9b00      	ldr	r3, [sp, #0]
 801c194:	6163      	str	r3, [r4, #20]
 801c196:	9b01      	ldr	r3, [sp, #4]
 801c198:	6120      	str	r0, [r4, #16]
 801c19a:	b15b      	cbz	r3, 801c1b4 <__smakebuf_r+0x70>
 801c19c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c1a0:	4630      	mov	r0, r6
 801c1a2:	f000 f81d 	bl	801c1e0 <_isatty_r>
 801c1a6:	b128      	cbz	r0, 801c1b4 <__smakebuf_r+0x70>
 801c1a8:	89a3      	ldrh	r3, [r4, #12]
 801c1aa:	f023 0303 	bic.w	r3, r3, #3
 801c1ae:	f043 0301 	orr.w	r3, r3, #1
 801c1b2:	81a3      	strh	r3, [r4, #12]
 801c1b4:	89a3      	ldrh	r3, [r4, #12]
 801c1b6:	431d      	orrs	r5, r3
 801c1b8:	81a5      	strh	r5, [r4, #12]
 801c1ba:	e7cf      	b.n	801c15c <__smakebuf_r+0x18>

0801c1bc <_fstat_r>:
 801c1bc:	b538      	push	{r3, r4, r5, lr}
 801c1be:	4d07      	ldr	r5, [pc, #28]	; (801c1dc <_fstat_r+0x20>)
 801c1c0:	2300      	movs	r3, #0
 801c1c2:	4604      	mov	r4, r0
 801c1c4:	4608      	mov	r0, r1
 801c1c6:	4611      	mov	r1, r2
 801c1c8:	602b      	str	r3, [r5, #0]
 801c1ca:	f7e7 fce8 	bl	8003b9e <_fstat>
 801c1ce:	1c43      	adds	r3, r0, #1
 801c1d0:	d102      	bne.n	801c1d8 <_fstat_r+0x1c>
 801c1d2:	682b      	ldr	r3, [r5, #0]
 801c1d4:	b103      	cbz	r3, 801c1d8 <_fstat_r+0x1c>
 801c1d6:	6023      	str	r3, [r4, #0]
 801c1d8:	bd38      	pop	{r3, r4, r5, pc}
 801c1da:	bf00      	nop
 801c1dc:	24003464 	.word	0x24003464

0801c1e0 <_isatty_r>:
 801c1e0:	b538      	push	{r3, r4, r5, lr}
 801c1e2:	4d06      	ldr	r5, [pc, #24]	; (801c1fc <_isatty_r+0x1c>)
 801c1e4:	2300      	movs	r3, #0
 801c1e6:	4604      	mov	r4, r0
 801c1e8:	4608      	mov	r0, r1
 801c1ea:	602b      	str	r3, [r5, #0]
 801c1ec:	f7e7 fce7 	bl	8003bbe <_isatty>
 801c1f0:	1c43      	adds	r3, r0, #1
 801c1f2:	d102      	bne.n	801c1fa <_isatty_r+0x1a>
 801c1f4:	682b      	ldr	r3, [r5, #0]
 801c1f6:	b103      	cbz	r3, 801c1fa <_isatty_r+0x1a>
 801c1f8:	6023      	str	r3, [r4, #0]
 801c1fa:	bd38      	pop	{r3, r4, r5, pc}
 801c1fc:	24003464 	.word	0x24003464

0801c200 <_init>:
 801c200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c202:	bf00      	nop
 801c204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c206:	bc08      	pop	{r3}
 801c208:	469e      	mov	lr, r3
 801c20a:	4770      	bx	lr

0801c20c <_fini>:
 801c20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c20e:	bf00      	nop
 801c210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c212:	bc08      	pop	{r3}
 801c214:	469e      	mov	lr, r3
 801c216:	4770      	bx	lr
