
AvioNext.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017558  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  08017828  08017828  00027828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017b28  08017b28  00027b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017b30  08017b30  00027b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017b34  08017b34  00027b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000150  24000000  08017b38  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000030a4  24000150  08017c88  00030150  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  240031f4  08017c88  000331f4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030150  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0003017e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00035185  00000000  00000000  000301c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000061ff  00000000  00000000  00065346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002ac0  00000000  00000000  0006b548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000212c  00000000  00000000  0006e008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003dfeb  00000000  00000000  00070134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003a82f  00000000  00000000  000ae11f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017d330  00000000  00000000  000e894e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000bef4  00000000  00000000  00265c80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  00271b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000150 	.word	0x24000150
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08017810 	.word	0x08017810

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000154 	.word	0x24000154
 800030c:	08017810 	.word	0x08017810

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b970 	b.w	80006d8 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9e08      	ldr	r6, [sp, #32]
 8000416:	460d      	mov	r5, r1
 8000418:	4604      	mov	r4, r0
 800041a:	460f      	mov	r7, r1
 800041c:	2b00      	cmp	r3, #0
 800041e:	d14a      	bne.n	80004b6 <__udivmoddi4+0xa6>
 8000420:	428a      	cmp	r2, r1
 8000422:	4694      	mov	ip, r2
 8000424:	d965      	bls.n	80004f2 <__udivmoddi4+0xe2>
 8000426:	fab2 f382 	clz	r3, r2
 800042a:	b143      	cbz	r3, 800043e <__udivmoddi4+0x2e>
 800042c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000430:	f1c3 0220 	rsb	r2, r3, #32
 8000434:	409f      	lsls	r7, r3
 8000436:	fa20 f202 	lsr.w	r2, r0, r2
 800043a:	4317      	orrs	r7, r2
 800043c:	409c      	lsls	r4, r3
 800043e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000442:	fa1f f58c 	uxth.w	r5, ip
 8000446:	fbb7 f1fe 	udiv	r1, r7, lr
 800044a:	0c22      	lsrs	r2, r4, #16
 800044c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000450:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000454:	fb01 f005 	mul.w	r0, r1, r5
 8000458:	4290      	cmp	r0, r2
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x62>
 800045c:	eb1c 0202 	adds.w	r2, ip, r2
 8000460:	f101 37ff 	add.w	r7, r1, #4294967295
 8000464:	f080 811c 	bcs.w	80006a0 <__udivmoddi4+0x290>
 8000468:	4290      	cmp	r0, r2
 800046a:	f240 8119 	bls.w	80006a0 <__udivmoddi4+0x290>
 800046e:	3902      	subs	r1, #2
 8000470:	4462      	add	r2, ip
 8000472:	1a12      	subs	r2, r2, r0
 8000474:	b2a4      	uxth	r4, r4
 8000476:	fbb2 f0fe 	udiv	r0, r2, lr
 800047a:	fb0e 2210 	mls	r2, lr, r0, r2
 800047e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000482:	fb00 f505 	mul.w	r5, r0, r5
 8000486:	42a5      	cmp	r5, r4
 8000488:	d90a      	bls.n	80004a0 <__udivmoddi4+0x90>
 800048a:	eb1c 0404 	adds.w	r4, ip, r4
 800048e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000492:	f080 8107 	bcs.w	80006a4 <__udivmoddi4+0x294>
 8000496:	42a5      	cmp	r5, r4
 8000498:	f240 8104 	bls.w	80006a4 <__udivmoddi4+0x294>
 800049c:	4464      	add	r4, ip
 800049e:	3802      	subs	r0, #2
 80004a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80004a4:	1b64      	subs	r4, r4, r5
 80004a6:	2100      	movs	r1, #0
 80004a8:	b11e      	cbz	r6, 80004b2 <__udivmoddi4+0xa2>
 80004aa:	40dc      	lsrs	r4, r3
 80004ac:	2300      	movs	r3, #0
 80004ae:	e9c6 4300 	strd	r4, r3, [r6]
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0xbc>
 80004ba:	2e00      	cmp	r6, #0
 80004bc:	f000 80ed 	beq.w	800069a <__udivmoddi4+0x28a>
 80004c0:	2100      	movs	r1, #0
 80004c2:	e9c6 0500 	strd	r0, r5, [r6]
 80004c6:	4608      	mov	r0, r1
 80004c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004cc:	fab3 f183 	clz	r1, r3
 80004d0:	2900      	cmp	r1, #0
 80004d2:	d149      	bne.n	8000568 <__udivmoddi4+0x158>
 80004d4:	42ab      	cmp	r3, r5
 80004d6:	d302      	bcc.n	80004de <__udivmoddi4+0xce>
 80004d8:	4282      	cmp	r2, r0
 80004da:	f200 80f8 	bhi.w	80006ce <__udivmoddi4+0x2be>
 80004de:	1a84      	subs	r4, r0, r2
 80004e0:	eb65 0203 	sbc.w	r2, r5, r3
 80004e4:	2001      	movs	r0, #1
 80004e6:	4617      	mov	r7, r2
 80004e8:	2e00      	cmp	r6, #0
 80004ea:	d0e2      	beq.n	80004b2 <__udivmoddi4+0xa2>
 80004ec:	e9c6 4700 	strd	r4, r7, [r6]
 80004f0:	e7df      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004f2:	b902      	cbnz	r2, 80004f6 <__udivmoddi4+0xe6>
 80004f4:	deff      	udf	#255	; 0xff
 80004f6:	fab2 f382 	clz	r3, r2
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	f040 8090 	bne.w	8000620 <__udivmoddi4+0x210>
 8000500:	1a8a      	subs	r2, r1, r2
 8000502:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000506:	fa1f fe8c 	uxth.w	lr, ip
 800050a:	2101      	movs	r1, #1
 800050c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000510:	fb07 2015 	mls	r0, r7, r5, r2
 8000514:	0c22      	lsrs	r2, r4, #16
 8000516:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800051a:	fb0e f005 	mul.w	r0, lr, r5
 800051e:	4290      	cmp	r0, r2
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x124>
 8000522:	eb1c 0202 	adds.w	r2, ip, r2
 8000526:	f105 38ff 	add.w	r8, r5, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x122>
 800052c:	4290      	cmp	r0, r2
 800052e:	f200 80cb 	bhi.w	80006c8 <__udivmoddi4+0x2b8>
 8000532:	4645      	mov	r5, r8
 8000534:	1a12      	subs	r2, r2, r0
 8000536:	b2a4      	uxth	r4, r4
 8000538:	fbb2 f0f7 	udiv	r0, r2, r7
 800053c:	fb07 2210 	mls	r2, r7, r0, r2
 8000540:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000544:	fb0e fe00 	mul.w	lr, lr, r0
 8000548:	45a6      	cmp	lr, r4
 800054a:	d908      	bls.n	800055e <__udivmoddi4+0x14e>
 800054c:	eb1c 0404 	adds.w	r4, ip, r4
 8000550:	f100 32ff 	add.w	r2, r0, #4294967295
 8000554:	d202      	bcs.n	800055c <__udivmoddi4+0x14c>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f200 80bb 	bhi.w	80006d2 <__udivmoddi4+0x2c2>
 800055c:	4610      	mov	r0, r2
 800055e:	eba4 040e 	sub.w	r4, r4, lr
 8000562:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000566:	e79f      	b.n	80004a8 <__udivmoddi4+0x98>
 8000568:	f1c1 0720 	rsb	r7, r1, #32
 800056c:	408b      	lsls	r3, r1
 800056e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000572:	ea4c 0c03 	orr.w	ip, ip, r3
 8000576:	fa05 f401 	lsl.w	r4, r5, r1
 800057a:	fa20 f307 	lsr.w	r3, r0, r7
 800057e:	40fd      	lsrs	r5, r7
 8000580:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000584:	4323      	orrs	r3, r4
 8000586:	fbb5 f8f9 	udiv	r8, r5, r9
 800058a:	fa1f fe8c 	uxth.w	lr, ip
 800058e:	fb09 5518 	mls	r5, r9, r8, r5
 8000592:	0c1c      	lsrs	r4, r3, #16
 8000594:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000598:	fb08 f50e 	mul.w	r5, r8, lr
 800059c:	42a5      	cmp	r5, r4
 800059e:	fa02 f201 	lsl.w	r2, r2, r1
 80005a2:	fa00 f001 	lsl.w	r0, r0, r1
 80005a6:	d90b      	bls.n	80005c0 <__udivmoddi4+0x1b0>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80005b0:	f080 8088 	bcs.w	80006c4 <__udivmoddi4+0x2b4>
 80005b4:	42a5      	cmp	r5, r4
 80005b6:	f240 8085 	bls.w	80006c4 <__udivmoddi4+0x2b4>
 80005ba:	f1a8 0802 	sub.w	r8, r8, #2
 80005be:	4464      	add	r4, ip
 80005c0:	1b64      	subs	r4, r4, r5
 80005c2:	b29d      	uxth	r5, r3
 80005c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80005c8:	fb09 4413 	mls	r4, r9, r3, r4
 80005cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005d4:	45a6      	cmp	lr, r4
 80005d6:	d908      	bls.n	80005ea <__udivmoddi4+0x1da>
 80005d8:	eb1c 0404 	adds.w	r4, ip, r4
 80005dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80005e0:	d26c      	bcs.n	80006bc <__udivmoddi4+0x2ac>
 80005e2:	45a6      	cmp	lr, r4
 80005e4:	d96a      	bls.n	80006bc <__udivmoddi4+0x2ac>
 80005e6:	3b02      	subs	r3, #2
 80005e8:	4464      	add	r4, ip
 80005ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ee:	fba3 9502 	umull	r9, r5, r3, r2
 80005f2:	eba4 040e 	sub.w	r4, r4, lr
 80005f6:	42ac      	cmp	r4, r5
 80005f8:	46c8      	mov	r8, r9
 80005fa:	46ae      	mov	lr, r5
 80005fc:	d356      	bcc.n	80006ac <__udivmoddi4+0x29c>
 80005fe:	d053      	beq.n	80006a8 <__udivmoddi4+0x298>
 8000600:	b156      	cbz	r6, 8000618 <__udivmoddi4+0x208>
 8000602:	ebb0 0208 	subs.w	r2, r0, r8
 8000606:	eb64 040e 	sbc.w	r4, r4, lr
 800060a:	fa04 f707 	lsl.w	r7, r4, r7
 800060e:	40ca      	lsrs	r2, r1
 8000610:	40cc      	lsrs	r4, r1
 8000612:	4317      	orrs	r7, r2
 8000614:	e9c6 7400 	strd	r7, r4, [r6]
 8000618:	4618      	mov	r0, r3
 800061a:	2100      	movs	r1, #0
 800061c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000620:	f1c3 0120 	rsb	r1, r3, #32
 8000624:	fa02 fc03 	lsl.w	ip, r2, r3
 8000628:	fa20 f201 	lsr.w	r2, r0, r1
 800062c:	fa25 f101 	lsr.w	r1, r5, r1
 8000630:	409d      	lsls	r5, r3
 8000632:	432a      	orrs	r2, r5
 8000634:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000638:	fa1f fe8c 	uxth.w	lr, ip
 800063c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000640:	fb07 1510 	mls	r5, r7, r0, r1
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800064a:	fb00 f50e 	mul.w	r5, r0, lr
 800064e:	428d      	cmp	r5, r1
 8000650:	fa04 f403 	lsl.w	r4, r4, r3
 8000654:	d908      	bls.n	8000668 <__udivmoddi4+0x258>
 8000656:	eb1c 0101 	adds.w	r1, ip, r1
 800065a:	f100 38ff 	add.w	r8, r0, #4294967295
 800065e:	d22f      	bcs.n	80006c0 <__udivmoddi4+0x2b0>
 8000660:	428d      	cmp	r5, r1
 8000662:	d92d      	bls.n	80006c0 <__udivmoddi4+0x2b0>
 8000664:	3802      	subs	r0, #2
 8000666:	4461      	add	r1, ip
 8000668:	1b49      	subs	r1, r1, r5
 800066a:	b292      	uxth	r2, r2
 800066c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000670:	fb07 1115 	mls	r1, r7, r5, r1
 8000674:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000678:	fb05 f10e 	mul.w	r1, r5, lr
 800067c:	4291      	cmp	r1, r2
 800067e:	d908      	bls.n	8000692 <__udivmoddi4+0x282>
 8000680:	eb1c 0202 	adds.w	r2, ip, r2
 8000684:	f105 38ff 	add.w	r8, r5, #4294967295
 8000688:	d216      	bcs.n	80006b8 <__udivmoddi4+0x2a8>
 800068a:	4291      	cmp	r1, r2
 800068c:	d914      	bls.n	80006b8 <__udivmoddi4+0x2a8>
 800068e:	3d02      	subs	r5, #2
 8000690:	4462      	add	r2, ip
 8000692:	1a52      	subs	r2, r2, r1
 8000694:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000698:	e738      	b.n	800050c <__udivmoddi4+0xfc>
 800069a:	4631      	mov	r1, r6
 800069c:	4630      	mov	r0, r6
 800069e:	e708      	b.n	80004b2 <__udivmoddi4+0xa2>
 80006a0:	4639      	mov	r1, r7
 80006a2:	e6e6      	b.n	8000472 <__udivmoddi4+0x62>
 80006a4:	4610      	mov	r0, r2
 80006a6:	e6fb      	b.n	80004a0 <__udivmoddi4+0x90>
 80006a8:	4548      	cmp	r0, r9
 80006aa:	d2a9      	bcs.n	8000600 <__udivmoddi4+0x1f0>
 80006ac:	ebb9 0802 	subs.w	r8, r9, r2
 80006b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80006b4:	3b01      	subs	r3, #1
 80006b6:	e7a3      	b.n	8000600 <__udivmoddi4+0x1f0>
 80006b8:	4645      	mov	r5, r8
 80006ba:	e7ea      	b.n	8000692 <__udivmoddi4+0x282>
 80006bc:	462b      	mov	r3, r5
 80006be:	e794      	b.n	80005ea <__udivmoddi4+0x1da>
 80006c0:	4640      	mov	r0, r8
 80006c2:	e7d1      	b.n	8000668 <__udivmoddi4+0x258>
 80006c4:	46d0      	mov	r8, sl
 80006c6:	e77b      	b.n	80005c0 <__udivmoddi4+0x1b0>
 80006c8:	3d02      	subs	r5, #2
 80006ca:	4462      	add	r2, ip
 80006cc:	e732      	b.n	8000534 <__udivmoddi4+0x124>
 80006ce:	4608      	mov	r0, r1
 80006d0:	e70a      	b.n	80004e8 <__udivmoddi4+0xd8>
 80006d2:	4464      	add	r4, ip
 80006d4:	3802      	subs	r0, #2
 80006d6:	e742      	b.n	800055e <__udivmoddi4+0x14e>

080006d8 <__aeabi_idiv0>:
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop

080006dc <HG2_Write_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);

	return reg_value;
}

void HG2_Write_Register(uint8_t addr, uint8_t data){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	460a      	mov	r2, r1
 80006e6:	71fb      	strb	r3, [r7, #7]
 80006e8:	4613      	mov	r3, r2
 80006ea:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f2:	480c      	ldr	r0, [pc, #48]	; (8000724 <HG2_Write_Register+0x48>)
 80006f4:	f007 fc20 	bl	8007f38 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80006f8:	1df9      	adds	r1, r7, #7
 80006fa:	2364      	movs	r3, #100	; 0x64
 80006fc:	2201      	movs	r2, #1
 80006fe:	480a      	ldr	r0, [pc, #40]	; (8000728 <HG2_Write_Register+0x4c>)
 8000700:	f00e f99c 	bl	800ea3c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000704:	1db9      	adds	r1, r7, #6
 8000706:	2364      	movs	r3, #100	; 0x64
 8000708:	2201      	movs	r2, #1
 800070a:	4807      	ldr	r0, [pc, #28]	; (8000728 <HG2_Write_Register+0x4c>)
 800070c:	f00e f996 	bl	800ea3c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 8000710:	2201      	movs	r2, #1
 8000712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000716:	4803      	ldr	r0, [pc, #12]	; (8000724 <HG2_Write_Register+0x48>)
 8000718:	f007 fc0e 	bl	8007f38 <HAL_GPIO_WritePin>

}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	58020c00 	.word	0x58020c00
 8000728:	24000ebc 	.word	0x24000ebc

0800072c <LG2_Read_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
}



uint8_t LG2_Read_Register(uint8_t addr){
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	addr |= (1<<7);
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800073c:	b2db      	uxtb	r3, r3
 800073e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <LG2_Read_Register+0x50>)
 8000748:	f007 fbf6 	bl	8007f38 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 800074c:	1df9      	adds	r1, r7, #7
 800074e:	2364      	movs	r3, #100	; 0x64
 8000750:	2201      	movs	r2, #1
 8000752:	480b      	ldr	r0, [pc, #44]	; (8000780 <LG2_Read_Register+0x54>)
 8000754:	f00e f972 	bl	800ea3c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &reg_value, 1, 100);
 8000758:	f107 010f 	add.w	r1, r7, #15
 800075c:	2364      	movs	r3, #100	; 0x64
 800075e:	2201      	movs	r2, #1
 8000760:	4807      	ldr	r0, [pc, #28]	; (8000780 <LG2_Read_Register+0x54>)
 8000762:	f00e fb67 	bl	800ee34 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <LG2_Read_Register+0x50>)
 800076e:	f007 fbe3 	bl	8007f38 <HAL_GPIO_WritePin>

	return reg_value;
 8000772:	7bfb      	ldrb	r3, [r7, #15]
}
 8000774:	4618      	mov	r0, r3
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	58020c00 	.word	0x58020c00
 8000780:	24000ebc 	.word	0x24000ebc

08000784 <LG2_Write_Register>:

void LG2_Write_Register(uint8_t addr, uint8_t data){
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	460a      	mov	r2, r1
 800078e:	71fb      	strb	r3, [r7, #7]
 8000790:	4613      	mov	r3, r2
 8000792:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 7180 	mov.w	r1, #256	; 0x100
 800079a:	480c      	ldr	r0, [pc, #48]	; (80007cc <LG2_Write_Register+0x48>)
 800079c:	f007 fbcc 	bl	8007f38 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80007a0:	1df9      	adds	r1, r7, #7
 80007a2:	2364      	movs	r3, #100	; 0x64
 80007a4:	2201      	movs	r2, #1
 80007a6:	480a      	ldr	r0, [pc, #40]	; (80007d0 <LG2_Write_Register+0x4c>)
 80007a8:	f00e f948 	bl	800ea3c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 80007ac:	1db9      	adds	r1, r7, #6
 80007ae:	2364      	movs	r3, #100	; 0x64
 80007b0:	2201      	movs	r2, #1
 80007b2:	4807      	ldr	r0, [pc, #28]	; (80007d0 <LG2_Write_Register+0x4c>)
 80007b4:	f00e f942 	bl	800ea3c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 80007b8:	2201      	movs	r2, #1
 80007ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007be:	4803      	ldr	r0, [pc, #12]	; (80007cc <LG2_Write_Register+0x48>)
 80007c0:	f007 fbba 	bl	8007f38 <HAL_GPIO_WritePin>

}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	58020c00 	.word	0x58020c00
 80007d0:	24000ebc 	.word	0x24000ebc

080007d4 <LG2_Get_Gyro_X>:

float LG2_Get_Gyro_X(){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x22);
 80007da:	2022      	movs	r0, #34	; 0x22
 80007dc:	f7ff ffa6 	bl	800072c <LG2_Read_Register>
 80007e0:	4603      	mov	r3, r0
 80007e2:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x23);
 80007e4:	2023      	movs	r0, #35	; 0x23
 80007e6:	f7ff ffa1 	bl	800072c <LG2_Read_Register>
 80007ea:	4603      	mov	r3, r0
 80007ec:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80007ee:	79bb      	ldrb	r3, [r7, #6]
 80007f0:	021b      	lsls	r3, r3, #8
 80007f2:	b21a      	sxth	r2, r3
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	b21b      	sxth	r3, r3
 80007f8:	4313      	orrs	r3, r2
 80007fa:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 80007fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000800:	ee07 3a90 	vmov	s15, r3
 8000804:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000808:	eddf 6a08 	vldr	s13, [pc, #32]	; 800082c <LG2_Get_Gyro_X+0x58>
 800080c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000810:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000830 <LG2_Get_Gyro_X+0x5c>
 8000814:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000818:	edc7 7a00 	vstr	s15, [r7]
	return omega;
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	ee07 3a90 	vmov	s15, r3
}
 8000822:	eeb0 0a67 	vmov.f32	s0, s15
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	46fffe00 	.word	0x46fffe00
 8000830:	437a0000 	.word	0x437a0000

08000834 <LG2_Get_Gyro_Y>:

float LG2_Get_Gyro_Y(){
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x24);
 800083a:	2024      	movs	r0, #36	; 0x24
 800083c:	f7ff ff76 	bl	800072c <LG2_Read_Register>
 8000840:	4603      	mov	r3, r0
 8000842:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x25);
 8000844:	2025      	movs	r0, #37	; 0x25
 8000846:	f7ff ff71 	bl	800072c <LG2_Read_Register>
 800084a:	4603      	mov	r3, r0
 800084c:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	b21a      	sxth	r2, r3
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	b21b      	sxth	r3, r3
 8000858:	4313      	orrs	r3, r2
 800085a:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 800085c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000860:	ee07 3a90 	vmov	s15, r3
 8000864:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000868:	eddf 6a08 	vldr	s13, [pc, #32]	; 800088c <LG2_Get_Gyro_Y+0x58>
 800086c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000870:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000890 <LG2_Get_Gyro_Y+0x5c>
 8000874:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000878:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	ee07 3a90 	vmov	s15, r3
}
 8000882:	eeb0 0a67 	vmov.f32	s0, s15
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	46fffe00 	.word	0x46fffe00
 8000890:	437a0000 	.word	0x437a0000
 8000894:	00000000 	.word	0x00000000

08000898 <LG2_Get_Gyro_Z>:

float LG2_Get_Gyro_Z(){
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x26);
 800089e:	2026      	movs	r0, #38	; 0x26
 80008a0:	f7ff ff44 	bl	800072c <LG2_Read_Register>
 80008a4:	4603      	mov	r3, r0
 80008a6:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x27);
 80008a8:	2027      	movs	r0, #39	; 0x27
 80008aa:	f7ff ff3f 	bl	800072c <LG2_Read_Register>
 80008ae:	4603      	mov	r3, r0
 80008b0:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80008b2:	79bb      	ldrb	r3, [r7, #6]
 80008b4:	021b      	lsls	r3, r3, #8
 80008b6:	b21a      	sxth	r2, r3
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	b21b      	sxth	r3, r3
 80008bc:	4313      	orrs	r3, r2
 80008be:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767.0) * 250.0;
 80008c0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008c4:	ee07 3a90 	vmov	s15, r3
 80008c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008cc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80008d0:	ed9f 5b09 	vldr	d5, [pc, #36]	; 80008f8 <LG2_Get_Gyro_Z+0x60>
 80008d4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008d8:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000900 <LG2_Get_Gyro_Z+0x68>
 80008dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008e0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008e4:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	ee07 3a90 	vmov	s15, r3
}
 80008ee:	eeb0 0a67 	vmov.f32	s0, s15
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	00000000 	.word	0x00000000
 80008fc:	40dfffc0 	.word	0x40dfffc0
 8000900:	00000000 	.word	0x00000000
 8000904:	406f4000 	.word	0x406f4000

08000908 <setServo>:
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;


void setServo(int servoNum, float angle){
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal =(int)( 3000 + (4000 * (angle/180)));
 8000914:	ed97 7a00 	vldr	s14, [r7]
 8000918:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000988 <setServo+0x80>
 800091c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000920:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800098c <setServo+0x84>
 8000924:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000928:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000990 <setServo+0x88>
 800092c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000930:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000934:	ee17 3a90 	vmov	r3, s15
 8000938:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	3b01      	subs	r3, #1
 800093e:	2b03      	cmp	r3, #3
 8000940:	d81a      	bhi.n	8000978 <setServo+0x70>
 8000942:	a201      	add	r2, pc, #4	; (adr r2, 8000948 <setServo+0x40>)
 8000944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000948:	08000959 	.word	0x08000959
 800094c:	08000961 	.word	0x08000961
 8000950:	08000969 	.word	0x08000969
 8000954:	08000971 	.word	0x08000971
		case 1:
			TIM4->CCR4 = timerVal;
 8000958:	4a0e      	ldr	r2, [pc, #56]	; (8000994 <setServo+0x8c>)
 800095a:	89fb      	ldrh	r3, [r7, #14]
 800095c:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 800095e:	e00c      	b.n	800097a <setServo+0x72>
		case 2:
			TIM4->CCR3 = timerVal;
 8000960:	4a0c      	ldr	r2, [pc, #48]	; (8000994 <setServo+0x8c>)
 8000962:	89fb      	ldrh	r3, [r7, #14]
 8000964:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 8000966:	e008      	b.n	800097a <setServo+0x72>
		case 3:
			TIM4->CCR2 = timerVal;
 8000968:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <setServo+0x8c>)
 800096a:	89fb      	ldrh	r3, [r7, #14]
 800096c:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 800096e:	e004      	b.n	800097a <setServo+0x72>
		case 4:
			TIM4->CCR1 = timerVal;
 8000970:	4a08      	ldr	r2, [pc, #32]	; (8000994 <setServo+0x8c>)
 8000972:	89fb      	ldrh	r3, [r7, #14]
 8000974:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8000976:	e000      	b.n	800097a <setServo+0x72>

		default:
			break;
 8000978:	bf00      	nop
	}
}
 800097a:	bf00      	nop
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	43340000 	.word	0x43340000
 800098c:	457a0000 	.word	0x457a0000
 8000990:	453b8000 	.word	0x453b8000
 8000994:	40000800 	.word	0x40000800

08000998 <setLEDs>:

void setLEDs(void) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b08e      	sub	sp, #56	; 0x38
 800099c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 800099e:	2300      	movs	r3, #0
 80009a0:	637b      	str	r3, [r7, #52]	; 0x34
 80009a2:	e181      	b.n	8000ca8 <setLEDs+0x310>
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 80009a4:	4aa1      	ldr	r2, [pc, #644]	; (8000c2c <setLEDs+0x294>)
 80009a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80009ac:	2b03      	cmp	r3, #3
 80009ae:	f200 8177 	bhi.w	8000ca0 <setLEDs+0x308>
 80009b2:	a201      	add	r2, pc, #4	; (adr r2, 80009b8 <setLEDs+0x20>)
 80009b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b8:	080009c9 	.word	0x080009c9
 80009bc:	08000a79 	.word	0x08000a79
 80009c0:	08000b29 	.word	0x08000b29
 80009c4:	08000bd9 	.word	0x08000bd9
		case 0:
			for (int j = 0; j < 3; j++) {
 80009c8:	2300      	movs	r3, #0
 80009ca:	633b      	str	r3, [r7, #48]	; 0x30
 80009cc:	e042      	b.n	8000a54 <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 80009ce:	2300      	movs	r3, #0
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009d2:	e039      	b.n	8000a48 <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 80009d4:	4996      	ldr	r1, [pc, #600]	; (8000c30 <setLEDs+0x298>)
 80009d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009d8:	4613      	mov	r3, r2
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	4413      	add	r3, r2
 80009de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80009e0:	4413      	add	r3, r2
 80009e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009e6:	2180      	movs	r1, #128	; 0x80
 80009e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009ea:	fa41 f202 	asr.w	r2, r1, r2
 80009ee:	4013      	ands	r3, r2
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d013      	beq.n	8000a1c <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 80009f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009f6:	00da      	lsls	r2, r3, #3
 80009f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009fa:	18d1      	adds	r1, r2, r3
 80009fc:	4a8b      	ldr	r2, [pc, #556]	; (8000c2c <setLEDs+0x294>)
 80009fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a00:	00db      	lsls	r3, r3, #3
 8000a02:	4413      	add	r3, r2
 8000a04:	685a      	ldr	r2, [r3, #4]
 8000a06:	4613      	mov	r3, r2
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	4413      	add	r3, r2
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	440b      	add	r3, r1
 8000a10:	3308      	adds	r3, #8
 8000a12:	4a88      	ldr	r2, [pc, #544]	; (8000c34 <setLEDs+0x29c>)
 8000a14:	213c      	movs	r1, #60	; 0x3c
 8000a16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a1a:	e012      	b.n	8000a42 <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a1e:	00da      	lsls	r2, r3, #3
 8000a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a22:	18d1      	adds	r1, r2, r3
 8000a24:	4a81      	ldr	r2, [pc, #516]	; (8000c2c <setLEDs+0x294>)
 8000a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a28:	00db      	lsls	r3, r3, #3
 8000a2a:	4413      	add	r3, r2
 8000a2c:	685a      	ldr	r2, [r3, #4]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	4413      	add	r3, r2
 8000a34:	00db      	lsls	r3, r3, #3
 8000a36:	440b      	add	r3, r1
 8000a38:	3308      	adds	r3, #8
 8000a3a:	4a7e      	ldr	r2, [pc, #504]	; (8000c34 <setLEDs+0x29c>)
 8000a3c:	211e      	movs	r1, #30
 8000a3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a44:	3301      	adds	r3, #1
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4a:	2b07      	cmp	r3, #7
 8000a4c:	ddc2      	ble.n	80009d4 <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 8000a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a50:	3301      	adds	r3, #1
 8000a52:	633b      	str	r3, [r7, #48]	; 0x30
 8000a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	ddb9      	ble.n	80009ce <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000a5a:	2380      	movs	r3, #128	; 0x80
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a5e:	e007      	b.n	8000a70 <setLEDs+0xd8>
				LED_PWM_Data_0[i] = 0;
 8000a60:	4a74      	ldr	r2, [pc, #464]	; (8000c34 <setLEDs+0x29c>)
 8000a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a64:	2100      	movs	r1, #0
 8000a66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a72:	2bb1      	cmp	r3, #177	; 0xb1
 8000a74:	ddf4      	ble.n	8000a60 <setLEDs+0xc8>
			}
			break;
 8000a76:	e114      	b.n	8000ca2 <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a7c:	e042      	b.n	8000b04 <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
 8000a82:	e039      	b.n	8000af8 <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000a84:	496a      	ldr	r1, [pc, #424]	; (8000c30 <setLEDs+0x298>)
 8000a86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a88:	4613      	mov	r3, r2
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	4413      	add	r3, r2
 8000a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a90:	4413      	add	r3, r2
 8000a92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a96:	2180      	movs	r1, #128	; 0x80
 8000a98:	6a3a      	ldr	r2, [r7, #32]
 8000a9a:	fa41 f202 	asr.w	r2, r1, r2
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d013      	beq.n	8000acc <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa6:	00da      	lsls	r2, r3, #3
 8000aa8:	6a3b      	ldr	r3, [r7, #32]
 8000aaa:	18d1      	adds	r1, r2, r3
 8000aac:	4a5f      	ldr	r2, [pc, #380]	; (8000c2c <setLEDs+0x294>)
 8000aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	4413      	add	r3, r2
 8000ab4:	685a      	ldr	r2, [r3, #4]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	4413      	add	r3, r2
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	440b      	add	r3, r1
 8000ac0:	3308      	adds	r3, #8
 8000ac2:	4a5d      	ldr	r2, [pc, #372]	; (8000c38 <setLEDs+0x2a0>)
 8000ac4:	213c      	movs	r1, #60	; 0x3c
 8000ac6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000aca:	e012      	b.n	8000af2 <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ace:	00da      	lsls	r2, r3, #3
 8000ad0:	6a3b      	ldr	r3, [r7, #32]
 8000ad2:	18d1      	adds	r1, r2, r3
 8000ad4:	4a55      	ldr	r2, [pc, #340]	; (8000c2c <setLEDs+0x294>)
 8000ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	4413      	add	r3, r2
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	4413      	add	r3, r2
 8000ae4:	00db      	lsls	r3, r3, #3
 8000ae6:	440b      	add	r3, r1
 8000ae8:	3308      	adds	r3, #8
 8000aea:	4a53      	ldr	r2, [pc, #332]	; (8000c38 <setLEDs+0x2a0>)
 8000aec:	211e      	movs	r1, #30
 8000aee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000af2:	6a3b      	ldr	r3, [r7, #32]
 8000af4:	3301      	adds	r3, #1
 8000af6:	623b      	str	r3, [r7, #32]
 8000af8:	6a3b      	ldr	r3, [r7, #32]
 8000afa:	2b07      	cmp	r3, #7
 8000afc:	ddc2      	ble.n	8000a84 <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 8000afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b00:	3301      	adds	r3, #1
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
 8000b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	ddb9      	ble.n	8000a7e <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000b0a:	2380      	movs	r3, #128	; 0x80
 8000b0c:	61fb      	str	r3, [r7, #28]
 8000b0e:	e007      	b.n	8000b20 <setLEDs+0x188>
				LED_PWM_Data_1[i] = 0;
 8000b10:	4a49      	ldr	r2, [pc, #292]	; (8000c38 <setLEDs+0x2a0>)
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	2100      	movs	r1, #0
 8000b16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	61fb      	str	r3, [r7, #28]
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	2bb1      	cmp	r3, #177	; 0xb1
 8000b24:	ddf4      	ble.n	8000b10 <setLEDs+0x178>
			}
			break;
 8000b26:	e0bc      	b.n	8000ca2 <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61bb      	str	r3, [r7, #24]
 8000b2c:	e042      	b.n	8000bb4 <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
 8000b32:	e039      	b.n	8000ba8 <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000b34:	493e      	ldr	r1, [pc, #248]	; (8000c30 <setLEDs+0x298>)
 8000b36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b38:	4613      	mov	r3, r2
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	4413      	add	r3, r2
 8000b3e:	69ba      	ldr	r2, [r7, #24]
 8000b40:	4413      	add	r3, r2
 8000b42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b46:	2180      	movs	r1, #128	; 0x80
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	fa41 f202 	asr.w	r2, r1, r2
 8000b4e:	4013      	ands	r3, r2
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d013      	beq.n	8000b7c <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	00da      	lsls	r2, r3, #3
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	18d1      	adds	r1, r2, r3
 8000b5c:	4a33      	ldr	r2, [pc, #204]	; (8000c2c <setLEDs+0x294>)
 8000b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	4413      	add	r3, r2
 8000b64:	685a      	ldr	r2, [r3, #4]
 8000b66:	4613      	mov	r3, r2
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	4413      	add	r3, r2
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	440b      	add	r3, r1
 8000b70:	3308      	adds	r3, #8
 8000b72:	4a32      	ldr	r2, [pc, #200]	; (8000c3c <setLEDs+0x2a4>)
 8000b74:	213c      	movs	r1, #60	; 0x3c
 8000b76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000b7a:	e012      	b.n	8000ba2 <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	00da      	lsls	r2, r3, #3
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	18d1      	adds	r1, r2, r3
 8000b84:	4a29      	ldr	r2, [pc, #164]	; (8000c2c <setLEDs+0x294>)
 8000b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	4413      	add	r3, r2
 8000b8c:	685a      	ldr	r2, [r3, #4]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	4413      	add	r3, r2
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	440b      	add	r3, r1
 8000b98:	3308      	adds	r3, #8
 8000b9a:	4a28      	ldr	r2, [pc, #160]	; (8000c3c <setLEDs+0x2a4>)
 8000b9c:	211e      	movs	r1, #30
 8000b9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	2b07      	cmp	r3, #7
 8000bac:	ddc2      	ble.n	8000b34 <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	61bb      	str	r3, [r7, #24]
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	ddb9      	ble.n	8000b2e <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000bba:	2338      	movs	r3, #56	; 0x38
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	e007      	b.n	8000bd0 <setLEDs+0x238>
				LED_PWM_Data_2[i] = 0;
 8000bc0:	4a1e      	ldr	r2, [pc, #120]	; (8000c3c <setLEDs+0x2a4>)
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	2b69      	cmp	r3, #105	; 0x69
 8000bd4:	ddf4      	ble.n	8000bc0 <setLEDs+0x228>
			}
			break;
 8000bd6:	e064      	b.n	8000ca2 <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	e04e      	b.n	8000c7c <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	e045      	b.n	8000c70 <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000be4:	4912      	ldr	r1, [pc, #72]	; (8000c30 <setLEDs+0x298>)
 8000be6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000be8:	4613      	mov	r3, r2
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	4413      	add	r3, r2
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bf6:	2180      	movs	r1, #128	; 0x80
 8000bf8:	68ba      	ldr	r2, [r7, #8]
 8000bfa:	fa41 f202 	asr.w	r2, r1, r2
 8000bfe:	4013      	ands	r3, r2
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d01f      	beq.n	8000c44 <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	00da      	lsls	r2, r3, #3
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	18d1      	adds	r1, r2, r3
 8000c0c:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <setLEDs+0x294>)
 8000c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	4413      	add	r3, r2
 8000c14:	685a      	ldr	r2, [r3, #4]
 8000c16:	4613      	mov	r3, r2
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	4413      	add	r3, r2
 8000c1c:	00db      	lsls	r3, r3, #3
 8000c1e:	440b      	add	r3, r1
 8000c20:	3308      	adds	r3, #8
 8000c22:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <setLEDs+0x2a8>)
 8000c24:	213c      	movs	r1, #60	; 0x3c
 8000c26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000c2a:	e01e      	b.n	8000c6a <setLEDs+0x2d2>
 8000c2c:	08017a30 	.word	0x08017a30
 8000c30:	24000a4c 	.word	0x24000a4c
 8000c34:	2400016c 	.word	0x2400016c
 8000c38:	24000434 	.word	0x24000434
 8000c3c:	240006fc 	.word	0x240006fc
 8000c40:	240008a4 	.word	0x240008a4
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	00da      	lsls	r2, r3, #3
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	18d1      	adds	r1, r2, r3
 8000c4c:	4a26      	ldr	r2, [pc, #152]	; (8000ce8 <setLEDs+0x350>)
 8000c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c50:	00db      	lsls	r3, r3, #3
 8000c52:	4413      	add	r3, r2
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	4613      	mov	r3, r2
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	4413      	add	r3, r2
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	440b      	add	r3, r1
 8000c60:	3308      	adds	r3, #8
 8000c62:	4a22      	ldr	r2, [pc, #136]	; (8000cec <setLEDs+0x354>)
 8000c64:	211e      	movs	r1, #30
 8000c66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	2b07      	cmp	r3, #7
 8000c74:	ddb6      	ble.n	8000be4 <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	ddad      	ble.n	8000bde <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000c82:	2338      	movs	r3, #56	; 0x38
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	e007      	b.n	8000c98 <setLEDs+0x300>
				LED_PWM_Data_3[i] = 0;
 8000c88:	4a18      	ldr	r2, [pc, #96]	; (8000cec <setLEDs+0x354>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	3301      	adds	r3, #1
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b69      	cmp	r3, #105	; 0x69
 8000c9c:	ddf4      	ble.n	8000c88 <setLEDs+0x2f0>
			}
			break;
 8000c9e:	e000      	b.n	8000ca2 <setLEDs+0x30a>
		default:
			break;
 8000ca0:	bf00      	nop
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 8000ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8000ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000caa:	2b0d      	cmp	r3, #13
 8000cac:	f77f ae7a 	ble.w	80009a4 <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0, (NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
 8000cb0:	23b2      	movs	r3, #178	; 0xb2
 8000cb2:	4a0f      	ldr	r2, [pc, #60]	; (8000cf0 <setLEDs+0x358>)
 8000cb4:	210c      	movs	r1, #12
 8000cb6:	480f      	ldr	r0, [pc, #60]	; (8000cf4 <setLEDs+0x35c>)
 8000cb8:	f00e fca8 	bl	800f60c <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1, (NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
 8000cbc:	23b2      	movs	r3, #178	; 0xb2
 8000cbe:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <setLEDs+0x360>)
 8000cc0:	2108      	movs	r1, #8
 8000cc2:	480e      	ldr	r0, [pc, #56]	; (8000cfc <setLEDs+0x364>)
 8000cc4:	f00e fca2 	bl	800f60c <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2, (NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
 8000cc8:	236a      	movs	r3, #106	; 0x6a
 8000cca:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <setLEDs+0x368>)
 8000ccc:	2104      	movs	r1, #4
 8000cce:	480d      	ldr	r0, [pc, #52]	; (8000d04 <setLEDs+0x36c>)
 8000cd0:	f00e fc9c 	bl	800f60c <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3, (NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3
 8000cd4:	236a      	movs	r3, #106	; 0x6a
 8000cd6:	4a05      	ldr	r2, [pc, #20]	; (8000cec <setLEDs+0x354>)
 8000cd8:	2100      	movs	r1, #0
 8000cda:	480a      	ldr	r0, [pc, #40]	; (8000d04 <setLEDs+0x36c>)
 8000cdc:	f00e fc96 	bl	800f60c <HAL_TIM_PWM_Start_DMA>

}
 8000ce0:	bf00      	nop
 8000ce2:	3738      	adds	r7, #56	; 0x38
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	08017a30 	.word	0x08017a30
 8000cec:	240008a4 	.word	0x240008a4
 8000cf0:	2400016c 	.word	0x2400016c
 8000cf4:	240010b0 	.word	0x240010b0
 8000cf8:	24000434 	.word	0x24000434
 8000cfc:	24000fcc 	.word	0x24000fcc
 8000d00:	240006fc 	.word	0x240006fc
 8000d04:	24001018 	.word	0x24001018

08000d08 <LoRA_Read_Register>:
	}
}



uint8_t LoRA_Read_Register(uint8_t addr){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d18:	480d      	ldr	r0, [pc, #52]	; (8000d50 <LoRA_Read_Register+0x48>)
 8000d1a:	f007 f90d 	bl	8007f38 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000d1e:	1df9      	adds	r1, r7, #7
 8000d20:	2364      	movs	r3, #100	; 0x64
 8000d22:	2201      	movs	r2, #1
 8000d24:	480b      	ldr	r0, [pc, #44]	; (8000d54 <LoRA_Read_Register+0x4c>)
 8000d26:	f00d fe89 	bl	800ea3c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 8000d2a:	f107 010f 	add.w	r1, r7, #15
 8000d2e:	2364      	movs	r3, #100	; 0x64
 8000d30:	2201      	movs	r2, #1
 8000d32:	4808      	ldr	r0, [pc, #32]	; (8000d54 <LoRA_Read_Register+0x4c>)
 8000d34:	f00e f87e 	bl	800ee34 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d3e:	4804      	ldr	r0, [pc, #16]	; (8000d50 <LoRA_Read_Register+0x48>)
 8000d40:	f007 f8fa 	bl	8007f38 <HAL_GPIO_WritePin>

	return reg_value;
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	58020000 	.word	0x58020000
 8000d54:	24000f44 	.word	0x24000f44

08000d58 <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	460a      	mov	r2, r1
 8000d62:	71fb      	strb	r3, [r7, #7]
 8000d64:	4613      	mov	r3, r2
 8000d66:	71bb      	strb	r3, [r7, #6]
	addr |= (1<<7);
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d78:	480c      	ldr	r0, [pc, #48]	; (8000dac <LoRA_Write_Register+0x54>)
 8000d7a:	f007 f8dd 	bl	8007f38 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000d7e:	1df9      	adds	r1, r7, #7
 8000d80:	2364      	movs	r3, #100	; 0x64
 8000d82:	2201      	movs	r2, #1
 8000d84:	480a      	ldr	r0, [pc, #40]	; (8000db0 <LoRA_Write_Register+0x58>)
 8000d86:	f00d fe59 	bl	800ea3c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8000d8a:	1db9      	adds	r1, r7, #6
 8000d8c:	2364      	movs	r3, #100	; 0x64
 8000d8e:	2201      	movs	r2, #1
 8000d90:	4807      	ldr	r0, [pc, #28]	; (8000db0 <LoRA_Write_Register+0x58>)
 8000d92:	f00d fe53 	bl	800ea3c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000d96:	2201      	movs	r2, #1
 8000d98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d9c:	4803      	ldr	r0, [pc, #12]	; (8000dac <LoRA_Write_Register+0x54>)
 8000d9e:	f007 f8cb 	bl	8007f38 <HAL_GPIO_WritePin>

}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	58020000 	.word	0x58020000
 8000db0:	24000f44 	.word	0x24000f44

08000db4 <LoRA_sleep>:


void LoRA_sleep(void){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000db8:	2180      	movs	r1, #128	; 0x80
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f7ff ffcc 	bl	8000d58 <LoRA_Write_Register>
}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency){
 8000dc4:	b5b0      	push	{r4, r5, r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8000dcc:	6879      	ldr	r1, [r7, #4]
 8000dce:	17c8      	asrs	r0, r1, #31
 8000dd0:	460a      	mov	r2, r1
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	1355      	asrs	r5, r2, #13
 8000dd6:	04d4      	lsls	r4, r2, #19
 8000dd8:	4a18      	ldr	r2, [pc, #96]	; (8000e3c <LoRA_set_frequency+0x78>)
 8000dda:	f04f 0300 	mov.w	r3, #0
 8000dde:	4620      	mov	r0, r4
 8000de0:	4629      	mov	r1, r5
 8000de2:	f7ff fafd 	bl	80003e0 <__aeabi_uldivmod>
 8000de6:	4602      	mov	r2, r0
 8000de8:	460b      	mov	r3, r1
 8000dea:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8000dee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000df2:	f04f 0200 	mov.w	r2, #0
 8000df6:	f04f 0300 	mov.w	r3, #0
 8000dfa:	0c02      	lsrs	r2, r0, #16
 8000dfc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e00:	0c0b      	lsrs	r3, r1, #16
 8000e02:	b2d3      	uxtb	r3, r2
 8000e04:	4619      	mov	r1, r3
 8000e06:	2006      	movs	r0, #6
 8000e08:	f7ff ffa6 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t)(frf >> 8));
 8000e0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e10:	f04f 0200 	mov.w	r2, #0
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	0a02      	lsrs	r2, r0, #8
 8000e1a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000e1e:	0a0b      	lsrs	r3, r1, #8
 8000e20:	b2d3      	uxtb	r3, r2
 8000e22:	4619      	mov	r1, r3
 8000e24:	2007      	movs	r0, #7
 8000e26:	f7ff ff97 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8000e2a:	7a3b      	ldrb	r3, [r7, #8]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	2008      	movs	r0, #8
 8000e30:	f7ff ff92 	bl	8000d58 <LoRA_Write_Register>
}
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e3c:	01e84800 	.word	0x01e84800

08000e40 <LoRA_idle>:

void LoRA_idle(){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8000e44:	2181      	movs	r1, #129	; 0x81
 8000e46:	2001      	movs	r0, #1
 8000e48:	f7ff ff86 	bl	8000d58 <LoRA_Write_Register>
}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <LoRA_setOCP>:

void LoRA_setOCP(uint8_t mA){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
	  uint8_t ocpTrim = 27;
 8000e5a:	231b      	movs	r3, #27
 8000e5c:	73fb      	strb	r3, [r7, #15]

	  if (mA <= 120) {
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	2b78      	cmp	r3, #120	; 0x78
 8000e62:	d809      	bhi.n	8000e78 <LoRA_setOCP+0x28>
	    ocpTrim = (mA - 45) / 5;
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	3b2d      	subs	r3, #45	; 0x2d
 8000e68:	4a11      	ldr	r2, [pc, #68]	; (8000eb0 <LoRA_setOCP+0x60>)
 8000e6a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e6e:	1052      	asrs	r2, r2, #1
 8000e70:	17db      	asrs	r3, r3, #31
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	73fb      	strb	r3, [r7, #15]
 8000e76:	e00b      	b.n	8000e90 <LoRA_setOCP+0x40>
	  } else if (mA <=240) {
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	2bf0      	cmp	r3, #240	; 0xf0
 8000e7c:	d808      	bhi.n	8000e90 <LoRA_setOCP+0x40>
	    ocpTrim = (mA + 30) / 10;
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	331e      	adds	r3, #30
 8000e82:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <LoRA_setOCP+0x60>)
 8000e84:	fb82 1203 	smull	r1, r2, r2, r3
 8000e88:	1092      	asrs	r2, r2, #2
 8000e8a:	17db      	asrs	r3, r3, #31
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	73fb      	strb	r3, [r7, #15]
	  }

	  LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	f003 031f 	and.w	r3, r3, #31
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	f043 0320 	orr.w	r3, r3, #32
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	200b      	movs	r0, #11
 8000ea2:	f7ff ff59 	bl	8000d58 <LoRA_Write_Register>
}
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	66666667 	.word	0x66666667

08000eb4 <LoRA_setTxPower>:

void LoRA_setTxPower(int level){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
    // PA BOOST
    if (level > 17) {
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b11      	cmp	r3, #17
 8000ec0:	dd0f      	ble.n	8000ee2 <LoRA_setTxPower+0x2e>
      if (level > 20) {
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b14      	cmp	r3, #20
 8000ec6:	dd01      	ble.n	8000ecc <LoRA_setTxPower+0x18>
        level = 20;
 8000ec8:	2314      	movs	r3, #20
 8000eca:	607b      	str	r3, [r7, #4]
      }

      // subtract 3 from level, so 18 - 20 maps to 15 - 17
      level -= 3;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b03      	subs	r3, #3
 8000ed0:	607b      	str	r3, [r7, #4]

      // High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
      LoRA_Write_Register(REG_PA_DAC, 0x87);
 8000ed2:	2187      	movs	r1, #135	; 0x87
 8000ed4:	204d      	movs	r0, #77	; 0x4d
 8000ed6:	f7ff ff3f 	bl	8000d58 <LoRA_Write_Register>
      LoRA_setOCP(140);
 8000eda:	208c      	movs	r0, #140	; 0x8c
 8000edc:	f7ff ffb8 	bl	8000e50 <LoRA_setOCP>
 8000ee0:	e00b      	b.n	8000efa <LoRA_setTxPower+0x46>
    } else {
      if (level < 2) {
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	dc01      	bgt.n	8000eec <LoRA_setTxPower+0x38>
        level = 2;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	607b      	str	r3, [r7, #4]
      }
      //Default value PA_HF/LF or +17dBm
      LoRA_Write_Register(REG_PA_DAC, 0x84);
 8000eec:	2184      	movs	r1, #132	; 0x84
 8000eee:	204d      	movs	r0, #77	; 0x4d
 8000ef0:	f7ff ff32 	bl	8000d58 <LoRA_Write_Register>
      LoRA_setOCP(100);
 8000ef4:	2064      	movs	r0, #100	; 0x64
 8000ef6:	f7ff ffab 	bl	8000e50 <LoRA_setOCP>
    }

    LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	3b02      	subs	r3, #2
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	b25b      	sxtb	r3, r3
 8000f04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f08:	b25b      	sxtb	r3, r3
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	2009      	movs	r0, #9
 8000f10:	f7ff ff22 	bl	8000d58 <LoRA_Write_Register>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <LoRA_explicit_header_mode>:

void LoRA_explicit_header_mode(){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_MODEM_CONFIG_1, LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
 8000f20:	201d      	movs	r0, #29
 8000f22:	f7ff fef1 	bl	8000d08 <LoRA_Read_Register>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f023 0301 	bic.w	r3, r3, #1
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	4619      	mov	r1, r3
 8000f30:	201d      	movs	r0, #29
 8000f32:	f7ff ff11 	bl	8000d58 <LoRA_Write_Register>
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <LoRA_begin>:

void LoRA_begin(long frequency){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b09c      	sub	sp, #112	; 0x70
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8000f44:	2201      	movs	r2, #1
 8000f46:	2101      	movs	r1, #1
 8000f48:	4822      	ldr	r0, [pc, #136]	; (8000fd4 <LoRA_begin+0x98>)
 8000f4a:	f006 fff5 	bl	8007f38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f54:	4820      	ldr	r0, [pc, #128]	; (8000fd8 <LoRA_begin+0x9c>)
 8000f56:	f006 ffef 	bl	8007f38 <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 8000f5a:	2042      	movs	r0, #66	; 0x42
 8000f5c:	f7ff fed4 	bl	8000d08 <LoRA_Read_Register>
 8000f60:	4603      	mov	r3, r0
 8000f62:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    char data_debug[100];
	sprintf( data_debug,  "%x\n", version);
 8000f66:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000f6a:	f107 0308 	add.w	r3, r7, #8
 8000f6e:	491b      	ldr	r1, [pc, #108]	; (8000fdc <LoRA_begin+0xa0>)
 8000f70:	4618      	mov	r0, r3
 8000f72:	f015 ffa1 	bl	8016eb8 <siprintf>
	CDC_Transmit_HS(data_debug, strlen(data_debug));
 8000f76:	f107 0308 	add.w	r3, r7, #8
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff f9d2 	bl	8000324 <strlen>
 8000f80:	4602      	mov	r2, r0
 8000f82:	f107 0308 	add.w	r3, r7, #8
 8000f86:	4611      	mov	r1, r2
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f015 fb41 	bl	8016610 <CDC_Transmit_HS>

	LoRA_sleep();
 8000f8e:	f7ff ff11 	bl	8000db4 <LoRA_sleep>
	LoRA_set_frequency(868000000);
 8000f92:	4813      	ldr	r0, [pc, #76]	; (8000fe0 <LoRA_begin+0xa4>)
 8000f94:	f7ff ff16 	bl	8000dc4 <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 8000f98:	2100      	movs	r1, #0
 8000f9a:	200f      	movs	r0, #15
 8000f9c:	f7ff fedc 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	200e      	movs	r0, #14
 8000fa4:	f7ff fed8 	bl	8000d58 <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 8000fa8:	200c      	movs	r0, #12
 8000faa:	f7ff fead 	bl	8000d08 <LoRA_Read_Register>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	f043 0303 	orr.w	r3, r3, #3
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	200c      	movs	r0, #12
 8000fba:	f7ff fecd 	bl	8000d58 <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 8000fbe:	2104      	movs	r1, #4
 8000fc0:	2026      	movs	r0, #38	; 0x26
 8000fc2:	f7ff fec9 	bl	8000d58 <LoRA_Write_Register>

	LoRA_setTxPower(17);
 8000fc6:	2011      	movs	r0, #17
 8000fc8:	f7ff ff74 	bl	8000eb4 <LoRA_setTxPower>

}
 8000fcc:	bf00      	nop
 8000fce:	3770      	adds	r7, #112	; 0x70
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	58020c00 	.word	0x58020c00
 8000fd8:	58020000 	.word	0x58020000
 8000fdc:	08017828 	.word	0x08017828
 8000fe0:	33bca100 	.word	0x33bca100

08000fe4 <LoRA_beginPacket>:


void LoRA_beginPacket(){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	LoRA_explicit_header_mode();
 8000fe8:	f7ff ff98 	bl	8000f1c <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8000fec:	2100      	movs	r1, #0
 8000fee:	200d      	movs	r0, #13
 8000ff0:	f7ff feb2 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, 0);
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2022      	movs	r0, #34	; 0x22
 8000ff8:	f7ff feae 	bl	8000d58 <LoRA_Write_Register>
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <LoRA_endPacket>:

void LoRA_endPacket(){
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8001006:	2183      	movs	r1, #131	; 0x83
 8001008:	2001      	movs	r0, #1
 800100a:	f7ff fea5 	bl	8000d58 <LoRA_Write_Register>

	while((LoRA_Read_Register(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0){
 800100e:	bf00      	nop
 8001010:	2012      	movs	r0, #18
 8001012:	f7ff fe79 	bl	8000d08 <LoRA_Read_Register>
 8001016:	4603      	mov	r3, r0
 8001018:	f003 0308 	and.w	r3, r3, #8
 800101c:	2b00      	cmp	r3, #0
 800101e:	d0f7      	beq.n	8001010 <LoRA_endPacket+0x10>

	}

	LoRA_Write_Register(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8001020:	2108      	movs	r1, #8
 8001022:	2012      	movs	r0, #18
 8001024:	f7ff fe98 	bl	8000d58 <LoRA_Write_Register>

	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 8001028:	2012      	movs	r0, #18
 800102a:	f7ff fe6d 	bl	8000d08 <LoRA_Read_Register>
 800102e:	4603      	mov	r3, r0
 8001030:	607b      	str	r3, [r7, #4]

	LoRA_explicit_header_mode();
 8001032:	f7ff ff73 	bl	8000f1c <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	b2db      	uxtb	r3, r3
 800103a:	4619      	mov	r1, r3
 800103c:	2012      	movs	r0, #18
 800103e:	f7ff fe8b 	bl	8000d58 <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001048:	2b00      	cmp	r3, #0
 800104a:	d00f      	beq.n	800106c <LoRA_endPacket+0x6c>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f003 0320 	and.w	r3, r3, #32
 8001052:	2b00      	cmp	r3, #0
 8001054:	d10a      	bne.n	800106c <LoRA_endPacket+0x6c>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 8001056:	2010      	movs	r0, #16
 8001058:	f7ff fe56 	bl	8000d08 <LoRA_Read_Register>
 800105c:	4603      	mov	r3, r0
 800105e:	4619      	mov	r1, r3
 8001060:	200d      	movs	r0, #13
 8001062:	f7ff fe79 	bl	8000d58 <LoRA_Write_Register>
		LoRA_idle();
 8001066:	f7ff feeb 	bl	8000e40 <LoRA_idle>
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)){
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
	}
}
 800106a:	e00d      	b.n	8001088 <LoRA_endPacket+0x88>
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)){
 800106c:	2001      	movs	r0, #1
 800106e:	f7ff fe4b 	bl	8000d08 <LoRA_Read_Register>
 8001072:	4603      	mov	r3, r0
 8001074:	2b86      	cmp	r3, #134	; 0x86
 8001076:	d007      	beq.n	8001088 <LoRA_endPacket+0x88>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8001078:	2100      	movs	r1, #0
 800107a:	200d      	movs	r0, #13
 800107c:	f7ff fe6c 	bl	8000d58 <LoRA_Write_Register>
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 8001080:	2186      	movs	r1, #134	; 0x86
 8001082:	2001      	movs	r0, #1
 8001084:	f7ff fe68 	bl	8000d58 <LoRA_Write_Register>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <LoRA_parsePacket>:


int LoRA_parsePacket(){
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
	int packetLenght = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	607b      	str	r3, [r7, #4]
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 800109a:	2012      	movs	r0, #18
 800109c:	f7ff fe34 	bl	8000d08 <LoRA_Read_Register>
 80010a0:	4603      	mov	r3, r0
 80010a2:	603b      	str	r3, [r7, #0]

	LoRA_explicit_header_mode();
 80010a4:	f7ff ff3a 	bl	8000f1c <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	4619      	mov	r1, r3
 80010ae:	2012      	movs	r0, #18
 80010b0:	f7ff fe52 	bl	8000d58 <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d014      	beq.n	80010e8 <LoRA_parsePacket+0x58>
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	f003 0320 	and.w	r3, r3, #32
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d10f      	bne.n	80010e8 <LoRA_parsePacket+0x58>
		packetLenght = LoRA_Read_Register(REG_RX_NB_BYTES);
 80010c8:	2013      	movs	r0, #19
 80010ca:	f7ff fe1d 	bl	8000d08 <LoRA_Read_Register>
 80010ce:	4603      	mov	r3, r0
 80010d0:	607b      	str	r3, [r7, #4]
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 80010d2:	2010      	movs	r0, #16
 80010d4:	f7ff fe18 	bl	8000d08 <LoRA_Read_Register>
 80010d8:	4603      	mov	r3, r0
 80010da:	4619      	mov	r1, r3
 80010dc:	200d      	movs	r0, #13
 80010de:	f7ff fe3b 	bl	8000d58 <LoRA_Write_Register>
		LoRA_idle();
 80010e2:	f7ff fead 	bl	8000e40 <LoRA_idle>
 80010e6:	e00d      	b.n	8001104 <LoRA_parsePacket+0x74>
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)){
 80010e8:	2001      	movs	r0, #1
 80010ea:	f7ff fe0d 	bl	8000d08 <LoRA_Read_Register>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b86      	cmp	r3, #134	; 0x86
 80010f2:	d007      	beq.n	8001104 <LoRA_parsePacket+0x74>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 80010f4:	2100      	movs	r1, #0
 80010f6:	200d      	movs	r0, #13
 80010f8:	f7ff fe2e 	bl	8000d58 <LoRA_Write_Register>

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 80010fc:	2186      	movs	r1, #134	; 0x86
 80010fe:	2001      	movs	r0, #1
 8001100:	f7ff fe2a 	bl	8000d58 <LoRA_Write_Register>
	}
	return packetLenght;
 8001104:	687b      	ldr	r3, [r7, #4]

}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <LoRA_sendPacket>:

void LoRA_sendPacket(char * data){
 800110e:	b580      	push	{r7, lr}
 8001110:	b084      	sub	sp, #16
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
    LoRA_beginPacket();
 8001116:	f7ff ff65 	bl	8000fe4 <LoRA_beginPacket>
    for(int i = 0; i < strlen(data); i++){
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	e00a      	b.n	8001136 <LoRA_sendPacket+0x28>
    	LoRA_Write_Register(REG_FIFO, data[i]);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	4413      	add	r3, r2
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4619      	mov	r1, r3
 800112a:	2000      	movs	r0, #0
 800112c:	f7ff fe14 	bl	8000d58 <LoRA_Write_Register>
    for(int i = 0; i < strlen(data); i++){
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	3301      	adds	r3, #1
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff f8f4 	bl	8000324 <strlen>
 800113c:	4602      	mov	r2, r0
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	429a      	cmp	r2, r3
 8001142:	d8ed      	bhi.n	8001120 <LoRA_sendPacket+0x12>
    }
    LoRA_Write_Register(REG_PAYLOAD_LENGTH, strlen(data));
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff f8ed 	bl	8000324 <strlen>
 800114a:	4603      	mov	r3, r0
 800114c:	b2db      	uxtb	r3, r3
 800114e:	4619      	mov	r1, r3
 8001150:	2022      	movs	r0, #34	; 0x22
 8001152:	f7ff fe01 	bl	8000d58 <LoRA_Write_Register>
    LoRA_endPacket();
 8001156:	f7ff ff53 	bl	8001000 <LoRA_endPacket>
}
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <disarm>:
	int status = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
	return status;
}

int disarm(char* state)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 800116c:	2200      	movs	r2, #0
 800116e:	2102      	movs	r1, #2
 8001170:	4827      	ldr	r0, [pc, #156]	; (8001210 <disarm+0xac>)
 8001172:	f006 fee1 	bl	8007f38 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2104      	movs	r1, #4
 800117a:	4825      	ldr	r0, [pc, #148]	; (8001210 <disarm+0xac>)
 800117c:	f006 fedc 	bl	8007f38 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 8001180:	2200      	movs	r2, #0
 8001182:	2102      	movs	r1, #2
 8001184:	4823      	ldr	r0, [pc, #140]	; (8001214 <disarm+0xb0>)
 8001186:	f006 fed7 	bl	8007f38 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001190:	4821      	ldr	r0, [pc, #132]	; (8001218 <disarm+0xb4>)
 8001192:	f006 fed1 	bl	8007f38 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800119c:	481e      	ldr	r0, [pc, #120]	; (8001218 <disarm+0xb4>)
 800119e:	f006 fecb 	bl	8007f38 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011a8:	481b      	ldr	r0, [pc, #108]	; (8001218 <disarm+0xb4>)
 80011aa:	f006 fec5 	bl	8007f38 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2102      	movs	r1, #2
 80011b2:	481a      	ldr	r0, [pc, #104]	; (800121c <disarm+0xb8>)
 80011b4:	f006 fec0 	bl	8007f38 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 80011b8:	2200      	movs	r2, #0
 80011ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011be:	4818      	ldr	r0, [pc, #96]	; (8001220 <disarm+0xbc>)
 80011c0:	f006 feba 	bl	8007f38 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 80011c4:	2200      	movs	r2, #0
 80011c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ca:	4815      	ldr	r0, [pc, #84]	; (8001220 <disarm+0xbc>)
 80011cc:	f006 feb4 	bl	8007f38 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 80011d0:	2200      	movs	r2, #0
 80011d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011d6:	4812      	ldr	r0, [pc, #72]	; (8001220 <disarm+0xbc>)
 80011d8:	f006 feae 	bl	8007f38 <HAL_GPIO_WritePin>

  LED_Color_Data[7][0] = 255;
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <disarm+0xc0>)
 80011de:	22ff      	movs	r2, #255	; 0xff
 80011e0:	655a      	str	r2, [r3, #84]	; 0x54
  LED_Color_Data[7][1] = 0;
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <disarm+0xc0>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	659a      	str	r2, [r3, #88]	; 0x58
  LED_Color_Data[7][2] = 0;
 80011e8:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <disarm+0xc0>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	65da      	str	r2, [r3, #92]	; 0x5c
  setLEDs();
 80011ee:	f7ff fbd3 	bl	8000998 <setLEDs>

  strcpy(state,"DISARMED");
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	490c      	ldr	r1, [pc, #48]	; (8001228 <disarm+0xc4>)
 80011f6:	461a      	mov	r2, r3
 80011f8:	460b      	mov	r3, r1
 80011fa:	cb03      	ldmia	r3!, {r0, r1}
 80011fc:	6010      	str	r0, [r2, #0]
 80011fe:	6051      	str	r1, [r2, #4]
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	7213      	strb	r3, [r2, #8]
  return 0;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	58020000 	.word	0x58020000
 8001214:	58020400 	.word	0x58020400
 8001218:	58021400 	.word	0x58021400
 800121c:	58021800 	.word	0x58021800
 8001220:	58021000 	.word	0x58021000
 8001224:	24000a4c 	.word	0x24000a4c
 8001228:	0801782c 	.word	0x0801782c

0800122c <arm>:

int arm(char* state)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 1);
 8001234:	2201      	movs	r2, #1
 8001236:	2102      	movs	r1, #2
 8001238:	480e      	ldr	r0, [pc, #56]	; (8001274 <arm+0x48>)
 800123a:	f006 fe7d 	bl	8007f38 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 1);
 800123e:	2201      	movs	r2, #1
 8001240:	2104      	movs	r1, #4
 8001242:	480c      	ldr	r0, [pc, #48]	; (8001274 <arm+0x48>)
 8001244:	f006 fe78 	bl	8007f38 <HAL_GPIO_WritePin>


  strcpy(state,"ARMED");
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a0b      	ldr	r2, [pc, #44]	; (8001278 <arm+0x4c>)
 800124c:	6810      	ldr	r0, [r2, #0]
 800124e:	6018      	str	r0, [r3, #0]
 8001250:	8892      	ldrh	r2, [r2, #4]
 8001252:	809a      	strh	r2, [r3, #4]
  LED_Color_Data[7][0] = 0;
 8001254:	4b09      	ldr	r3, [pc, #36]	; (800127c <arm+0x50>)
 8001256:	2200      	movs	r2, #0
 8001258:	655a      	str	r2, [r3, #84]	; 0x54
  LED_Color_Data[7][1] = 255;
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <arm+0x50>)
 800125c:	22ff      	movs	r2, #255	; 0xff
 800125e:	659a      	str	r2, [r3, #88]	; 0x58
  LED_Color_Data[7][2] = 0;
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <arm+0x50>)
 8001262:	2200      	movs	r2, #0
 8001264:	65da      	str	r2, [r3, #92]	; 0x5c
  setLEDs();
 8001266:	f7ff fb97 	bl	8000998 <setLEDs>
  return 0;
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	58020000 	.word	0x58020000
 8001278:	08017838 	.word	0x08017838
 800127c:	24000a4c 	.word	0x24000a4c

08001280 <recv_packet>:

int recv_packet(char* LoRA_data, int max_length)
{
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  int packet_length = LoRA_parsePacket();
 800128a:	f7ff ff01 	bl	8001090 <LoRA_parsePacket>
 800128e:	60b8      	str	r0, [r7, #8]
  if(max_length-1 < packet_length) //-1 for the null terminator
 8001290:	683a      	ldr	r2, [r7, #0]
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	429a      	cmp	r2, r3
 8001296:	dc01      	bgt.n	800129c <recv_packet+0x1c>
  {
    return 0;
 8001298:	2300      	movs	r3, #0
 800129a:	e01c      	b.n	80012d6 <recv_packet+0x56>
  }
  if(packet_length){
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d018      	beq.n	80012d4 <recv_packet+0x54>
    for(int i = 0; i < packet_length; i++){
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	e00a      	b.n	80012be <recv_packet+0x3e>
      LoRA_data[i] = LoRA_Read_Register(0x00);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	18d4      	adds	r4, r2, r3
 80012ae:	2000      	movs	r0, #0
 80012b0:	f7ff fd2a 	bl	8000d08 <LoRA_Read_Register>
 80012b4:	4603      	mov	r3, r0
 80012b6:	7023      	strb	r3, [r4, #0]
    for(int i = 0; i < packet_length; i++){
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	3301      	adds	r3, #1
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	dbf0      	blt.n	80012a8 <recv_packet+0x28>
    }
    LoRA_data[packet_length] = '\0';
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	4413      	add	r3, r2
 80012cc:	2200      	movs	r2, #0
 80012ce:	701a      	strb	r2, [r3, #0]
    return packet_length;
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	e000      	b.n	80012d6 <recv_packet+0x56>
  }
  else{
    return 0;
 80012d4:	2300      	movs	r3, #0
  }
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3714      	adds	r7, #20
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd90      	pop	{r4, r7, pc}

080012de <reliable_send_packet>:

void reliable_send_packet(char* LoRA_data)
{
 80012de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012e2:	b087      	sub	sp, #28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	466b      	mov	r3, sp
 80012ea:	461e      	mov	r6, r3
  uint16_t length = strlen(LoRA_data)+1; //+1 for the \0
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff f819 	bl	8000324 <strlen>
 80012f2:	4603      	mov	r3, r0
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	3301      	adds	r3, #1
 80012f8:	82fb      	strh	r3, [r7, #22]
  char acknowledge[length]; 
 80012fa:	8af9      	ldrh	r1, [r7, #22]
 80012fc:	460b      	mov	r3, r1
 80012fe:	3b01      	subs	r3, #1
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	b28b      	uxth	r3, r1
 8001304:	2200      	movs	r2, #0
 8001306:	4698      	mov	r8, r3
 8001308:	4691      	mov	r9, r2
 800130a:	f04f 0200 	mov.w	r2, #0
 800130e:	f04f 0300 	mov.w	r3, #0
 8001312:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001316:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800131a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800131e:	b28b      	uxth	r3, r1
 8001320:	2200      	movs	r2, #0
 8001322:	461c      	mov	r4, r3
 8001324:	4615      	mov	r5, r2
 8001326:	f04f 0200 	mov.w	r2, #0
 800132a:	f04f 0300 	mov.w	r3, #0
 800132e:	00eb      	lsls	r3, r5, #3
 8001330:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001334:	00e2      	lsls	r2, r4, #3
 8001336:	460b      	mov	r3, r1
 8001338:	3307      	adds	r3, #7
 800133a:	08db      	lsrs	r3, r3, #3
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	ebad 0d03 	sub.w	sp, sp, r3
 8001342:	466b      	mov	r3, sp
 8001344:	3300      	adds	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
  LoRA_sendPacket(LoRA_data);
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff fee0 	bl	800110e <LoRA_sendPacket>
  while(1)
  {
    
    if(recv_packet(acknowledge, length))
 800134e:	8afb      	ldrh	r3, [r7, #22]
 8001350:	4619      	mov	r1, r3
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	f7ff ff94 	bl	8001280 <recv_packet>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0f7      	beq.n	800134e <reliable_send_packet+0x70>
    {
      //cehck crc
      if(strcmp(acknowledge, LoRA_data) != 0)
 800135e:	6879      	ldr	r1, [r7, #4]
 8001360:	68f8      	ldr	r0, [r7, #12]
 8001362:	f7fe ffd5 	bl	8000310 <strcmp>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <reliable_send_packet+0x96>
      {
        LoRA_sendPacket(LoRA_data);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff fece 	bl	800110e <LoRA_sendPacket>
    if(recv_packet(acknowledge, length))
 8001372:	e7ec      	b.n	800134e <reliable_send_packet+0x70>
      }
      else
      {
        break;
 8001374:	bf00      	nop
 8001376:	46b5      	mov	sp, r6
      }
    }

    //delay
  }
}
 8001378:	bf00      	nop
 800137a:	371c      	adds	r7, #28
 800137c:	46bd      	mov	sp, r7
 800137e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08001384 <pyro_continuity_check>:

void pyro_continuity_check()
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b09c      	sub	sp, #112	; 0x70
 8001388:	af00      	add	r7, sp, #0
	uint8_t CONTS[8];
	CONTS[0] = HAL_GPIO_ReadPin(CONT1_GPIO_Port, CONT1_Pin);
 800138a:	2104      	movs	r1, #4
 800138c:	4831      	ldr	r0, [pc, #196]	; (8001454 <pyro_continuity_check+0xd0>)
 800138e:	f006 fdbb 	bl	8007f08 <HAL_GPIO_ReadPin>
 8001392:	4603      	mov	r3, r0
 8001394:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	CONTS[1] = HAL_GPIO_ReadPin(CONT2_GPIO_Port, CONT2_Pin);
 8001398:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800139c:	482e      	ldr	r0, [pc, #184]	; (8001458 <pyro_continuity_check+0xd4>)
 800139e:	f006 fdb3 	bl	8007f08 <HAL_GPIO_ReadPin>
 80013a2:	4603      	mov	r3, r0
 80013a4:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	CONTS[2] = HAL_GPIO_ReadPin(CONT3_GPIO_Port, CONT3_Pin);
 80013a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013ac:	482a      	ldr	r0, [pc, #168]	; (8001458 <pyro_continuity_check+0xd4>)
 80013ae:	f006 fdab 	bl	8007f08 <HAL_GPIO_ReadPin>
 80013b2:	4603      	mov	r3, r0
 80013b4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	CONTS[3] = HAL_GPIO_ReadPin(CONT4_GPIO_Port, CONT4_Pin);
 80013b8:	2101      	movs	r1, #1
 80013ba:	4828      	ldr	r0, [pc, #160]	; (800145c <pyro_continuity_check+0xd8>)
 80013bc:	f006 fda4 	bl	8007f08 <HAL_GPIO_ReadPin>
 80013c0:	4603      	mov	r3, r0
 80013c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	CONTS[4] = HAL_GPIO_ReadPin(CONT5_GPIO_Port, CONT5_Pin);
 80013c6:	2180      	movs	r1, #128	; 0x80
 80013c8:	4825      	ldr	r0, [pc, #148]	; (8001460 <pyro_continuity_check+0xdc>)
 80013ca:	f006 fd9d 	bl	8007f08 <HAL_GPIO_ReadPin>
 80013ce:	4603      	mov	r3, r0
 80013d0:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
	CONTS[5] = HAL_GPIO_ReadPin(CONT6_GPIO_Port, CONT6_Pin);
 80013d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013d8:	4821      	ldr	r0, [pc, #132]	; (8001460 <pyro_continuity_check+0xdc>)
 80013da:	f006 fd95 	bl	8007f08 <HAL_GPIO_ReadPin>
 80013de:	4603      	mov	r3, r0
 80013e0:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
	CONTS[6] = HAL_GPIO_ReadPin(CONT7_GPIO_Port, CONT7_Pin);
 80013e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013e8:	481d      	ldr	r0, [pc, #116]	; (8001460 <pyro_continuity_check+0xdc>)
 80013ea:	f006 fd8d 	bl	8007f08 <HAL_GPIO_ReadPin>
 80013ee:	4603      	mov	r3, r0
 80013f0:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
	CONTS[7] = HAL_GPIO_ReadPin(CONT8_GPIO_Port, CONT8_Pin);
 80013f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013f8:	4819      	ldr	r0, [pc, #100]	; (8001460 <pyro_continuity_check+0xdc>)
 80013fa:	f006 fd85 	bl	8007f08 <HAL_GPIO_ReadPin>
 80013fe:	4603      	mov	r3, r0
 8001400:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

	char message[100];
	for(int i=0; i<8; i++)
 8001404:	2300      	movs	r3, #0
 8001406:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001408:	e01c      	b.n	8001444 <pyro_continuity_check+0xc0>
	{
		if(CONTS[i])
 800140a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800140e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001410:	4413      	add	r3, r2
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d007      	beq.n	8001428 <pyro_continuity_check+0xa4>
		{
			sprintf( message,  "PYRO %d DOESN'T HAVE CONTINUITY", i+1);
 8001418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800141a:	1c5a      	adds	r2, r3, #1
 800141c:	463b      	mov	r3, r7
 800141e:	4911      	ldr	r1, [pc, #68]	; (8001464 <pyro_continuity_check+0xe0>)
 8001420:	4618      	mov	r0, r3
 8001422:	f015 fd49 	bl	8016eb8 <siprintf>
 8001426:	e006      	b.n	8001436 <pyro_continuity_check+0xb2>
		}
		else
		{
			sprintf( message,  "PYRO %d HAS CONTINUITY", i+1);
 8001428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800142a:	1c5a      	adds	r2, r3, #1
 800142c:	463b      	mov	r3, r7
 800142e:	490e      	ldr	r1, [pc, #56]	; (8001468 <pyro_continuity_check+0xe4>)
 8001430:	4618      	mov	r0, r3
 8001432:	f015 fd41 	bl	8016eb8 <siprintf>
		}

		reliable_send_packet(message);
 8001436:	463b      	mov	r3, r7
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff50 	bl	80012de <reliable_send_packet>
	for(int i=0; i<8; i++)
 800143e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001440:	3301      	adds	r3, #1
 8001442:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001446:	2b07      	cmp	r3, #7
 8001448:	dddf      	ble.n	800140a <pyro_continuity_check+0x86>
	}
}
 800144a:	bf00      	nop
 800144c:	bf00      	nop
 800144e:	3770      	adds	r7, #112	; 0x70
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	58020400 	.word	0x58020400
 8001458:	58021400 	.word	0x58021400
 800145c:	58021800 	.word	0x58021800
 8001460:	58021000 	.word	0x58021000
 8001464:	08017840 	.word	0x08017840
 8001468:	08017860 	.word	0x08017860
 800146c:	00000000 	.word	0x00000000

08001470 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001470:	b5b0      	push	{r4, r5, r7, lr}
 8001472:	f5ad 6d89 	sub.w	sp, sp, #1096	; 0x448
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 8001478:	4bd5      	ldr	r3, [pc, #852]	; (80017d0 <main+0x360>)
 800147a:	f507 7475 	add.w	r4, r7, #980	; 0x3d4
 800147e:	461d      	mov	r5, r3
 8001480:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001482:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001484:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001488:	c403      	stmia	r4!, {r0, r1}
 800148a:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800148c:	f002 fa10 	bl	80038b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001490:	f000 fae0 	bl	8001a54 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001494:	f000 fb5a 	bl	8001b4c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001498:	f001 f8be 	bl	8002618 <MX_GPIO_Init>
  MX_DMA_Init();
 800149c:	f001 f85c 	bl	8002558 <MX_DMA_Init>
  MX_SPI3_Init();
 80014a0:	f000 fdda 	bl	8002058 <MX_SPI3_Init>
  MX_FDCAN3_Init();
 80014a4:	f000 fc6a 	bl	8001d7c <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 80014a8:	f001 f80a 	bl	80024c0 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80014ac:	f000 fb80 	bl	8001bb0 <MX_ADC1_Init>
  MX_TIM4_Init();
 80014b0:	f000 fee4 	bl	800227c <MX_TIM4_Init>
  MX_ADC3_Init();
 80014b4:	f000 fbf4 	bl	8001ca0 <MX_ADC3_Init>
  MX_SPI2_Init();
 80014b8:	f000 fd78 	bl	8001fac <MX_SPI2_Init>
  MX_I2C2_Init();
 80014bc:	f000 fcc2 	bl	8001e44 <MX_I2C2_Init>
  MX_TIM2_Init();
 80014c0:	f000 fe20 	bl	8002104 <MX_TIM2_Init>
  MX_TIM5_Init();
 80014c4:	f000 ff56 	bl	8002374 <MX_TIM5_Init>
  MX_TIM3_Init();
 80014c8:	f000 fe74 	bl	80021b4 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 80014cc:	f014 ffe0 	bl	8016490 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 80014d0:	f000 fd16 	bl	8001f00 <MX_SPI1_Init>
  MX_UART4_Init();
 80014d4:	f000 ffa8 	bl	8002428 <MX_UART4_Init>
  MX_FATFS_Init();
 80014d8:	f012 fd6e 	bl	8013fb8 <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 80014dc:	f000 fcf2 	bl	8001ec4 <MX_SDMMC2_SD_Init>
  /* USER CODE BEGIN 2 */

	const int MAX = 50;
 80014e0:	2332      	movs	r3, #50	; 0x32
 80014e2:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
	const double SPEED = 2.0/2000;
 80014e6:	a3b8      	add	r3, pc, #736	; (adr r3, 80017c8 <main+0x358>)
 80014e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ec:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 80014f0:	e9c1 2300 	strd	r2, r3, [r1]
	const double r_offset = 0;
 80014f4:	f04f 0200 	mov.w	r2, #0
 80014f8:	f04f 0300 	mov.w	r3, #0
 80014fc:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 8001500:	e9c1 2300 	strd	r2, r3, [r1]
	const double g_offset = 1;
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	4bb2      	ldr	r3, [pc, #712]	; (80017d4 <main+0x364>)
 800150a:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 800150e:	e9c1 2300 	strd	r2, r3, [r1]
	const double b_offset = 2;
 8001512:	f04f 0200 	mov.w	r2, #0
 8001516:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800151a:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 800151e:	e9c1 2300 	strd	r2, r3, [r1]

	LG2_Write_Register(0x10, 0b00111100); //Accelerometer setup - CTRL1_XL
 8001522:	213c      	movs	r1, #60	; 0x3c
 8001524:	2010      	movs	r0, #16
 8001526:	f7ff f92d 	bl	8000784 <LG2_Write_Register>
	LG2_Write_Register(0x11, 0b00110000); //Gyroscope setup - CTRL2_G
 800152a:	2130      	movs	r1, #48	; 0x30
 800152c:	2011      	movs	r0, #17
 800152e:	f7ff f929 	bl	8000784 <LG2_Write_Register>
	LG2_Write_Register(0x13, 0b00000100); //disables I2C - CTRL4_C
 8001532:	2104      	movs	r1, #4
 8001534:	2013      	movs	r0, #19
 8001536:	f7ff f925 	bl	8000784 <LG2_Write_Register>

	HAL_Delay(3000);
 800153a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800153e:	f002 fa49 	bl	80039d4 <HAL_Delay>
	HG2_Write_Register(0x1C, 0b10111111);
 8001542:	21bf      	movs	r1, #191	; 0xbf
 8001544:	201c      	movs	r0, #28
 8001546:	f7ff f8c9 	bl	80006dc <HG2_Write_Register>
	HAL_Delay(2);
 800154a:	2002      	movs	r0, #2
 800154c:	f002 fa42 	bl	80039d4 <HAL_Delay>

	HG2_Write_Register(0x1B, 0b01011000);
 8001550:	2158      	movs	r1, #88	; 0x58
 8001552:	201b      	movs	r0, #27
 8001554:	f7ff f8c2 	bl	80006dc <HG2_Write_Register>
	HG2_Write_Register(0x1B, 0b11011000);
 8001558:	21d8      	movs	r1, #216	; 0xd8
 800155a:	201b      	movs	r0, #27
 800155c:	f7ff f8be 	bl	80006dc <HG2_Write_Register>

	float rotZ = 0;
 8001560:	f04f 0300 	mov.w	r3, #0
 8001564:	f207 4204 	addw	r2, r7, #1028	; 0x404
 8001568:	6013      	str	r3, [r2, #0]
	uint32_t lastTime = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444

	float calOmegaX = 0;
 8001570:	f04f 0300 	mov.w	r3, #0
 8001574:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8001578:	6013      	str	r3, [r2, #0]
	float calOmegaY = 0;
 800157a:	f04f 0300 	mov.w	r3, #0
 800157e:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 8001582:	6013      	str	r3, [r2, #0]
	float calOmegaZ = 0;
 8001584:	f04f 0300 	mov.w	r3, #0
 8001588:	f507 6287 	add.w	r2, r7, #1080	; 0x438
 800158c:	6013      	str	r3, [r2, #0]
	//HAL_Delay(2000);
	for(int i = 0; i < 500; i++){
 800158e:	2300      	movs	r3, #0
 8001590:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 8001594:	e02e      	b.n	80015f4 <main+0x184>
		calOmegaX += LG2_Get_Gyro_X();
 8001596:	f7ff f91d 	bl	80007d4 <LG2_Get_Gyro_X>
 800159a:	eeb0 7a40 	vmov.f32	s14, s0
 800159e:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80015a2:	edd3 7a00 	vldr	s15, [r3]
 80015a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015aa:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80015ae:	edc3 7a00 	vstr	s15, [r3]
		calOmegaY += LG2_Get_Gyro_Y();
 80015b2:	f7ff f93f 	bl	8000834 <LG2_Get_Gyro_Y>
 80015b6:	eeb0 7a40 	vmov.f32	s14, s0
 80015ba:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80015be:	edd3 7a00 	vldr	s15, [r3]
 80015c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015c6:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80015ca:	edc3 7a00 	vstr	s15, [r3]
		calOmegaZ += LG2_Get_Gyro_Z();
 80015ce:	f7ff f963 	bl	8000898 <LG2_Get_Gyro_Z>
 80015d2:	eeb0 7a40 	vmov.f32	s14, s0
 80015d6:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80015da:	edd3 7a00 	vldr	s15, [r3]
 80015de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015e2:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80015e6:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < 500; i++){
 80015ea:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80015ee:	3301      	adds	r3, #1
 80015f0:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 80015f4:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80015f8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015fc:	dbcb      	blt.n	8001596 <main+0x126>

		//HAL_Delay(20);
	}
	calOmegaX /= 500;
 80015fe:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8001602:	ed93 7a00 	vldr	s14, [r3]
 8001606:	eddf 6a74 	vldr	s13, [pc, #464]	; 80017d8 <main+0x368>
 800160a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800160e:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8001612:	edc3 7a00 	vstr	s15, [r3]
	calOmegaY /= 500;
 8001616:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800161a:	ed93 7a00 	vldr	s14, [r3]
 800161e:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80017d8 <main+0x368>
 8001622:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001626:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800162a:	edc3 7a00 	vstr	s15, [r3]
	calOmegaZ /= 500;
 800162e:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001632:	ed93 7a00 	vldr	s14, [r3]
 8001636:	eddf 6a68 	vldr	s13, [pc, #416]	; 80017d8 <main+0x368>
 800163a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800163e:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001642:	edc3 7a00 	vstr	s15, [r3]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001646:	2201      	movs	r2, #1
 8001648:	2101      	movs	r1, #1
 800164a:	4864      	ldr	r0, [pc, #400]	; (80017dc <main+0x36c>)
 800164c:	f006 fc74 	bl	8007f38 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001650:	20c8      	movs	r0, #200	; 0xc8
 8001652:	f002 f9bf 	bl	80039d4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);
 8001656:	2200      	movs	r2, #0
 8001658:	2101      	movs	r1, #1
 800165a:	4860      	ldr	r0, [pc, #384]	; (80017dc <main+0x36c>)
 800165c:	f006 fc6c 	bl	8007f38 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001660:	20c8      	movs	r0, #200	; 0xc8
 8001662:	f002 f9b7 	bl	80039d4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001666:	2201      	movs	r2, #1
 8001668:	2101      	movs	r1, #1
 800166a:	485c      	ldr	r0, [pc, #368]	; (80017dc <main+0x36c>)
 800166c:	f006 fc64 	bl	8007f38 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001670:	20c8      	movs	r0, #200	; 0xc8
 8001672:	f002 f9af 	bl	80039d4 <HAL_Delay>


	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 8001676:	2201      	movs	r2, #1
 8001678:	2104      	movs	r1, #4
 800167a:	4859      	ldr	r0, [pc, #356]	; (80017e0 <main+0x370>)
 800167c:	f006 fc5c 	bl	8007f38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 8001680:	2201      	movs	r2, #1
 8001682:	2108      	movs	r1, #8
 8001684:	4856      	ldr	r0, [pc, #344]	; (80017e0 <main+0x370>)
 8001686:	f006 fc57 	bl	8007f38 <HAL_GPIO_WritePin>


    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800168a:	2100      	movs	r1, #0
 800168c:	4855      	ldr	r0, [pc, #340]	; (80017e4 <main+0x374>)
 800168e:	f00d fea1 	bl	800f3d4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001692:	2104      	movs	r1, #4
 8001694:	4853      	ldr	r0, [pc, #332]	; (80017e4 <main+0x374>)
 8001696:	f00d fe9d 	bl	800f3d4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800169a:	2108      	movs	r1, #8
 800169c:	4851      	ldr	r0, [pc, #324]	; (80017e4 <main+0x374>)
 800169e:	f00d fe99 	bl	800f3d4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80016a2:	210c      	movs	r1, #12
 80016a4:	484f      	ldr	r0, [pc, #316]	; (80017e4 <main+0x374>)
 80016a6:	f00d fe95 	bl	800f3d4 <HAL_TIM_PWM_Start>

    setServo(1, 90);
 80016aa:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 80017e8 <main+0x378>
 80016ae:	2001      	movs	r0, #1
 80016b0:	f7ff f92a 	bl	8000908 <setServo>
    setServo(2, 180);
 80016b4:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80017ec <main+0x37c>
 80016b8:	2002      	movs	r0, #2
 80016ba:	f7ff f925 	bl	8000908 <setServo>
    setServo(3, 0);
 80016be:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 80017f0 <main+0x380>
 80016c2:	2003      	movs	r0, #3
 80016c4:	f7ff f920 	bl	8000908 <setServo>
    setServo(4, 45);
 80016c8:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 80017f4 <main+0x384>
 80016cc:	2004      	movs	r0, #4
 80016ce:	f7ff f91b 	bl	8000908 <setServo>

    LoRA_begin(868000000);
 80016d2:	4849      	ldr	r0, [pc, #292]	; (80017f8 <main+0x388>)
 80016d4:	f7ff fc32 	bl	8000f3c <LoRA_begin>
//    		}
//    	}
//    	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);


	int connected = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
	long last_packet = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
	int ARMED = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//HAL_ADC_Start_DMA(&hadc3, &read_Data, 1);

  char state[50] = "DISARMED";
 80016ea:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80016ee:	f5a3 7443 	sub.w	r4, r3, #780	; 0x30c
 80016f2:	4a42      	ldr	r2, [pc, #264]	; (80017fc <main+0x38c>)
 80016f4:	4623      	mov	r3, r4
 80016f6:	6810      	ldr	r0, [r2, #0]
 80016f8:	6851      	ldr	r1, [r2, #4]
 80016fa:	c303      	stmia	r3!, {r0, r1}
 80016fc:	7a12      	ldrb	r2, [r2, #8]
 80016fe:	701a      	strb	r2, [r3, #0]
 8001700:	f104 0309 	add.w	r3, r4, #9
 8001704:	2229      	movs	r2, #41	; 0x29
 8001706:	2100      	movs	r1, #0
 8001708:	4618      	mov	r0, r3
 800170a:	f015 fbf5 	bl	8016ef8 <memset>
  char command[50];
  char acknowledge[50];
  char recieved_packet[50];
  char response_packet[50];
  char sendMessage[50];
  int last = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
  int packetId;
  char communication_state[50] = "RECIEVING";
 8001714:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8001718:	f2a3 4444 	subw	r4, r3, #1092	; 0x444
 800171c:	4a38      	ldr	r2, [pc, #224]	; (8001800 <main+0x390>)
 800171e:	4623      	mov	r3, r4
 8001720:	6810      	ldr	r0, [r2, #0]
 8001722:	6851      	ldr	r1, [r2, #4]
 8001724:	c303      	stmia	r3!, {r0, r1}
 8001726:	8912      	ldrh	r2, [r2, #8]
 8001728:	801a      	strh	r2, [r3, #0]
 800172a:	f104 030a 	add.w	r3, r4, #10
 800172e:	2228      	movs	r2, #40	; 0x28
 8001730:	2100      	movs	r1, #0
 8001732:	4618      	mov	r0, r3
 8001734:	f015 fbe0 	bl	8016ef8 <memset>
  uint32_t previousTime = HAL_GetTick();
 8001738:	f002 f940 	bl	80039bc <HAL_GetTick>
 800173c:	f8c7 0430 	str.w	r0, [r7, #1072]	; 0x430
  disarm(state);
 8001740:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fd0d 	bl	8001164 <disarm>
while (1) {

    if(strcmp(communication_state,"RECIEVING") == 0)
 800174a:	1d3b      	adds	r3, r7, #4
 800174c:	492c      	ldr	r1, [pc, #176]	; (8001800 <main+0x390>)
 800174e:	4618      	mov	r0, r3
 8001750:	f7fe fdde 	bl	8000310 <strcmp>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d158      	bne.n	800180c <main+0x39c>
    {
      if(recv_packet(recieved_packet, 50))
 800175a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800175e:	2132      	movs	r1, #50	; 0x32
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff fd8d 	bl	8001280 <recv_packet>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d018      	beq.n	800179e <main+0x32e>
      {
        //if crc then:
        //send acknowledge
        //{
        strcpy(command, recieved_packet);
 800176c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001774:	4611      	mov	r1, r2
 8001776:	4618      	mov	r0, r3
 8001778:	f015 fbf2 	bl	8016f60 <strcpy>
        LoRA_sendPacket(recieved_packet);
 800177c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff fcc4 	bl	800110e <LoRA_sendPacket>
        strcpy(communication_state,"WAITING FOR PRIVILIGE");
 8001786:	1d3b      	adds	r3, r7, #4
 8001788:	4a1e      	ldr	r2, [pc, #120]	; (8001804 <main+0x394>)
 800178a:	461c      	mov	r4, r3
 800178c:	4615      	mov	r5, r2
 800178e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001790:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001792:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001796:	6020      	str	r0, [r4, #0]
 8001798:	3404      	adds	r4, #4
 800179a:	8021      	strh	r1, [r4, #0]
 800179c:	e11d      	b.n	80019da <main+0x56a>
        //}
      }
      else if(HAL_GetTick()-previousTime > 1000)
 800179e:	f002 f90d 	bl	80039bc <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017ae:	f240 8114 	bls.w	80019da <main+0x56a>
      {
    	previousTime = HAL_GetTick();
 80017b2:	f002 f903 	bl	80039bc <HAL_GetTick>
 80017b6:	f8c7 0430 	str.w	r0, [r7, #1072]	; 0x430
        //give up MASTER
        LoRA_sendPacket("$");
 80017ba:	4813      	ldr	r0, [pc, #76]	; (8001808 <main+0x398>)
 80017bc:	f7ff fca7 	bl	800110e <LoRA_sendPacket>
 80017c0:	e10b      	b.n	80019da <main+0x56a>
 80017c2:	bf00      	nop
 80017c4:	f3af 8000 	nop.w
 80017c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80017cc:	3f50624d 	.word	0x3f50624d
 80017d0:	08017988 	.word	0x08017988
 80017d4:	3ff00000 	.word	0x3ff00000
 80017d8:	43fa0000 	.word	0x43fa0000
 80017dc:	58020c00 	.word	0x58020c00
 80017e0:	58021800 	.word	0x58021800
 80017e4:	24001064 	.word	0x24001064
 80017e8:	42b40000 	.word	0x42b40000
 80017ec:	43340000 	.word	0x43340000
 80017f0:	00000000 	.word	0x00000000
 80017f4:	42340000 	.word	0x42340000
 80017f8:	33bca100 	.word	0x33bca100
 80017fc:	0801782c 	.word	0x0801782c
 8001800:	08017878 	.word	0x08017878
 8001804:	08017884 	.word	0x08017884
 8001808:	0801789c 	.word	0x0801789c
      }
    }
    else if(strcmp(communication_state,"WAITING FOR PRIVILIGE") == 0)
 800180c:	1d3b      	adds	r3, r7, #4
 800180e:	497d      	ldr	r1, [pc, #500]	; (8001a04 <main+0x594>)
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fd7d 	bl	8000310 <strcmp>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d12b      	bne.n	8001874 <main+0x404>
    {
      if(recv_packet(recieved_packet, 50))
 800181c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001820:	2132      	movs	r1, #50	; 0x32
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fd2c 	bl	8001280 <recv_packet>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	f000 80d5 	beq.w	80019da <main+0x56a>
      {
        //if crc then:
        //{
          if(strcmp(recieved_packet, "$") == 0)
 8001830:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001834:	4974      	ldr	r1, [pc, #464]	; (8001a08 <main+0x598>)
 8001836:	4618      	mov	r0, r3
 8001838:	f7fe fd6a 	bl	8000310 <strcmp>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d10a      	bne.n	8001858 <main+0x3e8>
          {

            strcpy(communication_state,"MASTER");
 8001842:	1d3b      	adds	r3, r7, #4
 8001844:	4a71      	ldr	r2, [pc, #452]	; (8001a0c <main+0x59c>)
 8001846:	e892 0003 	ldmia.w	r2, {r0, r1}
 800184a:	6018      	str	r0, [r3, #0]
 800184c:	3304      	adds	r3, #4
 800184e:	8019      	strh	r1, [r3, #0]
 8001850:	3302      	adds	r3, #2
 8001852:	0c0a      	lsrs	r2, r1, #16
 8001854:	701a      	strb	r2, [r3, #0]
 8001856:	e0c0      	b.n	80019da <main+0x56a>
          }
          else
          {
            //send acknowledge again
            strcpy(command, recieved_packet);
 8001858:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800185c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001860:	4611      	mov	r1, r2
 8001862:	4618      	mov	r0, r3
 8001864:	f015 fb7c 	bl	8016f60 <strcpy>
            LoRA_sendPacket(recieved_packet);
 8001868:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fc4e 	bl	800110e <LoRA_sendPacket>
 8001872:	e0b2      	b.n	80019da <main+0x56a>

          }
        //}
      }     
    }
    else if(strcmp(communication_state,"MASTER") == 0)
 8001874:	1d3b      	adds	r3, r7, #4
 8001876:	4965      	ldr	r1, [pc, #404]	; (8001a0c <main+0x59c>)
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe fd49 	bl	8000310 <strcmp>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	f040 80aa 	bne.w	80019da <main+0x56a>
    {
        if(strcmp(state, "DISARMED") == 0)
 8001886:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800188a:	4961      	ldr	r1, [pc, #388]	; (8001a10 <main+0x5a0>)
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fd3f 	bl	8000310 <strcmp>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d131      	bne.n	80018fc <main+0x48c>
        {
        	if(strcmp(command, "ARM") == 0)
 8001898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800189c:	495d      	ldr	r1, [pc, #372]	; (8001a14 <main+0x5a4>)
 800189e:	4618      	mov	r0, r3
 80018a0:	f7fe fd36 	bl	8000310 <strcmp>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d10f      	bne.n	80018ca <main+0x45a>
        	{
        		if(!arm(state))
 80018aa:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fcbc 	bl	800122c <arm>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d103      	bne.n	80018c2 <main+0x452>
        		{
        			reliable_send_packet("ARM SUCCESS");
 80018ba:	4857      	ldr	r0, [pc, #348]	; (8001a18 <main+0x5a8>)
 80018bc:	f7ff fd0f 	bl	80012de <reliable_send_packet>
 80018c0:	e086      	b.n	80019d0 <main+0x560>
        		}
        		else
        		{
        			reliable_send_packet("ARM UNSUCCESSFUL");
 80018c2:	4856      	ldr	r0, [pc, #344]	; (8001a1c <main+0x5ac>)
 80018c4:	f7ff fd0b 	bl	80012de <reliable_send_packet>
 80018c8:	e082      	b.n	80019d0 <main+0x560>
        		}
        	}
        	else if(strcmp(command, "DISARM") == 0)
 80018ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80018ce:	4954      	ldr	r1, [pc, #336]	; (8001a20 <main+0x5b0>)
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fd1d 	bl	8000310 <strcmp>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d103      	bne.n	80018e4 <main+0x474>
        	{
        		reliable_send_packet("ALREADY DISARMED");
 80018dc:	4851      	ldr	r0, [pc, #324]	; (8001a24 <main+0x5b4>)
 80018de:	f7ff fcfe 	bl	80012de <reliable_send_packet>
 80018e2:	e075      	b.n	80019d0 <main+0x560>
        	}
        	else if(strcmp(command, "CONT") == 0)
 80018e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80018e8:	494f      	ldr	r1, [pc, #316]	; (8001a28 <main+0x5b8>)
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fd10 	bl	8000310 <strcmp>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d16c      	bne.n	80019d0 <main+0x560>
        	{
        		pyro_continuity_check();
 80018f6:	f7ff fd45 	bl	8001384 <pyro_continuity_check>
 80018fa:	e069      	b.n	80019d0 <main+0x560>
        	}
        }
        else if(strcmp(state, "ARMED") == 0)
 80018fc:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8001900:	494a      	ldr	r1, [pc, #296]	; (8001a2c <main+0x5bc>)
 8001902:	4618      	mov	r0, r3
 8001904:	f7fe fd04 	bl	8000310 <strcmp>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d137      	bne.n	800197e <main+0x50e>
        {
          if(strcmp(command, "DISARM") == 0)
 800190e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001912:	4943      	ldr	r1, [pc, #268]	; (8001a20 <main+0x5b0>)
 8001914:	4618      	mov	r0, r3
 8001916:	f7fe fcfb 	bl	8000310 <strcmp>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d10f      	bne.n	8001940 <main+0x4d0>
          {
            if(!disarm(state))
 8001920:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fc1d 	bl	8001164 <disarm>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d103      	bne.n	8001938 <main+0x4c8>
            {
            	reliable_send_packet("DISARM SUCCESS");
 8001930:	483f      	ldr	r0, [pc, #252]	; (8001a30 <main+0x5c0>)
 8001932:	f7ff fcd4 	bl	80012de <reliable_send_packet>
 8001936:	e04b      	b.n	80019d0 <main+0x560>
            }
            else
            {
            	reliable_send_packet("DISARM UNSUCCESSFUL");
 8001938:	483e      	ldr	r0, [pc, #248]	; (8001a34 <main+0x5c4>)
 800193a:	f7ff fcd0 	bl	80012de <reliable_send_packet>
 800193e:	e047      	b.n	80019d0 <main+0x560>
            }
          }
          else if(strcmp(command, "CONT") == 0)
 8001940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001944:	4938      	ldr	r1, [pc, #224]	; (8001a28 <main+0x5b8>)
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe fce2 	bl	8000310 <strcmp>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d102      	bne.n	8001958 <main+0x4e8>
          {
        	  pyro_continuity_check();
 8001952:	f7ff fd17 	bl	8001384 <pyro_continuity_check>
 8001956:	e03b      	b.n	80019d0 <main+0x560>
          }
          else if(strcmp(command, "STATIC_FIRE") == 0)
 8001958:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800195c:	4936      	ldr	r1, [pc, #216]	; (8001a38 <main+0x5c8>)
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fcd6 	bl	8000310 <strcmp>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d132      	bne.n	80019d0 <main+0x560>
          {
        	  strcpy(state,"STATIC_FIRE_LOGGING");
 800196a:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800196e:	4a33      	ldr	r2, [pc, #204]	; (8001a3c <main+0x5cc>)
 8001970:	461c      	mov	r4, r3
 8001972:	4615      	mov	r5, r2
 8001974:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001976:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001978:	682b      	ldr	r3, [r5, #0]
 800197a:	6023      	str	r3, [r4, #0]
 800197c:	e028      	b.n	80019d0 <main+0x560>
          }
        }
        else if(strcmp(state, "STATIC_FIRE_LOGGING") == 0)
 800197e:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8001982:	492e      	ldr	r1, [pc, #184]	; (8001a3c <main+0x5cc>)
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fcc3 	bl	8000310 <strcmp>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d114      	bne.n	80019ba <main+0x54a>
        {
          if(strcmp(command, "STOP") == 0)
 8001990:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001994:	492a      	ldr	r1, [pc, #168]	; (8001a40 <main+0x5d0>)
 8001996:	4618      	mov	r0, r3
 8001998:	f7fe fcba 	bl	8000310 <strcmp>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d107      	bne.n	80019b2 <main+0x542>
          {
            strcpy(state,"ARMED");
 80019a2:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80019a6:	4a21      	ldr	r2, [pc, #132]	; (8001a2c <main+0x5bc>)
 80019a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019ac:	6018      	str	r0, [r3, #0]
 80019ae:	3304      	adds	r3, #4
 80019b0:	8019      	strh	r1, [r3, #0]
          }
          LoRA_sendPacket("Fake data: 21231, 99999");
 80019b2:	4824      	ldr	r0, [pc, #144]	; (8001a44 <main+0x5d4>)
 80019b4:	f7ff fbab 	bl	800110e <LoRA_sendPacket>
 80019b8:	e00a      	b.n	80019d0 <main+0x560>
        }
        else
        {
        	LoRA_sendPacket(state);
 80019ba:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff fba5 	bl	800110e <LoRA_sendPacket>
        	HAL_Delay(10);
 80019c4:	200a      	movs	r0, #10
 80019c6:	f002 f805 	bl	80039d4 <HAL_Delay>
        	reliable_send_packet("PANIC! FLIGHT COMPUTER IS NOT IN ANY VALID STATE.");
 80019ca:	481f      	ldr	r0, [pc, #124]	; (8001a48 <main+0x5d8>)
 80019cc:	f7ff fc87 	bl	80012de <reliable_send_packet>
        }

      strcpy(communication_state,"RECIEVING");
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	4a1e      	ldr	r2, [pc, #120]	; (8001a4c <main+0x5dc>)
 80019d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80019d6:	c303      	stmia	r3!, {r0, r1}
 80019d8:	801a      	strh	r2, [r3, #0]
//			LED_Color_Data[i][0] = (uint32_t)MAX*triangle_space(color_offset+r_offset);
//			LED_Color_Data[i][1] = (uint32_t)MAX*triangle_space(color_offset+g_offset);
//			LED_Color_Data[i][2] = (uint32_t)MAX*triangle_space(color_offset+b_offset);
//		}

		float timeElapsed = ((float)(HAL_GetTick() - lastTime)) / 1000;
 80019da:	f001 ffef 	bl	80039bc <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	ee07 3a90 	vmov	s15, r3
 80019ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019ee:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001a50 <main+0x5e0>
 80019f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019f6:	edc7 7afc 	vstr	s15, [r7, #1008]	; 0x3f0

		//float GyroX = LG2_Get_Gyro_X() - calOmegaX;
		//float GyroY = LG2_Get_Gyro_Y() - calOmegaY;
		//float GyroZ = LG2_Get_Gyro_Z() - calOmegaZ;

		lastTime = HAL_GetTick();
 80019fa:	f001 ffdf 	bl	80039bc <HAL_GetTick>
 80019fe:	f8c7 0444 	str.w	r0, [r7, #1092]	; 0x444
while (1) {
 8001a02:	e6a2      	b.n	800174a <main+0x2da>
 8001a04:	08017884 	.word	0x08017884
 8001a08:	0801789c 	.word	0x0801789c
 8001a0c:	080178a0 	.word	0x080178a0
 8001a10:	0801782c 	.word	0x0801782c
 8001a14:	080178a8 	.word	0x080178a8
 8001a18:	080178ac 	.word	0x080178ac
 8001a1c:	080178b8 	.word	0x080178b8
 8001a20:	080178cc 	.word	0x080178cc
 8001a24:	080178d4 	.word	0x080178d4
 8001a28:	080178e8 	.word	0x080178e8
 8001a2c:	08017838 	.word	0x08017838
 8001a30:	080178f0 	.word	0x080178f0
 8001a34:	08017900 	.word	0x08017900
 8001a38:	08017914 	.word	0x08017914
 8001a3c:	08017920 	.word	0x08017920
 8001a40:	08017934 	.word	0x08017934
 8001a44:	0801793c 	.word	0x0801793c
 8001a48:	08017954 	.word	0x08017954
 8001a4c:	08017878 	.word	0x08017878
 8001a50:	447a0000 	.word	0x447a0000

08001a54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b09c      	sub	sp, #112	; 0x70
 8001a58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a5e:	224c      	movs	r2, #76	; 0x4c
 8001a60:	2100      	movs	r1, #0
 8001a62:	4618      	mov	r0, r3
 8001a64:	f015 fa48 	bl	8016ef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a68:	1d3b      	adds	r3, r7, #4
 8001a6a:	2220      	movs	r2, #32
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f015 fa42 	bl	8016ef8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001a74:	2002      	movs	r0, #2
 8001a76:	f007 fe59 	bl	800972c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	603b      	str	r3, [r7, #0]
 8001a7e:	4b32      	ldr	r3, [pc, #200]	; (8001b48 <SystemClock_Config+0xf4>)
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a86:	4a30      	ldr	r2, [pc, #192]	; (8001b48 <SystemClock_Config+0xf4>)
 8001a88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a8c:	6193      	str	r3, [r2, #24]
 8001a8e:	4b2e      	ldr	r3, [pc, #184]	; (8001b48 <SystemClock_Config+0xf4>)
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a96:	603b      	str	r3, [r7, #0]
 8001a98:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001a9a:	bf00      	nop
 8001a9c:	4b2a      	ldr	r3, [pc, #168]	; (8001b48 <SystemClock_Config+0xf4>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001aa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001aa8:	d1f8      	bne.n	8001a9c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8001aaa:	2323      	movs	r3, #35	; 0x23
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001aae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001ab8:	2340      	movs	r3, #64	; 0x40
 8001aba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001abc:	2301      	movs	r3, #1
 8001abe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ac8:	2304      	movs	r3, #4
 8001aca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001acc:	230c      	movs	r3, #12
 8001ace:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8001ad4:	230c      	movs	r3, #12
 8001ad6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001adc:	230c      	movs	r3, #12
 8001ade:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aec:	4618      	mov	r0, r3
 8001aee:	f007 fe67 	bl	80097c0 <HAL_RCC_OscConfig>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001af8:	f000 ff02 	bl	8002900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001afc:	233f      	movs	r3, #63	; 0x3f
 8001afe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b00:	2303      	movs	r3, #3
 8001b02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001b04:	2300      	movs	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001b08:	2308      	movs	r3, #8
 8001b0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001b0c:	2340      	movs	r3, #64	; 0x40
 8001b0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001b10:	2340      	movs	r3, #64	; 0x40
 8001b12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001b14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b18:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001b1a:	2340      	movs	r3, #64	; 0x40
 8001b1c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b1e:	1d3b      	adds	r3, r7, #4
 8001b20:	2101      	movs	r1, #1
 8001b22:	4618      	mov	r0, r3
 8001b24:	f008 fa26 	bl	8009f74 <HAL_RCC_ClockConfig>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8001b2e:	f000 fee7 	bl	8002900 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001b32:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001b36:	2100      	movs	r1, #0
 8001b38:	2000      	movs	r0, #0
 8001b3a:	f008 fbd1 	bl	800a2e0 <HAL_RCC_MCOConfig>
}
 8001b3e:	bf00      	nop
 8001b40:	3770      	adds	r7, #112	; 0x70
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	58024800 	.word	0x58024800

08001b4c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b0ae      	sub	sp, #184	; 0xb8
 8001b50:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b52:	463b      	mov	r3, r7
 8001b54:	22b8      	movs	r2, #184	; 0xb8
 8001b56:	2100      	movs	r1, #0
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f015 f9cd 	bl	8016ef8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 8001b5e:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8001b62:	f04f 0300 	mov.w	r3, #0
 8001b66:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001b6a:	2304      	movs	r3, #4
 8001b6c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001b6e:	230c      	movs	r3, #12
 8001b70:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001b72:	2304      	movs	r3, #4
 8001b74:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001b76:	2302      	movs	r3, #2
 8001b78:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001b7e:	23c0      	movs	r3, #192	; 0xc0
 8001b80:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001b82:	2300      	movs	r3, #0
 8001b84:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001b8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b8e:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b96:	463b      	mov	r3, r7
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f008 fde1 	bl	800a760 <HAL_RCCEx_PeriphCLKConfig>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8001ba4:	f000 feac 	bl	8002900 <Error_Handler>
  }
}
 8001ba8:	bf00      	nop
 8001baa:	37b8      	adds	r7, #184	; 0xb8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08c      	sub	sp, #48	; 0x30
 8001bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001bc2:	463b      	mov	r3, r7
 8001bc4:	2224      	movs	r2, #36	; 0x24
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f015 f995 	bl	8016ef8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001bce:	4b31      	ldr	r3, [pc, #196]	; (8001c94 <MX_ADC1_Init+0xe4>)
 8001bd0:	4a31      	ldr	r2, [pc, #196]	; (8001c98 <MX_ADC1_Init+0xe8>)
 8001bd2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001bd4:	4b2f      	ldr	r3, [pc, #188]	; (8001c94 <MX_ADC1_Init+0xe4>)
 8001bd6:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001bda:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001bdc:	4b2d      	ldr	r3, [pc, #180]	; (8001c94 <MX_ADC1_Init+0xe4>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001be2:	4b2c      	ldr	r3, [pc, #176]	; (8001c94 <MX_ADC1_Init+0xe4>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001be8:	4b2a      	ldr	r3, [pc, #168]	; (8001c94 <MX_ADC1_Init+0xe4>)
 8001bea:	2204      	movs	r2, #4
 8001bec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001bee:	4b29      	ldr	r3, [pc, #164]	; (8001c94 <MX_ADC1_Init+0xe4>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001bf4:	4b27      	ldr	r3, [pc, #156]	; (8001c94 <MX_ADC1_Init+0xe4>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001bfa:	4b26      	ldr	r3, [pc, #152]	; (8001c94 <MX_ADC1_Init+0xe4>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c00:	4b24      	ldr	r3, [pc, #144]	; (8001c94 <MX_ADC1_Init+0xe4>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c08:	4b22      	ldr	r3, [pc, #136]	; (8001c94 <MX_ADC1_Init+0xe4>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c0e:	4b21      	ldr	r3, [pc, #132]	; (8001c94 <MX_ADC1_Init+0xe4>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001c14:	4b1f      	ldr	r3, [pc, #124]	; (8001c94 <MX_ADC1_Init+0xe4>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c1a:	4b1e      	ldr	r3, [pc, #120]	; (8001c94 <MX_ADC1_Init+0xe4>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001c20:	4b1c      	ldr	r3, [pc, #112]	; (8001c94 <MX_ADC1_Init+0xe4>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001c26:	4b1b      	ldr	r3, [pc, #108]	; (8001c94 <MX_ADC1_Init+0xe4>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c2e:	4819      	ldr	r0, [pc, #100]	; (8001c94 <MX_ADC1_Init+0xe4>)
 8001c30:	f002 f950 	bl	8003ed4 <HAL_ADC_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001c3a:	f000 fe61 	bl	8002900 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c46:	4619      	mov	r1, r3
 8001c48:	4812      	ldr	r0, [pc, #72]	; (8001c94 <MX_ADC1_Init+0xe4>)
 8001c4a:	f003 f98b 	bl	8004f64 <HAL_ADCEx_MultiModeConfigChannel>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001c54:	f000 fe54 	bl	8002900 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001c58:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <MX_ADC1_Init+0xec>)
 8001c5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c5c:	2306      	movs	r3, #6
 8001c5e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8001c60:	2303      	movs	r3, #3
 8001c62:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c64:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001c68:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c6a:	2304      	movs	r3, #4
 8001c6c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c78:	463b      	mov	r3, r7
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4805      	ldr	r0, [pc, #20]	; (8001c94 <MX_ADC1_Init+0xe4>)
 8001c7e:	f002 fb31 	bl	80042e4 <HAL_ADC_ConfigChannel>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001c88:	f000 fe3a 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c8c:	bf00      	nop
 8001c8e:	3730      	adds	r7, #48	; 0x30
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	24000af4 	.word	0x24000af4
 8001c98:	40022000 	.word	0x40022000
 8001c9c:	2a000400 	.word	0x2a000400

08001ca0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08a      	sub	sp, #40	; 0x28
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ca6:	1d3b      	adds	r3, r7, #4
 8001ca8:	2224      	movs	r2, #36	; 0x24
 8001caa:	2100      	movs	r1, #0
 8001cac:	4618      	mov	r0, r3
 8001cae:	f015 f923 	bl	8016ef8 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001cb2:	4b2f      	ldr	r3, [pc, #188]	; (8001d70 <MX_ADC3_Init+0xd0>)
 8001cb4:	4a2f      	ldr	r2, [pc, #188]	; (8001d74 <MX_ADC3_Init+0xd4>)
 8001cb6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001cb8:	4b2d      	ldr	r3, [pc, #180]	; (8001d70 <MX_ADC3_Init+0xd0>)
 8001cba:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001cbe:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001cc0:	4b2b      	ldr	r3, [pc, #172]	; (8001d70 <MX_ADC3_Init+0xd0>)
 8001cc2:	2208      	movs	r2, #8
 8001cc4:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001cc6:	4b2a      	ldr	r3, [pc, #168]	; (8001d70 <MX_ADC3_Init+0xd0>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ccc:	4b28      	ldr	r3, [pc, #160]	; (8001d70 <MX_ADC3_Init+0xd0>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cd2:	4b27      	ldr	r3, [pc, #156]	; (8001d70 <MX_ADC3_Init+0xd0>)
 8001cd4:	2204      	movs	r2, #4
 8001cd6:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001cd8:	4b25      	ldr	r3, [pc, #148]	; (8001d70 <MX_ADC3_Init+0xd0>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001cde:	4b24      	ldr	r3, [pc, #144]	; (8001d70 <MX_ADC3_Init+0xd0>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001ce4:	4b22      	ldr	r3, [pc, #136]	; (8001d70 <MX_ADC3_Init+0xd0>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001cea:	4b21      	ldr	r3, [pc, #132]	; (8001d70 <MX_ADC3_Init+0xd0>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cf2:	4b1f      	ldr	r3, [pc, #124]	; (8001d70 <MX_ADC3_Init+0xd0>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cf8:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <MX_ADC3_Init+0xd0>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001cfe:	4b1c      	ldr	r3, [pc, #112]	; (8001d70 <MX_ADC3_Init+0xd0>)
 8001d00:	2201      	movs	r2, #1
 8001d02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001d06:	4b1a      	ldr	r3, [pc, #104]	; (8001d70 <MX_ADC3_Init+0xd0>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001d0c:	4b18      	ldr	r3, [pc, #96]	; (8001d70 <MX_ADC3_Init+0xd0>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d12:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <MX_ADC3_Init+0xd0>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001d18:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <MX_ADC3_Init+0xd0>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001d1e:	4b14      	ldr	r3, [pc, #80]	; (8001d70 <MX_ADC3_Init+0xd0>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001d26:	4812      	ldr	r0, [pc, #72]	; (8001d70 <MX_ADC3_Init+0xd0>)
 8001d28:	f002 f8d4 	bl	8003ed4 <HAL_ADC_Init>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001d32:	f000 fde5 	bl	8002900 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001d36:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <MX_ADC3_Init+0xd8>)
 8001d38:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d3a:	2306      	movs	r3, #6
 8001d3c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001d42:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001d46:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001d48:	2304      	movs	r3, #4
 8001d4a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001d50:	2300      	movs	r3, #0
 8001d52:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001d54:	1d3b      	adds	r3, r7, #4
 8001d56:	4619      	mov	r1, r3
 8001d58:	4805      	ldr	r0, [pc, #20]	; (8001d70 <MX_ADC3_Init+0xd0>)
 8001d5a:	f002 fac3 	bl	80042e4 <HAL_ADC_ConfigChannel>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8001d64:	f000 fdcc 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001d68:	bf00      	nop
 8001d6a:	3728      	adds	r7, #40	; 0x28
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	24000b64 	.word	0x24000b64
 8001d74:	58026000 	.word	0x58026000
 8001d78:	04300002 	.word	0x04300002

08001d7c <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001d80:	4b2e      	ldr	r3, [pc, #184]	; (8001e3c <MX_FDCAN3_Init+0xc0>)
 8001d82:	4a2f      	ldr	r2, [pc, #188]	; (8001e40 <MX_FDCAN3_Init+0xc4>)
 8001d84:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001d86:	4b2d      	ldr	r3, [pc, #180]	; (8001e3c <MX_FDCAN3_Init+0xc0>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001d8c:	4b2b      	ldr	r3, [pc, #172]	; (8001e3c <MX_FDCAN3_Init+0xc0>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8001d92:	4b2a      	ldr	r3, [pc, #168]	; (8001e3c <MX_FDCAN3_Init+0xc0>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001d98:	4b28      	ldr	r3, [pc, #160]	; (8001e3c <MX_FDCAN3_Init+0xc0>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001d9e:	4b27      	ldr	r3, [pc, #156]	; (8001e3c <MX_FDCAN3_Init+0xc0>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8001da4:	4b25      	ldr	r3, [pc, #148]	; (8001e3c <MX_FDCAN3_Init+0xc0>)
 8001da6:	2210      	movs	r2, #16
 8001da8:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8001daa:	4b24      	ldr	r3, [pc, #144]	; (8001e3c <MX_FDCAN3_Init+0xc0>)
 8001dac:	2201      	movs	r2, #1
 8001dae:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8001db0:	4b22      	ldr	r3, [pc, #136]	; (8001e3c <MX_FDCAN3_Init+0xc0>)
 8001db2:	2202      	movs	r2, #2
 8001db4:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8001db6:	4b21      	ldr	r3, [pc, #132]	; (8001e3c <MX_FDCAN3_Init+0xc0>)
 8001db8:	2202      	movs	r2, #2
 8001dba:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8001dbc:	4b1f      	ldr	r3, [pc, #124]	; (8001e3c <MX_FDCAN3_Init+0xc0>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8001dc2:	4b1e      	ldr	r3, [pc, #120]	; (8001e3c <MX_FDCAN3_Init+0xc0>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8001dc8:	4b1c      	ldr	r3, [pc, #112]	; (8001e3c <MX_FDCAN3_Init+0xc0>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8001dce:	4b1b      	ldr	r3, [pc, #108]	; (8001e3c <MX_FDCAN3_Init+0xc0>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8001dd4:	4b19      	ldr	r3, [pc, #100]	; (8001e3c <MX_FDCAN3_Init+0xc0>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8001dda:	4b18      	ldr	r3, [pc, #96]	; (8001e3c <MX_FDCAN3_Init+0xc0>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8001de0:	4b16      	ldr	r3, [pc, #88]	; (8001e3c <MX_FDCAN3_Init+0xc0>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8001de6:	4b15      	ldr	r3, [pc, #84]	; (8001e3c <MX_FDCAN3_Init+0xc0>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001dec:	4b13      	ldr	r3, [pc, #76]	; (8001e3c <MX_FDCAN3_Init+0xc0>)
 8001dee:	2204      	movs	r2, #4
 8001df0:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8001df2:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <MX_FDCAN3_Init+0xc0>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001df8:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <MX_FDCAN3_Init+0xc0>)
 8001dfa:	2204      	movs	r2, #4
 8001dfc:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8001dfe:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <MX_FDCAN3_Init+0xc0>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001e04:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <MX_FDCAN3_Init+0xc0>)
 8001e06:	2204      	movs	r2, #4
 8001e08:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8001e0a:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <MX_FDCAN3_Init+0xc0>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8001e10:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <MX_FDCAN3_Init+0xc0>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8001e16:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <MX_FDCAN3_Init+0xc0>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001e1c:	4b07      	ldr	r3, [pc, #28]	; (8001e3c <MX_FDCAN3_Init+0xc0>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001e22:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <MX_FDCAN3_Init+0xc0>)
 8001e24:	2204      	movs	r2, #4
 8001e26:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001e28:	4804      	ldr	r0, [pc, #16]	; (8001e3c <MX_FDCAN3_Init+0xc0>)
 8001e2a:	f005 fb61 	bl	80074f0 <HAL_FDCAN_Init>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8001e34:	f000 fd64 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8001e38:	bf00      	nop
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	24000cc4 	.word	0x24000cc4
 8001e40:	4000d400 	.word	0x4000d400

08001e44 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001e48:	4b1b      	ldr	r3, [pc, #108]	; (8001eb8 <MX_I2C2_Init+0x74>)
 8001e4a:	4a1c      	ldr	r2, [pc, #112]	; (8001ebc <MX_I2C2_Init+0x78>)
 8001e4c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001e4e:	4b1a      	ldr	r3, [pc, #104]	; (8001eb8 <MX_I2C2_Init+0x74>)
 8001e50:	4a1b      	ldr	r2, [pc, #108]	; (8001ec0 <MX_I2C2_Init+0x7c>)
 8001e52:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001e54:	4b18      	ldr	r3, [pc, #96]	; (8001eb8 <MX_I2C2_Init+0x74>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e5a:	4b17      	ldr	r3, [pc, #92]	; (8001eb8 <MX_I2C2_Init+0x74>)
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e60:	4b15      	ldr	r3, [pc, #84]	; (8001eb8 <MX_I2C2_Init+0x74>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001e66:	4b14      	ldr	r3, [pc, #80]	; (8001eb8 <MX_I2C2_Init+0x74>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e6c:	4b12      	ldr	r3, [pc, #72]	; (8001eb8 <MX_I2C2_Init+0x74>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e72:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <MX_I2C2_Init+0x74>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e78:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <MX_I2C2_Init+0x74>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001e7e:	480e      	ldr	r0, [pc, #56]	; (8001eb8 <MX_I2C2_Init+0x74>)
 8001e80:	f006 f874 	bl	8007f6c <HAL_I2C_Init>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001e8a:	f000 fd39 	bl	8002900 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e8e:	2100      	movs	r1, #0
 8001e90:	4809      	ldr	r0, [pc, #36]	; (8001eb8 <MX_I2C2_Init+0x74>)
 8001e92:	f006 f8fb 	bl	800808c <HAL_I2CEx_ConfigAnalogFilter>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001e9c:	f000 fd30 	bl	8002900 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	4805      	ldr	r0, [pc, #20]	; (8001eb8 <MX_I2C2_Init+0x74>)
 8001ea4:	f006 f93d 	bl	8008122 <HAL_I2CEx_ConfigDigitalFilter>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001eae:	f000 fd27 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	24000d64 	.word	0x24000d64
 8001ebc:	40005800 	.word	0x40005800
 8001ec0:	20303e5d 	.word	0x20303e5d

08001ec4 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <MX_SDMMC2_SD_Init+0x34>)
 8001eca:	4a0c      	ldr	r2, [pc, #48]	; (8001efc <MX_SDMMC2_SD_Init+0x38>)
 8001ecc:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001ece:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <MX_SDMMC2_SD_Init+0x34>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001ed4:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <MX_SDMMC2_SD_Init+0x34>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001eda:	4b07      	ldr	r3, [pc, #28]	; (8001ef8 <MX_SDMMC2_SD_Init+0x34>)
 8001edc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ee0:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001ee2:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <MX_SDMMC2_SD_Init+0x34>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 8001ee8:	4b03      	ldr	r3, [pc, #12]	; (8001ef8 <MX_SDMMC2_SD_Init+0x34>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8001eee:	bf00      	nop
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	24000db8 	.word	0x24000db8
 8001efc:	48022400 	.word	0x48022400

08001f00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f04:	4b27      	ldr	r3, [pc, #156]	; (8001fa4 <MX_SPI1_Init+0xa4>)
 8001f06:	4a28      	ldr	r2, [pc, #160]	; (8001fa8 <MX_SPI1_Init+0xa8>)
 8001f08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f0a:	4b26      	ldr	r3, [pc, #152]	; (8001fa4 <MX_SPI1_Init+0xa4>)
 8001f0c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001f10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f12:	4b24      	ldr	r3, [pc, #144]	; (8001fa4 <MX_SPI1_Init+0xa4>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f18:	4b22      	ldr	r3, [pc, #136]	; (8001fa4 <MX_SPI1_Init+0xa4>)
 8001f1a:	2207      	movs	r2, #7
 8001f1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f1e:	4b21      	ldr	r3, [pc, #132]	; (8001fa4 <MX_SPI1_Init+0xa4>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f24:	4b1f      	ldr	r3, [pc, #124]	; (8001fa4 <MX_SPI1_Init+0xa4>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f2a:	4b1e      	ldr	r3, [pc, #120]	; (8001fa4 <MX_SPI1_Init+0xa4>)
 8001f2c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001f32:	4b1c      	ldr	r3, [pc, #112]	; (8001fa4 <MX_SPI1_Init+0xa4>)
 8001f34:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001f38:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f3a:	4b1a      	ldr	r3, [pc, #104]	; (8001fa4 <MX_SPI1_Init+0xa4>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f40:	4b18      	ldr	r3, [pc, #96]	; (8001fa4 <MX_SPI1_Init+0xa4>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f46:	4b17      	ldr	r3, [pc, #92]	; (8001fa4 <MX_SPI1_Init+0xa4>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001f4c:	4b15      	ldr	r3, [pc, #84]	; (8001fa4 <MX_SPI1_Init+0xa4>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f52:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <MX_SPI1_Init+0xa4>)
 8001f54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f58:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001f5a:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <MX_SPI1_Init+0xa4>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001f60:	4b10      	ldr	r3, [pc, #64]	; (8001fa4 <MX_SPI1_Init+0xa4>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f66:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <MX_SPI1_Init+0xa4>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f6c:	4b0d      	ldr	r3, [pc, #52]	; (8001fa4 <MX_SPI1_Init+0xa4>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001f72:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <MX_SPI1_Init+0xa4>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001f78:	4b0a      	ldr	r3, [pc, #40]	; (8001fa4 <MX_SPI1_Init+0xa4>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001f7e:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <MX_SPI1_Init+0xa4>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001f84:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <MX_SPI1_Init+0xa4>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001f8a:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <MX_SPI1_Init+0xa4>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f90:	4804      	ldr	r0, [pc, #16]	; (8001fa4 <MX_SPI1_Init+0xa4>)
 8001f92:	f00c fc2f 	bl	800e7f4 <HAL_SPI_Init>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001f9c:	f000 fcb0 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001fa0:	bf00      	nop
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	24000e34 	.word	0x24000e34
 8001fa8:	40013000 	.word	0x40013000

08001fac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001fb0:	4b27      	ldr	r3, [pc, #156]	; (8002050 <MX_SPI2_Init+0xa4>)
 8001fb2:	4a28      	ldr	r2, [pc, #160]	; (8002054 <MX_SPI2_Init+0xa8>)
 8001fb4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001fb6:	4b26      	ldr	r3, [pc, #152]	; (8002050 <MX_SPI2_Init+0xa4>)
 8001fb8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001fbc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001fbe:	4b24      	ldr	r3, [pc, #144]	; (8002050 <MX_SPI2_Init+0xa4>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fc4:	4b22      	ldr	r3, [pc, #136]	; (8002050 <MX_SPI2_Init+0xa4>)
 8001fc6:	2207      	movs	r2, #7
 8001fc8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fca:	4b21      	ldr	r3, [pc, #132]	; (8002050 <MX_SPI2_Init+0xa4>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fd0:	4b1f      	ldr	r3, [pc, #124]	; (8002050 <MX_SPI2_Init+0xa4>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001fd6:	4b1e      	ldr	r3, [pc, #120]	; (8002050 <MX_SPI2_Init+0xa4>)
 8001fd8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001fdc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001fde:	4b1c      	ldr	r3, [pc, #112]	; (8002050 <MX_SPI2_Init+0xa4>)
 8001fe0:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001fe4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fe6:	4b1a      	ldr	r3, [pc, #104]	; (8002050 <MX_SPI2_Init+0xa4>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fec:	4b18      	ldr	r3, [pc, #96]	; (8002050 <MX_SPI2_Init+0xa4>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ff2:	4b17      	ldr	r3, [pc, #92]	; (8002050 <MX_SPI2_Init+0xa4>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001ff8:	4b15      	ldr	r3, [pc, #84]	; (8002050 <MX_SPI2_Init+0xa4>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ffe:	4b14      	ldr	r3, [pc, #80]	; (8002050 <MX_SPI2_Init+0xa4>)
 8002000:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002004:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002006:	4b12      	ldr	r3, [pc, #72]	; (8002050 <MX_SPI2_Init+0xa4>)
 8002008:	2200      	movs	r2, #0
 800200a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800200c:	4b10      	ldr	r3, [pc, #64]	; (8002050 <MX_SPI2_Init+0xa4>)
 800200e:	2200      	movs	r2, #0
 8002010:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002012:	4b0f      	ldr	r3, [pc, #60]	; (8002050 <MX_SPI2_Init+0xa4>)
 8002014:	2200      	movs	r2, #0
 8002016:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002018:	4b0d      	ldr	r3, [pc, #52]	; (8002050 <MX_SPI2_Init+0xa4>)
 800201a:	2200      	movs	r2, #0
 800201c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800201e:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <MX_SPI2_Init+0xa4>)
 8002020:	2200      	movs	r2, #0
 8002022:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002024:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <MX_SPI2_Init+0xa4>)
 8002026:	2200      	movs	r2, #0
 8002028:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800202a:	4b09      	ldr	r3, [pc, #36]	; (8002050 <MX_SPI2_Init+0xa4>)
 800202c:	2200      	movs	r2, #0
 800202e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002030:	4b07      	ldr	r3, [pc, #28]	; (8002050 <MX_SPI2_Init+0xa4>)
 8002032:	2200      	movs	r2, #0
 8002034:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002036:	4b06      	ldr	r3, [pc, #24]	; (8002050 <MX_SPI2_Init+0xa4>)
 8002038:	2200      	movs	r2, #0
 800203a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800203c:	4804      	ldr	r0, [pc, #16]	; (8002050 <MX_SPI2_Init+0xa4>)
 800203e:	f00c fbd9 	bl	800e7f4 <HAL_SPI_Init>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8002048:	f000 fc5a 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800204c:	bf00      	nop
 800204e:	bd80      	pop	{r7, pc}
 8002050:	24000ebc 	.word	0x24000ebc
 8002054:	40003800 	.word	0x40003800

08002058 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800205c:	4b27      	ldr	r3, [pc, #156]	; (80020fc <MX_SPI3_Init+0xa4>)
 800205e:	4a28      	ldr	r2, [pc, #160]	; (8002100 <MX_SPI3_Init+0xa8>)
 8002060:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002062:	4b26      	ldr	r3, [pc, #152]	; (80020fc <MX_SPI3_Init+0xa4>)
 8002064:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002068:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800206a:	4b24      	ldr	r3, [pc, #144]	; (80020fc <MX_SPI3_Init+0xa4>)
 800206c:	2200      	movs	r2, #0
 800206e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002070:	4b22      	ldr	r3, [pc, #136]	; (80020fc <MX_SPI3_Init+0xa4>)
 8002072:	2207      	movs	r2, #7
 8002074:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002076:	4b21      	ldr	r3, [pc, #132]	; (80020fc <MX_SPI3_Init+0xa4>)
 8002078:	2200      	movs	r2, #0
 800207a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800207c:	4b1f      	ldr	r3, [pc, #124]	; (80020fc <MX_SPI3_Init+0xa4>)
 800207e:	2200      	movs	r2, #0
 8002080:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002082:	4b1e      	ldr	r3, [pc, #120]	; (80020fc <MX_SPI3_Init+0xa4>)
 8002084:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002088:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800208a:	4b1c      	ldr	r3, [pc, #112]	; (80020fc <MX_SPI3_Init+0xa4>)
 800208c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002090:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002092:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <MX_SPI3_Init+0xa4>)
 8002094:	2200      	movs	r2, #0
 8002096:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002098:	4b18      	ldr	r3, [pc, #96]	; (80020fc <MX_SPI3_Init+0xa4>)
 800209a:	2200      	movs	r2, #0
 800209c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800209e:	4b17      	ldr	r3, [pc, #92]	; (80020fc <MX_SPI3_Init+0xa4>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80020a4:	4b15      	ldr	r3, [pc, #84]	; (80020fc <MX_SPI3_Init+0xa4>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80020aa:	4b14      	ldr	r3, [pc, #80]	; (80020fc <MX_SPI3_Init+0xa4>)
 80020ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020b0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80020b2:	4b12      	ldr	r3, [pc, #72]	; (80020fc <MX_SPI3_Init+0xa4>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80020b8:	4b10      	ldr	r3, [pc, #64]	; (80020fc <MX_SPI3_Init+0xa4>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80020be:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <MX_SPI3_Init+0xa4>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80020c4:	4b0d      	ldr	r3, [pc, #52]	; (80020fc <MX_SPI3_Init+0xa4>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80020ca:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <MX_SPI3_Init+0xa4>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80020d0:	4b0a      	ldr	r3, [pc, #40]	; (80020fc <MX_SPI3_Init+0xa4>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80020d6:	4b09      	ldr	r3, [pc, #36]	; (80020fc <MX_SPI3_Init+0xa4>)
 80020d8:	2200      	movs	r2, #0
 80020da:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80020dc:	4b07      	ldr	r3, [pc, #28]	; (80020fc <MX_SPI3_Init+0xa4>)
 80020de:	2200      	movs	r2, #0
 80020e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80020e2:	4b06      	ldr	r3, [pc, #24]	; (80020fc <MX_SPI3_Init+0xa4>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80020e8:	4804      	ldr	r0, [pc, #16]	; (80020fc <MX_SPI3_Init+0xa4>)
 80020ea:	f00c fb83 	bl	800e7f4 <HAL_SPI_Init>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 80020f4:	f000 fc04 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80020f8:	bf00      	nop
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	24000f44 	.word	0x24000f44
 8002100:	40003c00 	.word	0x40003c00

08002104 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08a      	sub	sp, #40	; 0x28
 8002108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800210a:	f107 031c 	add.w	r3, r7, #28
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	605a      	str	r2, [r3, #4]
 8002114:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002116:	463b      	mov	r3, r7
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]
 8002124:	615a      	str	r2, [r3, #20]
 8002126:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002128:	4b21      	ldr	r3, [pc, #132]	; (80021b0 <MX_TIM2_Init+0xac>)
 800212a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800212e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002130:	4b1f      	ldr	r3, [pc, #124]	; (80021b0 <MX_TIM2_Init+0xac>)
 8002132:	2200      	movs	r2, #0
 8002134:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002136:	4b1e      	ldr	r3, [pc, #120]	; (80021b0 <MX_TIM2_Init+0xac>)
 8002138:	2200      	movs	r2, #0
 800213a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 800213c:	4b1c      	ldr	r3, [pc, #112]	; (80021b0 <MX_TIM2_Init+0xac>)
 800213e:	225a      	movs	r2, #90	; 0x5a
 8002140:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002142:	4b1b      	ldr	r3, [pc, #108]	; (80021b0 <MX_TIM2_Init+0xac>)
 8002144:	2200      	movs	r2, #0
 8002146:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002148:	4b19      	ldr	r3, [pc, #100]	; (80021b0 <MX_TIM2_Init+0xac>)
 800214a:	2200      	movs	r2, #0
 800214c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800214e:	4818      	ldr	r0, [pc, #96]	; (80021b0 <MX_TIM2_Init+0xac>)
 8002150:	f00d f8e9 	bl	800f326 <HAL_TIM_PWM_Init>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800215a:	f000 fbd1 	bl	8002900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002162:	2300      	movs	r3, #0
 8002164:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002166:	f107 031c 	add.w	r3, r7, #28
 800216a:	4619      	mov	r1, r3
 800216c:	4810      	ldr	r0, [pc, #64]	; (80021b0 <MX_TIM2_Init+0xac>)
 800216e:	f00e fb6f 	bl	8010850 <HAL_TIMEx_MasterConfigSynchronization>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002178:	f000 fbc2 	bl	8002900 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800217c:	2360      	movs	r3, #96	; 0x60
 800217e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002180:	2300      	movs	r3, #0
 8002182:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002184:	2300      	movs	r3, #0
 8002186:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002188:	2300      	movs	r3, #0
 800218a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800218c:	463b      	mov	r3, r7
 800218e:	2208      	movs	r2, #8
 8002190:	4619      	mov	r1, r3
 8002192:	4807      	ldr	r0, [pc, #28]	; (80021b0 <MX_TIM2_Init+0xac>)
 8002194:	f00d fd8e 	bl	800fcb4 <HAL_TIM_PWM_ConfigChannel>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800219e:	f000 fbaf 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80021a2:	4803      	ldr	r0, [pc, #12]	; (80021b0 <MX_TIM2_Init+0xac>)
 80021a4:	f001 f8a0 	bl	80032e8 <HAL_TIM_MspPostInit>

}
 80021a8:	bf00      	nop
 80021aa:	3728      	adds	r7, #40	; 0x28
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	24000fcc 	.word	0x24000fcc

080021b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08a      	sub	sp, #40	; 0x28
 80021b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021ba:	f107 031c 	add.w	r3, r7, #28
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	605a      	str	r2, [r3, #4]
 80021c4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021c6:	463b      	mov	r3, r7
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	60da      	str	r2, [r3, #12]
 80021d2:	611a      	str	r2, [r3, #16]
 80021d4:	615a      	str	r2, [r3, #20]
 80021d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021d8:	4b26      	ldr	r3, [pc, #152]	; (8002274 <MX_TIM3_Init+0xc0>)
 80021da:	4a27      	ldr	r2, [pc, #156]	; (8002278 <MX_TIM3_Init+0xc4>)
 80021dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80021de:	4b25      	ldr	r3, [pc, #148]	; (8002274 <MX_TIM3_Init+0xc0>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e4:	4b23      	ldr	r3, [pc, #140]	; (8002274 <MX_TIM3_Init+0xc0>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 80021ea:	4b22      	ldr	r3, [pc, #136]	; (8002274 <MX_TIM3_Init+0xc0>)
 80021ec:	225a      	movs	r2, #90	; 0x5a
 80021ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021f0:	4b20      	ldr	r3, [pc, #128]	; (8002274 <MX_TIM3_Init+0xc0>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021f6:	4b1f      	ldr	r3, [pc, #124]	; (8002274 <MX_TIM3_Init+0xc0>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80021fc:	481d      	ldr	r0, [pc, #116]	; (8002274 <MX_TIM3_Init+0xc0>)
 80021fe:	f00d f892 	bl	800f326 <HAL_TIM_PWM_Init>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002208:	f000 fb7a 	bl	8002900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800220c:	2300      	movs	r3, #0
 800220e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002210:	2300      	movs	r3, #0
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002214:	f107 031c 	add.w	r3, r7, #28
 8002218:	4619      	mov	r1, r3
 800221a:	4816      	ldr	r0, [pc, #88]	; (8002274 <MX_TIM3_Init+0xc0>)
 800221c:	f00e fb18 	bl	8010850 <HAL_TIMEx_MasterConfigSynchronization>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002226:	f000 fb6b 	bl	8002900 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800222a:	2360      	movs	r3, #96	; 0x60
 800222c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800222e:	2300      	movs	r3, #0
 8002230:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002232:	2300      	movs	r3, #0
 8002234:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002236:	2300      	movs	r3, #0
 8002238:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800223a:	463b      	mov	r3, r7
 800223c:	2200      	movs	r2, #0
 800223e:	4619      	mov	r1, r3
 8002240:	480c      	ldr	r0, [pc, #48]	; (8002274 <MX_TIM3_Init+0xc0>)
 8002242:	f00d fd37 	bl	800fcb4 <HAL_TIM_PWM_ConfigChannel>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800224c:	f000 fb58 	bl	8002900 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002250:	463b      	mov	r3, r7
 8002252:	2204      	movs	r2, #4
 8002254:	4619      	mov	r1, r3
 8002256:	4807      	ldr	r0, [pc, #28]	; (8002274 <MX_TIM3_Init+0xc0>)
 8002258:	f00d fd2c 	bl	800fcb4 <HAL_TIM_PWM_ConfigChannel>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002262:	f000 fb4d 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002266:	4803      	ldr	r0, [pc, #12]	; (8002274 <MX_TIM3_Init+0xc0>)
 8002268:	f001 f83e 	bl	80032e8 <HAL_TIM_MspPostInit>

}
 800226c:	bf00      	nop
 800226e:	3728      	adds	r7, #40	; 0x28
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	24001018 	.word	0x24001018
 8002278:	40000400 	.word	0x40000400

0800227c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08a      	sub	sp, #40	; 0x28
 8002280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002282:	f107 031c 	add.w	r3, r7, #28
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	605a      	str	r2, [r3, #4]
 800228c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800228e:	463b      	mov	r3, r7
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	60da      	str	r2, [r3, #12]
 800229a:	611a      	str	r2, [r3, #16]
 800229c:	615a      	str	r2, [r3, #20]
 800229e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80022a0:	4b32      	ldr	r3, [pc, #200]	; (800236c <MX_TIM4_Init+0xf0>)
 80022a2:	4a33      	ldr	r2, [pc, #204]	; (8002370 <MX_TIM4_Init+0xf4>)
 80022a4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 28;
 80022a6:	4b31      	ldr	r3, [pc, #196]	; (800236c <MX_TIM4_Init+0xf0>)
 80022a8:	221c      	movs	r2, #28
 80022aa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ac:	4b2f      	ldr	r3, [pc, #188]	; (800236c <MX_TIM4_Init+0xf0>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80022b2:	4b2e      	ldr	r3, [pc, #184]	; (800236c <MX_TIM4_Init+0xf0>)
 80022b4:	f242 720f 	movw	r2, #9999	; 0x270f
 80022b8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ba:	4b2c      	ldr	r3, [pc, #176]	; (800236c <MX_TIM4_Init+0xf0>)
 80022bc:	2200      	movs	r2, #0
 80022be:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022c0:	4b2a      	ldr	r3, [pc, #168]	; (800236c <MX_TIM4_Init+0xf0>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80022c6:	4829      	ldr	r0, [pc, #164]	; (800236c <MX_TIM4_Init+0xf0>)
 80022c8:	f00d f82d 	bl	800f326 <HAL_TIM_PWM_Init>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80022d2:	f000 fb15 	bl	8002900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022d6:	2300      	movs	r3, #0
 80022d8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022da:	2300      	movs	r3, #0
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80022de:	f107 031c 	add.w	r3, r7, #28
 80022e2:	4619      	mov	r1, r3
 80022e4:	4821      	ldr	r0, [pc, #132]	; (800236c <MX_TIM4_Init+0xf0>)
 80022e6:	f00e fab3 	bl	8010850 <HAL_TIMEx_MasterConfigSynchronization>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80022f0:	f000 fb06 	bl	8002900 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022f4:	2360      	movs	r3, #96	; 0x60
 80022f6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022fc:	2300      	movs	r3, #0
 80022fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002300:	2300      	movs	r3, #0
 8002302:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002304:	463b      	mov	r3, r7
 8002306:	2200      	movs	r2, #0
 8002308:	4619      	mov	r1, r3
 800230a:	4818      	ldr	r0, [pc, #96]	; (800236c <MX_TIM4_Init+0xf0>)
 800230c:	f00d fcd2 	bl	800fcb4 <HAL_TIM_PWM_ConfigChannel>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002316:	f000 faf3 	bl	8002900 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800231a:	463b      	mov	r3, r7
 800231c:	2204      	movs	r2, #4
 800231e:	4619      	mov	r1, r3
 8002320:	4812      	ldr	r0, [pc, #72]	; (800236c <MX_TIM4_Init+0xf0>)
 8002322:	f00d fcc7 	bl	800fcb4 <HAL_TIM_PWM_ConfigChannel>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 800232c:	f000 fae8 	bl	8002900 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002330:	463b      	mov	r3, r7
 8002332:	2208      	movs	r2, #8
 8002334:	4619      	mov	r1, r3
 8002336:	480d      	ldr	r0, [pc, #52]	; (800236c <MX_TIM4_Init+0xf0>)
 8002338:	f00d fcbc 	bl	800fcb4 <HAL_TIM_PWM_ConfigChannel>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8002342:	f000 fadd 	bl	8002900 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002346:	463b      	mov	r3, r7
 8002348:	220c      	movs	r2, #12
 800234a:	4619      	mov	r1, r3
 800234c:	4807      	ldr	r0, [pc, #28]	; (800236c <MX_TIM4_Init+0xf0>)
 800234e:	f00d fcb1 	bl	800fcb4 <HAL_TIM_PWM_ConfigChannel>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8002358:	f000 fad2 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800235c:	4803      	ldr	r0, [pc, #12]	; (800236c <MX_TIM4_Init+0xf0>)
 800235e:	f000 ffc3 	bl	80032e8 <HAL_TIM_MspPostInit>

}
 8002362:	bf00      	nop
 8002364:	3728      	adds	r7, #40	; 0x28
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	24001064 	.word	0x24001064
 8002370:	40000800 	.word	0x40000800

08002374 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08a      	sub	sp, #40	; 0x28
 8002378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800237a:	f107 031c 	add.w	r3, r7, #28
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	605a      	str	r2, [r3, #4]
 8002384:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002386:	463b      	mov	r3, r7
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	60da      	str	r2, [r3, #12]
 8002392:	611a      	str	r2, [r3, #16]
 8002394:	615a      	str	r2, [r3, #20]
 8002396:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002398:	4b21      	ldr	r3, [pc, #132]	; (8002420 <MX_TIM5_Init+0xac>)
 800239a:	4a22      	ldr	r2, [pc, #136]	; (8002424 <MX_TIM5_Init+0xb0>)
 800239c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800239e:	4b20      	ldr	r3, [pc, #128]	; (8002420 <MX_TIM5_Init+0xac>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023a4:	4b1e      	ldr	r3, [pc, #120]	; (8002420 <MX_TIM5_Init+0xac>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 80023aa:	4b1d      	ldr	r3, [pc, #116]	; (8002420 <MX_TIM5_Init+0xac>)
 80023ac:	225a      	movs	r2, #90	; 0x5a
 80023ae:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023b0:	4b1b      	ldr	r3, [pc, #108]	; (8002420 <MX_TIM5_Init+0xac>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023b6:	4b1a      	ldr	r3, [pc, #104]	; (8002420 <MX_TIM5_Init+0xac>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80023bc:	4818      	ldr	r0, [pc, #96]	; (8002420 <MX_TIM5_Init+0xac>)
 80023be:	f00c ffb2 	bl	800f326 <HAL_TIM_PWM_Init>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80023c8:	f000 fa9a 	bl	8002900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023cc:	2300      	movs	r3, #0
 80023ce:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023d0:	2300      	movs	r3, #0
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80023d4:	f107 031c 	add.w	r3, r7, #28
 80023d8:	4619      	mov	r1, r3
 80023da:	4811      	ldr	r0, [pc, #68]	; (8002420 <MX_TIM5_Init+0xac>)
 80023dc:	f00e fa38 	bl	8010850 <HAL_TIMEx_MasterConfigSynchronization>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80023e6:	f000 fa8b 	bl	8002900 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023ea:	2360      	movs	r3, #96	; 0x60
 80023ec:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023f2:	2300      	movs	r3, #0
 80023f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023f6:	2300      	movs	r3, #0
 80023f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023fa:	463b      	mov	r3, r7
 80023fc:	220c      	movs	r2, #12
 80023fe:	4619      	mov	r1, r3
 8002400:	4807      	ldr	r0, [pc, #28]	; (8002420 <MX_TIM5_Init+0xac>)
 8002402:	f00d fc57 	bl	800fcb4 <HAL_TIM_PWM_ConfigChannel>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 800240c:	f000 fa78 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002410:	4803      	ldr	r0, [pc, #12]	; (8002420 <MX_TIM5_Init+0xac>)
 8002412:	f000 ff69 	bl	80032e8 <HAL_TIM_MspPostInit>

}
 8002416:	bf00      	nop
 8002418:	3728      	adds	r7, #40	; 0x28
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	240010b0 	.word	0x240010b0
 8002424:	40000c00 	.word	0x40000c00

08002428 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800242c:	4b22      	ldr	r3, [pc, #136]	; (80024b8 <MX_UART4_Init+0x90>)
 800242e:	4a23      	ldr	r2, [pc, #140]	; (80024bc <MX_UART4_Init+0x94>)
 8002430:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002432:	4b21      	ldr	r3, [pc, #132]	; (80024b8 <MX_UART4_Init+0x90>)
 8002434:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002438:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800243a:	4b1f      	ldr	r3, [pc, #124]	; (80024b8 <MX_UART4_Init+0x90>)
 800243c:	2200      	movs	r2, #0
 800243e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002440:	4b1d      	ldr	r3, [pc, #116]	; (80024b8 <MX_UART4_Init+0x90>)
 8002442:	2200      	movs	r2, #0
 8002444:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002446:	4b1c      	ldr	r3, [pc, #112]	; (80024b8 <MX_UART4_Init+0x90>)
 8002448:	2200      	movs	r2, #0
 800244a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800244c:	4b1a      	ldr	r3, [pc, #104]	; (80024b8 <MX_UART4_Init+0x90>)
 800244e:	220c      	movs	r2, #12
 8002450:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002452:	4b19      	ldr	r3, [pc, #100]	; (80024b8 <MX_UART4_Init+0x90>)
 8002454:	2200      	movs	r2, #0
 8002456:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002458:	4b17      	ldr	r3, [pc, #92]	; (80024b8 <MX_UART4_Init+0x90>)
 800245a:	2200      	movs	r2, #0
 800245c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800245e:	4b16      	ldr	r3, [pc, #88]	; (80024b8 <MX_UART4_Init+0x90>)
 8002460:	2200      	movs	r2, #0
 8002462:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002464:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <MX_UART4_Init+0x90>)
 8002466:	2200      	movs	r2, #0
 8002468:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800246a:	4b13      	ldr	r3, [pc, #76]	; (80024b8 <MX_UART4_Init+0x90>)
 800246c:	2200      	movs	r2, #0
 800246e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002470:	4811      	ldr	r0, [pc, #68]	; (80024b8 <MX_UART4_Init+0x90>)
 8002472:	f00e faa7 	bl	80109c4 <HAL_UART_Init>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800247c:	f000 fa40 	bl	8002900 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002480:	2100      	movs	r1, #0
 8002482:	480d      	ldr	r0, [pc, #52]	; (80024b8 <MX_UART4_Init+0x90>)
 8002484:	f00f fbad 	bl	8011be2 <HAL_UARTEx_SetTxFifoThreshold>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800248e:	f000 fa37 	bl	8002900 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002492:	2100      	movs	r1, #0
 8002494:	4808      	ldr	r0, [pc, #32]	; (80024b8 <MX_UART4_Init+0x90>)
 8002496:	f00f fbe2 	bl	8011c5e <HAL_UARTEx_SetRxFifoThreshold>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80024a0:	f000 fa2e 	bl	8002900 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80024a4:	4804      	ldr	r0, [pc, #16]	; (80024b8 <MX_UART4_Init+0x90>)
 80024a6:	f00f fb63 	bl	8011b70 <HAL_UARTEx_DisableFifoMode>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80024b0:	f000 fa26 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80024b4:	bf00      	nop
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	24001354 	.word	0x24001354
 80024bc:	40004c00 	.word	0x40004c00

080024c0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80024c4:	4b22      	ldr	r3, [pc, #136]	; (8002550 <MX_USART6_UART_Init+0x90>)
 80024c6:	4a23      	ldr	r2, [pc, #140]	; (8002554 <MX_USART6_UART_Init+0x94>)
 80024c8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80024ca:	4b21      	ldr	r3, [pc, #132]	; (8002550 <MX_USART6_UART_Init+0x90>)
 80024cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024d0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80024d2:	4b1f      	ldr	r3, [pc, #124]	; (8002550 <MX_USART6_UART_Init+0x90>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80024d8:	4b1d      	ldr	r3, [pc, #116]	; (8002550 <MX_USART6_UART_Init+0x90>)
 80024da:	2200      	movs	r2, #0
 80024dc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80024de:	4b1c      	ldr	r3, [pc, #112]	; (8002550 <MX_USART6_UART_Init+0x90>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80024e4:	4b1a      	ldr	r3, [pc, #104]	; (8002550 <MX_USART6_UART_Init+0x90>)
 80024e6:	220c      	movs	r2, #12
 80024e8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ea:	4b19      	ldr	r3, [pc, #100]	; (8002550 <MX_USART6_UART_Init+0x90>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80024f0:	4b17      	ldr	r3, [pc, #92]	; (8002550 <MX_USART6_UART_Init+0x90>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024f6:	4b16      	ldr	r3, [pc, #88]	; (8002550 <MX_USART6_UART_Init+0x90>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024fc:	4b14      	ldr	r3, [pc, #80]	; (8002550 <MX_USART6_UART_Init+0x90>)
 80024fe:	2200      	movs	r2, #0
 8002500:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002502:	4b13      	ldr	r3, [pc, #76]	; (8002550 <MX_USART6_UART_Init+0x90>)
 8002504:	2200      	movs	r2, #0
 8002506:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002508:	4811      	ldr	r0, [pc, #68]	; (8002550 <MX_USART6_UART_Init+0x90>)
 800250a:	f00e fa5b 	bl	80109c4 <HAL_UART_Init>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002514:	f000 f9f4 	bl	8002900 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002518:	2100      	movs	r1, #0
 800251a:	480d      	ldr	r0, [pc, #52]	; (8002550 <MX_USART6_UART_Init+0x90>)
 800251c:	f00f fb61 	bl	8011be2 <HAL_UARTEx_SetTxFifoThreshold>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8002526:	f000 f9eb 	bl	8002900 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800252a:	2100      	movs	r1, #0
 800252c:	4808      	ldr	r0, [pc, #32]	; (8002550 <MX_USART6_UART_Init+0x90>)
 800252e:	f00f fb96 	bl	8011c5e <HAL_UARTEx_SetRxFifoThreshold>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8002538:	f000 f9e2 	bl	8002900 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 800253c:	4804      	ldr	r0, [pc, #16]	; (8002550 <MX_USART6_UART_Init+0x90>)
 800253e:	f00f fb17 	bl	8011b70 <HAL_UARTEx_DisableFifoMode>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002548:	f000 f9da 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800254c:	bf00      	nop
 800254e:	bd80      	pop	{r7, pc}
 8002550:	240013e8 	.word	0x240013e8
 8002554:	40011400 	.word	0x40011400

08002558 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800255e:	4b2d      	ldr	r3, [pc, #180]	; (8002614 <MX_DMA_Init+0xbc>)
 8002560:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002564:	4a2b      	ldr	r2, [pc, #172]	; (8002614 <MX_DMA_Init+0xbc>)
 8002566:	f043 0301 	orr.w	r3, r3, #1
 800256a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800256e:	4b29      	ldr	r3, [pc, #164]	; (8002614 <MX_DMA_Init+0xbc>)
 8002570:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	607b      	str	r3, [r7, #4]
 800257a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800257c:	4b25      	ldr	r3, [pc, #148]	; (8002614 <MX_DMA_Init+0xbc>)
 800257e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002582:	4a24      	ldr	r2, [pc, #144]	; (8002614 <MX_DMA_Init+0xbc>)
 8002584:	f043 0302 	orr.w	r3, r3, #2
 8002588:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800258c:	4b21      	ldr	r3, [pc, #132]	; (8002614 <MX_DMA_Init+0xbc>)
 800258e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	603b      	str	r3, [r7, #0]
 8002598:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800259a:	2200      	movs	r2, #0
 800259c:	2100      	movs	r1, #0
 800259e:	200b      	movs	r0, #11
 80025a0:	f002 fe9d 	bl	80052de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80025a4:	200b      	movs	r0, #11
 80025a6:	f002 feb4 	bl	8005312 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80025aa:	2200      	movs	r2, #0
 80025ac:	2100      	movs	r1, #0
 80025ae:	200c      	movs	r0, #12
 80025b0:	f002 fe95 	bl	80052de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80025b4:	200c      	movs	r0, #12
 80025b6:	f002 feac 	bl	8005312 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80025ba:	2200      	movs	r2, #0
 80025bc:	2100      	movs	r1, #0
 80025be:	200d      	movs	r0, #13
 80025c0:	f002 fe8d 	bl	80052de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80025c4:	200d      	movs	r0, #13
 80025c6:	f002 fea4 	bl	8005312 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80025ca:	2200      	movs	r2, #0
 80025cc:	2100      	movs	r1, #0
 80025ce:	200e      	movs	r0, #14
 80025d0:	f002 fe85 	bl	80052de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80025d4:	200e      	movs	r0, #14
 80025d6:	f002 fe9c 	bl	8005312 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80025da:	2200      	movs	r2, #0
 80025dc:	2100      	movs	r1, #0
 80025de:	200f      	movs	r0, #15
 80025e0:	f002 fe7d 	bl	80052de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80025e4:	200f      	movs	r0, #15
 80025e6:	f002 fe94 	bl	8005312 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80025ea:	2200      	movs	r2, #0
 80025ec:	2100      	movs	r1, #0
 80025ee:	2010      	movs	r0, #16
 80025f0:	f002 fe75 	bl	80052de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80025f4:	2010      	movs	r0, #16
 80025f6:	f002 fe8c 	bl	8005312 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80025fa:	2200      	movs	r2, #0
 80025fc:	2100      	movs	r1, #0
 80025fe:	2046      	movs	r0, #70	; 0x46
 8002600:	f002 fe6d 	bl	80052de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002604:	2046      	movs	r0, #70	; 0x46
 8002606:	f002 fe84 	bl	8005312 <HAL_NVIC_EnableIRQ>

}
 800260a:	bf00      	nop
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	58024400 	.word	0x58024400

08002618 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b08e      	sub	sp, #56	; 0x38
 800261c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800261e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	605a      	str	r2, [r3, #4]
 8002628:	609a      	str	r2, [r3, #8]
 800262a:	60da      	str	r2, [r3, #12]
 800262c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800262e:	4bac      	ldr	r3, [pc, #688]	; (80028e0 <MX_GPIO_Init+0x2c8>)
 8002630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002634:	4aaa      	ldr	r2, [pc, #680]	; (80028e0 <MX_GPIO_Init+0x2c8>)
 8002636:	f043 0310 	orr.w	r3, r3, #16
 800263a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800263e:	4ba8      	ldr	r3, [pc, #672]	; (80028e0 <MX_GPIO_Init+0x2c8>)
 8002640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002644:	f003 0310 	and.w	r3, r3, #16
 8002648:	623b      	str	r3, [r7, #32]
 800264a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800264c:	4ba4      	ldr	r3, [pc, #656]	; (80028e0 <MX_GPIO_Init+0x2c8>)
 800264e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002652:	4aa3      	ldr	r2, [pc, #652]	; (80028e0 <MX_GPIO_Init+0x2c8>)
 8002654:	f043 0320 	orr.w	r3, r3, #32
 8002658:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800265c:	4ba0      	ldr	r3, [pc, #640]	; (80028e0 <MX_GPIO_Init+0x2c8>)
 800265e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002662:	f003 0320 	and.w	r3, r3, #32
 8002666:	61fb      	str	r3, [r7, #28]
 8002668:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800266a:	4b9d      	ldr	r3, [pc, #628]	; (80028e0 <MX_GPIO_Init+0x2c8>)
 800266c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002670:	4a9b      	ldr	r2, [pc, #620]	; (80028e0 <MX_GPIO_Init+0x2c8>)
 8002672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002676:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800267a:	4b99      	ldr	r3, [pc, #612]	; (80028e0 <MX_GPIO_Init+0x2c8>)
 800267c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002684:	61bb      	str	r3, [r7, #24]
 8002686:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002688:	4b95      	ldr	r3, [pc, #596]	; (80028e0 <MX_GPIO_Init+0x2c8>)
 800268a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800268e:	4a94      	ldr	r2, [pc, #592]	; (80028e0 <MX_GPIO_Init+0x2c8>)
 8002690:	f043 0304 	orr.w	r3, r3, #4
 8002694:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002698:	4b91      	ldr	r3, [pc, #580]	; (80028e0 <MX_GPIO_Init+0x2c8>)
 800269a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800269e:	f003 0304 	and.w	r3, r3, #4
 80026a2:	617b      	str	r3, [r7, #20]
 80026a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a6:	4b8e      	ldr	r3, [pc, #568]	; (80028e0 <MX_GPIO_Init+0x2c8>)
 80026a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ac:	4a8c      	ldr	r2, [pc, #560]	; (80028e0 <MX_GPIO_Init+0x2c8>)
 80026ae:	f043 0301 	orr.w	r3, r3, #1
 80026b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026b6:	4b8a      	ldr	r3, [pc, #552]	; (80028e0 <MX_GPIO_Init+0x2c8>)
 80026b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	613b      	str	r3, [r7, #16]
 80026c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c4:	4b86      	ldr	r3, [pc, #536]	; (80028e0 <MX_GPIO_Init+0x2c8>)
 80026c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ca:	4a85      	ldr	r2, [pc, #532]	; (80028e0 <MX_GPIO_Init+0x2c8>)
 80026cc:	f043 0302 	orr.w	r3, r3, #2
 80026d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026d4:	4b82      	ldr	r3, [pc, #520]	; (80028e0 <MX_GPIO_Init+0x2c8>)
 80026d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80026e2:	4b7f      	ldr	r3, [pc, #508]	; (80028e0 <MX_GPIO_Init+0x2c8>)
 80026e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026e8:	4a7d      	ldr	r2, [pc, #500]	; (80028e0 <MX_GPIO_Init+0x2c8>)
 80026ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026f2:	4b7b      	ldr	r3, [pc, #492]	; (80028e0 <MX_GPIO_Init+0x2c8>)
 80026f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002700:	4b77      	ldr	r3, [pc, #476]	; (80028e0 <MX_GPIO_Init+0x2c8>)
 8002702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002706:	4a76      	ldr	r2, [pc, #472]	; (80028e0 <MX_GPIO_Init+0x2c8>)
 8002708:	f043 0308 	orr.w	r3, r3, #8
 800270c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002710:	4b73      	ldr	r3, [pc, #460]	; (80028e0 <MX_GPIO_Init+0x2c8>)
 8002712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002716:	f003 0308 	and.w	r3, r3, #8
 800271a:	607b      	str	r3, [r7, #4]
 800271c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 800271e:	2200      	movs	r2, #0
 8002720:	f241 5104 	movw	r1, #5380	; 0x1504
 8002724:	486f      	ldr	r0, [pc, #444]	; (80028e4 <MX_GPIO_Init+0x2cc>)
 8002726:	f005 fc07 	bl	8007f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|ARM2_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 800272a:	2200      	movs	r2, #0
 800272c:	f248 0106 	movw	r1, #32774	; 0x8006
 8002730:	486d      	ldr	r0, [pc, #436]	; (80028e8 <MX_GPIO_Init+0x2d0>)
 8002732:	f005 fc01 	bl	8007f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002736:	2200      	movs	r2, #0
 8002738:	2130      	movs	r1, #48	; 0x30
 800273a:	486c      	ldr	r0, [pc, #432]	; (80028ec <MX_GPIO_Init+0x2d4>)
 800273c:	f005 fbfc 	bl	8007f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, GPIO_PIN_RESET);
 8002740:	2200      	movs	r2, #0
 8002742:	2102      	movs	r1, #2
 8002744:	486a      	ldr	r0, [pc, #424]	; (80028f0 <MX_GPIO_Init+0x2d8>)
 8002746:	f005 fbf7 	bl	8007f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 800274a:	2200      	movs	r2, #0
 800274c:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8002750:	4868      	ldr	r0, [pc, #416]	; (80028f4 <MX_GPIO_Init+0x2dc>)
 8002752:	f005 fbf1 	bl	8007f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8002756:	2200      	movs	r2, #0
 8002758:	210e      	movs	r1, #14
 800275a:	4867      	ldr	r0, [pc, #412]	; (80028f8 <MX_GPIO_Init+0x2e0>)
 800275c:	f005 fbec 	bl	8007f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0, GPIO_PIN_RESET);
 8002760:	2200      	movs	r2, #0
 8002762:	f240 3101 	movw	r1, #769	; 0x301
 8002766:	4865      	ldr	r0, [pc, #404]	; (80028fc <MX_GPIO_Init+0x2e4>)
 8002768:	f005 fbe6 	bl	8007f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 800276c:	f241 5304 	movw	r3, #5380	; 0x1504
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002772:	2301      	movs	r3, #1
 8002774:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002776:	2300      	movs	r3, #0
 8002778:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277a:	2300      	movs	r3, #0
 800277c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800277e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002782:	4619      	mov	r1, r3
 8002784:	4857      	ldr	r0, [pc, #348]	; (80028e4 <MX_GPIO_Init+0x2cc>)
 8002786:	f005 fa17 	bl	8007bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin ARM2_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|ARM2_Pin|GPIO_PIN_15;
 800278a:	f248 0306 	movw	r3, #32774	; 0x8006
 800278e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002790:	2301      	movs	r3, #1
 8002792:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002794:	2300      	movs	r3, #0
 8002796:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002798:	2300      	movs	r3, #0
 800279a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800279c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027a0:	4619      	mov	r1, r3
 80027a2:	4851      	ldr	r0, [pc, #324]	; (80028e8 <MX_GPIO_Init+0x2d0>)
 80027a4:	f005 fa08 	bl	8007bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80027a8:	2330      	movs	r3, #48	; 0x30
 80027aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ac:	2301      	movs	r3, #1
 80027ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b4:	2300      	movs	r3, #0
 80027b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027bc:	4619      	mov	r1, r3
 80027be:	484b      	ldr	r0, [pc, #300]	; (80028ec <MX_GPIO_Init+0x2d4>)
 80027c0:	f005 f9fa 	bl	8007bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PYRO1_Pin */
  GPIO_InitStruct.Pin = PYRO1_Pin;
 80027c4:	2302      	movs	r3, #2
 80027c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027c8:	2301      	movs	r3, #1
 80027ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d0:	2300      	movs	r3, #0
 80027d2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PYRO1_GPIO_Port, &GPIO_InitStruct);
 80027d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027d8:	4619      	mov	r1, r3
 80027da:	4845      	ldr	r0, [pc, #276]	; (80028f0 <MX_GPIO_Init+0x2d8>)
 80027dc:	f005 f9ec 	bl	8007bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 80027e0:	2304      	movs	r3, #4
 80027e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027e4:	2300      	movs	r3, #0
 80027e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027e8:	2301      	movs	r3, #1
 80027ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 80027ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027f0:	4619      	mov	r1, r3
 80027f2:	483f      	ldr	r0, [pc, #252]	; (80028f0 <MX_GPIO_Init+0x2d8>)
 80027f4:	f005 f9e0 	bl	8007bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 80027f8:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027fe:	2301      	movs	r3, #1
 8002800:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002802:	2300      	movs	r3, #0
 8002804:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002806:	2300      	movs	r3, #0
 8002808:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800280a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800280e:	4619      	mov	r1, r3
 8002810:	4838      	ldr	r0, [pc, #224]	; (80028f4 <MX_GPIO_Init+0x2dc>)
 8002812:	f005 f9d1 	bl	8007bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 8002816:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800281a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800281c:	2300      	movs	r3, #0
 800281e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002820:	2301      	movs	r3, #1
 8002822:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002828:	4619      	mov	r1, r3
 800282a:	4832      	ldr	r0, [pc, #200]	; (80028f4 <MX_GPIO_Init+0x2dc>)
 800282c:	f005 f9c4 	bl	8007bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 8002830:	2301      	movs	r3, #1
 8002832:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002834:	2300      	movs	r3, #0
 8002836:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002838:	2301      	movs	r3, #1
 800283a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 800283c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002840:	4619      	mov	r1, r3
 8002842:	482d      	ldr	r0, [pc, #180]	; (80028f8 <MX_GPIO_Init+0x2e0>)
 8002844:	f005 f9b8 	bl	8007bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 8002848:	230e      	movs	r3, #14
 800284a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800284c:	2301      	movs	r3, #1
 800284e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002850:	2300      	movs	r3, #0
 8002852:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002854:	2300      	movs	r3, #0
 8002856:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002858:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800285c:	4619      	mov	r1, r3
 800285e:	4826      	ldr	r0, [pc, #152]	; (80028f8 <MX_GPIO_Init+0x2e0>)
 8002860:	f005 f9aa 	bl	8007bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 8002864:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800286a:	2300      	movs	r3, #0
 800286c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800286e:	2301      	movs	r3, #1
 8002870:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002876:	4619      	mov	r1, r3
 8002878:	481a      	ldr	r0, [pc, #104]	; (80028e4 <MX_GPIO_Init+0x2cc>)
 800287a:	f005 f99d 	bl	8007bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0;
 800287e:	f240 3301 	movw	r3, #769	; 0x301
 8002882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002884:	2301      	movs	r3, #1
 8002886:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002888:	2300      	movs	r3, #0
 800288a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288c:	2300      	movs	r3, #0
 800288e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002894:	4619      	mov	r1, r3
 8002896:	4819      	ldr	r0, [pc, #100]	; (80028fc <MX_GPIO_Init+0x2e4>)
 8002898:	f005 f98e 	bl	8007bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 800289c:	2310      	movs	r3, #16
 800289e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028a0:	2300      	movs	r3, #0
 80028a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 80028a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028ac:	4619      	mov	r1, r3
 80028ae:	4812      	ldr	r0, [pc, #72]	; (80028f8 <MX_GPIO_Init+0x2e0>)
 80028b0:	f005 f982 	bl	8007bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80028b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ba:	2302      	movs	r3, #2
 80028bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028be:	2300      	movs	r3, #0
 80028c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c2:	2300      	movs	r3, #0
 80028c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80028c6:	2300      	movs	r3, #0
 80028c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028ce:	4619      	mov	r1, r3
 80028d0:	4805      	ldr	r0, [pc, #20]	; (80028e8 <MX_GPIO_Init+0x2d0>)
 80028d2:	f005 f971 	bl	8007bb8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80028d6:	bf00      	nop
 80028d8:	3738      	adds	r7, #56	; 0x38
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	58024400 	.word	0x58024400
 80028e4:	58021000 	.word	0x58021000
 80028e8:	58020000 	.word	0x58020000
 80028ec:	58020800 	.word	0x58020800
 80028f0:	58020400 	.word	0x58020400
 80028f4:	58021400 	.word	0x58021400
 80028f8:	58021800 	.word	0x58021800
 80028fc:	58020c00 	.word	0x58020c00

08002900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002904:	b672      	cpsid	i
}
 8002906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002908:	e7fe      	b.n	8002908 <Error_Handler+0x8>
	...

0800290c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002912:	4b0a      	ldr	r3, [pc, #40]	; (800293c <HAL_MspInit+0x30>)
 8002914:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002918:	4a08      	ldr	r2, [pc, #32]	; (800293c <HAL_MspInit+0x30>)
 800291a:	f043 0302 	orr.w	r3, r3, #2
 800291e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002922:	4b06      	ldr	r3, [pc, #24]	; (800293c <HAL_MspInit+0x30>)
 8002924:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	607b      	str	r3, [r7, #4]
 800292e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	58024400 	.word	0x58024400

08002940 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b08c      	sub	sp, #48	; 0x30
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002948:	f107 031c 	add.w	r3, r7, #28
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	609a      	str	r2, [r3, #8]
 8002954:	60da      	str	r2, [r3, #12]
 8002956:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a5d      	ldr	r2, [pc, #372]	; (8002ad4 <HAL_ADC_MspInit+0x194>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d159      	bne.n	8002a16 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002962:	4b5d      	ldr	r3, [pc, #372]	; (8002ad8 <HAL_ADC_MspInit+0x198>)
 8002964:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002968:	4a5b      	ldr	r2, [pc, #364]	; (8002ad8 <HAL_ADC_MspInit+0x198>)
 800296a:	f043 0320 	orr.w	r3, r3, #32
 800296e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002972:	4b59      	ldr	r3, [pc, #356]	; (8002ad8 <HAL_ADC_MspInit+0x198>)
 8002974:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002978:	f003 0320 	and.w	r3, r3, #32
 800297c:	61bb      	str	r3, [r7, #24]
 800297e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002980:	4b55      	ldr	r3, [pc, #340]	; (8002ad8 <HAL_ADC_MspInit+0x198>)
 8002982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002986:	4a54      	ldr	r2, [pc, #336]	; (8002ad8 <HAL_ADC_MspInit+0x198>)
 8002988:	f043 0304 	orr.w	r3, r3, #4
 800298c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002990:	4b51      	ldr	r3, [pc, #324]	; (8002ad8 <HAL_ADC_MspInit+0x198>)
 8002992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002996:	f003 0304 	and.w	r3, r3, #4
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = ARM_CHECK_Pin;
 800299e:	2301      	movs	r3, #1
 80029a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029a2:	2303      	movs	r3, #3
 80029a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 80029aa:	f107 031c 	add.w	r3, r7, #28
 80029ae:	4619      	mov	r1, r3
 80029b0:	484a      	ldr	r0, [pc, #296]	; (8002adc <HAL_ADC_MspInit+0x19c>)
 80029b2:	f005 f901 	bl	8007bb8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 80029b6:	4b4a      	ldr	r3, [pc, #296]	; (8002ae0 <HAL_ADC_MspInit+0x1a0>)
 80029b8:	4a4a      	ldr	r2, [pc, #296]	; (8002ae4 <HAL_ADC_MspInit+0x1a4>)
 80029ba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80029bc:	4b48      	ldr	r3, [pc, #288]	; (8002ae0 <HAL_ADC_MspInit+0x1a0>)
 80029be:	2209      	movs	r2, #9
 80029c0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029c2:	4b47      	ldr	r3, [pc, #284]	; (8002ae0 <HAL_ADC_MspInit+0x1a0>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80029c8:	4b45      	ldr	r3, [pc, #276]	; (8002ae0 <HAL_ADC_MspInit+0x1a0>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80029ce:	4b44      	ldr	r3, [pc, #272]	; (8002ae0 <HAL_ADC_MspInit+0x1a0>)
 80029d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029d4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80029d6:	4b42      	ldr	r3, [pc, #264]	; (8002ae0 <HAL_ADC_MspInit+0x1a0>)
 80029d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029dc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80029de:	4b40      	ldr	r3, [pc, #256]	; (8002ae0 <HAL_ADC_MspInit+0x1a0>)
 80029e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029e4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80029e6:	4b3e      	ldr	r3, [pc, #248]	; (8002ae0 <HAL_ADC_MspInit+0x1a0>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80029ec:	4b3c      	ldr	r3, [pc, #240]	; (8002ae0 <HAL_ADC_MspInit+0x1a0>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029f2:	4b3b      	ldr	r3, [pc, #236]	; (8002ae0 <HAL_ADC_MspInit+0x1a0>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80029f8:	4839      	ldr	r0, [pc, #228]	; (8002ae0 <HAL_ADC_MspInit+0x1a0>)
 80029fa:	f002 fca5 	bl	8005348 <HAL_DMA_Init>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002a04:	f7ff ff7c 	bl	8002900 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a35      	ldr	r2, [pc, #212]	; (8002ae0 <HAL_ADC_MspInit+0x1a0>)
 8002a0c:	659a      	str	r2, [r3, #88]	; 0x58
 8002a0e:	4a34      	ldr	r2, [pc, #208]	; (8002ae0 <HAL_ADC_MspInit+0x1a0>)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002a14:	e059      	b.n	8002aca <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a33      	ldr	r2, [pc, #204]	; (8002ae8 <HAL_ADC_MspInit+0x1a8>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d154      	bne.n	8002aca <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002a20:	4b2d      	ldr	r3, [pc, #180]	; (8002ad8 <HAL_ADC_MspInit+0x198>)
 8002a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a26:	4a2c      	ldr	r2, [pc, #176]	; (8002ad8 <HAL_ADC_MspInit+0x198>)
 8002a28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a30:	4b29      	ldr	r3, [pc, #164]	; (8002ad8 <HAL_ADC_MspInit+0x198>)
 8002a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a3a:	613b      	str	r3, [r7, #16]
 8002a3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a3e:	4b26      	ldr	r3, [pc, #152]	; (8002ad8 <HAL_ADC_MspInit+0x198>)
 8002a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a44:	4a24      	ldr	r2, [pc, #144]	; (8002ad8 <HAL_ADC_MspInit+0x198>)
 8002a46:	f043 0304 	orr.w	r3, r3, #4
 8002a4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a4e:	4b22      	ldr	r3, [pc, #136]	; (8002ad8 <HAL_ADC_MspInit+0x198>)
 8002a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002a5c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002a60:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002a64:	f000 ffda 	bl	8003a1c <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8002a68:	4b20      	ldr	r3, [pc, #128]	; (8002aec <HAL_ADC_MspInit+0x1ac>)
 8002a6a:	4a21      	ldr	r2, [pc, #132]	; (8002af0 <HAL_ADC_MspInit+0x1b0>)
 8002a6c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002a6e:	4b1f      	ldr	r3, [pc, #124]	; (8002aec <HAL_ADC_MspInit+0x1ac>)
 8002a70:	2273      	movs	r2, #115	; 0x73
 8002a72:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a74:	4b1d      	ldr	r3, [pc, #116]	; (8002aec <HAL_ADC_MspInit+0x1ac>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a7a:	4b1c      	ldr	r3, [pc, #112]	; (8002aec <HAL_ADC_MspInit+0x1ac>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002a80:	4b1a      	ldr	r3, [pc, #104]	; (8002aec <HAL_ADC_MspInit+0x1ac>)
 8002a82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a86:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a88:	4b18      	ldr	r3, [pc, #96]	; (8002aec <HAL_ADC_MspInit+0x1ac>)
 8002a8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a8e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a90:	4b16      	ldr	r3, [pc, #88]	; (8002aec <HAL_ADC_MspInit+0x1ac>)
 8002a92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a96:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002a98:	4b14      	ldr	r3, [pc, #80]	; (8002aec <HAL_ADC_MspInit+0x1ac>)
 8002a9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a9e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002aa0:	4b12      	ldr	r3, [pc, #72]	; (8002aec <HAL_ADC_MspInit+0x1ac>)
 8002aa2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002aa6:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002aa8:	4b10      	ldr	r3, [pc, #64]	; (8002aec <HAL_ADC_MspInit+0x1ac>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002aae:	480f      	ldr	r0, [pc, #60]	; (8002aec <HAL_ADC_MspInit+0x1ac>)
 8002ab0:	f002 fc4a 	bl	8005348 <HAL_DMA_Init>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 8002aba:	f7ff ff21 	bl	8002900 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a0a      	ldr	r2, [pc, #40]	; (8002aec <HAL_ADC_MspInit+0x1ac>)
 8002ac2:	659a      	str	r2, [r3, #88]	; 0x58
 8002ac4:	4a09      	ldr	r2, [pc, #36]	; (8002aec <HAL_ADC_MspInit+0x1ac>)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002aca:	bf00      	nop
 8002acc:	3730      	adds	r7, #48	; 0x30
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40022000 	.word	0x40022000
 8002ad8:	58024400 	.word	0x58024400
 8002adc:	58020800 	.word	0x58020800
 8002ae0:	24000bd4 	.word	0x24000bd4
 8002ae4:	40020088 	.word	0x40020088
 8002ae8:	58026000 	.word	0x58026000
 8002aec:	24000c4c 	.word	0x24000c4c
 8002af0:	400204b8 	.word	0x400204b8

08002af4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b0b8      	sub	sp, #224	; 0xe0
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	60da      	str	r2, [r3, #12]
 8002b0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b0c:	f107 0310 	add.w	r3, r7, #16
 8002b10:	22b8      	movs	r2, #184	; 0xb8
 8002b12:	2100      	movs	r1, #0
 8002b14:	4618      	mov	r0, r3
 8002b16:	f014 f9ef 	bl	8016ef8 <memset>
  if(hfdcan->Instance==FDCAN3)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a26      	ldr	r2, [pc, #152]	; (8002bb8 <HAL_FDCAN_MspInit+0xc4>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d144      	bne.n	8002bae <HAL_FDCAN_MspInit+0xba>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002b24:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002b28:	f04f 0300 	mov.w	r3, #0
 8002b2c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002b30:	2300      	movs	r3, #0
 8002b32:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b34:	f107 0310 	add.w	r3, r7, #16
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f007 fe11 	bl	800a760 <HAL_RCCEx_PeriphCLKConfig>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <HAL_FDCAN_MspInit+0x54>
    {
      Error_Handler();
 8002b44:	f7ff fedc 	bl	8002900 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002b48:	4b1c      	ldr	r3, [pc, #112]	; (8002bbc <HAL_FDCAN_MspInit+0xc8>)
 8002b4a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002b4e:	4a1b      	ldr	r2, [pc, #108]	; (8002bbc <HAL_FDCAN_MspInit+0xc8>)
 8002b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b54:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002b58:	4b18      	ldr	r3, [pc, #96]	; (8002bbc <HAL_FDCAN_MspInit+0xc8>)
 8002b5a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b66:	4b15      	ldr	r3, [pc, #84]	; (8002bbc <HAL_FDCAN_MspInit+0xc8>)
 8002b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b6c:	4a13      	ldr	r2, [pc, #76]	; (8002bbc <HAL_FDCAN_MspInit+0xc8>)
 8002b6e:	f043 0320 	orr.w	r3, r3, #32
 8002b72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b76:	4b11      	ldr	r3, [pc, #68]	; (8002bbc <HAL_FDCAN_MspInit+0xc8>)
 8002b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b7c:	f003 0320 	and.w	r3, r3, #32
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b84:	23c0      	movs	r3, #192	; 0xc0
 8002b86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b96:	2300      	movs	r3, #0
 8002b98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ba2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4805      	ldr	r0, [pc, #20]	; (8002bc0 <HAL_FDCAN_MspInit+0xcc>)
 8002baa:	f005 f805 	bl	8007bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8002bae:	bf00      	nop
 8002bb0:	37e0      	adds	r7, #224	; 0xe0
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	4000d400 	.word	0x4000d400
 8002bbc:	58024400 	.word	0x58024400
 8002bc0:	58021400 	.word	0x58021400

08002bc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b0b8      	sub	sp, #224	; 0xe0
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bcc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	605a      	str	r2, [r3, #4]
 8002bd6:	609a      	str	r2, [r3, #8]
 8002bd8:	60da      	str	r2, [r3, #12]
 8002bda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bdc:	f107 0310 	add.w	r3, r7, #16
 8002be0:	22b8      	movs	r2, #184	; 0xb8
 8002be2:	2100      	movs	r1, #0
 8002be4:	4618      	mov	r0, r3
 8002be6:	f014 f987 	bl	8016ef8 <memset>
  if(hi2c->Instance==I2C2)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a26      	ldr	r2, [pc, #152]	; (8002c88 <HAL_I2C_MspInit+0xc4>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d145      	bne.n	8002c80 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002bf4:	f04f 0208 	mov.w	r2, #8
 8002bf8:	f04f 0300 	mov.w	r3, #0
 8002bfc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002c00:	2300      	movs	r3, #0
 8002c02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c06:	f107 0310 	add.w	r3, r7, #16
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f007 fda8 	bl	800a760 <HAL_RCCEx_PeriphCLKConfig>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002c16:	f7ff fe73 	bl	8002900 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c1a:	4b1c      	ldr	r3, [pc, #112]	; (8002c8c <HAL_I2C_MspInit+0xc8>)
 8002c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c20:	4a1a      	ldr	r2, [pc, #104]	; (8002c8c <HAL_I2C_MspInit+0xc8>)
 8002c22:	f043 0320 	orr.w	r3, r3, #32
 8002c26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c2a:	4b18      	ldr	r3, [pc, #96]	; (8002c8c <HAL_I2C_MspInit+0xc8>)
 8002c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c30:	f003 0320 	and.w	r3, r3, #32
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c3e:	2312      	movs	r3, #18
 8002c40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002c50:	2304      	movs	r3, #4
 8002c52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c56:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	480c      	ldr	r0, [pc, #48]	; (8002c90 <HAL_I2C_MspInit+0xcc>)
 8002c5e:	f004 ffab 	bl	8007bb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002c62:	4b0a      	ldr	r3, [pc, #40]	; (8002c8c <HAL_I2C_MspInit+0xc8>)
 8002c64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c68:	4a08      	ldr	r2, [pc, #32]	; (8002c8c <HAL_I2C_MspInit+0xc8>)
 8002c6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c6e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c72:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <HAL_I2C_MspInit+0xc8>)
 8002c74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c7c:	60bb      	str	r3, [r7, #8]
 8002c7e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002c80:	bf00      	nop
 8002c82:	37e0      	adds	r7, #224	; 0xe0
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40005800 	.word	0x40005800
 8002c8c:	58024400 	.word	0x58024400
 8002c90:	58021400 	.word	0x58021400

08002c94 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b0ba      	sub	sp, #232	; 0xe8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c9c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	605a      	str	r2, [r3, #4]
 8002ca6:	609a      	str	r2, [r3, #8]
 8002ca8:	60da      	str	r2, [r3, #12]
 8002caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cac:	f107 0318 	add.w	r3, r7, #24
 8002cb0:	22b8      	movs	r2, #184	; 0xb8
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f014 f91f 	bl	8016ef8 <memset>
  if(hsd->Instance==SDMMC2)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a5d      	ldr	r2, [pc, #372]	; (8002e34 <HAL_SD_MspInit+0x1a0>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	f040 80b3 	bne.w	8002e2c <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002cc6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002cca:	f04f 0300 	mov.w	r3, #0
 8002cce:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cd6:	f107 0318 	add.w	r3, r7, #24
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f007 fd40 	bl	800a760 <HAL_RCCEx_PeriphCLKConfig>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8002ce6:	f7ff fe0b 	bl	8002900 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8002cea:	4b53      	ldr	r3, [pc, #332]	; (8002e38 <HAL_SD_MspInit+0x1a4>)
 8002cec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002cf0:	4a51      	ldr	r2, [pc, #324]	; (8002e38 <HAL_SD_MspInit+0x1a4>)
 8002cf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cf6:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002cfa:	4b4f      	ldr	r3, [pc, #316]	; (8002e38 <HAL_SD_MspInit+0x1a4>)
 8002cfc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002d00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d04:	617b      	str	r3, [r7, #20]
 8002d06:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d08:	4b4b      	ldr	r3, [pc, #300]	; (8002e38 <HAL_SD_MspInit+0x1a4>)
 8002d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d0e:	4a4a      	ldr	r2, [pc, #296]	; (8002e38 <HAL_SD_MspInit+0x1a4>)
 8002d10:	f043 0308 	orr.w	r3, r3, #8
 8002d14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d18:	4b47      	ldr	r3, [pc, #284]	; (8002e38 <HAL_SD_MspInit+0x1a4>)
 8002d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d1e:	f003 0308 	and.w	r3, r3, #8
 8002d22:	613b      	str	r3, [r7, #16]
 8002d24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d26:	4b44      	ldr	r3, [pc, #272]	; (8002e38 <HAL_SD_MspInit+0x1a4>)
 8002d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d2c:	4a42      	ldr	r2, [pc, #264]	; (8002e38 <HAL_SD_MspInit+0x1a4>)
 8002d2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d36:	4b40      	ldr	r3, [pc, #256]	; (8002e38 <HAL_SD_MspInit+0x1a4>)
 8002d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d44:	2340      	movs	r3, #64	; 0x40
 8002d46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d50:	2300      	movs	r3, #0
 8002d52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d56:	2303      	movs	r3, #3
 8002d58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002d5c:	230b      	movs	r3, #11
 8002d5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d62:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d66:	4619      	mov	r1, r3
 8002d68:	4834      	ldr	r0, [pc, #208]	; (8002e3c <HAL_SD_MspInit+0x1a8>)
 8002d6a:	f004 ff25 	bl	8007bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002d6e:	2380      	movs	r3, #128	; 0x80
 8002d70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d74:	2302      	movs	r3, #2
 8002d76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d80:	2303      	movs	r3, #3
 8002d82:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002d86:	230b      	movs	r3, #11
 8002d88:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d8c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d90:	4619      	mov	r1, r3
 8002d92:	482a      	ldr	r0, [pc, #168]	; (8002e3c <HAL_SD_MspInit+0x1a8>)
 8002d94:	f004 ff10 	bl	8007bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da0:	2302      	movs	r3, #2
 8002da2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002da6:	2301      	movs	r3, #1
 8002da8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dac:	2303      	movs	r3, #3
 8002dae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002db2:	230b      	movs	r3, #11
 8002db4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002db8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4820      	ldr	r0, [pc, #128]	; (8002e40 <HAL_SD_MspInit+0x1ac>)
 8002dc0:	f004 fefa 	bl	8007bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002dc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dc8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dcc:	2302      	movs	r3, #2
 8002dce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002dde:	230b      	movs	r3, #11
 8002de0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002de4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002de8:	4619      	mov	r1, r3
 8002dea:	4815      	ldr	r0, [pc, #84]	; (8002e40 <HAL_SD_MspInit+0x1ac>)
 8002dec:	f004 fee4 	bl	8007bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002df0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002df4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df8:	2302      	movs	r3, #2
 8002dfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e04:	2303      	movs	r3, #3
 8002e06:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8002e0a:	230a      	movs	r3, #10
 8002e0c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e10:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002e14:	4619      	mov	r1, r3
 8002e16:	480a      	ldr	r0, [pc, #40]	; (8002e40 <HAL_SD_MspInit+0x1ac>)
 8002e18:	f004 fece 	bl	8007bb8 <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	2100      	movs	r1, #0
 8002e20:	207c      	movs	r0, #124	; 0x7c
 8002e22:	f002 fa5c 	bl	80052de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8002e26:	207c      	movs	r0, #124	; 0x7c
 8002e28:	f002 fa73 	bl	8005312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8002e2c:	bf00      	nop
 8002e2e:	37e8      	adds	r7, #232	; 0xe8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	48022400 	.word	0x48022400
 8002e38:	58024400 	.word	0x58024400
 8002e3c:	58020c00 	.word	0x58020c00
 8002e40:	58021800 	.word	0x58021800

08002e44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b08e      	sub	sp, #56	; 0x38
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	605a      	str	r2, [r3, #4]
 8002e56:	609a      	str	r2, [r3, #8]
 8002e58:	60da      	str	r2, [r3, #12]
 8002e5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a4f      	ldr	r2, [pc, #316]	; (8002fa0 <HAL_SPI_MspInit+0x15c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d12e      	bne.n	8002ec4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e66:	4b4f      	ldr	r3, [pc, #316]	; (8002fa4 <HAL_SPI_MspInit+0x160>)
 8002e68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e6c:	4a4d      	ldr	r2, [pc, #308]	; (8002fa4 <HAL_SPI_MspInit+0x160>)
 8002e6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e72:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002e76:	4b4b      	ldr	r3, [pc, #300]	; (8002fa4 <HAL_SPI_MspInit+0x160>)
 8002e78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e80:	623b      	str	r3, [r7, #32]
 8002e82:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e84:	4b47      	ldr	r3, [pc, #284]	; (8002fa4 <HAL_SPI_MspInit+0x160>)
 8002e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e8a:	4a46      	ldr	r2, [pc, #280]	; (8002fa4 <HAL_SPI_MspInit+0x160>)
 8002e8c:	f043 0301 	orr.w	r3, r3, #1
 8002e90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e94:	4b43      	ldr	r3, [pc, #268]	; (8002fa4 <HAL_SPI_MspInit+0x160>)
 8002e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	61fb      	str	r3, [r7, #28]
 8002ea0:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002ea2:	23e0      	movs	r3, #224	; 0xe0
 8002ea4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002eb2:	2305      	movs	r3, #5
 8002eb4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eba:	4619      	mov	r1, r3
 8002ebc:	483a      	ldr	r0, [pc, #232]	; (8002fa8 <HAL_SPI_MspInit+0x164>)
 8002ebe:	f004 fe7b 	bl	8007bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002ec2:	e068      	b.n	8002f96 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a38      	ldr	r2, [pc, #224]	; (8002fac <HAL_SPI_MspInit+0x168>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d12f      	bne.n	8002f2e <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ece:	4b35      	ldr	r3, [pc, #212]	; (8002fa4 <HAL_SPI_MspInit+0x160>)
 8002ed0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ed4:	4a33      	ldr	r2, [pc, #204]	; (8002fa4 <HAL_SPI_MspInit+0x160>)
 8002ed6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eda:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ede:	4b31      	ldr	r3, [pc, #196]	; (8002fa4 <HAL_SPI_MspInit+0x160>)
 8002ee0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ee4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee8:	61bb      	str	r3, [r7, #24]
 8002eea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eec:	4b2d      	ldr	r3, [pc, #180]	; (8002fa4 <HAL_SPI_MspInit+0x160>)
 8002eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ef2:	4a2c      	ldr	r2, [pc, #176]	; (8002fa4 <HAL_SPI_MspInit+0x160>)
 8002ef4:	f043 0302 	orr.w	r3, r3, #2
 8002ef8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002efc:	4b29      	ldr	r3, [pc, #164]	; (8002fa4 <HAL_SPI_MspInit+0x160>)
 8002efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002f0a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002f0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f10:	2302      	movs	r3, #2
 8002f12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f14:	2300      	movs	r3, #0
 8002f16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f1c:	2305      	movs	r3, #5
 8002f1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f24:	4619      	mov	r1, r3
 8002f26:	4822      	ldr	r0, [pc, #136]	; (8002fb0 <HAL_SPI_MspInit+0x16c>)
 8002f28:	f004 fe46 	bl	8007bb8 <HAL_GPIO_Init>
}
 8002f2c:	e033      	b.n	8002f96 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a20      	ldr	r2, [pc, #128]	; (8002fb4 <HAL_SPI_MspInit+0x170>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d12e      	bne.n	8002f96 <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002f38:	4b1a      	ldr	r3, [pc, #104]	; (8002fa4 <HAL_SPI_MspInit+0x160>)
 8002f3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f3e:	4a19      	ldr	r2, [pc, #100]	; (8002fa4 <HAL_SPI_MspInit+0x160>)
 8002f40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f44:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f48:	4b16      	ldr	r3, [pc, #88]	; (8002fa4 <HAL_SPI_MspInit+0x160>)
 8002f4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f52:	613b      	str	r3, [r7, #16]
 8002f54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f56:	4b13      	ldr	r3, [pc, #76]	; (8002fa4 <HAL_SPI_MspInit+0x160>)
 8002f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f5c:	4a11      	ldr	r2, [pc, #68]	; (8002fa4 <HAL_SPI_MspInit+0x160>)
 8002f5e:	f043 0304 	orr.w	r3, r3, #4
 8002f62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f66:	4b0f      	ldr	r3, [pc, #60]	; (8002fa4 <HAL_SPI_MspInit+0x160>)
 8002f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002f74:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002f78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f82:	2300      	movs	r3, #0
 8002f84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002f86:	2306      	movs	r3, #6
 8002f88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f8e:	4619      	mov	r1, r3
 8002f90:	4809      	ldr	r0, [pc, #36]	; (8002fb8 <HAL_SPI_MspInit+0x174>)
 8002f92:	f004 fe11 	bl	8007bb8 <HAL_GPIO_Init>
}
 8002f96:	bf00      	nop
 8002f98:	3738      	adds	r7, #56	; 0x38
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40013000 	.word	0x40013000
 8002fa4:	58024400 	.word	0x58024400
 8002fa8:	58020000 	.word	0x58020000
 8002fac:	40003800 	.word	0x40003800
 8002fb0:	58020400 	.word	0x58020400
 8002fb4:	40003c00 	.word	0x40003c00
 8002fb8:	58020800 	.word	0x58020800

08002fbc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b08c      	sub	sp, #48	; 0x30
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc4:	f107 031c 	add.w	r3, r7, #28
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	605a      	str	r2, [r3, #4]
 8002fce:	609a      	str	r2, [r3, #8]
 8002fd0:	60da      	str	r2, [r3, #12]
 8002fd2:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fdc:	d15d      	bne.n	800309a <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fde:	4b8e      	ldr	r3, [pc, #568]	; (8003218 <HAL_TIM_PWM_MspInit+0x25c>)
 8002fe0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fe4:	4a8c      	ldr	r2, [pc, #560]	; (8003218 <HAL_TIM_PWM_MspInit+0x25c>)
 8002fe6:	f043 0301 	orr.w	r3, r3, #1
 8002fea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002fee:	4b8a      	ldr	r3, [pc, #552]	; (8003218 <HAL_TIM_PWM_MspInit+0x25c>)
 8002ff0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	61bb      	str	r3, [r7, #24]
 8002ffa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ffc:	4b86      	ldr	r3, [pc, #536]	; (8003218 <HAL_TIM_PWM_MspInit+0x25c>)
 8002ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003002:	4a85      	ldr	r2, [pc, #532]	; (8003218 <HAL_TIM_PWM_MspInit+0x25c>)
 8003004:	f043 0301 	orr.w	r3, r3, #1
 8003008:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800300c:	4b82      	ldr	r3, [pc, #520]	; (8003218 <HAL_TIM_PWM_MspInit+0x25c>)
 800300e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	617b      	str	r3, [r7, #20]
 8003018:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800301a:	2301      	movs	r3, #1
 800301c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301e:	2302      	movs	r3, #2
 8003020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003022:	2300      	movs	r3, #0
 8003024:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003026:	2300      	movs	r3, #0
 8003028:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800302a:	2301      	movs	r3, #1
 800302c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800302e:	f107 031c 	add.w	r3, r7, #28
 8003032:	4619      	mov	r1, r3
 8003034:	4879      	ldr	r0, [pc, #484]	; (800321c <HAL_TIM_PWM_MspInit+0x260>)
 8003036:	f004 fdbf 	bl	8007bb8 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 800303a:	4b79      	ldr	r3, [pc, #484]	; (8003220 <HAL_TIM_PWM_MspInit+0x264>)
 800303c:	4a79      	ldr	r2, [pc, #484]	; (8003224 <HAL_TIM_PWM_MspInit+0x268>)
 800303e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 8003040:	4b77      	ldr	r3, [pc, #476]	; (8003220 <HAL_TIM_PWM_MspInit+0x264>)
 8003042:	2214      	movs	r2, #20
 8003044:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003046:	4b76      	ldr	r3, [pc, #472]	; (8003220 <HAL_TIM_PWM_MspInit+0x264>)
 8003048:	2240      	movs	r2, #64	; 0x40
 800304a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800304c:	4b74      	ldr	r3, [pc, #464]	; (8003220 <HAL_TIM_PWM_MspInit+0x264>)
 800304e:	2200      	movs	r2, #0
 8003050:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003052:	4b73      	ldr	r3, [pc, #460]	; (8003220 <HAL_TIM_PWM_MspInit+0x264>)
 8003054:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003058:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800305a:	4b71      	ldr	r3, [pc, #452]	; (8003220 <HAL_TIM_PWM_MspInit+0x264>)
 800305c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003060:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003062:	4b6f      	ldr	r3, [pc, #444]	; (8003220 <HAL_TIM_PWM_MspInit+0x264>)
 8003064:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003068:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 800306a:	4b6d      	ldr	r3, [pc, #436]	; (8003220 <HAL_TIM_PWM_MspInit+0x264>)
 800306c:	2200      	movs	r2, #0
 800306e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003070:	4b6b      	ldr	r3, [pc, #428]	; (8003220 <HAL_TIM_PWM_MspInit+0x264>)
 8003072:	2200      	movs	r2, #0
 8003074:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003076:	4b6a      	ldr	r3, [pc, #424]	; (8003220 <HAL_TIM_PWM_MspInit+0x264>)
 8003078:	2200      	movs	r2, #0
 800307a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 800307c:	4868      	ldr	r0, [pc, #416]	; (8003220 <HAL_TIM_PWM_MspInit+0x264>)
 800307e:	f002 f963 	bl	8005348 <HAL_DMA_Init>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 8003088:	f7ff fc3a 	bl	8002900 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a64      	ldr	r2, [pc, #400]	; (8003220 <HAL_TIM_PWM_MspInit+0x264>)
 8003090:	62da      	str	r2, [r3, #44]	; 0x2c
 8003092:	4a63      	ldr	r2, [pc, #396]	; (8003220 <HAL_TIM_PWM_MspInit+0x264>)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003098:	e119      	b.n	80032ce <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a62      	ldr	r2, [pc, #392]	; (8003228 <HAL_TIM_PWM_MspInit+0x26c>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d16d      	bne.n	8003180 <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030a4:	4b5c      	ldr	r3, [pc, #368]	; (8003218 <HAL_TIM_PWM_MspInit+0x25c>)
 80030a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030aa:	4a5b      	ldr	r2, [pc, #364]	; (8003218 <HAL_TIM_PWM_MspInit+0x25c>)
 80030ac:	f043 0302 	orr.w	r3, r3, #2
 80030b0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80030b4:	4b58      	ldr	r3, [pc, #352]	; (8003218 <HAL_TIM_PWM_MspInit+0x25c>)
 80030b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	613b      	str	r3, [r7, #16]
 80030c0:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 80030c2:	4b5a      	ldr	r3, [pc, #360]	; (800322c <HAL_TIM_PWM_MspInit+0x270>)
 80030c4:	4a5a      	ldr	r2, [pc, #360]	; (8003230 <HAL_TIM_PWM_MspInit+0x274>)
 80030c6:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 80030c8:	4b58      	ldr	r3, [pc, #352]	; (800322c <HAL_TIM_PWM_MspInit+0x270>)
 80030ca:	2218      	movs	r2, #24
 80030cc:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030ce:	4b57      	ldr	r3, [pc, #348]	; (800322c <HAL_TIM_PWM_MspInit+0x270>)
 80030d0:	2240      	movs	r2, #64	; 0x40
 80030d2:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80030d4:	4b55      	ldr	r3, [pc, #340]	; (800322c <HAL_TIM_PWM_MspInit+0x270>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80030da:	4b54      	ldr	r3, [pc, #336]	; (800322c <HAL_TIM_PWM_MspInit+0x270>)
 80030dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030e0:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80030e2:	4b52      	ldr	r3, [pc, #328]	; (800322c <HAL_TIM_PWM_MspInit+0x270>)
 80030e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030e8:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80030ea:	4b50      	ldr	r3, [pc, #320]	; (800322c <HAL_TIM_PWM_MspInit+0x270>)
 80030ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030f0:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 80030f2:	4b4e      	ldr	r3, [pc, #312]	; (800322c <HAL_TIM_PWM_MspInit+0x270>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80030f8:	4b4c      	ldr	r3, [pc, #304]	; (800322c <HAL_TIM_PWM_MspInit+0x270>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030fe:	4b4b      	ldr	r3, [pc, #300]	; (800322c <HAL_TIM_PWM_MspInit+0x270>)
 8003100:	2200      	movs	r2, #0
 8003102:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8003104:	4849      	ldr	r0, [pc, #292]	; (800322c <HAL_TIM_PWM_MspInit+0x270>)
 8003106:	f002 f91f 	bl	8005348 <HAL_DMA_Init>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 8003110:	f7ff fbf6 	bl	8002900 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a45      	ldr	r2, [pc, #276]	; (800322c <HAL_TIM_PWM_MspInit+0x270>)
 8003118:	629a      	str	r2, [r3, #40]	; 0x28
 800311a:	4a44      	ldr	r2, [pc, #272]	; (800322c <HAL_TIM_PWM_MspInit+0x270>)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 8003120:	4b44      	ldr	r3, [pc, #272]	; (8003234 <HAL_TIM_PWM_MspInit+0x278>)
 8003122:	4a45      	ldr	r2, [pc, #276]	; (8003238 <HAL_TIM_PWM_MspInit+0x27c>)
 8003124:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8003126:	4b43      	ldr	r3, [pc, #268]	; (8003234 <HAL_TIM_PWM_MspInit+0x278>)
 8003128:	2217      	movs	r2, #23
 800312a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800312c:	4b41      	ldr	r3, [pc, #260]	; (8003234 <HAL_TIM_PWM_MspInit+0x278>)
 800312e:	2240      	movs	r2, #64	; 0x40
 8003130:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003132:	4b40      	ldr	r3, [pc, #256]	; (8003234 <HAL_TIM_PWM_MspInit+0x278>)
 8003134:	2200      	movs	r2, #0
 8003136:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003138:	4b3e      	ldr	r3, [pc, #248]	; (8003234 <HAL_TIM_PWM_MspInit+0x278>)
 800313a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800313e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003140:	4b3c      	ldr	r3, [pc, #240]	; (8003234 <HAL_TIM_PWM_MspInit+0x278>)
 8003142:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003146:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003148:	4b3a      	ldr	r3, [pc, #232]	; (8003234 <HAL_TIM_PWM_MspInit+0x278>)
 800314a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800314e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8003150:	4b38      	ldr	r3, [pc, #224]	; (8003234 <HAL_TIM_PWM_MspInit+0x278>)
 8003152:	2200      	movs	r2, #0
 8003154:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003156:	4b37      	ldr	r3, [pc, #220]	; (8003234 <HAL_TIM_PWM_MspInit+0x278>)
 8003158:	2200      	movs	r2, #0
 800315a:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800315c:	4b35      	ldr	r3, [pc, #212]	; (8003234 <HAL_TIM_PWM_MspInit+0x278>)
 800315e:	2200      	movs	r2, #0
 8003160:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8003162:	4834      	ldr	r0, [pc, #208]	; (8003234 <HAL_TIM_PWM_MspInit+0x278>)
 8003164:	f002 f8f0 	bl	8005348 <HAL_DMA_Init>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 800316e:	f7ff fbc7 	bl	8002900 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a2f      	ldr	r2, [pc, #188]	; (8003234 <HAL_TIM_PWM_MspInit+0x278>)
 8003176:	625a      	str	r2, [r3, #36]	; 0x24
 8003178:	4a2e      	ldr	r2, [pc, #184]	; (8003234 <HAL_TIM_PWM_MspInit+0x278>)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800317e:	e0a6      	b.n	80032ce <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a2d      	ldr	r2, [pc, #180]	; (800323c <HAL_TIM_PWM_MspInit+0x280>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d15e      	bne.n	8003248 <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800318a:	4b23      	ldr	r3, [pc, #140]	; (8003218 <HAL_TIM_PWM_MspInit+0x25c>)
 800318c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003190:	4a21      	ldr	r2, [pc, #132]	; (8003218 <HAL_TIM_PWM_MspInit+0x25c>)
 8003192:	f043 0304 	orr.w	r3, r3, #4
 8003196:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800319a:	4b1f      	ldr	r3, [pc, #124]	; (8003218 <HAL_TIM_PWM_MspInit+0x25c>)
 800319c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	60fb      	str	r3, [r7, #12]
 80031a6:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 80031a8:	4b25      	ldr	r3, [pc, #148]	; (8003240 <HAL_TIM_PWM_MspInit+0x284>)
 80031aa:	4a26      	ldr	r2, [pc, #152]	; (8003244 <HAL_TIM_PWM_MspInit+0x288>)
 80031ac:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 80031ae:	4b24      	ldr	r3, [pc, #144]	; (8003240 <HAL_TIM_PWM_MspInit+0x284>)
 80031b0:	221f      	movs	r2, #31
 80031b2:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031b4:	4b22      	ldr	r3, [pc, #136]	; (8003240 <HAL_TIM_PWM_MspInit+0x284>)
 80031b6:	2240      	movs	r2, #64	; 0x40
 80031b8:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80031ba:	4b21      	ldr	r3, [pc, #132]	; (8003240 <HAL_TIM_PWM_MspInit+0x284>)
 80031bc:	2200      	movs	r2, #0
 80031be:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80031c0:	4b1f      	ldr	r3, [pc, #124]	; (8003240 <HAL_TIM_PWM_MspInit+0x284>)
 80031c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031c6:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80031c8:	4b1d      	ldr	r3, [pc, #116]	; (8003240 <HAL_TIM_PWM_MspInit+0x284>)
 80031ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031ce:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80031d0:	4b1b      	ldr	r3, [pc, #108]	; (8003240 <HAL_TIM_PWM_MspInit+0x284>)
 80031d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031d6:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 80031d8:	4b19      	ldr	r3, [pc, #100]	; (8003240 <HAL_TIM_PWM_MspInit+0x284>)
 80031da:	2200      	movs	r2, #0
 80031dc:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80031de:	4b18      	ldr	r3, [pc, #96]	; (8003240 <HAL_TIM_PWM_MspInit+0x284>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031e4:	4b16      	ldr	r3, [pc, #88]	; (8003240 <HAL_TIM_PWM_MspInit+0x284>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 80031ea:	4815      	ldr	r0, [pc, #84]	; (8003240 <HAL_TIM_PWM_MspInit+0x284>)
 80031ec:	f002 f8ac 	bl	8005348 <HAL_DMA_Init>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 80031f6:	f7ff fb83 	bl	8002900 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a10      	ldr	r2, [pc, #64]	; (8003240 <HAL_TIM_PWM_MspInit+0x284>)
 80031fe:	62da      	str	r2, [r3, #44]	; 0x2c
 8003200:	4a0f      	ldr	r2, [pc, #60]	; (8003240 <HAL_TIM_PWM_MspInit+0x284>)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003206:	2200      	movs	r2, #0
 8003208:	2100      	movs	r1, #0
 800320a:	201e      	movs	r0, #30
 800320c:	f002 f867 	bl	80052de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003210:	201e      	movs	r0, #30
 8003212:	f002 f87e 	bl	8005312 <HAL_NVIC_EnableIRQ>
}
 8003216:	e05a      	b.n	80032ce <HAL_TIM_PWM_MspInit+0x312>
 8003218:	58024400 	.word	0x58024400
 800321c:	58020000 	.word	0x58020000
 8003220:	240010fc 	.word	0x240010fc
 8003224:	40020028 	.word	0x40020028
 8003228:	40000400 	.word	0x40000400
 800322c:	24001174 	.word	0x24001174
 8003230:	40020058 	.word	0x40020058
 8003234:	240011ec 	.word	0x240011ec
 8003238:	40020070 	.word	0x40020070
 800323c:	40000800 	.word	0x40000800
 8003240:	24001264 	.word	0x24001264
 8003244:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a22      	ldr	r2, [pc, #136]	; (80032d8 <HAL_TIM_PWM_MspInit+0x31c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d13d      	bne.n	80032ce <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003252:	4b22      	ldr	r3, [pc, #136]	; (80032dc <HAL_TIM_PWM_MspInit+0x320>)
 8003254:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003258:	4a20      	ldr	r2, [pc, #128]	; (80032dc <HAL_TIM_PWM_MspInit+0x320>)
 800325a:	f043 0308 	orr.w	r3, r3, #8
 800325e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003262:	4b1e      	ldr	r3, [pc, #120]	; (80032dc <HAL_TIM_PWM_MspInit+0x320>)
 8003264:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003268:	f003 0308 	and.w	r3, r3, #8
 800326c:	60bb      	str	r3, [r7, #8]
 800326e:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 8003270:	4b1b      	ldr	r3, [pc, #108]	; (80032e0 <HAL_TIM_PWM_MspInit+0x324>)
 8003272:	4a1c      	ldr	r2, [pc, #112]	; (80032e4 <HAL_TIM_PWM_MspInit+0x328>)
 8003274:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 8003276:	4b1a      	ldr	r3, [pc, #104]	; (80032e0 <HAL_TIM_PWM_MspInit+0x324>)
 8003278:	223a      	movs	r2, #58	; 0x3a
 800327a:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800327c:	4b18      	ldr	r3, [pc, #96]	; (80032e0 <HAL_TIM_PWM_MspInit+0x324>)
 800327e:	2240      	movs	r2, #64	; 0x40
 8003280:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8003282:	4b17      	ldr	r3, [pc, #92]	; (80032e0 <HAL_TIM_PWM_MspInit+0x324>)
 8003284:	2200      	movs	r2, #0
 8003286:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8003288:	4b15      	ldr	r3, [pc, #84]	; (80032e0 <HAL_TIM_PWM_MspInit+0x324>)
 800328a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800328e:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003290:	4b13      	ldr	r3, [pc, #76]	; (80032e0 <HAL_TIM_PWM_MspInit+0x324>)
 8003292:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003296:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003298:	4b11      	ldr	r3, [pc, #68]	; (80032e0 <HAL_TIM_PWM_MspInit+0x324>)
 800329a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800329e:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 80032a0:	4b0f      	ldr	r3, [pc, #60]	; (80032e0 <HAL_TIM_PWM_MspInit+0x324>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 80032a6:	4b0e      	ldr	r3, [pc, #56]	; (80032e0 <HAL_TIM_PWM_MspInit+0x324>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032ac:	4b0c      	ldr	r3, [pc, #48]	; (80032e0 <HAL_TIM_PWM_MspInit+0x324>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 80032b2:	480b      	ldr	r0, [pc, #44]	; (80032e0 <HAL_TIM_PWM_MspInit+0x324>)
 80032b4:	f002 f848 	bl	8005348 <HAL_DMA_Init>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 80032be:	f7ff fb1f 	bl	8002900 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a06      	ldr	r2, [pc, #24]	; (80032e0 <HAL_TIM_PWM_MspInit+0x324>)
 80032c6:	631a      	str	r2, [r3, #48]	; 0x30
 80032c8:	4a05      	ldr	r2, [pc, #20]	; (80032e0 <HAL_TIM_PWM_MspInit+0x324>)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6393      	str	r3, [r2, #56]	; 0x38
}
 80032ce:	bf00      	nop
 80032d0:	3730      	adds	r7, #48	; 0x30
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40000c00 	.word	0x40000c00
 80032dc:	58024400 	.word	0x58024400
 80032e0:	240012dc 	.word	0x240012dc
 80032e4:	40020040 	.word	0x40020040

080032e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b08c      	sub	sp, #48	; 0x30
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f0:	f107 031c 	add.w	r3, r7, #28
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	605a      	str	r2, [r3, #4]
 80032fa:	609a      	str	r2, [r3, #8]
 80032fc:	60da      	str	r2, [r3, #12]
 80032fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003308:	d120      	bne.n	800334c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800330a:	4b52      	ldr	r3, [pc, #328]	; (8003454 <HAL_TIM_MspPostInit+0x16c>)
 800330c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003310:	4a50      	ldr	r2, [pc, #320]	; (8003454 <HAL_TIM_MspPostInit+0x16c>)
 8003312:	f043 0302 	orr.w	r3, r3, #2
 8003316:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800331a:	4b4e      	ldr	r3, [pc, #312]	; (8003454 <HAL_TIM_MspPostInit+0x16c>)
 800331c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	61bb      	str	r3, [r7, #24]
 8003326:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003328:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800332c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332e:	2302      	movs	r3, #2
 8003330:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003332:	2302      	movs	r3, #2
 8003334:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003336:	2300      	movs	r3, #0
 8003338:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800333a:	2301      	movs	r3, #1
 800333c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800333e:	f107 031c 	add.w	r3, r7, #28
 8003342:	4619      	mov	r1, r3
 8003344:	4844      	ldr	r0, [pc, #272]	; (8003458 <HAL_TIM_MspPostInit+0x170>)
 8003346:	f004 fc37 	bl	8007bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800334a:	e07f      	b.n	800344c <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a42      	ldr	r2, [pc, #264]	; (800345c <HAL_TIM_MspPostInit+0x174>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d11f      	bne.n	8003396 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003356:	4b3f      	ldr	r3, [pc, #252]	; (8003454 <HAL_TIM_MspPostInit+0x16c>)
 8003358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800335c:	4a3d      	ldr	r2, [pc, #244]	; (8003454 <HAL_TIM_MspPostInit+0x16c>)
 800335e:	f043 0302 	orr.w	r3, r3, #2
 8003362:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003366:	4b3b      	ldr	r3, [pc, #236]	; (8003454 <HAL_TIM_MspPostInit+0x16c>)
 8003368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	617b      	str	r3, [r7, #20]
 8003372:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003374:	2330      	movs	r3, #48	; 0x30
 8003376:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003378:	2302      	movs	r3, #2
 800337a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800337c:	2302      	movs	r3, #2
 800337e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003380:	2300      	movs	r3, #0
 8003382:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003384:	2302      	movs	r3, #2
 8003386:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003388:	f107 031c 	add.w	r3, r7, #28
 800338c:	4619      	mov	r1, r3
 800338e:	4832      	ldr	r0, [pc, #200]	; (8003458 <HAL_TIM_MspPostInit+0x170>)
 8003390:	f004 fc12 	bl	8007bb8 <HAL_GPIO_Init>
}
 8003394:	e05a      	b.n	800344c <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a31      	ldr	r2, [pc, #196]	; (8003460 <HAL_TIM_MspPostInit+0x178>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d131      	bne.n	8003404 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033a0:	4b2c      	ldr	r3, [pc, #176]	; (8003454 <HAL_TIM_MspPostInit+0x16c>)
 80033a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033a6:	4a2b      	ldr	r2, [pc, #172]	; (8003454 <HAL_TIM_MspPostInit+0x16c>)
 80033a8:	f043 0308 	orr.w	r3, r3, #8
 80033ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033b0:	4b28      	ldr	r3, [pc, #160]	; (8003454 <HAL_TIM_MspPostInit+0x16c>)
 80033b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033b6:	f003 0308 	and.w	r3, r3, #8
 80033ba:	613b      	str	r3, [r7, #16]
 80033bc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80033be:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80033c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c4:	2302      	movs	r3, #2
 80033c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c8:	2300      	movs	r3, #0
 80033ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033cc:	2300      	movs	r3, #0
 80033ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80033d0:	2302      	movs	r3, #2
 80033d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033d4:	f107 031c 	add.w	r3, r7, #28
 80033d8:	4619      	mov	r1, r3
 80033da:	4822      	ldr	r0, [pc, #136]	; (8003464 <HAL_TIM_MspPostInit+0x17c>)
 80033dc:	f004 fbec 	bl	8007bb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80033e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80033e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e6:	2302      	movs	r3, #2
 80033e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80033ea:	2302      	movs	r3, #2
 80033ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ee:	2300      	movs	r3, #0
 80033f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80033f2:	2302      	movs	r3, #2
 80033f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033f6:	f107 031c 	add.w	r3, r7, #28
 80033fa:	4619      	mov	r1, r3
 80033fc:	4819      	ldr	r0, [pc, #100]	; (8003464 <HAL_TIM_MspPostInit+0x17c>)
 80033fe:	f004 fbdb 	bl	8007bb8 <HAL_GPIO_Init>
}
 8003402:	e023      	b.n	800344c <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a17      	ldr	r2, [pc, #92]	; (8003468 <HAL_TIM_MspPostInit+0x180>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d11e      	bne.n	800344c <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800340e:	4b11      	ldr	r3, [pc, #68]	; (8003454 <HAL_TIM_MspPostInit+0x16c>)
 8003410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003414:	4a0f      	ldr	r2, [pc, #60]	; (8003454 <HAL_TIM_MspPostInit+0x16c>)
 8003416:	f043 0301 	orr.w	r3, r3, #1
 800341a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800341e:	4b0d      	ldr	r3, [pc, #52]	; (8003454 <HAL_TIM_MspPostInit+0x16c>)
 8003420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800342c:	2308      	movs	r3, #8
 800342e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003430:	2302      	movs	r3, #2
 8003432:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003434:	2302      	movs	r3, #2
 8003436:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003438:	2300      	movs	r3, #0
 800343a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800343c:	2302      	movs	r3, #2
 800343e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003440:	f107 031c 	add.w	r3, r7, #28
 8003444:	4619      	mov	r1, r3
 8003446:	4809      	ldr	r0, [pc, #36]	; (800346c <HAL_TIM_MspPostInit+0x184>)
 8003448:	f004 fbb6 	bl	8007bb8 <HAL_GPIO_Init>
}
 800344c:	bf00      	nop
 800344e:	3730      	adds	r7, #48	; 0x30
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	58024400 	.word	0x58024400
 8003458:	58020400 	.word	0x58020400
 800345c:	40000400 	.word	0x40000400
 8003460:	40000800 	.word	0x40000800
 8003464:	58020c00 	.word	0x58020c00
 8003468:	40000c00 	.word	0x40000c00
 800346c:	58020000 	.word	0x58020000

08003470 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b0ba      	sub	sp, #232	; 0xe8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003478:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	605a      	str	r2, [r3, #4]
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	60da      	str	r2, [r3, #12]
 8003486:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003488:	f107 0318 	add.w	r3, r7, #24
 800348c:	22b8      	movs	r2, #184	; 0xb8
 800348e:	2100      	movs	r1, #0
 8003490:	4618      	mov	r0, r3
 8003492:	f013 fd31 	bl	8016ef8 <memset>
  if(huart->Instance==UART4)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a4d      	ldr	r2, [pc, #308]	; (80035d0 <HAL_UART_MspInit+0x160>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d147      	bne.n	8003530 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80034a0:	f04f 0202 	mov.w	r2, #2
 80034a4:	f04f 0300 	mov.w	r3, #0
 80034a8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80034ac:	2300      	movs	r3, #0
 80034ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034b2:	f107 0318 	add.w	r3, r7, #24
 80034b6:	4618      	mov	r0, r3
 80034b8:	f007 f952 	bl	800a760 <HAL_RCCEx_PeriphCLKConfig>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80034c2:	f7ff fa1d 	bl	8002900 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80034c6:	4b43      	ldr	r3, [pc, #268]	; (80035d4 <HAL_UART_MspInit+0x164>)
 80034c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034cc:	4a41      	ldr	r2, [pc, #260]	; (80035d4 <HAL_UART_MspInit+0x164>)
 80034ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80034d2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80034d6:	4b3f      	ldr	r3, [pc, #252]	; (80035d4 <HAL_UART_MspInit+0x164>)
 80034d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034e0:	617b      	str	r3, [r7, #20]
 80034e2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034e4:	4b3b      	ldr	r3, [pc, #236]	; (80035d4 <HAL_UART_MspInit+0x164>)
 80034e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034ea:	4a3a      	ldr	r2, [pc, #232]	; (80035d4 <HAL_UART_MspInit+0x164>)
 80034ec:	f043 0302 	orr.w	r3, r3, #2
 80034f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034f4:	4b37      	ldr	r3, [pc, #220]	; (80035d4 <HAL_UART_MspInit+0x164>)
 80034f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	613b      	str	r3, [r7, #16]
 8003500:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003502:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003506:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800350a:	2302      	movs	r3, #2
 800350c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003510:	2300      	movs	r3, #0
 8003512:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003516:	2300      	movs	r3, #0
 8003518:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800351c:	2308      	movs	r3, #8
 800351e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003522:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003526:	4619      	mov	r1, r3
 8003528:	482b      	ldr	r0, [pc, #172]	; (80035d8 <HAL_UART_MspInit+0x168>)
 800352a:	f004 fb45 	bl	8007bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800352e:	e04a      	b.n	80035c6 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a29      	ldr	r2, [pc, #164]	; (80035dc <HAL_UART_MspInit+0x16c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d145      	bne.n	80035c6 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800353a:	f04f 0201 	mov.w	r2, #1
 800353e:	f04f 0300 	mov.w	r3, #0
 8003542:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003546:	2300      	movs	r3, #0
 8003548:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800354c:	f107 0318 	add.w	r3, r7, #24
 8003550:	4618      	mov	r0, r3
 8003552:	f007 f905 	bl	800a760 <HAL_RCCEx_PeriphCLKConfig>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 800355c:	f7ff f9d0 	bl	8002900 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003560:	4b1c      	ldr	r3, [pc, #112]	; (80035d4 <HAL_UART_MspInit+0x164>)
 8003562:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003566:	4a1b      	ldr	r2, [pc, #108]	; (80035d4 <HAL_UART_MspInit+0x164>)
 8003568:	f043 0320 	orr.w	r3, r3, #32
 800356c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003570:	4b18      	ldr	r3, [pc, #96]	; (80035d4 <HAL_UART_MspInit+0x164>)
 8003572:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003576:	f003 0320 	and.w	r3, r3, #32
 800357a:	60fb      	str	r3, [r7, #12]
 800357c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800357e:	4b15      	ldr	r3, [pc, #84]	; (80035d4 <HAL_UART_MspInit+0x164>)
 8003580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003584:	4a13      	ldr	r2, [pc, #76]	; (80035d4 <HAL_UART_MspInit+0x164>)
 8003586:	f043 0304 	orr.w	r3, r3, #4
 800358a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800358e:	4b11      	ldr	r3, [pc, #68]	; (80035d4 <HAL_UART_MspInit+0x164>)
 8003590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	60bb      	str	r3, [r7, #8]
 800359a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800359c:	23c0      	movs	r3, #192	; 0xc0
 800359e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a2:	2302      	movs	r3, #2
 80035a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a8:	2300      	movs	r3, #0
 80035aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ae:	2300      	movs	r3, #0
 80035b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80035b4:	2307      	movs	r3, #7
 80035b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035ba:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80035be:	4619      	mov	r1, r3
 80035c0:	4807      	ldr	r0, [pc, #28]	; (80035e0 <HAL_UART_MspInit+0x170>)
 80035c2:	f004 faf9 	bl	8007bb8 <HAL_GPIO_Init>
}
 80035c6:	bf00      	nop
 80035c8:	37e8      	adds	r7, #232	; 0xe8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40004c00 	.word	0x40004c00
 80035d4:	58024400 	.word	0x58024400
 80035d8:	58020400 	.word	0x58020400
 80035dc:	40011400 	.word	0x40011400
 80035e0:	58020800 	.word	0x58020800

080035e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80035e8:	e7fe      	b.n	80035e8 <NMI_Handler+0x4>

080035ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035ea:	b480      	push	{r7}
 80035ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035ee:	e7fe      	b.n	80035ee <HardFault_Handler+0x4>

080035f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035f4:	e7fe      	b.n	80035f4 <MemManage_Handler+0x4>

080035f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035f6:	b480      	push	{r7}
 80035f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035fa:	e7fe      	b.n	80035fa <BusFault_Handler+0x4>

080035fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003600:	e7fe      	b.n	8003600 <UsageFault_Handler+0x4>

08003602 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003602:	b480      	push	{r7}
 8003604:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003606:	bf00      	nop
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003614:	bf00      	nop
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr

0800361e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800361e:	b480      	push	{r7}
 8003620:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003622:	bf00      	nop
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003630:	f000 f9b0 	bl	8003994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003634:	bf00      	nop
 8003636:	bd80      	pop	{r7, pc}

08003638 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 800363c:	4802      	ldr	r0, [pc, #8]	; (8003648 <DMA1_Stream0_IRQHandler+0x10>)
 800363e:	f002 fc45 	bl	8005ecc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003642:	bf00      	nop
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	24001264 	.word	0x24001264

0800364c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8003650:	4802      	ldr	r0, [pc, #8]	; (800365c <DMA1_Stream1_IRQHandler+0x10>)
 8003652:	f002 fc3b 	bl	8005ecc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003656:	bf00      	nop
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	240010fc 	.word	0x240010fc

08003660 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8003664:	4802      	ldr	r0, [pc, #8]	; (8003670 <DMA1_Stream2_IRQHandler+0x10>)
 8003666:	f002 fc31 	bl	8005ecc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800366a:	bf00      	nop
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	240012dc 	.word	0x240012dc

08003674 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003678:	4802      	ldr	r0, [pc, #8]	; (8003684 <DMA1_Stream3_IRQHandler+0x10>)
 800367a:	f002 fc27 	bl	8005ecc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800367e:	bf00      	nop
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	24001174 	.word	0x24001174

08003688 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 800368c:	4802      	ldr	r0, [pc, #8]	; (8003698 <DMA1_Stream4_IRQHandler+0x10>)
 800368e:	f002 fc1d 	bl	8005ecc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003692:	bf00      	nop
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	240011ec 	.word	0x240011ec

0800369c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80036a0:	4802      	ldr	r0, [pc, #8]	; (80036ac <DMA1_Stream5_IRQHandler+0x10>)
 80036a2:	f002 fc13 	bl	8005ecc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80036a6:	bf00      	nop
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	24000bd4 	.word	0x24000bd4

080036b0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80036b4:	4802      	ldr	r0, [pc, #8]	; (80036c0 <TIM4_IRQHandler+0x10>)
 80036b6:	f00c f9dd 	bl	800fa74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80036ba:	bf00      	nop
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	24001064 	.word	0x24001064

080036c4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80036c8:	4802      	ldr	r0, [pc, #8]	; (80036d4 <DMA2_Stream7_IRQHandler+0x10>)
 80036ca:	f002 fbff 	bl	8005ecc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80036ce:	bf00      	nop
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	24000c4c 	.word	0x24000c4c

080036d8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80036dc:	4802      	ldr	r0, [pc, #8]	; (80036e8 <OTG_HS_IRQHandler+0x10>)
 80036de:	f004 fec5 	bl	800846c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80036e2:	bf00      	nop
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	24002980 	.word	0x24002980

080036ec <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 80036f0:	4802      	ldr	r0, [pc, #8]	; (80036fc <SDMMC2_IRQHandler+0x10>)
 80036f2:	f009 fe8b 	bl	800d40c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 80036f6:	bf00      	nop
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	24000db8 	.word	0x24000db8

08003700 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003708:	4a14      	ldr	r2, [pc, #80]	; (800375c <_sbrk+0x5c>)
 800370a:	4b15      	ldr	r3, [pc, #84]	; (8003760 <_sbrk+0x60>)
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003714:	4b13      	ldr	r3, [pc, #76]	; (8003764 <_sbrk+0x64>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d102      	bne.n	8003722 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800371c:	4b11      	ldr	r3, [pc, #68]	; (8003764 <_sbrk+0x64>)
 800371e:	4a12      	ldr	r2, [pc, #72]	; (8003768 <_sbrk+0x68>)
 8003720:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003722:	4b10      	ldr	r3, [pc, #64]	; (8003764 <_sbrk+0x64>)
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4413      	add	r3, r2
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	429a      	cmp	r2, r3
 800372e:	d207      	bcs.n	8003740 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003730:	f013 fbea 	bl	8016f08 <__errno>
 8003734:	4603      	mov	r3, r0
 8003736:	220c      	movs	r2, #12
 8003738:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800373a:	f04f 33ff 	mov.w	r3, #4294967295
 800373e:	e009      	b.n	8003754 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003740:	4b08      	ldr	r3, [pc, #32]	; (8003764 <_sbrk+0x64>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003746:	4b07      	ldr	r3, [pc, #28]	; (8003764 <_sbrk+0x64>)
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4413      	add	r3, r2
 800374e:	4a05      	ldr	r2, [pc, #20]	; (8003764 <_sbrk+0x64>)
 8003750:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003752:	68fb      	ldr	r3, [r7, #12]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3718      	adds	r7, #24
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	24050000 	.word	0x24050000
 8003760:	00000800 	.word	0x00000800
 8003764:	2400147c 	.word	0x2400147c
 8003768:	240031f8 	.word	0x240031f8

0800376c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003770:	4b32      	ldr	r3, [pc, #200]	; (800383c <SystemInit+0xd0>)
 8003772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003776:	4a31      	ldr	r2, [pc, #196]	; (800383c <SystemInit+0xd0>)
 8003778:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800377c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003780:	4b2f      	ldr	r3, [pc, #188]	; (8003840 <SystemInit+0xd4>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 030f 	and.w	r3, r3, #15
 8003788:	2b06      	cmp	r3, #6
 800378a:	d807      	bhi.n	800379c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800378c:	4b2c      	ldr	r3, [pc, #176]	; (8003840 <SystemInit+0xd4>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f023 030f 	bic.w	r3, r3, #15
 8003794:	4a2a      	ldr	r2, [pc, #168]	; (8003840 <SystemInit+0xd4>)
 8003796:	f043 0307 	orr.w	r3, r3, #7
 800379a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800379c:	4b29      	ldr	r3, [pc, #164]	; (8003844 <SystemInit+0xd8>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a28      	ldr	r2, [pc, #160]	; (8003844 <SystemInit+0xd8>)
 80037a2:	f043 0301 	orr.w	r3, r3, #1
 80037a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80037a8:	4b26      	ldr	r3, [pc, #152]	; (8003844 <SystemInit+0xd8>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80037ae:	4b25      	ldr	r3, [pc, #148]	; (8003844 <SystemInit+0xd8>)
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	4924      	ldr	r1, [pc, #144]	; (8003844 <SystemInit+0xd8>)
 80037b4:	4b24      	ldr	r3, [pc, #144]	; (8003848 <SystemInit+0xdc>)
 80037b6:	4013      	ands	r3, r2
 80037b8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80037ba:	4b21      	ldr	r3, [pc, #132]	; (8003840 <SystemInit+0xd4>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0308 	and.w	r3, r3, #8
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d007      	beq.n	80037d6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80037c6:	4b1e      	ldr	r3, [pc, #120]	; (8003840 <SystemInit+0xd4>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f023 030f 	bic.w	r3, r3, #15
 80037ce:	4a1c      	ldr	r2, [pc, #112]	; (8003840 <SystemInit+0xd4>)
 80037d0:	f043 0307 	orr.w	r3, r3, #7
 80037d4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80037d6:	4b1b      	ldr	r3, [pc, #108]	; (8003844 <SystemInit+0xd8>)
 80037d8:	2200      	movs	r2, #0
 80037da:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80037dc:	4b19      	ldr	r3, [pc, #100]	; (8003844 <SystemInit+0xd8>)
 80037de:	2200      	movs	r2, #0
 80037e0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80037e2:	4b18      	ldr	r3, [pc, #96]	; (8003844 <SystemInit+0xd8>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80037e8:	4b16      	ldr	r3, [pc, #88]	; (8003844 <SystemInit+0xd8>)
 80037ea:	4a18      	ldr	r2, [pc, #96]	; (800384c <SystemInit+0xe0>)
 80037ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80037ee:	4b15      	ldr	r3, [pc, #84]	; (8003844 <SystemInit+0xd8>)
 80037f0:	4a17      	ldr	r2, [pc, #92]	; (8003850 <SystemInit+0xe4>)
 80037f2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80037f4:	4b13      	ldr	r3, [pc, #76]	; (8003844 <SystemInit+0xd8>)
 80037f6:	4a17      	ldr	r2, [pc, #92]	; (8003854 <SystemInit+0xe8>)
 80037f8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80037fa:	4b12      	ldr	r3, [pc, #72]	; (8003844 <SystemInit+0xd8>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003800:	4b10      	ldr	r3, [pc, #64]	; (8003844 <SystemInit+0xd8>)
 8003802:	4a14      	ldr	r2, [pc, #80]	; (8003854 <SystemInit+0xe8>)
 8003804:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003806:	4b0f      	ldr	r3, [pc, #60]	; (8003844 <SystemInit+0xd8>)
 8003808:	2200      	movs	r2, #0
 800380a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800380c:	4b0d      	ldr	r3, [pc, #52]	; (8003844 <SystemInit+0xd8>)
 800380e:	4a11      	ldr	r2, [pc, #68]	; (8003854 <SystemInit+0xe8>)
 8003810:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003812:	4b0c      	ldr	r3, [pc, #48]	; (8003844 <SystemInit+0xd8>)
 8003814:	2200      	movs	r2, #0
 8003816:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003818:	4b0a      	ldr	r3, [pc, #40]	; (8003844 <SystemInit+0xd8>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a09      	ldr	r2, [pc, #36]	; (8003844 <SystemInit+0xd8>)
 800381e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003822:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003824:	4b07      	ldr	r3, [pc, #28]	; (8003844 <SystemInit+0xd8>)
 8003826:	2200      	movs	r2, #0
 8003828:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800382a:	4b0b      	ldr	r3, [pc, #44]	; (8003858 <SystemInit+0xec>)
 800382c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003830:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003832:	bf00      	nop
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	e000ed00 	.word	0xe000ed00
 8003840:	52002000 	.word	0x52002000
 8003844:	58024400 	.word	0x58024400
 8003848:	eaf6ed7f 	.word	0xeaf6ed7f
 800384c:	02020200 	.word	0x02020200
 8003850:	01ff0000 	.word	0x01ff0000
 8003854:	01010280 	.word	0x01010280
 8003858:	52004000 	.word	0x52004000

0800385c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800385c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003894 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003860:	f7ff ff84 	bl	800376c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003864:	480c      	ldr	r0, [pc, #48]	; (8003898 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003866:	490d      	ldr	r1, [pc, #52]	; (800389c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003868:	4a0d      	ldr	r2, [pc, #52]	; (80038a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800386a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800386c:	e002      	b.n	8003874 <LoopCopyDataInit>

0800386e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800386e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003872:	3304      	adds	r3, #4

08003874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003878:	d3f9      	bcc.n	800386e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800387a:	4a0a      	ldr	r2, [pc, #40]	; (80038a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800387c:	4c0a      	ldr	r4, [pc, #40]	; (80038a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800387e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003880:	e001      	b.n	8003886 <LoopFillZerobss>

08003882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003884:	3204      	adds	r2, #4

08003886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003888:	d3fb      	bcc.n	8003882 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800388a:	f013 fb43 	bl	8016f14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800388e:	f7fd fdef 	bl	8001470 <main>
  bx  lr
 8003892:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003894:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003898:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800389c:	24000150 	.word	0x24000150
  ldr r2, =_sidata
 80038a0:	08017b38 	.word	0x08017b38
  ldr r2, =_sbss
 80038a4:	24000150 	.word	0x24000150
  ldr r4, =_ebss
 80038a8:	240031f4 	.word	0x240031f4

080038ac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038ac:	e7fe      	b.n	80038ac <ADC3_IRQHandler>
	...

080038b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038b6:	2003      	movs	r0, #3
 80038b8:	f001 fd06 	bl	80052c8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80038bc:	f006 fd7a 	bl	800a3b4 <HAL_RCC_GetSysClockFreq>
 80038c0:	4602      	mov	r2, r0
 80038c2:	4b15      	ldr	r3, [pc, #84]	; (8003918 <HAL_Init+0x68>)
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	0a1b      	lsrs	r3, r3, #8
 80038c8:	f003 030f 	and.w	r3, r3, #15
 80038cc:	4913      	ldr	r1, [pc, #76]	; (800391c <HAL_Init+0x6c>)
 80038ce:	5ccb      	ldrb	r3, [r1, r3]
 80038d0:	f003 031f 	and.w	r3, r3, #31
 80038d4:	fa22 f303 	lsr.w	r3, r2, r3
 80038d8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80038da:	4b0f      	ldr	r3, [pc, #60]	; (8003918 <HAL_Init+0x68>)
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	f003 030f 	and.w	r3, r3, #15
 80038e2:	4a0e      	ldr	r2, [pc, #56]	; (800391c <HAL_Init+0x6c>)
 80038e4:	5cd3      	ldrb	r3, [r2, r3]
 80038e6:	f003 031f 	and.w	r3, r3, #31
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	fa22 f303 	lsr.w	r3, r2, r3
 80038f0:	4a0b      	ldr	r2, [pc, #44]	; (8003920 <HAL_Init+0x70>)
 80038f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80038f4:	4a0b      	ldr	r2, [pc, #44]	; (8003924 <HAL_Init+0x74>)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80038fa:	200f      	movs	r0, #15
 80038fc:	f000 f814 	bl	8003928 <HAL_InitTick>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e002      	b.n	8003910 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800390a:	f7fe ffff 	bl	800290c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	58024400 	.word	0x58024400
 800391c:	08017aa0 	.word	0x08017aa0
 8003920:	24000004 	.word	0x24000004
 8003924:	24000000 	.word	0x24000000

08003928 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003930:	4b15      	ldr	r3, [pc, #84]	; (8003988 <HAL_InitTick+0x60>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e021      	b.n	8003980 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800393c:	4b13      	ldr	r3, [pc, #76]	; (800398c <HAL_InitTick+0x64>)
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	4b11      	ldr	r3, [pc, #68]	; (8003988 <HAL_InitTick+0x60>)
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	4619      	mov	r1, r3
 8003946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800394a:	fbb3 f3f1 	udiv	r3, r3, r1
 800394e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003952:	4618      	mov	r0, r3
 8003954:	f001 fceb 	bl	800532e <HAL_SYSTICK_Config>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e00e      	b.n	8003980 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b0f      	cmp	r3, #15
 8003966:	d80a      	bhi.n	800397e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003968:	2200      	movs	r2, #0
 800396a:	6879      	ldr	r1, [r7, #4]
 800396c:	f04f 30ff 	mov.w	r0, #4294967295
 8003970:	f001 fcb5 	bl	80052de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003974:	4a06      	ldr	r2, [pc, #24]	; (8003990 <HAL_InitTick+0x68>)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800397a:	2300      	movs	r3, #0
 800397c:	e000      	b.n	8003980 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
}
 8003980:	4618      	mov	r0, r3
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	2400000c 	.word	0x2400000c
 800398c:	24000000 	.word	0x24000000
 8003990:	24000008 	.word	0x24000008

08003994 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003998:	4b06      	ldr	r3, [pc, #24]	; (80039b4 <HAL_IncTick+0x20>)
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	461a      	mov	r2, r3
 800399e:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <HAL_IncTick+0x24>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4413      	add	r3, r2
 80039a4:	4a04      	ldr	r2, [pc, #16]	; (80039b8 <HAL_IncTick+0x24>)
 80039a6:	6013      	str	r3, [r2, #0]
}
 80039a8:	bf00      	nop
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	2400000c 	.word	0x2400000c
 80039b8:	24001480 	.word	0x24001480

080039bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  return uwTick;
 80039c0:	4b03      	ldr	r3, [pc, #12]	; (80039d0 <HAL_GetTick+0x14>)
 80039c2:	681b      	ldr	r3, [r3, #0]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	24001480 	.word	0x24001480

080039d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039dc:	f7ff ffee 	bl	80039bc <HAL_GetTick>
 80039e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ec:	d005      	beq.n	80039fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039ee:	4b0a      	ldr	r3, [pc, #40]	; (8003a18 <HAL_Delay+0x44>)
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	461a      	mov	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4413      	add	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039fa:	bf00      	nop
 80039fc:	f7ff ffde 	bl	80039bc <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d8f7      	bhi.n	80039fc <HAL_Delay+0x28>
  {
  }
}
 8003a0c:	bf00      	nop
 8003a0e:	bf00      	nop
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	2400000c 	.word	0x2400000c

08003a1c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003a26:	4b07      	ldr	r3, [pc, #28]	; (8003a44 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	401a      	ands	r2, r3
 8003a30:	4904      	ldr	r1, [pc, #16]	; (8003a44 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	604b      	str	r3, [r1, #4]
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	58000400 	.word	0x58000400

08003a48 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	609a      	str	r2, [r3, #8]
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	609a      	str	r2, [r3, #8]
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b087      	sub	sp, #28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
 8003abc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	3360      	adds	r3, #96	; 0x60
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	4a10      	ldr	r2, [pc, #64]	; (8003b10 <LL_ADC_SetOffset+0x60>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d10b      	bne.n	8003aec <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003aea:	e00b      	b.n	8003b04 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	430b      	orrs	r3, r1
 8003afe:	431a      	orrs	r2, r3
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	601a      	str	r2, [r3, #0]
}
 8003b04:	bf00      	nop
 8003b06:	371c      	adds	r7, #28
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	58026000 	.word	0x58026000

08003b14 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	3360      	adds	r3, #96	; 0x60
 8003b22:	461a      	mov	r2, r3
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4413      	add	r3, r2
 8003b2a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3714      	adds	r7, #20
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	f003 031f 	and.w	r3, r3, #31
 8003b5a:	6879      	ldr	r1, [r7, #4]
 8003b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b60:	431a      	orrs	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	611a      	str	r2, [r3, #16]
}
 8003b66:	bf00      	nop
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
	...

08003b74 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b087      	sub	sp, #28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	4a0c      	ldr	r2, [pc, #48]	; (8003bb4 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d00e      	beq.n	8003ba6 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	3360      	adds	r3, #96	; 0x60
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	601a      	str	r2, [r3, #0]
  }
}
 8003ba6:	bf00      	nop
 8003ba8:	371c      	adds	r7, #28
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	58026000 	.word	0x58026000

08003bb8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b087      	sub	sp, #28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4a0c      	ldr	r2, [pc, #48]	; (8003bf8 <LL_ADC_SetOffsetSaturation+0x40>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d10e      	bne.n	8003bea <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	3360      	adds	r3, #96	; 0x60
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	431a      	orrs	r2, r3
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003bea:	bf00      	nop
 8003bec:	371c      	adds	r7, #28
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	58026000 	.word	0x58026000

08003bfc <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b087      	sub	sp, #28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4a0c      	ldr	r2, [pc, #48]	; (8003c3c <LL_ADC_SetOffsetSign+0x40>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d10e      	bne.n	8003c2e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	3360      	adds	r3, #96	; 0x60
 8003c14:	461a      	mov	r2, r3
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4413      	add	r3, r2
 8003c1c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003c2e:	bf00      	nop
 8003c30:	371c      	adds	r7, #28
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	58026000 	.word	0x58026000

08003c40 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b087      	sub	sp, #28
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	3360      	adds	r3, #96	; 0x60
 8003c50:	461a      	mov	r2, r3
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4413      	add	r3, r2
 8003c58:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	4a0c      	ldr	r2, [pc, #48]	; (8003c90 <LL_ADC_SetOffsetState+0x50>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d108      	bne.n	8003c74 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003c72:	e007      	b.n	8003c84 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	601a      	str	r2, [r3, #0]
}
 8003c84:	bf00      	nop
 8003c86:	371c      	adds	r7, #28
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr
 8003c90:	58026000 	.word	0x58026000

08003c94 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b087      	sub	sp, #28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	3330      	adds	r3, #48	; 0x30
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	0a1b      	lsrs	r3, r3, #8
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	f003 030c 	and.w	r3, r3, #12
 8003cb0:	4413      	add	r3, r2
 8003cb2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	f003 031f 	and.w	r3, r3, #31
 8003cbe:	211f      	movs	r1, #31
 8003cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc4:	43db      	mvns	r3, r3
 8003cc6:	401a      	ands	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	0e9b      	lsrs	r3, r3, #26
 8003ccc:	f003 011f 	and.w	r1, r3, #31
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	f003 031f 	and.w	r3, r3, #31
 8003cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003ce0:	bf00      	nop
 8003ce2:	371c      	adds	r7, #28
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b087      	sub	sp, #28
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	3314      	adds	r3, #20
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	0e5b      	lsrs	r3, r3, #25
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	f003 0304 	and.w	r3, r3, #4
 8003d08:	4413      	add	r3, r2
 8003d0a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	0d1b      	lsrs	r3, r3, #20
 8003d14:	f003 031f 	and.w	r3, r3, #31
 8003d18:	2107      	movs	r1, #7
 8003d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d1e:	43db      	mvns	r3, r3
 8003d20:	401a      	ands	r2, r3
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	0d1b      	lsrs	r3, r3, #20
 8003d26:	f003 031f 	and.w	r3, r3, #31
 8003d2a:	6879      	ldr	r1, [r7, #4]
 8003d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d30:	431a      	orrs	r2, r3
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003d36:	bf00      	nop
 8003d38:	371c      	adds	r7, #28
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
	...

08003d44 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4a1a      	ldr	r2, [pc, #104]	; (8003dbc <LL_ADC_SetChannelSingleDiff+0x78>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d115      	bne.n	8003d84 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d64:	43db      	mvns	r3, r3
 8003d66:	401a      	ands	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f003 0318 	and.w	r3, r3, #24
 8003d6e:	4914      	ldr	r1, [pc, #80]	; (8003dc0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003d70:	40d9      	lsrs	r1, r3
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	400b      	ands	r3, r1
 8003d76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003d82:	e014      	b.n	8003dae <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d90:	43db      	mvns	r3, r3
 8003d92:	401a      	ands	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f003 0318 	and.w	r3, r3, #24
 8003d9a:	4909      	ldr	r1, [pc, #36]	; (8003dc0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003d9c:	40d9      	lsrs	r1, r3
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	400b      	ands	r3, r1
 8003da2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003da6:	431a      	orrs	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003dae:	bf00      	nop
 8003db0:	3714      	adds	r7, #20
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	58026000 	.word	0x58026000
 8003dc0:	000fffff 	.word	0x000fffff

08003dc4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	4b04      	ldr	r3, [pc, #16]	; (8003de4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6093      	str	r3, [r2, #8]
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	5fffffc0 	.word	0x5fffffc0

08003de8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003df8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dfc:	d101      	bne.n	8003e02 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e000      	b.n	8003e04 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	4b05      	ldr	r3, [pc, #20]	; (8003e34 <LL_ADC_EnableInternalRegulator+0x24>)
 8003e1e:	4013      	ands	r3, r2
 8003e20:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr
 8003e34:	6fffffc0 	.word	0x6fffffc0

08003e38 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e4c:	d101      	bne.n	8003e52 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e000      	b.n	8003e54 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d101      	bne.n	8003e78 <LL_ADC_IsEnabled+0x18>
 8003e74:	2301      	movs	r3, #1
 8003e76:	e000      	b.n	8003e7a <LL_ADC_IsEnabled+0x1a>
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f003 0304 	and.w	r3, r3, #4
 8003e96:	2b04      	cmp	r3, #4
 8003e98:	d101      	bne.n	8003e9e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e000      	b.n	8003ea0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f003 0308 	and.w	r3, r3, #8
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	d101      	bne.n	8003ec4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e000      	b.n	8003ec6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
	...

08003ed4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ed4:	b590      	push	{r4, r7, lr}
 8003ed6:	b089      	sub	sp, #36	; 0x24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003edc:	2300      	movs	r3, #0
 8003ede:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e1ee      	b.n	80042cc <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d109      	bne.n	8003f10 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f7fe fd1f 	bl	8002940 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7ff ff67 	bl	8003de8 <LL_ADC_IsDeepPowerDownEnabled>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d004      	beq.n	8003f2a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7ff ff4d 	bl	8003dc4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7ff ff82 	bl	8003e38 <LL_ADC_IsInternalRegulatorEnabled>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d114      	bne.n	8003f64 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff ff66 	bl	8003e10 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f44:	4b8e      	ldr	r3, [pc, #568]	; (8004180 <HAL_ADC_Init+0x2ac>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	099b      	lsrs	r3, r3, #6
 8003f4a:	4a8e      	ldr	r2, [pc, #568]	; (8004184 <HAL_ADC_Init+0x2b0>)
 8003f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f50:	099b      	lsrs	r3, r3, #6
 8003f52:	3301      	adds	r3, #1
 8003f54:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003f56:	e002      	b.n	8003f5e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1f9      	bne.n	8003f58 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7ff ff65 	bl	8003e38 <LL_ADC_IsInternalRegulatorEnabled>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10d      	bne.n	8003f90 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f78:	f043 0210 	orr.w	r2, r3, #16
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f84:	f043 0201 	orr.w	r2, r3, #1
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7ff ff76 	bl	8003e86 <LL_ADC_REG_IsConversionOngoing>
 8003f9a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fa0:	f003 0310 	and.w	r3, r3, #16
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f040 8188 	bne.w	80042ba <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f040 8184 	bne.w	80042ba <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003fba:	f043 0202 	orr.w	r2, r3, #2
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7ff ff4a 	bl	8003e60 <LL_ADC_IsEnabled>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d136      	bne.n	8004040 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a6c      	ldr	r2, [pc, #432]	; (8004188 <HAL_ADC_Init+0x2b4>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d004      	beq.n	8003fe6 <HAL_ADC_Init+0x112>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a6a      	ldr	r2, [pc, #424]	; (800418c <HAL_ADC_Init+0x2b8>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d10e      	bne.n	8004004 <HAL_ADC_Init+0x130>
 8003fe6:	4868      	ldr	r0, [pc, #416]	; (8004188 <HAL_ADC_Init+0x2b4>)
 8003fe8:	f7ff ff3a 	bl	8003e60 <LL_ADC_IsEnabled>
 8003fec:	4604      	mov	r4, r0
 8003fee:	4867      	ldr	r0, [pc, #412]	; (800418c <HAL_ADC_Init+0x2b8>)
 8003ff0:	f7ff ff36 	bl	8003e60 <LL_ADC_IsEnabled>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	4323      	orrs	r3, r4
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	bf0c      	ite	eq
 8003ffc:	2301      	moveq	r3, #1
 8003ffe:	2300      	movne	r3, #0
 8004000:	b2db      	uxtb	r3, r3
 8004002:	e008      	b.n	8004016 <HAL_ADC_Init+0x142>
 8004004:	4862      	ldr	r0, [pc, #392]	; (8004190 <HAL_ADC_Init+0x2bc>)
 8004006:	f7ff ff2b 	bl	8003e60 <LL_ADC_IsEnabled>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	bf0c      	ite	eq
 8004010:	2301      	moveq	r3, #1
 8004012:	2300      	movne	r3, #0
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d012      	beq.n	8004040 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a5a      	ldr	r2, [pc, #360]	; (8004188 <HAL_ADC_Init+0x2b4>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d004      	beq.n	800402e <HAL_ADC_Init+0x15a>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a58      	ldr	r2, [pc, #352]	; (800418c <HAL_ADC_Init+0x2b8>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d101      	bne.n	8004032 <HAL_ADC_Init+0x15e>
 800402e:	4a59      	ldr	r2, [pc, #356]	; (8004194 <HAL_ADC_Init+0x2c0>)
 8004030:	e000      	b.n	8004034 <HAL_ADC_Init+0x160>
 8004032:	4a59      	ldr	r2, [pc, #356]	; (8004198 <HAL_ADC_Init+0x2c4>)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	4619      	mov	r1, r3
 800403a:	4610      	mov	r0, r2
 800403c:	f7ff fd04 	bl	8003a48 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a52      	ldr	r2, [pc, #328]	; (8004190 <HAL_ADC_Init+0x2bc>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d129      	bne.n	800409e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	7e5b      	ldrb	r3, [r3, #25]
 800404e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004054:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800405a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	2b08      	cmp	r3, #8
 8004062:	d013      	beq.n	800408c <HAL_ADC_Init+0x1b8>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	2b0c      	cmp	r3, #12
 800406a:	d00d      	beq.n	8004088 <HAL_ADC_Init+0x1b4>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	2b1c      	cmp	r3, #28
 8004072:	d007      	beq.n	8004084 <HAL_ADC_Init+0x1b0>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	2b18      	cmp	r3, #24
 800407a:	d101      	bne.n	8004080 <HAL_ADC_Init+0x1ac>
 800407c:	2318      	movs	r3, #24
 800407e:	e006      	b.n	800408e <HAL_ADC_Init+0x1ba>
 8004080:	2300      	movs	r3, #0
 8004082:	e004      	b.n	800408e <HAL_ADC_Init+0x1ba>
 8004084:	2310      	movs	r3, #16
 8004086:	e002      	b.n	800408e <HAL_ADC_Init+0x1ba>
 8004088:	2308      	movs	r3, #8
 800408a:	e000      	b.n	800408e <HAL_ADC_Init+0x1ba>
 800408c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800408e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004096:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004098:	4313      	orrs	r3, r2
 800409a:	61bb      	str	r3, [r7, #24]
 800409c:	e00e      	b.n	80040bc <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	7e5b      	ldrb	r3, [r3, #25]
 80040a2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80040a8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80040ae:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040b6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80040b8:	4313      	orrs	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d106      	bne.n	80040d4 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	3b01      	subs	r3, #1
 80040cc:	045b      	lsls	r3, r3, #17
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d009      	beq.n	80040f0 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a26      	ldr	r2, [pc, #152]	; (8004190 <HAL_ADC_Init+0x2bc>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d115      	bne.n	8004126 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68da      	ldr	r2, [r3, #12]
 8004100:	4b26      	ldr	r3, [pc, #152]	; (800419c <HAL_ADC_Init+0x2c8>)
 8004102:	4013      	ands	r3, r2
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	6812      	ldr	r2, [r2, #0]
 8004108:	69b9      	ldr	r1, [r7, #24]
 800410a:	430b      	orrs	r3, r1
 800410c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	430a      	orrs	r2, r1
 8004122:	611a      	str	r2, [r3, #16]
 8004124:	e009      	b.n	800413a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	4b1c      	ldr	r3, [pc, #112]	; (80041a0 <HAL_ADC_Init+0x2cc>)
 800412e:	4013      	ands	r3, r2
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	6812      	ldr	r2, [r2, #0]
 8004134:	69b9      	ldr	r1, [r7, #24]
 8004136:	430b      	orrs	r3, r1
 8004138:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4618      	mov	r0, r3
 8004140:	f7ff fea1 	bl	8003e86 <LL_ADC_REG_IsConversionOngoing>
 8004144:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f7ff feae 	bl	8003eac <LL_ADC_INJ_IsConversionOngoing>
 8004150:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	2b00      	cmp	r3, #0
 8004156:	f040 808e 	bne.w	8004276 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2b00      	cmp	r3, #0
 800415e:	f040 808a 	bne.w	8004276 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a0a      	ldr	r2, [pc, #40]	; (8004190 <HAL_ADC_Init+0x2bc>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d11b      	bne.n	80041a4 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	7e1b      	ldrb	r3, [r3, #24]
 8004170:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004178:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800417a:	4313      	orrs	r3, r2
 800417c:	61bb      	str	r3, [r7, #24]
 800417e:	e018      	b.n	80041b2 <HAL_ADC_Init+0x2de>
 8004180:	24000000 	.word	0x24000000
 8004184:	053e2d63 	.word	0x053e2d63
 8004188:	40022000 	.word	0x40022000
 800418c:	40022100 	.word	0x40022100
 8004190:	58026000 	.word	0x58026000
 8004194:	40022300 	.word	0x40022300
 8004198:	58026300 	.word	0x58026300
 800419c:	fff04007 	.word	0xfff04007
 80041a0:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	7e1b      	ldrb	r3, [r3, #24]
 80041a8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 80041ae:	4313      	orrs	r3, r2
 80041b0:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68da      	ldr	r2, [r3, #12]
 80041b8:	4b46      	ldr	r3, [pc, #280]	; (80042d4 <HAL_ADC_Init+0x400>)
 80041ba:	4013      	ands	r3, r2
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	6812      	ldr	r2, [r2, #0]
 80041c0:	69b9      	ldr	r1, [r7, #24]
 80041c2:	430b      	orrs	r3, r1
 80041c4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d137      	bne.n	8004240 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d4:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a3f      	ldr	r2, [pc, #252]	; (80042d8 <HAL_ADC_Init+0x404>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d116      	bne.n	800420e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	691a      	ldr	r2, [r3, #16]
 80041e6:	4b3d      	ldr	r3, [pc, #244]	; (80042dc <HAL_ADC_Init+0x408>)
 80041e8:	4013      	ands	r3, r2
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80041f2:	4311      	orrs	r1, r2
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041f8:	4311      	orrs	r1, r2
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80041fe:	430a      	orrs	r2, r1
 8004200:	431a      	orrs	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 0201 	orr.w	r2, r2, #1
 800420a:	611a      	str	r2, [r3, #16]
 800420c:	e020      	b.n	8004250 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	691a      	ldr	r2, [r3, #16]
 8004214:	4b32      	ldr	r3, [pc, #200]	; (80042e0 <HAL_ADC_Init+0x40c>)
 8004216:	4013      	ands	r3, r2
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800421c:	3a01      	subs	r2, #1
 800421e:	0411      	lsls	r1, r2, #16
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004224:	4311      	orrs	r1, r2
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800422a:	4311      	orrs	r1, r2
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004230:	430a      	orrs	r2, r1
 8004232:	431a      	orrs	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f042 0201 	orr.w	r2, r2, #1
 800423c:	611a      	str	r2, [r3, #16]
 800423e:	e007      	b.n	8004250 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	691a      	ldr	r2, [r3, #16]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 0201 	bic.w	r2, r2, #1
 800424e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	430a      	orrs	r2, r1
 8004264:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a1b      	ldr	r2, [pc, #108]	; (80042d8 <HAL_ADC_Init+0x404>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d002      	beq.n	8004276 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 fd63 	bl	8004d3c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d10c      	bne.n	8004298 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004284:	f023 010f 	bic.w	r1, r3, #15
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	69db      	ldr	r3, [r3, #28]
 800428c:	1e5a      	subs	r2, r3, #1
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	631a      	str	r2, [r3, #48]	; 0x30
 8004296:	e007      	b.n	80042a8 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f022 020f 	bic.w	r2, r2, #15
 80042a6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ac:	f023 0303 	bic.w	r3, r3, #3
 80042b0:	f043 0201 	orr.w	r2, r3, #1
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	661a      	str	r2, [r3, #96]	; 0x60
 80042b8:	e007      	b.n	80042ca <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042be:	f043 0210 	orr.w	r2, r3, #16
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80042ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3724      	adds	r7, #36	; 0x24
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd90      	pop	{r4, r7, pc}
 80042d4:	ffffbffc 	.word	0xffffbffc
 80042d8:	58026000 	.word	0x58026000
 80042dc:	fc00f81f 	.word	0xfc00f81f
 80042e0:	fc00f81e 	.word	0xfc00f81e

080042e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80042e4:	b590      	push	{r4, r7, lr}
 80042e6:	b0b9      	sub	sp, #228	; 0xe4
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80042f4:	2300      	movs	r3, #0
 80042f6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042fe:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	4aa9      	ldr	r2, [pc, #676]	; (80045ac <HAL_ADC_ConfigChannel+0x2c8>)
 8004306:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800430e:	2b01      	cmp	r3, #1
 8004310:	d102      	bne.n	8004318 <HAL_ADC_ConfigChannel+0x34>
 8004312:	2302      	movs	r3, #2
 8004314:	f000 bcfa 	b.w	8004d0c <HAL_ADC_ConfigChannel+0xa28>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4618      	mov	r0, r3
 8004326:	f7ff fdae 	bl	8003e86 <LL_ADC_REG_IsConversionOngoing>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	f040 84de 	bne.w	8004cee <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a9e      	ldr	r2, [pc, #632]	; (80045b0 <HAL_ADC_ConfigChannel+0x2cc>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d033      	beq.n	80043a4 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004344:	2b00      	cmp	r3, #0
 8004346:	d108      	bne.n	800435a <HAL_ADC_ConfigChannel+0x76>
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	0e9b      	lsrs	r3, r3, #26
 800434e:	f003 031f 	and.w	r3, r3, #31
 8004352:	2201      	movs	r2, #1
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	e01d      	b.n	8004396 <HAL_ADC_ConfigChannel+0xb2>
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004362:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004366:	fa93 f3a3 	rbit	r3, r3
 800436a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800436e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004372:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004376:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 800437e:	2320      	movs	r3, #32
 8004380:	e004      	b.n	800438c <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8004382:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004386:	fab3 f383 	clz	r3, r3
 800438a:	b2db      	uxtb	r3, r3
 800438c:	f003 031f 	and.w	r3, r3, #31
 8004390:	2201      	movs	r2, #1
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	6812      	ldr	r2, [r2, #0]
 800439a:	69d1      	ldr	r1, [r2, #28]
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6812      	ldr	r2, [r2, #0]
 80043a0:	430b      	orrs	r3, r1
 80043a2:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6818      	ldr	r0, [r3, #0]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	6859      	ldr	r1, [r3, #4]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	461a      	mov	r2, r3
 80043b2:	f7ff fc6f 	bl	8003c94 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7ff fd63 	bl	8003e86 <LL_ADC_REG_IsConversionOngoing>
 80043c0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7ff fd6f 	bl	8003eac <LL_ADC_INJ_IsConversionOngoing>
 80043ce:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80043d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f040 8270 	bne.w	80048bc <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80043dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f040 826b 	bne.w	80048bc <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6818      	ldr	r0, [r3, #0]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	6819      	ldr	r1, [r3, #0]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	461a      	mov	r2, r3
 80043f4:	f7ff fc7a 	bl	8003cec <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a6c      	ldr	r2, [pc, #432]	; (80045b0 <HAL_ADC_ConfigChannel+0x2cc>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d10d      	bne.n	800441e <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	695a      	ldr	r2, [r3, #20]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	08db      	lsrs	r3, r3, #3
 800440e:	f003 0303 	and.w	r3, r3, #3
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	fa02 f303 	lsl.w	r3, r2, r3
 8004418:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800441c:	e032      	b.n	8004484 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800441e:	4b65      	ldr	r3, [pc, #404]	; (80045b4 <HAL_ADC_ConfigChannel+0x2d0>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004426:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800442a:	d10b      	bne.n	8004444 <HAL_ADC_ConfigChannel+0x160>
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	695a      	ldr	r2, [r3, #20]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	089b      	lsrs	r3, r3, #2
 8004438:	f003 0307 	and.w	r3, r3, #7
 800443c:	005b      	lsls	r3, r3, #1
 800443e:	fa02 f303 	lsl.w	r3, r2, r3
 8004442:	e01d      	b.n	8004480 <HAL_ADC_ConfigChannel+0x19c>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	f003 0310 	and.w	r3, r3, #16
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10b      	bne.n	800446a <HAL_ADC_ConfigChannel+0x186>
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	695a      	ldr	r2, [r3, #20]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	089b      	lsrs	r3, r3, #2
 800445e:	f003 0307 	and.w	r3, r3, #7
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	fa02 f303 	lsl.w	r3, r2, r3
 8004468:	e00a      	b.n	8004480 <HAL_ADC_ConfigChannel+0x19c>
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	695a      	ldr	r2, [r3, #20]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	089b      	lsrs	r3, r3, #2
 8004476:	f003 0304 	and.w	r3, r3, #4
 800447a:	005b      	lsls	r3, r3, #1
 800447c:	fa02 f303 	lsl.w	r3, r2, r3
 8004480:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	2b04      	cmp	r3, #4
 800448a:	d048      	beq.n	800451e <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6818      	ldr	r0, [r3, #0]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	6919      	ldr	r1, [r3, #16]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800449c:	f7ff fb08 	bl	8003ab0 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a42      	ldr	r2, [pc, #264]	; (80045b0 <HAL_ADC_ConfigChannel+0x2cc>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d119      	bne.n	80044de <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6818      	ldr	r0, [r3, #0]
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	6919      	ldr	r1, [r3, #16]
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	461a      	mov	r2, r3
 80044b8:	f7ff fba0 	bl	8003bfc <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6818      	ldr	r0, [r3, #0]
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	6919      	ldr	r1, [r3, #16]
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d102      	bne.n	80044d4 <HAL_ADC_ConfigChannel+0x1f0>
 80044ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044d2:	e000      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x1f2>
 80044d4:	2300      	movs	r3, #0
 80044d6:	461a      	mov	r2, r3
 80044d8:	f7ff fb6e 	bl	8003bb8 <LL_ADC_SetOffsetSaturation>
 80044dc:	e1ee      	b.n	80048bc <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6818      	ldr	r0, [r3, #0]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	6919      	ldr	r1, [r3, #16]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d102      	bne.n	80044f6 <HAL_ADC_ConfigChannel+0x212>
 80044f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80044f4:	e000      	b.n	80044f8 <HAL_ADC_ConfigChannel+0x214>
 80044f6:	2300      	movs	r3, #0
 80044f8:	461a      	mov	r2, r3
 80044fa:	f7ff fb3b 	bl	8003b74 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6818      	ldr	r0, [r3, #0]
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	6919      	ldr	r1, [r3, #16]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	7e1b      	ldrb	r3, [r3, #24]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d102      	bne.n	8004514 <HAL_ADC_ConfigChannel+0x230>
 800450e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004512:	e000      	b.n	8004516 <HAL_ADC_ConfigChannel+0x232>
 8004514:	2300      	movs	r3, #0
 8004516:	461a      	mov	r2, r3
 8004518:	f7ff fb12 	bl	8003b40 <LL_ADC_SetDataRightShift>
 800451c:	e1ce      	b.n	80048bc <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a23      	ldr	r2, [pc, #140]	; (80045b0 <HAL_ADC_ConfigChannel+0x2cc>)
 8004524:	4293      	cmp	r3, r2
 8004526:	f040 8181 	bne.w	800482c <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2100      	movs	r1, #0
 8004530:	4618      	mov	r0, r3
 8004532:	f7ff faef 	bl	8003b14 <LL_ADC_GetOffsetChannel>
 8004536:	4603      	mov	r3, r0
 8004538:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10a      	bne.n	8004556 <HAL_ADC_ConfigChannel+0x272>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2100      	movs	r1, #0
 8004546:	4618      	mov	r0, r3
 8004548:	f7ff fae4 	bl	8003b14 <LL_ADC_GetOffsetChannel>
 800454c:	4603      	mov	r3, r0
 800454e:	0e9b      	lsrs	r3, r3, #26
 8004550:	f003 021f 	and.w	r2, r3, #31
 8004554:	e01e      	b.n	8004594 <HAL_ADC_ConfigChannel+0x2b0>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2100      	movs	r1, #0
 800455c:	4618      	mov	r0, r3
 800455e:	f7ff fad9 	bl	8003b14 <LL_ADC_GetOffsetChannel>
 8004562:	4603      	mov	r3, r0
 8004564:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004568:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800456c:	fa93 f3a3 	rbit	r3, r3
 8004570:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8004574:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004578:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 800457c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8004584:	2320      	movs	r3, #32
 8004586:	e004      	b.n	8004592 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8004588:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800458c:	fab3 f383 	clz	r3, r3
 8004590:	b2db      	uxtb	r3, r3
 8004592:	461a      	mov	r2, r3
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10b      	bne.n	80045b8 <HAL_ADC_ConfigChannel+0x2d4>
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	0e9b      	lsrs	r3, r3, #26
 80045a6:	f003 031f 	and.w	r3, r3, #31
 80045aa:	e01e      	b.n	80045ea <HAL_ADC_ConfigChannel+0x306>
 80045ac:	47ff0000 	.word	0x47ff0000
 80045b0:	58026000 	.word	0x58026000
 80045b4:	5c001000 	.word	0x5c001000
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045c4:	fa93 f3a3 	rbit	r3, r3
 80045c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80045cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80045d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80045d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 80045dc:	2320      	movs	r3, #32
 80045de:	e004      	b.n	80045ea <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 80045e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80045e4:	fab3 f383 	clz	r3, r3
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d106      	bne.n	80045fc <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2200      	movs	r2, #0
 80045f4:	2100      	movs	r1, #0
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7ff fb22 	bl	8003c40 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2101      	movs	r1, #1
 8004602:	4618      	mov	r0, r3
 8004604:	f7ff fa86 	bl	8003b14 <LL_ADC_GetOffsetChannel>
 8004608:	4603      	mov	r3, r0
 800460a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10a      	bne.n	8004628 <HAL_ADC_ConfigChannel+0x344>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2101      	movs	r1, #1
 8004618:	4618      	mov	r0, r3
 800461a:	f7ff fa7b 	bl	8003b14 <LL_ADC_GetOffsetChannel>
 800461e:	4603      	mov	r3, r0
 8004620:	0e9b      	lsrs	r3, r3, #26
 8004622:	f003 021f 	and.w	r2, r3, #31
 8004626:	e01e      	b.n	8004666 <HAL_ADC_ConfigChannel+0x382>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2101      	movs	r1, #1
 800462e:	4618      	mov	r0, r3
 8004630:	f7ff fa70 	bl	8003b14 <LL_ADC_GetOffsetChannel>
 8004634:	4603      	mov	r3, r0
 8004636:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800463e:	fa93 f3a3 	rbit	r3, r3
 8004642:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004646:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800464a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800464e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8004656:	2320      	movs	r3, #32
 8004658:	e004      	b.n	8004664 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800465a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800465e:	fab3 f383 	clz	r3, r3
 8004662:	b2db      	uxtb	r3, r3
 8004664:	461a      	mov	r2, r3
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800466e:	2b00      	cmp	r3, #0
 8004670:	d105      	bne.n	800467e <HAL_ADC_ConfigChannel+0x39a>
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	0e9b      	lsrs	r3, r3, #26
 8004678:	f003 031f 	and.w	r3, r3, #31
 800467c:	e018      	b.n	80046b0 <HAL_ADC_ConfigChannel+0x3cc>
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004686:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800468a:	fa93 f3a3 	rbit	r3, r3
 800468e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004692:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004696:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800469a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80046a2:	2320      	movs	r3, #32
 80046a4:	e004      	b.n	80046b0 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80046a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046aa:	fab3 f383 	clz	r3, r3
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d106      	bne.n	80046c2 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2200      	movs	r2, #0
 80046ba:	2101      	movs	r1, #1
 80046bc:	4618      	mov	r0, r3
 80046be:	f7ff fabf 	bl	8003c40 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2102      	movs	r1, #2
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7ff fa23 	bl	8003b14 <LL_ADC_GetOffsetChannel>
 80046ce:	4603      	mov	r3, r0
 80046d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10a      	bne.n	80046ee <HAL_ADC_ConfigChannel+0x40a>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2102      	movs	r1, #2
 80046de:	4618      	mov	r0, r3
 80046e0:	f7ff fa18 	bl	8003b14 <LL_ADC_GetOffsetChannel>
 80046e4:	4603      	mov	r3, r0
 80046e6:	0e9b      	lsrs	r3, r3, #26
 80046e8:	f003 021f 	and.w	r2, r3, #31
 80046ec:	e01e      	b.n	800472c <HAL_ADC_ConfigChannel+0x448>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2102      	movs	r1, #2
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7ff fa0d 	bl	8003b14 <LL_ADC_GetOffsetChannel>
 80046fa:	4603      	mov	r3, r0
 80046fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004700:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004704:	fa93 f3a3 	rbit	r3, r3
 8004708:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800470c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004710:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004714:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004718:	2b00      	cmp	r3, #0
 800471a:	d101      	bne.n	8004720 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 800471c:	2320      	movs	r3, #32
 800471e:	e004      	b.n	800472a <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8004720:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004724:	fab3 f383 	clz	r3, r3
 8004728:	b2db      	uxtb	r3, r3
 800472a:	461a      	mov	r2, r3
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004734:	2b00      	cmp	r3, #0
 8004736:	d105      	bne.n	8004744 <HAL_ADC_ConfigChannel+0x460>
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	0e9b      	lsrs	r3, r3, #26
 800473e:	f003 031f 	and.w	r3, r3, #31
 8004742:	e014      	b.n	800476e <HAL_ADC_ConfigChannel+0x48a>
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800474a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800474c:	fa93 f3a3 	rbit	r3, r3
 8004750:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004752:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004754:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004758:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800475c:	2b00      	cmp	r3, #0
 800475e:	d101      	bne.n	8004764 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8004760:	2320      	movs	r3, #32
 8004762:	e004      	b.n	800476e <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8004764:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004768:	fab3 f383 	clz	r3, r3
 800476c:	b2db      	uxtb	r3, r3
 800476e:	429a      	cmp	r2, r3
 8004770:	d106      	bne.n	8004780 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2200      	movs	r2, #0
 8004778:	2102      	movs	r1, #2
 800477a:	4618      	mov	r0, r3
 800477c:	f7ff fa60 	bl	8003c40 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2103      	movs	r1, #3
 8004786:	4618      	mov	r0, r3
 8004788:	f7ff f9c4 	bl	8003b14 <LL_ADC_GetOffsetChannel>
 800478c:	4603      	mov	r3, r0
 800478e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10a      	bne.n	80047ac <HAL_ADC_ConfigChannel+0x4c8>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2103      	movs	r1, #3
 800479c:	4618      	mov	r0, r3
 800479e:	f7ff f9b9 	bl	8003b14 <LL_ADC_GetOffsetChannel>
 80047a2:	4603      	mov	r3, r0
 80047a4:	0e9b      	lsrs	r3, r3, #26
 80047a6:	f003 021f 	and.w	r2, r3, #31
 80047aa:	e017      	b.n	80047dc <HAL_ADC_ConfigChannel+0x4f8>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2103      	movs	r1, #3
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7ff f9ae 	bl	8003b14 <LL_ADC_GetOffsetChannel>
 80047b8:	4603      	mov	r3, r0
 80047ba:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047be:	fa93 f3a3 	rbit	r3, r3
 80047c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80047c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047c6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80047c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80047ce:	2320      	movs	r3, #32
 80047d0:	e003      	b.n	80047da <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80047d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047d4:	fab3 f383 	clz	r3, r3
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	461a      	mov	r2, r3
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d105      	bne.n	80047f4 <HAL_ADC_ConfigChannel+0x510>
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	0e9b      	lsrs	r3, r3, #26
 80047ee:	f003 031f 	and.w	r3, r3, #31
 80047f2:	e011      	b.n	8004818 <HAL_ADC_ConfigChannel+0x534>
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047fc:	fa93 f3a3 	rbit	r3, r3
 8004800:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004802:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004804:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004806:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 800480c:	2320      	movs	r3, #32
 800480e:	e003      	b.n	8004818 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8004810:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004812:	fab3 f383 	clz	r3, r3
 8004816:	b2db      	uxtb	r3, r3
 8004818:	429a      	cmp	r2, r3
 800481a:	d14f      	bne.n	80048bc <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2200      	movs	r2, #0
 8004822:	2103      	movs	r1, #3
 8004824:	4618      	mov	r0, r3
 8004826:	f7ff fa0b 	bl	8003c40 <LL_ADC_SetOffsetState>
 800482a:	e047      	b.n	80048bc <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004832:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	069b      	lsls	r3, r3, #26
 800483c:	429a      	cmp	r2, r3
 800483e:	d107      	bne.n	8004850 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800484e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004856:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	069b      	lsls	r3, r3, #26
 8004860:	429a      	cmp	r2, r3
 8004862:	d107      	bne.n	8004874 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004872:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800487a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	069b      	lsls	r3, r3, #26
 8004884:	429a      	cmp	r2, r3
 8004886:	d107      	bne.n	8004898 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004896:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800489e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	069b      	lsls	r3, r3, #26
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d107      	bne.n	80048bc <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80048ba:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7ff facd 	bl	8003e60 <LL_ADC_IsEnabled>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f040 8219 	bne.w	8004d00 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6818      	ldr	r0, [r3, #0]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	6819      	ldr	r1, [r3, #0]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	461a      	mov	r2, r3
 80048dc:	f7ff fa32 	bl	8003d44 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	4aa1      	ldr	r2, [pc, #644]	; (8004b6c <HAL_ADC_ConfigChannel+0x888>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	f040 812e 	bne.w	8004b48 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d10b      	bne.n	8004914 <HAL_ADC_ConfigChannel+0x630>
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	0e9b      	lsrs	r3, r3, #26
 8004902:	3301      	adds	r3, #1
 8004904:	f003 031f 	and.w	r3, r3, #31
 8004908:	2b09      	cmp	r3, #9
 800490a:	bf94      	ite	ls
 800490c:	2301      	movls	r3, #1
 800490e:	2300      	movhi	r3, #0
 8004910:	b2db      	uxtb	r3, r3
 8004912:	e019      	b.n	8004948 <HAL_ADC_ConfigChannel+0x664>
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800491c:	fa93 f3a3 	rbit	r3, r3
 8004920:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004924:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004926:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 800492c:	2320      	movs	r3, #32
 800492e:	e003      	b.n	8004938 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8004930:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004932:	fab3 f383 	clz	r3, r3
 8004936:	b2db      	uxtb	r3, r3
 8004938:	3301      	adds	r3, #1
 800493a:	f003 031f 	and.w	r3, r3, #31
 800493e:	2b09      	cmp	r3, #9
 8004940:	bf94      	ite	ls
 8004942:	2301      	movls	r3, #1
 8004944:	2300      	movhi	r3, #0
 8004946:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004948:	2b00      	cmp	r3, #0
 800494a:	d079      	beq.n	8004a40 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004954:	2b00      	cmp	r3, #0
 8004956:	d107      	bne.n	8004968 <HAL_ADC_ConfigChannel+0x684>
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	0e9b      	lsrs	r3, r3, #26
 800495e:	3301      	adds	r3, #1
 8004960:	069b      	lsls	r3, r3, #26
 8004962:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004966:	e015      	b.n	8004994 <HAL_ADC_ConfigChannel+0x6b0>
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800496e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004970:	fa93 f3a3 	rbit	r3, r3
 8004974:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004978:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800497a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800497c:	2b00      	cmp	r3, #0
 800497e:	d101      	bne.n	8004984 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004980:	2320      	movs	r3, #32
 8004982:	e003      	b.n	800498c <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004984:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004986:	fab3 f383 	clz	r3, r3
 800498a:	b2db      	uxtb	r3, r3
 800498c:	3301      	adds	r3, #1
 800498e:	069b      	lsls	r3, r3, #26
 8004990:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800499c:	2b00      	cmp	r3, #0
 800499e:	d109      	bne.n	80049b4 <HAL_ADC_ConfigChannel+0x6d0>
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	0e9b      	lsrs	r3, r3, #26
 80049a6:	3301      	adds	r3, #1
 80049a8:	f003 031f 	and.w	r3, r3, #31
 80049ac:	2101      	movs	r1, #1
 80049ae:	fa01 f303 	lsl.w	r3, r1, r3
 80049b2:	e017      	b.n	80049e4 <HAL_ADC_ConfigChannel+0x700>
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049bc:	fa93 f3a3 	rbit	r3, r3
 80049c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80049c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049c4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80049c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d101      	bne.n	80049d0 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 80049cc:	2320      	movs	r3, #32
 80049ce:	e003      	b.n	80049d8 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 80049d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049d2:	fab3 f383 	clz	r3, r3
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	3301      	adds	r3, #1
 80049da:	f003 031f 	and.w	r3, r3, #31
 80049de:	2101      	movs	r1, #1
 80049e0:	fa01 f303 	lsl.w	r3, r1, r3
 80049e4:	ea42 0103 	orr.w	r1, r2, r3
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10a      	bne.n	8004a0a <HAL_ADC_ConfigChannel+0x726>
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	0e9b      	lsrs	r3, r3, #26
 80049fa:	3301      	adds	r3, #1
 80049fc:	f003 021f 	and.w	r2, r3, #31
 8004a00:	4613      	mov	r3, r2
 8004a02:	005b      	lsls	r3, r3, #1
 8004a04:	4413      	add	r3, r2
 8004a06:	051b      	lsls	r3, r3, #20
 8004a08:	e018      	b.n	8004a3c <HAL_ADC_ConfigChannel+0x758>
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a12:	fa93 f3a3 	rbit	r3, r3
 8004a16:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8004a22:	2320      	movs	r3, #32
 8004a24:	e003      	b.n	8004a2e <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8004a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a28:	fab3 f383 	clz	r3, r3
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	3301      	adds	r3, #1
 8004a30:	f003 021f 	and.w	r2, r3, #31
 8004a34:	4613      	mov	r3, r2
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	4413      	add	r3, r2
 8004a3a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a3c:	430b      	orrs	r3, r1
 8004a3e:	e07e      	b.n	8004b3e <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d107      	bne.n	8004a5c <HAL_ADC_ConfigChannel+0x778>
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	0e9b      	lsrs	r3, r3, #26
 8004a52:	3301      	adds	r3, #1
 8004a54:	069b      	lsls	r3, r3, #26
 8004a56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a5a:	e015      	b.n	8004a88 <HAL_ADC_ConfigChannel+0x7a4>
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a64:	fa93 f3a3 	rbit	r3, r3
 8004a68:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d101      	bne.n	8004a78 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004a74:	2320      	movs	r3, #32
 8004a76:	e003      	b.n	8004a80 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7a:	fab3 f383 	clz	r3, r3
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	3301      	adds	r3, #1
 8004a82:	069b      	lsls	r3, r3, #26
 8004a84:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d109      	bne.n	8004aa8 <HAL_ADC_ConfigChannel+0x7c4>
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	0e9b      	lsrs	r3, r3, #26
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	f003 031f 	and.w	r3, r3, #31
 8004aa0:	2101      	movs	r1, #1
 8004aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa6:	e017      	b.n	8004ad8 <HAL_ADC_ConfigChannel+0x7f4>
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	fa93 f3a3 	rbit	r3, r3
 8004ab4:	61bb      	str	r3, [r7, #24]
  return result;
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004aba:	6a3b      	ldr	r3, [r7, #32]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d101      	bne.n	8004ac4 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004ac0:	2320      	movs	r3, #32
 8004ac2:	e003      	b.n	8004acc <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004ac4:	6a3b      	ldr	r3, [r7, #32]
 8004ac6:	fab3 f383 	clz	r3, r3
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	3301      	adds	r3, #1
 8004ace:	f003 031f 	and.w	r3, r3, #31
 8004ad2:	2101      	movs	r1, #1
 8004ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad8:	ea42 0103 	orr.w	r1, r2, r3
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10d      	bne.n	8004b04 <HAL_ADC_ConfigChannel+0x820>
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	0e9b      	lsrs	r3, r3, #26
 8004aee:	3301      	adds	r3, #1
 8004af0:	f003 021f 	and.w	r2, r3, #31
 8004af4:	4613      	mov	r3, r2
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	4413      	add	r3, r2
 8004afa:	3b1e      	subs	r3, #30
 8004afc:	051b      	lsls	r3, r3, #20
 8004afe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b02:	e01b      	b.n	8004b3c <HAL_ADC_ConfigChannel+0x858>
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	fa93 f3a3 	rbit	r3, r3
 8004b10:	60fb      	str	r3, [r7, #12]
  return result;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004b1c:	2320      	movs	r3, #32
 8004b1e:	e003      	b.n	8004b28 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	fab3 f383 	clz	r3, r3
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	3301      	adds	r3, #1
 8004b2a:	f003 021f 	and.w	r2, r3, #31
 8004b2e:	4613      	mov	r3, r2
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	4413      	add	r3, r2
 8004b34:	3b1e      	subs	r3, #30
 8004b36:	051b      	lsls	r3, r3, #20
 8004b38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b3c:	430b      	orrs	r3, r1
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	6892      	ldr	r2, [r2, #8]
 8004b42:	4619      	mov	r1, r3
 8004b44:	f7ff f8d2 	bl	8003cec <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f280 80d7 	bge.w	8004d00 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a06      	ldr	r2, [pc, #24]	; (8004b70 <HAL_ADC_ConfigChannel+0x88c>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d004      	beq.n	8004b66 <HAL_ADC_ConfigChannel+0x882>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a04      	ldr	r2, [pc, #16]	; (8004b74 <HAL_ADC_ConfigChannel+0x890>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d10a      	bne.n	8004b7c <HAL_ADC_ConfigChannel+0x898>
 8004b66:	4b04      	ldr	r3, [pc, #16]	; (8004b78 <HAL_ADC_ConfigChannel+0x894>)
 8004b68:	e009      	b.n	8004b7e <HAL_ADC_ConfigChannel+0x89a>
 8004b6a:	bf00      	nop
 8004b6c:	47ff0000 	.word	0x47ff0000
 8004b70:	40022000 	.word	0x40022000
 8004b74:	40022100 	.word	0x40022100
 8004b78:	40022300 	.word	0x40022300
 8004b7c:	4b65      	ldr	r3, [pc, #404]	; (8004d14 <HAL_ADC_ConfigChannel+0xa30>)
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7fe ff88 	bl	8003a94 <LL_ADC_GetCommonPathInternalCh>
 8004b84:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a62      	ldr	r2, [pc, #392]	; (8004d18 <HAL_ADC_ConfigChannel+0xa34>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d004      	beq.n	8004b9c <HAL_ADC_ConfigChannel+0x8b8>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a61      	ldr	r2, [pc, #388]	; (8004d1c <HAL_ADC_ConfigChannel+0xa38>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d10e      	bne.n	8004bba <HAL_ADC_ConfigChannel+0x8d6>
 8004b9c:	485e      	ldr	r0, [pc, #376]	; (8004d18 <HAL_ADC_ConfigChannel+0xa34>)
 8004b9e:	f7ff f95f 	bl	8003e60 <LL_ADC_IsEnabled>
 8004ba2:	4604      	mov	r4, r0
 8004ba4:	485d      	ldr	r0, [pc, #372]	; (8004d1c <HAL_ADC_ConfigChannel+0xa38>)
 8004ba6:	f7ff f95b 	bl	8003e60 <LL_ADC_IsEnabled>
 8004baa:	4603      	mov	r3, r0
 8004bac:	4323      	orrs	r3, r4
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	bf0c      	ite	eq
 8004bb2:	2301      	moveq	r3, #1
 8004bb4:	2300      	movne	r3, #0
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	e008      	b.n	8004bcc <HAL_ADC_ConfigChannel+0x8e8>
 8004bba:	4859      	ldr	r0, [pc, #356]	; (8004d20 <HAL_ADC_ConfigChannel+0xa3c>)
 8004bbc:	f7ff f950 	bl	8003e60 <LL_ADC_IsEnabled>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	bf0c      	ite	eq
 8004bc6:	2301      	moveq	r3, #1
 8004bc8:	2300      	movne	r3, #0
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f000 8084 	beq.w	8004cda <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a53      	ldr	r2, [pc, #332]	; (8004d24 <HAL_ADC_ConfigChannel+0xa40>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d132      	bne.n	8004c42 <HAL_ADC_ConfigChannel+0x95e>
 8004bdc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004be0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d12c      	bne.n	8004c42 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a4c      	ldr	r2, [pc, #304]	; (8004d20 <HAL_ADC_ConfigChannel+0xa3c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	f040 8086 	bne.w	8004d00 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a47      	ldr	r2, [pc, #284]	; (8004d18 <HAL_ADC_ConfigChannel+0xa34>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d004      	beq.n	8004c08 <HAL_ADC_ConfigChannel+0x924>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a46      	ldr	r2, [pc, #280]	; (8004d1c <HAL_ADC_ConfigChannel+0xa38>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d101      	bne.n	8004c0c <HAL_ADC_ConfigChannel+0x928>
 8004c08:	4a47      	ldr	r2, [pc, #284]	; (8004d28 <HAL_ADC_ConfigChannel+0xa44>)
 8004c0a:	e000      	b.n	8004c0e <HAL_ADC_ConfigChannel+0x92a>
 8004c0c:	4a41      	ldr	r2, [pc, #260]	; (8004d14 <HAL_ADC_ConfigChannel+0xa30>)
 8004c0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c16:	4619      	mov	r1, r3
 8004c18:	4610      	mov	r0, r2
 8004c1a:	f7fe ff28 	bl	8003a6e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c1e:	4b43      	ldr	r3, [pc, #268]	; (8004d2c <HAL_ADC_ConfigChannel+0xa48>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	099b      	lsrs	r3, r3, #6
 8004c24:	4a42      	ldr	r2, [pc, #264]	; (8004d30 <HAL_ADC_ConfigChannel+0xa4c>)
 8004c26:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2a:	099b      	lsrs	r3, r3, #6
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	005b      	lsls	r3, r3, #1
 8004c30:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004c32:	e002      	b.n	8004c3a <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1f9      	bne.n	8004c34 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c40:	e05e      	b.n	8004d00 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a3b      	ldr	r2, [pc, #236]	; (8004d34 <HAL_ADC_ConfigChannel+0xa50>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d120      	bne.n	8004c8e <HAL_ADC_ConfigChannel+0x9aa>
 8004c4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d11a      	bne.n	8004c8e <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a30      	ldr	r2, [pc, #192]	; (8004d20 <HAL_ADC_ConfigChannel+0xa3c>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d14e      	bne.n	8004d00 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a2c      	ldr	r2, [pc, #176]	; (8004d18 <HAL_ADC_ConfigChannel+0xa34>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d004      	beq.n	8004c76 <HAL_ADC_ConfigChannel+0x992>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a2a      	ldr	r2, [pc, #168]	; (8004d1c <HAL_ADC_ConfigChannel+0xa38>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d101      	bne.n	8004c7a <HAL_ADC_ConfigChannel+0x996>
 8004c76:	4a2c      	ldr	r2, [pc, #176]	; (8004d28 <HAL_ADC_ConfigChannel+0xa44>)
 8004c78:	e000      	b.n	8004c7c <HAL_ADC_ConfigChannel+0x998>
 8004c7a:	4a26      	ldr	r2, [pc, #152]	; (8004d14 <HAL_ADC_ConfigChannel+0xa30>)
 8004c7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c84:	4619      	mov	r1, r3
 8004c86:	4610      	mov	r0, r2
 8004c88:	f7fe fef1 	bl	8003a6e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c8c:	e038      	b.n	8004d00 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a29      	ldr	r2, [pc, #164]	; (8004d38 <HAL_ADC_ConfigChannel+0xa54>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d133      	bne.n	8004d00 <HAL_ADC_ConfigChannel+0xa1c>
 8004c98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d12d      	bne.n	8004d00 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a1d      	ldr	r2, [pc, #116]	; (8004d20 <HAL_ADC_ConfigChannel+0xa3c>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d128      	bne.n	8004d00 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a19      	ldr	r2, [pc, #100]	; (8004d18 <HAL_ADC_ConfigChannel+0xa34>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d004      	beq.n	8004cc2 <HAL_ADC_ConfigChannel+0x9de>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a17      	ldr	r2, [pc, #92]	; (8004d1c <HAL_ADC_ConfigChannel+0xa38>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d101      	bne.n	8004cc6 <HAL_ADC_ConfigChannel+0x9e2>
 8004cc2:	4a19      	ldr	r2, [pc, #100]	; (8004d28 <HAL_ADC_ConfigChannel+0xa44>)
 8004cc4:	e000      	b.n	8004cc8 <HAL_ADC_ConfigChannel+0x9e4>
 8004cc6:	4a13      	ldr	r2, [pc, #76]	; (8004d14 <HAL_ADC_ConfigChannel+0xa30>)
 8004cc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ccc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	4610      	mov	r0, r2
 8004cd4:	f7fe fecb 	bl	8003a6e <LL_ADC_SetCommonPathInternalCh>
 8004cd8:	e012      	b.n	8004d00 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cde:	f043 0220 	orr.w	r2, r3, #32
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004cec:	e008      	b.n	8004d00 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cf2:	f043 0220 	orr.w	r2, r3, #32
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004d08:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	37e4      	adds	r7, #228	; 0xe4
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd90      	pop	{r4, r7, pc}
 8004d14:	58026300 	.word	0x58026300
 8004d18:	40022000 	.word	0x40022000
 8004d1c:	40022100 	.word	0x40022100
 8004d20:	58026000 	.word	0x58026000
 8004d24:	c7520000 	.word	0xc7520000
 8004d28:	40022300 	.word	0x40022300
 8004d2c:	24000000 	.word	0x24000000
 8004d30:	053e2d63 	.word	0x053e2d63
 8004d34:	c3210000 	.word	0xc3210000
 8004d38:	cb840000 	.word	0xcb840000

08004d3c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a6c      	ldr	r2, [pc, #432]	; (8004efc <ADC_ConfigureBoostMode+0x1c0>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d004      	beq.n	8004d58 <ADC_ConfigureBoostMode+0x1c>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a6b      	ldr	r2, [pc, #428]	; (8004f00 <ADC_ConfigureBoostMode+0x1c4>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d109      	bne.n	8004d6c <ADC_ConfigureBoostMode+0x30>
 8004d58:	4b6a      	ldr	r3, [pc, #424]	; (8004f04 <ADC_ConfigureBoostMode+0x1c8>)
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	bf14      	ite	ne
 8004d64:	2301      	movne	r3, #1
 8004d66:	2300      	moveq	r3, #0
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	e008      	b.n	8004d7e <ADC_ConfigureBoostMode+0x42>
 8004d6c:	4b66      	ldr	r3, [pc, #408]	; (8004f08 <ADC_ConfigureBoostMode+0x1cc>)
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	bf14      	ite	ne
 8004d78:	2301      	movne	r3, #1
 8004d7a:	2300      	moveq	r3, #0
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d01c      	beq.n	8004dbc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004d82:	f005 fc91 	bl	800a6a8 <HAL_RCC_GetHCLKFreq>
 8004d86:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d90:	d010      	beq.n	8004db4 <ADC_ConfigureBoostMode+0x78>
 8004d92:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d96:	d873      	bhi.n	8004e80 <ADC_ConfigureBoostMode+0x144>
 8004d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d9c:	d002      	beq.n	8004da4 <ADC_ConfigureBoostMode+0x68>
 8004d9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004da2:	d16d      	bne.n	8004e80 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	0c1b      	lsrs	r3, r3, #16
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db0:	60fb      	str	r3, [r7, #12]
        break;
 8004db2:	e068      	b.n	8004e86 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	089b      	lsrs	r3, r3, #2
 8004db8:	60fb      	str	r3, [r7, #12]
        break;
 8004dba:	e064      	b.n	8004e86 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004dbc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004dc0:	f04f 0100 	mov.w	r1, #0
 8004dc4:	f006 fe6c 	bl	800baa0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004dc8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004dd2:	d051      	beq.n	8004e78 <ADC_ConfigureBoostMode+0x13c>
 8004dd4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004dd8:	d854      	bhi.n	8004e84 <ADC_ConfigureBoostMode+0x148>
 8004dda:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004dde:	d047      	beq.n	8004e70 <ADC_ConfigureBoostMode+0x134>
 8004de0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004de4:	d84e      	bhi.n	8004e84 <ADC_ConfigureBoostMode+0x148>
 8004de6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004dea:	d03d      	beq.n	8004e68 <ADC_ConfigureBoostMode+0x12c>
 8004dec:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004df0:	d848      	bhi.n	8004e84 <ADC_ConfigureBoostMode+0x148>
 8004df2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004df6:	d033      	beq.n	8004e60 <ADC_ConfigureBoostMode+0x124>
 8004df8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dfc:	d842      	bhi.n	8004e84 <ADC_ConfigureBoostMode+0x148>
 8004dfe:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004e02:	d029      	beq.n	8004e58 <ADC_ConfigureBoostMode+0x11c>
 8004e04:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004e08:	d83c      	bhi.n	8004e84 <ADC_ConfigureBoostMode+0x148>
 8004e0a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004e0e:	d01a      	beq.n	8004e46 <ADC_ConfigureBoostMode+0x10a>
 8004e10:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004e14:	d836      	bhi.n	8004e84 <ADC_ConfigureBoostMode+0x148>
 8004e16:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004e1a:	d014      	beq.n	8004e46 <ADC_ConfigureBoostMode+0x10a>
 8004e1c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004e20:	d830      	bhi.n	8004e84 <ADC_ConfigureBoostMode+0x148>
 8004e22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e26:	d00e      	beq.n	8004e46 <ADC_ConfigureBoostMode+0x10a>
 8004e28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e2c:	d82a      	bhi.n	8004e84 <ADC_ConfigureBoostMode+0x148>
 8004e2e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004e32:	d008      	beq.n	8004e46 <ADC_ConfigureBoostMode+0x10a>
 8004e34:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004e38:	d824      	bhi.n	8004e84 <ADC_ConfigureBoostMode+0x148>
 8004e3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e3e:	d002      	beq.n	8004e46 <ADC_ConfigureBoostMode+0x10a>
 8004e40:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e44:	d11e      	bne.n	8004e84 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	0c9b      	lsrs	r3, r3, #18
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e54:	60fb      	str	r3, [r7, #12]
        break;
 8004e56:	e016      	b.n	8004e86 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	091b      	lsrs	r3, r3, #4
 8004e5c:	60fb      	str	r3, [r7, #12]
        break;
 8004e5e:	e012      	b.n	8004e86 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	095b      	lsrs	r3, r3, #5
 8004e64:	60fb      	str	r3, [r7, #12]
        break;
 8004e66:	e00e      	b.n	8004e86 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	099b      	lsrs	r3, r3, #6
 8004e6c:	60fb      	str	r3, [r7, #12]
        break;
 8004e6e:	e00a      	b.n	8004e86 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	09db      	lsrs	r3, r3, #7
 8004e74:	60fb      	str	r3, [r7, #12]
        break;
 8004e76:	e006      	b.n	8004e86 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	0a1b      	lsrs	r3, r3, #8
 8004e7c:	60fb      	str	r3, [r7, #12]
        break;
 8004e7e:	e002      	b.n	8004e86 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004e80:	bf00      	nop
 8004e82:	e000      	b.n	8004e86 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004e84:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	085b      	lsrs	r3, r3, #1
 8004e8a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4a1f      	ldr	r2, [pc, #124]	; (8004f0c <ADC_ConfigureBoostMode+0x1d0>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d808      	bhi.n	8004ea6 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689a      	ldr	r2, [r3, #8]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004ea2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004ea4:	e025      	b.n	8004ef2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	4a19      	ldr	r2, [pc, #100]	; (8004f10 <ADC_ConfigureBoostMode+0x1d4>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d80a      	bhi.n	8004ec4 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ec0:	609a      	str	r2, [r3, #8]
}
 8004ec2:	e016      	b.n	8004ef2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4a13      	ldr	r2, [pc, #76]	; (8004f14 <ADC_ConfigureBoostMode+0x1d8>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d80a      	bhi.n	8004ee2 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ede:	609a      	str	r2, [r3, #8]
}
 8004ee0:	e007      	b.n	8004ef2 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	689a      	ldr	r2, [r3, #8]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004ef0:	609a      	str	r2, [r3, #8]
}
 8004ef2:	bf00      	nop
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	40022000 	.word	0x40022000
 8004f00:	40022100 	.word	0x40022100
 8004f04:	40022300 	.word	0x40022300
 8004f08:	58026300 	.word	0x58026300
 8004f0c:	005f5e10 	.word	0x005f5e10
 8004f10:	00bebc20 	.word	0x00bebc20
 8004f14:	017d7840 	.word	0x017d7840

08004f18 <LL_ADC_IsEnabled>:
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f003 0301 	and.w	r3, r3, #1
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d101      	bne.n	8004f30 <LL_ADC_IsEnabled+0x18>
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e000      	b.n	8004f32 <LL_ADC_IsEnabled+0x1a>
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <LL_ADC_REG_IsConversionOngoing>:
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b083      	sub	sp, #12
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f003 0304 	and.w	r3, r3, #4
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	d101      	bne.n	8004f56 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004f52:	2301      	movs	r3, #1
 8004f54:	e000      	b.n	8004f58 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004f64:	b590      	push	{r4, r7, lr}
 8004f66:	b0a3      	sub	sp, #140	; 0x8c
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d101      	bne.n	8004f82 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004f7e:	2302      	movs	r3, #2
 8004f80:	e0c1      	b.n	8005106 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a5e      	ldr	r2, [pc, #376]	; (8005110 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d102      	bne.n	8004fa2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004f9c:	4b5d      	ldr	r3, [pc, #372]	; (8005114 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004f9e:	60fb      	str	r3, [r7, #12]
 8004fa0:	e001      	b.n	8004fa6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10b      	bne.n	8004fc4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fb0:	f043 0220 	orr.w	r2, r3, #32
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e0a0      	b.n	8005106 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7ff ffb9 	bl	8004f3e <LL_ADC_REG_IsConversionOngoing>
 8004fcc:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff ffb2 	bl	8004f3e <LL_ADC_REG_IsConversionOngoing>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f040 8081 	bne.w	80050e4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004fe2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d17c      	bne.n	80050e4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a48      	ldr	r2, [pc, #288]	; (8005110 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d004      	beq.n	8004ffe <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a46      	ldr	r2, [pc, #280]	; (8005114 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d101      	bne.n	8005002 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004ffe:	4b46      	ldr	r3, [pc, #280]	; (8005118 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005000:	e000      	b.n	8005004 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8005002:	4b46      	ldr	r3, [pc, #280]	; (800511c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005004:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d039      	beq.n	8005082 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800500e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	431a      	orrs	r2, r3
 800501c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800501e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a3a      	ldr	r2, [pc, #232]	; (8005110 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d004      	beq.n	8005034 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a39      	ldr	r2, [pc, #228]	; (8005114 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d10e      	bne.n	8005052 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005034:	4836      	ldr	r0, [pc, #216]	; (8005110 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005036:	f7ff ff6f 	bl	8004f18 <LL_ADC_IsEnabled>
 800503a:	4604      	mov	r4, r0
 800503c:	4835      	ldr	r0, [pc, #212]	; (8005114 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800503e:	f7ff ff6b 	bl	8004f18 <LL_ADC_IsEnabled>
 8005042:	4603      	mov	r3, r0
 8005044:	4323      	orrs	r3, r4
 8005046:	2b00      	cmp	r3, #0
 8005048:	bf0c      	ite	eq
 800504a:	2301      	moveq	r3, #1
 800504c:	2300      	movne	r3, #0
 800504e:	b2db      	uxtb	r3, r3
 8005050:	e008      	b.n	8005064 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8005052:	4833      	ldr	r0, [pc, #204]	; (8005120 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005054:	f7ff ff60 	bl	8004f18 <LL_ADC_IsEnabled>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	bf0c      	ite	eq
 800505e:	2301      	moveq	r3, #1
 8005060:	2300      	movne	r3, #0
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b00      	cmp	r3, #0
 8005066:	d047      	beq.n	80050f8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005068:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800506a:	689a      	ldr	r2, [r3, #8]
 800506c:	4b2d      	ldr	r3, [pc, #180]	; (8005124 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800506e:	4013      	ands	r3, r2
 8005070:	683a      	ldr	r2, [r7, #0]
 8005072:	6811      	ldr	r1, [r2, #0]
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	6892      	ldr	r2, [r2, #8]
 8005078:	430a      	orrs	r2, r1
 800507a:	431a      	orrs	r2, r3
 800507c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800507e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005080:	e03a      	b.n	80050f8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005082:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800508a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800508c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a1f      	ldr	r2, [pc, #124]	; (8005110 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d004      	beq.n	80050a2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a1d      	ldr	r2, [pc, #116]	; (8005114 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d10e      	bne.n	80050c0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80050a2:	481b      	ldr	r0, [pc, #108]	; (8005110 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80050a4:	f7ff ff38 	bl	8004f18 <LL_ADC_IsEnabled>
 80050a8:	4604      	mov	r4, r0
 80050aa:	481a      	ldr	r0, [pc, #104]	; (8005114 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80050ac:	f7ff ff34 	bl	8004f18 <LL_ADC_IsEnabled>
 80050b0:	4603      	mov	r3, r0
 80050b2:	4323      	orrs	r3, r4
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	bf0c      	ite	eq
 80050b8:	2301      	moveq	r3, #1
 80050ba:	2300      	movne	r3, #0
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	e008      	b.n	80050d2 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80050c0:	4817      	ldr	r0, [pc, #92]	; (8005120 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80050c2:	f7ff ff29 	bl	8004f18 <LL_ADC_IsEnabled>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	bf0c      	ite	eq
 80050cc:	2301      	moveq	r3, #1
 80050ce:	2300      	movne	r3, #0
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d010      	beq.n	80050f8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80050d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050d8:	689a      	ldr	r2, [r3, #8]
 80050da:	4b12      	ldr	r3, [pc, #72]	; (8005124 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80050dc:	4013      	ands	r3, r2
 80050de:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80050e0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80050e2:	e009      	b.n	80050f8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050e8:	f043 0220 	orr.w	r2, r3, #32
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80050f6:	e000      	b.n	80050fa <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80050f8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005102:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8005106:	4618      	mov	r0, r3
 8005108:	378c      	adds	r7, #140	; 0x8c
 800510a:	46bd      	mov	sp, r7
 800510c:	bd90      	pop	{r4, r7, pc}
 800510e:	bf00      	nop
 8005110:	40022000 	.word	0x40022000
 8005114:	40022100 	.word	0x40022100
 8005118:	40022300 	.word	0x40022300
 800511c:	58026300 	.word	0x58026300
 8005120:	58026000 	.word	0x58026000
 8005124:	fffff0e0 	.word	0xfffff0e0

08005128 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f003 0307 	and.w	r3, r3, #7
 8005136:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005138:	4b0b      	ldr	r3, [pc, #44]	; (8005168 <__NVIC_SetPriorityGrouping+0x40>)
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005144:	4013      	ands	r3, r2
 8005146:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005150:	4b06      	ldr	r3, [pc, #24]	; (800516c <__NVIC_SetPriorityGrouping+0x44>)
 8005152:	4313      	orrs	r3, r2
 8005154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005156:	4a04      	ldr	r2, [pc, #16]	; (8005168 <__NVIC_SetPriorityGrouping+0x40>)
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	60d3      	str	r3, [r2, #12]
}
 800515c:	bf00      	nop
 800515e:	3714      	adds	r7, #20
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr
 8005168:	e000ed00 	.word	0xe000ed00
 800516c:	05fa0000 	.word	0x05fa0000

08005170 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005170:	b480      	push	{r7}
 8005172:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005174:	4b04      	ldr	r3, [pc, #16]	; (8005188 <__NVIC_GetPriorityGrouping+0x18>)
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	0a1b      	lsrs	r3, r3, #8
 800517a:	f003 0307 	and.w	r3, r3, #7
}
 800517e:	4618      	mov	r0, r3
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	e000ed00 	.word	0xe000ed00

0800518c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	4603      	mov	r3, r0
 8005194:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005196:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800519a:	2b00      	cmp	r3, #0
 800519c:	db0b      	blt.n	80051b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800519e:	88fb      	ldrh	r3, [r7, #6]
 80051a0:	f003 021f 	and.w	r2, r3, #31
 80051a4:	4907      	ldr	r1, [pc, #28]	; (80051c4 <__NVIC_EnableIRQ+0x38>)
 80051a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051aa:	095b      	lsrs	r3, r3, #5
 80051ac:	2001      	movs	r0, #1
 80051ae:	fa00 f202 	lsl.w	r2, r0, r2
 80051b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80051b6:	bf00      	nop
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	e000e100 	.word	0xe000e100

080051c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	4603      	mov	r3, r0
 80051d0:	6039      	str	r1, [r7, #0]
 80051d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80051d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	db0a      	blt.n	80051f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	b2da      	uxtb	r2, r3
 80051e0:	490c      	ldr	r1, [pc, #48]	; (8005214 <__NVIC_SetPriority+0x4c>)
 80051e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051e6:	0112      	lsls	r2, r2, #4
 80051e8:	b2d2      	uxtb	r2, r2
 80051ea:	440b      	add	r3, r1
 80051ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051f0:	e00a      	b.n	8005208 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	b2da      	uxtb	r2, r3
 80051f6:	4908      	ldr	r1, [pc, #32]	; (8005218 <__NVIC_SetPriority+0x50>)
 80051f8:	88fb      	ldrh	r3, [r7, #6]
 80051fa:	f003 030f 	and.w	r3, r3, #15
 80051fe:	3b04      	subs	r3, #4
 8005200:	0112      	lsls	r2, r2, #4
 8005202:	b2d2      	uxtb	r2, r2
 8005204:	440b      	add	r3, r1
 8005206:	761a      	strb	r2, [r3, #24]
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr
 8005214:	e000e100 	.word	0xe000e100
 8005218:	e000ed00 	.word	0xe000ed00

0800521c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800521c:	b480      	push	{r7}
 800521e:	b089      	sub	sp, #36	; 0x24
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f003 0307 	and.w	r3, r3, #7
 800522e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	f1c3 0307 	rsb	r3, r3, #7
 8005236:	2b04      	cmp	r3, #4
 8005238:	bf28      	it	cs
 800523a:	2304      	movcs	r3, #4
 800523c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	3304      	adds	r3, #4
 8005242:	2b06      	cmp	r3, #6
 8005244:	d902      	bls.n	800524c <NVIC_EncodePriority+0x30>
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	3b03      	subs	r3, #3
 800524a:	e000      	b.n	800524e <NVIC_EncodePriority+0x32>
 800524c:	2300      	movs	r3, #0
 800524e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005250:	f04f 32ff 	mov.w	r2, #4294967295
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	fa02 f303 	lsl.w	r3, r2, r3
 800525a:	43da      	mvns	r2, r3
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	401a      	ands	r2, r3
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005264:	f04f 31ff 	mov.w	r1, #4294967295
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	fa01 f303 	lsl.w	r3, r1, r3
 800526e:	43d9      	mvns	r1, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005274:	4313      	orrs	r3, r2
         );
}
 8005276:	4618      	mov	r0, r3
 8005278:	3724      	adds	r7, #36	; 0x24
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
	...

08005284 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	3b01      	subs	r3, #1
 8005290:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005294:	d301      	bcc.n	800529a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005296:	2301      	movs	r3, #1
 8005298:	e00f      	b.n	80052ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800529a:	4a0a      	ldr	r2, [pc, #40]	; (80052c4 <SysTick_Config+0x40>)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	3b01      	subs	r3, #1
 80052a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80052a2:	210f      	movs	r1, #15
 80052a4:	f04f 30ff 	mov.w	r0, #4294967295
 80052a8:	f7ff ff8e 	bl	80051c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80052ac:	4b05      	ldr	r3, [pc, #20]	; (80052c4 <SysTick_Config+0x40>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80052b2:	4b04      	ldr	r3, [pc, #16]	; (80052c4 <SysTick_Config+0x40>)
 80052b4:	2207      	movs	r2, #7
 80052b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3708      	adds	r7, #8
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	e000e010 	.word	0xe000e010

080052c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f7ff ff29 	bl	8005128 <__NVIC_SetPriorityGrouping>
}
 80052d6:	bf00      	nop
 80052d8:	3708      	adds	r7, #8
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052de:	b580      	push	{r7, lr}
 80052e0:	b086      	sub	sp, #24
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	4603      	mov	r3, r0
 80052e6:	60b9      	str	r1, [r7, #8]
 80052e8:	607a      	str	r2, [r7, #4]
 80052ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80052ec:	f7ff ff40 	bl	8005170 <__NVIC_GetPriorityGrouping>
 80052f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	68b9      	ldr	r1, [r7, #8]
 80052f6:	6978      	ldr	r0, [r7, #20]
 80052f8:	f7ff ff90 	bl	800521c <NVIC_EncodePriority>
 80052fc:	4602      	mov	r2, r0
 80052fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005302:	4611      	mov	r1, r2
 8005304:	4618      	mov	r0, r3
 8005306:	f7ff ff5f 	bl	80051c8 <__NVIC_SetPriority>
}
 800530a:	bf00      	nop
 800530c:	3718      	adds	r7, #24
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b082      	sub	sp, #8
 8005316:	af00      	add	r7, sp, #0
 8005318:	4603      	mov	r3, r0
 800531a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800531c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005320:	4618      	mov	r0, r3
 8005322:	f7ff ff33 	bl	800518c <__NVIC_EnableIRQ>
}
 8005326:	bf00      	nop
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800532e:	b580      	push	{r7, lr}
 8005330:	b082      	sub	sp, #8
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7ff ffa4 	bl	8005284 <SysTick_Config>
 800533c:	4603      	mov	r3, r0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
	...

08005348 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005350:	f7fe fb34 	bl	80039bc <HAL_GetTick>
 8005354:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d101      	bne.n	8005360 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e312      	b.n	8005986 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a66      	ldr	r2, [pc, #408]	; (8005500 <HAL_DMA_Init+0x1b8>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d04a      	beq.n	8005400 <HAL_DMA_Init+0xb8>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a65      	ldr	r2, [pc, #404]	; (8005504 <HAL_DMA_Init+0x1bc>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d045      	beq.n	8005400 <HAL_DMA_Init+0xb8>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a63      	ldr	r2, [pc, #396]	; (8005508 <HAL_DMA_Init+0x1c0>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d040      	beq.n	8005400 <HAL_DMA_Init+0xb8>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a62      	ldr	r2, [pc, #392]	; (800550c <HAL_DMA_Init+0x1c4>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d03b      	beq.n	8005400 <HAL_DMA_Init+0xb8>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a60      	ldr	r2, [pc, #384]	; (8005510 <HAL_DMA_Init+0x1c8>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d036      	beq.n	8005400 <HAL_DMA_Init+0xb8>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a5f      	ldr	r2, [pc, #380]	; (8005514 <HAL_DMA_Init+0x1cc>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d031      	beq.n	8005400 <HAL_DMA_Init+0xb8>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a5d      	ldr	r2, [pc, #372]	; (8005518 <HAL_DMA_Init+0x1d0>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d02c      	beq.n	8005400 <HAL_DMA_Init+0xb8>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a5c      	ldr	r2, [pc, #368]	; (800551c <HAL_DMA_Init+0x1d4>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d027      	beq.n	8005400 <HAL_DMA_Init+0xb8>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a5a      	ldr	r2, [pc, #360]	; (8005520 <HAL_DMA_Init+0x1d8>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d022      	beq.n	8005400 <HAL_DMA_Init+0xb8>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a59      	ldr	r2, [pc, #356]	; (8005524 <HAL_DMA_Init+0x1dc>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d01d      	beq.n	8005400 <HAL_DMA_Init+0xb8>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a57      	ldr	r2, [pc, #348]	; (8005528 <HAL_DMA_Init+0x1e0>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d018      	beq.n	8005400 <HAL_DMA_Init+0xb8>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a56      	ldr	r2, [pc, #344]	; (800552c <HAL_DMA_Init+0x1e4>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d013      	beq.n	8005400 <HAL_DMA_Init+0xb8>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a54      	ldr	r2, [pc, #336]	; (8005530 <HAL_DMA_Init+0x1e8>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d00e      	beq.n	8005400 <HAL_DMA_Init+0xb8>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a53      	ldr	r2, [pc, #332]	; (8005534 <HAL_DMA_Init+0x1ec>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d009      	beq.n	8005400 <HAL_DMA_Init+0xb8>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a51      	ldr	r2, [pc, #324]	; (8005538 <HAL_DMA_Init+0x1f0>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d004      	beq.n	8005400 <HAL_DMA_Init+0xb8>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a50      	ldr	r2, [pc, #320]	; (800553c <HAL_DMA_Init+0x1f4>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d101      	bne.n	8005404 <HAL_DMA_Init+0xbc>
 8005400:	2301      	movs	r3, #1
 8005402:	e000      	b.n	8005406 <HAL_DMA_Init+0xbe>
 8005404:	2300      	movs	r3, #0
 8005406:	2b00      	cmp	r3, #0
 8005408:	f000 813c 	beq.w	8005684 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2202      	movs	r2, #2
 8005410:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a37      	ldr	r2, [pc, #220]	; (8005500 <HAL_DMA_Init+0x1b8>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d04a      	beq.n	80054bc <HAL_DMA_Init+0x174>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a36      	ldr	r2, [pc, #216]	; (8005504 <HAL_DMA_Init+0x1bc>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d045      	beq.n	80054bc <HAL_DMA_Init+0x174>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a34      	ldr	r2, [pc, #208]	; (8005508 <HAL_DMA_Init+0x1c0>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d040      	beq.n	80054bc <HAL_DMA_Init+0x174>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a33      	ldr	r2, [pc, #204]	; (800550c <HAL_DMA_Init+0x1c4>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d03b      	beq.n	80054bc <HAL_DMA_Init+0x174>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a31      	ldr	r2, [pc, #196]	; (8005510 <HAL_DMA_Init+0x1c8>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d036      	beq.n	80054bc <HAL_DMA_Init+0x174>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a30      	ldr	r2, [pc, #192]	; (8005514 <HAL_DMA_Init+0x1cc>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d031      	beq.n	80054bc <HAL_DMA_Init+0x174>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a2e      	ldr	r2, [pc, #184]	; (8005518 <HAL_DMA_Init+0x1d0>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d02c      	beq.n	80054bc <HAL_DMA_Init+0x174>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a2d      	ldr	r2, [pc, #180]	; (800551c <HAL_DMA_Init+0x1d4>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d027      	beq.n	80054bc <HAL_DMA_Init+0x174>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a2b      	ldr	r2, [pc, #172]	; (8005520 <HAL_DMA_Init+0x1d8>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d022      	beq.n	80054bc <HAL_DMA_Init+0x174>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a2a      	ldr	r2, [pc, #168]	; (8005524 <HAL_DMA_Init+0x1dc>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d01d      	beq.n	80054bc <HAL_DMA_Init+0x174>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a28      	ldr	r2, [pc, #160]	; (8005528 <HAL_DMA_Init+0x1e0>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d018      	beq.n	80054bc <HAL_DMA_Init+0x174>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a27      	ldr	r2, [pc, #156]	; (800552c <HAL_DMA_Init+0x1e4>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d013      	beq.n	80054bc <HAL_DMA_Init+0x174>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a25      	ldr	r2, [pc, #148]	; (8005530 <HAL_DMA_Init+0x1e8>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d00e      	beq.n	80054bc <HAL_DMA_Init+0x174>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a24      	ldr	r2, [pc, #144]	; (8005534 <HAL_DMA_Init+0x1ec>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d009      	beq.n	80054bc <HAL_DMA_Init+0x174>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a22      	ldr	r2, [pc, #136]	; (8005538 <HAL_DMA_Init+0x1f0>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d004      	beq.n	80054bc <HAL_DMA_Init+0x174>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a21      	ldr	r2, [pc, #132]	; (800553c <HAL_DMA_Init+0x1f4>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d108      	bne.n	80054ce <HAL_DMA_Init+0x186>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f022 0201 	bic.w	r2, r2, #1
 80054ca:	601a      	str	r2, [r3, #0]
 80054cc:	e007      	b.n	80054de <HAL_DMA_Init+0x196>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f022 0201 	bic.w	r2, r2, #1
 80054dc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80054de:	e02f      	b.n	8005540 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80054e0:	f7fe fa6c 	bl	80039bc <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	2b05      	cmp	r3, #5
 80054ec:	d928      	bls.n	8005540 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2220      	movs	r2, #32
 80054f2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2203      	movs	r2, #3
 80054f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e242      	b.n	8005986 <HAL_DMA_Init+0x63e>
 8005500:	40020010 	.word	0x40020010
 8005504:	40020028 	.word	0x40020028
 8005508:	40020040 	.word	0x40020040
 800550c:	40020058 	.word	0x40020058
 8005510:	40020070 	.word	0x40020070
 8005514:	40020088 	.word	0x40020088
 8005518:	400200a0 	.word	0x400200a0
 800551c:	400200b8 	.word	0x400200b8
 8005520:	40020410 	.word	0x40020410
 8005524:	40020428 	.word	0x40020428
 8005528:	40020440 	.word	0x40020440
 800552c:	40020458 	.word	0x40020458
 8005530:	40020470 	.word	0x40020470
 8005534:	40020488 	.word	0x40020488
 8005538:	400204a0 	.word	0x400204a0
 800553c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1c8      	bne.n	80054e0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	4b83      	ldr	r3, [pc, #524]	; (8005768 <HAL_DMA_Init+0x420>)
 800555a:	4013      	ands	r3, r2
 800555c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005566:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005572:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800557e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a1b      	ldr	r3, [r3, #32]
 8005584:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	4313      	orrs	r3, r2
 800558a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005590:	2b04      	cmp	r3, #4
 8005592:	d107      	bne.n	80055a4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559c:	4313      	orrs	r3, r2
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	2b28      	cmp	r3, #40	; 0x28
 80055aa:	d903      	bls.n	80055b4 <HAL_DMA_Init+0x26c>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	2b2e      	cmp	r3, #46	; 0x2e
 80055b2:	d91f      	bls.n	80055f4 <HAL_DMA_Init+0x2ac>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	2b3e      	cmp	r3, #62	; 0x3e
 80055ba:	d903      	bls.n	80055c4 <HAL_DMA_Init+0x27c>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	2b42      	cmp	r3, #66	; 0x42
 80055c2:	d917      	bls.n	80055f4 <HAL_DMA_Init+0x2ac>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	2b46      	cmp	r3, #70	; 0x46
 80055ca:	d903      	bls.n	80055d4 <HAL_DMA_Init+0x28c>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	2b48      	cmp	r3, #72	; 0x48
 80055d2:	d90f      	bls.n	80055f4 <HAL_DMA_Init+0x2ac>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	2b4e      	cmp	r3, #78	; 0x4e
 80055da:	d903      	bls.n	80055e4 <HAL_DMA_Init+0x29c>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	2b52      	cmp	r3, #82	; 0x52
 80055e2:	d907      	bls.n	80055f4 <HAL_DMA_Init+0x2ac>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	2b73      	cmp	r3, #115	; 0x73
 80055ea:	d905      	bls.n	80055f8 <HAL_DMA_Init+0x2b0>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	2b77      	cmp	r3, #119	; 0x77
 80055f2:	d801      	bhi.n	80055f8 <HAL_DMA_Init+0x2b0>
 80055f4:	2301      	movs	r3, #1
 80055f6:	e000      	b.n	80055fa <HAL_DMA_Init+0x2b2>
 80055f8:	2300      	movs	r3, #0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d003      	beq.n	8005606 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005604:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f023 0307 	bic.w	r3, r3, #7
 800561c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	4313      	orrs	r3, r2
 8005626:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562c:	2b04      	cmp	r3, #4
 800562e:	d117      	bne.n	8005660 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	4313      	orrs	r3, r2
 8005638:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00e      	beq.n	8005660 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f001 fdca 	bl	80071dc <DMA_CheckFifoParam>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d008      	beq.n	8005660 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2240      	movs	r2, #64	; 0x40
 8005652:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e192      	b.n	8005986 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f001 fd05 	bl	8007078 <DMA_CalcBaseAndBitshift>
 800566e:	4603      	mov	r3, r0
 8005670:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005676:	f003 031f 	and.w	r3, r3, #31
 800567a:	223f      	movs	r2, #63	; 0x3f
 800567c:	409a      	lsls	r2, r3
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	609a      	str	r2, [r3, #8]
 8005682:	e0c8      	b.n	8005816 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a38      	ldr	r2, [pc, #224]	; (800576c <HAL_DMA_Init+0x424>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d022      	beq.n	80056d4 <HAL_DMA_Init+0x38c>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a37      	ldr	r2, [pc, #220]	; (8005770 <HAL_DMA_Init+0x428>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d01d      	beq.n	80056d4 <HAL_DMA_Init+0x38c>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a35      	ldr	r2, [pc, #212]	; (8005774 <HAL_DMA_Init+0x42c>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d018      	beq.n	80056d4 <HAL_DMA_Init+0x38c>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a34      	ldr	r2, [pc, #208]	; (8005778 <HAL_DMA_Init+0x430>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d013      	beq.n	80056d4 <HAL_DMA_Init+0x38c>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a32      	ldr	r2, [pc, #200]	; (800577c <HAL_DMA_Init+0x434>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d00e      	beq.n	80056d4 <HAL_DMA_Init+0x38c>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a31      	ldr	r2, [pc, #196]	; (8005780 <HAL_DMA_Init+0x438>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d009      	beq.n	80056d4 <HAL_DMA_Init+0x38c>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a2f      	ldr	r2, [pc, #188]	; (8005784 <HAL_DMA_Init+0x43c>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d004      	beq.n	80056d4 <HAL_DMA_Init+0x38c>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a2e      	ldr	r2, [pc, #184]	; (8005788 <HAL_DMA_Init+0x440>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d101      	bne.n	80056d8 <HAL_DMA_Init+0x390>
 80056d4:	2301      	movs	r3, #1
 80056d6:	e000      	b.n	80056da <HAL_DMA_Init+0x392>
 80056d8:	2300      	movs	r3, #0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f000 8092 	beq.w	8005804 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a21      	ldr	r2, [pc, #132]	; (800576c <HAL_DMA_Init+0x424>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d021      	beq.n	800572e <HAL_DMA_Init+0x3e6>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a20      	ldr	r2, [pc, #128]	; (8005770 <HAL_DMA_Init+0x428>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d01c      	beq.n	800572e <HAL_DMA_Init+0x3e6>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a1e      	ldr	r2, [pc, #120]	; (8005774 <HAL_DMA_Init+0x42c>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d017      	beq.n	800572e <HAL_DMA_Init+0x3e6>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a1d      	ldr	r2, [pc, #116]	; (8005778 <HAL_DMA_Init+0x430>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d012      	beq.n	800572e <HAL_DMA_Init+0x3e6>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a1b      	ldr	r2, [pc, #108]	; (800577c <HAL_DMA_Init+0x434>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d00d      	beq.n	800572e <HAL_DMA_Init+0x3e6>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a1a      	ldr	r2, [pc, #104]	; (8005780 <HAL_DMA_Init+0x438>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d008      	beq.n	800572e <HAL_DMA_Init+0x3e6>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a18      	ldr	r2, [pc, #96]	; (8005784 <HAL_DMA_Init+0x43c>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d003      	beq.n	800572e <HAL_DMA_Init+0x3e6>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a17      	ldr	r2, [pc, #92]	; (8005788 <HAL_DMA_Init+0x440>)
 800572c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2202      	movs	r2, #2
 8005732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	4b10      	ldr	r3, [pc, #64]	; (800578c <HAL_DMA_Init+0x444>)
 800574a:	4013      	ands	r3, r2
 800574c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	2b40      	cmp	r3, #64	; 0x40
 8005754:	d01c      	beq.n	8005790 <HAL_DMA_Init+0x448>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	2b80      	cmp	r3, #128	; 0x80
 800575c:	d102      	bne.n	8005764 <HAL_DMA_Init+0x41c>
 800575e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005762:	e016      	b.n	8005792 <HAL_DMA_Init+0x44a>
 8005764:	2300      	movs	r3, #0
 8005766:	e014      	b.n	8005792 <HAL_DMA_Init+0x44a>
 8005768:	fe10803f 	.word	0xfe10803f
 800576c:	58025408 	.word	0x58025408
 8005770:	5802541c 	.word	0x5802541c
 8005774:	58025430 	.word	0x58025430
 8005778:	58025444 	.word	0x58025444
 800577c:	58025458 	.word	0x58025458
 8005780:	5802546c 	.word	0x5802546c
 8005784:	58025480 	.word	0x58025480
 8005788:	58025494 	.word	0x58025494
 800578c:	fffe000f 	.word	0xfffe000f
 8005790:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	68d2      	ldr	r2, [r2, #12]
 8005796:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005798:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80057a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80057a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80057b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80057b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80057c0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	461a      	mov	r2, r3
 80057d6:	4b6e      	ldr	r3, [pc, #440]	; (8005990 <HAL_DMA_Init+0x648>)
 80057d8:	4413      	add	r3, r2
 80057da:	4a6e      	ldr	r2, [pc, #440]	; (8005994 <HAL_DMA_Init+0x64c>)
 80057dc:	fba2 2303 	umull	r2, r3, r2, r3
 80057e0:	091b      	lsrs	r3, r3, #4
 80057e2:	009a      	lsls	r2, r3, #2
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f001 fc45 	bl	8007078 <DMA_CalcBaseAndBitshift>
 80057ee:	4603      	mov	r3, r0
 80057f0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057f6:	f003 031f 	and.w	r3, r3, #31
 80057fa:	2201      	movs	r2, #1
 80057fc:	409a      	lsls	r2, r3
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	605a      	str	r2, [r3, #4]
 8005802:	e008      	b.n	8005816 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2240      	movs	r2, #64	; 0x40
 8005808:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2203      	movs	r2, #3
 800580e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e0b7      	b.n	8005986 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a5f      	ldr	r2, [pc, #380]	; (8005998 <HAL_DMA_Init+0x650>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d072      	beq.n	8005906 <HAL_DMA_Init+0x5be>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a5d      	ldr	r2, [pc, #372]	; (800599c <HAL_DMA_Init+0x654>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d06d      	beq.n	8005906 <HAL_DMA_Init+0x5be>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a5c      	ldr	r2, [pc, #368]	; (80059a0 <HAL_DMA_Init+0x658>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d068      	beq.n	8005906 <HAL_DMA_Init+0x5be>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a5a      	ldr	r2, [pc, #360]	; (80059a4 <HAL_DMA_Init+0x65c>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d063      	beq.n	8005906 <HAL_DMA_Init+0x5be>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a59      	ldr	r2, [pc, #356]	; (80059a8 <HAL_DMA_Init+0x660>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d05e      	beq.n	8005906 <HAL_DMA_Init+0x5be>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a57      	ldr	r2, [pc, #348]	; (80059ac <HAL_DMA_Init+0x664>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d059      	beq.n	8005906 <HAL_DMA_Init+0x5be>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a56      	ldr	r2, [pc, #344]	; (80059b0 <HAL_DMA_Init+0x668>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d054      	beq.n	8005906 <HAL_DMA_Init+0x5be>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a54      	ldr	r2, [pc, #336]	; (80059b4 <HAL_DMA_Init+0x66c>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d04f      	beq.n	8005906 <HAL_DMA_Init+0x5be>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a53      	ldr	r2, [pc, #332]	; (80059b8 <HAL_DMA_Init+0x670>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d04a      	beq.n	8005906 <HAL_DMA_Init+0x5be>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a51      	ldr	r2, [pc, #324]	; (80059bc <HAL_DMA_Init+0x674>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d045      	beq.n	8005906 <HAL_DMA_Init+0x5be>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a50      	ldr	r2, [pc, #320]	; (80059c0 <HAL_DMA_Init+0x678>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d040      	beq.n	8005906 <HAL_DMA_Init+0x5be>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a4e      	ldr	r2, [pc, #312]	; (80059c4 <HAL_DMA_Init+0x67c>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d03b      	beq.n	8005906 <HAL_DMA_Init+0x5be>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a4d      	ldr	r2, [pc, #308]	; (80059c8 <HAL_DMA_Init+0x680>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d036      	beq.n	8005906 <HAL_DMA_Init+0x5be>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a4b      	ldr	r2, [pc, #300]	; (80059cc <HAL_DMA_Init+0x684>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d031      	beq.n	8005906 <HAL_DMA_Init+0x5be>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a4a      	ldr	r2, [pc, #296]	; (80059d0 <HAL_DMA_Init+0x688>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d02c      	beq.n	8005906 <HAL_DMA_Init+0x5be>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a48      	ldr	r2, [pc, #288]	; (80059d4 <HAL_DMA_Init+0x68c>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d027      	beq.n	8005906 <HAL_DMA_Init+0x5be>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a47      	ldr	r2, [pc, #284]	; (80059d8 <HAL_DMA_Init+0x690>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d022      	beq.n	8005906 <HAL_DMA_Init+0x5be>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a45      	ldr	r2, [pc, #276]	; (80059dc <HAL_DMA_Init+0x694>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d01d      	beq.n	8005906 <HAL_DMA_Init+0x5be>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a44      	ldr	r2, [pc, #272]	; (80059e0 <HAL_DMA_Init+0x698>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d018      	beq.n	8005906 <HAL_DMA_Init+0x5be>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a42      	ldr	r2, [pc, #264]	; (80059e4 <HAL_DMA_Init+0x69c>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d013      	beq.n	8005906 <HAL_DMA_Init+0x5be>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a41      	ldr	r2, [pc, #260]	; (80059e8 <HAL_DMA_Init+0x6a0>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d00e      	beq.n	8005906 <HAL_DMA_Init+0x5be>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a3f      	ldr	r2, [pc, #252]	; (80059ec <HAL_DMA_Init+0x6a4>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d009      	beq.n	8005906 <HAL_DMA_Init+0x5be>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a3e      	ldr	r2, [pc, #248]	; (80059f0 <HAL_DMA_Init+0x6a8>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d004      	beq.n	8005906 <HAL_DMA_Init+0x5be>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a3c      	ldr	r2, [pc, #240]	; (80059f4 <HAL_DMA_Init+0x6ac>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d101      	bne.n	800590a <HAL_DMA_Init+0x5c2>
 8005906:	2301      	movs	r3, #1
 8005908:	e000      	b.n	800590c <HAL_DMA_Init+0x5c4>
 800590a:	2300      	movs	r3, #0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d032      	beq.n	8005976 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f001 fcdf 	bl	80072d4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	2b80      	cmp	r3, #128	; 0x80
 800591c:	d102      	bne.n	8005924 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685a      	ldr	r2, [r3, #4]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800592c:	b2d2      	uxtb	r2, r2
 800592e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005938:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d010      	beq.n	8005964 <HAL_DMA_Init+0x61c>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	2b08      	cmp	r3, #8
 8005948:	d80c      	bhi.n	8005964 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f001 fd5c 	bl	8007408 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005954:	2200      	movs	r2, #0
 8005956:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005960:	605a      	str	r2, [r3, #4]
 8005962:	e008      	b.n	8005976 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3718      	adds	r7, #24
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	a7fdabf8 	.word	0xa7fdabf8
 8005994:	cccccccd 	.word	0xcccccccd
 8005998:	40020010 	.word	0x40020010
 800599c:	40020028 	.word	0x40020028
 80059a0:	40020040 	.word	0x40020040
 80059a4:	40020058 	.word	0x40020058
 80059a8:	40020070 	.word	0x40020070
 80059ac:	40020088 	.word	0x40020088
 80059b0:	400200a0 	.word	0x400200a0
 80059b4:	400200b8 	.word	0x400200b8
 80059b8:	40020410 	.word	0x40020410
 80059bc:	40020428 	.word	0x40020428
 80059c0:	40020440 	.word	0x40020440
 80059c4:	40020458 	.word	0x40020458
 80059c8:	40020470 	.word	0x40020470
 80059cc:	40020488 	.word	0x40020488
 80059d0:	400204a0 	.word	0x400204a0
 80059d4:	400204b8 	.word	0x400204b8
 80059d8:	58025408 	.word	0x58025408
 80059dc:	5802541c 	.word	0x5802541c
 80059e0:	58025430 	.word	0x58025430
 80059e4:	58025444 	.word	0x58025444
 80059e8:	58025458 	.word	0x58025458
 80059ec:	5802546c 	.word	0x5802546c
 80059f0:	58025480 	.word	0x58025480
 80059f4:	58025494 	.word	0x58025494

080059f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b086      	sub	sp, #24
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	607a      	str	r2, [r7, #4]
 8005a04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a06:	2300      	movs	r3, #0
 8005a08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d101      	bne.n	8005a14 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e226      	b.n	8005e62 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d101      	bne.n	8005a22 <HAL_DMA_Start_IT+0x2a>
 8005a1e:	2302      	movs	r3, #2
 8005a20:	e21f      	b.n	8005e62 <HAL_DMA_Start_IT+0x46a>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	f040 820a 	bne.w	8005e4c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a68      	ldr	r2, [pc, #416]	; (8005bec <HAL_DMA_Start_IT+0x1f4>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d04a      	beq.n	8005ae6 <HAL_DMA_Start_IT+0xee>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a66      	ldr	r2, [pc, #408]	; (8005bf0 <HAL_DMA_Start_IT+0x1f8>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d045      	beq.n	8005ae6 <HAL_DMA_Start_IT+0xee>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a65      	ldr	r2, [pc, #404]	; (8005bf4 <HAL_DMA_Start_IT+0x1fc>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d040      	beq.n	8005ae6 <HAL_DMA_Start_IT+0xee>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a63      	ldr	r2, [pc, #396]	; (8005bf8 <HAL_DMA_Start_IT+0x200>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d03b      	beq.n	8005ae6 <HAL_DMA_Start_IT+0xee>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a62      	ldr	r2, [pc, #392]	; (8005bfc <HAL_DMA_Start_IT+0x204>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d036      	beq.n	8005ae6 <HAL_DMA_Start_IT+0xee>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a60      	ldr	r2, [pc, #384]	; (8005c00 <HAL_DMA_Start_IT+0x208>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d031      	beq.n	8005ae6 <HAL_DMA_Start_IT+0xee>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a5f      	ldr	r2, [pc, #380]	; (8005c04 <HAL_DMA_Start_IT+0x20c>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d02c      	beq.n	8005ae6 <HAL_DMA_Start_IT+0xee>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a5d      	ldr	r2, [pc, #372]	; (8005c08 <HAL_DMA_Start_IT+0x210>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d027      	beq.n	8005ae6 <HAL_DMA_Start_IT+0xee>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a5c      	ldr	r2, [pc, #368]	; (8005c0c <HAL_DMA_Start_IT+0x214>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d022      	beq.n	8005ae6 <HAL_DMA_Start_IT+0xee>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a5a      	ldr	r2, [pc, #360]	; (8005c10 <HAL_DMA_Start_IT+0x218>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d01d      	beq.n	8005ae6 <HAL_DMA_Start_IT+0xee>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a59      	ldr	r2, [pc, #356]	; (8005c14 <HAL_DMA_Start_IT+0x21c>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d018      	beq.n	8005ae6 <HAL_DMA_Start_IT+0xee>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a57      	ldr	r2, [pc, #348]	; (8005c18 <HAL_DMA_Start_IT+0x220>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d013      	beq.n	8005ae6 <HAL_DMA_Start_IT+0xee>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a56      	ldr	r2, [pc, #344]	; (8005c1c <HAL_DMA_Start_IT+0x224>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d00e      	beq.n	8005ae6 <HAL_DMA_Start_IT+0xee>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a54      	ldr	r2, [pc, #336]	; (8005c20 <HAL_DMA_Start_IT+0x228>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d009      	beq.n	8005ae6 <HAL_DMA_Start_IT+0xee>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a53      	ldr	r2, [pc, #332]	; (8005c24 <HAL_DMA_Start_IT+0x22c>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d004      	beq.n	8005ae6 <HAL_DMA_Start_IT+0xee>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a51      	ldr	r2, [pc, #324]	; (8005c28 <HAL_DMA_Start_IT+0x230>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d108      	bne.n	8005af8 <HAL_DMA_Start_IT+0x100>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f022 0201 	bic.w	r2, r2, #1
 8005af4:	601a      	str	r2, [r3, #0]
 8005af6:	e007      	b.n	8005b08 <HAL_DMA_Start_IT+0x110>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f022 0201 	bic.w	r2, r2, #1
 8005b06:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	68b9      	ldr	r1, [r7, #8]
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f001 f906 	bl	8006d20 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a34      	ldr	r2, [pc, #208]	; (8005bec <HAL_DMA_Start_IT+0x1f4>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d04a      	beq.n	8005bb4 <HAL_DMA_Start_IT+0x1bc>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a33      	ldr	r2, [pc, #204]	; (8005bf0 <HAL_DMA_Start_IT+0x1f8>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d045      	beq.n	8005bb4 <HAL_DMA_Start_IT+0x1bc>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a31      	ldr	r2, [pc, #196]	; (8005bf4 <HAL_DMA_Start_IT+0x1fc>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d040      	beq.n	8005bb4 <HAL_DMA_Start_IT+0x1bc>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a30      	ldr	r2, [pc, #192]	; (8005bf8 <HAL_DMA_Start_IT+0x200>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d03b      	beq.n	8005bb4 <HAL_DMA_Start_IT+0x1bc>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a2e      	ldr	r2, [pc, #184]	; (8005bfc <HAL_DMA_Start_IT+0x204>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d036      	beq.n	8005bb4 <HAL_DMA_Start_IT+0x1bc>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a2d      	ldr	r2, [pc, #180]	; (8005c00 <HAL_DMA_Start_IT+0x208>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d031      	beq.n	8005bb4 <HAL_DMA_Start_IT+0x1bc>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a2b      	ldr	r2, [pc, #172]	; (8005c04 <HAL_DMA_Start_IT+0x20c>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d02c      	beq.n	8005bb4 <HAL_DMA_Start_IT+0x1bc>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a2a      	ldr	r2, [pc, #168]	; (8005c08 <HAL_DMA_Start_IT+0x210>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d027      	beq.n	8005bb4 <HAL_DMA_Start_IT+0x1bc>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a28      	ldr	r2, [pc, #160]	; (8005c0c <HAL_DMA_Start_IT+0x214>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d022      	beq.n	8005bb4 <HAL_DMA_Start_IT+0x1bc>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a27      	ldr	r2, [pc, #156]	; (8005c10 <HAL_DMA_Start_IT+0x218>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d01d      	beq.n	8005bb4 <HAL_DMA_Start_IT+0x1bc>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a25      	ldr	r2, [pc, #148]	; (8005c14 <HAL_DMA_Start_IT+0x21c>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d018      	beq.n	8005bb4 <HAL_DMA_Start_IT+0x1bc>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a24      	ldr	r2, [pc, #144]	; (8005c18 <HAL_DMA_Start_IT+0x220>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d013      	beq.n	8005bb4 <HAL_DMA_Start_IT+0x1bc>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a22      	ldr	r2, [pc, #136]	; (8005c1c <HAL_DMA_Start_IT+0x224>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d00e      	beq.n	8005bb4 <HAL_DMA_Start_IT+0x1bc>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a21      	ldr	r2, [pc, #132]	; (8005c20 <HAL_DMA_Start_IT+0x228>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d009      	beq.n	8005bb4 <HAL_DMA_Start_IT+0x1bc>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a1f      	ldr	r2, [pc, #124]	; (8005c24 <HAL_DMA_Start_IT+0x22c>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d004      	beq.n	8005bb4 <HAL_DMA_Start_IT+0x1bc>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a1e      	ldr	r2, [pc, #120]	; (8005c28 <HAL_DMA_Start_IT+0x230>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d101      	bne.n	8005bb8 <HAL_DMA_Start_IT+0x1c0>
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e000      	b.n	8005bba <HAL_DMA_Start_IT+0x1c2>
 8005bb8:	2300      	movs	r3, #0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d036      	beq.n	8005c2c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f023 021e 	bic.w	r2, r3, #30
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f042 0216 	orr.w	r2, r2, #22
 8005bd0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d03e      	beq.n	8005c58 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f042 0208 	orr.w	r2, r2, #8
 8005be8:	601a      	str	r2, [r3, #0]
 8005bea:	e035      	b.n	8005c58 <HAL_DMA_Start_IT+0x260>
 8005bec:	40020010 	.word	0x40020010
 8005bf0:	40020028 	.word	0x40020028
 8005bf4:	40020040 	.word	0x40020040
 8005bf8:	40020058 	.word	0x40020058
 8005bfc:	40020070 	.word	0x40020070
 8005c00:	40020088 	.word	0x40020088
 8005c04:	400200a0 	.word	0x400200a0
 8005c08:	400200b8 	.word	0x400200b8
 8005c0c:	40020410 	.word	0x40020410
 8005c10:	40020428 	.word	0x40020428
 8005c14:	40020440 	.word	0x40020440
 8005c18:	40020458 	.word	0x40020458
 8005c1c:	40020470 	.word	0x40020470
 8005c20:	40020488 	.word	0x40020488
 8005c24:	400204a0 	.word	0x400204a0
 8005c28:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f023 020e 	bic.w	r2, r3, #14
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f042 020a 	orr.w	r2, r2, #10
 8005c3e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d007      	beq.n	8005c58 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f042 0204 	orr.w	r2, r2, #4
 8005c56:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a83      	ldr	r2, [pc, #524]	; (8005e6c <HAL_DMA_Start_IT+0x474>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d072      	beq.n	8005d48 <HAL_DMA_Start_IT+0x350>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a82      	ldr	r2, [pc, #520]	; (8005e70 <HAL_DMA_Start_IT+0x478>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d06d      	beq.n	8005d48 <HAL_DMA_Start_IT+0x350>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a80      	ldr	r2, [pc, #512]	; (8005e74 <HAL_DMA_Start_IT+0x47c>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d068      	beq.n	8005d48 <HAL_DMA_Start_IT+0x350>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a7f      	ldr	r2, [pc, #508]	; (8005e78 <HAL_DMA_Start_IT+0x480>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d063      	beq.n	8005d48 <HAL_DMA_Start_IT+0x350>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a7d      	ldr	r2, [pc, #500]	; (8005e7c <HAL_DMA_Start_IT+0x484>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d05e      	beq.n	8005d48 <HAL_DMA_Start_IT+0x350>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a7c      	ldr	r2, [pc, #496]	; (8005e80 <HAL_DMA_Start_IT+0x488>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d059      	beq.n	8005d48 <HAL_DMA_Start_IT+0x350>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a7a      	ldr	r2, [pc, #488]	; (8005e84 <HAL_DMA_Start_IT+0x48c>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d054      	beq.n	8005d48 <HAL_DMA_Start_IT+0x350>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a79      	ldr	r2, [pc, #484]	; (8005e88 <HAL_DMA_Start_IT+0x490>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d04f      	beq.n	8005d48 <HAL_DMA_Start_IT+0x350>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a77      	ldr	r2, [pc, #476]	; (8005e8c <HAL_DMA_Start_IT+0x494>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d04a      	beq.n	8005d48 <HAL_DMA_Start_IT+0x350>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a76      	ldr	r2, [pc, #472]	; (8005e90 <HAL_DMA_Start_IT+0x498>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d045      	beq.n	8005d48 <HAL_DMA_Start_IT+0x350>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a74      	ldr	r2, [pc, #464]	; (8005e94 <HAL_DMA_Start_IT+0x49c>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d040      	beq.n	8005d48 <HAL_DMA_Start_IT+0x350>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a73      	ldr	r2, [pc, #460]	; (8005e98 <HAL_DMA_Start_IT+0x4a0>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d03b      	beq.n	8005d48 <HAL_DMA_Start_IT+0x350>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a71      	ldr	r2, [pc, #452]	; (8005e9c <HAL_DMA_Start_IT+0x4a4>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d036      	beq.n	8005d48 <HAL_DMA_Start_IT+0x350>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a70      	ldr	r2, [pc, #448]	; (8005ea0 <HAL_DMA_Start_IT+0x4a8>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d031      	beq.n	8005d48 <HAL_DMA_Start_IT+0x350>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a6e      	ldr	r2, [pc, #440]	; (8005ea4 <HAL_DMA_Start_IT+0x4ac>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d02c      	beq.n	8005d48 <HAL_DMA_Start_IT+0x350>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a6d      	ldr	r2, [pc, #436]	; (8005ea8 <HAL_DMA_Start_IT+0x4b0>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d027      	beq.n	8005d48 <HAL_DMA_Start_IT+0x350>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a6b      	ldr	r2, [pc, #428]	; (8005eac <HAL_DMA_Start_IT+0x4b4>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d022      	beq.n	8005d48 <HAL_DMA_Start_IT+0x350>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a6a      	ldr	r2, [pc, #424]	; (8005eb0 <HAL_DMA_Start_IT+0x4b8>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d01d      	beq.n	8005d48 <HAL_DMA_Start_IT+0x350>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a68      	ldr	r2, [pc, #416]	; (8005eb4 <HAL_DMA_Start_IT+0x4bc>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d018      	beq.n	8005d48 <HAL_DMA_Start_IT+0x350>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a67      	ldr	r2, [pc, #412]	; (8005eb8 <HAL_DMA_Start_IT+0x4c0>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d013      	beq.n	8005d48 <HAL_DMA_Start_IT+0x350>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a65      	ldr	r2, [pc, #404]	; (8005ebc <HAL_DMA_Start_IT+0x4c4>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d00e      	beq.n	8005d48 <HAL_DMA_Start_IT+0x350>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a64      	ldr	r2, [pc, #400]	; (8005ec0 <HAL_DMA_Start_IT+0x4c8>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d009      	beq.n	8005d48 <HAL_DMA_Start_IT+0x350>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a62      	ldr	r2, [pc, #392]	; (8005ec4 <HAL_DMA_Start_IT+0x4cc>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d004      	beq.n	8005d48 <HAL_DMA_Start_IT+0x350>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a61      	ldr	r2, [pc, #388]	; (8005ec8 <HAL_DMA_Start_IT+0x4d0>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d101      	bne.n	8005d4c <HAL_DMA_Start_IT+0x354>
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e000      	b.n	8005d4e <HAL_DMA_Start_IT+0x356>
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d01a      	beq.n	8005d88 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d007      	beq.n	8005d70 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d6e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d007      	beq.n	8005d88 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d86:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a37      	ldr	r2, [pc, #220]	; (8005e6c <HAL_DMA_Start_IT+0x474>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d04a      	beq.n	8005e28 <HAL_DMA_Start_IT+0x430>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a36      	ldr	r2, [pc, #216]	; (8005e70 <HAL_DMA_Start_IT+0x478>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d045      	beq.n	8005e28 <HAL_DMA_Start_IT+0x430>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a34      	ldr	r2, [pc, #208]	; (8005e74 <HAL_DMA_Start_IT+0x47c>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d040      	beq.n	8005e28 <HAL_DMA_Start_IT+0x430>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a33      	ldr	r2, [pc, #204]	; (8005e78 <HAL_DMA_Start_IT+0x480>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d03b      	beq.n	8005e28 <HAL_DMA_Start_IT+0x430>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a31      	ldr	r2, [pc, #196]	; (8005e7c <HAL_DMA_Start_IT+0x484>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d036      	beq.n	8005e28 <HAL_DMA_Start_IT+0x430>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a30      	ldr	r2, [pc, #192]	; (8005e80 <HAL_DMA_Start_IT+0x488>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d031      	beq.n	8005e28 <HAL_DMA_Start_IT+0x430>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a2e      	ldr	r2, [pc, #184]	; (8005e84 <HAL_DMA_Start_IT+0x48c>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d02c      	beq.n	8005e28 <HAL_DMA_Start_IT+0x430>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a2d      	ldr	r2, [pc, #180]	; (8005e88 <HAL_DMA_Start_IT+0x490>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d027      	beq.n	8005e28 <HAL_DMA_Start_IT+0x430>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a2b      	ldr	r2, [pc, #172]	; (8005e8c <HAL_DMA_Start_IT+0x494>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d022      	beq.n	8005e28 <HAL_DMA_Start_IT+0x430>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a2a      	ldr	r2, [pc, #168]	; (8005e90 <HAL_DMA_Start_IT+0x498>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d01d      	beq.n	8005e28 <HAL_DMA_Start_IT+0x430>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a28      	ldr	r2, [pc, #160]	; (8005e94 <HAL_DMA_Start_IT+0x49c>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d018      	beq.n	8005e28 <HAL_DMA_Start_IT+0x430>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a27      	ldr	r2, [pc, #156]	; (8005e98 <HAL_DMA_Start_IT+0x4a0>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d013      	beq.n	8005e28 <HAL_DMA_Start_IT+0x430>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a25      	ldr	r2, [pc, #148]	; (8005e9c <HAL_DMA_Start_IT+0x4a4>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d00e      	beq.n	8005e28 <HAL_DMA_Start_IT+0x430>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a24      	ldr	r2, [pc, #144]	; (8005ea0 <HAL_DMA_Start_IT+0x4a8>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d009      	beq.n	8005e28 <HAL_DMA_Start_IT+0x430>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a22      	ldr	r2, [pc, #136]	; (8005ea4 <HAL_DMA_Start_IT+0x4ac>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d004      	beq.n	8005e28 <HAL_DMA_Start_IT+0x430>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a21      	ldr	r2, [pc, #132]	; (8005ea8 <HAL_DMA_Start_IT+0x4b0>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d108      	bne.n	8005e3a <HAL_DMA_Start_IT+0x442>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f042 0201 	orr.w	r2, r2, #1
 8005e36:	601a      	str	r2, [r3, #0]
 8005e38:	e012      	b.n	8005e60 <HAL_DMA_Start_IT+0x468>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f042 0201 	orr.w	r2, r2, #1
 8005e48:	601a      	str	r2, [r3, #0]
 8005e4a:	e009      	b.n	8005e60 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e52:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005e60:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3718      	adds	r7, #24
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	40020010 	.word	0x40020010
 8005e70:	40020028 	.word	0x40020028
 8005e74:	40020040 	.word	0x40020040
 8005e78:	40020058 	.word	0x40020058
 8005e7c:	40020070 	.word	0x40020070
 8005e80:	40020088 	.word	0x40020088
 8005e84:	400200a0 	.word	0x400200a0
 8005e88:	400200b8 	.word	0x400200b8
 8005e8c:	40020410 	.word	0x40020410
 8005e90:	40020428 	.word	0x40020428
 8005e94:	40020440 	.word	0x40020440
 8005e98:	40020458 	.word	0x40020458
 8005e9c:	40020470 	.word	0x40020470
 8005ea0:	40020488 	.word	0x40020488
 8005ea4:	400204a0 	.word	0x400204a0
 8005ea8:	400204b8 	.word	0x400204b8
 8005eac:	58025408 	.word	0x58025408
 8005eb0:	5802541c 	.word	0x5802541c
 8005eb4:	58025430 	.word	0x58025430
 8005eb8:	58025444 	.word	0x58025444
 8005ebc:	58025458 	.word	0x58025458
 8005ec0:	5802546c 	.word	0x5802546c
 8005ec4:	58025480 	.word	0x58025480
 8005ec8:	58025494 	.word	0x58025494

08005ecc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b08a      	sub	sp, #40	; 0x28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005ed8:	4b67      	ldr	r3, [pc, #412]	; (8006078 <HAL_DMA_IRQHandler+0x1ac>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a67      	ldr	r2, [pc, #412]	; (800607c <HAL_DMA_IRQHandler+0x1b0>)
 8005ede:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee2:	0a9b      	lsrs	r3, r3, #10
 8005ee4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eea:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ef0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005ef2:	6a3b      	ldr	r3, [r7, #32]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a5f      	ldr	r2, [pc, #380]	; (8006080 <HAL_DMA_IRQHandler+0x1b4>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d04a      	beq.n	8005f9e <HAL_DMA_IRQHandler+0xd2>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a5d      	ldr	r2, [pc, #372]	; (8006084 <HAL_DMA_IRQHandler+0x1b8>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d045      	beq.n	8005f9e <HAL_DMA_IRQHandler+0xd2>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a5c      	ldr	r2, [pc, #368]	; (8006088 <HAL_DMA_IRQHandler+0x1bc>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d040      	beq.n	8005f9e <HAL_DMA_IRQHandler+0xd2>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a5a      	ldr	r2, [pc, #360]	; (800608c <HAL_DMA_IRQHandler+0x1c0>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d03b      	beq.n	8005f9e <HAL_DMA_IRQHandler+0xd2>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a59      	ldr	r2, [pc, #356]	; (8006090 <HAL_DMA_IRQHandler+0x1c4>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d036      	beq.n	8005f9e <HAL_DMA_IRQHandler+0xd2>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a57      	ldr	r2, [pc, #348]	; (8006094 <HAL_DMA_IRQHandler+0x1c8>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d031      	beq.n	8005f9e <HAL_DMA_IRQHandler+0xd2>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a56      	ldr	r2, [pc, #344]	; (8006098 <HAL_DMA_IRQHandler+0x1cc>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d02c      	beq.n	8005f9e <HAL_DMA_IRQHandler+0xd2>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a54      	ldr	r2, [pc, #336]	; (800609c <HAL_DMA_IRQHandler+0x1d0>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d027      	beq.n	8005f9e <HAL_DMA_IRQHandler+0xd2>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a53      	ldr	r2, [pc, #332]	; (80060a0 <HAL_DMA_IRQHandler+0x1d4>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d022      	beq.n	8005f9e <HAL_DMA_IRQHandler+0xd2>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a51      	ldr	r2, [pc, #324]	; (80060a4 <HAL_DMA_IRQHandler+0x1d8>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d01d      	beq.n	8005f9e <HAL_DMA_IRQHandler+0xd2>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a50      	ldr	r2, [pc, #320]	; (80060a8 <HAL_DMA_IRQHandler+0x1dc>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d018      	beq.n	8005f9e <HAL_DMA_IRQHandler+0xd2>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a4e      	ldr	r2, [pc, #312]	; (80060ac <HAL_DMA_IRQHandler+0x1e0>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d013      	beq.n	8005f9e <HAL_DMA_IRQHandler+0xd2>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a4d      	ldr	r2, [pc, #308]	; (80060b0 <HAL_DMA_IRQHandler+0x1e4>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d00e      	beq.n	8005f9e <HAL_DMA_IRQHandler+0xd2>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a4b      	ldr	r2, [pc, #300]	; (80060b4 <HAL_DMA_IRQHandler+0x1e8>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d009      	beq.n	8005f9e <HAL_DMA_IRQHandler+0xd2>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a4a      	ldr	r2, [pc, #296]	; (80060b8 <HAL_DMA_IRQHandler+0x1ec>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d004      	beq.n	8005f9e <HAL_DMA_IRQHandler+0xd2>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a48      	ldr	r2, [pc, #288]	; (80060bc <HAL_DMA_IRQHandler+0x1f0>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d101      	bne.n	8005fa2 <HAL_DMA_IRQHandler+0xd6>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e000      	b.n	8005fa4 <HAL_DMA_IRQHandler+0xd8>
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f000 842b 	beq.w	8006800 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fae:	f003 031f 	and.w	r3, r3, #31
 8005fb2:	2208      	movs	r2, #8
 8005fb4:	409a      	lsls	r2, r3
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	4013      	ands	r3, r2
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f000 80a2 	beq.w	8006104 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a2e      	ldr	r2, [pc, #184]	; (8006080 <HAL_DMA_IRQHandler+0x1b4>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d04a      	beq.n	8006060 <HAL_DMA_IRQHandler+0x194>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a2d      	ldr	r2, [pc, #180]	; (8006084 <HAL_DMA_IRQHandler+0x1b8>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d045      	beq.n	8006060 <HAL_DMA_IRQHandler+0x194>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a2b      	ldr	r2, [pc, #172]	; (8006088 <HAL_DMA_IRQHandler+0x1bc>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d040      	beq.n	8006060 <HAL_DMA_IRQHandler+0x194>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a2a      	ldr	r2, [pc, #168]	; (800608c <HAL_DMA_IRQHandler+0x1c0>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d03b      	beq.n	8006060 <HAL_DMA_IRQHandler+0x194>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a28      	ldr	r2, [pc, #160]	; (8006090 <HAL_DMA_IRQHandler+0x1c4>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d036      	beq.n	8006060 <HAL_DMA_IRQHandler+0x194>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a27      	ldr	r2, [pc, #156]	; (8006094 <HAL_DMA_IRQHandler+0x1c8>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d031      	beq.n	8006060 <HAL_DMA_IRQHandler+0x194>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a25      	ldr	r2, [pc, #148]	; (8006098 <HAL_DMA_IRQHandler+0x1cc>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d02c      	beq.n	8006060 <HAL_DMA_IRQHandler+0x194>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a24      	ldr	r2, [pc, #144]	; (800609c <HAL_DMA_IRQHandler+0x1d0>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d027      	beq.n	8006060 <HAL_DMA_IRQHandler+0x194>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a22      	ldr	r2, [pc, #136]	; (80060a0 <HAL_DMA_IRQHandler+0x1d4>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d022      	beq.n	8006060 <HAL_DMA_IRQHandler+0x194>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a21      	ldr	r2, [pc, #132]	; (80060a4 <HAL_DMA_IRQHandler+0x1d8>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d01d      	beq.n	8006060 <HAL_DMA_IRQHandler+0x194>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a1f      	ldr	r2, [pc, #124]	; (80060a8 <HAL_DMA_IRQHandler+0x1dc>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d018      	beq.n	8006060 <HAL_DMA_IRQHandler+0x194>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a1e      	ldr	r2, [pc, #120]	; (80060ac <HAL_DMA_IRQHandler+0x1e0>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d013      	beq.n	8006060 <HAL_DMA_IRQHandler+0x194>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a1c      	ldr	r2, [pc, #112]	; (80060b0 <HAL_DMA_IRQHandler+0x1e4>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d00e      	beq.n	8006060 <HAL_DMA_IRQHandler+0x194>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a1b      	ldr	r2, [pc, #108]	; (80060b4 <HAL_DMA_IRQHandler+0x1e8>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d009      	beq.n	8006060 <HAL_DMA_IRQHandler+0x194>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a19      	ldr	r2, [pc, #100]	; (80060b8 <HAL_DMA_IRQHandler+0x1ec>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d004      	beq.n	8006060 <HAL_DMA_IRQHandler+0x194>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a18      	ldr	r2, [pc, #96]	; (80060bc <HAL_DMA_IRQHandler+0x1f0>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d12f      	bne.n	80060c0 <HAL_DMA_IRQHandler+0x1f4>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0304 	and.w	r3, r3, #4
 800606a:	2b00      	cmp	r3, #0
 800606c:	bf14      	ite	ne
 800606e:	2301      	movne	r3, #1
 8006070:	2300      	moveq	r3, #0
 8006072:	b2db      	uxtb	r3, r3
 8006074:	e02e      	b.n	80060d4 <HAL_DMA_IRQHandler+0x208>
 8006076:	bf00      	nop
 8006078:	24000000 	.word	0x24000000
 800607c:	1b4e81b5 	.word	0x1b4e81b5
 8006080:	40020010 	.word	0x40020010
 8006084:	40020028 	.word	0x40020028
 8006088:	40020040 	.word	0x40020040
 800608c:	40020058 	.word	0x40020058
 8006090:	40020070 	.word	0x40020070
 8006094:	40020088 	.word	0x40020088
 8006098:	400200a0 	.word	0x400200a0
 800609c:	400200b8 	.word	0x400200b8
 80060a0:	40020410 	.word	0x40020410
 80060a4:	40020428 	.word	0x40020428
 80060a8:	40020440 	.word	0x40020440
 80060ac:	40020458 	.word	0x40020458
 80060b0:	40020470 	.word	0x40020470
 80060b4:	40020488 	.word	0x40020488
 80060b8:	400204a0 	.word	0x400204a0
 80060bc:	400204b8 	.word	0x400204b8
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 0308 	and.w	r3, r3, #8
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	bf14      	ite	ne
 80060ce:	2301      	movne	r3, #1
 80060d0:	2300      	moveq	r3, #0
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d015      	beq.n	8006104 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f022 0204 	bic.w	r2, r2, #4
 80060e6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ec:	f003 031f 	and.w	r3, r3, #31
 80060f0:	2208      	movs	r2, #8
 80060f2:	409a      	lsls	r2, r3
 80060f4:	6a3b      	ldr	r3, [r7, #32]
 80060f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060fc:	f043 0201 	orr.w	r2, r3, #1
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006108:	f003 031f 	and.w	r3, r3, #31
 800610c:	69ba      	ldr	r2, [r7, #24]
 800610e:	fa22 f303 	lsr.w	r3, r2, r3
 8006112:	f003 0301 	and.w	r3, r3, #1
 8006116:	2b00      	cmp	r3, #0
 8006118:	d06e      	beq.n	80061f8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a69      	ldr	r2, [pc, #420]	; (80062c4 <HAL_DMA_IRQHandler+0x3f8>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d04a      	beq.n	80061ba <HAL_DMA_IRQHandler+0x2ee>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a67      	ldr	r2, [pc, #412]	; (80062c8 <HAL_DMA_IRQHandler+0x3fc>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d045      	beq.n	80061ba <HAL_DMA_IRQHandler+0x2ee>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a66      	ldr	r2, [pc, #408]	; (80062cc <HAL_DMA_IRQHandler+0x400>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d040      	beq.n	80061ba <HAL_DMA_IRQHandler+0x2ee>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a64      	ldr	r2, [pc, #400]	; (80062d0 <HAL_DMA_IRQHandler+0x404>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d03b      	beq.n	80061ba <HAL_DMA_IRQHandler+0x2ee>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a63      	ldr	r2, [pc, #396]	; (80062d4 <HAL_DMA_IRQHandler+0x408>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d036      	beq.n	80061ba <HAL_DMA_IRQHandler+0x2ee>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a61      	ldr	r2, [pc, #388]	; (80062d8 <HAL_DMA_IRQHandler+0x40c>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d031      	beq.n	80061ba <HAL_DMA_IRQHandler+0x2ee>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a60      	ldr	r2, [pc, #384]	; (80062dc <HAL_DMA_IRQHandler+0x410>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d02c      	beq.n	80061ba <HAL_DMA_IRQHandler+0x2ee>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a5e      	ldr	r2, [pc, #376]	; (80062e0 <HAL_DMA_IRQHandler+0x414>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d027      	beq.n	80061ba <HAL_DMA_IRQHandler+0x2ee>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a5d      	ldr	r2, [pc, #372]	; (80062e4 <HAL_DMA_IRQHandler+0x418>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d022      	beq.n	80061ba <HAL_DMA_IRQHandler+0x2ee>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a5b      	ldr	r2, [pc, #364]	; (80062e8 <HAL_DMA_IRQHandler+0x41c>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d01d      	beq.n	80061ba <HAL_DMA_IRQHandler+0x2ee>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a5a      	ldr	r2, [pc, #360]	; (80062ec <HAL_DMA_IRQHandler+0x420>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d018      	beq.n	80061ba <HAL_DMA_IRQHandler+0x2ee>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a58      	ldr	r2, [pc, #352]	; (80062f0 <HAL_DMA_IRQHandler+0x424>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d013      	beq.n	80061ba <HAL_DMA_IRQHandler+0x2ee>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a57      	ldr	r2, [pc, #348]	; (80062f4 <HAL_DMA_IRQHandler+0x428>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d00e      	beq.n	80061ba <HAL_DMA_IRQHandler+0x2ee>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a55      	ldr	r2, [pc, #340]	; (80062f8 <HAL_DMA_IRQHandler+0x42c>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d009      	beq.n	80061ba <HAL_DMA_IRQHandler+0x2ee>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a54      	ldr	r2, [pc, #336]	; (80062fc <HAL_DMA_IRQHandler+0x430>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d004      	beq.n	80061ba <HAL_DMA_IRQHandler+0x2ee>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a52      	ldr	r2, [pc, #328]	; (8006300 <HAL_DMA_IRQHandler+0x434>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d10a      	bne.n	80061d0 <HAL_DMA_IRQHandler+0x304>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	695b      	ldr	r3, [r3, #20]
 80061c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	bf14      	ite	ne
 80061c8:	2301      	movne	r3, #1
 80061ca:	2300      	moveq	r3, #0
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	e003      	b.n	80061d8 <HAL_DMA_IRQHandler+0x30c>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2300      	movs	r3, #0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00d      	beq.n	80061f8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061e0:	f003 031f 	and.w	r3, r3, #31
 80061e4:	2201      	movs	r2, #1
 80061e6:	409a      	lsls	r2, r3
 80061e8:	6a3b      	ldr	r3, [r7, #32]
 80061ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061f0:	f043 0202 	orr.w	r2, r3, #2
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061fc:	f003 031f 	and.w	r3, r3, #31
 8006200:	2204      	movs	r2, #4
 8006202:	409a      	lsls	r2, r3
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	4013      	ands	r3, r2
 8006208:	2b00      	cmp	r3, #0
 800620a:	f000 808f 	beq.w	800632c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a2c      	ldr	r2, [pc, #176]	; (80062c4 <HAL_DMA_IRQHandler+0x3f8>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d04a      	beq.n	80062ae <HAL_DMA_IRQHandler+0x3e2>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a2a      	ldr	r2, [pc, #168]	; (80062c8 <HAL_DMA_IRQHandler+0x3fc>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d045      	beq.n	80062ae <HAL_DMA_IRQHandler+0x3e2>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a29      	ldr	r2, [pc, #164]	; (80062cc <HAL_DMA_IRQHandler+0x400>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d040      	beq.n	80062ae <HAL_DMA_IRQHandler+0x3e2>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a27      	ldr	r2, [pc, #156]	; (80062d0 <HAL_DMA_IRQHandler+0x404>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d03b      	beq.n	80062ae <HAL_DMA_IRQHandler+0x3e2>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a26      	ldr	r2, [pc, #152]	; (80062d4 <HAL_DMA_IRQHandler+0x408>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d036      	beq.n	80062ae <HAL_DMA_IRQHandler+0x3e2>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a24      	ldr	r2, [pc, #144]	; (80062d8 <HAL_DMA_IRQHandler+0x40c>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d031      	beq.n	80062ae <HAL_DMA_IRQHandler+0x3e2>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a23      	ldr	r2, [pc, #140]	; (80062dc <HAL_DMA_IRQHandler+0x410>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d02c      	beq.n	80062ae <HAL_DMA_IRQHandler+0x3e2>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a21      	ldr	r2, [pc, #132]	; (80062e0 <HAL_DMA_IRQHandler+0x414>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d027      	beq.n	80062ae <HAL_DMA_IRQHandler+0x3e2>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a20      	ldr	r2, [pc, #128]	; (80062e4 <HAL_DMA_IRQHandler+0x418>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d022      	beq.n	80062ae <HAL_DMA_IRQHandler+0x3e2>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a1e      	ldr	r2, [pc, #120]	; (80062e8 <HAL_DMA_IRQHandler+0x41c>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d01d      	beq.n	80062ae <HAL_DMA_IRQHandler+0x3e2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a1d      	ldr	r2, [pc, #116]	; (80062ec <HAL_DMA_IRQHandler+0x420>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d018      	beq.n	80062ae <HAL_DMA_IRQHandler+0x3e2>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a1b      	ldr	r2, [pc, #108]	; (80062f0 <HAL_DMA_IRQHandler+0x424>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d013      	beq.n	80062ae <HAL_DMA_IRQHandler+0x3e2>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a1a      	ldr	r2, [pc, #104]	; (80062f4 <HAL_DMA_IRQHandler+0x428>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d00e      	beq.n	80062ae <HAL_DMA_IRQHandler+0x3e2>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a18      	ldr	r2, [pc, #96]	; (80062f8 <HAL_DMA_IRQHandler+0x42c>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d009      	beq.n	80062ae <HAL_DMA_IRQHandler+0x3e2>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a17      	ldr	r2, [pc, #92]	; (80062fc <HAL_DMA_IRQHandler+0x430>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d004      	beq.n	80062ae <HAL_DMA_IRQHandler+0x3e2>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a15      	ldr	r2, [pc, #84]	; (8006300 <HAL_DMA_IRQHandler+0x434>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d12a      	bne.n	8006304 <HAL_DMA_IRQHandler+0x438>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0302 	and.w	r3, r3, #2
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	bf14      	ite	ne
 80062bc:	2301      	movne	r3, #1
 80062be:	2300      	moveq	r3, #0
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	e023      	b.n	800630c <HAL_DMA_IRQHandler+0x440>
 80062c4:	40020010 	.word	0x40020010
 80062c8:	40020028 	.word	0x40020028
 80062cc:	40020040 	.word	0x40020040
 80062d0:	40020058 	.word	0x40020058
 80062d4:	40020070 	.word	0x40020070
 80062d8:	40020088 	.word	0x40020088
 80062dc:	400200a0 	.word	0x400200a0
 80062e0:	400200b8 	.word	0x400200b8
 80062e4:	40020410 	.word	0x40020410
 80062e8:	40020428 	.word	0x40020428
 80062ec:	40020440 	.word	0x40020440
 80062f0:	40020458 	.word	0x40020458
 80062f4:	40020470 	.word	0x40020470
 80062f8:	40020488 	.word	0x40020488
 80062fc:	400204a0 	.word	0x400204a0
 8006300:	400204b8 	.word	0x400204b8
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2300      	movs	r3, #0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00d      	beq.n	800632c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006314:	f003 031f 	and.w	r3, r3, #31
 8006318:	2204      	movs	r2, #4
 800631a:	409a      	lsls	r2, r3
 800631c:	6a3b      	ldr	r3, [r7, #32]
 800631e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006324:	f043 0204 	orr.w	r2, r3, #4
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006330:	f003 031f 	and.w	r3, r3, #31
 8006334:	2210      	movs	r2, #16
 8006336:	409a      	lsls	r2, r3
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	4013      	ands	r3, r2
 800633c:	2b00      	cmp	r3, #0
 800633e:	f000 80a6 	beq.w	800648e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a85      	ldr	r2, [pc, #532]	; (800655c <HAL_DMA_IRQHandler+0x690>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d04a      	beq.n	80063e2 <HAL_DMA_IRQHandler+0x516>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a83      	ldr	r2, [pc, #524]	; (8006560 <HAL_DMA_IRQHandler+0x694>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d045      	beq.n	80063e2 <HAL_DMA_IRQHandler+0x516>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a82      	ldr	r2, [pc, #520]	; (8006564 <HAL_DMA_IRQHandler+0x698>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d040      	beq.n	80063e2 <HAL_DMA_IRQHandler+0x516>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a80      	ldr	r2, [pc, #512]	; (8006568 <HAL_DMA_IRQHandler+0x69c>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d03b      	beq.n	80063e2 <HAL_DMA_IRQHandler+0x516>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a7f      	ldr	r2, [pc, #508]	; (800656c <HAL_DMA_IRQHandler+0x6a0>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d036      	beq.n	80063e2 <HAL_DMA_IRQHandler+0x516>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a7d      	ldr	r2, [pc, #500]	; (8006570 <HAL_DMA_IRQHandler+0x6a4>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d031      	beq.n	80063e2 <HAL_DMA_IRQHandler+0x516>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a7c      	ldr	r2, [pc, #496]	; (8006574 <HAL_DMA_IRQHandler+0x6a8>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d02c      	beq.n	80063e2 <HAL_DMA_IRQHandler+0x516>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a7a      	ldr	r2, [pc, #488]	; (8006578 <HAL_DMA_IRQHandler+0x6ac>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d027      	beq.n	80063e2 <HAL_DMA_IRQHandler+0x516>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a79      	ldr	r2, [pc, #484]	; (800657c <HAL_DMA_IRQHandler+0x6b0>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d022      	beq.n	80063e2 <HAL_DMA_IRQHandler+0x516>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a77      	ldr	r2, [pc, #476]	; (8006580 <HAL_DMA_IRQHandler+0x6b4>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d01d      	beq.n	80063e2 <HAL_DMA_IRQHandler+0x516>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a76      	ldr	r2, [pc, #472]	; (8006584 <HAL_DMA_IRQHandler+0x6b8>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d018      	beq.n	80063e2 <HAL_DMA_IRQHandler+0x516>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a74      	ldr	r2, [pc, #464]	; (8006588 <HAL_DMA_IRQHandler+0x6bc>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d013      	beq.n	80063e2 <HAL_DMA_IRQHandler+0x516>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a73      	ldr	r2, [pc, #460]	; (800658c <HAL_DMA_IRQHandler+0x6c0>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d00e      	beq.n	80063e2 <HAL_DMA_IRQHandler+0x516>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a71      	ldr	r2, [pc, #452]	; (8006590 <HAL_DMA_IRQHandler+0x6c4>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d009      	beq.n	80063e2 <HAL_DMA_IRQHandler+0x516>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a70      	ldr	r2, [pc, #448]	; (8006594 <HAL_DMA_IRQHandler+0x6c8>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d004      	beq.n	80063e2 <HAL_DMA_IRQHandler+0x516>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a6e      	ldr	r2, [pc, #440]	; (8006598 <HAL_DMA_IRQHandler+0x6cc>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d10a      	bne.n	80063f8 <HAL_DMA_IRQHandler+0x52c>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0308 	and.w	r3, r3, #8
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	bf14      	ite	ne
 80063f0:	2301      	movne	r3, #1
 80063f2:	2300      	moveq	r3, #0
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	e009      	b.n	800640c <HAL_DMA_IRQHandler+0x540>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 0304 	and.w	r3, r3, #4
 8006402:	2b00      	cmp	r3, #0
 8006404:	bf14      	ite	ne
 8006406:	2301      	movne	r3, #1
 8006408:	2300      	moveq	r3, #0
 800640a:	b2db      	uxtb	r3, r3
 800640c:	2b00      	cmp	r3, #0
 800640e:	d03e      	beq.n	800648e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006414:	f003 031f 	and.w	r3, r3, #31
 8006418:	2210      	movs	r2, #16
 800641a:	409a      	lsls	r2, r3
 800641c:	6a3b      	ldr	r3, [r7, #32]
 800641e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d018      	beq.n	8006460 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006438:	2b00      	cmp	r3, #0
 800643a:	d108      	bne.n	800644e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006440:	2b00      	cmp	r3, #0
 8006442:	d024      	beq.n	800648e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	4798      	blx	r3
 800644c:	e01f      	b.n	800648e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006452:	2b00      	cmp	r3, #0
 8006454:	d01b      	beq.n	800648e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	4798      	blx	r3
 800645e:	e016      	b.n	800648e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800646a:	2b00      	cmp	r3, #0
 800646c:	d107      	bne.n	800647e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f022 0208 	bic.w	r2, r2, #8
 800647c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006482:	2b00      	cmp	r3, #0
 8006484:	d003      	beq.n	800648e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006492:	f003 031f 	and.w	r3, r3, #31
 8006496:	2220      	movs	r2, #32
 8006498:	409a      	lsls	r2, r3
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	4013      	ands	r3, r2
 800649e:	2b00      	cmp	r3, #0
 80064a0:	f000 8110 	beq.w	80066c4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a2c      	ldr	r2, [pc, #176]	; (800655c <HAL_DMA_IRQHandler+0x690>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d04a      	beq.n	8006544 <HAL_DMA_IRQHandler+0x678>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a2b      	ldr	r2, [pc, #172]	; (8006560 <HAL_DMA_IRQHandler+0x694>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d045      	beq.n	8006544 <HAL_DMA_IRQHandler+0x678>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a29      	ldr	r2, [pc, #164]	; (8006564 <HAL_DMA_IRQHandler+0x698>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d040      	beq.n	8006544 <HAL_DMA_IRQHandler+0x678>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a28      	ldr	r2, [pc, #160]	; (8006568 <HAL_DMA_IRQHandler+0x69c>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d03b      	beq.n	8006544 <HAL_DMA_IRQHandler+0x678>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a26      	ldr	r2, [pc, #152]	; (800656c <HAL_DMA_IRQHandler+0x6a0>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d036      	beq.n	8006544 <HAL_DMA_IRQHandler+0x678>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a25      	ldr	r2, [pc, #148]	; (8006570 <HAL_DMA_IRQHandler+0x6a4>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d031      	beq.n	8006544 <HAL_DMA_IRQHandler+0x678>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a23      	ldr	r2, [pc, #140]	; (8006574 <HAL_DMA_IRQHandler+0x6a8>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d02c      	beq.n	8006544 <HAL_DMA_IRQHandler+0x678>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a22      	ldr	r2, [pc, #136]	; (8006578 <HAL_DMA_IRQHandler+0x6ac>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d027      	beq.n	8006544 <HAL_DMA_IRQHandler+0x678>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a20      	ldr	r2, [pc, #128]	; (800657c <HAL_DMA_IRQHandler+0x6b0>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d022      	beq.n	8006544 <HAL_DMA_IRQHandler+0x678>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a1f      	ldr	r2, [pc, #124]	; (8006580 <HAL_DMA_IRQHandler+0x6b4>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d01d      	beq.n	8006544 <HAL_DMA_IRQHandler+0x678>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a1d      	ldr	r2, [pc, #116]	; (8006584 <HAL_DMA_IRQHandler+0x6b8>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d018      	beq.n	8006544 <HAL_DMA_IRQHandler+0x678>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a1c      	ldr	r2, [pc, #112]	; (8006588 <HAL_DMA_IRQHandler+0x6bc>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d013      	beq.n	8006544 <HAL_DMA_IRQHandler+0x678>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a1a      	ldr	r2, [pc, #104]	; (800658c <HAL_DMA_IRQHandler+0x6c0>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d00e      	beq.n	8006544 <HAL_DMA_IRQHandler+0x678>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a19      	ldr	r2, [pc, #100]	; (8006590 <HAL_DMA_IRQHandler+0x6c4>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d009      	beq.n	8006544 <HAL_DMA_IRQHandler+0x678>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a17      	ldr	r2, [pc, #92]	; (8006594 <HAL_DMA_IRQHandler+0x6c8>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d004      	beq.n	8006544 <HAL_DMA_IRQHandler+0x678>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a16      	ldr	r2, [pc, #88]	; (8006598 <HAL_DMA_IRQHandler+0x6cc>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d12b      	bne.n	800659c <HAL_DMA_IRQHandler+0x6d0>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0310 	and.w	r3, r3, #16
 800654e:	2b00      	cmp	r3, #0
 8006550:	bf14      	ite	ne
 8006552:	2301      	movne	r3, #1
 8006554:	2300      	moveq	r3, #0
 8006556:	b2db      	uxtb	r3, r3
 8006558:	e02a      	b.n	80065b0 <HAL_DMA_IRQHandler+0x6e4>
 800655a:	bf00      	nop
 800655c:	40020010 	.word	0x40020010
 8006560:	40020028 	.word	0x40020028
 8006564:	40020040 	.word	0x40020040
 8006568:	40020058 	.word	0x40020058
 800656c:	40020070 	.word	0x40020070
 8006570:	40020088 	.word	0x40020088
 8006574:	400200a0 	.word	0x400200a0
 8006578:	400200b8 	.word	0x400200b8
 800657c:	40020410 	.word	0x40020410
 8006580:	40020428 	.word	0x40020428
 8006584:	40020440 	.word	0x40020440
 8006588:	40020458 	.word	0x40020458
 800658c:	40020470 	.word	0x40020470
 8006590:	40020488 	.word	0x40020488
 8006594:	400204a0 	.word	0x400204a0
 8006598:	400204b8 	.word	0x400204b8
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	bf14      	ite	ne
 80065aa:	2301      	movne	r3, #1
 80065ac:	2300      	moveq	r3, #0
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f000 8087 	beq.w	80066c4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ba:	f003 031f 	and.w	r3, r3, #31
 80065be:	2220      	movs	r2, #32
 80065c0:	409a      	lsls	r2, r3
 80065c2:	6a3b      	ldr	r3, [r7, #32]
 80065c4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	2b04      	cmp	r3, #4
 80065d0:	d139      	bne.n	8006646 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f022 0216 	bic.w	r2, r2, #22
 80065e0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	695a      	ldr	r2, [r3, #20]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065f0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d103      	bne.n	8006602 <HAL_DMA_IRQHandler+0x736>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d007      	beq.n	8006612 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f022 0208 	bic.w	r2, r2, #8
 8006610:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006616:	f003 031f 	and.w	r3, r3, #31
 800661a:	223f      	movs	r2, #63	; 0x3f
 800661c:	409a      	lsls	r2, r3
 800661e:	6a3b      	ldr	r3, [r7, #32]
 8006620:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006636:	2b00      	cmp	r3, #0
 8006638:	f000 834a 	beq.w	8006cd0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	4798      	blx	r3
          }
          return;
 8006644:	e344      	b.n	8006cd0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d018      	beq.n	8006686 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800665e:	2b00      	cmp	r3, #0
 8006660:	d108      	bne.n	8006674 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006666:	2b00      	cmp	r3, #0
 8006668:	d02c      	beq.n	80066c4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	4798      	blx	r3
 8006672:	e027      	b.n	80066c4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006678:	2b00      	cmp	r3, #0
 800667a:	d023      	beq.n	80066c4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	4798      	blx	r3
 8006684:	e01e      	b.n	80066c4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006690:	2b00      	cmp	r3, #0
 8006692:	d10f      	bne.n	80066b4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f022 0210 	bic.w	r2, r2, #16
 80066a2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d003      	beq.n	80066c4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f000 8306 	beq.w	8006cda <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	f000 8088 	beq.w	80067ec <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2204      	movs	r2, #4
 80066e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a7a      	ldr	r2, [pc, #488]	; (80068d4 <HAL_DMA_IRQHandler+0xa08>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d04a      	beq.n	8006784 <HAL_DMA_IRQHandler+0x8b8>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a79      	ldr	r2, [pc, #484]	; (80068d8 <HAL_DMA_IRQHandler+0xa0c>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d045      	beq.n	8006784 <HAL_DMA_IRQHandler+0x8b8>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a77      	ldr	r2, [pc, #476]	; (80068dc <HAL_DMA_IRQHandler+0xa10>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d040      	beq.n	8006784 <HAL_DMA_IRQHandler+0x8b8>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a76      	ldr	r2, [pc, #472]	; (80068e0 <HAL_DMA_IRQHandler+0xa14>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d03b      	beq.n	8006784 <HAL_DMA_IRQHandler+0x8b8>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a74      	ldr	r2, [pc, #464]	; (80068e4 <HAL_DMA_IRQHandler+0xa18>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d036      	beq.n	8006784 <HAL_DMA_IRQHandler+0x8b8>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a73      	ldr	r2, [pc, #460]	; (80068e8 <HAL_DMA_IRQHandler+0xa1c>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d031      	beq.n	8006784 <HAL_DMA_IRQHandler+0x8b8>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a71      	ldr	r2, [pc, #452]	; (80068ec <HAL_DMA_IRQHandler+0xa20>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d02c      	beq.n	8006784 <HAL_DMA_IRQHandler+0x8b8>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a70      	ldr	r2, [pc, #448]	; (80068f0 <HAL_DMA_IRQHandler+0xa24>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d027      	beq.n	8006784 <HAL_DMA_IRQHandler+0x8b8>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a6e      	ldr	r2, [pc, #440]	; (80068f4 <HAL_DMA_IRQHandler+0xa28>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d022      	beq.n	8006784 <HAL_DMA_IRQHandler+0x8b8>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a6d      	ldr	r2, [pc, #436]	; (80068f8 <HAL_DMA_IRQHandler+0xa2c>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d01d      	beq.n	8006784 <HAL_DMA_IRQHandler+0x8b8>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a6b      	ldr	r2, [pc, #428]	; (80068fc <HAL_DMA_IRQHandler+0xa30>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d018      	beq.n	8006784 <HAL_DMA_IRQHandler+0x8b8>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a6a      	ldr	r2, [pc, #424]	; (8006900 <HAL_DMA_IRQHandler+0xa34>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d013      	beq.n	8006784 <HAL_DMA_IRQHandler+0x8b8>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a68      	ldr	r2, [pc, #416]	; (8006904 <HAL_DMA_IRQHandler+0xa38>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d00e      	beq.n	8006784 <HAL_DMA_IRQHandler+0x8b8>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a67      	ldr	r2, [pc, #412]	; (8006908 <HAL_DMA_IRQHandler+0xa3c>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d009      	beq.n	8006784 <HAL_DMA_IRQHandler+0x8b8>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a65      	ldr	r2, [pc, #404]	; (800690c <HAL_DMA_IRQHandler+0xa40>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d004      	beq.n	8006784 <HAL_DMA_IRQHandler+0x8b8>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a64      	ldr	r2, [pc, #400]	; (8006910 <HAL_DMA_IRQHandler+0xa44>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d108      	bne.n	8006796 <HAL_DMA_IRQHandler+0x8ca>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f022 0201 	bic.w	r2, r2, #1
 8006792:	601a      	str	r2, [r3, #0]
 8006794:	e007      	b.n	80067a6 <HAL_DMA_IRQHandler+0x8da>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f022 0201 	bic.w	r2, r2, #1
 80067a4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	3301      	adds	r3, #1
 80067aa:	60fb      	str	r3, [r7, #12]
 80067ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d307      	bcc.n	80067c2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 0301 	and.w	r3, r3, #1
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1f2      	bne.n	80067a6 <HAL_DMA_IRQHandler+0x8da>
 80067c0:	e000      	b.n	80067c4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80067c2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d004      	beq.n	80067dc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2203      	movs	r2, #3
 80067d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80067da:	e003      	b.n	80067e4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f000 8272 	beq.w	8006cda <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	4798      	blx	r3
 80067fe:	e26c      	b.n	8006cda <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a43      	ldr	r2, [pc, #268]	; (8006914 <HAL_DMA_IRQHandler+0xa48>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d022      	beq.n	8006850 <HAL_DMA_IRQHandler+0x984>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a42      	ldr	r2, [pc, #264]	; (8006918 <HAL_DMA_IRQHandler+0xa4c>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d01d      	beq.n	8006850 <HAL_DMA_IRQHandler+0x984>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a40      	ldr	r2, [pc, #256]	; (800691c <HAL_DMA_IRQHandler+0xa50>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d018      	beq.n	8006850 <HAL_DMA_IRQHandler+0x984>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a3f      	ldr	r2, [pc, #252]	; (8006920 <HAL_DMA_IRQHandler+0xa54>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d013      	beq.n	8006850 <HAL_DMA_IRQHandler+0x984>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a3d      	ldr	r2, [pc, #244]	; (8006924 <HAL_DMA_IRQHandler+0xa58>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d00e      	beq.n	8006850 <HAL_DMA_IRQHandler+0x984>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a3c      	ldr	r2, [pc, #240]	; (8006928 <HAL_DMA_IRQHandler+0xa5c>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d009      	beq.n	8006850 <HAL_DMA_IRQHandler+0x984>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a3a      	ldr	r2, [pc, #232]	; (800692c <HAL_DMA_IRQHandler+0xa60>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d004      	beq.n	8006850 <HAL_DMA_IRQHandler+0x984>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a39      	ldr	r2, [pc, #228]	; (8006930 <HAL_DMA_IRQHandler+0xa64>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d101      	bne.n	8006854 <HAL_DMA_IRQHandler+0x988>
 8006850:	2301      	movs	r3, #1
 8006852:	e000      	b.n	8006856 <HAL_DMA_IRQHandler+0x98a>
 8006854:	2300      	movs	r3, #0
 8006856:	2b00      	cmp	r3, #0
 8006858:	f000 823f 	beq.w	8006cda <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006868:	f003 031f 	and.w	r3, r3, #31
 800686c:	2204      	movs	r2, #4
 800686e:	409a      	lsls	r2, r3
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	4013      	ands	r3, r2
 8006874:	2b00      	cmp	r3, #0
 8006876:	f000 80cd 	beq.w	8006a14 <HAL_DMA_IRQHandler+0xb48>
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	f003 0304 	and.w	r3, r3, #4
 8006880:	2b00      	cmp	r3, #0
 8006882:	f000 80c7 	beq.w	8006a14 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800688a:	f003 031f 	and.w	r3, r3, #31
 800688e:	2204      	movs	r2, #4
 8006890:	409a      	lsls	r2, r3
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800689c:	2b00      	cmp	r3, #0
 800689e:	d049      	beq.n	8006934 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d109      	bne.n	80068be <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f000 8210 	beq.w	8006cd4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068bc:	e20a      	b.n	8006cd4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	f000 8206 	beq.w	8006cd4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068d0:	e200      	b.n	8006cd4 <HAL_DMA_IRQHandler+0xe08>
 80068d2:	bf00      	nop
 80068d4:	40020010 	.word	0x40020010
 80068d8:	40020028 	.word	0x40020028
 80068dc:	40020040 	.word	0x40020040
 80068e0:	40020058 	.word	0x40020058
 80068e4:	40020070 	.word	0x40020070
 80068e8:	40020088 	.word	0x40020088
 80068ec:	400200a0 	.word	0x400200a0
 80068f0:	400200b8 	.word	0x400200b8
 80068f4:	40020410 	.word	0x40020410
 80068f8:	40020428 	.word	0x40020428
 80068fc:	40020440 	.word	0x40020440
 8006900:	40020458 	.word	0x40020458
 8006904:	40020470 	.word	0x40020470
 8006908:	40020488 	.word	0x40020488
 800690c:	400204a0 	.word	0x400204a0
 8006910:	400204b8 	.word	0x400204b8
 8006914:	58025408 	.word	0x58025408
 8006918:	5802541c 	.word	0x5802541c
 800691c:	58025430 	.word	0x58025430
 8006920:	58025444 	.word	0x58025444
 8006924:	58025458 	.word	0x58025458
 8006928:	5802546c 	.word	0x5802546c
 800692c:	58025480 	.word	0x58025480
 8006930:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	f003 0320 	and.w	r3, r3, #32
 800693a:	2b00      	cmp	r3, #0
 800693c:	d160      	bne.n	8006a00 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a7f      	ldr	r2, [pc, #508]	; (8006b40 <HAL_DMA_IRQHandler+0xc74>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d04a      	beq.n	80069de <HAL_DMA_IRQHandler+0xb12>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a7d      	ldr	r2, [pc, #500]	; (8006b44 <HAL_DMA_IRQHandler+0xc78>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d045      	beq.n	80069de <HAL_DMA_IRQHandler+0xb12>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a7c      	ldr	r2, [pc, #496]	; (8006b48 <HAL_DMA_IRQHandler+0xc7c>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d040      	beq.n	80069de <HAL_DMA_IRQHandler+0xb12>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a7a      	ldr	r2, [pc, #488]	; (8006b4c <HAL_DMA_IRQHandler+0xc80>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d03b      	beq.n	80069de <HAL_DMA_IRQHandler+0xb12>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a79      	ldr	r2, [pc, #484]	; (8006b50 <HAL_DMA_IRQHandler+0xc84>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d036      	beq.n	80069de <HAL_DMA_IRQHandler+0xb12>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a77      	ldr	r2, [pc, #476]	; (8006b54 <HAL_DMA_IRQHandler+0xc88>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d031      	beq.n	80069de <HAL_DMA_IRQHandler+0xb12>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a76      	ldr	r2, [pc, #472]	; (8006b58 <HAL_DMA_IRQHandler+0xc8c>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d02c      	beq.n	80069de <HAL_DMA_IRQHandler+0xb12>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a74      	ldr	r2, [pc, #464]	; (8006b5c <HAL_DMA_IRQHandler+0xc90>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d027      	beq.n	80069de <HAL_DMA_IRQHandler+0xb12>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a73      	ldr	r2, [pc, #460]	; (8006b60 <HAL_DMA_IRQHandler+0xc94>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d022      	beq.n	80069de <HAL_DMA_IRQHandler+0xb12>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a71      	ldr	r2, [pc, #452]	; (8006b64 <HAL_DMA_IRQHandler+0xc98>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d01d      	beq.n	80069de <HAL_DMA_IRQHandler+0xb12>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a70      	ldr	r2, [pc, #448]	; (8006b68 <HAL_DMA_IRQHandler+0xc9c>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d018      	beq.n	80069de <HAL_DMA_IRQHandler+0xb12>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a6e      	ldr	r2, [pc, #440]	; (8006b6c <HAL_DMA_IRQHandler+0xca0>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d013      	beq.n	80069de <HAL_DMA_IRQHandler+0xb12>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a6d      	ldr	r2, [pc, #436]	; (8006b70 <HAL_DMA_IRQHandler+0xca4>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d00e      	beq.n	80069de <HAL_DMA_IRQHandler+0xb12>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a6b      	ldr	r2, [pc, #428]	; (8006b74 <HAL_DMA_IRQHandler+0xca8>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d009      	beq.n	80069de <HAL_DMA_IRQHandler+0xb12>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a6a      	ldr	r2, [pc, #424]	; (8006b78 <HAL_DMA_IRQHandler+0xcac>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d004      	beq.n	80069de <HAL_DMA_IRQHandler+0xb12>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a68      	ldr	r2, [pc, #416]	; (8006b7c <HAL_DMA_IRQHandler+0xcb0>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d108      	bne.n	80069f0 <HAL_DMA_IRQHandler+0xb24>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f022 0208 	bic.w	r2, r2, #8
 80069ec:	601a      	str	r2, [r3, #0]
 80069ee:	e007      	b.n	8006a00 <HAL_DMA_IRQHandler+0xb34>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f022 0204 	bic.w	r2, r2, #4
 80069fe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f000 8165 	beq.w	8006cd4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a12:	e15f      	b.n	8006cd4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a18:	f003 031f 	and.w	r3, r3, #31
 8006a1c:	2202      	movs	r2, #2
 8006a1e:	409a      	lsls	r2, r3
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	4013      	ands	r3, r2
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f000 80c5 	beq.w	8006bb4 <HAL_DMA_IRQHandler+0xce8>
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	f003 0302 	and.w	r3, r3, #2
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f000 80bf 	beq.w	8006bb4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a3a:	f003 031f 	and.w	r3, r3, #31
 8006a3e:	2202      	movs	r2, #2
 8006a40:	409a      	lsls	r2, r3
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d018      	beq.n	8006a82 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d109      	bne.n	8006a6e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f000 813a 	beq.w	8006cd8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a6c:	e134      	b.n	8006cd8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f000 8130 	beq.w	8006cd8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a80:	e12a      	b.n	8006cd8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	f003 0320 	and.w	r3, r3, #32
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f040 8089 	bne.w	8006ba0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a2b      	ldr	r2, [pc, #172]	; (8006b40 <HAL_DMA_IRQHandler+0xc74>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d04a      	beq.n	8006b2e <HAL_DMA_IRQHandler+0xc62>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a29      	ldr	r2, [pc, #164]	; (8006b44 <HAL_DMA_IRQHandler+0xc78>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d045      	beq.n	8006b2e <HAL_DMA_IRQHandler+0xc62>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a28      	ldr	r2, [pc, #160]	; (8006b48 <HAL_DMA_IRQHandler+0xc7c>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d040      	beq.n	8006b2e <HAL_DMA_IRQHandler+0xc62>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a26      	ldr	r2, [pc, #152]	; (8006b4c <HAL_DMA_IRQHandler+0xc80>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d03b      	beq.n	8006b2e <HAL_DMA_IRQHandler+0xc62>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a25      	ldr	r2, [pc, #148]	; (8006b50 <HAL_DMA_IRQHandler+0xc84>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d036      	beq.n	8006b2e <HAL_DMA_IRQHandler+0xc62>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a23      	ldr	r2, [pc, #140]	; (8006b54 <HAL_DMA_IRQHandler+0xc88>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d031      	beq.n	8006b2e <HAL_DMA_IRQHandler+0xc62>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a22      	ldr	r2, [pc, #136]	; (8006b58 <HAL_DMA_IRQHandler+0xc8c>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d02c      	beq.n	8006b2e <HAL_DMA_IRQHandler+0xc62>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a20      	ldr	r2, [pc, #128]	; (8006b5c <HAL_DMA_IRQHandler+0xc90>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d027      	beq.n	8006b2e <HAL_DMA_IRQHandler+0xc62>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a1f      	ldr	r2, [pc, #124]	; (8006b60 <HAL_DMA_IRQHandler+0xc94>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d022      	beq.n	8006b2e <HAL_DMA_IRQHandler+0xc62>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a1d      	ldr	r2, [pc, #116]	; (8006b64 <HAL_DMA_IRQHandler+0xc98>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d01d      	beq.n	8006b2e <HAL_DMA_IRQHandler+0xc62>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a1c      	ldr	r2, [pc, #112]	; (8006b68 <HAL_DMA_IRQHandler+0xc9c>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d018      	beq.n	8006b2e <HAL_DMA_IRQHandler+0xc62>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a1a      	ldr	r2, [pc, #104]	; (8006b6c <HAL_DMA_IRQHandler+0xca0>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d013      	beq.n	8006b2e <HAL_DMA_IRQHandler+0xc62>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a19      	ldr	r2, [pc, #100]	; (8006b70 <HAL_DMA_IRQHandler+0xca4>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d00e      	beq.n	8006b2e <HAL_DMA_IRQHandler+0xc62>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a17      	ldr	r2, [pc, #92]	; (8006b74 <HAL_DMA_IRQHandler+0xca8>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d009      	beq.n	8006b2e <HAL_DMA_IRQHandler+0xc62>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a16      	ldr	r2, [pc, #88]	; (8006b78 <HAL_DMA_IRQHandler+0xcac>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d004      	beq.n	8006b2e <HAL_DMA_IRQHandler+0xc62>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a14      	ldr	r2, [pc, #80]	; (8006b7c <HAL_DMA_IRQHandler+0xcb0>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d128      	bne.n	8006b80 <HAL_DMA_IRQHandler+0xcb4>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f022 0214 	bic.w	r2, r2, #20
 8006b3c:	601a      	str	r2, [r3, #0]
 8006b3e:	e027      	b.n	8006b90 <HAL_DMA_IRQHandler+0xcc4>
 8006b40:	40020010 	.word	0x40020010
 8006b44:	40020028 	.word	0x40020028
 8006b48:	40020040 	.word	0x40020040
 8006b4c:	40020058 	.word	0x40020058
 8006b50:	40020070 	.word	0x40020070
 8006b54:	40020088 	.word	0x40020088
 8006b58:	400200a0 	.word	0x400200a0
 8006b5c:	400200b8 	.word	0x400200b8
 8006b60:	40020410 	.word	0x40020410
 8006b64:	40020428 	.word	0x40020428
 8006b68:	40020440 	.word	0x40020440
 8006b6c:	40020458 	.word	0x40020458
 8006b70:	40020470 	.word	0x40020470
 8006b74:	40020488 	.word	0x40020488
 8006b78:	400204a0 	.word	0x400204a0
 8006b7c:	400204b8 	.word	0x400204b8
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f022 020a 	bic.w	r2, r2, #10
 8006b8e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f000 8097 	beq.w	8006cd8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bb2:	e091      	b.n	8006cd8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bb8:	f003 031f 	and.w	r3, r3, #31
 8006bbc:	2208      	movs	r2, #8
 8006bbe:	409a      	lsls	r2, r3
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f000 8088 	beq.w	8006cda <HAL_DMA_IRQHandler+0xe0e>
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	f003 0308 	and.w	r3, r3, #8
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f000 8082 	beq.w	8006cda <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a41      	ldr	r2, [pc, #260]	; (8006ce0 <HAL_DMA_IRQHandler+0xe14>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d04a      	beq.n	8006c76 <HAL_DMA_IRQHandler+0xdaa>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a3f      	ldr	r2, [pc, #252]	; (8006ce4 <HAL_DMA_IRQHandler+0xe18>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d045      	beq.n	8006c76 <HAL_DMA_IRQHandler+0xdaa>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a3e      	ldr	r2, [pc, #248]	; (8006ce8 <HAL_DMA_IRQHandler+0xe1c>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d040      	beq.n	8006c76 <HAL_DMA_IRQHandler+0xdaa>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a3c      	ldr	r2, [pc, #240]	; (8006cec <HAL_DMA_IRQHandler+0xe20>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d03b      	beq.n	8006c76 <HAL_DMA_IRQHandler+0xdaa>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a3b      	ldr	r2, [pc, #236]	; (8006cf0 <HAL_DMA_IRQHandler+0xe24>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d036      	beq.n	8006c76 <HAL_DMA_IRQHandler+0xdaa>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a39      	ldr	r2, [pc, #228]	; (8006cf4 <HAL_DMA_IRQHandler+0xe28>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d031      	beq.n	8006c76 <HAL_DMA_IRQHandler+0xdaa>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a38      	ldr	r2, [pc, #224]	; (8006cf8 <HAL_DMA_IRQHandler+0xe2c>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d02c      	beq.n	8006c76 <HAL_DMA_IRQHandler+0xdaa>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a36      	ldr	r2, [pc, #216]	; (8006cfc <HAL_DMA_IRQHandler+0xe30>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d027      	beq.n	8006c76 <HAL_DMA_IRQHandler+0xdaa>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a35      	ldr	r2, [pc, #212]	; (8006d00 <HAL_DMA_IRQHandler+0xe34>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d022      	beq.n	8006c76 <HAL_DMA_IRQHandler+0xdaa>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a33      	ldr	r2, [pc, #204]	; (8006d04 <HAL_DMA_IRQHandler+0xe38>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d01d      	beq.n	8006c76 <HAL_DMA_IRQHandler+0xdaa>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a32      	ldr	r2, [pc, #200]	; (8006d08 <HAL_DMA_IRQHandler+0xe3c>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d018      	beq.n	8006c76 <HAL_DMA_IRQHandler+0xdaa>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a30      	ldr	r2, [pc, #192]	; (8006d0c <HAL_DMA_IRQHandler+0xe40>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d013      	beq.n	8006c76 <HAL_DMA_IRQHandler+0xdaa>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a2f      	ldr	r2, [pc, #188]	; (8006d10 <HAL_DMA_IRQHandler+0xe44>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d00e      	beq.n	8006c76 <HAL_DMA_IRQHandler+0xdaa>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a2d      	ldr	r2, [pc, #180]	; (8006d14 <HAL_DMA_IRQHandler+0xe48>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d009      	beq.n	8006c76 <HAL_DMA_IRQHandler+0xdaa>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a2c      	ldr	r2, [pc, #176]	; (8006d18 <HAL_DMA_IRQHandler+0xe4c>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d004      	beq.n	8006c76 <HAL_DMA_IRQHandler+0xdaa>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a2a      	ldr	r2, [pc, #168]	; (8006d1c <HAL_DMA_IRQHandler+0xe50>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d108      	bne.n	8006c88 <HAL_DMA_IRQHandler+0xdbc>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f022 021c 	bic.w	r2, r2, #28
 8006c84:	601a      	str	r2, [r3, #0]
 8006c86:	e007      	b.n	8006c98 <HAL_DMA_IRQHandler+0xdcc>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f022 020e 	bic.w	r2, r2, #14
 8006c96:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c9c:	f003 031f 	and.w	r3, r3, #31
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	409a      	lsls	r2, r3
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d009      	beq.n	8006cda <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	4798      	blx	r3
 8006cce:	e004      	b.n	8006cda <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006cd0:	bf00      	nop
 8006cd2:	e002      	b.n	8006cda <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cd4:	bf00      	nop
 8006cd6:	e000      	b.n	8006cda <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cd8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006cda:	3728      	adds	r7, #40	; 0x28
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	40020010 	.word	0x40020010
 8006ce4:	40020028 	.word	0x40020028
 8006ce8:	40020040 	.word	0x40020040
 8006cec:	40020058 	.word	0x40020058
 8006cf0:	40020070 	.word	0x40020070
 8006cf4:	40020088 	.word	0x40020088
 8006cf8:	400200a0 	.word	0x400200a0
 8006cfc:	400200b8 	.word	0x400200b8
 8006d00:	40020410 	.word	0x40020410
 8006d04:	40020428 	.word	0x40020428
 8006d08:	40020440 	.word	0x40020440
 8006d0c:	40020458 	.word	0x40020458
 8006d10:	40020470 	.word	0x40020470
 8006d14:	40020488 	.word	0x40020488
 8006d18:	400204a0 	.word	0x400204a0
 8006d1c:	400204b8 	.word	0x400204b8

08006d20 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b087      	sub	sp, #28
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]
 8006d2c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d32:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d38:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a7f      	ldr	r2, [pc, #508]	; (8006f3c <DMA_SetConfig+0x21c>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d072      	beq.n	8006e2a <DMA_SetConfig+0x10a>
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a7d      	ldr	r2, [pc, #500]	; (8006f40 <DMA_SetConfig+0x220>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d06d      	beq.n	8006e2a <DMA_SetConfig+0x10a>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a7c      	ldr	r2, [pc, #496]	; (8006f44 <DMA_SetConfig+0x224>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d068      	beq.n	8006e2a <DMA_SetConfig+0x10a>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a7a      	ldr	r2, [pc, #488]	; (8006f48 <DMA_SetConfig+0x228>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d063      	beq.n	8006e2a <DMA_SetConfig+0x10a>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a79      	ldr	r2, [pc, #484]	; (8006f4c <DMA_SetConfig+0x22c>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d05e      	beq.n	8006e2a <DMA_SetConfig+0x10a>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a77      	ldr	r2, [pc, #476]	; (8006f50 <DMA_SetConfig+0x230>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d059      	beq.n	8006e2a <DMA_SetConfig+0x10a>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a76      	ldr	r2, [pc, #472]	; (8006f54 <DMA_SetConfig+0x234>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d054      	beq.n	8006e2a <DMA_SetConfig+0x10a>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a74      	ldr	r2, [pc, #464]	; (8006f58 <DMA_SetConfig+0x238>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d04f      	beq.n	8006e2a <DMA_SetConfig+0x10a>
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a73      	ldr	r2, [pc, #460]	; (8006f5c <DMA_SetConfig+0x23c>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d04a      	beq.n	8006e2a <DMA_SetConfig+0x10a>
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a71      	ldr	r2, [pc, #452]	; (8006f60 <DMA_SetConfig+0x240>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d045      	beq.n	8006e2a <DMA_SetConfig+0x10a>
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a70      	ldr	r2, [pc, #448]	; (8006f64 <DMA_SetConfig+0x244>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d040      	beq.n	8006e2a <DMA_SetConfig+0x10a>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a6e      	ldr	r2, [pc, #440]	; (8006f68 <DMA_SetConfig+0x248>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d03b      	beq.n	8006e2a <DMA_SetConfig+0x10a>
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a6d      	ldr	r2, [pc, #436]	; (8006f6c <DMA_SetConfig+0x24c>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d036      	beq.n	8006e2a <DMA_SetConfig+0x10a>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a6b      	ldr	r2, [pc, #428]	; (8006f70 <DMA_SetConfig+0x250>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d031      	beq.n	8006e2a <DMA_SetConfig+0x10a>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a6a      	ldr	r2, [pc, #424]	; (8006f74 <DMA_SetConfig+0x254>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d02c      	beq.n	8006e2a <DMA_SetConfig+0x10a>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a68      	ldr	r2, [pc, #416]	; (8006f78 <DMA_SetConfig+0x258>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d027      	beq.n	8006e2a <DMA_SetConfig+0x10a>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a67      	ldr	r2, [pc, #412]	; (8006f7c <DMA_SetConfig+0x25c>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d022      	beq.n	8006e2a <DMA_SetConfig+0x10a>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a65      	ldr	r2, [pc, #404]	; (8006f80 <DMA_SetConfig+0x260>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d01d      	beq.n	8006e2a <DMA_SetConfig+0x10a>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a64      	ldr	r2, [pc, #400]	; (8006f84 <DMA_SetConfig+0x264>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d018      	beq.n	8006e2a <DMA_SetConfig+0x10a>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a62      	ldr	r2, [pc, #392]	; (8006f88 <DMA_SetConfig+0x268>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d013      	beq.n	8006e2a <DMA_SetConfig+0x10a>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a61      	ldr	r2, [pc, #388]	; (8006f8c <DMA_SetConfig+0x26c>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d00e      	beq.n	8006e2a <DMA_SetConfig+0x10a>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a5f      	ldr	r2, [pc, #380]	; (8006f90 <DMA_SetConfig+0x270>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d009      	beq.n	8006e2a <DMA_SetConfig+0x10a>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a5e      	ldr	r2, [pc, #376]	; (8006f94 <DMA_SetConfig+0x274>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d004      	beq.n	8006e2a <DMA_SetConfig+0x10a>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a5c      	ldr	r2, [pc, #368]	; (8006f98 <DMA_SetConfig+0x278>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d101      	bne.n	8006e2e <DMA_SetConfig+0x10e>
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e000      	b.n	8006e30 <DMA_SetConfig+0x110>
 8006e2e:	2300      	movs	r3, #0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00d      	beq.n	8006e50 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006e3c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d004      	beq.n	8006e50 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006e4e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a39      	ldr	r2, [pc, #228]	; (8006f3c <DMA_SetConfig+0x21c>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d04a      	beq.n	8006ef0 <DMA_SetConfig+0x1d0>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a38      	ldr	r2, [pc, #224]	; (8006f40 <DMA_SetConfig+0x220>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d045      	beq.n	8006ef0 <DMA_SetConfig+0x1d0>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a36      	ldr	r2, [pc, #216]	; (8006f44 <DMA_SetConfig+0x224>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d040      	beq.n	8006ef0 <DMA_SetConfig+0x1d0>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a35      	ldr	r2, [pc, #212]	; (8006f48 <DMA_SetConfig+0x228>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d03b      	beq.n	8006ef0 <DMA_SetConfig+0x1d0>
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a33      	ldr	r2, [pc, #204]	; (8006f4c <DMA_SetConfig+0x22c>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d036      	beq.n	8006ef0 <DMA_SetConfig+0x1d0>
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a32      	ldr	r2, [pc, #200]	; (8006f50 <DMA_SetConfig+0x230>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d031      	beq.n	8006ef0 <DMA_SetConfig+0x1d0>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a30      	ldr	r2, [pc, #192]	; (8006f54 <DMA_SetConfig+0x234>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d02c      	beq.n	8006ef0 <DMA_SetConfig+0x1d0>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a2f      	ldr	r2, [pc, #188]	; (8006f58 <DMA_SetConfig+0x238>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d027      	beq.n	8006ef0 <DMA_SetConfig+0x1d0>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a2d      	ldr	r2, [pc, #180]	; (8006f5c <DMA_SetConfig+0x23c>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d022      	beq.n	8006ef0 <DMA_SetConfig+0x1d0>
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a2c      	ldr	r2, [pc, #176]	; (8006f60 <DMA_SetConfig+0x240>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d01d      	beq.n	8006ef0 <DMA_SetConfig+0x1d0>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a2a      	ldr	r2, [pc, #168]	; (8006f64 <DMA_SetConfig+0x244>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d018      	beq.n	8006ef0 <DMA_SetConfig+0x1d0>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a29      	ldr	r2, [pc, #164]	; (8006f68 <DMA_SetConfig+0x248>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d013      	beq.n	8006ef0 <DMA_SetConfig+0x1d0>
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a27      	ldr	r2, [pc, #156]	; (8006f6c <DMA_SetConfig+0x24c>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d00e      	beq.n	8006ef0 <DMA_SetConfig+0x1d0>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a26      	ldr	r2, [pc, #152]	; (8006f70 <DMA_SetConfig+0x250>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d009      	beq.n	8006ef0 <DMA_SetConfig+0x1d0>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a24      	ldr	r2, [pc, #144]	; (8006f74 <DMA_SetConfig+0x254>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d004      	beq.n	8006ef0 <DMA_SetConfig+0x1d0>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a23      	ldr	r2, [pc, #140]	; (8006f78 <DMA_SetConfig+0x258>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d101      	bne.n	8006ef4 <DMA_SetConfig+0x1d4>
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e000      	b.n	8006ef6 <DMA_SetConfig+0x1d6>
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d059      	beq.n	8006fae <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006efe:	f003 031f 	and.w	r3, r3, #31
 8006f02:	223f      	movs	r2, #63	; 0x3f
 8006f04:	409a      	lsls	r2, r3
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006f18:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	2b40      	cmp	r3, #64	; 0x40
 8006f28:	d138      	bne.n	8006f9c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	68ba      	ldr	r2, [r7, #8]
 8006f38:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006f3a:	e086      	b.n	800704a <DMA_SetConfig+0x32a>
 8006f3c:	40020010 	.word	0x40020010
 8006f40:	40020028 	.word	0x40020028
 8006f44:	40020040 	.word	0x40020040
 8006f48:	40020058 	.word	0x40020058
 8006f4c:	40020070 	.word	0x40020070
 8006f50:	40020088 	.word	0x40020088
 8006f54:	400200a0 	.word	0x400200a0
 8006f58:	400200b8 	.word	0x400200b8
 8006f5c:	40020410 	.word	0x40020410
 8006f60:	40020428 	.word	0x40020428
 8006f64:	40020440 	.word	0x40020440
 8006f68:	40020458 	.word	0x40020458
 8006f6c:	40020470 	.word	0x40020470
 8006f70:	40020488 	.word	0x40020488
 8006f74:	400204a0 	.word	0x400204a0
 8006f78:	400204b8 	.word	0x400204b8
 8006f7c:	58025408 	.word	0x58025408
 8006f80:	5802541c 	.word	0x5802541c
 8006f84:	58025430 	.word	0x58025430
 8006f88:	58025444 	.word	0x58025444
 8006f8c:	58025458 	.word	0x58025458
 8006f90:	5802546c 	.word	0x5802546c
 8006f94:	58025480 	.word	0x58025480
 8006f98:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68ba      	ldr	r2, [r7, #8]
 8006fa2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	60da      	str	r2, [r3, #12]
}
 8006fac:	e04d      	b.n	800704a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a29      	ldr	r2, [pc, #164]	; (8007058 <DMA_SetConfig+0x338>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d022      	beq.n	8006ffe <DMA_SetConfig+0x2de>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a27      	ldr	r2, [pc, #156]	; (800705c <DMA_SetConfig+0x33c>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d01d      	beq.n	8006ffe <DMA_SetConfig+0x2de>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a26      	ldr	r2, [pc, #152]	; (8007060 <DMA_SetConfig+0x340>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d018      	beq.n	8006ffe <DMA_SetConfig+0x2de>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a24      	ldr	r2, [pc, #144]	; (8007064 <DMA_SetConfig+0x344>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d013      	beq.n	8006ffe <DMA_SetConfig+0x2de>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a23      	ldr	r2, [pc, #140]	; (8007068 <DMA_SetConfig+0x348>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d00e      	beq.n	8006ffe <DMA_SetConfig+0x2de>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a21      	ldr	r2, [pc, #132]	; (800706c <DMA_SetConfig+0x34c>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d009      	beq.n	8006ffe <DMA_SetConfig+0x2de>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a20      	ldr	r2, [pc, #128]	; (8007070 <DMA_SetConfig+0x350>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d004      	beq.n	8006ffe <DMA_SetConfig+0x2de>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a1e      	ldr	r2, [pc, #120]	; (8007074 <DMA_SetConfig+0x354>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d101      	bne.n	8007002 <DMA_SetConfig+0x2e2>
 8006ffe:	2301      	movs	r3, #1
 8007000:	e000      	b.n	8007004 <DMA_SetConfig+0x2e4>
 8007002:	2300      	movs	r3, #0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d020      	beq.n	800704a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800700c:	f003 031f 	and.w	r3, r3, #31
 8007010:	2201      	movs	r2, #1
 8007012:	409a      	lsls	r2, r3
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	683a      	ldr	r2, [r7, #0]
 800701e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	2b40      	cmp	r3, #64	; 0x40
 8007026:	d108      	bne.n	800703a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	60da      	str	r2, [r3, #12]
}
 8007038:	e007      	b.n	800704a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68ba      	ldr	r2, [r7, #8]
 8007040:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	60da      	str	r2, [r3, #12]
}
 800704a:	bf00      	nop
 800704c:	371c      	adds	r7, #28
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	58025408 	.word	0x58025408
 800705c:	5802541c 	.word	0x5802541c
 8007060:	58025430 	.word	0x58025430
 8007064:	58025444 	.word	0x58025444
 8007068:	58025458 	.word	0x58025458
 800706c:	5802546c 	.word	0x5802546c
 8007070:	58025480 	.word	0x58025480
 8007074:	58025494 	.word	0x58025494

08007078 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a42      	ldr	r2, [pc, #264]	; (8007190 <DMA_CalcBaseAndBitshift+0x118>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d04a      	beq.n	8007120 <DMA_CalcBaseAndBitshift+0xa8>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a41      	ldr	r2, [pc, #260]	; (8007194 <DMA_CalcBaseAndBitshift+0x11c>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d045      	beq.n	8007120 <DMA_CalcBaseAndBitshift+0xa8>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a3f      	ldr	r2, [pc, #252]	; (8007198 <DMA_CalcBaseAndBitshift+0x120>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d040      	beq.n	8007120 <DMA_CalcBaseAndBitshift+0xa8>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a3e      	ldr	r2, [pc, #248]	; (800719c <DMA_CalcBaseAndBitshift+0x124>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d03b      	beq.n	8007120 <DMA_CalcBaseAndBitshift+0xa8>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a3c      	ldr	r2, [pc, #240]	; (80071a0 <DMA_CalcBaseAndBitshift+0x128>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d036      	beq.n	8007120 <DMA_CalcBaseAndBitshift+0xa8>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a3b      	ldr	r2, [pc, #236]	; (80071a4 <DMA_CalcBaseAndBitshift+0x12c>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d031      	beq.n	8007120 <DMA_CalcBaseAndBitshift+0xa8>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a39      	ldr	r2, [pc, #228]	; (80071a8 <DMA_CalcBaseAndBitshift+0x130>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d02c      	beq.n	8007120 <DMA_CalcBaseAndBitshift+0xa8>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a38      	ldr	r2, [pc, #224]	; (80071ac <DMA_CalcBaseAndBitshift+0x134>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d027      	beq.n	8007120 <DMA_CalcBaseAndBitshift+0xa8>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a36      	ldr	r2, [pc, #216]	; (80071b0 <DMA_CalcBaseAndBitshift+0x138>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d022      	beq.n	8007120 <DMA_CalcBaseAndBitshift+0xa8>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a35      	ldr	r2, [pc, #212]	; (80071b4 <DMA_CalcBaseAndBitshift+0x13c>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d01d      	beq.n	8007120 <DMA_CalcBaseAndBitshift+0xa8>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a33      	ldr	r2, [pc, #204]	; (80071b8 <DMA_CalcBaseAndBitshift+0x140>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d018      	beq.n	8007120 <DMA_CalcBaseAndBitshift+0xa8>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a32      	ldr	r2, [pc, #200]	; (80071bc <DMA_CalcBaseAndBitshift+0x144>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d013      	beq.n	8007120 <DMA_CalcBaseAndBitshift+0xa8>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a30      	ldr	r2, [pc, #192]	; (80071c0 <DMA_CalcBaseAndBitshift+0x148>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d00e      	beq.n	8007120 <DMA_CalcBaseAndBitshift+0xa8>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a2f      	ldr	r2, [pc, #188]	; (80071c4 <DMA_CalcBaseAndBitshift+0x14c>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d009      	beq.n	8007120 <DMA_CalcBaseAndBitshift+0xa8>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a2d      	ldr	r2, [pc, #180]	; (80071c8 <DMA_CalcBaseAndBitshift+0x150>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d004      	beq.n	8007120 <DMA_CalcBaseAndBitshift+0xa8>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a2c      	ldr	r2, [pc, #176]	; (80071cc <DMA_CalcBaseAndBitshift+0x154>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d101      	bne.n	8007124 <DMA_CalcBaseAndBitshift+0xac>
 8007120:	2301      	movs	r3, #1
 8007122:	e000      	b.n	8007126 <DMA_CalcBaseAndBitshift+0xae>
 8007124:	2300      	movs	r3, #0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d024      	beq.n	8007174 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	b2db      	uxtb	r3, r3
 8007130:	3b10      	subs	r3, #16
 8007132:	4a27      	ldr	r2, [pc, #156]	; (80071d0 <DMA_CalcBaseAndBitshift+0x158>)
 8007134:	fba2 2303 	umull	r2, r3, r2, r3
 8007138:	091b      	lsrs	r3, r3, #4
 800713a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f003 0307 	and.w	r3, r3, #7
 8007142:	4a24      	ldr	r2, [pc, #144]	; (80071d4 <DMA_CalcBaseAndBitshift+0x15c>)
 8007144:	5cd3      	ldrb	r3, [r2, r3]
 8007146:	461a      	mov	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2b03      	cmp	r3, #3
 8007150:	d908      	bls.n	8007164 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	461a      	mov	r2, r3
 8007158:	4b1f      	ldr	r3, [pc, #124]	; (80071d8 <DMA_CalcBaseAndBitshift+0x160>)
 800715a:	4013      	ands	r3, r2
 800715c:	1d1a      	adds	r2, r3, #4
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	659a      	str	r2, [r3, #88]	; 0x58
 8007162:	e00d      	b.n	8007180 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	461a      	mov	r2, r3
 800716a:	4b1b      	ldr	r3, [pc, #108]	; (80071d8 <DMA_CalcBaseAndBitshift+0x160>)
 800716c:	4013      	ands	r3, r2
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	6593      	str	r3, [r2, #88]	; 0x58
 8007172:	e005      	b.n	8007180 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007184:	4618      	mov	r0, r3
 8007186:	3714      	adds	r7, #20
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr
 8007190:	40020010 	.word	0x40020010
 8007194:	40020028 	.word	0x40020028
 8007198:	40020040 	.word	0x40020040
 800719c:	40020058 	.word	0x40020058
 80071a0:	40020070 	.word	0x40020070
 80071a4:	40020088 	.word	0x40020088
 80071a8:	400200a0 	.word	0x400200a0
 80071ac:	400200b8 	.word	0x400200b8
 80071b0:	40020410 	.word	0x40020410
 80071b4:	40020428 	.word	0x40020428
 80071b8:	40020440 	.word	0x40020440
 80071bc:	40020458 	.word	0x40020458
 80071c0:	40020470 	.word	0x40020470
 80071c4:	40020488 	.word	0x40020488
 80071c8:	400204a0 	.word	0x400204a0
 80071cc:	400204b8 	.word	0x400204b8
 80071d0:	aaaaaaab 	.word	0xaaaaaaab
 80071d4:	08017ab0 	.word	0x08017ab0
 80071d8:	fffffc00 	.word	0xfffffc00

080071dc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071e4:	2300      	movs	r3, #0
 80071e6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	699b      	ldr	r3, [r3, #24]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d120      	bne.n	8007232 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f4:	2b03      	cmp	r3, #3
 80071f6:	d858      	bhi.n	80072aa <DMA_CheckFifoParam+0xce>
 80071f8:	a201      	add	r2, pc, #4	; (adr r2, 8007200 <DMA_CheckFifoParam+0x24>)
 80071fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071fe:	bf00      	nop
 8007200:	08007211 	.word	0x08007211
 8007204:	08007223 	.word	0x08007223
 8007208:	08007211 	.word	0x08007211
 800720c:	080072ab 	.word	0x080072ab
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007214:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007218:	2b00      	cmp	r3, #0
 800721a:	d048      	beq.n	80072ae <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007220:	e045      	b.n	80072ae <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007226:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800722a:	d142      	bne.n	80072b2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007230:	e03f      	b.n	80072b2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	699b      	ldr	r3, [r3, #24]
 8007236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800723a:	d123      	bne.n	8007284 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007240:	2b03      	cmp	r3, #3
 8007242:	d838      	bhi.n	80072b6 <DMA_CheckFifoParam+0xda>
 8007244:	a201      	add	r2, pc, #4	; (adr r2, 800724c <DMA_CheckFifoParam+0x70>)
 8007246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800724a:	bf00      	nop
 800724c:	0800725d 	.word	0x0800725d
 8007250:	08007263 	.word	0x08007263
 8007254:	0800725d 	.word	0x0800725d
 8007258:	08007275 	.word	0x08007275
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	73fb      	strb	r3, [r7, #15]
        break;
 8007260:	e030      	b.n	80072c4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007266:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d025      	beq.n	80072ba <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007272:	e022      	b.n	80072ba <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007278:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800727c:	d11f      	bne.n	80072be <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007282:	e01c      	b.n	80072be <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007288:	2b02      	cmp	r3, #2
 800728a:	d902      	bls.n	8007292 <DMA_CheckFifoParam+0xb6>
 800728c:	2b03      	cmp	r3, #3
 800728e:	d003      	beq.n	8007298 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007290:	e018      	b.n	80072c4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	73fb      	strb	r3, [r7, #15]
        break;
 8007296:	e015      	b.n	80072c4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800729c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00e      	beq.n	80072c2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	73fb      	strb	r3, [r7, #15]
    break;
 80072a8:	e00b      	b.n	80072c2 <DMA_CheckFifoParam+0xe6>
        break;
 80072aa:	bf00      	nop
 80072ac:	e00a      	b.n	80072c4 <DMA_CheckFifoParam+0xe8>
        break;
 80072ae:	bf00      	nop
 80072b0:	e008      	b.n	80072c4 <DMA_CheckFifoParam+0xe8>
        break;
 80072b2:	bf00      	nop
 80072b4:	e006      	b.n	80072c4 <DMA_CheckFifoParam+0xe8>
        break;
 80072b6:	bf00      	nop
 80072b8:	e004      	b.n	80072c4 <DMA_CheckFifoParam+0xe8>
        break;
 80072ba:	bf00      	nop
 80072bc:	e002      	b.n	80072c4 <DMA_CheckFifoParam+0xe8>
        break;
 80072be:	bf00      	nop
 80072c0:	e000      	b.n	80072c4 <DMA_CheckFifoParam+0xe8>
    break;
 80072c2:	bf00      	nop
    }
  }

  return status;
 80072c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3714      	adds	r7, #20
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop

080072d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b085      	sub	sp, #20
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a38      	ldr	r2, [pc, #224]	; (80073c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d022      	beq.n	8007332 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a36      	ldr	r2, [pc, #216]	; (80073cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d01d      	beq.n	8007332 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a35      	ldr	r2, [pc, #212]	; (80073d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d018      	beq.n	8007332 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a33      	ldr	r2, [pc, #204]	; (80073d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d013      	beq.n	8007332 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a32      	ldr	r2, [pc, #200]	; (80073d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d00e      	beq.n	8007332 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a30      	ldr	r2, [pc, #192]	; (80073dc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d009      	beq.n	8007332 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a2f      	ldr	r2, [pc, #188]	; (80073e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d004      	beq.n	8007332 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a2d      	ldr	r2, [pc, #180]	; (80073e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d101      	bne.n	8007336 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007332:	2301      	movs	r3, #1
 8007334:	e000      	b.n	8007338 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007336:	2300      	movs	r3, #0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d01a      	beq.n	8007372 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	b2db      	uxtb	r3, r3
 8007342:	3b08      	subs	r3, #8
 8007344:	4a28      	ldr	r2, [pc, #160]	; (80073e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007346:	fba2 2303 	umull	r2, r3, r2, r3
 800734a:	091b      	lsrs	r3, r3, #4
 800734c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	4b26      	ldr	r3, [pc, #152]	; (80073ec <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007352:	4413      	add	r3, r2
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	461a      	mov	r2, r3
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4a24      	ldr	r2, [pc, #144]	; (80073f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007360:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f003 031f 	and.w	r3, r3, #31
 8007368:	2201      	movs	r2, #1
 800736a:	409a      	lsls	r2, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007370:	e024      	b.n	80073bc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	b2db      	uxtb	r3, r3
 8007378:	3b10      	subs	r3, #16
 800737a:	4a1e      	ldr	r2, [pc, #120]	; (80073f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800737c:	fba2 2303 	umull	r2, r3, r2, r3
 8007380:	091b      	lsrs	r3, r3, #4
 8007382:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	4a1c      	ldr	r2, [pc, #112]	; (80073f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d806      	bhi.n	800739a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	4a1b      	ldr	r2, [pc, #108]	; (80073fc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d902      	bls.n	800739a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	3308      	adds	r3, #8
 8007398:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	4b18      	ldr	r3, [pc, #96]	; (8007400 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800739e:	4413      	add	r3, r2
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	461a      	mov	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4a16      	ldr	r2, [pc, #88]	; (8007404 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80073ac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f003 031f 	and.w	r3, r3, #31
 80073b4:	2201      	movs	r2, #1
 80073b6:	409a      	lsls	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	669a      	str	r2, [r3, #104]	; 0x68
}
 80073bc:	bf00      	nop
 80073be:	3714      	adds	r7, #20
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr
 80073c8:	58025408 	.word	0x58025408
 80073cc:	5802541c 	.word	0x5802541c
 80073d0:	58025430 	.word	0x58025430
 80073d4:	58025444 	.word	0x58025444
 80073d8:	58025458 	.word	0x58025458
 80073dc:	5802546c 	.word	0x5802546c
 80073e0:	58025480 	.word	0x58025480
 80073e4:	58025494 	.word	0x58025494
 80073e8:	cccccccd 	.word	0xcccccccd
 80073ec:	16009600 	.word	0x16009600
 80073f0:	58025880 	.word	0x58025880
 80073f4:	aaaaaaab 	.word	0xaaaaaaab
 80073f8:	400204b8 	.word	0x400204b8
 80073fc:	4002040f 	.word	0x4002040f
 8007400:	10008200 	.word	0x10008200
 8007404:	40020880 	.word	0x40020880

08007408 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007408:	b480      	push	{r7}
 800740a:	b085      	sub	sp, #20
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	b2db      	uxtb	r3, r3
 8007416:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d04a      	beq.n	80074b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2b08      	cmp	r3, #8
 8007422:	d847      	bhi.n	80074b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a25      	ldr	r2, [pc, #148]	; (80074c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d022      	beq.n	8007474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a24      	ldr	r2, [pc, #144]	; (80074c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d01d      	beq.n	8007474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a22      	ldr	r2, [pc, #136]	; (80074c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d018      	beq.n	8007474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a21      	ldr	r2, [pc, #132]	; (80074cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d013      	beq.n	8007474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a1f      	ldr	r2, [pc, #124]	; (80074d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d00e      	beq.n	8007474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a1e      	ldr	r2, [pc, #120]	; (80074d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d009      	beq.n	8007474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a1c      	ldr	r2, [pc, #112]	; (80074d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d004      	beq.n	8007474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a1b      	ldr	r2, [pc, #108]	; (80074dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d101      	bne.n	8007478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007474:	2301      	movs	r3, #1
 8007476:	e000      	b.n	800747a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007478:	2300      	movs	r3, #0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00a      	beq.n	8007494 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800747e:	68fa      	ldr	r2, [r7, #12]
 8007480:	4b17      	ldr	r3, [pc, #92]	; (80074e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007482:	4413      	add	r3, r2
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	461a      	mov	r2, r3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a15      	ldr	r2, [pc, #84]	; (80074e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007490:	671a      	str	r2, [r3, #112]	; 0x70
 8007492:	e009      	b.n	80074a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	4b14      	ldr	r3, [pc, #80]	; (80074e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007498:	4413      	add	r3, r2
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	461a      	mov	r2, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a11      	ldr	r2, [pc, #68]	; (80074ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80074a6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	3b01      	subs	r3, #1
 80074ac:	2201      	movs	r2, #1
 80074ae:	409a      	lsls	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80074b4:	bf00      	nop
 80074b6:	3714      	adds	r7, #20
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr
 80074c0:	58025408 	.word	0x58025408
 80074c4:	5802541c 	.word	0x5802541c
 80074c8:	58025430 	.word	0x58025430
 80074cc:	58025444 	.word	0x58025444
 80074d0:	58025458 	.word	0x58025458
 80074d4:	5802546c 	.word	0x5802546c
 80074d8:	58025480 	.word	0x58025480
 80074dc:	58025494 	.word	0x58025494
 80074e0:	1600963f 	.word	0x1600963f
 80074e4:	58025940 	.word	0x58025940
 80074e8:	1000823f 	.word	0x1000823f
 80074ec:	40020940 	.word	0x40020940

080074f0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b098      	sub	sp, #96	; 0x60
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80074f8:	4a84      	ldr	r2, [pc, #528]	; (800770c <HAL_FDCAN_Init+0x21c>)
 80074fa:	f107 030c 	add.w	r3, r7, #12
 80074fe:	4611      	mov	r1, r2
 8007500:	224c      	movs	r2, #76	; 0x4c
 8007502:	4618      	mov	r0, r3
 8007504:	f00f fd34 	bl	8016f70 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d101      	bne.n	8007512 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e1c6      	b.n	80078a0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a7e      	ldr	r2, [pc, #504]	; (8007710 <HAL_FDCAN_Init+0x220>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d106      	bne.n	800752a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007524:	461a      	mov	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007530:	b2db      	uxtb	r3, r3
 8007532:	2b00      	cmp	r3, #0
 8007534:	d106      	bne.n	8007544 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f7fb fad8 	bl	8002af4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	699a      	ldr	r2, [r3, #24]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f022 0210 	bic.w	r2, r2, #16
 8007552:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007554:	f7fc fa32 	bl	80039bc <HAL_GetTick>
 8007558:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800755a:	e014      	b.n	8007586 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800755c:	f7fc fa2e 	bl	80039bc <HAL_GetTick>
 8007560:	4602      	mov	r2, r0
 8007562:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007564:	1ad3      	subs	r3, r2, r3
 8007566:	2b0a      	cmp	r3, #10
 8007568:	d90d      	bls.n	8007586 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007570:	f043 0201 	orr.w	r2, r3, #1
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2203      	movs	r2, #3
 800757e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	e18c      	b.n	80078a0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	699b      	ldr	r3, [r3, #24]
 800758c:	f003 0308 	and.w	r3, r3, #8
 8007590:	2b08      	cmp	r3, #8
 8007592:	d0e3      	beq.n	800755c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	699a      	ldr	r2, [r3, #24]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f042 0201 	orr.w	r2, r2, #1
 80075a2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80075a4:	f7fc fa0a 	bl	80039bc <HAL_GetTick>
 80075a8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80075aa:	e014      	b.n	80075d6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80075ac:	f7fc fa06 	bl	80039bc <HAL_GetTick>
 80075b0:	4602      	mov	r2, r0
 80075b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	2b0a      	cmp	r3, #10
 80075b8:	d90d      	bls.n	80075d6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075c0:	f043 0201 	orr.w	r2, r3, #1
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2203      	movs	r2, #3
 80075ce:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	e164      	b.n	80078a0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	699b      	ldr	r3, [r3, #24]
 80075dc:	f003 0301 	and.w	r3, r3, #1
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d0e3      	beq.n	80075ac <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	699a      	ldr	r2, [r3, #24]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f042 0202 	orr.w	r2, r2, #2
 80075f2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	7c1b      	ldrb	r3, [r3, #16]
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d108      	bne.n	800760e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	699a      	ldr	r2, [r3, #24]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800760a:	619a      	str	r2, [r3, #24]
 800760c:	e007      	b.n	800761e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	699a      	ldr	r2, [r3, #24]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800761c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	7c5b      	ldrb	r3, [r3, #17]
 8007622:	2b01      	cmp	r3, #1
 8007624:	d108      	bne.n	8007638 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	699a      	ldr	r2, [r3, #24]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007634:	619a      	str	r2, [r3, #24]
 8007636:	e007      	b.n	8007648 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	699a      	ldr	r2, [r3, #24]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007646:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	7c9b      	ldrb	r3, [r3, #18]
 800764c:	2b01      	cmp	r3, #1
 800764e:	d108      	bne.n	8007662 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	699a      	ldr	r2, [r3, #24]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800765e:	619a      	str	r2, [r3, #24]
 8007660:	e007      	b.n	8007672 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	699a      	ldr	r2, [r3, #24]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007670:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	699b      	ldr	r3, [r3, #24]
 8007678:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	689a      	ldr	r2, [r3, #8]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	430a      	orrs	r2, r1
 8007686:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	699a      	ldr	r2, [r3, #24]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8007696:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	691a      	ldr	r2, [r3, #16]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f022 0210 	bic.w	r2, r2, #16
 80076a6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d108      	bne.n	80076c2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	699a      	ldr	r2, [r3, #24]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f042 0204 	orr.w	r2, r2, #4
 80076be:	619a      	str	r2, [r3, #24]
 80076c0:	e030      	b.n	8007724 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d02c      	beq.n	8007724 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	d020      	beq.n	8007714 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	699a      	ldr	r2, [r3, #24]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80076e0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	691a      	ldr	r2, [r3, #16]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f042 0210 	orr.w	r2, r2, #16
 80076f0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	2b03      	cmp	r3, #3
 80076f8:	d114      	bne.n	8007724 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	699a      	ldr	r2, [r3, #24]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f042 0220 	orr.w	r2, r2, #32
 8007708:	619a      	str	r2, [r3, #24]
 800770a:	e00b      	b.n	8007724 <HAL_FDCAN_Init+0x234>
 800770c:	080179a8 	.word	0x080179a8
 8007710:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	699a      	ldr	r2, [r3, #24]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f042 0220 	orr.w	r2, r2, #32
 8007722:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	699b      	ldr	r3, [r3, #24]
 8007728:	3b01      	subs	r3, #1
 800772a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	69db      	ldr	r3, [r3, #28]
 8007730:	3b01      	subs	r3, #1
 8007732:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007734:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6a1b      	ldr	r3, [r3, #32]
 800773a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800773c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	695b      	ldr	r3, [r3, #20]
 8007744:	3b01      	subs	r3, #1
 8007746:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800774c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800774e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007758:	d115      	bne.n	8007786 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007764:	3b01      	subs	r3, #1
 8007766:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007768:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800776e:	3b01      	subs	r3, #1
 8007770:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007772:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777a:	3b01      	subs	r3, #1
 800777c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007782:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007784:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00a      	beq.n	80077a4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	430a      	orrs	r2, r1
 80077a0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077ac:	4413      	add	r3, r2
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d011      	beq.n	80077d6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80077ba:	f023 0107 	bic.w	r1, r3, #7
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	3360      	adds	r3, #96	; 0x60
 80077c6:	443b      	add	r3, r7
 80077c8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	430a      	orrs	r2, r1
 80077d2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d011      	beq.n	8007802 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80077e6:	f023 0107 	bic.w	r1, r3, #7
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	3360      	adds	r3, #96	; 0x60
 80077f2:	443b      	add	r3, r7
 80077f4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	430a      	orrs	r2, r1
 80077fe:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007806:	2b00      	cmp	r3, #0
 8007808:	d012      	beq.n	8007830 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007812:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	3360      	adds	r3, #96	; 0x60
 800781e:	443b      	add	r3, r7
 8007820:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007824:	011a      	lsls	r2, r3, #4
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	430a      	orrs	r2, r1
 800782c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007834:	2b00      	cmp	r3, #0
 8007836:	d012      	beq.n	800785e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007840:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	3360      	adds	r3, #96	; 0x60
 800784c:	443b      	add	r3, r7
 800784e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007852:	021a      	lsls	r2, r3, #8
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	430a      	orrs	r2, r1
 800785a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a11      	ldr	r2, [pc, #68]	; (80078a8 <HAL_FDCAN_Init+0x3b8>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d107      	bne.n	8007878 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	689a      	ldr	r2, [r3, #8]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	f022 0203 	bic.w	r2, r2, #3
 8007876:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 f80b 	bl	80078ac <FDCAN_CalcultateRamBlockAddresses>
 8007896:	4603      	mov	r3, r0
 8007898:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 800789c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3760      	adds	r7, #96	; 0x60
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	4000a000 	.word	0x4000a000

080078ac <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b085      	sub	sp, #20
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078b8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80078c2:	4ba7      	ldr	r3, [pc, #668]	; (8007b60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80078c4:	4013      	ands	r3, r2
 80078c6:	68ba      	ldr	r2, [r7, #8]
 80078c8:	0091      	lsls	r1, r2, #2
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	6812      	ldr	r2, [r2, #0]
 80078ce:	430b      	orrs	r3, r1
 80078d0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078dc:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e4:	041a      	lsls	r2, r3, #16
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	430a      	orrs	r2, r1
 80078ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f4:	68ba      	ldr	r2, [r7, #8]
 80078f6:	4413      	add	r3, r2
 80078f8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007902:	4b97      	ldr	r3, [pc, #604]	; (8007b60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007904:	4013      	ands	r3, r2
 8007906:	68ba      	ldr	r2, [r7, #8]
 8007908:	0091      	lsls	r1, r2, #2
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	6812      	ldr	r2, [r2, #0]
 800790e:	430b      	orrs	r3, r1
 8007910:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800791c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007924:	041a      	lsls	r2, r3, #16
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	430a      	orrs	r2, r1
 800792c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007934:	005b      	lsls	r3, r3, #1
 8007936:	68ba      	ldr	r2, [r7, #8]
 8007938:	4413      	add	r3, r2
 800793a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007944:	4b86      	ldr	r3, [pc, #536]	; (8007b60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007946:	4013      	ands	r3, r2
 8007948:	68ba      	ldr	r2, [r7, #8]
 800794a:	0091      	lsls	r1, r2, #2
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	6812      	ldr	r2, [r2, #0]
 8007950:	430b      	orrs	r3, r1
 8007952:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800795e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007966:	041a      	lsls	r2, r3, #16
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	430a      	orrs	r2, r1
 800796e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800797a:	fb02 f303 	mul.w	r3, r2, r3
 800797e:	68ba      	ldr	r2, [r7, #8]
 8007980:	4413      	add	r3, r2
 8007982:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800798c:	4b74      	ldr	r3, [pc, #464]	; (8007b60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800798e:	4013      	ands	r3, r2
 8007990:	68ba      	ldr	r2, [r7, #8]
 8007992:	0091      	lsls	r1, r2, #2
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	6812      	ldr	r2, [r2, #0]
 8007998:	430b      	orrs	r3, r1
 800799a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80079a6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079ae:	041a      	lsls	r2, r3, #16
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	430a      	orrs	r2, r1
 80079b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80079c2:	fb02 f303 	mul.w	r3, r2, r3
 80079c6:	68ba      	ldr	r2, [r7, #8]
 80079c8:	4413      	add	r3, r2
 80079ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80079d4:	4b62      	ldr	r3, [pc, #392]	; (8007b60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80079d6:	4013      	ands	r3, r2
 80079d8:	68ba      	ldr	r2, [r7, #8]
 80079da:	0091      	lsls	r1, r2, #2
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	6812      	ldr	r2, [r2, #0]
 80079e0:	430b      	orrs	r3, r1
 80079e2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80079ee:	fb02 f303 	mul.w	r3, r2, r3
 80079f2:	68ba      	ldr	r2, [r7, #8]
 80079f4:	4413      	add	r3, r2
 80079f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007a00:	4b57      	ldr	r3, [pc, #348]	; (8007b60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a02:	4013      	ands	r3, r2
 8007a04:	68ba      	ldr	r2, [r7, #8]
 8007a06:	0091      	lsls	r1, r2, #2
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	6812      	ldr	r2, [r2, #0]
 8007a0c:	430b      	orrs	r3, r1
 8007a0e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007a1a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a22:	041a      	lsls	r2, r3, #16
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	430a      	orrs	r2, r1
 8007a2a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a32:	005b      	lsls	r3, r3, #1
 8007a34:	68ba      	ldr	r2, [r7, #8]
 8007a36:	4413      	add	r3, r2
 8007a38:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007a42:	4b47      	ldr	r3, [pc, #284]	; (8007b60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a44:	4013      	ands	r3, r2
 8007a46:	68ba      	ldr	r2, [r7, #8]
 8007a48:	0091      	lsls	r1, r2, #2
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	6812      	ldr	r2, [r2, #0]
 8007a4e:	430b      	orrs	r3, r1
 8007a50:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007a5c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a64:	041a      	lsls	r2, r3, #16
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	430a      	orrs	r2, r1
 8007a6c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007a78:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a80:	061a      	lsls	r2, r3, #24
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	430a      	orrs	r2, r1
 8007a88:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a90:	4b34      	ldr	r3, [pc, #208]	; (8007b64 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007a92:	4413      	add	r3, r2
 8007a94:	009a      	lsls	r2, r3, #2
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	441a      	add	r2, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ab2:	00db      	lsls	r3, r3, #3
 8007ab4:	441a      	add	r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac2:	6879      	ldr	r1, [r7, #4]
 8007ac4:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007ac6:	fb01 f303 	mul.w	r3, r1, r3
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	441a      	add	r2, r3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ada:	6879      	ldr	r1, [r7, #4]
 8007adc:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007ade:	fb01 f303 	mul.w	r3, r1, r3
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	441a      	add	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007af2:	6879      	ldr	r1, [r7, #4]
 8007af4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8007af6:	fb01 f303 	mul.w	r3, r1, r3
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	441a      	add	r2, r3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b0e:	00db      	lsls	r3, r3, #3
 8007b10:	441a      	add	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b22:	6879      	ldr	r1, [r7, #4]
 8007b24:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007b26:	fb01 f303 	mul.w	r3, r1, r3
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	441a      	add	r2, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b3e:	6879      	ldr	r1, [r7, #4]
 8007b40:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007b42:	fb01 f303 	mul.w	r3, r1, r3
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	441a      	add	r2, r3
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b56:	4a04      	ldr	r2, [pc, #16]	; (8007b68 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d915      	bls.n	8007b88 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007b5c:	e006      	b.n	8007b6c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007b5e:	bf00      	nop
 8007b60:	ffff0003 	.word	0xffff0003
 8007b64:	10002b00 	.word	0x10002b00
 8007b68:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b72:	f043 0220 	orr.w	r2, r3, #32
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2203      	movs	r2, #3
 8007b80:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	e010      	b.n	8007baa <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b8c:	60fb      	str	r3, [r7, #12]
 8007b8e:	e005      	b.n	8007b9c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2200      	movs	r2, #0
 8007b94:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	3304      	adds	r3, #4
 8007b9a:	60fb      	str	r3, [r7, #12]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d3f3      	bcc.n	8007b90 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3714      	adds	r7, #20
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop

08007bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b089      	sub	sp, #36	; 0x24
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007bc6:	4b86      	ldr	r3, [pc, #536]	; (8007de0 <HAL_GPIO_Init+0x228>)
 8007bc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007bca:	e18c      	b.n	8007ee6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	2101      	movs	r1, #1
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8007bd8:	4013      	ands	r3, r2
 8007bda:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f000 817e 	beq.w	8007ee0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	f003 0303 	and.w	r3, r3, #3
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d005      	beq.n	8007bfc <HAL_GPIO_Init+0x44>
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	f003 0303 	and.w	r3, r3, #3
 8007bf8:	2b02      	cmp	r3, #2
 8007bfa:	d130      	bne.n	8007c5e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007c02:	69fb      	ldr	r3, [r7, #28]
 8007c04:	005b      	lsls	r3, r3, #1
 8007c06:	2203      	movs	r2, #3
 8007c08:	fa02 f303 	lsl.w	r3, r2, r3
 8007c0c:	43db      	mvns	r3, r3
 8007c0e:	69ba      	ldr	r2, [r7, #24]
 8007c10:	4013      	ands	r3, r2
 8007c12:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	68da      	ldr	r2, [r3, #12]
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	005b      	lsls	r3, r3, #1
 8007c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c20:	69ba      	ldr	r2, [r7, #24]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	69ba      	ldr	r2, [r7, #24]
 8007c2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007c32:	2201      	movs	r2, #1
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	fa02 f303 	lsl.w	r3, r2, r3
 8007c3a:	43db      	mvns	r3, r3
 8007c3c:	69ba      	ldr	r2, [r7, #24]
 8007c3e:	4013      	ands	r3, r2
 8007c40:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	091b      	lsrs	r3, r3, #4
 8007c48:	f003 0201 	and.w	r2, r3, #1
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c52:	69ba      	ldr	r2, [r7, #24]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	69ba      	ldr	r2, [r7, #24]
 8007c5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	f003 0303 	and.w	r3, r3, #3
 8007c66:	2b03      	cmp	r3, #3
 8007c68:	d017      	beq.n	8007c9a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	005b      	lsls	r3, r3, #1
 8007c74:	2203      	movs	r2, #3
 8007c76:	fa02 f303 	lsl.w	r3, r2, r3
 8007c7a:	43db      	mvns	r3, r3
 8007c7c:	69ba      	ldr	r2, [r7, #24]
 8007c7e:	4013      	ands	r3, r2
 8007c80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	689a      	ldr	r2, [r3, #8]
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	005b      	lsls	r3, r3, #1
 8007c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c8e:	69ba      	ldr	r2, [r7, #24]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	69ba      	ldr	r2, [r7, #24]
 8007c98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	f003 0303 	and.w	r3, r3, #3
 8007ca2:	2b02      	cmp	r3, #2
 8007ca4:	d123      	bne.n	8007cee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	08da      	lsrs	r2, r3, #3
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	3208      	adds	r2, #8
 8007cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	f003 0307 	and.w	r3, r3, #7
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	220f      	movs	r2, #15
 8007cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc2:	43db      	mvns	r3, r3
 8007cc4:	69ba      	ldr	r2, [r7, #24]
 8007cc6:	4013      	ands	r3, r2
 8007cc8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	691a      	ldr	r2, [r3, #16]
 8007cce:	69fb      	ldr	r3, [r7, #28]
 8007cd0:	f003 0307 	and.w	r3, r3, #7
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cda:	69ba      	ldr	r2, [r7, #24]
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	08da      	lsrs	r2, r3, #3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	3208      	adds	r2, #8
 8007ce8:	69b9      	ldr	r1, [r7, #24]
 8007cea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	005b      	lsls	r3, r3, #1
 8007cf8:	2203      	movs	r2, #3
 8007cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8007cfe:	43db      	mvns	r3, r3
 8007d00:	69ba      	ldr	r2, [r7, #24]
 8007d02:	4013      	ands	r3, r2
 8007d04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	f003 0203 	and.w	r2, r3, #3
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	005b      	lsls	r3, r3, #1
 8007d12:	fa02 f303 	lsl.w	r3, r2, r3
 8007d16:	69ba      	ldr	r2, [r7, #24]
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	69ba      	ldr	r2, [r7, #24]
 8007d20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	f000 80d8 	beq.w	8007ee0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d30:	4b2c      	ldr	r3, [pc, #176]	; (8007de4 <HAL_GPIO_Init+0x22c>)
 8007d32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d36:	4a2b      	ldr	r2, [pc, #172]	; (8007de4 <HAL_GPIO_Init+0x22c>)
 8007d38:	f043 0302 	orr.w	r3, r3, #2
 8007d3c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007d40:	4b28      	ldr	r3, [pc, #160]	; (8007de4 <HAL_GPIO_Init+0x22c>)
 8007d42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d46:	f003 0302 	and.w	r3, r3, #2
 8007d4a:	60fb      	str	r3, [r7, #12]
 8007d4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007d4e:	4a26      	ldr	r2, [pc, #152]	; (8007de8 <HAL_GPIO_Init+0x230>)
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	089b      	lsrs	r3, r3, #2
 8007d54:	3302      	adds	r3, #2
 8007d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	f003 0303 	and.w	r3, r3, #3
 8007d62:	009b      	lsls	r3, r3, #2
 8007d64:	220f      	movs	r2, #15
 8007d66:	fa02 f303 	lsl.w	r3, r2, r3
 8007d6a:	43db      	mvns	r3, r3
 8007d6c:	69ba      	ldr	r2, [r7, #24]
 8007d6e:	4013      	ands	r3, r2
 8007d70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4a1d      	ldr	r2, [pc, #116]	; (8007dec <HAL_GPIO_Init+0x234>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d04a      	beq.n	8007e10 <HAL_GPIO_Init+0x258>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4a1c      	ldr	r2, [pc, #112]	; (8007df0 <HAL_GPIO_Init+0x238>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d02b      	beq.n	8007dda <HAL_GPIO_Init+0x222>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a1b      	ldr	r2, [pc, #108]	; (8007df4 <HAL_GPIO_Init+0x23c>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d025      	beq.n	8007dd6 <HAL_GPIO_Init+0x21e>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4a1a      	ldr	r2, [pc, #104]	; (8007df8 <HAL_GPIO_Init+0x240>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d01f      	beq.n	8007dd2 <HAL_GPIO_Init+0x21a>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a19      	ldr	r2, [pc, #100]	; (8007dfc <HAL_GPIO_Init+0x244>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d019      	beq.n	8007dce <HAL_GPIO_Init+0x216>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a18      	ldr	r2, [pc, #96]	; (8007e00 <HAL_GPIO_Init+0x248>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d013      	beq.n	8007dca <HAL_GPIO_Init+0x212>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a17      	ldr	r2, [pc, #92]	; (8007e04 <HAL_GPIO_Init+0x24c>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d00d      	beq.n	8007dc6 <HAL_GPIO_Init+0x20e>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a16      	ldr	r2, [pc, #88]	; (8007e08 <HAL_GPIO_Init+0x250>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d007      	beq.n	8007dc2 <HAL_GPIO_Init+0x20a>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a15      	ldr	r2, [pc, #84]	; (8007e0c <HAL_GPIO_Init+0x254>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d101      	bne.n	8007dbe <HAL_GPIO_Init+0x206>
 8007dba:	2309      	movs	r3, #9
 8007dbc:	e029      	b.n	8007e12 <HAL_GPIO_Init+0x25a>
 8007dbe:	230a      	movs	r3, #10
 8007dc0:	e027      	b.n	8007e12 <HAL_GPIO_Init+0x25a>
 8007dc2:	2307      	movs	r3, #7
 8007dc4:	e025      	b.n	8007e12 <HAL_GPIO_Init+0x25a>
 8007dc6:	2306      	movs	r3, #6
 8007dc8:	e023      	b.n	8007e12 <HAL_GPIO_Init+0x25a>
 8007dca:	2305      	movs	r3, #5
 8007dcc:	e021      	b.n	8007e12 <HAL_GPIO_Init+0x25a>
 8007dce:	2304      	movs	r3, #4
 8007dd0:	e01f      	b.n	8007e12 <HAL_GPIO_Init+0x25a>
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	e01d      	b.n	8007e12 <HAL_GPIO_Init+0x25a>
 8007dd6:	2302      	movs	r3, #2
 8007dd8:	e01b      	b.n	8007e12 <HAL_GPIO_Init+0x25a>
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e019      	b.n	8007e12 <HAL_GPIO_Init+0x25a>
 8007dde:	bf00      	nop
 8007de0:	58000080 	.word	0x58000080
 8007de4:	58024400 	.word	0x58024400
 8007de8:	58000400 	.word	0x58000400
 8007dec:	58020000 	.word	0x58020000
 8007df0:	58020400 	.word	0x58020400
 8007df4:	58020800 	.word	0x58020800
 8007df8:	58020c00 	.word	0x58020c00
 8007dfc:	58021000 	.word	0x58021000
 8007e00:	58021400 	.word	0x58021400
 8007e04:	58021800 	.word	0x58021800
 8007e08:	58021c00 	.word	0x58021c00
 8007e0c:	58022400 	.word	0x58022400
 8007e10:	2300      	movs	r3, #0
 8007e12:	69fa      	ldr	r2, [r7, #28]
 8007e14:	f002 0203 	and.w	r2, r2, #3
 8007e18:	0092      	lsls	r2, r2, #2
 8007e1a:	4093      	lsls	r3, r2
 8007e1c:	69ba      	ldr	r2, [r7, #24]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007e22:	4938      	ldr	r1, [pc, #224]	; (8007f04 <HAL_GPIO_Init+0x34c>)
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	089b      	lsrs	r3, r3, #2
 8007e28:	3302      	adds	r3, #2
 8007e2a:	69ba      	ldr	r2, [r7, #24]
 8007e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	43db      	mvns	r3, r3
 8007e3c:	69ba      	ldr	r2, [r7, #24]
 8007e3e:	4013      	ands	r3, r2
 8007e40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d003      	beq.n	8007e56 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007e4e:	69ba      	ldr	r2, [r7, #24]
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007e56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	43db      	mvns	r3, r3
 8007e6a:	69ba      	ldr	r2, [r7, #24]
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d003      	beq.n	8007e84 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007e7c:	69ba      	ldr	r2, [r7, #24]
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	4313      	orrs	r3, r2
 8007e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007e84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	43db      	mvns	r3, r3
 8007e96:	69ba      	ldr	r2, [r7, #24]
 8007e98:	4013      	ands	r3, r2
 8007e9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d003      	beq.n	8007eb0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007ea8:	69ba      	ldr	r2, [r7, #24]
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	69ba      	ldr	r2, [r7, #24]
 8007eb4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	43db      	mvns	r3, r3
 8007ec0:	69ba      	ldr	r2, [r7, #24]
 8007ec2:	4013      	ands	r3, r2
 8007ec4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d003      	beq.n	8007eda <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007ed2:	69ba      	ldr	r2, [r7, #24]
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	69ba      	ldr	r2, [r7, #24]
 8007ede:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	69fb      	ldr	r3, [r7, #28]
 8007eec:	fa22 f303 	lsr.w	r3, r2, r3
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f47f ae6b 	bne.w	8007bcc <HAL_GPIO_Init+0x14>
  }
}
 8007ef6:	bf00      	nop
 8007ef8:	bf00      	nop
 8007efa:	3724      	adds	r7, #36	; 0x24
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr
 8007f04:	58000400 	.word	0x58000400

08007f08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b085      	sub	sp, #20
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	460b      	mov	r3, r1
 8007f12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	691a      	ldr	r2, [r3, #16]
 8007f18:	887b      	ldrh	r3, [r7, #2]
 8007f1a:	4013      	ands	r3, r2
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d002      	beq.n	8007f26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007f20:	2301      	movs	r3, #1
 8007f22:	73fb      	strb	r3, [r7, #15]
 8007f24:	e001      	b.n	8007f2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007f26:	2300      	movs	r3, #0
 8007f28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3714      	adds	r7, #20
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	460b      	mov	r3, r1
 8007f42:	807b      	strh	r3, [r7, #2]
 8007f44:	4613      	mov	r3, r2
 8007f46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007f48:	787b      	ldrb	r3, [r7, #1]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d003      	beq.n	8007f56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007f4e:	887a      	ldrh	r2, [r7, #2]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007f54:	e003      	b.n	8007f5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007f56:	887b      	ldrh	r3, [r7, #2]
 8007f58:	041a      	lsls	r2, r3, #16
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	619a      	str	r2, [r3, #24]
}
 8007f5e:	bf00      	nop
 8007f60:	370c      	adds	r7, #12
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr
	...

08007f6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d101      	bne.n	8007f7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e07f      	b.n	800807e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d106      	bne.n	8007f98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f7fa fe16 	bl	8002bc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2224      	movs	r2, #36	; 0x24
 8007f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f022 0201 	bic.w	r2, r2, #1
 8007fae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	685a      	ldr	r2, [r3, #4]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007fbc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	689a      	ldr	r2, [r3, #8]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007fcc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	68db      	ldr	r3, [r3, #12]
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d107      	bne.n	8007fe6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	689a      	ldr	r2, [r3, #8]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007fe2:	609a      	str	r2, [r3, #8]
 8007fe4:	e006      	b.n	8007ff4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	689a      	ldr	r2, [r3, #8]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007ff2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	2b02      	cmp	r3, #2
 8007ffa:	d104      	bne.n	8008006 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008004:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	6859      	ldr	r1, [r3, #4]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	4b1d      	ldr	r3, [pc, #116]	; (8008088 <HAL_I2C_Init+0x11c>)
 8008012:	430b      	orrs	r3, r1
 8008014:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	68da      	ldr	r2, [r3, #12]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008024:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	691a      	ldr	r2, [r3, #16]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	695b      	ldr	r3, [r3, #20]
 800802e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	699b      	ldr	r3, [r3, #24]
 8008036:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	430a      	orrs	r2, r1
 800803e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	69d9      	ldr	r1, [r3, #28]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6a1a      	ldr	r2, [r3, #32]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	430a      	orrs	r2, r1
 800804e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f042 0201 	orr.w	r2, r2, #1
 800805e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2220      	movs	r2, #32
 800806a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3708      	adds	r7, #8
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	02008000 	.word	0x02008000

0800808c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800809c:	b2db      	uxtb	r3, r3
 800809e:	2b20      	cmp	r3, #32
 80080a0:	d138      	bne.n	8008114 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d101      	bne.n	80080b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80080ac:	2302      	movs	r3, #2
 80080ae:	e032      	b.n	8008116 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2224      	movs	r2, #36	; 0x24
 80080bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f022 0201 	bic.w	r2, r2, #1
 80080ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80080de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	6819      	ldr	r1, [r3, #0]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	683a      	ldr	r2, [r7, #0]
 80080ec:	430a      	orrs	r2, r1
 80080ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f042 0201 	orr.w	r2, r2, #1
 80080fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2220      	movs	r2, #32
 8008104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008110:	2300      	movs	r3, #0
 8008112:	e000      	b.n	8008116 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008114:	2302      	movs	r3, #2
  }
}
 8008116:	4618      	mov	r0, r3
 8008118:	370c      	adds	r7, #12
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr

08008122 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008122:	b480      	push	{r7}
 8008124:	b085      	sub	sp, #20
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
 800812a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008132:	b2db      	uxtb	r3, r3
 8008134:	2b20      	cmp	r3, #32
 8008136:	d139      	bne.n	80081ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800813e:	2b01      	cmp	r3, #1
 8008140:	d101      	bne.n	8008146 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008142:	2302      	movs	r3, #2
 8008144:	e033      	b.n	80081ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2201      	movs	r2, #1
 800814a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2224      	movs	r2, #36	; 0x24
 8008152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f022 0201 	bic.w	r2, r2, #1
 8008164:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008174:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	021b      	lsls	r3, r3, #8
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	4313      	orrs	r3, r2
 800817e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	68fa      	ldr	r2, [r7, #12]
 8008186:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f042 0201 	orr.w	r2, r2, #1
 8008196:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2220      	movs	r2, #32
 800819c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80081a8:	2300      	movs	r3, #0
 80081aa:	e000      	b.n	80081ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80081ac:	2302      	movs	r3, #2
  }
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3714      	adds	r7, #20
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr

080081ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80081ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081bc:	b08f      	sub	sp, #60	; 0x3c
 80081be:	af0a      	add	r7, sp, #40	; 0x28
 80081c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d101      	bne.n	80081cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80081c8:	2301      	movs	r3, #1
 80081ca:	e116      	b.n	80083fa <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d106      	bne.n	80081ec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f00e fb5a 	bl	80168a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2203      	movs	r2, #3
 80081f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d102      	bne.n	8008206 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4618      	mov	r0, r3
 800820c:	f00a fc9f 	bl	8012b4e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	603b      	str	r3, [r7, #0]
 8008216:	687e      	ldr	r6, [r7, #4]
 8008218:	466d      	mov	r5, sp
 800821a:	f106 0410 	add.w	r4, r6, #16
 800821e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008220:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008222:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008224:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008226:	e894 0003 	ldmia.w	r4, {r0, r1}
 800822a:	e885 0003 	stmia.w	r5, {r0, r1}
 800822e:	1d33      	adds	r3, r6, #4
 8008230:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008232:	6838      	ldr	r0, [r7, #0]
 8008234:	f00a fb6a 	bl	801290c <USB_CoreInit>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	d005      	beq.n	800824a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2202      	movs	r2, #2
 8008242:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	e0d7      	b.n	80083fa <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2100      	movs	r1, #0
 8008250:	4618      	mov	r0, r3
 8008252:	f00a fc8d 	bl	8012b70 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008256:	2300      	movs	r3, #0
 8008258:	73fb      	strb	r3, [r7, #15]
 800825a:	e04a      	b.n	80082f2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800825c:	7bfa      	ldrb	r2, [r7, #15]
 800825e:	6879      	ldr	r1, [r7, #4]
 8008260:	4613      	mov	r3, r2
 8008262:	00db      	lsls	r3, r3, #3
 8008264:	4413      	add	r3, r2
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	440b      	add	r3, r1
 800826a:	333d      	adds	r3, #61	; 0x3d
 800826c:	2201      	movs	r2, #1
 800826e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008270:	7bfa      	ldrb	r2, [r7, #15]
 8008272:	6879      	ldr	r1, [r7, #4]
 8008274:	4613      	mov	r3, r2
 8008276:	00db      	lsls	r3, r3, #3
 8008278:	4413      	add	r3, r2
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	440b      	add	r3, r1
 800827e:	333c      	adds	r3, #60	; 0x3c
 8008280:	7bfa      	ldrb	r2, [r7, #15]
 8008282:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008284:	7bfa      	ldrb	r2, [r7, #15]
 8008286:	7bfb      	ldrb	r3, [r7, #15]
 8008288:	b298      	uxth	r0, r3
 800828a:	6879      	ldr	r1, [r7, #4]
 800828c:	4613      	mov	r3, r2
 800828e:	00db      	lsls	r3, r3, #3
 8008290:	4413      	add	r3, r2
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	440b      	add	r3, r1
 8008296:	3356      	adds	r3, #86	; 0x56
 8008298:	4602      	mov	r2, r0
 800829a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800829c:	7bfa      	ldrb	r2, [r7, #15]
 800829e:	6879      	ldr	r1, [r7, #4]
 80082a0:	4613      	mov	r3, r2
 80082a2:	00db      	lsls	r3, r3, #3
 80082a4:	4413      	add	r3, r2
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	440b      	add	r3, r1
 80082aa:	3340      	adds	r3, #64	; 0x40
 80082ac:	2200      	movs	r2, #0
 80082ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80082b0:	7bfa      	ldrb	r2, [r7, #15]
 80082b2:	6879      	ldr	r1, [r7, #4]
 80082b4:	4613      	mov	r3, r2
 80082b6:	00db      	lsls	r3, r3, #3
 80082b8:	4413      	add	r3, r2
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	440b      	add	r3, r1
 80082be:	3344      	adds	r3, #68	; 0x44
 80082c0:	2200      	movs	r2, #0
 80082c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80082c4:	7bfa      	ldrb	r2, [r7, #15]
 80082c6:	6879      	ldr	r1, [r7, #4]
 80082c8:	4613      	mov	r3, r2
 80082ca:	00db      	lsls	r3, r3, #3
 80082cc:	4413      	add	r3, r2
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	440b      	add	r3, r1
 80082d2:	3348      	adds	r3, #72	; 0x48
 80082d4:	2200      	movs	r2, #0
 80082d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80082d8:	7bfa      	ldrb	r2, [r7, #15]
 80082da:	6879      	ldr	r1, [r7, #4]
 80082dc:	4613      	mov	r3, r2
 80082de:	00db      	lsls	r3, r3, #3
 80082e0:	4413      	add	r3, r2
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	440b      	add	r3, r1
 80082e6:	334c      	adds	r3, #76	; 0x4c
 80082e8:	2200      	movs	r2, #0
 80082ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80082ec:	7bfb      	ldrb	r3, [r7, #15]
 80082ee:	3301      	adds	r3, #1
 80082f0:	73fb      	strb	r3, [r7, #15]
 80082f2:	7bfa      	ldrb	r2, [r7, #15]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d3af      	bcc.n	800825c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80082fc:	2300      	movs	r3, #0
 80082fe:	73fb      	strb	r3, [r7, #15]
 8008300:	e044      	b.n	800838c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008302:	7bfa      	ldrb	r2, [r7, #15]
 8008304:	6879      	ldr	r1, [r7, #4]
 8008306:	4613      	mov	r3, r2
 8008308:	00db      	lsls	r3, r3, #3
 800830a:	4413      	add	r3, r2
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	440b      	add	r3, r1
 8008310:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008314:	2200      	movs	r2, #0
 8008316:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008318:	7bfa      	ldrb	r2, [r7, #15]
 800831a:	6879      	ldr	r1, [r7, #4]
 800831c:	4613      	mov	r3, r2
 800831e:	00db      	lsls	r3, r3, #3
 8008320:	4413      	add	r3, r2
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	440b      	add	r3, r1
 8008326:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800832a:	7bfa      	ldrb	r2, [r7, #15]
 800832c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800832e:	7bfa      	ldrb	r2, [r7, #15]
 8008330:	6879      	ldr	r1, [r7, #4]
 8008332:	4613      	mov	r3, r2
 8008334:	00db      	lsls	r3, r3, #3
 8008336:	4413      	add	r3, r2
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	440b      	add	r3, r1
 800833c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008340:	2200      	movs	r2, #0
 8008342:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008344:	7bfa      	ldrb	r2, [r7, #15]
 8008346:	6879      	ldr	r1, [r7, #4]
 8008348:	4613      	mov	r3, r2
 800834a:	00db      	lsls	r3, r3, #3
 800834c:	4413      	add	r3, r2
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	440b      	add	r3, r1
 8008352:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8008356:	2200      	movs	r2, #0
 8008358:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800835a:	7bfa      	ldrb	r2, [r7, #15]
 800835c:	6879      	ldr	r1, [r7, #4]
 800835e:	4613      	mov	r3, r2
 8008360:	00db      	lsls	r3, r3, #3
 8008362:	4413      	add	r3, r2
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	440b      	add	r3, r1
 8008368:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800836c:	2200      	movs	r2, #0
 800836e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008370:	7bfa      	ldrb	r2, [r7, #15]
 8008372:	6879      	ldr	r1, [r7, #4]
 8008374:	4613      	mov	r3, r2
 8008376:	00db      	lsls	r3, r3, #3
 8008378:	4413      	add	r3, r2
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	440b      	add	r3, r1
 800837e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008382:	2200      	movs	r2, #0
 8008384:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008386:	7bfb      	ldrb	r3, [r7, #15]
 8008388:	3301      	adds	r3, #1
 800838a:	73fb      	strb	r3, [r7, #15]
 800838c:	7bfa      	ldrb	r2, [r7, #15]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	429a      	cmp	r2, r3
 8008394:	d3b5      	bcc.n	8008302 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	603b      	str	r3, [r7, #0]
 800839c:	687e      	ldr	r6, [r7, #4]
 800839e:	466d      	mov	r5, sp
 80083a0:	f106 0410 	add.w	r4, r6, #16
 80083a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80083a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80083a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80083aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80083ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80083b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80083b4:	1d33      	adds	r3, r6, #4
 80083b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80083b8:	6838      	ldr	r0, [r7, #0]
 80083ba:	f00a fc25 	bl	8012c08 <USB_DevInit>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d005      	beq.n	80083d0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2202      	movs	r2, #2
 80083c8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	e014      	b.n	80083fa <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2201      	movs	r2, #1
 80083dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d102      	bne.n	80083ee <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f001 f96f 	bl	80096cc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4618      	mov	r0, r3
 80083f4:	f00b fc67 	bl	8013cc6 <USB_DevDisconnect>

  return HAL_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3714      	adds	r7, #20
 80083fe:	46bd      	mov	sp, r7
 8008400:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008402 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b084      	sub	sp, #16
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008416:	2b01      	cmp	r3, #1
 8008418:	d101      	bne.n	800841e <HAL_PCD_Start+0x1c>
 800841a:	2302      	movs	r3, #2
 800841c:	e022      	b.n	8008464 <HAL_PCD_Start+0x62>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2201      	movs	r2, #1
 8008422:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800842a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800842e:	2b00      	cmp	r3, #0
 8008430:	d109      	bne.n	8008446 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8008436:	2b01      	cmp	r3, #1
 8008438:	d105      	bne.n	8008446 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800843e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4618      	mov	r0, r3
 800844c:	f00a fb6e 	bl	8012b2c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4618      	mov	r0, r3
 8008456:	f00b fc15 	bl	8013c84 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008462:	2300      	movs	r3, #0
}
 8008464:	4618      	mov	r0, r3
 8008466:	3710      	adds	r7, #16
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800846c:	b590      	push	{r4, r7, lr}
 800846e:	b08d      	sub	sp, #52	; 0x34
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800847a:	6a3b      	ldr	r3, [r7, #32]
 800847c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4618      	mov	r0, r3
 8008484:	f00b fcd3 	bl	8013e2e <USB_GetMode>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	f040 84b7 	bne.w	8008dfe <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4618      	mov	r0, r3
 8008496:	f00b fc37 	bl	8013d08 <USB_ReadInterrupts>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	f000 84ad 	beq.w	8008dfc <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	0a1b      	lsrs	r3, r3, #8
 80084ac:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4618      	mov	r0, r3
 80084bc:	f00b fc24 	bl	8013d08 <USB_ReadInterrupts>
 80084c0:	4603      	mov	r3, r0
 80084c2:	f003 0302 	and.w	r3, r3, #2
 80084c6:	2b02      	cmp	r3, #2
 80084c8:	d107      	bne.n	80084da <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	695a      	ldr	r2, [r3, #20]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f002 0202 	and.w	r2, r2, #2
 80084d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4618      	mov	r0, r3
 80084e0:	f00b fc12 	bl	8013d08 <USB_ReadInterrupts>
 80084e4:	4603      	mov	r3, r0
 80084e6:	f003 0310 	and.w	r3, r3, #16
 80084ea:	2b10      	cmp	r3, #16
 80084ec:	d161      	bne.n	80085b2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	699a      	ldr	r2, [r3, #24]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f022 0210 	bic.w	r2, r2, #16
 80084fc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80084fe:	6a3b      	ldr	r3, [r7, #32]
 8008500:	6a1b      	ldr	r3, [r3, #32]
 8008502:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008504:	69bb      	ldr	r3, [r7, #24]
 8008506:	f003 020f 	and.w	r2, r3, #15
 800850a:	4613      	mov	r3, r2
 800850c:	00db      	lsls	r3, r3, #3
 800850e:	4413      	add	r3, r2
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	4413      	add	r3, r2
 800851a:	3304      	adds	r3, #4
 800851c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	0c5b      	lsrs	r3, r3, #17
 8008522:	f003 030f 	and.w	r3, r3, #15
 8008526:	2b02      	cmp	r3, #2
 8008528:	d124      	bne.n	8008574 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800852a:	69ba      	ldr	r2, [r7, #24]
 800852c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008530:	4013      	ands	r3, r2
 8008532:	2b00      	cmp	r3, #0
 8008534:	d035      	beq.n	80085a2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800853a:	69bb      	ldr	r3, [r7, #24]
 800853c:	091b      	lsrs	r3, r3, #4
 800853e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008540:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008544:	b29b      	uxth	r3, r3
 8008546:	461a      	mov	r2, r3
 8008548:	6a38      	ldr	r0, [r7, #32]
 800854a:	f00b fa49 	bl	80139e0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	68da      	ldr	r2, [r3, #12]
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	091b      	lsrs	r3, r3, #4
 8008556:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800855a:	441a      	add	r2, r3
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	695a      	ldr	r2, [r3, #20]
 8008564:	69bb      	ldr	r3, [r7, #24]
 8008566:	091b      	lsrs	r3, r3, #4
 8008568:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800856c:	441a      	add	r2, r3
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	615a      	str	r2, [r3, #20]
 8008572:	e016      	b.n	80085a2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	0c5b      	lsrs	r3, r3, #17
 8008578:	f003 030f 	and.w	r3, r3, #15
 800857c:	2b06      	cmp	r3, #6
 800857e:	d110      	bne.n	80085a2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008586:	2208      	movs	r2, #8
 8008588:	4619      	mov	r1, r3
 800858a:	6a38      	ldr	r0, [r7, #32]
 800858c:	f00b fa28 	bl	80139e0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	695a      	ldr	r2, [r3, #20]
 8008594:	69bb      	ldr	r3, [r7, #24]
 8008596:	091b      	lsrs	r3, r3, #4
 8008598:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800859c:	441a      	add	r2, r3
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	699a      	ldr	r2, [r3, #24]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f042 0210 	orr.w	r2, r2, #16
 80085b0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4618      	mov	r0, r3
 80085b8:	f00b fba6 	bl	8013d08 <USB_ReadInterrupts>
 80085bc:	4603      	mov	r3, r0
 80085be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80085c2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80085c6:	f040 80a7 	bne.w	8008718 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80085ca:	2300      	movs	r3, #0
 80085cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4618      	mov	r0, r3
 80085d4:	f00b fbab 	bl	8013d2e <USB_ReadDevAllOutEpInterrupt>
 80085d8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80085da:	e099      	b.n	8008710 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80085dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085de:	f003 0301 	and.w	r3, r3, #1
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	f000 808e 	beq.w	8008704 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085ee:	b2d2      	uxtb	r2, r2
 80085f0:	4611      	mov	r1, r2
 80085f2:	4618      	mov	r0, r3
 80085f4:	f00b fbcf 	bl	8013d96 <USB_ReadDevOutEPInterrupt>
 80085f8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	f003 0301 	and.w	r3, r3, #1
 8008600:	2b00      	cmp	r3, #0
 8008602:	d00c      	beq.n	800861e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008606:	015a      	lsls	r2, r3, #5
 8008608:	69fb      	ldr	r3, [r7, #28]
 800860a:	4413      	add	r3, r2
 800860c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008610:	461a      	mov	r2, r3
 8008612:	2301      	movs	r3, #1
 8008614:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008616:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 fed1 	bl	80093c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	f003 0308 	and.w	r3, r3, #8
 8008624:	2b00      	cmp	r3, #0
 8008626:	d00c      	beq.n	8008642 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862a:	015a      	lsls	r2, r3, #5
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	4413      	add	r3, r2
 8008630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008634:	461a      	mov	r2, r3
 8008636:	2308      	movs	r3, #8
 8008638:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800863a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 ffa7 	bl	8009590 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	f003 0310 	and.w	r3, r3, #16
 8008648:	2b00      	cmp	r3, #0
 800864a:	d008      	beq.n	800865e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800864c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864e:	015a      	lsls	r2, r3, #5
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	4413      	add	r3, r2
 8008654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008658:	461a      	mov	r2, r3
 800865a:	2310      	movs	r3, #16
 800865c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	f003 0302 	and.w	r3, r3, #2
 8008664:	2b00      	cmp	r3, #0
 8008666:	d030      	beq.n	80086ca <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008668:	6a3b      	ldr	r3, [r7, #32]
 800866a:	695b      	ldr	r3, [r3, #20]
 800866c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008670:	2b80      	cmp	r3, #128	; 0x80
 8008672:	d109      	bne.n	8008688 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008674:	69fb      	ldr	r3, [r7, #28]
 8008676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	69fa      	ldr	r2, [r7, #28]
 800867e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008682:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008686:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800868a:	4613      	mov	r3, r2
 800868c:	00db      	lsls	r3, r3, #3
 800868e:	4413      	add	r3, r2
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	4413      	add	r3, r2
 800869a:	3304      	adds	r3, #4
 800869c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	78db      	ldrb	r3, [r3, #3]
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d108      	bne.n	80086b8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	2200      	movs	r2, #0
 80086aa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80086ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	4619      	mov	r1, r3
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f00e f9ec 	bl	8016a90 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80086b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ba:	015a      	lsls	r2, r3, #5
 80086bc:	69fb      	ldr	r3, [r7, #28]
 80086be:	4413      	add	r3, r2
 80086c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086c4:	461a      	mov	r2, r3
 80086c6:	2302      	movs	r3, #2
 80086c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	f003 0320 	and.w	r3, r3, #32
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d008      	beq.n	80086e6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80086d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d6:	015a      	lsls	r2, r3, #5
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	4413      	add	r3, r2
 80086dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086e0:	461a      	mov	r2, r3
 80086e2:	2320      	movs	r3, #32
 80086e4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d009      	beq.n	8008704 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80086f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f2:	015a      	lsls	r2, r3, #5
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	4413      	add	r3, r2
 80086f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086fc:	461a      	mov	r2, r3
 80086fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008702:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008706:	3301      	adds	r3, #1
 8008708:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800870a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870c:	085b      	lsrs	r3, r3, #1
 800870e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008712:	2b00      	cmp	r3, #0
 8008714:	f47f af62 	bne.w	80085dc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4618      	mov	r0, r3
 800871e:	f00b faf3 	bl	8013d08 <USB_ReadInterrupts>
 8008722:	4603      	mov	r3, r0
 8008724:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008728:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800872c:	f040 80db 	bne.w	80088e6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4618      	mov	r0, r3
 8008736:	f00b fb14 	bl	8013d62 <USB_ReadDevAllInEpInterrupt>
 800873a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800873c:	2300      	movs	r3, #0
 800873e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008740:	e0cd      	b.n	80088de <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008744:	f003 0301 	and.w	r3, r3, #1
 8008748:	2b00      	cmp	r3, #0
 800874a:	f000 80c2 	beq.w	80088d2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008754:	b2d2      	uxtb	r2, r2
 8008756:	4611      	mov	r1, r2
 8008758:	4618      	mov	r0, r3
 800875a:	f00b fb3a 	bl	8013dd2 <USB_ReadDevInEPInterrupt>
 800875e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	f003 0301 	and.w	r3, r3, #1
 8008766:	2b00      	cmp	r3, #0
 8008768:	d057      	beq.n	800881a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800876a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876c:	f003 030f 	and.w	r3, r3, #15
 8008770:	2201      	movs	r2, #1
 8008772:	fa02 f303 	lsl.w	r3, r2, r3
 8008776:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800877e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	43db      	mvns	r3, r3
 8008784:	69f9      	ldr	r1, [r7, #28]
 8008786:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800878a:	4013      	ands	r3, r2
 800878c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800878e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008790:	015a      	lsls	r2, r3, #5
 8008792:	69fb      	ldr	r3, [r7, #28]
 8008794:	4413      	add	r3, r2
 8008796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800879a:	461a      	mov	r2, r3
 800879c:	2301      	movs	r3, #1
 800879e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	68db      	ldr	r3, [r3, #12]
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d132      	bne.n	800880e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80087a8:	6879      	ldr	r1, [r7, #4]
 80087aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ac:	4613      	mov	r3, r2
 80087ae:	00db      	lsls	r3, r3, #3
 80087b0:	4413      	add	r3, r2
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	440b      	add	r3, r1
 80087b6:	3348      	adds	r3, #72	; 0x48
 80087b8:	6819      	ldr	r1, [r3, #0]
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087be:	4613      	mov	r3, r2
 80087c0:	00db      	lsls	r3, r3, #3
 80087c2:	4413      	add	r3, r2
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	4403      	add	r3, r0
 80087c8:	3344      	adds	r3, #68	; 0x44
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4419      	add	r1, r3
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087d2:	4613      	mov	r3, r2
 80087d4:	00db      	lsls	r3, r3, #3
 80087d6:	4413      	add	r3, r2
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	4403      	add	r3, r0
 80087dc:	3348      	adds	r3, #72	; 0x48
 80087de:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80087e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d113      	bne.n	800880e <HAL_PCD_IRQHandler+0x3a2>
 80087e6:	6879      	ldr	r1, [r7, #4]
 80087e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ea:	4613      	mov	r3, r2
 80087ec:	00db      	lsls	r3, r3, #3
 80087ee:	4413      	add	r3, r2
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	440b      	add	r3, r1
 80087f4:	334c      	adds	r3, #76	; 0x4c
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d108      	bne.n	800880e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6818      	ldr	r0, [r3, #0]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008806:	461a      	mov	r2, r3
 8008808:	2101      	movs	r1, #1
 800880a:	f00b fb43 	bl	8013e94 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800880e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008810:	b2db      	uxtb	r3, r3
 8008812:	4619      	mov	r1, r3
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f00e f8b6 	bl	8016986 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	f003 0308 	and.w	r3, r3, #8
 8008820:	2b00      	cmp	r3, #0
 8008822:	d008      	beq.n	8008836 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008826:	015a      	lsls	r2, r3, #5
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	4413      	add	r3, r2
 800882c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008830:	461a      	mov	r2, r3
 8008832:	2308      	movs	r3, #8
 8008834:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	f003 0310 	and.w	r3, r3, #16
 800883c:	2b00      	cmp	r3, #0
 800883e:	d008      	beq.n	8008852 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008842:	015a      	lsls	r2, r3, #5
 8008844:	69fb      	ldr	r3, [r7, #28]
 8008846:	4413      	add	r3, r2
 8008848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800884c:	461a      	mov	r2, r3
 800884e:	2310      	movs	r3, #16
 8008850:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008858:	2b00      	cmp	r3, #0
 800885a:	d008      	beq.n	800886e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800885c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885e:	015a      	lsls	r2, r3, #5
 8008860:	69fb      	ldr	r3, [r7, #28]
 8008862:	4413      	add	r3, r2
 8008864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008868:	461a      	mov	r2, r3
 800886a:	2340      	movs	r3, #64	; 0x40
 800886c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	f003 0302 	and.w	r3, r3, #2
 8008874:	2b00      	cmp	r3, #0
 8008876:	d023      	beq.n	80088c0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008878:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800887a:	6a38      	ldr	r0, [r7, #32]
 800887c:	f00a fb22 	bl	8012ec4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008882:	4613      	mov	r3, r2
 8008884:	00db      	lsls	r3, r3, #3
 8008886:	4413      	add	r3, r2
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	3338      	adds	r3, #56	; 0x38
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	4413      	add	r3, r2
 8008890:	3304      	adds	r3, #4
 8008892:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	78db      	ldrb	r3, [r3, #3]
 8008898:	2b01      	cmp	r3, #1
 800889a:	d108      	bne.n	80088ae <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	2200      	movs	r2, #0
 80088a0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80088a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	4619      	mov	r1, r3
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f00e f903 	bl	8016ab4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80088ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b0:	015a      	lsls	r2, r3, #5
 80088b2:	69fb      	ldr	r3, [r7, #28]
 80088b4:	4413      	add	r3, r2
 80088b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088ba:	461a      	mov	r2, r3
 80088bc:	2302      	movs	r3, #2
 80088be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d003      	beq.n	80088d2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80088ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 fcea 	bl	80092a6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80088d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d4:	3301      	adds	r3, #1
 80088d6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80088d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088da:	085b      	lsrs	r3, r3, #1
 80088dc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80088de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	f47f af2e 	bne.w	8008742 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4618      	mov	r0, r3
 80088ec:	f00b fa0c 	bl	8013d08 <USB_ReadInterrupts>
 80088f0:	4603      	mov	r3, r0
 80088f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088fa:	d122      	bne.n	8008942 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	69fa      	ldr	r2, [r7, #28]
 8008906:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800890a:	f023 0301 	bic.w	r3, r3, #1
 800890e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008916:	2b01      	cmp	r3, #1
 8008918:	d108      	bne.n	800892c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008922:	2100      	movs	r1, #0
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 fef5 	bl	8009714 <HAL_PCDEx_LPM_Callback>
 800892a:	e002      	b.n	8008932 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f00e f8a1 	bl	8016a74 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	695a      	ldr	r2, [r3, #20]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008940:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4618      	mov	r0, r3
 8008948:	f00b f9de 	bl	8013d08 <USB_ReadInterrupts>
 800894c:	4603      	mov	r3, r0
 800894e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008952:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008956:	d112      	bne.n	800897e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008958:	69fb      	ldr	r3, [r7, #28]
 800895a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	f003 0301 	and.w	r3, r3, #1
 8008964:	2b01      	cmp	r3, #1
 8008966:	d102      	bne.n	800896e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f00e f85d 	bl	8016a28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	695a      	ldr	r2, [r3, #20]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800897c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4618      	mov	r0, r3
 8008984:	f00b f9c0 	bl	8013d08 <USB_ReadInterrupts>
 8008988:	4603      	mov	r3, r0
 800898a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800898e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008992:	d121      	bne.n	80089d8 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	695a      	ldr	r2, [r3, #20]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80089a2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d111      	bne.n	80089d2 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2201      	movs	r2, #1
 80089b2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089bc:	089b      	lsrs	r3, r3, #2
 80089be:	f003 020f 	and.w	r2, r3, #15
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80089c8:	2101      	movs	r1, #1
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 fea2 	bl	8009714 <HAL_PCDEx_LPM_Callback>
 80089d0:	e002      	b.n	80089d8 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f00e f828 	bl	8016a28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4618      	mov	r0, r3
 80089de:	f00b f993 	bl	8013d08 <USB_ReadInterrupts>
 80089e2:	4603      	mov	r3, r0
 80089e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80089e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089ec:	f040 80b7 	bne.w	8008b5e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80089f0:	69fb      	ldr	r3, [r7, #28]
 80089f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	69fa      	ldr	r2, [r7, #28]
 80089fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089fe:	f023 0301 	bic.w	r3, r3, #1
 8008a02:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	2110      	movs	r1, #16
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f00a fa5a 	bl	8012ec4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a10:	2300      	movs	r3, #0
 8008a12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a14:	e046      	b.n	8008aa4 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a18:	015a      	lsls	r2, r3, #5
 8008a1a:	69fb      	ldr	r3, [r7, #28]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a22:	461a      	mov	r2, r3
 8008a24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008a28:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a2c:	015a      	lsls	r2, r3, #5
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	4413      	add	r3, r2
 8008a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a3a:	0151      	lsls	r1, r2, #5
 8008a3c:	69fa      	ldr	r2, [r7, #28]
 8008a3e:	440a      	add	r2, r1
 8008a40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008a48:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a4c:	015a      	lsls	r2, r3, #5
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	4413      	add	r3, r2
 8008a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a56:	461a      	mov	r2, r3
 8008a58:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008a5c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a60:	015a      	lsls	r2, r3, #5
 8008a62:	69fb      	ldr	r3, [r7, #28]
 8008a64:	4413      	add	r3, r2
 8008a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a6e:	0151      	lsls	r1, r2, #5
 8008a70:	69fa      	ldr	r2, [r7, #28]
 8008a72:	440a      	add	r2, r1
 8008a74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a78:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008a7c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a80:	015a      	lsls	r2, r3, #5
 8008a82:	69fb      	ldr	r3, [r7, #28]
 8008a84:	4413      	add	r3, r2
 8008a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a8e:	0151      	lsls	r1, r2, #5
 8008a90:	69fa      	ldr	r2, [r7, #28]
 8008a92:	440a      	add	r2, r1
 8008a94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a98:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008a9c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d3b3      	bcc.n	8008a16 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008aae:	69fb      	ldr	r3, [r7, #28]
 8008ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ab4:	69db      	ldr	r3, [r3, #28]
 8008ab6:	69fa      	ldr	r2, [r7, #28]
 8008ab8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008abc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008ac0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d016      	beq.n	8008af8 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ad4:	69fa      	ldr	r2, [r7, #28]
 8008ad6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ada:	f043 030b 	orr.w	r3, r3, #11
 8008ade:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aea:	69fa      	ldr	r2, [r7, #28]
 8008aec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008af0:	f043 030b 	orr.w	r3, r3, #11
 8008af4:	6453      	str	r3, [r2, #68]	; 0x44
 8008af6:	e015      	b.n	8008b24 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008afe:	695a      	ldr	r2, [r3, #20]
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b06:	4619      	mov	r1, r3
 8008b08:	f242 032b 	movw	r3, #8235	; 0x202b
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b16:	691b      	ldr	r3, [r3, #16]
 8008b18:	69fa      	ldr	r2, [r7, #28]
 8008b1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b1e:	f043 030b 	orr.w	r3, r3, #11
 8008b22:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	69fa      	ldr	r2, [r7, #28]
 8008b2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b32:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008b36:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6818      	ldr	r0, [r3, #0]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	68db      	ldr	r3, [r3, #12]
 8008b40:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008b48:	461a      	mov	r2, r3
 8008b4a:	f00b f9a3 	bl	8013e94 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	695a      	ldr	r2, [r3, #20]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008b5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4618      	mov	r0, r3
 8008b64:	f00b f8d0 	bl	8013d08 <USB_ReadInterrupts>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b72:	d124      	bne.n	8008bbe <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f00b f967 	bl	8013e4c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4618      	mov	r0, r3
 8008b84:	f00a fa1b 	bl	8012fbe <USB_GetDevSpeed>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681c      	ldr	r4, [r3, #0]
 8008b94:	f001 fd88 	bl	800a6a8 <HAL_RCC_GetHCLKFreq>
 8008b98:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	4620      	mov	r0, r4
 8008ba4:	f009 ff20 	bl	80129e8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f00d ff14 	bl	80169d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	695a      	ldr	r2, [r3, #20]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008bbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f00b f8a0 	bl	8013d08 <USB_ReadInterrupts>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	f003 0308 	and.w	r3, r3, #8
 8008bce:	2b08      	cmp	r3, #8
 8008bd0:	d10a      	bne.n	8008be8 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f00d fef1 	bl	80169ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	695a      	ldr	r2, [r3, #20]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f002 0208 	and.w	r2, r2, #8
 8008be6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4618      	mov	r0, r3
 8008bee:	f00b f88b 	bl	8013d08 <USB_ReadInterrupts>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bf8:	2b80      	cmp	r3, #128	; 0x80
 8008bfa:	d122      	bne.n	8008c42 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008bfc:	6a3b      	ldr	r3, [r7, #32]
 8008bfe:	699b      	ldr	r3, [r3, #24]
 8008c00:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c04:	6a3b      	ldr	r3, [r7, #32]
 8008c06:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008c08:	2301      	movs	r3, #1
 8008c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8008c0c:	e014      	b.n	8008c38 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008c0e:	6879      	ldr	r1, [r7, #4]
 8008c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c12:	4613      	mov	r3, r2
 8008c14:	00db      	lsls	r3, r3, #3
 8008c16:	4413      	add	r3, r2
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	440b      	add	r3, r1
 8008c1c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d105      	bne.n	8008c32 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 fb09 	bl	8009244 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c34:	3301      	adds	r3, #1
 8008c36:	627b      	str	r3, [r7, #36]	; 0x24
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d3e5      	bcc.n	8008c0e <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4618      	mov	r0, r3
 8008c48:	f00b f85e 	bl	8013d08 <USB_ReadInterrupts>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c56:	d13b      	bne.n	8008cd0 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008c58:	2301      	movs	r3, #1
 8008c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8008c5c:	e02b      	b.n	8008cb6 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c60:	015a      	lsls	r2, r3, #5
 8008c62:	69fb      	ldr	r3, [r7, #28]
 8008c64:	4413      	add	r3, r2
 8008c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008c6e:	6879      	ldr	r1, [r7, #4]
 8008c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c72:	4613      	mov	r3, r2
 8008c74:	00db      	lsls	r3, r3, #3
 8008c76:	4413      	add	r3, r2
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	440b      	add	r3, r1
 8008c7c:	3340      	adds	r3, #64	; 0x40
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d115      	bne.n	8008cb0 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008c84:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	da12      	bge.n	8008cb0 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008c8a:	6879      	ldr	r1, [r7, #4]
 8008c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c8e:	4613      	mov	r3, r2
 8008c90:	00db      	lsls	r3, r3, #3
 8008c92:	4413      	add	r3, r2
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	440b      	add	r3, r1
 8008c98:	333f      	adds	r3, #63	; 0x3f
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	4619      	mov	r1, r3
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 faca 	bl	8009244 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d3ce      	bcc.n	8008c5e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	695a      	ldr	r2, [r3, #20]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008cce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f00b f817 	bl	8013d08 <USB_ReadInterrupts>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ce0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ce4:	d155      	bne.n	8008d92 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8008cea:	e045      	b.n	8008d78 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cee:	015a      	lsls	r2, r3, #5
 8008cf0:	69fb      	ldr	r3, [r7, #28]
 8008cf2:	4413      	add	r3, r2
 8008cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008cfc:	6879      	ldr	r1, [r7, #4]
 8008cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d00:	4613      	mov	r3, r2
 8008d02:	00db      	lsls	r3, r3, #3
 8008d04:	4413      	add	r3, r2
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	440b      	add	r3, r1
 8008d0a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d12e      	bne.n	8008d72 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008d14:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	da2b      	bge.n	8008d72 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8008d26:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d121      	bne.n	8008d72 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008d2e:	6879      	ldr	r1, [r7, #4]
 8008d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d32:	4613      	mov	r3, r2
 8008d34:	00db      	lsls	r3, r3, #3
 8008d36:	4413      	add	r3, r2
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	440b      	add	r3, r1
 8008d3c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008d40:	2201      	movs	r2, #1
 8008d42:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008d44:	6a3b      	ldr	r3, [r7, #32]
 8008d46:	699b      	ldr	r3, [r3, #24]
 8008d48:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008d4c:	6a3b      	ldr	r3, [r7, #32]
 8008d4e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008d50:	6a3b      	ldr	r3, [r7, #32]
 8008d52:	695b      	ldr	r3, [r3, #20]
 8008d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d10a      	bne.n	8008d72 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	69fa      	ldr	r2, [r7, #28]
 8008d66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008d6e:	6053      	str	r3, [r2, #4]
            break;
 8008d70:	e007      	b.n	8008d82 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d74:	3301      	adds	r3, #1
 8008d76:	627b      	str	r3, [r7, #36]	; 0x24
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d3b4      	bcc.n	8008cec <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	695a      	ldr	r2, [r3, #20]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008d90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4618      	mov	r0, r3
 8008d98:	f00a ffb6 	bl	8013d08 <USB_ReadInterrupts>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008da6:	d10a      	bne.n	8008dbe <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f00d fe95 	bl	8016ad8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	695a      	ldr	r2, [r3, #20]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008dbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f00a ffa0 	bl	8013d08 <USB_ReadInterrupts>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	f003 0304 	and.w	r3, r3, #4
 8008dce:	2b04      	cmp	r3, #4
 8008dd0:	d115      	bne.n	8008dfe <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008dda:	69bb      	ldr	r3, [r7, #24]
 8008ddc:	f003 0304 	and.w	r3, r3, #4
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d002      	beq.n	8008dea <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f00d fe85 	bl	8016af4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	6859      	ldr	r1, [r3, #4]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	69ba      	ldr	r2, [r7, #24]
 8008df6:	430a      	orrs	r2, r1
 8008df8:	605a      	str	r2, [r3, #4]
 8008dfa:	e000      	b.n	8008dfe <HAL_PCD_IRQHandler+0x992>
      return;
 8008dfc:	bf00      	nop
    }
  }
}
 8008dfe:	3734      	adds	r7, #52	; 0x34
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd90      	pop	{r4, r7, pc}

08008e04 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d101      	bne.n	8008e1e <HAL_PCD_SetAddress+0x1a>
 8008e1a:	2302      	movs	r3, #2
 8008e1c:	e013      	b.n	8008e46 <HAL_PCD_SetAddress+0x42>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2201      	movs	r2, #1
 8008e22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	78fa      	ldrb	r2, [r7, #3]
 8008e2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	78fa      	ldrb	r2, [r7, #3]
 8008e34:	4611      	mov	r1, r2
 8008e36:	4618      	mov	r0, r3
 8008e38:	f00a fefe 	bl	8013c38 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008e44:	2300      	movs	r3, #0
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3708      	adds	r7, #8
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}

08008e4e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008e4e:	b580      	push	{r7, lr}
 8008e50:	b084      	sub	sp, #16
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
 8008e56:	4608      	mov	r0, r1
 8008e58:	4611      	mov	r1, r2
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	70fb      	strb	r3, [r7, #3]
 8008e60:	460b      	mov	r3, r1
 8008e62:	803b      	strh	r3, [r7, #0]
 8008e64:	4613      	mov	r3, r2
 8008e66:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008e6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	da0f      	bge.n	8008e94 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008e74:	78fb      	ldrb	r3, [r7, #3]
 8008e76:	f003 020f 	and.w	r2, r3, #15
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	00db      	lsls	r3, r3, #3
 8008e7e:	4413      	add	r3, r2
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	3338      	adds	r3, #56	; 0x38
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	4413      	add	r3, r2
 8008e88:	3304      	adds	r3, #4
 8008e8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	705a      	strb	r2, [r3, #1]
 8008e92:	e00f      	b.n	8008eb4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008e94:	78fb      	ldrb	r3, [r7, #3]
 8008e96:	f003 020f 	and.w	r2, r3, #15
 8008e9a:	4613      	mov	r3, r2
 8008e9c:	00db      	lsls	r3, r3, #3
 8008e9e:	4413      	add	r3, r2
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	3304      	adds	r3, #4
 8008eac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008eb4:	78fb      	ldrb	r3, [r7, #3]
 8008eb6:	f003 030f 	and.w	r3, r3, #15
 8008eba:	b2da      	uxtb	r2, r3
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008ec0:	883a      	ldrh	r2, [r7, #0]
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	78ba      	ldrb	r2, [r7, #2]
 8008eca:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	785b      	ldrb	r3, [r3, #1]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d004      	beq.n	8008ede <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	b29a      	uxth	r2, r3
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008ede:	78bb      	ldrb	r3, [r7, #2]
 8008ee0:	2b02      	cmp	r3, #2
 8008ee2:	d102      	bne.n	8008eea <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d101      	bne.n	8008ef8 <HAL_PCD_EP_Open+0xaa>
 8008ef4:	2302      	movs	r3, #2
 8008ef6:	e00e      	b.n	8008f16 <HAL_PCD_EP_Open+0xc8>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2201      	movs	r2, #1
 8008efc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	68f9      	ldr	r1, [r7, #12]
 8008f06:	4618      	mov	r0, r3
 8008f08:	f00a f87e 	bl	8013008 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8008f14:	7afb      	ldrb	r3, [r7, #11]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b084      	sub	sp, #16
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
 8008f26:	460b      	mov	r3, r1
 8008f28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008f2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	da0f      	bge.n	8008f52 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f32:	78fb      	ldrb	r3, [r7, #3]
 8008f34:	f003 020f 	and.w	r2, r3, #15
 8008f38:	4613      	mov	r3, r2
 8008f3a:	00db      	lsls	r3, r3, #3
 8008f3c:	4413      	add	r3, r2
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	3338      	adds	r3, #56	; 0x38
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	4413      	add	r3, r2
 8008f46:	3304      	adds	r3, #4
 8008f48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	705a      	strb	r2, [r3, #1]
 8008f50:	e00f      	b.n	8008f72 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008f52:	78fb      	ldrb	r3, [r7, #3]
 8008f54:	f003 020f 	and.w	r2, r3, #15
 8008f58:	4613      	mov	r3, r2
 8008f5a:	00db      	lsls	r3, r3, #3
 8008f5c:	4413      	add	r3, r2
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	4413      	add	r3, r2
 8008f68:	3304      	adds	r3, #4
 8008f6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008f72:	78fb      	ldrb	r3, [r7, #3]
 8008f74:	f003 030f 	and.w	r3, r3, #15
 8008f78:	b2da      	uxtb	r2, r3
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d101      	bne.n	8008f8c <HAL_PCD_EP_Close+0x6e>
 8008f88:	2302      	movs	r3, #2
 8008f8a:	e00e      	b.n	8008faa <HAL_PCD_EP_Close+0x8c>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	68f9      	ldr	r1, [r7, #12]
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f00a f8bc 	bl	8013118 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8008fa8:	2300      	movs	r3, #0
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3710      	adds	r7, #16
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b086      	sub	sp, #24
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	60f8      	str	r0, [r7, #12]
 8008fba:	607a      	str	r2, [r7, #4]
 8008fbc:	603b      	str	r3, [r7, #0]
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008fc2:	7afb      	ldrb	r3, [r7, #11]
 8008fc4:	f003 020f 	and.w	r2, r3, #15
 8008fc8:	4613      	mov	r3, r2
 8008fca:	00db      	lsls	r3, r3, #3
 8008fcc:	4413      	add	r3, r2
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008fd4:	68fa      	ldr	r2, [r7, #12]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	3304      	adds	r3, #4
 8008fda:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	683a      	ldr	r2, [r7, #0]
 8008fe6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	2200      	movs	r2, #0
 8008fec:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008ff4:	7afb      	ldrb	r3, [r7, #11]
 8008ff6:	f003 030f 	and.w	r3, r3, #15
 8008ffa:	b2da      	uxtb	r2, r3
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	2b01      	cmp	r3, #1
 8009006:	d102      	bne.n	800900e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	6818      	ldr	r0, [r3, #0]
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	b2db      	uxtb	r3, r3
 8009018:	461a      	mov	r2, r3
 800901a:	6979      	ldr	r1, [r7, #20]
 800901c:	f00a f958 	bl	80132d0 <USB_EPStartXfer>

  return HAL_OK;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	3718      	adds	r7, #24
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800902a:	b480      	push	{r7}
 800902c:	b083      	sub	sp, #12
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
 8009032:	460b      	mov	r3, r1
 8009034:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009036:	78fb      	ldrb	r3, [r7, #3]
 8009038:	f003 020f 	and.w	r2, r3, #15
 800903c:	6879      	ldr	r1, [r7, #4]
 800903e:	4613      	mov	r3, r2
 8009040:	00db      	lsls	r3, r3, #3
 8009042:	4413      	add	r3, r2
 8009044:	009b      	lsls	r3, r3, #2
 8009046:	440b      	add	r3, r1
 8009048:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800904c:	681b      	ldr	r3, [r3, #0]
}
 800904e:	4618      	mov	r0, r3
 8009050:	370c      	adds	r7, #12
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr

0800905a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800905a:	b580      	push	{r7, lr}
 800905c:	b086      	sub	sp, #24
 800905e:	af00      	add	r7, sp, #0
 8009060:	60f8      	str	r0, [r7, #12]
 8009062:	607a      	str	r2, [r7, #4]
 8009064:	603b      	str	r3, [r7, #0]
 8009066:	460b      	mov	r3, r1
 8009068:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800906a:	7afb      	ldrb	r3, [r7, #11]
 800906c:	f003 020f 	and.w	r2, r3, #15
 8009070:	4613      	mov	r3, r2
 8009072:	00db      	lsls	r3, r3, #3
 8009074:	4413      	add	r3, r2
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	3338      	adds	r3, #56	; 0x38
 800907a:	68fa      	ldr	r2, [r7, #12]
 800907c:	4413      	add	r3, r2
 800907e:	3304      	adds	r3, #4
 8009080:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	683a      	ldr	r2, [r7, #0]
 800908c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	2200      	movs	r2, #0
 8009092:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	2201      	movs	r2, #1
 8009098:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800909a:	7afb      	ldrb	r3, [r7, #11]
 800909c:	f003 030f 	and.w	r3, r3, #15
 80090a0:	b2da      	uxtb	r2, r3
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d102      	bne.n	80090b4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	6818      	ldr	r0, [r3, #0]
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	461a      	mov	r2, r3
 80090c0:	6979      	ldr	r1, [r7, #20]
 80090c2:	f00a f905 	bl	80132d0 <USB_EPStartXfer>

  return HAL_OK;
 80090c6:	2300      	movs	r3, #0
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3718      	adds	r7, #24
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	460b      	mov	r3, r1
 80090da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80090dc:	78fb      	ldrb	r3, [r7, #3]
 80090de:	f003 020f 	and.w	r2, r3, #15
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d901      	bls.n	80090ee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80090ea:	2301      	movs	r3, #1
 80090ec:	e050      	b.n	8009190 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80090ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	da0f      	bge.n	8009116 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80090f6:	78fb      	ldrb	r3, [r7, #3]
 80090f8:	f003 020f 	and.w	r2, r3, #15
 80090fc:	4613      	mov	r3, r2
 80090fe:	00db      	lsls	r3, r3, #3
 8009100:	4413      	add	r3, r2
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	3338      	adds	r3, #56	; 0x38
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	4413      	add	r3, r2
 800910a:	3304      	adds	r3, #4
 800910c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2201      	movs	r2, #1
 8009112:	705a      	strb	r2, [r3, #1]
 8009114:	e00d      	b.n	8009132 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009116:	78fa      	ldrb	r2, [r7, #3]
 8009118:	4613      	mov	r3, r2
 800911a:	00db      	lsls	r3, r3, #3
 800911c:	4413      	add	r3, r2
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	4413      	add	r3, r2
 8009128:	3304      	adds	r3, #4
 800912a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2200      	movs	r2, #0
 8009130:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2201      	movs	r2, #1
 8009136:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009138:	78fb      	ldrb	r3, [r7, #3]
 800913a:	f003 030f 	and.w	r3, r3, #15
 800913e:	b2da      	uxtb	r2, r3
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800914a:	2b01      	cmp	r3, #1
 800914c:	d101      	bne.n	8009152 <HAL_PCD_EP_SetStall+0x82>
 800914e:	2302      	movs	r3, #2
 8009150:	e01e      	b.n	8009190 <HAL_PCD_EP_SetStall+0xc0>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2201      	movs	r2, #1
 8009156:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	68f9      	ldr	r1, [r7, #12]
 8009160:	4618      	mov	r0, r3
 8009162:	f00a fc95 	bl	8013a90 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009166:	78fb      	ldrb	r3, [r7, #3]
 8009168:	f003 030f 	and.w	r3, r3, #15
 800916c:	2b00      	cmp	r3, #0
 800916e:	d10a      	bne.n	8009186 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6818      	ldr	r0, [r3, #0]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	b2d9      	uxtb	r1, r3
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009180:	461a      	mov	r2, r3
 8009182:	f00a fe87 	bl	8013e94 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800918e:	2300      	movs	r3, #0
}
 8009190:	4618      	mov	r0, r3
 8009192:	3710      	adds	r7, #16
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	460b      	mov	r3, r1
 80091a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80091a4:	78fb      	ldrb	r3, [r7, #3]
 80091a6:	f003 020f 	and.w	r2, r3, #15
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d901      	bls.n	80091b6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80091b2:	2301      	movs	r3, #1
 80091b4:	e042      	b.n	800923c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80091b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	da0f      	bge.n	80091de <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091be:	78fb      	ldrb	r3, [r7, #3]
 80091c0:	f003 020f 	and.w	r2, r3, #15
 80091c4:	4613      	mov	r3, r2
 80091c6:	00db      	lsls	r3, r3, #3
 80091c8:	4413      	add	r3, r2
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	3338      	adds	r3, #56	; 0x38
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	4413      	add	r3, r2
 80091d2:	3304      	adds	r3, #4
 80091d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2201      	movs	r2, #1
 80091da:	705a      	strb	r2, [r3, #1]
 80091dc:	e00f      	b.n	80091fe <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80091de:	78fb      	ldrb	r3, [r7, #3]
 80091e0:	f003 020f 	and.w	r2, r3, #15
 80091e4:	4613      	mov	r3, r2
 80091e6:	00db      	lsls	r3, r3, #3
 80091e8:	4413      	add	r3, r2
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	4413      	add	r3, r2
 80091f4:	3304      	adds	r3, #4
 80091f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2200      	movs	r2, #0
 80091fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2200      	movs	r2, #0
 8009202:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009204:	78fb      	ldrb	r3, [r7, #3]
 8009206:	f003 030f 	and.w	r3, r3, #15
 800920a:	b2da      	uxtb	r2, r3
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009216:	2b01      	cmp	r3, #1
 8009218:	d101      	bne.n	800921e <HAL_PCD_EP_ClrStall+0x86>
 800921a:	2302      	movs	r3, #2
 800921c:	e00e      	b.n	800923c <HAL_PCD_EP_ClrStall+0xa4>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2201      	movs	r2, #1
 8009222:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	68f9      	ldr	r1, [r7, #12]
 800922c:	4618      	mov	r0, r3
 800922e:	f00a fc9d 	bl	8013b6c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2200      	movs	r2, #0
 8009236:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800923a:	2300      	movs	r3, #0
}
 800923c:	4618      	mov	r0, r3
 800923e:	3710      	adds	r7, #16
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	460b      	mov	r3, r1
 800924e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009250:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009254:	2b00      	cmp	r3, #0
 8009256:	da0c      	bge.n	8009272 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009258:	78fb      	ldrb	r3, [r7, #3]
 800925a:	f003 020f 	and.w	r2, r3, #15
 800925e:	4613      	mov	r3, r2
 8009260:	00db      	lsls	r3, r3, #3
 8009262:	4413      	add	r3, r2
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	3338      	adds	r3, #56	; 0x38
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	4413      	add	r3, r2
 800926c:	3304      	adds	r3, #4
 800926e:	60fb      	str	r3, [r7, #12]
 8009270:	e00c      	b.n	800928c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009272:	78fb      	ldrb	r3, [r7, #3]
 8009274:	f003 020f 	and.w	r2, r3, #15
 8009278:	4613      	mov	r3, r2
 800927a:	00db      	lsls	r3, r3, #3
 800927c:	4413      	add	r3, r2
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	4413      	add	r3, r2
 8009288:	3304      	adds	r3, #4
 800928a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	68f9      	ldr	r1, [r7, #12]
 8009292:	4618      	mov	r0, r3
 8009294:	f00a fabc 	bl	8013810 <USB_EPStopXfer>
 8009298:	4603      	mov	r3, r0
 800929a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800929c:	7afb      	ldrb	r3, [r7, #11]
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b08a      	sub	sp, #40	; 0x28
 80092aa:	af02      	add	r7, sp, #8
 80092ac:	6078      	str	r0, [r7, #4]
 80092ae:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80092ba:	683a      	ldr	r2, [r7, #0]
 80092bc:	4613      	mov	r3, r2
 80092be:	00db      	lsls	r3, r3, #3
 80092c0:	4413      	add	r3, r2
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	3338      	adds	r3, #56	; 0x38
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	4413      	add	r3, r2
 80092ca:	3304      	adds	r3, #4
 80092cc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	695a      	ldr	r2, [r3, #20]
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d901      	bls.n	80092de <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80092da:	2301      	movs	r3, #1
 80092dc:	e06c      	b.n	80093b8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	691a      	ldr	r2, [r3, #16]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	695b      	ldr	r3, [r3, #20]
 80092e6:	1ad3      	subs	r3, r2, r3
 80092e8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	69fa      	ldr	r2, [r7, #28]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d902      	bls.n	80092fa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80092fa:	69fb      	ldr	r3, [r7, #28]
 80092fc:	3303      	adds	r3, #3
 80092fe:	089b      	lsrs	r3, r3, #2
 8009300:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009302:	e02b      	b.n	800935c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	691a      	ldr	r2, [r3, #16]
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	695b      	ldr	r3, [r3, #20]
 800930c:	1ad3      	subs	r3, r2, r3
 800930e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	689b      	ldr	r3, [r3, #8]
 8009314:	69fa      	ldr	r2, [r7, #28]
 8009316:	429a      	cmp	r2, r3
 8009318:	d902      	bls.n	8009320 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009320:	69fb      	ldr	r3, [r7, #28]
 8009322:	3303      	adds	r3, #3
 8009324:	089b      	lsrs	r3, r3, #2
 8009326:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	68d9      	ldr	r1, [r3, #12]
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	b2da      	uxtb	r2, r3
 8009330:	69fb      	ldr	r3, [r7, #28]
 8009332:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009338:	b2db      	uxtb	r3, r3
 800933a:	9300      	str	r3, [sp, #0]
 800933c:	4603      	mov	r3, r0
 800933e:	6978      	ldr	r0, [r7, #20]
 8009340:	f00a fb10 	bl	8013964 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	68da      	ldr	r2, [r3, #12]
 8009348:	69fb      	ldr	r3, [r7, #28]
 800934a:	441a      	add	r2, r3
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	695a      	ldr	r2, [r3, #20]
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	441a      	add	r2, r3
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	015a      	lsls	r2, r3, #5
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	4413      	add	r3, r2
 8009364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009368:	699b      	ldr	r3, [r3, #24]
 800936a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800936c:	69ba      	ldr	r2, [r7, #24]
 800936e:	429a      	cmp	r2, r3
 8009370:	d809      	bhi.n	8009386 <PCD_WriteEmptyTxFifo+0xe0>
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	695a      	ldr	r2, [r3, #20]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800937a:	429a      	cmp	r2, r3
 800937c:	d203      	bcs.n	8009386 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	691b      	ldr	r3, [r3, #16]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d1be      	bne.n	8009304 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	691a      	ldr	r2, [r3, #16]
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	695b      	ldr	r3, [r3, #20]
 800938e:	429a      	cmp	r2, r3
 8009390:	d811      	bhi.n	80093b6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	f003 030f 	and.w	r3, r3, #15
 8009398:	2201      	movs	r2, #1
 800939a:	fa02 f303 	lsl.w	r3, r2, r3
 800939e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	43db      	mvns	r3, r3
 80093ac:	6939      	ldr	r1, [r7, #16]
 80093ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093b2:	4013      	ands	r3, r2
 80093b4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80093b6:	2300      	movs	r3, #0
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3720      	adds	r7, #32
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b088      	sub	sp, #32
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093d0:	69fb      	ldr	r3, [r7, #28]
 80093d2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80093d4:	69fb      	ldr	r3, [r7, #28]
 80093d6:	333c      	adds	r3, #60	; 0x3c
 80093d8:	3304      	adds	r3, #4
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	015a      	lsls	r2, r3, #5
 80093e2:	69bb      	ldr	r3, [r7, #24]
 80093e4:	4413      	add	r3, r2
 80093e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d17b      	bne.n	80094ee <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	f003 0308 	and.w	r3, r3, #8
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d015      	beq.n	800942c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	4a61      	ldr	r2, [pc, #388]	; (8009588 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009404:	4293      	cmp	r3, r2
 8009406:	f240 80b9 	bls.w	800957c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009410:	2b00      	cmp	r3, #0
 8009412:	f000 80b3 	beq.w	800957c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	015a      	lsls	r2, r3, #5
 800941a:	69bb      	ldr	r3, [r7, #24]
 800941c:	4413      	add	r3, r2
 800941e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009422:	461a      	mov	r2, r3
 8009424:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009428:	6093      	str	r3, [r2, #8]
 800942a:	e0a7      	b.n	800957c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	f003 0320 	and.w	r3, r3, #32
 8009432:	2b00      	cmp	r3, #0
 8009434:	d009      	beq.n	800944a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	015a      	lsls	r2, r3, #5
 800943a:	69bb      	ldr	r3, [r7, #24]
 800943c:	4413      	add	r3, r2
 800943e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009442:	461a      	mov	r2, r3
 8009444:	2320      	movs	r3, #32
 8009446:	6093      	str	r3, [r2, #8]
 8009448:	e098      	b.n	800957c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009450:	2b00      	cmp	r3, #0
 8009452:	f040 8093 	bne.w	800957c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	4a4b      	ldr	r2, [pc, #300]	; (8009588 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d90f      	bls.n	800947e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00a      	beq.n	800947e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	015a      	lsls	r2, r3, #5
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	4413      	add	r3, r2
 8009470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009474:	461a      	mov	r2, r3
 8009476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800947a:	6093      	str	r3, [r2, #8]
 800947c:	e07e      	b.n	800957c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800947e:	683a      	ldr	r2, [r7, #0]
 8009480:	4613      	mov	r3, r2
 8009482:	00db      	lsls	r3, r3, #3
 8009484:	4413      	add	r3, r2
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	4413      	add	r3, r2
 8009490:	3304      	adds	r3, #4
 8009492:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	6a1a      	ldr	r2, [r3, #32]
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	0159      	lsls	r1, r3, #5
 800949c:	69bb      	ldr	r3, [r7, #24]
 800949e:	440b      	add	r3, r1
 80094a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094a4:	691b      	ldr	r3, [r3, #16]
 80094a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094aa:	1ad2      	subs	r2, r2, r3
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d114      	bne.n	80094e0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	691b      	ldr	r3, [r3, #16]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d109      	bne.n	80094d2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6818      	ldr	r0, [r3, #0]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80094c8:	461a      	mov	r2, r3
 80094ca:	2101      	movs	r1, #1
 80094cc:	f00a fce2 	bl	8013e94 <USB_EP0_OutStart>
 80094d0:	e006      	b.n	80094e0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	68da      	ldr	r2, [r3, #12]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	695b      	ldr	r3, [r3, #20]
 80094da:	441a      	add	r2, r3
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	b2db      	uxtb	r3, r3
 80094e4:	4619      	mov	r1, r3
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f00d fa32 	bl	8016950 <HAL_PCD_DataOutStageCallback>
 80094ec:	e046      	b.n	800957c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	4a26      	ldr	r2, [pc, #152]	; (800958c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d124      	bne.n	8009540 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d00a      	beq.n	8009516 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	015a      	lsls	r2, r3, #5
 8009504:	69bb      	ldr	r3, [r7, #24]
 8009506:	4413      	add	r3, r2
 8009508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800950c:	461a      	mov	r2, r3
 800950e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009512:	6093      	str	r3, [r2, #8]
 8009514:	e032      	b.n	800957c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	f003 0320 	and.w	r3, r3, #32
 800951c:	2b00      	cmp	r3, #0
 800951e:	d008      	beq.n	8009532 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	015a      	lsls	r2, r3, #5
 8009524:	69bb      	ldr	r3, [r7, #24]
 8009526:	4413      	add	r3, r2
 8009528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800952c:	461a      	mov	r2, r3
 800952e:	2320      	movs	r3, #32
 8009530:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	b2db      	uxtb	r3, r3
 8009536:	4619      	mov	r1, r3
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f00d fa09 	bl	8016950 <HAL_PCD_DataOutStageCallback>
 800953e:	e01d      	b.n	800957c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d114      	bne.n	8009570 <PCD_EP_OutXfrComplete_int+0x1b0>
 8009546:	6879      	ldr	r1, [r7, #4]
 8009548:	683a      	ldr	r2, [r7, #0]
 800954a:	4613      	mov	r3, r2
 800954c:	00db      	lsls	r3, r3, #3
 800954e:	4413      	add	r3, r2
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	440b      	add	r3, r1
 8009554:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d108      	bne.n	8009570 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6818      	ldr	r0, [r3, #0]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009568:	461a      	mov	r2, r3
 800956a:	2100      	movs	r1, #0
 800956c:	f00a fc92 	bl	8013e94 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	b2db      	uxtb	r3, r3
 8009574:	4619      	mov	r1, r3
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f00d f9ea 	bl	8016950 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800957c:	2300      	movs	r3, #0
}
 800957e:	4618      	mov	r0, r3
 8009580:	3720      	adds	r7, #32
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	4f54300a 	.word	0x4f54300a
 800958c:	4f54310a 	.word	0x4f54310a

08009590 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b086      	sub	sp, #24
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	333c      	adds	r3, #60	; 0x3c
 80095a8:	3304      	adds	r3, #4
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	015a      	lsls	r2, r3, #5
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	4413      	add	r3, r2
 80095b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	4a15      	ldr	r2, [pc, #84]	; (8009618 <PCD_EP_OutSetupPacket_int+0x88>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d90e      	bls.n	80095e4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d009      	beq.n	80095e4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	015a      	lsls	r2, r3, #5
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	4413      	add	r3, r2
 80095d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095dc:	461a      	mov	r2, r3
 80095de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095e2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f00d f9a1 	bl	801692c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	4a0a      	ldr	r2, [pc, #40]	; (8009618 <PCD_EP_OutSetupPacket_int+0x88>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d90c      	bls.n	800960c <PCD_EP_OutSetupPacket_int+0x7c>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	68db      	ldr	r3, [r3, #12]
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	d108      	bne.n	800960c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6818      	ldr	r0, [r3, #0]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009604:	461a      	mov	r2, r3
 8009606:	2101      	movs	r1, #1
 8009608:	f00a fc44 	bl	8013e94 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800960c:	2300      	movs	r3, #0
}
 800960e:	4618      	mov	r0, r3
 8009610:	3718      	adds	r7, #24
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	4f54300a 	.word	0x4f54300a

0800961c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800961c:	b480      	push	{r7}
 800961e:	b085      	sub	sp, #20
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	460b      	mov	r3, r1
 8009626:	70fb      	strb	r3, [r7, #3]
 8009628:	4613      	mov	r3, r2
 800962a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009632:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009634:	78fb      	ldrb	r3, [r7, #3]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d107      	bne.n	800964a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800963a:	883b      	ldrh	r3, [r7, #0]
 800963c:	0419      	lsls	r1, r3, #16
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	68ba      	ldr	r2, [r7, #8]
 8009644:	430a      	orrs	r2, r1
 8009646:	629a      	str	r2, [r3, #40]	; 0x28
 8009648:	e028      	b.n	800969c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009650:	0c1b      	lsrs	r3, r3, #16
 8009652:	68ba      	ldr	r2, [r7, #8]
 8009654:	4413      	add	r3, r2
 8009656:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009658:	2300      	movs	r3, #0
 800965a:	73fb      	strb	r3, [r7, #15]
 800965c:	e00d      	b.n	800967a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	7bfb      	ldrb	r3, [r7, #15]
 8009664:	3340      	adds	r3, #64	; 0x40
 8009666:	009b      	lsls	r3, r3, #2
 8009668:	4413      	add	r3, r2
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	0c1b      	lsrs	r3, r3, #16
 800966e:	68ba      	ldr	r2, [r7, #8]
 8009670:	4413      	add	r3, r2
 8009672:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009674:	7bfb      	ldrb	r3, [r7, #15]
 8009676:	3301      	adds	r3, #1
 8009678:	73fb      	strb	r3, [r7, #15]
 800967a:	7bfa      	ldrb	r2, [r7, #15]
 800967c:	78fb      	ldrb	r3, [r7, #3]
 800967e:	3b01      	subs	r3, #1
 8009680:	429a      	cmp	r2, r3
 8009682:	d3ec      	bcc.n	800965e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009684:	883b      	ldrh	r3, [r7, #0]
 8009686:	0418      	lsls	r0, r3, #16
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6819      	ldr	r1, [r3, #0]
 800968c:	78fb      	ldrb	r3, [r7, #3]
 800968e:	3b01      	subs	r3, #1
 8009690:	68ba      	ldr	r2, [r7, #8]
 8009692:	4302      	orrs	r2, r0
 8009694:	3340      	adds	r3, #64	; 0x40
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	440b      	add	r3, r1
 800969a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800969c:	2300      	movs	r3, #0
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3714      	adds	r7, #20
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr

080096aa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80096aa:	b480      	push	{r7}
 80096ac:	b083      	sub	sp, #12
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
 80096b2:	460b      	mov	r3, r1
 80096b4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	887a      	ldrh	r2, [r7, #2]
 80096bc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	370c      	adds	r7, #12
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr

080096cc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b085      	sub	sp, #20
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2201      	movs	r2, #1
 80096de:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	699b      	ldr	r3, [r3, #24]
 80096ee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80096fa:	4b05      	ldr	r3, [pc, #20]	; (8009710 <HAL_PCDEx_ActivateLPM+0x44>)
 80096fc:	4313      	orrs	r3, r2
 80096fe:	68fa      	ldr	r2, [r7, #12]
 8009700:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009702:	2300      	movs	r3, #0
}
 8009704:	4618      	mov	r0, r3
 8009706:	3714      	adds	r7, #20
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr
 8009710:	10000003 	.word	0x10000003

08009714 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	460b      	mov	r3, r1
 800971e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009720:	bf00      	nop
 8009722:	370c      	adds	r7, #12
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr

0800972c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009734:	4b19      	ldr	r3, [pc, #100]	; (800979c <HAL_PWREx_ConfigSupply+0x70>)
 8009736:	68db      	ldr	r3, [r3, #12]
 8009738:	f003 0304 	and.w	r3, r3, #4
 800973c:	2b04      	cmp	r3, #4
 800973e:	d00a      	beq.n	8009756 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009740:	4b16      	ldr	r3, [pc, #88]	; (800979c <HAL_PWREx_ConfigSupply+0x70>)
 8009742:	68db      	ldr	r3, [r3, #12]
 8009744:	f003 0307 	and.w	r3, r3, #7
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	429a      	cmp	r2, r3
 800974c:	d001      	beq.n	8009752 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	e01f      	b.n	8009792 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009752:	2300      	movs	r3, #0
 8009754:	e01d      	b.n	8009792 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009756:	4b11      	ldr	r3, [pc, #68]	; (800979c <HAL_PWREx_ConfigSupply+0x70>)
 8009758:	68db      	ldr	r3, [r3, #12]
 800975a:	f023 0207 	bic.w	r2, r3, #7
 800975e:	490f      	ldr	r1, [pc, #60]	; (800979c <HAL_PWREx_ConfigSupply+0x70>)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	4313      	orrs	r3, r2
 8009764:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009766:	f7fa f929 	bl	80039bc <HAL_GetTick>
 800976a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800976c:	e009      	b.n	8009782 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800976e:	f7fa f925 	bl	80039bc <HAL_GetTick>
 8009772:	4602      	mov	r2, r0
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	1ad3      	subs	r3, r2, r3
 8009778:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800977c:	d901      	bls.n	8009782 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	e007      	b.n	8009792 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009782:	4b06      	ldr	r3, [pc, #24]	; (800979c <HAL_PWREx_ConfigSupply+0x70>)
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800978a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800978e:	d1ee      	bne.n	800976e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009790:	2300      	movs	r3, #0
}
 8009792:	4618      	mov	r0, r3
 8009794:	3710      	adds	r7, #16
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop
 800979c:	58024800 	.word	0x58024800

080097a0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80097a0:	b480      	push	{r7}
 80097a2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80097a4:	4b05      	ldr	r3, [pc, #20]	; (80097bc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80097a6:	68db      	ldr	r3, [r3, #12]
 80097a8:	4a04      	ldr	r2, [pc, #16]	; (80097bc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80097aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80097ae:	60d3      	str	r3, [r2, #12]
}
 80097b0:	bf00      	nop
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr
 80097ba:	bf00      	nop
 80097bc:	58024800 	.word	0x58024800

080097c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b08c      	sub	sp, #48	; 0x30
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d101      	bne.n	80097d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80097ce:	2301      	movs	r3, #1
 80097d0:	e3c8      	b.n	8009f64 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f003 0301 	and.w	r3, r3, #1
 80097da:	2b00      	cmp	r3, #0
 80097dc:	f000 8087 	beq.w	80098ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80097e0:	4b88      	ldr	r3, [pc, #544]	; (8009a04 <HAL_RCC_OscConfig+0x244>)
 80097e2:	691b      	ldr	r3, [r3, #16]
 80097e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80097e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80097ea:	4b86      	ldr	r3, [pc, #536]	; (8009a04 <HAL_RCC_OscConfig+0x244>)
 80097ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ee:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80097f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097f2:	2b10      	cmp	r3, #16
 80097f4:	d007      	beq.n	8009806 <HAL_RCC_OscConfig+0x46>
 80097f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097f8:	2b18      	cmp	r3, #24
 80097fa:	d110      	bne.n	800981e <HAL_RCC_OscConfig+0x5e>
 80097fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097fe:	f003 0303 	and.w	r3, r3, #3
 8009802:	2b02      	cmp	r3, #2
 8009804:	d10b      	bne.n	800981e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009806:	4b7f      	ldr	r3, [pc, #508]	; (8009a04 <HAL_RCC_OscConfig+0x244>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800980e:	2b00      	cmp	r3, #0
 8009810:	d06c      	beq.n	80098ec <HAL_RCC_OscConfig+0x12c>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d168      	bne.n	80098ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800981a:	2301      	movs	r3, #1
 800981c:	e3a2      	b.n	8009f64 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009826:	d106      	bne.n	8009836 <HAL_RCC_OscConfig+0x76>
 8009828:	4b76      	ldr	r3, [pc, #472]	; (8009a04 <HAL_RCC_OscConfig+0x244>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4a75      	ldr	r2, [pc, #468]	; (8009a04 <HAL_RCC_OscConfig+0x244>)
 800982e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009832:	6013      	str	r3, [r2, #0]
 8009834:	e02e      	b.n	8009894 <HAL_RCC_OscConfig+0xd4>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d10c      	bne.n	8009858 <HAL_RCC_OscConfig+0x98>
 800983e:	4b71      	ldr	r3, [pc, #452]	; (8009a04 <HAL_RCC_OscConfig+0x244>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a70      	ldr	r2, [pc, #448]	; (8009a04 <HAL_RCC_OscConfig+0x244>)
 8009844:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009848:	6013      	str	r3, [r2, #0]
 800984a:	4b6e      	ldr	r3, [pc, #440]	; (8009a04 <HAL_RCC_OscConfig+0x244>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4a6d      	ldr	r2, [pc, #436]	; (8009a04 <HAL_RCC_OscConfig+0x244>)
 8009850:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009854:	6013      	str	r3, [r2, #0]
 8009856:	e01d      	b.n	8009894 <HAL_RCC_OscConfig+0xd4>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009860:	d10c      	bne.n	800987c <HAL_RCC_OscConfig+0xbc>
 8009862:	4b68      	ldr	r3, [pc, #416]	; (8009a04 <HAL_RCC_OscConfig+0x244>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a67      	ldr	r2, [pc, #412]	; (8009a04 <HAL_RCC_OscConfig+0x244>)
 8009868:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800986c:	6013      	str	r3, [r2, #0]
 800986e:	4b65      	ldr	r3, [pc, #404]	; (8009a04 <HAL_RCC_OscConfig+0x244>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4a64      	ldr	r2, [pc, #400]	; (8009a04 <HAL_RCC_OscConfig+0x244>)
 8009874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009878:	6013      	str	r3, [r2, #0]
 800987a:	e00b      	b.n	8009894 <HAL_RCC_OscConfig+0xd4>
 800987c:	4b61      	ldr	r3, [pc, #388]	; (8009a04 <HAL_RCC_OscConfig+0x244>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a60      	ldr	r2, [pc, #384]	; (8009a04 <HAL_RCC_OscConfig+0x244>)
 8009882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009886:	6013      	str	r3, [r2, #0]
 8009888:	4b5e      	ldr	r3, [pc, #376]	; (8009a04 <HAL_RCC_OscConfig+0x244>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a5d      	ldr	r2, [pc, #372]	; (8009a04 <HAL_RCC_OscConfig+0x244>)
 800988e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009892:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d013      	beq.n	80098c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800989c:	f7fa f88e 	bl	80039bc <HAL_GetTick>
 80098a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80098a2:	e008      	b.n	80098b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80098a4:	f7fa f88a 	bl	80039bc <HAL_GetTick>
 80098a8:	4602      	mov	r2, r0
 80098aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ac:	1ad3      	subs	r3, r2, r3
 80098ae:	2b64      	cmp	r3, #100	; 0x64
 80098b0:	d901      	bls.n	80098b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80098b2:	2303      	movs	r3, #3
 80098b4:	e356      	b.n	8009f64 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80098b6:	4b53      	ldr	r3, [pc, #332]	; (8009a04 <HAL_RCC_OscConfig+0x244>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d0f0      	beq.n	80098a4 <HAL_RCC_OscConfig+0xe4>
 80098c2:	e014      	b.n	80098ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098c4:	f7fa f87a 	bl	80039bc <HAL_GetTick>
 80098c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80098ca:	e008      	b.n	80098de <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80098cc:	f7fa f876 	bl	80039bc <HAL_GetTick>
 80098d0:	4602      	mov	r2, r0
 80098d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d4:	1ad3      	subs	r3, r2, r3
 80098d6:	2b64      	cmp	r3, #100	; 0x64
 80098d8:	d901      	bls.n	80098de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80098da:	2303      	movs	r3, #3
 80098dc:	e342      	b.n	8009f64 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80098de:	4b49      	ldr	r3, [pc, #292]	; (8009a04 <HAL_RCC_OscConfig+0x244>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d1f0      	bne.n	80098cc <HAL_RCC_OscConfig+0x10c>
 80098ea:	e000      	b.n	80098ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80098ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f003 0302 	and.w	r3, r3, #2
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	f000 808c 	beq.w	8009a14 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80098fc:	4b41      	ldr	r3, [pc, #260]	; (8009a04 <HAL_RCC_OscConfig+0x244>)
 80098fe:	691b      	ldr	r3, [r3, #16]
 8009900:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009904:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009906:	4b3f      	ldr	r3, [pc, #252]	; (8009a04 <HAL_RCC_OscConfig+0x244>)
 8009908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800990a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800990c:	6a3b      	ldr	r3, [r7, #32]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d007      	beq.n	8009922 <HAL_RCC_OscConfig+0x162>
 8009912:	6a3b      	ldr	r3, [r7, #32]
 8009914:	2b18      	cmp	r3, #24
 8009916:	d137      	bne.n	8009988 <HAL_RCC_OscConfig+0x1c8>
 8009918:	69fb      	ldr	r3, [r7, #28]
 800991a:	f003 0303 	and.w	r3, r3, #3
 800991e:	2b00      	cmp	r3, #0
 8009920:	d132      	bne.n	8009988 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009922:	4b38      	ldr	r3, [pc, #224]	; (8009a04 <HAL_RCC_OscConfig+0x244>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f003 0304 	and.w	r3, r3, #4
 800992a:	2b00      	cmp	r3, #0
 800992c:	d005      	beq.n	800993a <HAL_RCC_OscConfig+0x17a>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	68db      	ldr	r3, [r3, #12]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d101      	bne.n	800993a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009936:	2301      	movs	r3, #1
 8009938:	e314      	b.n	8009f64 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800993a:	4b32      	ldr	r3, [pc, #200]	; (8009a04 <HAL_RCC_OscConfig+0x244>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f023 0219 	bic.w	r2, r3, #25
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	68db      	ldr	r3, [r3, #12]
 8009946:	492f      	ldr	r1, [pc, #188]	; (8009a04 <HAL_RCC_OscConfig+0x244>)
 8009948:	4313      	orrs	r3, r2
 800994a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800994c:	f7fa f836 	bl	80039bc <HAL_GetTick>
 8009950:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009952:	e008      	b.n	8009966 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009954:	f7fa f832 	bl	80039bc <HAL_GetTick>
 8009958:	4602      	mov	r2, r0
 800995a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995c:	1ad3      	subs	r3, r2, r3
 800995e:	2b02      	cmp	r3, #2
 8009960:	d901      	bls.n	8009966 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8009962:	2303      	movs	r3, #3
 8009964:	e2fe      	b.n	8009f64 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009966:	4b27      	ldr	r3, [pc, #156]	; (8009a04 <HAL_RCC_OscConfig+0x244>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f003 0304 	and.w	r3, r3, #4
 800996e:	2b00      	cmp	r3, #0
 8009970:	d0f0      	beq.n	8009954 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009972:	4b24      	ldr	r3, [pc, #144]	; (8009a04 <HAL_RCC_OscConfig+0x244>)
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	691b      	ldr	r3, [r3, #16]
 800997e:	061b      	lsls	r3, r3, #24
 8009980:	4920      	ldr	r1, [pc, #128]	; (8009a04 <HAL_RCC_OscConfig+0x244>)
 8009982:	4313      	orrs	r3, r2
 8009984:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009986:	e045      	b.n	8009a14 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	68db      	ldr	r3, [r3, #12]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d026      	beq.n	80099de <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009990:	4b1c      	ldr	r3, [pc, #112]	; (8009a04 <HAL_RCC_OscConfig+0x244>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f023 0219 	bic.w	r2, r3, #25
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	68db      	ldr	r3, [r3, #12]
 800999c:	4919      	ldr	r1, [pc, #100]	; (8009a04 <HAL_RCC_OscConfig+0x244>)
 800999e:	4313      	orrs	r3, r2
 80099a0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099a2:	f7fa f80b 	bl	80039bc <HAL_GetTick>
 80099a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80099a8:	e008      	b.n	80099bc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80099aa:	f7fa f807 	bl	80039bc <HAL_GetTick>
 80099ae:	4602      	mov	r2, r0
 80099b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b2:	1ad3      	subs	r3, r2, r3
 80099b4:	2b02      	cmp	r3, #2
 80099b6:	d901      	bls.n	80099bc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80099b8:	2303      	movs	r3, #3
 80099ba:	e2d3      	b.n	8009f64 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80099bc:	4b11      	ldr	r3, [pc, #68]	; (8009a04 <HAL_RCC_OscConfig+0x244>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f003 0304 	and.w	r3, r3, #4
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d0f0      	beq.n	80099aa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099c8:	4b0e      	ldr	r3, [pc, #56]	; (8009a04 <HAL_RCC_OscConfig+0x244>)
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	691b      	ldr	r3, [r3, #16]
 80099d4:	061b      	lsls	r3, r3, #24
 80099d6:	490b      	ldr	r1, [pc, #44]	; (8009a04 <HAL_RCC_OscConfig+0x244>)
 80099d8:	4313      	orrs	r3, r2
 80099da:	604b      	str	r3, [r1, #4]
 80099dc:	e01a      	b.n	8009a14 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80099de:	4b09      	ldr	r3, [pc, #36]	; (8009a04 <HAL_RCC_OscConfig+0x244>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a08      	ldr	r2, [pc, #32]	; (8009a04 <HAL_RCC_OscConfig+0x244>)
 80099e4:	f023 0301 	bic.w	r3, r3, #1
 80099e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099ea:	f7f9 ffe7 	bl	80039bc <HAL_GetTick>
 80099ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80099f0:	e00a      	b.n	8009a08 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80099f2:	f7f9 ffe3 	bl	80039bc <HAL_GetTick>
 80099f6:	4602      	mov	r2, r0
 80099f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fa:	1ad3      	subs	r3, r2, r3
 80099fc:	2b02      	cmp	r3, #2
 80099fe:	d903      	bls.n	8009a08 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009a00:	2303      	movs	r3, #3
 8009a02:	e2af      	b.n	8009f64 <HAL_RCC_OscConfig+0x7a4>
 8009a04:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009a08:	4b96      	ldr	r3, [pc, #600]	; (8009c64 <HAL_RCC_OscConfig+0x4a4>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f003 0304 	and.w	r3, r3, #4
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d1ee      	bne.n	80099f2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f003 0310 	and.w	r3, r3, #16
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d06a      	beq.n	8009af6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a20:	4b90      	ldr	r3, [pc, #576]	; (8009c64 <HAL_RCC_OscConfig+0x4a4>)
 8009a22:	691b      	ldr	r3, [r3, #16]
 8009a24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a28:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009a2a:	4b8e      	ldr	r3, [pc, #568]	; (8009c64 <HAL_RCC_OscConfig+0x4a4>)
 8009a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a2e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009a30:	69bb      	ldr	r3, [r7, #24]
 8009a32:	2b08      	cmp	r3, #8
 8009a34:	d007      	beq.n	8009a46 <HAL_RCC_OscConfig+0x286>
 8009a36:	69bb      	ldr	r3, [r7, #24]
 8009a38:	2b18      	cmp	r3, #24
 8009a3a:	d11b      	bne.n	8009a74 <HAL_RCC_OscConfig+0x2b4>
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	f003 0303 	and.w	r3, r3, #3
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d116      	bne.n	8009a74 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009a46:	4b87      	ldr	r3, [pc, #540]	; (8009c64 <HAL_RCC_OscConfig+0x4a4>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d005      	beq.n	8009a5e <HAL_RCC_OscConfig+0x29e>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	69db      	ldr	r3, [r3, #28]
 8009a56:	2b80      	cmp	r3, #128	; 0x80
 8009a58:	d001      	beq.n	8009a5e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e282      	b.n	8009f64 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a5e:	4b81      	ldr	r3, [pc, #516]	; (8009c64 <HAL_RCC_OscConfig+0x4a4>)
 8009a60:	68db      	ldr	r3, [r3, #12]
 8009a62:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6a1b      	ldr	r3, [r3, #32]
 8009a6a:	061b      	lsls	r3, r3, #24
 8009a6c:	497d      	ldr	r1, [pc, #500]	; (8009c64 <HAL_RCC_OscConfig+0x4a4>)
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009a72:	e040      	b.n	8009af6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	69db      	ldr	r3, [r3, #28]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d023      	beq.n	8009ac4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009a7c:	4b79      	ldr	r3, [pc, #484]	; (8009c64 <HAL_RCC_OscConfig+0x4a4>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a78      	ldr	r2, [pc, #480]	; (8009c64 <HAL_RCC_OscConfig+0x4a4>)
 8009a82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a88:	f7f9 ff98 	bl	80039bc <HAL_GetTick>
 8009a8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009a8e:	e008      	b.n	8009aa2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009a90:	f7f9 ff94 	bl	80039bc <HAL_GetTick>
 8009a94:	4602      	mov	r2, r0
 8009a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a98:	1ad3      	subs	r3, r2, r3
 8009a9a:	2b02      	cmp	r3, #2
 8009a9c:	d901      	bls.n	8009aa2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009a9e:	2303      	movs	r3, #3
 8009aa0:	e260      	b.n	8009f64 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009aa2:	4b70      	ldr	r3, [pc, #448]	; (8009c64 <HAL_RCC_OscConfig+0x4a4>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d0f0      	beq.n	8009a90 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009aae:	4b6d      	ldr	r3, [pc, #436]	; (8009c64 <HAL_RCC_OscConfig+0x4a4>)
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6a1b      	ldr	r3, [r3, #32]
 8009aba:	061b      	lsls	r3, r3, #24
 8009abc:	4969      	ldr	r1, [pc, #420]	; (8009c64 <HAL_RCC_OscConfig+0x4a4>)
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	60cb      	str	r3, [r1, #12]
 8009ac2:	e018      	b.n	8009af6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009ac4:	4b67      	ldr	r3, [pc, #412]	; (8009c64 <HAL_RCC_OscConfig+0x4a4>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a66      	ldr	r2, [pc, #408]	; (8009c64 <HAL_RCC_OscConfig+0x4a4>)
 8009aca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ace:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ad0:	f7f9 ff74 	bl	80039bc <HAL_GetTick>
 8009ad4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009ad6:	e008      	b.n	8009aea <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009ad8:	f7f9 ff70 	bl	80039bc <HAL_GetTick>
 8009adc:	4602      	mov	r2, r0
 8009ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae0:	1ad3      	subs	r3, r2, r3
 8009ae2:	2b02      	cmp	r3, #2
 8009ae4:	d901      	bls.n	8009aea <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009ae6:	2303      	movs	r3, #3
 8009ae8:	e23c      	b.n	8009f64 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009aea:	4b5e      	ldr	r3, [pc, #376]	; (8009c64 <HAL_RCC_OscConfig+0x4a4>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d1f0      	bne.n	8009ad8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f003 0308 	and.w	r3, r3, #8
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d036      	beq.n	8009b70 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	695b      	ldr	r3, [r3, #20]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d019      	beq.n	8009b3e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009b0a:	4b56      	ldr	r3, [pc, #344]	; (8009c64 <HAL_RCC_OscConfig+0x4a4>)
 8009b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b0e:	4a55      	ldr	r2, [pc, #340]	; (8009c64 <HAL_RCC_OscConfig+0x4a4>)
 8009b10:	f043 0301 	orr.w	r3, r3, #1
 8009b14:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b16:	f7f9 ff51 	bl	80039bc <HAL_GetTick>
 8009b1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009b1c:	e008      	b.n	8009b30 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009b1e:	f7f9 ff4d 	bl	80039bc <HAL_GetTick>
 8009b22:	4602      	mov	r2, r0
 8009b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b26:	1ad3      	subs	r3, r2, r3
 8009b28:	2b02      	cmp	r3, #2
 8009b2a:	d901      	bls.n	8009b30 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009b2c:	2303      	movs	r3, #3
 8009b2e:	e219      	b.n	8009f64 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009b30:	4b4c      	ldr	r3, [pc, #304]	; (8009c64 <HAL_RCC_OscConfig+0x4a4>)
 8009b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b34:	f003 0302 	and.w	r3, r3, #2
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d0f0      	beq.n	8009b1e <HAL_RCC_OscConfig+0x35e>
 8009b3c:	e018      	b.n	8009b70 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009b3e:	4b49      	ldr	r3, [pc, #292]	; (8009c64 <HAL_RCC_OscConfig+0x4a4>)
 8009b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b42:	4a48      	ldr	r2, [pc, #288]	; (8009c64 <HAL_RCC_OscConfig+0x4a4>)
 8009b44:	f023 0301 	bic.w	r3, r3, #1
 8009b48:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b4a:	f7f9 ff37 	bl	80039bc <HAL_GetTick>
 8009b4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009b50:	e008      	b.n	8009b64 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009b52:	f7f9 ff33 	bl	80039bc <HAL_GetTick>
 8009b56:	4602      	mov	r2, r0
 8009b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5a:	1ad3      	subs	r3, r2, r3
 8009b5c:	2b02      	cmp	r3, #2
 8009b5e:	d901      	bls.n	8009b64 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009b60:	2303      	movs	r3, #3
 8009b62:	e1ff      	b.n	8009f64 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009b64:	4b3f      	ldr	r3, [pc, #252]	; (8009c64 <HAL_RCC_OscConfig+0x4a4>)
 8009b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b68:	f003 0302 	and.w	r3, r3, #2
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d1f0      	bne.n	8009b52 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f003 0320 	and.w	r3, r3, #32
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d036      	beq.n	8009bea <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	699b      	ldr	r3, [r3, #24]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d019      	beq.n	8009bb8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009b84:	4b37      	ldr	r3, [pc, #220]	; (8009c64 <HAL_RCC_OscConfig+0x4a4>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a36      	ldr	r2, [pc, #216]	; (8009c64 <HAL_RCC_OscConfig+0x4a4>)
 8009b8a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009b8e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009b90:	f7f9 ff14 	bl	80039bc <HAL_GetTick>
 8009b94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009b96:	e008      	b.n	8009baa <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009b98:	f7f9 ff10 	bl	80039bc <HAL_GetTick>
 8009b9c:	4602      	mov	r2, r0
 8009b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba0:	1ad3      	subs	r3, r2, r3
 8009ba2:	2b02      	cmp	r3, #2
 8009ba4:	d901      	bls.n	8009baa <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009ba6:	2303      	movs	r3, #3
 8009ba8:	e1dc      	b.n	8009f64 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009baa:	4b2e      	ldr	r3, [pc, #184]	; (8009c64 <HAL_RCC_OscConfig+0x4a4>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d0f0      	beq.n	8009b98 <HAL_RCC_OscConfig+0x3d8>
 8009bb6:	e018      	b.n	8009bea <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009bb8:	4b2a      	ldr	r3, [pc, #168]	; (8009c64 <HAL_RCC_OscConfig+0x4a4>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a29      	ldr	r2, [pc, #164]	; (8009c64 <HAL_RCC_OscConfig+0x4a4>)
 8009bbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bc2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009bc4:	f7f9 fefa 	bl	80039bc <HAL_GetTick>
 8009bc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009bca:	e008      	b.n	8009bde <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009bcc:	f7f9 fef6 	bl	80039bc <HAL_GetTick>
 8009bd0:	4602      	mov	r2, r0
 8009bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd4:	1ad3      	subs	r3, r2, r3
 8009bd6:	2b02      	cmp	r3, #2
 8009bd8:	d901      	bls.n	8009bde <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009bda:	2303      	movs	r3, #3
 8009bdc:	e1c2      	b.n	8009f64 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009bde:	4b21      	ldr	r3, [pc, #132]	; (8009c64 <HAL_RCC_OscConfig+0x4a4>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d1f0      	bne.n	8009bcc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f003 0304 	and.w	r3, r3, #4
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	f000 8086 	beq.w	8009d04 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009bf8:	4b1b      	ldr	r3, [pc, #108]	; (8009c68 <HAL_RCC_OscConfig+0x4a8>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4a1a      	ldr	r2, [pc, #104]	; (8009c68 <HAL_RCC_OscConfig+0x4a8>)
 8009bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009c04:	f7f9 feda 	bl	80039bc <HAL_GetTick>
 8009c08:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c0a:	e008      	b.n	8009c1e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c0c:	f7f9 fed6 	bl	80039bc <HAL_GetTick>
 8009c10:	4602      	mov	r2, r0
 8009c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c14:	1ad3      	subs	r3, r2, r3
 8009c16:	2b64      	cmp	r3, #100	; 0x64
 8009c18:	d901      	bls.n	8009c1e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009c1a:	2303      	movs	r3, #3
 8009c1c:	e1a2      	b.n	8009f64 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c1e:	4b12      	ldr	r3, [pc, #72]	; (8009c68 <HAL_RCC_OscConfig+0x4a8>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d0f0      	beq.n	8009c0c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d106      	bne.n	8009c40 <HAL_RCC_OscConfig+0x480>
 8009c32:	4b0c      	ldr	r3, [pc, #48]	; (8009c64 <HAL_RCC_OscConfig+0x4a4>)
 8009c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c36:	4a0b      	ldr	r2, [pc, #44]	; (8009c64 <HAL_RCC_OscConfig+0x4a4>)
 8009c38:	f043 0301 	orr.w	r3, r3, #1
 8009c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8009c3e:	e032      	b.n	8009ca6 <HAL_RCC_OscConfig+0x4e6>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d111      	bne.n	8009c6c <HAL_RCC_OscConfig+0x4ac>
 8009c48:	4b06      	ldr	r3, [pc, #24]	; (8009c64 <HAL_RCC_OscConfig+0x4a4>)
 8009c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c4c:	4a05      	ldr	r2, [pc, #20]	; (8009c64 <HAL_RCC_OscConfig+0x4a4>)
 8009c4e:	f023 0301 	bic.w	r3, r3, #1
 8009c52:	6713      	str	r3, [r2, #112]	; 0x70
 8009c54:	4b03      	ldr	r3, [pc, #12]	; (8009c64 <HAL_RCC_OscConfig+0x4a4>)
 8009c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c58:	4a02      	ldr	r2, [pc, #8]	; (8009c64 <HAL_RCC_OscConfig+0x4a4>)
 8009c5a:	f023 0304 	bic.w	r3, r3, #4
 8009c5e:	6713      	str	r3, [r2, #112]	; 0x70
 8009c60:	e021      	b.n	8009ca6 <HAL_RCC_OscConfig+0x4e6>
 8009c62:	bf00      	nop
 8009c64:	58024400 	.word	0x58024400
 8009c68:	58024800 	.word	0x58024800
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	689b      	ldr	r3, [r3, #8]
 8009c70:	2b05      	cmp	r3, #5
 8009c72:	d10c      	bne.n	8009c8e <HAL_RCC_OscConfig+0x4ce>
 8009c74:	4b83      	ldr	r3, [pc, #524]	; (8009e84 <HAL_RCC_OscConfig+0x6c4>)
 8009c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c78:	4a82      	ldr	r2, [pc, #520]	; (8009e84 <HAL_RCC_OscConfig+0x6c4>)
 8009c7a:	f043 0304 	orr.w	r3, r3, #4
 8009c7e:	6713      	str	r3, [r2, #112]	; 0x70
 8009c80:	4b80      	ldr	r3, [pc, #512]	; (8009e84 <HAL_RCC_OscConfig+0x6c4>)
 8009c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c84:	4a7f      	ldr	r2, [pc, #508]	; (8009e84 <HAL_RCC_OscConfig+0x6c4>)
 8009c86:	f043 0301 	orr.w	r3, r3, #1
 8009c8a:	6713      	str	r3, [r2, #112]	; 0x70
 8009c8c:	e00b      	b.n	8009ca6 <HAL_RCC_OscConfig+0x4e6>
 8009c8e:	4b7d      	ldr	r3, [pc, #500]	; (8009e84 <HAL_RCC_OscConfig+0x6c4>)
 8009c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c92:	4a7c      	ldr	r2, [pc, #496]	; (8009e84 <HAL_RCC_OscConfig+0x6c4>)
 8009c94:	f023 0301 	bic.w	r3, r3, #1
 8009c98:	6713      	str	r3, [r2, #112]	; 0x70
 8009c9a:	4b7a      	ldr	r3, [pc, #488]	; (8009e84 <HAL_RCC_OscConfig+0x6c4>)
 8009c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c9e:	4a79      	ldr	r2, [pc, #484]	; (8009e84 <HAL_RCC_OscConfig+0x6c4>)
 8009ca0:	f023 0304 	bic.w	r3, r3, #4
 8009ca4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	689b      	ldr	r3, [r3, #8]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d015      	beq.n	8009cda <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cae:	f7f9 fe85 	bl	80039bc <HAL_GetTick>
 8009cb2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009cb4:	e00a      	b.n	8009ccc <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009cb6:	f7f9 fe81 	bl	80039bc <HAL_GetTick>
 8009cba:	4602      	mov	r2, r0
 8009cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cbe:	1ad3      	subs	r3, r2, r3
 8009cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d901      	bls.n	8009ccc <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009cc8:	2303      	movs	r3, #3
 8009cca:	e14b      	b.n	8009f64 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ccc:	4b6d      	ldr	r3, [pc, #436]	; (8009e84 <HAL_RCC_OscConfig+0x6c4>)
 8009cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cd0:	f003 0302 	and.w	r3, r3, #2
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d0ee      	beq.n	8009cb6 <HAL_RCC_OscConfig+0x4f6>
 8009cd8:	e014      	b.n	8009d04 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cda:	f7f9 fe6f 	bl	80039bc <HAL_GetTick>
 8009cde:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009ce0:	e00a      	b.n	8009cf8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ce2:	f7f9 fe6b 	bl	80039bc <HAL_GetTick>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cea:	1ad3      	subs	r3, r2, r3
 8009cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d901      	bls.n	8009cf8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009cf4:	2303      	movs	r3, #3
 8009cf6:	e135      	b.n	8009f64 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009cf8:	4b62      	ldr	r3, [pc, #392]	; (8009e84 <HAL_RCC_OscConfig+0x6c4>)
 8009cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cfc:	f003 0302 	and.w	r3, r3, #2
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d1ee      	bne.n	8009ce2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	f000 812a 	beq.w	8009f62 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009d0e:	4b5d      	ldr	r3, [pc, #372]	; (8009e84 <HAL_RCC_OscConfig+0x6c4>)
 8009d10:	691b      	ldr	r3, [r3, #16]
 8009d12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d16:	2b18      	cmp	r3, #24
 8009d18:	f000 80ba 	beq.w	8009e90 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d20:	2b02      	cmp	r3, #2
 8009d22:	f040 8095 	bne.w	8009e50 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d26:	4b57      	ldr	r3, [pc, #348]	; (8009e84 <HAL_RCC_OscConfig+0x6c4>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a56      	ldr	r2, [pc, #344]	; (8009e84 <HAL_RCC_OscConfig+0x6c4>)
 8009d2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d32:	f7f9 fe43 	bl	80039bc <HAL_GetTick>
 8009d36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009d38:	e008      	b.n	8009d4c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d3a:	f7f9 fe3f 	bl	80039bc <HAL_GetTick>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d42:	1ad3      	subs	r3, r2, r3
 8009d44:	2b02      	cmp	r3, #2
 8009d46:	d901      	bls.n	8009d4c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009d48:	2303      	movs	r3, #3
 8009d4a:	e10b      	b.n	8009f64 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009d4c:	4b4d      	ldr	r3, [pc, #308]	; (8009e84 <HAL_RCC_OscConfig+0x6c4>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d1f0      	bne.n	8009d3a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009d58:	4b4a      	ldr	r3, [pc, #296]	; (8009e84 <HAL_RCC_OscConfig+0x6c4>)
 8009d5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d5c:	4b4a      	ldr	r3, [pc, #296]	; (8009e88 <HAL_RCC_OscConfig+0x6c8>)
 8009d5e:	4013      	ands	r3, r2
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009d64:	687a      	ldr	r2, [r7, #4]
 8009d66:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009d68:	0112      	lsls	r2, r2, #4
 8009d6a:	430a      	orrs	r2, r1
 8009d6c:	4945      	ldr	r1, [pc, #276]	; (8009e84 <HAL_RCC_OscConfig+0x6c4>)
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	628b      	str	r3, [r1, #40]	; 0x28
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d76:	3b01      	subs	r3, #1
 8009d78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d80:	3b01      	subs	r3, #1
 8009d82:	025b      	lsls	r3, r3, #9
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	431a      	orrs	r2, r3
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d8c:	3b01      	subs	r3, #1
 8009d8e:	041b      	lsls	r3, r3, #16
 8009d90:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009d94:	431a      	orrs	r2, r3
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d9a:	3b01      	subs	r3, #1
 8009d9c:	061b      	lsls	r3, r3, #24
 8009d9e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009da2:	4938      	ldr	r1, [pc, #224]	; (8009e84 <HAL_RCC_OscConfig+0x6c4>)
 8009da4:	4313      	orrs	r3, r2
 8009da6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009da8:	4b36      	ldr	r3, [pc, #216]	; (8009e84 <HAL_RCC_OscConfig+0x6c4>)
 8009daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dac:	4a35      	ldr	r2, [pc, #212]	; (8009e84 <HAL_RCC_OscConfig+0x6c4>)
 8009dae:	f023 0301 	bic.w	r3, r3, #1
 8009db2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009db4:	4b33      	ldr	r3, [pc, #204]	; (8009e84 <HAL_RCC_OscConfig+0x6c4>)
 8009db6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009db8:	4b34      	ldr	r3, [pc, #208]	; (8009e8c <HAL_RCC_OscConfig+0x6cc>)
 8009dba:	4013      	ands	r3, r2
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009dc0:	00d2      	lsls	r2, r2, #3
 8009dc2:	4930      	ldr	r1, [pc, #192]	; (8009e84 <HAL_RCC_OscConfig+0x6c4>)
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009dc8:	4b2e      	ldr	r3, [pc, #184]	; (8009e84 <HAL_RCC_OscConfig+0x6c4>)
 8009dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dcc:	f023 020c 	bic.w	r2, r3, #12
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dd4:	492b      	ldr	r1, [pc, #172]	; (8009e84 <HAL_RCC_OscConfig+0x6c4>)
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009dda:	4b2a      	ldr	r3, [pc, #168]	; (8009e84 <HAL_RCC_OscConfig+0x6c4>)
 8009ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dde:	f023 0202 	bic.w	r2, r3, #2
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009de6:	4927      	ldr	r1, [pc, #156]	; (8009e84 <HAL_RCC_OscConfig+0x6c4>)
 8009de8:	4313      	orrs	r3, r2
 8009dea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009dec:	4b25      	ldr	r3, [pc, #148]	; (8009e84 <HAL_RCC_OscConfig+0x6c4>)
 8009dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df0:	4a24      	ldr	r2, [pc, #144]	; (8009e84 <HAL_RCC_OscConfig+0x6c4>)
 8009df2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009df6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009df8:	4b22      	ldr	r3, [pc, #136]	; (8009e84 <HAL_RCC_OscConfig+0x6c4>)
 8009dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dfc:	4a21      	ldr	r2, [pc, #132]	; (8009e84 <HAL_RCC_OscConfig+0x6c4>)
 8009dfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009e04:	4b1f      	ldr	r3, [pc, #124]	; (8009e84 <HAL_RCC_OscConfig+0x6c4>)
 8009e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e08:	4a1e      	ldr	r2, [pc, #120]	; (8009e84 <HAL_RCC_OscConfig+0x6c4>)
 8009e0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009e10:	4b1c      	ldr	r3, [pc, #112]	; (8009e84 <HAL_RCC_OscConfig+0x6c4>)
 8009e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e14:	4a1b      	ldr	r2, [pc, #108]	; (8009e84 <HAL_RCC_OscConfig+0x6c4>)
 8009e16:	f043 0301 	orr.w	r3, r3, #1
 8009e1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009e1c:	4b19      	ldr	r3, [pc, #100]	; (8009e84 <HAL_RCC_OscConfig+0x6c4>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4a18      	ldr	r2, [pc, #96]	; (8009e84 <HAL_RCC_OscConfig+0x6c4>)
 8009e22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e28:	f7f9 fdc8 	bl	80039bc <HAL_GetTick>
 8009e2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009e2e:	e008      	b.n	8009e42 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e30:	f7f9 fdc4 	bl	80039bc <HAL_GetTick>
 8009e34:	4602      	mov	r2, r0
 8009e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e38:	1ad3      	subs	r3, r2, r3
 8009e3a:	2b02      	cmp	r3, #2
 8009e3c:	d901      	bls.n	8009e42 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009e3e:	2303      	movs	r3, #3
 8009e40:	e090      	b.n	8009f64 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009e42:	4b10      	ldr	r3, [pc, #64]	; (8009e84 <HAL_RCC_OscConfig+0x6c4>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d0f0      	beq.n	8009e30 <HAL_RCC_OscConfig+0x670>
 8009e4e:	e088      	b.n	8009f62 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e50:	4b0c      	ldr	r3, [pc, #48]	; (8009e84 <HAL_RCC_OscConfig+0x6c4>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a0b      	ldr	r2, [pc, #44]	; (8009e84 <HAL_RCC_OscConfig+0x6c4>)
 8009e56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009e5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e5c:	f7f9 fdae 	bl	80039bc <HAL_GetTick>
 8009e60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e62:	e008      	b.n	8009e76 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e64:	f7f9 fdaa 	bl	80039bc <HAL_GetTick>
 8009e68:	4602      	mov	r2, r0
 8009e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6c:	1ad3      	subs	r3, r2, r3
 8009e6e:	2b02      	cmp	r3, #2
 8009e70:	d901      	bls.n	8009e76 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8009e72:	2303      	movs	r3, #3
 8009e74:	e076      	b.n	8009f64 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e76:	4b03      	ldr	r3, [pc, #12]	; (8009e84 <HAL_RCC_OscConfig+0x6c4>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d1f0      	bne.n	8009e64 <HAL_RCC_OscConfig+0x6a4>
 8009e82:	e06e      	b.n	8009f62 <HAL_RCC_OscConfig+0x7a2>
 8009e84:	58024400 	.word	0x58024400
 8009e88:	fffffc0c 	.word	0xfffffc0c
 8009e8c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009e90:	4b36      	ldr	r3, [pc, #216]	; (8009f6c <HAL_RCC_OscConfig+0x7ac>)
 8009e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e94:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009e96:	4b35      	ldr	r3, [pc, #212]	; (8009f6c <HAL_RCC_OscConfig+0x7ac>)
 8009e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e9a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	d031      	beq.n	8009f08 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	f003 0203 	and.w	r2, r3, #3
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009eae:	429a      	cmp	r2, r3
 8009eb0:	d12a      	bne.n	8009f08 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	091b      	lsrs	r3, r3, #4
 8009eb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d122      	bne.n	8009f08 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ecc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d11a      	bne.n	8009f08 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	0a5b      	lsrs	r3, r3, #9
 8009ed6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ede:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d111      	bne.n	8009f08 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	0c1b      	lsrs	r3, r3, #16
 8009ee8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ef0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d108      	bne.n	8009f08 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	0e1b      	lsrs	r3, r3, #24
 8009efa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f02:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d001      	beq.n	8009f0c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	e02b      	b.n	8009f64 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009f0c:	4b17      	ldr	r3, [pc, #92]	; (8009f6c <HAL_RCC_OscConfig+0x7ac>)
 8009f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f10:	08db      	lsrs	r3, r3, #3
 8009f12:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f16:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f1c:	693a      	ldr	r2, [r7, #16]
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d01f      	beq.n	8009f62 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009f22:	4b12      	ldr	r3, [pc, #72]	; (8009f6c <HAL_RCC_OscConfig+0x7ac>)
 8009f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f26:	4a11      	ldr	r2, [pc, #68]	; (8009f6c <HAL_RCC_OscConfig+0x7ac>)
 8009f28:	f023 0301 	bic.w	r3, r3, #1
 8009f2c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009f2e:	f7f9 fd45 	bl	80039bc <HAL_GetTick>
 8009f32:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009f34:	bf00      	nop
 8009f36:	f7f9 fd41 	bl	80039bc <HAL_GetTick>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d0f9      	beq.n	8009f36 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009f42:	4b0a      	ldr	r3, [pc, #40]	; (8009f6c <HAL_RCC_OscConfig+0x7ac>)
 8009f44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f46:	4b0a      	ldr	r3, [pc, #40]	; (8009f70 <HAL_RCC_OscConfig+0x7b0>)
 8009f48:	4013      	ands	r3, r2
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009f4e:	00d2      	lsls	r2, r2, #3
 8009f50:	4906      	ldr	r1, [pc, #24]	; (8009f6c <HAL_RCC_OscConfig+0x7ac>)
 8009f52:	4313      	orrs	r3, r2
 8009f54:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009f56:	4b05      	ldr	r3, [pc, #20]	; (8009f6c <HAL_RCC_OscConfig+0x7ac>)
 8009f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f5a:	4a04      	ldr	r2, [pc, #16]	; (8009f6c <HAL_RCC_OscConfig+0x7ac>)
 8009f5c:	f043 0301 	orr.w	r3, r3, #1
 8009f60:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009f62:	2300      	movs	r3, #0
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3730      	adds	r7, #48	; 0x30
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}
 8009f6c:	58024400 	.word	0x58024400
 8009f70:	ffff0007 	.word	0xffff0007

08009f74 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b086      	sub	sp, #24
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d101      	bne.n	8009f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009f84:	2301      	movs	r3, #1
 8009f86:	e19c      	b.n	800a2c2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009f88:	4b8a      	ldr	r3, [pc, #552]	; (800a1b4 <HAL_RCC_ClockConfig+0x240>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f003 030f 	and.w	r3, r3, #15
 8009f90:	683a      	ldr	r2, [r7, #0]
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d910      	bls.n	8009fb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f96:	4b87      	ldr	r3, [pc, #540]	; (800a1b4 <HAL_RCC_ClockConfig+0x240>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f023 020f 	bic.w	r2, r3, #15
 8009f9e:	4985      	ldr	r1, [pc, #532]	; (800a1b4 <HAL_RCC_ClockConfig+0x240>)
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009fa6:	4b83      	ldr	r3, [pc, #524]	; (800a1b4 <HAL_RCC_ClockConfig+0x240>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f003 030f 	and.w	r3, r3, #15
 8009fae:	683a      	ldr	r2, [r7, #0]
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d001      	beq.n	8009fb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	e184      	b.n	800a2c2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f003 0304 	and.w	r3, r3, #4
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d010      	beq.n	8009fe6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	691a      	ldr	r2, [r3, #16]
 8009fc8:	4b7b      	ldr	r3, [pc, #492]	; (800a1b8 <HAL_RCC_ClockConfig+0x244>)
 8009fca:	699b      	ldr	r3, [r3, #24]
 8009fcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d908      	bls.n	8009fe6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009fd4:	4b78      	ldr	r3, [pc, #480]	; (800a1b8 <HAL_RCC_ClockConfig+0x244>)
 8009fd6:	699b      	ldr	r3, [r3, #24]
 8009fd8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	691b      	ldr	r3, [r3, #16]
 8009fe0:	4975      	ldr	r1, [pc, #468]	; (800a1b8 <HAL_RCC_ClockConfig+0x244>)
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f003 0308 	and.w	r3, r3, #8
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d010      	beq.n	800a014 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	695a      	ldr	r2, [r3, #20]
 8009ff6:	4b70      	ldr	r3, [pc, #448]	; (800a1b8 <HAL_RCC_ClockConfig+0x244>)
 8009ff8:	69db      	ldr	r3, [r3, #28]
 8009ffa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d908      	bls.n	800a014 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a002:	4b6d      	ldr	r3, [pc, #436]	; (800a1b8 <HAL_RCC_ClockConfig+0x244>)
 800a004:	69db      	ldr	r3, [r3, #28]
 800a006:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	695b      	ldr	r3, [r3, #20]
 800a00e:	496a      	ldr	r1, [pc, #424]	; (800a1b8 <HAL_RCC_ClockConfig+0x244>)
 800a010:	4313      	orrs	r3, r2
 800a012:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f003 0310 	and.w	r3, r3, #16
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d010      	beq.n	800a042 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	699a      	ldr	r2, [r3, #24]
 800a024:	4b64      	ldr	r3, [pc, #400]	; (800a1b8 <HAL_RCC_ClockConfig+0x244>)
 800a026:	69db      	ldr	r3, [r3, #28]
 800a028:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d908      	bls.n	800a042 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a030:	4b61      	ldr	r3, [pc, #388]	; (800a1b8 <HAL_RCC_ClockConfig+0x244>)
 800a032:	69db      	ldr	r3, [r3, #28]
 800a034:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	699b      	ldr	r3, [r3, #24]
 800a03c:	495e      	ldr	r1, [pc, #376]	; (800a1b8 <HAL_RCC_ClockConfig+0x244>)
 800a03e:	4313      	orrs	r3, r2
 800a040:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f003 0320 	and.w	r3, r3, #32
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d010      	beq.n	800a070 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	69da      	ldr	r2, [r3, #28]
 800a052:	4b59      	ldr	r3, [pc, #356]	; (800a1b8 <HAL_RCC_ClockConfig+0x244>)
 800a054:	6a1b      	ldr	r3, [r3, #32]
 800a056:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d908      	bls.n	800a070 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a05e:	4b56      	ldr	r3, [pc, #344]	; (800a1b8 <HAL_RCC_ClockConfig+0x244>)
 800a060:	6a1b      	ldr	r3, [r3, #32]
 800a062:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	69db      	ldr	r3, [r3, #28]
 800a06a:	4953      	ldr	r1, [pc, #332]	; (800a1b8 <HAL_RCC_ClockConfig+0x244>)
 800a06c:	4313      	orrs	r3, r2
 800a06e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f003 0302 	and.w	r3, r3, #2
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d010      	beq.n	800a09e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	68da      	ldr	r2, [r3, #12]
 800a080:	4b4d      	ldr	r3, [pc, #308]	; (800a1b8 <HAL_RCC_ClockConfig+0x244>)
 800a082:	699b      	ldr	r3, [r3, #24]
 800a084:	f003 030f 	and.w	r3, r3, #15
 800a088:	429a      	cmp	r2, r3
 800a08a:	d908      	bls.n	800a09e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a08c:	4b4a      	ldr	r3, [pc, #296]	; (800a1b8 <HAL_RCC_ClockConfig+0x244>)
 800a08e:	699b      	ldr	r3, [r3, #24]
 800a090:	f023 020f 	bic.w	r2, r3, #15
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	4947      	ldr	r1, [pc, #284]	; (800a1b8 <HAL_RCC_ClockConfig+0x244>)
 800a09a:	4313      	orrs	r3, r2
 800a09c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f003 0301 	and.w	r3, r3, #1
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d055      	beq.n	800a156 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a0aa:	4b43      	ldr	r3, [pc, #268]	; (800a1b8 <HAL_RCC_ClockConfig+0x244>)
 800a0ac:	699b      	ldr	r3, [r3, #24]
 800a0ae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	689b      	ldr	r3, [r3, #8]
 800a0b6:	4940      	ldr	r1, [pc, #256]	; (800a1b8 <HAL_RCC_ClockConfig+0x244>)
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	2b02      	cmp	r3, #2
 800a0c2:	d107      	bne.n	800a0d4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a0c4:	4b3c      	ldr	r3, [pc, #240]	; (800a1b8 <HAL_RCC_ClockConfig+0x244>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d121      	bne.n	800a114 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	e0f6      	b.n	800a2c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	2b03      	cmp	r3, #3
 800a0da:	d107      	bne.n	800a0ec <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a0dc:	4b36      	ldr	r3, [pc, #216]	; (800a1b8 <HAL_RCC_ClockConfig+0x244>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d115      	bne.n	800a114 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	e0ea      	b.n	800a2c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d107      	bne.n	800a104 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a0f4:	4b30      	ldr	r3, [pc, #192]	; (800a1b8 <HAL_RCC_ClockConfig+0x244>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d109      	bne.n	800a114 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a100:	2301      	movs	r3, #1
 800a102:	e0de      	b.n	800a2c2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a104:	4b2c      	ldr	r3, [pc, #176]	; (800a1b8 <HAL_RCC_ClockConfig+0x244>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f003 0304 	and.w	r3, r3, #4
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d101      	bne.n	800a114 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a110:	2301      	movs	r3, #1
 800a112:	e0d6      	b.n	800a2c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a114:	4b28      	ldr	r3, [pc, #160]	; (800a1b8 <HAL_RCC_ClockConfig+0x244>)
 800a116:	691b      	ldr	r3, [r3, #16]
 800a118:	f023 0207 	bic.w	r2, r3, #7
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	4925      	ldr	r1, [pc, #148]	; (800a1b8 <HAL_RCC_ClockConfig+0x244>)
 800a122:	4313      	orrs	r3, r2
 800a124:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a126:	f7f9 fc49 	bl	80039bc <HAL_GetTick>
 800a12a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a12c:	e00a      	b.n	800a144 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a12e:	f7f9 fc45 	bl	80039bc <HAL_GetTick>
 800a132:	4602      	mov	r2, r0
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	1ad3      	subs	r3, r2, r3
 800a138:	f241 3288 	movw	r2, #5000	; 0x1388
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d901      	bls.n	800a144 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a140:	2303      	movs	r3, #3
 800a142:	e0be      	b.n	800a2c2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a144:	4b1c      	ldr	r3, [pc, #112]	; (800a1b8 <HAL_RCC_ClockConfig+0x244>)
 800a146:	691b      	ldr	r3, [r3, #16]
 800a148:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	00db      	lsls	r3, r3, #3
 800a152:	429a      	cmp	r2, r3
 800a154:	d1eb      	bne.n	800a12e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f003 0302 	and.w	r3, r3, #2
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d010      	beq.n	800a184 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	68da      	ldr	r2, [r3, #12]
 800a166:	4b14      	ldr	r3, [pc, #80]	; (800a1b8 <HAL_RCC_ClockConfig+0x244>)
 800a168:	699b      	ldr	r3, [r3, #24]
 800a16a:	f003 030f 	and.w	r3, r3, #15
 800a16e:	429a      	cmp	r2, r3
 800a170:	d208      	bcs.n	800a184 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a172:	4b11      	ldr	r3, [pc, #68]	; (800a1b8 <HAL_RCC_ClockConfig+0x244>)
 800a174:	699b      	ldr	r3, [r3, #24]
 800a176:	f023 020f 	bic.w	r2, r3, #15
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	68db      	ldr	r3, [r3, #12]
 800a17e:	490e      	ldr	r1, [pc, #56]	; (800a1b8 <HAL_RCC_ClockConfig+0x244>)
 800a180:	4313      	orrs	r3, r2
 800a182:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a184:	4b0b      	ldr	r3, [pc, #44]	; (800a1b4 <HAL_RCC_ClockConfig+0x240>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f003 030f 	and.w	r3, r3, #15
 800a18c:	683a      	ldr	r2, [r7, #0]
 800a18e:	429a      	cmp	r2, r3
 800a190:	d214      	bcs.n	800a1bc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a192:	4b08      	ldr	r3, [pc, #32]	; (800a1b4 <HAL_RCC_ClockConfig+0x240>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f023 020f 	bic.w	r2, r3, #15
 800a19a:	4906      	ldr	r1, [pc, #24]	; (800a1b4 <HAL_RCC_ClockConfig+0x240>)
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	4313      	orrs	r3, r2
 800a1a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1a2:	4b04      	ldr	r3, [pc, #16]	; (800a1b4 <HAL_RCC_ClockConfig+0x240>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f003 030f 	and.w	r3, r3, #15
 800a1aa:	683a      	ldr	r2, [r7, #0]
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	d005      	beq.n	800a1bc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	e086      	b.n	800a2c2 <HAL_RCC_ClockConfig+0x34e>
 800a1b4:	52002000 	.word	0x52002000
 800a1b8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f003 0304 	and.w	r3, r3, #4
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d010      	beq.n	800a1ea <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	691a      	ldr	r2, [r3, #16]
 800a1cc:	4b3f      	ldr	r3, [pc, #252]	; (800a2cc <HAL_RCC_ClockConfig+0x358>)
 800a1ce:	699b      	ldr	r3, [r3, #24]
 800a1d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d208      	bcs.n	800a1ea <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a1d8:	4b3c      	ldr	r3, [pc, #240]	; (800a2cc <HAL_RCC_ClockConfig+0x358>)
 800a1da:	699b      	ldr	r3, [r3, #24]
 800a1dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	691b      	ldr	r3, [r3, #16]
 800a1e4:	4939      	ldr	r1, [pc, #228]	; (800a2cc <HAL_RCC_ClockConfig+0x358>)
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f003 0308 	and.w	r3, r3, #8
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d010      	beq.n	800a218 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	695a      	ldr	r2, [r3, #20]
 800a1fa:	4b34      	ldr	r3, [pc, #208]	; (800a2cc <HAL_RCC_ClockConfig+0x358>)
 800a1fc:	69db      	ldr	r3, [r3, #28]
 800a1fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a202:	429a      	cmp	r2, r3
 800a204:	d208      	bcs.n	800a218 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a206:	4b31      	ldr	r3, [pc, #196]	; (800a2cc <HAL_RCC_ClockConfig+0x358>)
 800a208:	69db      	ldr	r3, [r3, #28]
 800a20a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	695b      	ldr	r3, [r3, #20]
 800a212:	492e      	ldr	r1, [pc, #184]	; (800a2cc <HAL_RCC_ClockConfig+0x358>)
 800a214:	4313      	orrs	r3, r2
 800a216:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f003 0310 	and.w	r3, r3, #16
 800a220:	2b00      	cmp	r3, #0
 800a222:	d010      	beq.n	800a246 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	699a      	ldr	r2, [r3, #24]
 800a228:	4b28      	ldr	r3, [pc, #160]	; (800a2cc <HAL_RCC_ClockConfig+0x358>)
 800a22a:	69db      	ldr	r3, [r3, #28]
 800a22c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a230:	429a      	cmp	r2, r3
 800a232:	d208      	bcs.n	800a246 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a234:	4b25      	ldr	r3, [pc, #148]	; (800a2cc <HAL_RCC_ClockConfig+0x358>)
 800a236:	69db      	ldr	r3, [r3, #28]
 800a238:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	699b      	ldr	r3, [r3, #24]
 800a240:	4922      	ldr	r1, [pc, #136]	; (800a2cc <HAL_RCC_ClockConfig+0x358>)
 800a242:	4313      	orrs	r3, r2
 800a244:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f003 0320 	and.w	r3, r3, #32
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d010      	beq.n	800a274 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	69da      	ldr	r2, [r3, #28]
 800a256:	4b1d      	ldr	r3, [pc, #116]	; (800a2cc <HAL_RCC_ClockConfig+0x358>)
 800a258:	6a1b      	ldr	r3, [r3, #32]
 800a25a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a25e:	429a      	cmp	r2, r3
 800a260:	d208      	bcs.n	800a274 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a262:	4b1a      	ldr	r3, [pc, #104]	; (800a2cc <HAL_RCC_ClockConfig+0x358>)
 800a264:	6a1b      	ldr	r3, [r3, #32]
 800a266:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	69db      	ldr	r3, [r3, #28]
 800a26e:	4917      	ldr	r1, [pc, #92]	; (800a2cc <HAL_RCC_ClockConfig+0x358>)
 800a270:	4313      	orrs	r3, r2
 800a272:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a274:	f000 f89e 	bl	800a3b4 <HAL_RCC_GetSysClockFreq>
 800a278:	4602      	mov	r2, r0
 800a27a:	4b14      	ldr	r3, [pc, #80]	; (800a2cc <HAL_RCC_ClockConfig+0x358>)
 800a27c:	699b      	ldr	r3, [r3, #24]
 800a27e:	0a1b      	lsrs	r3, r3, #8
 800a280:	f003 030f 	and.w	r3, r3, #15
 800a284:	4912      	ldr	r1, [pc, #72]	; (800a2d0 <HAL_RCC_ClockConfig+0x35c>)
 800a286:	5ccb      	ldrb	r3, [r1, r3]
 800a288:	f003 031f 	and.w	r3, r3, #31
 800a28c:	fa22 f303 	lsr.w	r3, r2, r3
 800a290:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a292:	4b0e      	ldr	r3, [pc, #56]	; (800a2cc <HAL_RCC_ClockConfig+0x358>)
 800a294:	699b      	ldr	r3, [r3, #24]
 800a296:	f003 030f 	and.w	r3, r3, #15
 800a29a:	4a0d      	ldr	r2, [pc, #52]	; (800a2d0 <HAL_RCC_ClockConfig+0x35c>)
 800a29c:	5cd3      	ldrb	r3, [r2, r3]
 800a29e:	f003 031f 	and.w	r3, r3, #31
 800a2a2:	693a      	ldr	r2, [r7, #16]
 800a2a4:	fa22 f303 	lsr.w	r3, r2, r3
 800a2a8:	4a0a      	ldr	r2, [pc, #40]	; (800a2d4 <HAL_RCC_ClockConfig+0x360>)
 800a2aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a2ac:	4a0a      	ldr	r2, [pc, #40]	; (800a2d8 <HAL_RCC_ClockConfig+0x364>)
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a2b2:	4b0a      	ldr	r3, [pc, #40]	; (800a2dc <HAL_RCC_ClockConfig+0x368>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7f9 fb36 	bl	8003928 <HAL_InitTick>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a2c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3718      	adds	r7, #24
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
 800a2ca:	bf00      	nop
 800a2cc:	58024400 	.word	0x58024400
 800a2d0:	08017aa0 	.word	0x08017aa0
 800a2d4:	24000004 	.word	0x24000004
 800a2d8:	24000000 	.word	0x24000000
 800a2dc:	24000008 	.word	0x24000008

0800a2e0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b08c      	sub	sp, #48	; 0x30
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	60f8      	str	r0, [r7, #12]
 800a2e8:	60b9      	str	r1, [r7, #8]
 800a2ea:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d12a      	bne.n	800a348 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800a2f2:	4b2d      	ldr	r3, [pc, #180]	; (800a3a8 <HAL_RCC_MCOConfig+0xc8>)
 800a2f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a2f8:	4a2b      	ldr	r2, [pc, #172]	; (800a3a8 <HAL_RCC_MCOConfig+0xc8>)
 800a2fa:	f043 0301 	orr.w	r3, r3, #1
 800a2fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a302:	4b29      	ldr	r3, [pc, #164]	; (800a3a8 <HAL_RCC_MCOConfig+0xc8>)
 800a304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a308:	f003 0301 	and.w	r3, r3, #1
 800a30c:	61bb      	str	r3, [r7, #24]
 800a30e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a310:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a316:	2302      	movs	r3, #2
 800a318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a31a:	2303      	movs	r3, #3
 800a31c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a31e:	2300      	movs	r3, #0
 800a320:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a322:	2300      	movs	r3, #0
 800a324:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a326:	f107 031c 	add.w	r3, r7, #28
 800a32a:	4619      	mov	r1, r3
 800a32c:	481f      	ldr	r0, [pc, #124]	; (800a3ac <HAL_RCC_MCOConfig+0xcc>)
 800a32e:	f7fd fc43 	bl	8007bb8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a332:	4b1d      	ldr	r3, [pc, #116]	; (800a3a8 <HAL_RCC_MCOConfig+0xc8>)
 800a334:	691b      	ldr	r3, [r3, #16]
 800a336:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800a33a:	68b9      	ldr	r1, [r7, #8]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	430b      	orrs	r3, r1
 800a340:	4919      	ldr	r1, [pc, #100]	; (800a3a8 <HAL_RCC_MCOConfig+0xc8>)
 800a342:	4313      	orrs	r3, r2
 800a344:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800a346:	e02a      	b.n	800a39e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800a348:	4b17      	ldr	r3, [pc, #92]	; (800a3a8 <HAL_RCC_MCOConfig+0xc8>)
 800a34a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a34e:	4a16      	ldr	r2, [pc, #88]	; (800a3a8 <HAL_RCC_MCOConfig+0xc8>)
 800a350:	f043 0304 	orr.w	r3, r3, #4
 800a354:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a358:	4b13      	ldr	r3, [pc, #76]	; (800a3a8 <HAL_RCC_MCOConfig+0xc8>)
 800a35a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a35e:	f003 0304 	and.w	r3, r3, #4
 800a362:	617b      	str	r3, [r7, #20]
 800a364:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a366:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a36a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a36c:	2302      	movs	r3, #2
 800a36e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a370:	2303      	movs	r3, #3
 800a372:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a374:	2300      	movs	r3, #0
 800a376:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a378:	2300      	movs	r3, #0
 800a37a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a37c:	f107 031c 	add.w	r3, r7, #28
 800a380:	4619      	mov	r1, r3
 800a382:	480b      	ldr	r0, [pc, #44]	; (800a3b0 <HAL_RCC_MCOConfig+0xd0>)
 800a384:	f7fd fc18 	bl	8007bb8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a388:	4b07      	ldr	r3, [pc, #28]	; (800a3a8 <HAL_RCC_MCOConfig+0xc8>)
 800a38a:	691b      	ldr	r3, [r3, #16]
 800a38c:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	01d9      	lsls	r1, r3, #7
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	430b      	orrs	r3, r1
 800a398:	4903      	ldr	r1, [pc, #12]	; (800a3a8 <HAL_RCC_MCOConfig+0xc8>)
 800a39a:	4313      	orrs	r3, r2
 800a39c:	610b      	str	r3, [r1, #16]
}
 800a39e:	bf00      	nop
 800a3a0:	3730      	adds	r7, #48	; 0x30
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	58024400 	.word	0x58024400
 800a3ac:	58020000 	.word	0x58020000
 800a3b0:	58020800 	.word	0x58020800

0800a3b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b089      	sub	sp, #36	; 0x24
 800a3b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a3ba:	4bb3      	ldr	r3, [pc, #716]	; (800a688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a3bc:	691b      	ldr	r3, [r3, #16]
 800a3be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a3c2:	2b18      	cmp	r3, #24
 800a3c4:	f200 8155 	bhi.w	800a672 <HAL_RCC_GetSysClockFreq+0x2be>
 800a3c8:	a201      	add	r2, pc, #4	; (adr r2, 800a3d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a3ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ce:	bf00      	nop
 800a3d0:	0800a435 	.word	0x0800a435
 800a3d4:	0800a673 	.word	0x0800a673
 800a3d8:	0800a673 	.word	0x0800a673
 800a3dc:	0800a673 	.word	0x0800a673
 800a3e0:	0800a673 	.word	0x0800a673
 800a3e4:	0800a673 	.word	0x0800a673
 800a3e8:	0800a673 	.word	0x0800a673
 800a3ec:	0800a673 	.word	0x0800a673
 800a3f0:	0800a45b 	.word	0x0800a45b
 800a3f4:	0800a673 	.word	0x0800a673
 800a3f8:	0800a673 	.word	0x0800a673
 800a3fc:	0800a673 	.word	0x0800a673
 800a400:	0800a673 	.word	0x0800a673
 800a404:	0800a673 	.word	0x0800a673
 800a408:	0800a673 	.word	0x0800a673
 800a40c:	0800a673 	.word	0x0800a673
 800a410:	0800a461 	.word	0x0800a461
 800a414:	0800a673 	.word	0x0800a673
 800a418:	0800a673 	.word	0x0800a673
 800a41c:	0800a673 	.word	0x0800a673
 800a420:	0800a673 	.word	0x0800a673
 800a424:	0800a673 	.word	0x0800a673
 800a428:	0800a673 	.word	0x0800a673
 800a42c:	0800a673 	.word	0x0800a673
 800a430:	0800a467 	.word	0x0800a467
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a434:	4b94      	ldr	r3, [pc, #592]	; (800a688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f003 0320 	and.w	r3, r3, #32
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d009      	beq.n	800a454 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a440:	4b91      	ldr	r3, [pc, #580]	; (800a688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	08db      	lsrs	r3, r3, #3
 800a446:	f003 0303 	and.w	r3, r3, #3
 800a44a:	4a90      	ldr	r2, [pc, #576]	; (800a68c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a44c:	fa22 f303 	lsr.w	r3, r2, r3
 800a450:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a452:	e111      	b.n	800a678 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a454:	4b8d      	ldr	r3, [pc, #564]	; (800a68c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a456:	61bb      	str	r3, [r7, #24]
      break;
 800a458:	e10e      	b.n	800a678 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a45a:	4b8d      	ldr	r3, [pc, #564]	; (800a690 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a45c:	61bb      	str	r3, [r7, #24]
      break;
 800a45e:	e10b      	b.n	800a678 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a460:	4b8c      	ldr	r3, [pc, #560]	; (800a694 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a462:	61bb      	str	r3, [r7, #24]
      break;
 800a464:	e108      	b.n	800a678 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a466:	4b88      	ldr	r3, [pc, #544]	; (800a688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a46a:	f003 0303 	and.w	r3, r3, #3
 800a46e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a470:	4b85      	ldr	r3, [pc, #532]	; (800a688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a474:	091b      	lsrs	r3, r3, #4
 800a476:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a47a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a47c:	4b82      	ldr	r3, [pc, #520]	; (800a688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a47e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a480:	f003 0301 	and.w	r3, r3, #1
 800a484:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a486:	4b80      	ldr	r3, [pc, #512]	; (800a688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a48a:	08db      	lsrs	r3, r3, #3
 800a48c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a490:	68fa      	ldr	r2, [r7, #12]
 800a492:	fb02 f303 	mul.w	r3, r2, r3
 800a496:	ee07 3a90 	vmov	s15, r3
 800a49a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a49e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	f000 80e1 	beq.w	800a66c <HAL_RCC_GetSysClockFreq+0x2b8>
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	2b02      	cmp	r3, #2
 800a4ae:	f000 8083 	beq.w	800a5b8 <HAL_RCC_GetSysClockFreq+0x204>
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	2b02      	cmp	r3, #2
 800a4b6:	f200 80a1 	bhi.w	800a5fc <HAL_RCC_GetSysClockFreq+0x248>
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d003      	beq.n	800a4c8 <HAL_RCC_GetSysClockFreq+0x114>
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	d056      	beq.n	800a574 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a4c6:	e099      	b.n	800a5fc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4c8:	4b6f      	ldr	r3, [pc, #444]	; (800a688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f003 0320 	and.w	r3, r3, #32
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d02d      	beq.n	800a530 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4d4:	4b6c      	ldr	r3, [pc, #432]	; (800a688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	08db      	lsrs	r3, r3, #3
 800a4da:	f003 0303 	and.w	r3, r3, #3
 800a4de:	4a6b      	ldr	r2, [pc, #428]	; (800a68c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a4e0:	fa22 f303 	lsr.w	r3, r2, r3
 800a4e4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	ee07 3a90 	vmov	s15, r3
 800a4ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	ee07 3a90 	vmov	s15, r3
 800a4f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4fe:	4b62      	ldr	r3, [pc, #392]	; (800a688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a506:	ee07 3a90 	vmov	s15, r3
 800a50a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a50e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a512:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a698 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a51a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a51e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a52a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a52e:	e087      	b.n	800a640 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	ee07 3a90 	vmov	s15, r3
 800a536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a53a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a69c <HAL_RCC_GetSysClockFreq+0x2e8>
 800a53e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a542:	4b51      	ldr	r3, [pc, #324]	; (800a688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a54a:	ee07 3a90 	vmov	s15, r3
 800a54e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a552:	ed97 6a02 	vldr	s12, [r7, #8]
 800a556:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a698 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a55a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a55e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a562:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a56a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a56e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a572:	e065      	b.n	800a640 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	ee07 3a90 	vmov	s15, r3
 800a57a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a57e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a6a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a586:	4b40      	ldr	r3, [pc, #256]	; (800a688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a58a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a58e:	ee07 3a90 	vmov	s15, r3
 800a592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a596:	ed97 6a02 	vldr	s12, [r7, #8]
 800a59a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a698 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a59e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a5b6:	e043      	b.n	800a640 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	ee07 3a90 	vmov	s15, r3
 800a5be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5c2:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a6a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a5c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5ca:	4b2f      	ldr	r3, [pc, #188]	; (800a688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5d2:	ee07 3a90 	vmov	s15, r3
 800a5d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5da:	ed97 6a02 	vldr	s12, [r7, #8]
 800a5de:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a698 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a5e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a5fa:	e021      	b.n	800a640 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	ee07 3a90 	vmov	s15, r3
 800a602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a606:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a6a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a60a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a60e:	4b1e      	ldr	r3, [pc, #120]	; (800a688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a616:	ee07 3a90 	vmov	s15, r3
 800a61a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a61e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a622:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a698 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a62a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a62e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a63a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a63e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a640:	4b11      	ldr	r3, [pc, #68]	; (800a688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a644:	0a5b      	lsrs	r3, r3, #9
 800a646:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a64a:	3301      	adds	r3, #1
 800a64c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	ee07 3a90 	vmov	s15, r3
 800a654:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a658:	edd7 6a07 	vldr	s13, [r7, #28]
 800a65c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a664:	ee17 3a90 	vmov	r3, s15
 800a668:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a66a:	e005      	b.n	800a678 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a66c:	2300      	movs	r3, #0
 800a66e:	61bb      	str	r3, [r7, #24]
      break;
 800a670:	e002      	b.n	800a678 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a672:	4b07      	ldr	r3, [pc, #28]	; (800a690 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a674:	61bb      	str	r3, [r7, #24]
      break;
 800a676:	bf00      	nop
  }

  return sysclockfreq;
 800a678:	69bb      	ldr	r3, [r7, #24]
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3724      	adds	r7, #36	; 0x24
 800a67e:	46bd      	mov	sp, r7
 800a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a684:	4770      	bx	lr
 800a686:	bf00      	nop
 800a688:	58024400 	.word	0x58024400
 800a68c:	03d09000 	.word	0x03d09000
 800a690:	003d0900 	.word	0x003d0900
 800a694:	02faf080 	.word	0x02faf080
 800a698:	46000000 	.word	0x46000000
 800a69c:	4c742400 	.word	0x4c742400
 800a6a0:	4a742400 	.word	0x4a742400
 800a6a4:	4c3ebc20 	.word	0x4c3ebc20

0800a6a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b082      	sub	sp, #8
 800a6ac:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a6ae:	f7ff fe81 	bl	800a3b4 <HAL_RCC_GetSysClockFreq>
 800a6b2:	4602      	mov	r2, r0
 800a6b4:	4b10      	ldr	r3, [pc, #64]	; (800a6f8 <HAL_RCC_GetHCLKFreq+0x50>)
 800a6b6:	699b      	ldr	r3, [r3, #24]
 800a6b8:	0a1b      	lsrs	r3, r3, #8
 800a6ba:	f003 030f 	and.w	r3, r3, #15
 800a6be:	490f      	ldr	r1, [pc, #60]	; (800a6fc <HAL_RCC_GetHCLKFreq+0x54>)
 800a6c0:	5ccb      	ldrb	r3, [r1, r3]
 800a6c2:	f003 031f 	and.w	r3, r3, #31
 800a6c6:	fa22 f303 	lsr.w	r3, r2, r3
 800a6ca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a6cc:	4b0a      	ldr	r3, [pc, #40]	; (800a6f8 <HAL_RCC_GetHCLKFreq+0x50>)
 800a6ce:	699b      	ldr	r3, [r3, #24]
 800a6d0:	f003 030f 	and.w	r3, r3, #15
 800a6d4:	4a09      	ldr	r2, [pc, #36]	; (800a6fc <HAL_RCC_GetHCLKFreq+0x54>)
 800a6d6:	5cd3      	ldrb	r3, [r2, r3]
 800a6d8:	f003 031f 	and.w	r3, r3, #31
 800a6dc:	687a      	ldr	r2, [r7, #4]
 800a6de:	fa22 f303 	lsr.w	r3, r2, r3
 800a6e2:	4a07      	ldr	r2, [pc, #28]	; (800a700 <HAL_RCC_GetHCLKFreq+0x58>)
 800a6e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a6e6:	4a07      	ldr	r2, [pc, #28]	; (800a704 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a6ec:	4b04      	ldr	r3, [pc, #16]	; (800a700 <HAL_RCC_GetHCLKFreq+0x58>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3708      	adds	r7, #8
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}
 800a6f8:	58024400 	.word	0x58024400
 800a6fc:	08017aa0 	.word	0x08017aa0
 800a700:	24000004 	.word	0x24000004
 800a704:	24000000 	.word	0x24000000

0800a708 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a70c:	f7ff ffcc 	bl	800a6a8 <HAL_RCC_GetHCLKFreq>
 800a710:	4602      	mov	r2, r0
 800a712:	4b06      	ldr	r3, [pc, #24]	; (800a72c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a714:	69db      	ldr	r3, [r3, #28]
 800a716:	091b      	lsrs	r3, r3, #4
 800a718:	f003 0307 	and.w	r3, r3, #7
 800a71c:	4904      	ldr	r1, [pc, #16]	; (800a730 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a71e:	5ccb      	ldrb	r3, [r1, r3]
 800a720:	f003 031f 	and.w	r3, r3, #31
 800a724:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a728:	4618      	mov	r0, r3
 800a72a:	bd80      	pop	{r7, pc}
 800a72c:	58024400 	.word	0x58024400
 800a730:	08017aa0 	.word	0x08017aa0

0800a734 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a738:	f7ff ffb6 	bl	800a6a8 <HAL_RCC_GetHCLKFreq>
 800a73c:	4602      	mov	r2, r0
 800a73e:	4b06      	ldr	r3, [pc, #24]	; (800a758 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a740:	69db      	ldr	r3, [r3, #28]
 800a742:	0a1b      	lsrs	r3, r3, #8
 800a744:	f003 0307 	and.w	r3, r3, #7
 800a748:	4904      	ldr	r1, [pc, #16]	; (800a75c <HAL_RCC_GetPCLK2Freq+0x28>)
 800a74a:	5ccb      	ldrb	r3, [r1, r3]
 800a74c:	f003 031f 	and.w	r3, r3, #31
 800a750:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a754:	4618      	mov	r0, r3
 800a756:	bd80      	pop	{r7, pc}
 800a758:	58024400 	.word	0x58024400
 800a75c:	08017aa0 	.word	0x08017aa0

0800a760 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a764:	b0c6      	sub	sp, #280	; 0x118
 800a766:	af00      	add	r7, sp, #0
 800a768:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a76c:	2300      	movs	r3, #0
 800a76e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a772:	2300      	movs	r3, #0
 800a774:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a778:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a780:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a784:	2500      	movs	r5, #0
 800a786:	ea54 0305 	orrs.w	r3, r4, r5
 800a78a:	d049      	beq.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a78c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a790:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a792:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a796:	d02f      	beq.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a798:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a79c:	d828      	bhi.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a79e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7a2:	d01a      	beq.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a7a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7a8:	d822      	bhi.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d003      	beq.n	800a7b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a7ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7b2:	d007      	beq.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a7b4:	e01c      	b.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7b6:	4bab      	ldr	r3, [pc, #684]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a7b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ba:	4aaa      	ldr	r2, [pc, #680]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a7bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a7c2:	e01a      	b.n	800a7fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a7c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7c8:	3308      	adds	r3, #8
 800a7ca:	2102      	movs	r1, #2
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f002 fa49 	bl	800cc64 <RCCEx_PLL2_Config>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a7d8:	e00f      	b.n	800a7fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a7da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7de:	3328      	adds	r3, #40	; 0x28
 800a7e0:	2102      	movs	r1, #2
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f002 faf0 	bl	800cdc8 <RCCEx_PLL3_Config>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a7ee:	e004      	b.n	800a7fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a7f6:	e000      	b.n	800a7fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a7f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7fa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d10a      	bne.n	800a818 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a802:	4b98      	ldr	r3, [pc, #608]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a806:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a80a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a80e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a810:	4a94      	ldr	r2, [pc, #592]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a812:	430b      	orrs	r3, r1
 800a814:	6513      	str	r3, [r2, #80]	; 0x50
 800a816:	e003      	b.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a818:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a81c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a820:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a828:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800a82c:	f04f 0900 	mov.w	r9, #0
 800a830:	ea58 0309 	orrs.w	r3, r8, r9
 800a834:	d047      	beq.n	800a8c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a836:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a83a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a83c:	2b04      	cmp	r3, #4
 800a83e:	d82a      	bhi.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a840:	a201      	add	r2, pc, #4	; (adr r2, 800a848 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a846:	bf00      	nop
 800a848:	0800a85d 	.word	0x0800a85d
 800a84c:	0800a86b 	.word	0x0800a86b
 800a850:	0800a881 	.word	0x0800a881
 800a854:	0800a89f 	.word	0x0800a89f
 800a858:	0800a89f 	.word	0x0800a89f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a85c:	4b81      	ldr	r3, [pc, #516]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a85e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a860:	4a80      	ldr	r2, [pc, #512]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a862:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a866:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a868:	e01a      	b.n	800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a86a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a86e:	3308      	adds	r3, #8
 800a870:	2100      	movs	r1, #0
 800a872:	4618      	mov	r0, r3
 800a874:	f002 f9f6 	bl	800cc64 <RCCEx_PLL2_Config>
 800a878:	4603      	mov	r3, r0
 800a87a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a87e:	e00f      	b.n	800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a884:	3328      	adds	r3, #40	; 0x28
 800a886:	2100      	movs	r1, #0
 800a888:	4618      	mov	r0, r3
 800a88a:	f002 fa9d 	bl	800cdc8 <RCCEx_PLL3_Config>
 800a88e:	4603      	mov	r3, r0
 800a890:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a894:	e004      	b.n	800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a896:	2301      	movs	r3, #1
 800a898:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a89c:	e000      	b.n	800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a89e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d10a      	bne.n	800a8be <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a8a8:	4b6e      	ldr	r3, [pc, #440]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a8aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8ac:	f023 0107 	bic.w	r1, r3, #7
 800a8b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8b6:	4a6b      	ldr	r2, [pc, #428]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a8b8:	430b      	orrs	r3, r1
 800a8ba:	6513      	str	r3, [r2, #80]	; 0x50
 800a8bc:	e003      	b.n	800a8c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a8c2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a8c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ce:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800a8d2:	f04f 0b00 	mov.w	fp, #0
 800a8d6:	ea5a 030b 	orrs.w	r3, sl, fp
 800a8da:	d05b      	beq.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a8dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a8e4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a8e8:	d03b      	beq.n	800a962 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a8ea:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a8ee:	d834      	bhi.n	800a95a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a8f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a8f4:	d037      	beq.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a8f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a8fa:	d82e      	bhi.n	800a95a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a8fc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a900:	d033      	beq.n	800a96a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a902:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a906:	d828      	bhi.n	800a95a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a908:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a90c:	d01a      	beq.n	800a944 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800a90e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a912:	d822      	bhi.n	800a95a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a914:	2b00      	cmp	r3, #0
 800a916:	d003      	beq.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800a918:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a91c:	d007      	beq.n	800a92e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800a91e:	e01c      	b.n	800a95a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a920:	4b50      	ldr	r3, [pc, #320]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a924:	4a4f      	ldr	r2, [pc, #316]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a926:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a92a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a92c:	e01e      	b.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a92e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a932:	3308      	adds	r3, #8
 800a934:	2100      	movs	r1, #0
 800a936:	4618      	mov	r0, r3
 800a938:	f002 f994 	bl	800cc64 <RCCEx_PLL2_Config>
 800a93c:	4603      	mov	r3, r0
 800a93e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a942:	e013      	b.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a944:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a948:	3328      	adds	r3, #40	; 0x28
 800a94a:	2100      	movs	r1, #0
 800a94c:	4618      	mov	r0, r3
 800a94e:	f002 fa3b 	bl	800cdc8 <RCCEx_PLL3_Config>
 800a952:	4603      	mov	r3, r0
 800a954:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a958:	e008      	b.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a95a:	2301      	movs	r3, #1
 800a95c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a960:	e004      	b.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a962:	bf00      	nop
 800a964:	e002      	b.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a966:	bf00      	nop
 800a968:	e000      	b.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a96a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a96c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a970:	2b00      	cmp	r3, #0
 800a972:	d10b      	bne.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a974:	4b3b      	ldr	r3, [pc, #236]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a978:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800a97c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a980:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a984:	4a37      	ldr	r2, [pc, #220]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a986:	430b      	orrs	r3, r1
 800a988:	6593      	str	r3, [r2, #88]	; 0x58
 800a98a:	e003      	b.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a98c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a990:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a994:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a99c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800a9a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a9aa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800a9ae:	460b      	mov	r3, r1
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	d05d      	beq.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a9b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a9bc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a9c0:	d03b      	beq.n	800aa3a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800a9c2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a9c6:	d834      	bhi.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a9c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a9cc:	d037      	beq.n	800aa3e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800a9ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a9d2:	d82e      	bhi.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a9d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a9d8:	d033      	beq.n	800aa42 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800a9da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a9de:	d828      	bhi.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a9e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a9e4:	d01a      	beq.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800a9e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a9ea:	d822      	bhi.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d003      	beq.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a9f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a9f4:	d007      	beq.n	800aa06 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a9f6:	e01c      	b.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9f8:	4b1a      	ldr	r3, [pc, #104]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a9fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9fc:	4a19      	ldr	r2, [pc, #100]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a9fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa04:	e01e      	b.n	800aa44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa0a:	3308      	adds	r3, #8
 800aa0c:	2100      	movs	r1, #0
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f002 f928 	bl	800cc64 <RCCEx_PLL2_Config>
 800aa14:	4603      	mov	r3, r0
 800aa16:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800aa1a:	e013      	b.n	800aa44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa20:	3328      	adds	r3, #40	; 0x28
 800aa22:	2100      	movs	r1, #0
 800aa24:	4618      	mov	r0, r3
 800aa26:	f002 f9cf 	bl	800cdc8 <RCCEx_PLL3_Config>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa30:	e008      	b.n	800aa44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800aa32:	2301      	movs	r3, #1
 800aa34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aa38:	e004      	b.n	800aa44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800aa3a:	bf00      	nop
 800aa3c:	e002      	b.n	800aa44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800aa3e:	bf00      	nop
 800aa40:	e000      	b.n	800aa44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800aa42:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa44:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d10d      	bne.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800aa4c:	4b05      	ldr	r3, [pc, #20]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa50:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800aa54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa58:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aa5c:	4a01      	ldr	r2, [pc, #4]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa5e:	430b      	orrs	r3, r1
 800aa60:	6593      	str	r3, [r2, #88]	; 0x58
 800aa62:	e005      	b.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800aa64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa6c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800aa70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa78:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800aa7c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800aa80:	2300      	movs	r3, #0
 800aa82:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800aa86:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800aa8a:	460b      	mov	r3, r1
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	d03a      	beq.n	800ab06 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800aa90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa96:	2b30      	cmp	r3, #48	; 0x30
 800aa98:	d01f      	beq.n	800aada <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800aa9a:	2b30      	cmp	r3, #48	; 0x30
 800aa9c:	d819      	bhi.n	800aad2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800aa9e:	2b20      	cmp	r3, #32
 800aaa0:	d00c      	beq.n	800aabc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800aaa2:	2b20      	cmp	r3, #32
 800aaa4:	d815      	bhi.n	800aad2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d019      	beq.n	800aade <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800aaaa:	2b10      	cmp	r3, #16
 800aaac:	d111      	bne.n	800aad2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aaae:	4baa      	ldr	r3, [pc, #680]	; (800ad58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aab2:	4aa9      	ldr	r2, [pc, #676]	; (800ad58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aab8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800aaba:	e011      	b.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aabc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aac0:	3308      	adds	r3, #8
 800aac2:	2102      	movs	r1, #2
 800aac4:	4618      	mov	r0, r3
 800aac6:	f002 f8cd 	bl	800cc64 <RCCEx_PLL2_Config>
 800aaca:	4603      	mov	r3, r0
 800aacc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800aad0:	e006      	b.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800aad2:	2301      	movs	r3, #1
 800aad4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aad8:	e002      	b.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800aada:	bf00      	nop
 800aadc:	e000      	b.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800aade:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aae0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d10a      	bne.n	800aafe <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800aae8:	4b9b      	ldr	r3, [pc, #620]	; (800ad58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aaea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aaec:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800aaf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aaf6:	4a98      	ldr	r2, [pc, #608]	; (800ad58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aaf8:	430b      	orrs	r3, r1
 800aafa:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aafc:	e003      	b.n	800ab06 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aafe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab02:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ab06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab0e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800ab12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ab16:	2300      	movs	r3, #0
 800ab18:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ab1c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800ab20:	460b      	mov	r3, r1
 800ab22:	4313      	orrs	r3, r2
 800ab24:	d051      	beq.n	800abca <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ab26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab30:	d035      	beq.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800ab32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab36:	d82e      	bhi.n	800ab96 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ab38:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ab3c:	d031      	beq.n	800aba2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800ab3e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ab42:	d828      	bhi.n	800ab96 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ab44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab48:	d01a      	beq.n	800ab80 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800ab4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab4e:	d822      	bhi.n	800ab96 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d003      	beq.n	800ab5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800ab54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab58:	d007      	beq.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800ab5a:	e01c      	b.n	800ab96 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab5c:	4b7e      	ldr	r3, [pc, #504]	; (800ad58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ab5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab60:	4a7d      	ldr	r2, [pc, #500]	; (800ad58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ab62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ab68:	e01c      	b.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab6e:	3308      	adds	r3, #8
 800ab70:	2100      	movs	r1, #0
 800ab72:	4618      	mov	r0, r3
 800ab74:	f002 f876 	bl	800cc64 <RCCEx_PLL2_Config>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ab7e:	e011      	b.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab84:	3328      	adds	r3, #40	; 0x28
 800ab86:	2100      	movs	r1, #0
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f002 f91d 	bl	800cdc8 <RCCEx_PLL3_Config>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ab94:	e006      	b.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab96:	2301      	movs	r3, #1
 800ab98:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ab9c:	e002      	b.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800ab9e:	bf00      	nop
 800aba0:	e000      	b.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800aba2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aba4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d10a      	bne.n	800abc2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800abac:	4b6a      	ldr	r3, [pc, #424]	; (800ad58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800abae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abb0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800abb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abba:	4a67      	ldr	r2, [pc, #412]	; (800ad58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800abbc:	430b      	orrs	r3, r1
 800abbe:	6513      	str	r3, [r2, #80]	; 0x50
 800abc0:	e003      	b.n	800abca <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abc2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800abc6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800abca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800abd6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800abda:	2300      	movs	r3, #0
 800abdc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800abe0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800abe4:	460b      	mov	r3, r1
 800abe6:	4313      	orrs	r3, r2
 800abe8:	d053      	beq.n	800ac92 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800abea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800abf4:	d033      	beq.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800abf6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800abfa:	d82c      	bhi.n	800ac56 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800abfc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ac00:	d02f      	beq.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800ac02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ac06:	d826      	bhi.n	800ac56 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ac08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ac0c:	d02b      	beq.n	800ac66 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800ac0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ac12:	d820      	bhi.n	800ac56 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ac14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac18:	d012      	beq.n	800ac40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800ac1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac1e:	d81a      	bhi.n	800ac56 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d022      	beq.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800ac24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac28:	d115      	bne.n	800ac56 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ac2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac2e:	3308      	adds	r3, #8
 800ac30:	2101      	movs	r1, #1
 800ac32:	4618      	mov	r0, r3
 800ac34:	f002 f816 	bl	800cc64 <RCCEx_PLL2_Config>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ac3e:	e015      	b.n	800ac6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ac40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac44:	3328      	adds	r3, #40	; 0x28
 800ac46:	2101      	movs	r1, #1
 800ac48:	4618      	mov	r0, r3
 800ac4a:	f002 f8bd 	bl	800cdc8 <RCCEx_PLL3_Config>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ac54:	e00a      	b.n	800ac6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac56:	2301      	movs	r3, #1
 800ac58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ac5c:	e006      	b.n	800ac6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ac5e:	bf00      	nop
 800ac60:	e004      	b.n	800ac6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ac62:	bf00      	nop
 800ac64:	e002      	b.n	800ac6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ac66:	bf00      	nop
 800ac68:	e000      	b.n	800ac6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ac6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac6c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d10a      	bne.n	800ac8a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ac74:	4b38      	ldr	r3, [pc, #224]	; (800ad58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac78:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800ac7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac82:	4a35      	ldr	r2, [pc, #212]	; (800ad58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac84:	430b      	orrs	r3, r1
 800ac86:	6513      	str	r3, [r2, #80]	; 0x50
 800ac88:	e003      	b.n	800ac92 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac8a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac8e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ac92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac9a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800ac9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aca2:	2300      	movs	r3, #0
 800aca4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800aca8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800acac:	460b      	mov	r3, r1
 800acae:	4313      	orrs	r3, r2
 800acb0:	d058      	beq.n	800ad64 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800acb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acb6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800acba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800acbe:	d033      	beq.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800acc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800acc4:	d82c      	bhi.n	800ad20 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800acc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acca:	d02f      	beq.n	800ad2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800accc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acd0:	d826      	bhi.n	800ad20 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800acd2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800acd6:	d02b      	beq.n	800ad30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800acd8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800acdc:	d820      	bhi.n	800ad20 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800acde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ace2:	d012      	beq.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800ace4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ace8:	d81a      	bhi.n	800ad20 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800acea:	2b00      	cmp	r3, #0
 800acec:	d022      	beq.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800acee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800acf2:	d115      	bne.n	800ad20 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800acf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acf8:	3308      	adds	r3, #8
 800acfa:	2101      	movs	r1, #1
 800acfc:	4618      	mov	r0, r3
 800acfe:	f001 ffb1 	bl	800cc64 <RCCEx_PLL2_Config>
 800ad02:	4603      	mov	r3, r0
 800ad04:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ad08:	e015      	b.n	800ad36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad0e:	3328      	adds	r3, #40	; 0x28
 800ad10:	2101      	movs	r1, #1
 800ad12:	4618      	mov	r0, r3
 800ad14:	f002 f858 	bl	800cdc8 <RCCEx_PLL3_Config>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ad1e:	e00a      	b.n	800ad36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ad20:	2301      	movs	r3, #1
 800ad22:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ad26:	e006      	b.n	800ad36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ad28:	bf00      	nop
 800ad2a:	e004      	b.n	800ad36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ad2c:	bf00      	nop
 800ad2e:	e002      	b.n	800ad36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ad30:	bf00      	nop
 800ad32:	e000      	b.n	800ad36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ad34:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad36:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d10e      	bne.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ad3e:	4b06      	ldr	r3, [pc, #24]	; (800ad58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ad40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad42:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800ad46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad4a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ad4e:	4a02      	ldr	r2, [pc, #8]	; (800ad58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ad50:	430b      	orrs	r3, r1
 800ad52:	6593      	str	r3, [r2, #88]	; 0x58
 800ad54:	e006      	b.n	800ad64 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800ad56:	bf00      	nop
 800ad58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad60:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ad64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad6c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800ad70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ad74:	2300      	movs	r3, #0
 800ad76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ad7a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800ad7e:	460b      	mov	r3, r1
 800ad80:	4313      	orrs	r3, r2
 800ad82:	d037      	beq.n	800adf4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800ad84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad8e:	d00e      	beq.n	800adae <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800ad90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad94:	d816      	bhi.n	800adc4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d018      	beq.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800ad9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad9e:	d111      	bne.n	800adc4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ada0:	4bc4      	ldr	r3, [pc, #784]	; (800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ada2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ada4:	4ac3      	ldr	r2, [pc, #780]	; (800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ada6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800adaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800adac:	e00f      	b.n	800adce <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800adae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adb2:	3308      	adds	r3, #8
 800adb4:	2101      	movs	r1, #1
 800adb6:	4618      	mov	r0, r3
 800adb8:	f001 ff54 	bl	800cc64 <RCCEx_PLL2_Config>
 800adbc:	4603      	mov	r3, r0
 800adbe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800adc2:	e004      	b.n	800adce <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800adc4:	2301      	movs	r3, #1
 800adc6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800adca:	e000      	b.n	800adce <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800adcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800adce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800add2:	2b00      	cmp	r3, #0
 800add4:	d10a      	bne.n	800adec <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800add6:	4bb7      	ldr	r3, [pc, #732]	; (800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800add8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adda:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800adde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ade2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ade4:	4ab3      	ldr	r2, [pc, #716]	; (800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ade6:	430b      	orrs	r3, r1
 800ade8:	6513      	str	r3, [r2, #80]	; 0x50
 800adea:	e003      	b.n	800adf4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800adf0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800adf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adfc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800ae00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ae04:	2300      	movs	r3, #0
 800ae06:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ae0a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800ae0e:	460b      	mov	r3, r1
 800ae10:	4313      	orrs	r3, r2
 800ae12:	d039      	beq.n	800ae88 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800ae14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae1a:	2b03      	cmp	r3, #3
 800ae1c:	d81c      	bhi.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800ae1e:	a201      	add	r2, pc, #4	; (adr r2, 800ae24 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800ae20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae24:	0800ae61 	.word	0x0800ae61
 800ae28:	0800ae35 	.word	0x0800ae35
 800ae2c:	0800ae43 	.word	0x0800ae43
 800ae30:	0800ae61 	.word	0x0800ae61
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae34:	4b9f      	ldr	r3, [pc, #636]	; (800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae38:	4a9e      	ldr	r2, [pc, #632]	; (800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ae40:	e00f      	b.n	800ae62 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae46:	3308      	adds	r3, #8
 800ae48:	2102      	movs	r1, #2
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f001 ff0a 	bl	800cc64 <RCCEx_PLL2_Config>
 800ae50:	4603      	mov	r3, r0
 800ae52:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ae56:	e004      	b.n	800ae62 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ae58:	2301      	movs	r3, #1
 800ae5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ae5e:	e000      	b.n	800ae62 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800ae60:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae62:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d10a      	bne.n	800ae80 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ae6a:	4b92      	ldr	r3, [pc, #584]	; (800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae6e:	f023 0103 	bic.w	r1, r3, #3
 800ae72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae78:	4a8e      	ldr	r2, [pc, #568]	; (800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae7a:	430b      	orrs	r3, r1
 800ae7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ae7e:	e003      	b.n	800ae88 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae80:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae84:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ae88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae90:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800ae94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ae98:	2300      	movs	r3, #0
 800ae9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ae9e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800aea2:	460b      	mov	r3, r1
 800aea4:	4313      	orrs	r3, r2
 800aea6:	f000 8099 	beq.w	800afdc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800aeaa:	4b83      	ldr	r3, [pc, #524]	; (800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4a82      	ldr	r2, [pc, #520]	; (800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800aeb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aeb4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aeb6:	f7f8 fd81 	bl	80039bc <HAL_GetTick>
 800aeba:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aebe:	e00b      	b.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aec0:	f7f8 fd7c 	bl	80039bc <HAL_GetTick>
 800aec4:	4602      	mov	r2, r0
 800aec6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800aeca:	1ad3      	subs	r3, r2, r3
 800aecc:	2b64      	cmp	r3, #100	; 0x64
 800aece:	d903      	bls.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800aed0:	2303      	movs	r3, #3
 800aed2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aed6:	e005      	b.n	800aee4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aed8:	4b77      	ldr	r3, [pc, #476]	; (800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d0ed      	beq.n	800aec0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800aee4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d173      	bne.n	800afd4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800aeec:	4b71      	ldr	r3, [pc, #452]	; (800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aeee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800aef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aef4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aef8:	4053      	eors	r3, r2
 800aefa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d015      	beq.n	800af2e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800af02:	4b6c      	ldr	r3, [pc, #432]	; (800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af0a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800af0e:	4b69      	ldr	r3, [pc, #420]	; (800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af12:	4a68      	ldr	r2, [pc, #416]	; (800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af18:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800af1a:	4b66      	ldr	r3, [pc, #408]	; (800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af1e:	4a65      	ldr	r2, [pc, #404]	; (800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af24:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800af26:	4a63      	ldr	r2, [pc, #396]	; (800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800af2c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800af2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800af36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af3a:	d118      	bne.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af3c:	f7f8 fd3e 	bl	80039bc <HAL_GetTick>
 800af40:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af44:	e00d      	b.n	800af62 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af46:	f7f8 fd39 	bl	80039bc <HAL_GetTick>
 800af4a:	4602      	mov	r2, r0
 800af4c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800af50:	1ad2      	subs	r2, r2, r3
 800af52:	f241 3388 	movw	r3, #5000	; 0x1388
 800af56:	429a      	cmp	r2, r3
 800af58:	d903      	bls.n	800af62 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800af5a:	2303      	movs	r3, #3
 800af5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800af60:	e005      	b.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af62:	4b54      	ldr	r3, [pc, #336]	; (800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af66:	f003 0302 	and.w	r3, r3, #2
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d0eb      	beq.n	800af46 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800af6e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af72:	2b00      	cmp	r3, #0
 800af74:	d129      	bne.n	800afca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800af76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800af7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af86:	d10e      	bne.n	800afa6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800af88:	4b4a      	ldr	r3, [pc, #296]	; (800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af8a:	691b      	ldr	r3, [r3, #16]
 800af8c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800af90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800af98:	091a      	lsrs	r2, r3, #4
 800af9a:	4b48      	ldr	r3, [pc, #288]	; (800b0bc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800af9c:	4013      	ands	r3, r2
 800af9e:	4a45      	ldr	r2, [pc, #276]	; (800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afa0:	430b      	orrs	r3, r1
 800afa2:	6113      	str	r3, [r2, #16]
 800afa4:	e005      	b.n	800afb2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800afa6:	4b43      	ldr	r3, [pc, #268]	; (800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afa8:	691b      	ldr	r3, [r3, #16]
 800afaa:	4a42      	ldr	r2, [pc, #264]	; (800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800afb0:	6113      	str	r3, [r2, #16]
 800afb2:	4b40      	ldr	r3, [pc, #256]	; (800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afb4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800afb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800afbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800afc2:	4a3c      	ldr	r2, [pc, #240]	; (800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afc4:	430b      	orrs	r3, r1
 800afc6:	6713      	str	r3, [r2, #112]	; 0x70
 800afc8:	e008      	b.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800afca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800afce:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800afd2:	e003      	b.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afd4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800afd8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800afdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe4:	f002 0301 	and.w	r3, r2, #1
 800afe8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800afec:	2300      	movs	r3, #0
 800afee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800aff2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800aff6:	460b      	mov	r3, r1
 800aff8:	4313      	orrs	r3, r2
 800affa:	f000 808f 	beq.w	800b11c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800affe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b002:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b004:	2b28      	cmp	r3, #40	; 0x28
 800b006:	d871      	bhi.n	800b0ec <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b008:	a201      	add	r2, pc, #4	; (adr r2, 800b010 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800b00a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b00e:	bf00      	nop
 800b010:	0800b0f5 	.word	0x0800b0f5
 800b014:	0800b0ed 	.word	0x0800b0ed
 800b018:	0800b0ed 	.word	0x0800b0ed
 800b01c:	0800b0ed 	.word	0x0800b0ed
 800b020:	0800b0ed 	.word	0x0800b0ed
 800b024:	0800b0ed 	.word	0x0800b0ed
 800b028:	0800b0ed 	.word	0x0800b0ed
 800b02c:	0800b0ed 	.word	0x0800b0ed
 800b030:	0800b0c1 	.word	0x0800b0c1
 800b034:	0800b0ed 	.word	0x0800b0ed
 800b038:	0800b0ed 	.word	0x0800b0ed
 800b03c:	0800b0ed 	.word	0x0800b0ed
 800b040:	0800b0ed 	.word	0x0800b0ed
 800b044:	0800b0ed 	.word	0x0800b0ed
 800b048:	0800b0ed 	.word	0x0800b0ed
 800b04c:	0800b0ed 	.word	0x0800b0ed
 800b050:	0800b0d7 	.word	0x0800b0d7
 800b054:	0800b0ed 	.word	0x0800b0ed
 800b058:	0800b0ed 	.word	0x0800b0ed
 800b05c:	0800b0ed 	.word	0x0800b0ed
 800b060:	0800b0ed 	.word	0x0800b0ed
 800b064:	0800b0ed 	.word	0x0800b0ed
 800b068:	0800b0ed 	.word	0x0800b0ed
 800b06c:	0800b0ed 	.word	0x0800b0ed
 800b070:	0800b0f5 	.word	0x0800b0f5
 800b074:	0800b0ed 	.word	0x0800b0ed
 800b078:	0800b0ed 	.word	0x0800b0ed
 800b07c:	0800b0ed 	.word	0x0800b0ed
 800b080:	0800b0ed 	.word	0x0800b0ed
 800b084:	0800b0ed 	.word	0x0800b0ed
 800b088:	0800b0ed 	.word	0x0800b0ed
 800b08c:	0800b0ed 	.word	0x0800b0ed
 800b090:	0800b0f5 	.word	0x0800b0f5
 800b094:	0800b0ed 	.word	0x0800b0ed
 800b098:	0800b0ed 	.word	0x0800b0ed
 800b09c:	0800b0ed 	.word	0x0800b0ed
 800b0a0:	0800b0ed 	.word	0x0800b0ed
 800b0a4:	0800b0ed 	.word	0x0800b0ed
 800b0a8:	0800b0ed 	.word	0x0800b0ed
 800b0ac:	0800b0ed 	.word	0x0800b0ed
 800b0b0:	0800b0f5 	.word	0x0800b0f5
 800b0b4:	58024400 	.word	0x58024400
 800b0b8:	58024800 	.word	0x58024800
 800b0bc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b0c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0c4:	3308      	adds	r3, #8
 800b0c6:	2101      	movs	r1, #1
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f001 fdcb 	bl	800cc64 <RCCEx_PLL2_Config>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b0d4:	e00f      	b.n	800b0f6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b0d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0da:	3328      	adds	r3, #40	; 0x28
 800b0dc:	2101      	movs	r1, #1
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f001 fe72 	bl	800cdc8 <RCCEx_PLL3_Config>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b0ea:	e004      	b.n	800b0f6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b0f2:	e000      	b.n	800b0f6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800b0f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d10a      	bne.n	800b114 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b0fe:	4bbf      	ldr	r3, [pc, #764]	; (800b3fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b102:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b106:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b10a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b10c:	4abb      	ldr	r2, [pc, #748]	; (800b3fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b10e:	430b      	orrs	r3, r1
 800b110:	6553      	str	r3, [r2, #84]	; 0x54
 800b112:	e003      	b.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b114:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b118:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b11c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b124:	f002 0302 	and.w	r3, r2, #2
 800b128:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b12c:	2300      	movs	r3, #0
 800b12e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b132:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b136:	460b      	mov	r3, r1
 800b138:	4313      	orrs	r3, r2
 800b13a:	d041      	beq.n	800b1c0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b13c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b142:	2b05      	cmp	r3, #5
 800b144:	d824      	bhi.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800b146:	a201      	add	r2, pc, #4	; (adr r2, 800b14c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800b148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b14c:	0800b199 	.word	0x0800b199
 800b150:	0800b165 	.word	0x0800b165
 800b154:	0800b17b 	.word	0x0800b17b
 800b158:	0800b199 	.word	0x0800b199
 800b15c:	0800b199 	.word	0x0800b199
 800b160:	0800b199 	.word	0x0800b199
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b168:	3308      	adds	r3, #8
 800b16a:	2101      	movs	r1, #1
 800b16c:	4618      	mov	r0, r3
 800b16e:	f001 fd79 	bl	800cc64 <RCCEx_PLL2_Config>
 800b172:	4603      	mov	r3, r0
 800b174:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b178:	e00f      	b.n	800b19a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b17a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b17e:	3328      	adds	r3, #40	; 0x28
 800b180:	2101      	movs	r1, #1
 800b182:	4618      	mov	r0, r3
 800b184:	f001 fe20 	bl	800cdc8 <RCCEx_PLL3_Config>
 800b188:	4603      	mov	r3, r0
 800b18a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b18e:	e004      	b.n	800b19a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b190:	2301      	movs	r3, #1
 800b192:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b196:	e000      	b.n	800b19a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800b198:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b19a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d10a      	bne.n	800b1b8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b1a2:	4b96      	ldr	r3, [pc, #600]	; (800b3fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b1a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1a6:	f023 0107 	bic.w	r1, r3, #7
 800b1aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1b0:	4a92      	ldr	r2, [pc, #584]	; (800b3fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b1b2:	430b      	orrs	r3, r1
 800b1b4:	6553      	str	r3, [r2, #84]	; 0x54
 800b1b6:	e003      	b.n	800b1c0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1bc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b1c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c8:	f002 0304 	and.w	r3, r2, #4
 800b1cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b1d6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b1da:	460b      	mov	r3, r1
 800b1dc:	4313      	orrs	r3, r2
 800b1de:	d044      	beq.n	800b26a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b1e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1e8:	2b05      	cmp	r3, #5
 800b1ea:	d825      	bhi.n	800b238 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800b1ec:	a201      	add	r2, pc, #4	; (adr r2, 800b1f4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800b1ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1f2:	bf00      	nop
 800b1f4:	0800b241 	.word	0x0800b241
 800b1f8:	0800b20d 	.word	0x0800b20d
 800b1fc:	0800b223 	.word	0x0800b223
 800b200:	0800b241 	.word	0x0800b241
 800b204:	0800b241 	.word	0x0800b241
 800b208:	0800b241 	.word	0x0800b241
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b20c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b210:	3308      	adds	r3, #8
 800b212:	2101      	movs	r1, #1
 800b214:	4618      	mov	r0, r3
 800b216:	f001 fd25 	bl	800cc64 <RCCEx_PLL2_Config>
 800b21a:	4603      	mov	r3, r0
 800b21c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b220:	e00f      	b.n	800b242 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b222:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b226:	3328      	adds	r3, #40	; 0x28
 800b228:	2101      	movs	r1, #1
 800b22a:	4618      	mov	r0, r3
 800b22c:	f001 fdcc 	bl	800cdc8 <RCCEx_PLL3_Config>
 800b230:	4603      	mov	r3, r0
 800b232:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b236:	e004      	b.n	800b242 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b238:	2301      	movs	r3, #1
 800b23a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b23e:	e000      	b.n	800b242 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800b240:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b242:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b246:	2b00      	cmp	r3, #0
 800b248:	d10b      	bne.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b24a:	4b6c      	ldr	r3, [pc, #432]	; (800b3fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b24c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b24e:	f023 0107 	bic.w	r1, r3, #7
 800b252:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b25a:	4a68      	ldr	r2, [pc, #416]	; (800b3fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b25c:	430b      	orrs	r3, r1
 800b25e:	6593      	str	r3, [r2, #88]	; 0x58
 800b260:	e003      	b.n	800b26a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b262:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b266:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b26a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b272:	f002 0320 	and.w	r3, r2, #32
 800b276:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b27a:	2300      	movs	r3, #0
 800b27c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b280:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b284:	460b      	mov	r3, r1
 800b286:	4313      	orrs	r3, r2
 800b288:	d055      	beq.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b28a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b28e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b292:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b296:	d033      	beq.n	800b300 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800b298:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b29c:	d82c      	bhi.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b29e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2a2:	d02f      	beq.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b2a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2a8:	d826      	bhi.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b2aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b2ae:	d02b      	beq.n	800b308 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b2b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b2b4:	d820      	bhi.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b2b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2ba:	d012      	beq.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800b2bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2c0:	d81a      	bhi.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d022      	beq.n	800b30c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b2c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2ca:	d115      	bne.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b2cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2d0:	3308      	adds	r3, #8
 800b2d2:	2100      	movs	r1, #0
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f001 fcc5 	bl	800cc64 <RCCEx_PLL2_Config>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b2e0:	e015      	b.n	800b30e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b2e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2e6:	3328      	adds	r3, #40	; 0x28
 800b2e8:	2102      	movs	r1, #2
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f001 fd6c 	bl	800cdc8 <RCCEx_PLL3_Config>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b2f6:	e00a      	b.n	800b30e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b2fe:	e006      	b.n	800b30e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b300:	bf00      	nop
 800b302:	e004      	b.n	800b30e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b304:	bf00      	nop
 800b306:	e002      	b.n	800b30e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b308:	bf00      	nop
 800b30a:	e000      	b.n	800b30e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b30c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b30e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b312:	2b00      	cmp	r3, #0
 800b314:	d10b      	bne.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b316:	4b39      	ldr	r3, [pc, #228]	; (800b3fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b31a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b31e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b322:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b326:	4a35      	ldr	r2, [pc, #212]	; (800b3fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b328:	430b      	orrs	r3, r1
 800b32a:	6553      	str	r3, [r2, #84]	; 0x54
 800b32c:	e003      	b.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b32e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b332:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b336:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b33e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b342:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b346:	2300      	movs	r3, #0
 800b348:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b34c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b350:	460b      	mov	r3, r1
 800b352:	4313      	orrs	r3, r2
 800b354:	d058      	beq.n	800b408 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b356:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b35a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b35e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b362:	d033      	beq.n	800b3cc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b364:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b368:	d82c      	bhi.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b36a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b36e:	d02f      	beq.n	800b3d0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b370:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b374:	d826      	bhi.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b376:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b37a:	d02b      	beq.n	800b3d4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b37c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b380:	d820      	bhi.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b382:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b386:	d012      	beq.n	800b3ae <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800b388:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b38c:	d81a      	bhi.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d022      	beq.n	800b3d8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b396:	d115      	bne.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b398:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b39c:	3308      	adds	r3, #8
 800b39e:	2100      	movs	r1, #0
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f001 fc5f 	bl	800cc64 <RCCEx_PLL2_Config>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b3ac:	e015      	b.n	800b3da <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b3ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3b2:	3328      	adds	r3, #40	; 0x28
 800b3b4:	2102      	movs	r1, #2
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f001 fd06 	bl	800cdc8 <RCCEx_PLL3_Config>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b3c2:	e00a      	b.n	800b3da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b3ca:	e006      	b.n	800b3da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b3cc:	bf00      	nop
 800b3ce:	e004      	b.n	800b3da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b3d0:	bf00      	nop
 800b3d2:	e002      	b.n	800b3da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b3d4:	bf00      	nop
 800b3d6:	e000      	b.n	800b3da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b3d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d10e      	bne.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b3e2:	4b06      	ldr	r3, [pc, #24]	; (800b3fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b3e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3e6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b3ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b3f2:	4a02      	ldr	r2, [pc, #8]	; (800b3fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b3f4:	430b      	orrs	r3, r1
 800b3f6:	6593      	str	r3, [r2, #88]	; 0x58
 800b3f8:	e006      	b.n	800b408 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800b3fa:	bf00      	nop
 800b3fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b400:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b404:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b410:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b414:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b418:	2300      	movs	r3, #0
 800b41a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b41e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b422:	460b      	mov	r3, r1
 800b424:	4313      	orrs	r3, r2
 800b426:	d055      	beq.n	800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b428:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b42c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b430:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b434:	d033      	beq.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800b436:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b43a:	d82c      	bhi.n	800b496 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b43c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b440:	d02f      	beq.n	800b4a2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b442:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b446:	d826      	bhi.n	800b496 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b448:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b44c:	d02b      	beq.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b44e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b452:	d820      	bhi.n	800b496 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b454:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b458:	d012      	beq.n	800b480 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800b45a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b45e:	d81a      	bhi.n	800b496 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b460:	2b00      	cmp	r3, #0
 800b462:	d022      	beq.n	800b4aa <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b464:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b468:	d115      	bne.n	800b496 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b46a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b46e:	3308      	adds	r3, #8
 800b470:	2100      	movs	r1, #0
 800b472:	4618      	mov	r0, r3
 800b474:	f001 fbf6 	bl	800cc64 <RCCEx_PLL2_Config>
 800b478:	4603      	mov	r3, r0
 800b47a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b47e:	e015      	b.n	800b4ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b480:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b484:	3328      	adds	r3, #40	; 0x28
 800b486:	2102      	movs	r1, #2
 800b488:	4618      	mov	r0, r3
 800b48a:	f001 fc9d 	bl	800cdc8 <RCCEx_PLL3_Config>
 800b48e:	4603      	mov	r3, r0
 800b490:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b494:	e00a      	b.n	800b4ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b496:	2301      	movs	r3, #1
 800b498:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b49c:	e006      	b.n	800b4ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b49e:	bf00      	nop
 800b4a0:	e004      	b.n	800b4ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b4a2:	bf00      	nop
 800b4a4:	e002      	b.n	800b4ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b4a6:	bf00      	nop
 800b4a8:	e000      	b.n	800b4ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b4aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d10b      	bne.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b4b4:	4ba0      	ldr	r3, [pc, #640]	; (800b738 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b4b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4b8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b4bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b4c4:	4a9c      	ldr	r2, [pc, #624]	; (800b738 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b4c6:	430b      	orrs	r3, r1
 800b4c8:	6593      	str	r3, [r2, #88]	; 0x58
 800b4ca:	e003      	b.n	800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4d0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b4d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4dc:	f002 0308 	and.w	r3, r2, #8
 800b4e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b4ea:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b4ee:	460b      	mov	r3, r1
 800b4f0:	4313      	orrs	r3, r2
 800b4f2:	d01e      	beq.n	800b532 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800b4f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b4fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b500:	d10c      	bne.n	800b51c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b502:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b506:	3328      	adds	r3, #40	; 0x28
 800b508:	2102      	movs	r1, #2
 800b50a:	4618      	mov	r0, r3
 800b50c:	f001 fc5c 	bl	800cdc8 <RCCEx_PLL3_Config>
 800b510:	4603      	mov	r3, r0
 800b512:	2b00      	cmp	r3, #0
 800b514:	d002      	beq.n	800b51c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800b516:	2301      	movs	r3, #1
 800b518:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b51c:	4b86      	ldr	r3, [pc, #536]	; (800b738 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b51e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b520:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b524:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b528:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b52c:	4a82      	ldr	r2, [pc, #520]	; (800b738 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b52e:	430b      	orrs	r3, r1
 800b530:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b532:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b53a:	f002 0310 	and.w	r3, r2, #16
 800b53e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b542:	2300      	movs	r3, #0
 800b544:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b548:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b54c:	460b      	mov	r3, r1
 800b54e:	4313      	orrs	r3, r2
 800b550:	d01e      	beq.n	800b590 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b552:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b556:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b55a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b55e:	d10c      	bne.n	800b57a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b560:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b564:	3328      	adds	r3, #40	; 0x28
 800b566:	2102      	movs	r1, #2
 800b568:	4618      	mov	r0, r3
 800b56a:	f001 fc2d 	bl	800cdc8 <RCCEx_PLL3_Config>
 800b56e:	4603      	mov	r3, r0
 800b570:	2b00      	cmp	r3, #0
 800b572:	d002      	beq.n	800b57a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800b574:	2301      	movs	r3, #1
 800b576:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b57a:	4b6f      	ldr	r3, [pc, #444]	; (800b738 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b57c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b57e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b582:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b586:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b58a:	4a6b      	ldr	r2, [pc, #428]	; (800b738 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b58c:	430b      	orrs	r3, r1
 800b58e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b590:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b598:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b59c:	67bb      	str	r3, [r7, #120]	; 0x78
 800b59e:	2300      	movs	r3, #0
 800b5a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b5a2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b5a6:	460b      	mov	r3, r1
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	d03e      	beq.n	800b62a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b5ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b5b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5b8:	d022      	beq.n	800b600 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b5ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5be:	d81b      	bhi.n	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d003      	beq.n	800b5cc <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800b5c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5c8:	d00b      	beq.n	800b5e2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800b5ca:	e015      	b.n	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b5cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5d0:	3308      	adds	r3, #8
 800b5d2:	2100      	movs	r1, #0
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f001 fb45 	bl	800cc64 <RCCEx_PLL2_Config>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b5e0:	e00f      	b.n	800b602 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b5e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5e6:	3328      	adds	r3, #40	; 0x28
 800b5e8:	2102      	movs	r1, #2
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f001 fbec 	bl	800cdc8 <RCCEx_PLL3_Config>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b5f6:	e004      	b.n	800b602 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b5fe:	e000      	b.n	800b602 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800b600:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b602:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b606:	2b00      	cmp	r3, #0
 800b608:	d10b      	bne.n	800b622 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b60a:	4b4b      	ldr	r3, [pc, #300]	; (800b738 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b60c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b60e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b616:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b61a:	4a47      	ldr	r2, [pc, #284]	; (800b738 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b61c:	430b      	orrs	r3, r1
 800b61e:	6593      	str	r3, [r2, #88]	; 0x58
 800b620:	e003      	b.n	800b62a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b622:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b626:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b62a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b632:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b636:	673b      	str	r3, [r7, #112]	; 0x70
 800b638:	2300      	movs	r3, #0
 800b63a:	677b      	str	r3, [r7, #116]	; 0x74
 800b63c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b640:	460b      	mov	r3, r1
 800b642:	4313      	orrs	r3, r2
 800b644:	d03b      	beq.n	800b6be <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b646:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b64a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b64e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b652:	d01f      	beq.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b654:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b658:	d818      	bhi.n	800b68c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800b65a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b65e:	d003      	beq.n	800b668 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800b660:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b664:	d007      	beq.n	800b676 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800b666:	e011      	b.n	800b68c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b668:	4b33      	ldr	r3, [pc, #204]	; (800b738 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b66a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b66c:	4a32      	ldr	r2, [pc, #200]	; (800b738 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b66e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b672:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b674:	e00f      	b.n	800b696 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b676:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b67a:	3328      	adds	r3, #40	; 0x28
 800b67c:	2101      	movs	r1, #1
 800b67e:	4618      	mov	r0, r3
 800b680:	f001 fba2 	bl	800cdc8 <RCCEx_PLL3_Config>
 800b684:	4603      	mov	r3, r0
 800b686:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800b68a:	e004      	b.n	800b696 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b68c:	2301      	movs	r3, #1
 800b68e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b692:	e000      	b.n	800b696 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800b694:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b696:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d10b      	bne.n	800b6b6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b69e:	4b26      	ldr	r3, [pc, #152]	; (800b738 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b6a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6a2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b6a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6ae:	4a22      	ldr	r2, [pc, #136]	; (800b738 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b6b0:	430b      	orrs	r3, r1
 800b6b2:	6553      	str	r3, [r2, #84]	; 0x54
 800b6b4:	e003      	b.n	800b6be <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6b6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6ba:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b6be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b6ca:	66bb      	str	r3, [r7, #104]	; 0x68
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b6d0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b6d4:	460b      	mov	r3, r1
 800b6d6:	4313      	orrs	r3, r2
 800b6d8:	d034      	beq.n	800b744 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b6da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d003      	beq.n	800b6ec <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800b6e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6e8:	d007      	beq.n	800b6fa <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800b6ea:	e011      	b.n	800b710 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6ec:	4b12      	ldr	r3, [pc, #72]	; (800b738 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6f0:	4a11      	ldr	r2, [pc, #68]	; (800b738 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b6f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b6f8:	e00e      	b.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b6fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6fe:	3308      	adds	r3, #8
 800b700:	2102      	movs	r1, #2
 800b702:	4618      	mov	r0, r3
 800b704:	f001 faae 	bl	800cc64 <RCCEx_PLL2_Config>
 800b708:	4603      	mov	r3, r0
 800b70a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b70e:	e003      	b.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800b710:	2301      	movs	r3, #1
 800b712:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b716:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b718:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d10d      	bne.n	800b73c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b720:	4b05      	ldr	r3, [pc, #20]	; (800b738 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b724:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b72c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b72e:	4a02      	ldr	r2, [pc, #8]	; (800b738 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b730:	430b      	orrs	r3, r1
 800b732:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b734:	e006      	b.n	800b744 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800b736:	bf00      	nop
 800b738:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b73c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b740:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b744:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b750:	663b      	str	r3, [r7, #96]	; 0x60
 800b752:	2300      	movs	r3, #0
 800b754:	667b      	str	r3, [r7, #100]	; 0x64
 800b756:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b75a:	460b      	mov	r3, r1
 800b75c:	4313      	orrs	r3, r2
 800b75e:	d00c      	beq.n	800b77a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b760:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b764:	3328      	adds	r3, #40	; 0x28
 800b766:	2102      	movs	r1, #2
 800b768:	4618      	mov	r0, r3
 800b76a:	f001 fb2d 	bl	800cdc8 <RCCEx_PLL3_Config>
 800b76e:	4603      	mov	r3, r0
 800b770:	2b00      	cmp	r3, #0
 800b772:	d002      	beq.n	800b77a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800b774:	2301      	movs	r3, #1
 800b776:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b77a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b782:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b786:	65bb      	str	r3, [r7, #88]	; 0x58
 800b788:	2300      	movs	r3, #0
 800b78a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b78c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800b790:	460b      	mov	r3, r1
 800b792:	4313      	orrs	r3, r2
 800b794:	d036      	beq.n	800b804 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b796:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b79a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b79c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b7a0:	d018      	beq.n	800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800b7a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b7a6:	d811      	bhi.n	800b7cc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b7a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7ac:	d014      	beq.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800b7ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7b2:	d80b      	bhi.n	800b7cc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d011      	beq.n	800b7dc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800b7b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7bc:	d106      	bne.n	800b7cc <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7be:	4bb7      	ldr	r3, [pc, #732]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c2:	4ab6      	ldr	r2, [pc, #728]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b7c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b7ca:	e008      	b.n	800b7de <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b7d2:	e004      	b.n	800b7de <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b7d4:	bf00      	nop
 800b7d6:	e002      	b.n	800b7de <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b7d8:	bf00      	nop
 800b7da:	e000      	b.n	800b7de <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b7dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d10a      	bne.n	800b7fc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b7e6:	4bad      	ldr	r3, [pc, #692]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b7e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b7ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7f4:	4aa9      	ldr	r2, [pc, #676]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b7f6:	430b      	orrs	r3, r1
 800b7f8:	6553      	str	r3, [r2, #84]	; 0x54
 800b7fa:	e003      	b.n	800b804 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b800:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b804:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b80c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800b810:	653b      	str	r3, [r7, #80]	; 0x50
 800b812:	2300      	movs	r3, #0
 800b814:	657b      	str	r3, [r7, #84]	; 0x54
 800b816:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b81a:	460b      	mov	r3, r1
 800b81c:	4313      	orrs	r3, r2
 800b81e:	d009      	beq.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b820:	4b9e      	ldr	r3, [pc, #632]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b824:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b82c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b82e:	4a9b      	ldr	r2, [pc, #620]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b830:	430b      	orrs	r3, r1
 800b832:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b83c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800b840:	64bb      	str	r3, [r7, #72]	; 0x48
 800b842:	2300      	movs	r3, #0
 800b844:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b846:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800b84a:	460b      	mov	r3, r1
 800b84c:	4313      	orrs	r3, r2
 800b84e:	d009      	beq.n	800b864 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b850:	4b92      	ldr	r3, [pc, #584]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b854:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800b858:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b85c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b85e:	4a8f      	ldr	r2, [pc, #572]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b860:	430b      	orrs	r3, r1
 800b862:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b864:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b86c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800b870:	643b      	str	r3, [r7, #64]	; 0x40
 800b872:	2300      	movs	r3, #0
 800b874:	647b      	str	r3, [r7, #68]	; 0x44
 800b876:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b87a:	460b      	mov	r3, r1
 800b87c:	4313      	orrs	r3, r2
 800b87e:	d00e      	beq.n	800b89e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b880:	4b86      	ldr	r3, [pc, #536]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b882:	691b      	ldr	r3, [r3, #16]
 800b884:	4a85      	ldr	r2, [pc, #532]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b886:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b88a:	6113      	str	r3, [r2, #16]
 800b88c:	4b83      	ldr	r3, [pc, #524]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b88e:	6919      	ldr	r1, [r3, #16]
 800b890:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b894:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b898:	4a80      	ldr	r2, [pc, #512]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b89a:	430b      	orrs	r3, r1
 800b89c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b89e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a6:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800b8aa:	63bb      	str	r3, [r7, #56]	; 0x38
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8b0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b8b4:	460b      	mov	r3, r1
 800b8b6:	4313      	orrs	r3, r2
 800b8b8:	d009      	beq.n	800b8ce <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b8ba:	4b78      	ldr	r3, [pc, #480]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8be:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b8c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8c8:	4a74      	ldr	r2, [pc, #464]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8ca:	430b      	orrs	r3, r1
 800b8cc:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b8ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800b8da:	633b      	str	r3, [r7, #48]	; 0x30
 800b8dc:	2300      	movs	r3, #0
 800b8de:	637b      	str	r3, [r7, #52]	; 0x34
 800b8e0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800b8e4:	460b      	mov	r3, r1
 800b8e6:	4313      	orrs	r3, r2
 800b8e8:	d00a      	beq.n	800b900 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b8ea:	4b6c      	ldr	r3, [pc, #432]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8ee:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800b8f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8fa:	4a68      	ldr	r2, [pc, #416]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8fc:	430b      	orrs	r3, r1
 800b8fe:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b900:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b908:	2100      	movs	r1, #0
 800b90a:	62b9      	str	r1, [r7, #40]	; 0x28
 800b90c:	f003 0301 	and.w	r3, r3, #1
 800b910:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b912:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800b916:	460b      	mov	r3, r1
 800b918:	4313      	orrs	r3, r2
 800b91a:	d011      	beq.n	800b940 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b91c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b920:	3308      	adds	r3, #8
 800b922:	2100      	movs	r1, #0
 800b924:	4618      	mov	r0, r3
 800b926:	f001 f99d 	bl	800cc64 <RCCEx_PLL2_Config>
 800b92a:	4603      	mov	r3, r0
 800b92c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b930:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b934:	2b00      	cmp	r3, #0
 800b936:	d003      	beq.n	800b940 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b938:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b93c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b940:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b948:	2100      	movs	r1, #0
 800b94a:	6239      	str	r1, [r7, #32]
 800b94c:	f003 0302 	and.w	r3, r3, #2
 800b950:	627b      	str	r3, [r7, #36]	; 0x24
 800b952:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b956:	460b      	mov	r3, r1
 800b958:	4313      	orrs	r3, r2
 800b95a:	d011      	beq.n	800b980 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b95c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b960:	3308      	adds	r3, #8
 800b962:	2101      	movs	r1, #1
 800b964:	4618      	mov	r0, r3
 800b966:	f001 f97d 	bl	800cc64 <RCCEx_PLL2_Config>
 800b96a:	4603      	mov	r3, r0
 800b96c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b970:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b974:	2b00      	cmp	r3, #0
 800b976:	d003      	beq.n	800b980 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b978:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b97c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b980:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b988:	2100      	movs	r1, #0
 800b98a:	61b9      	str	r1, [r7, #24]
 800b98c:	f003 0304 	and.w	r3, r3, #4
 800b990:	61fb      	str	r3, [r7, #28]
 800b992:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b996:	460b      	mov	r3, r1
 800b998:	4313      	orrs	r3, r2
 800b99a:	d011      	beq.n	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b99c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9a0:	3308      	adds	r3, #8
 800b9a2:	2102      	movs	r1, #2
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f001 f95d 	bl	800cc64 <RCCEx_PLL2_Config>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b9b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d003      	beq.n	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9bc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b9c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c8:	2100      	movs	r1, #0
 800b9ca:	6139      	str	r1, [r7, #16]
 800b9cc:	f003 0308 	and.w	r3, r3, #8
 800b9d0:	617b      	str	r3, [r7, #20]
 800b9d2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b9d6:	460b      	mov	r3, r1
 800b9d8:	4313      	orrs	r3, r2
 800b9da:	d011      	beq.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b9dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9e0:	3328      	adds	r3, #40	; 0x28
 800b9e2:	2100      	movs	r1, #0
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f001 f9ef 	bl	800cdc8 <RCCEx_PLL3_Config>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800b9f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d003      	beq.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ba00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba08:	2100      	movs	r1, #0
 800ba0a:	60b9      	str	r1, [r7, #8]
 800ba0c:	f003 0310 	and.w	r3, r3, #16
 800ba10:	60fb      	str	r3, [r7, #12]
 800ba12:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ba16:	460b      	mov	r3, r1
 800ba18:	4313      	orrs	r3, r2
 800ba1a:	d011      	beq.n	800ba40 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba20:	3328      	adds	r3, #40	; 0x28
 800ba22:	2101      	movs	r1, #1
 800ba24:	4618      	mov	r0, r3
 800ba26:	f001 f9cf 	bl	800cdc8 <RCCEx_PLL3_Config>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ba30:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d003      	beq.n	800ba40 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba38:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba3c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ba40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba48:	2100      	movs	r1, #0
 800ba4a:	6039      	str	r1, [r7, #0]
 800ba4c:	f003 0320 	and.w	r3, r3, #32
 800ba50:	607b      	str	r3, [r7, #4]
 800ba52:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ba56:	460b      	mov	r3, r1
 800ba58:	4313      	orrs	r3, r2
 800ba5a:	d011      	beq.n	800ba80 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ba5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba60:	3328      	adds	r3, #40	; 0x28
 800ba62:	2102      	movs	r1, #2
 800ba64:	4618      	mov	r0, r3
 800ba66:	f001 f9af 	bl	800cdc8 <RCCEx_PLL3_Config>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ba70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d003      	beq.n	800ba80 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba7c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800ba80:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d101      	bne.n	800ba8c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	e000      	b.n	800ba8e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800ba8c:	2301      	movs	r3, #1
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800ba94:	46bd      	mov	sp, r7
 800ba96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ba9a:	bf00      	nop
 800ba9c:	58024400 	.word	0x58024400

0800baa0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b090      	sub	sp, #64	; 0x40
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800baaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800baae:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800bab2:	430b      	orrs	r3, r1
 800bab4:	f040 8094 	bne.w	800bbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800bab8:	4b9b      	ldr	r3, [pc, #620]	; (800bd28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800baba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800babc:	f003 0307 	and.w	r3, r3, #7
 800bac0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac4:	2b04      	cmp	r3, #4
 800bac6:	f200 8087 	bhi.w	800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800baca:	a201      	add	r2, pc, #4	; (adr r2, 800bad0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800bacc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bad0:	0800bae5 	.word	0x0800bae5
 800bad4:	0800bb0d 	.word	0x0800bb0d
 800bad8:	0800bb35 	.word	0x0800bb35
 800badc:	0800bbd1 	.word	0x0800bbd1
 800bae0:	0800bb5d 	.word	0x0800bb5d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bae4:	4b90      	ldr	r3, [pc, #576]	; (800bd28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800baec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800baf0:	d108      	bne.n	800bb04 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800baf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800baf6:	4618      	mov	r0, r3
 800baf8:	f000 ff62 	bl	800c9c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bafe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb00:	f000 bc93 	b.w	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bb04:	2300      	movs	r3, #0
 800bb06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb08:	f000 bc8f 	b.w	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bb0c:	4b86      	ldr	r3, [pc, #536]	; (800bd28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb18:	d108      	bne.n	800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb1a:	f107 0318 	add.w	r3, r7, #24
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f000 fca6 	bl	800c470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bb24:	69bb      	ldr	r3, [r7, #24]
 800bb26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb28:	f000 bc7f 	b.w	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb30:	f000 bc7b 	b.w	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bb34:	4b7c      	ldr	r3, [pc, #496]	; (800bd28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb40:	d108      	bne.n	800bb54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb42:	f107 030c 	add.w	r3, r7, #12
 800bb46:	4618      	mov	r0, r3
 800bb48:	f000 fde6 	bl	800c718 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb50:	f000 bc6b 	b.w	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bb54:	2300      	movs	r3, #0
 800bb56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb58:	f000 bc67 	b.w	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bb5c:	4b72      	ldr	r3, [pc, #456]	; (800bd28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bb64:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bb66:	4b70      	ldr	r3, [pc, #448]	; (800bd28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	f003 0304 	and.w	r3, r3, #4
 800bb6e:	2b04      	cmp	r3, #4
 800bb70:	d10c      	bne.n	800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bb72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d109      	bne.n	800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb78:	4b6b      	ldr	r3, [pc, #428]	; (800bd28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	08db      	lsrs	r3, r3, #3
 800bb7e:	f003 0303 	and.w	r3, r3, #3
 800bb82:	4a6a      	ldr	r2, [pc, #424]	; (800bd2c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800bb84:	fa22 f303 	lsr.w	r3, r2, r3
 800bb88:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb8a:	e01f      	b.n	800bbcc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bb8c:	4b66      	ldr	r3, [pc, #408]	; (800bd28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb98:	d106      	bne.n	800bba8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800bb9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bba0:	d102      	bne.n	800bba8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bba2:	4b63      	ldr	r3, [pc, #396]	; (800bd30 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800bba4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bba6:	e011      	b.n	800bbcc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bba8:	4b5f      	ldr	r3, [pc, #380]	; (800bd28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bbb4:	d106      	bne.n	800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bbb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbbc:	d102      	bne.n	800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bbbe:	4b5d      	ldr	r3, [pc, #372]	; (800bd34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bbc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbc2:	e003      	b.n	800bbcc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bbc8:	f000 bc2f 	b.w	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bbcc:	f000 bc2d 	b.w	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bbd0:	4b59      	ldr	r3, [pc, #356]	; (800bd38 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bbd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbd4:	f000 bc29 	b.w	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800bbd8:	2300      	movs	r3, #0
 800bbda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbdc:	f000 bc25 	b.w	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800bbe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbe4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800bbe8:	430b      	orrs	r3, r1
 800bbea:	f040 80a7 	bne.w	800bd3c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800bbee:	4b4e      	ldr	r3, [pc, #312]	; (800bd28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bbf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbf2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800bbf6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bbf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbfa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bbfe:	d054      	beq.n	800bcaa <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800bc00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bc06:	f200 808b 	bhi.w	800bd20 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bc0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc0c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bc10:	f000 8083 	beq.w	800bd1a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800bc14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc16:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bc1a:	f200 8081 	bhi.w	800bd20 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bc1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc24:	d02f      	beq.n	800bc86 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800bc26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc2c:	d878      	bhi.n	800bd20 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bc2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d004      	beq.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800bc34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bc3a:	d012      	beq.n	800bc62 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800bc3c:	e070      	b.n	800bd20 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bc3e:	4b3a      	ldr	r3, [pc, #232]	; (800bd28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc4a:	d107      	bne.n	800bc5c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bc4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc50:	4618      	mov	r0, r3
 800bc52:	f000 feb5 	bl	800c9c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bc56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc5a:	e3e6      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc60:	e3e3      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bc62:	4b31      	ldr	r3, [pc, #196]	; (800bd28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc6e:	d107      	bne.n	800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc70:	f107 0318 	add.w	r3, r7, #24
 800bc74:	4618      	mov	r0, r3
 800bc76:	f000 fbfb 	bl	800c470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bc7a:	69bb      	ldr	r3, [r7, #24]
 800bc7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc7e:	e3d4      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc80:	2300      	movs	r3, #0
 800bc82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc84:	e3d1      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bc86:	4b28      	ldr	r3, [pc, #160]	; (800bd28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc92:	d107      	bne.n	800bca4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc94:	f107 030c 	add.w	r3, r7, #12
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f000 fd3d 	bl	800c718 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bca2:	e3c2      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bca4:	2300      	movs	r3, #0
 800bca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bca8:	e3bf      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bcaa:	4b1f      	ldr	r3, [pc, #124]	; (800bd28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bcac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bcb2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bcb4:	4b1c      	ldr	r3, [pc, #112]	; (800bd28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f003 0304 	and.w	r3, r3, #4
 800bcbc:	2b04      	cmp	r3, #4
 800bcbe:	d10c      	bne.n	800bcda <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800bcc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d109      	bne.n	800bcda <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bcc6:	4b18      	ldr	r3, [pc, #96]	; (800bd28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	08db      	lsrs	r3, r3, #3
 800bccc:	f003 0303 	and.w	r3, r3, #3
 800bcd0:	4a16      	ldr	r2, [pc, #88]	; (800bd2c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800bcd2:	fa22 f303 	lsr.w	r3, r2, r3
 800bcd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcd8:	e01e      	b.n	800bd18 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bcda:	4b13      	ldr	r3, [pc, #76]	; (800bd28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bce6:	d106      	bne.n	800bcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800bce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bcee:	d102      	bne.n	800bcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bcf0:	4b0f      	ldr	r3, [pc, #60]	; (800bd30 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800bcf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcf4:	e010      	b.n	800bd18 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bcf6:	4b0c      	ldr	r3, [pc, #48]	; (800bd28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd02:	d106      	bne.n	800bd12 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800bd04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd0a:	d102      	bne.n	800bd12 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bd0c:	4b09      	ldr	r3, [pc, #36]	; (800bd34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd10:	e002      	b.n	800bd18 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bd12:	2300      	movs	r3, #0
 800bd14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bd16:	e388      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bd18:	e387      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bd1a:	4b07      	ldr	r3, [pc, #28]	; (800bd38 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bd1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd1e:	e384      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bd20:	2300      	movs	r3, #0
 800bd22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd24:	e381      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bd26:	bf00      	nop
 800bd28:	58024400 	.word	0x58024400
 800bd2c:	03d09000 	.word	0x03d09000
 800bd30:	003d0900 	.word	0x003d0900
 800bd34:	02faf080 	.word	0x02faf080
 800bd38:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800bd3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd40:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800bd44:	430b      	orrs	r3, r1
 800bd46:	f040 809c 	bne.w	800be82 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800bd4a:	4b9e      	ldr	r3, [pc, #632]	; (800bfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bd4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd4e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800bd52:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bd54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bd5a:	d054      	beq.n	800be06 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800bd5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bd62:	f200 808b 	bhi.w	800be7c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bd66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd68:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bd6c:	f000 8083 	beq.w	800be76 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800bd70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd72:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bd76:	f200 8081 	bhi.w	800be7c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bd7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd80:	d02f      	beq.n	800bde2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800bd82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd88:	d878      	bhi.n	800be7c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d004      	beq.n	800bd9a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800bd90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bd96:	d012      	beq.n	800bdbe <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800bd98:	e070      	b.n	800be7c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bd9a:	4b8a      	ldr	r3, [pc, #552]	; (800bfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bda2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bda6:	d107      	bne.n	800bdb8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bda8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bdac:	4618      	mov	r0, r3
 800bdae:	f000 fe07 	bl	800c9c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bdb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bdb6:	e338      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdbc:	e335      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bdbe:	4b81      	ldr	r3, [pc, #516]	; (800bfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bdc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bdca:	d107      	bne.n	800bddc <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bdcc:	f107 0318 	add.w	r3, r7, #24
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f000 fb4d 	bl	800c470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bdd6:	69bb      	ldr	r3, [r7, #24]
 800bdd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bdda:	e326      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bddc:	2300      	movs	r3, #0
 800bdde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bde0:	e323      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bde2:	4b78      	ldr	r3, [pc, #480]	; (800bfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bdea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bdee:	d107      	bne.n	800be00 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bdf0:	f107 030c 	add.w	r3, r7, #12
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f000 fc8f 	bl	800c718 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bdfe:	e314      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be00:	2300      	movs	r3, #0
 800be02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be04:	e311      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800be06:	4b6f      	ldr	r3, [pc, #444]	; (800bfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800be0e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800be10:	4b6c      	ldr	r3, [pc, #432]	; (800bfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f003 0304 	and.w	r3, r3, #4
 800be18:	2b04      	cmp	r3, #4
 800be1a:	d10c      	bne.n	800be36 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800be1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d109      	bne.n	800be36 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be22:	4b68      	ldr	r3, [pc, #416]	; (800bfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	08db      	lsrs	r3, r3, #3
 800be28:	f003 0303 	and.w	r3, r3, #3
 800be2c:	4a66      	ldr	r2, [pc, #408]	; (800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800be2e:	fa22 f303 	lsr.w	r3, r2, r3
 800be32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be34:	e01e      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800be36:	4b63      	ldr	r3, [pc, #396]	; (800bfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be42:	d106      	bne.n	800be52 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800be44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be4a:	d102      	bne.n	800be52 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800be4c:	4b5f      	ldr	r3, [pc, #380]	; (800bfcc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800be4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be50:	e010      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800be52:	4b5c      	ldr	r3, [pc, #368]	; (800bfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be5e:	d106      	bne.n	800be6e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800be60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be66:	d102      	bne.n	800be6e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800be68:	4b59      	ldr	r3, [pc, #356]	; (800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800be6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be6c:	e002      	b.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800be6e:	2300      	movs	r3, #0
 800be70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800be72:	e2da      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800be74:	e2d9      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800be76:	4b57      	ldr	r3, [pc, #348]	; (800bfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800be78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be7a:	e2d6      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800be7c:	2300      	movs	r3, #0
 800be7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be80:	e2d3      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800be82:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be86:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800be8a:	430b      	orrs	r3, r1
 800be8c:	f040 80a7 	bne.w	800bfde <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800be90:	4b4c      	ldr	r3, [pc, #304]	; (800bfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be94:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800be98:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800be9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bea0:	d055      	beq.n	800bf4e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800bea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bea4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bea8:	f200 8096 	bhi.w	800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800beac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800beb2:	f000 8084 	beq.w	800bfbe <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800beb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beb8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bebc:	f200 808c 	bhi.w	800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bec2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bec6:	d030      	beq.n	800bf2a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800bec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bece:	f200 8083 	bhi.w	800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d004      	beq.n	800bee2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800bed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bede:	d012      	beq.n	800bf06 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800bee0:	e07a      	b.n	800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bee2:	4b38      	ldr	r3, [pc, #224]	; (800bfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800beea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800beee:	d107      	bne.n	800bf00 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bef4:	4618      	mov	r0, r3
 800bef6:	f000 fd63 	bl	800c9c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800befa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800befc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800befe:	e294      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf00:	2300      	movs	r3, #0
 800bf02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf04:	e291      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf06:	4b2f      	ldr	r3, [pc, #188]	; (800bfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf12:	d107      	bne.n	800bf24 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf14:	f107 0318 	add.w	r3, r7, #24
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f000 faa9 	bl	800c470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bf1e:	69bb      	ldr	r3, [r7, #24]
 800bf20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf22:	e282      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf24:	2300      	movs	r3, #0
 800bf26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf28:	e27f      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bf2a:	4b26      	ldr	r3, [pc, #152]	; (800bfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf36:	d107      	bne.n	800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf38:	f107 030c 	add.w	r3, r7, #12
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f000 fbeb 	bl	800c718 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf46:	e270      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf4c:	e26d      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bf4e:	4b1d      	ldr	r3, [pc, #116]	; (800bfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bf56:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bf58:	4b1a      	ldr	r3, [pc, #104]	; (800bfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	f003 0304 	and.w	r3, r3, #4
 800bf60:	2b04      	cmp	r3, #4
 800bf62:	d10c      	bne.n	800bf7e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800bf64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d109      	bne.n	800bf7e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf6a:	4b16      	ldr	r3, [pc, #88]	; (800bfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	08db      	lsrs	r3, r3, #3
 800bf70:	f003 0303 	and.w	r3, r3, #3
 800bf74:	4a14      	ldr	r2, [pc, #80]	; (800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800bf76:	fa22 f303 	lsr.w	r3, r2, r3
 800bf7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf7c:	e01e      	b.n	800bfbc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bf7e:	4b11      	ldr	r3, [pc, #68]	; (800bfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf8a:	d106      	bne.n	800bf9a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800bf8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf92:	d102      	bne.n	800bf9a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bf94:	4b0d      	ldr	r3, [pc, #52]	; (800bfcc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800bf96:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf98:	e010      	b.n	800bfbc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bf9a:	4b0a      	ldr	r3, [pc, #40]	; (800bfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfa2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bfa6:	d106      	bne.n	800bfb6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800bfa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfae:	d102      	bne.n	800bfb6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bfb0:	4b07      	ldr	r3, [pc, #28]	; (800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bfb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfb4:	e002      	b.n	800bfbc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bfba:	e236      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bfbc:	e235      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bfbe:	4b05      	ldr	r3, [pc, #20]	; (800bfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bfc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfc2:	e232      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bfc4:	58024400 	.word	0x58024400
 800bfc8:	03d09000 	.word	0x03d09000
 800bfcc:	003d0900 	.word	0x003d0900
 800bfd0:	02faf080 	.word	0x02faf080
 800bfd4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800bfd8:	2300      	movs	r3, #0
 800bfda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfdc:	e225      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800bfde:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfe2:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800bfe6:	430b      	orrs	r3, r1
 800bfe8:	f040 8085 	bne.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800bfec:	4b9c      	ldr	r3, [pc, #624]	; (800c260 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bfee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bff0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800bff4:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800bff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bff8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bffc:	d06b      	beq.n	800c0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800bffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c000:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c004:	d874      	bhi.n	800c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c008:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c00c:	d056      	beq.n	800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800c00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c010:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c014:	d86c      	bhi.n	800c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c018:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c01c:	d03b      	beq.n	800c096 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800c01e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c020:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c024:	d864      	bhi.n	800c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c028:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c02c:	d021      	beq.n	800c072 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800c02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c030:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c034:	d85c      	bhi.n	800c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d004      	beq.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800c03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c03e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c042:	d004      	beq.n	800c04e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800c044:	e054      	b.n	800c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c046:	f7fe fb5f 	bl	800a708 <HAL_RCC_GetPCLK1Freq>
 800c04a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c04c:	e1ed      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c04e:	4b84      	ldr	r3, [pc, #528]	; (800c260 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c056:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c05a:	d107      	bne.n	800c06c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c05c:	f107 0318 	add.w	r3, r7, #24
 800c060:	4618      	mov	r0, r3
 800c062:	f000 fa05 	bl	800c470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c066:	69fb      	ldr	r3, [r7, #28]
 800c068:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c06a:	e1de      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c06c:	2300      	movs	r3, #0
 800c06e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c070:	e1db      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c072:	4b7b      	ldr	r3, [pc, #492]	; (800c260 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c07a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c07e:	d107      	bne.n	800c090 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c080:	f107 030c 	add.w	r3, r7, #12
 800c084:	4618      	mov	r0, r3
 800c086:	f000 fb47 	bl	800c718 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c08e:	e1cc      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c090:	2300      	movs	r3, #0
 800c092:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c094:	e1c9      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c096:	4b72      	ldr	r3, [pc, #456]	; (800c260 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f003 0304 	and.w	r3, r3, #4
 800c09e:	2b04      	cmp	r3, #4
 800c0a0:	d109      	bne.n	800c0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c0a2:	4b6f      	ldr	r3, [pc, #444]	; (800c260 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	08db      	lsrs	r3, r3, #3
 800c0a8:	f003 0303 	and.w	r3, r3, #3
 800c0ac:	4a6d      	ldr	r2, [pc, #436]	; (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c0ae:	fa22 f303 	lsr.w	r3, r2, r3
 800c0b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0b4:	e1b9      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0ba:	e1b6      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c0bc:	4b68      	ldr	r3, [pc, #416]	; (800c260 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0c8:	d102      	bne.n	800c0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800c0ca:	4b67      	ldr	r3, [pc, #412]	; (800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c0cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0ce:	e1ac      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0d4:	e1a9      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c0d6:	4b62      	ldr	r3, [pc, #392]	; (800c260 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0e2:	d102      	bne.n	800c0ea <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800c0e4:	4b61      	ldr	r3, [pc, #388]	; (800c26c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0e8:	e19f      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0ee:	e19c      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0f4:	e199      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c0f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0fa:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c0fe:	430b      	orrs	r3, r1
 800c100:	d173      	bne.n	800c1ea <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c102:	4b57      	ldr	r3, [pc, #348]	; (800c260 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c106:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c10a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c10e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c112:	d02f      	beq.n	800c174 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800c114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c116:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c11a:	d863      	bhi.n	800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800c11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d004      	beq.n	800c12c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800c122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c128:	d012      	beq.n	800c150 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800c12a:	e05b      	b.n	800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c12c:	4b4c      	ldr	r3, [pc, #304]	; (800c260 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c134:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c138:	d107      	bne.n	800c14a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c13a:	f107 0318 	add.w	r3, r7, #24
 800c13e:	4618      	mov	r0, r3
 800c140:	f000 f996 	bl	800c470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c144:	69bb      	ldr	r3, [r7, #24]
 800c146:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c148:	e16f      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c14a:	2300      	movs	r3, #0
 800c14c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c14e:	e16c      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c150:	4b43      	ldr	r3, [pc, #268]	; (800c260 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c15c:	d107      	bne.n	800c16e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c15e:	f107 030c 	add.w	r3, r7, #12
 800c162:	4618      	mov	r0, r3
 800c164:	f000 fad8 	bl	800c718 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c16c:	e15d      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c16e:	2300      	movs	r3, #0
 800c170:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c172:	e15a      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c174:	4b3a      	ldr	r3, [pc, #232]	; (800c260 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c178:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c17c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c17e:	4b38      	ldr	r3, [pc, #224]	; (800c260 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	f003 0304 	and.w	r3, r3, #4
 800c186:	2b04      	cmp	r3, #4
 800c188:	d10c      	bne.n	800c1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800c18a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d109      	bne.n	800c1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c190:	4b33      	ldr	r3, [pc, #204]	; (800c260 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	08db      	lsrs	r3, r3, #3
 800c196:	f003 0303 	and.w	r3, r3, #3
 800c19a:	4a32      	ldr	r2, [pc, #200]	; (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c19c:	fa22 f303 	lsr.w	r3, r2, r3
 800c1a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1a2:	e01e      	b.n	800c1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c1a4:	4b2e      	ldr	r3, [pc, #184]	; (800c260 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1b0:	d106      	bne.n	800c1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800c1b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c1b8:	d102      	bne.n	800c1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c1ba:	4b2b      	ldr	r3, [pc, #172]	; (800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c1bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1be:	e010      	b.n	800c1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c1c0:	4b27      	ldr	r3, [pc, #156]	; (800c260 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1cc:	d106      	bne.n	800c1dc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800c1ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1d4:	d102      	bne.n	800c1dc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c1d6:	4b25      	ldr	r3, [pc, #148]	; (800c26c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c1d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1da:	e002      	b.n	800c1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c1e0:	e123      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c1e2:	e122      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1e8:	e11f      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c1ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1ee:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c1f2:	430b      	orrs	r3, r1
 800c1f4:	d13c      	bne.n	800c270 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c1f6:	4b1a      	ldr	r3, [pc, #104]	; (800c260 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c1fe:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c202:	2b00      	cmp	r3, #0
 800c204:	d004      	beq.n	800c210 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800c206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c20c:	d012      	beq.n	800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800c20e:	e023      	b.n	800c258 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c210:	4b13      	ldr	r3, [pc, #76]	; (800c260 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c218:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c21c:	d107      	bne.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c21e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c222:	4618      	mov	r0, r3
 800c224:	f000 fbcc 	bl	800c9c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c22a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c22c:	e0fd      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c22e:	2300      	movs	r3, #0
 800c230:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c232:	e0fa      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c234:	4b0a      	ldr	r3, [pc, #40]	; (800c260 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c23c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c240:	d107      	bne.n	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c242:	f107 0318 	add.w	r3, r7, #24
 800c246:	4618      	mov	r0, r3
 800c248:	f000 f912 	bl	800c470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c24c:	6a3b      	ldr	r3, [r7, #32]
 800c24e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c250:	e0eb      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c252:	2300      	movs	r3, #0
 800c254:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c256:	e0e8      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c258:	2300      	movs	r3, #0
 800c25a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c25c:	e0e5      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c25e:	bf00      	nop
 800c260:	58024400 	.word	0x58024400
 800c264:	03d09000 	.word	0x03d09000
 800c268:	003d0900 	.word	0x003d0900
 800c26c:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c270:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c274:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c278:	430b      	orrs	r3, r1
 800c27a:	f040 8085 	bne.w	800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c27e:	4b6d      	ldr	r3, [pc, #436]	; (800c434 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c282:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c286:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c28a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c28e:	d06b      	beq.n	800c368 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800c290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c292:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c296:	d874      	bhi.n	800c382 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c29a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c29e:	d056      	beq.n	800c34e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800c2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2a6:	d86c      	bhi.n	800c382 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c2ae:	d03b      	beq.n	800c328 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800c2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c2b6:	d864      	bhi.n	800c382 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2be:	d021      	beq.n	800c304 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800c2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2c6:	d85c      	bhi.n	800c382 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d004      	beq.n	800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800c2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c2d4:	d004      	beq.n	800c2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800c2d6:	e054      	b.n	800c382 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c2d8:	f000 f8b4 	bl	800c444 <HAL_RCCEx_GetD3PCLK1Freq>
 800c2dc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c2de:	e0a4      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c2e0:	4b54      	ldr	r3, [pc, #336]	; (800c434 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2ec:	d107      	bne.n	800c2fe <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2ee:	f107 0318 	add.w	r3, r7, #24
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f000 f8bc 	bl	800c470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c2f8:	69fb      	ldr	r3, [r7, #28]
 800c2fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2fc:	e095      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c2fe:	2300      	movs	r3, #0
 800c300:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c302:	e092      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c304:	4b4b      	ldr	r3, [pc, #300]	; (800c434 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c30c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c310:	d107      	bne.n	800c322 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c312:	f107 030c 	add.w	r3, r7, #12
 800c316:	4618      	mov	r0, r3
 800c318:	f000 f9fe 	bl	800c718 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c31c:	693b      	ldr	r3, [r7, #16]
 800c31e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c320:	e083      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c322:	2300      	movs	r3, #0
 800c324:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c326:	e080      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c328:	4b42      	ldr	r3, [pc, #264]	; (800c434 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	f003 0304 	and.w	r3, r3, #4
 800c330:	2b04      	cmp	r3, #4
 800c332:	d109      	bne.n	800c348 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c334:	4b3f      	ldr	r3, [pc, #252]	; (800c434 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	08db      	lsrs	r3, r3, #3
 800c33a:	f003 0303 	and.w	r3, r3, #3
 800c33e:	4a3e      	ldr	r2, [pc, #248]	; (800c438 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c340:	fa22 f303 	lsr.w	r3, r2, r3
 800c344:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c346:	e070      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c348:	2300      	movs	r3, #0
 800c34a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c34c:	e06d      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c34e:	4b39      	ldr	r3, [pc, #228]	; (800c434 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c35a:	d102      	bne.n	800c362 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800c35c:	4b37      	ldr	r3, [pc, #220]	; (800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c35e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c360:	e063      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c362:	2300      	movs	r3, #0
 800c364:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c366:	e060      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c368:	4b32      	ldr	r3, [pc, #200]	; (800c434 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c370:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c374:	d102      	bne.n	800c37c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800c376:	4b32      	ldr	r3, [pc, #200]	; (800c440 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c378:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c37a:	e056      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c37c:	2300      	movs	r3, #0
 800c37e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c380:	e053      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c382:	2300      	movs	r3, #0
 800c384:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c386:	e050      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c388:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c38c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c390:	430b      	orrs	r3, r1
 800c392:	d148      	bne.n	800c426 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c394:	4b27      	ldr	r3, [pc, #156]	; (800c434 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c398:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c39c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3a4:	d02a      	beq.n	800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3ac:	d838      	bhi.n	800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d004      	beq.n	800c3be <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c3ba:	d00d      	beq.n	800c3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800c3bc:	e030      	b.n	800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c3be:	4b1d      	ldr	r3, [pc, #116]	; (800c434 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c3ca:	d102      	bne.n	800c3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800c3cc:	4b1c      	ldr	r3, [pc, #112]	; (800c440 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c3ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3d0:	e02b      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3d6:	e028      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c3d8:	4b16      	ldr	r3, [pc, #88]	; (800c434 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c3e4:	d107      	bne.n	800c3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c3e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f000 fae8 	bl	800c9c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3f4:	e019      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3fa:	e016      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c3fc:	4b0d      	ldr	r3, [pc, #52]	; (800c434 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c404:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c408:	d107      	bne.n	800c41a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c40a:	f107 0318 	add.w	r3, r7, #24
 800c40e:	4618      	mov	r0, r3
 800c410:	f000 f82e 	bl	800c470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c414:	69fb      	ldr	r3, [r7, #28]
 800c416:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c418:	e007      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c41a:	2300      	movs	r3, #0
 800c41c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c41e:	e004      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c420:	2300      	movs	r3, #0
 800c422:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c424:	e001      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800c426:	2300      	movs	r3, #0
 800c428:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c42a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	3740      	adds	r7, #64	; 0x40
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}
 800c434:	58024400 	.word	0x58024400
 800c438:	03d09000 	.word	0x03d09000
 800c43c:	003d0900 	.word	0x003d0900
 800c440:	02faf080 	.word	0x02faf080

0800c444 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c448:	f7fe f92e 	bl	800a6a8 <HAL_RCC_GetHCLKFreq>
 800c44c:	4602      	mov	r2, r0
 800c44e:	4b06      	ldr	r3, [pc, #24]	; (800c468 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c450:	6a1b      	ldr	r3, [r3, #32]
 800c452:	091b      	lsrs	r3, r3, #4
 800c454:	f003 0307 	and.w	r3, r3, #7
 800c458:	4904      	ldr	r1, [pc, #16]	; (800c46c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c45a:	5ccb      	ldrb	r3, [r1, r3]
 800c45c:	f003 031f 	and.w	r3, r3, #31
 800c460:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c464:	4618      	mov	r0, r3
 800c466:	bd80      	pop	{r7, pc}
 800c468:	58024400 	.word	0x58024400
 800c46c:	08017aa0 	.word	0x08017aa0

0800c470 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c470:	b480      	push	{r7}
 800c472:	b089      	sub	sp, #36	; 0x24
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c478:	4ba1      	ldr	r3, [pc, #644]	; (800c700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c47a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c47c:	f003 0303 	and.w	r3, r3, #3
 800c480:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c482:	4b9f      	ldr	r3, [pc, #636]	; (800c700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c486:	0b1b      	lsrs	r3, r3, #12
 800c488:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c48c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c48e:	4b9c      	ldr	r3, [pc, #624]	; (800c700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c492:	091b      	lsrs	r3, r3, #4
 800c494:	f003 0301 	and.w	r3, r3, #1
 800c498:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c49a:	4b99      	ldr	r3, [pc, #612]	; (800c700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c49c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c49e:	08db      	lsrs	r3, r3, #3
 800c4a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c4a4:	693a      	ldr	r2, [r7, #16]
 800c4a6:	fb02 f303 	mul.w	r3, r2, r3
 800c4aa:	ee07 3a90 	vmov	s15, r3
 800c4ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c4b6:	697b      	ldr	r3, [r7, #20]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	f000 8111 	beq.w	800c6e0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c4be:	69bb      	ldr	r3, [r7, #24]
 800c4c0:	2b02      	cmp	r3, #2
 800c4c2:	f000 8083 	beq.w	800c5cc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c4c6:	69bb      	ldr	r3, [r7, #24]
 800c4c8:	2b02      	cmp	r3, #2
 800c4ca:	f200 80a1 	bhi.w	800c610 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c4ce:	69bb      	ldr	r3, [r7, #24]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d003      	beq.n	800c4dc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c4d4:	69bb      	ldr	r3, [r7, #24]
 800c4d6:	2b01      	cmp	r3, #1
 800c4d8:	d056      	beq.n	800c588 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c4da:	e099      	b.n	800c610 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c4dc:	4b88      	ldr	r3, [pc, #544]	; (800c700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f003 0320 	and.w	r3, r3, #32
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d02d      	beq.n	800c544 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c4e8:	4b85      	ldr	r3, [pc, #532]	; (800c700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	08db      	lsrs	r3, r3, #3
 800c4ee:	f003 0303 	and.w	r3, r3, #3
 800c4f2:	4a84      	ldr	r2, [pc, #528]	; (800c704 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c4f4:	fa22 f303 	lsr.w	r3, r2, r3
 800c4f8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	ee07 3a90 	vmov	s15, r3
 800c500:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c504:	697b      	ldr	r3, [r7, #20]
 800c506:	ee07 3a90 	vmov	s15, r3
 800c50a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c50e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c512:	4b7b      	ldr	r3, [pc, #492]	; (800c700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c51a:	ee07 3a90 	vmov	s15, r3
 800c51e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c522:	ed97 6a03 	vldr	s12, [r7, #12]
 800c526:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c708 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c52a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c52e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c532:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c53a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c53e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c542:	e087      	b.n	800c654 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	ee07 3a90 	vmov	s15, r3
 800c54a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c54e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c70c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c556:	4b6a      	ldr	r3, [pc, #424]	; (800c700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c55a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c55e:	ee07 3a90 	vmov	s15, r3
 800c562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c566:	ed97 6a03 	vldr	s12, [r7, #12]
 800c56a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c708 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c56e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c576:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c57a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c57e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c582:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c586:	e065      	b.n	800c654 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	ee07 3a90 	vmov	s15, r3
 800c58e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c592:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c710 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c59a:	4b59      	ldr	r3, [pc, #356]	; (800c700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c59c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c59e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5a2:	ee07 3a90 	vmov	s15, r3
 800c5a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5ae:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c708 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c5b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c5ca:	e043      	b.n	800c654 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c5cc:	697b      	ldr	r3, [r7, #20]
 800c5ce:	ee07 3a90 	vmov	s15, r3
 800c5d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5d6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c714 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c5da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5de:	4b48      	ldr	r3, [pc, #288]	; (800c700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5e6:	ee07 3a90 	vmov	s15, r3
 800c5ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5f2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c708 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c5f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c60a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c60e:	e021      	b.n	800c654 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c610:	697b      	ldr	r3, [r7, #20]
 800c612:	ee07 3a90 	vmov	s15, r3
 800c616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c61a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c710 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c61e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c622:	4b37      	ldr	r3, [pc, #220]	; (800c700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c62a:	ee07 3a90 	vmov	s15, r3
 800c62e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c632:	ed97 6a03 	vldr	s12, [r7, #12]
 800c636:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c708 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c63a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c63e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c642:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c64a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c64e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c652:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c654:	4b2a      	ldr	r3, [pc, #168]	; (800c700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c658:	0a5b      	lsrs	r3, r3, #9
 800c65a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c65e:	ee07 3a90 	vmov	s15, r3
 800c662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c666:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c66a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c66e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c672:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c676:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c67a:	ee17 2a90 	vmov	r2, s15
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c682:	4b1f      	ldr	r3, [pc, #124]	; (800c700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c686:	0c1b      	lsrs	r3, r3, #16
 800c688:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c68c:	ee07 3a90 	vmov	s15, r3
 800c690:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c694:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c698:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c69c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c6a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c6a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6a8:	ee17 2a90 	vmov	r2, s15
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c6b0:	4b13      	ldr	r3, [pc, #76]	; (800c700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6b4:	0e1b      	lsrs	r3, r3, #24
 800c6b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6ba:	ee07 3a90 	vmov	s15, r3
 800c6be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c6c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c6ca:	edd7 6a07 	vldr	s13, [r7, #28]
 800c6ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c6d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6d6:	ee17 2a90 	vmov	r2, s15
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c6de:	e008      	b.n	800c6f2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	609a      	str	r2, [r3, #8]
}
 800c6f2:	bf00      	nop
 800c6f4:	3724      	adds	r7, #36	; 0x24
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fc:	4770      	bx	lr
 800c6fe:	bf00      	nop
 800c700:	58024400 	.word	0x58024400
 800c704:	03d09000 	.word	0x03d09000
 800c708:	46000000 	.word	0x46000000
 800c70c:	4c742400 	.word	0x4c742400
 800c710:	4a742400 	.word	0x4a742400
 800c714:	4c3ebc20 	.word	0x4c3ebc20

0800c718 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c718:	b480      	push	{r7}
 800c71a:	b089      	sub	sp, #36	; 0x24
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c720:	4ba1      	ldr	r3, [pc, #644]	; (800c9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c724:	f003 0303 	and.w	r3, r3, #3
 800c728:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c72a:	4b9f      	ldr	r3, [pc, #636]	; (800c9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c72c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c72e:	0d1b      	lsrs	r3, r3, #20
 800c730:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c734:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c736:	4b9c      	ldr	r3, [pc, #624]	; (800c9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c73a:	0a1b      	lsrs	r3, r3, #8
 800c73c:	f003 0301 	and.w	r3, r3, #1
 800c740:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c742:	4b99      	ldr	r3, [pc, #612]	; (800c9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c746:	08db      	lsrs	r3, r3, #3
 800c748:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c74c:	693a      	ldr	r2, [r7, #16]
 800c74e:	fb02 f303 	mul.w	r3, r2, r3
 800c752:	ee07 3a90 	vmov	s15, r3
 800c756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c75a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c75e:	697b      	ldr	r3, [r7, #20]
 800c760:	2b00      	cmp	r3, #0
 800c762:	f000 8111 	beq.w	800c988 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c766:	69bb      	ldr	r3, [r7, #24]
 800c768:	2b02      	cmp	r3, #2
 800c76a:	f000 8083 	beq.w	800c874 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c76e:	69bb      	ldr	r3, [r7, #24]
 800c770:	2b02      	cmp	r3, #2
 800c772:	f200 80a1 	bhi.w	800c8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c776:	69bb      	ldr	r3, [r7, #24]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d003      	beq.n	800c784 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c77c:	69bb      	ldr	r3, [r7, #24]
 800c77e:	2b01      	cmp	r3, #1
 800c780:	d056      	beq.n	800c830 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c782:	e099      	b.n	800c8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c784:	4b88      	ldr	r3, [pc, #544]	; (800c9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f003 0320 	and.w	r3, r3, #32
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d02d      	beq.n	800c7ec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c790:	4b85      	ldr	r3, [pc, #532]	; (800c9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	08db      	lsrs	r3, r3, #3
 800c796:	f003 0303 	and.w	r3, r3, #3
 800c79a:	4a84      	ldr	r2, [pc, #528]	; (800c9ac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c79c:	fa22 f303 	lsr.w	r3, r2, r3
 800c7a0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	ee07 3a90 	vmov	s15, r3
 800c7a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	ee07 3a90 	vmov	s15, r3
 800c7b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7ba:	4b7b      	ldr	r3, [pc, #492]	; (800c9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7c2:	ee07 3a90 	vmov	s15, r3
 800c7c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7ce:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c9b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c7d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c7ea:	e087      	b.n	800c8fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	ee07 3a90 	vmov	s15, r3
 800c7f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7f6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c7fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7fe:	4b6a      	ldr	r3, [pc, #424]	; (800c9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c806:	ee07 3a90 	vmov	s15, r3
 800c80a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c80e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c812:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c9b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c81a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c81e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c82a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c82e:	e065      	b.n	800c8fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	ee07 3a90 	vmov	s15, r3
 800c836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c83a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c83e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c842:	4b59      	ldr	r3, [pc, #356]	; (800c9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c84a:	ee07 3a90 	vmov	s15, r3
 800c84e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c852:	ed97 6a03 	vldr	s12, [r7, #12]
 800c856:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c9b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c85a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c85e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c86a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c86e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c872:	e043      	b.n	800c8fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c874:	697b      	ldr	r3, [r7, #20]
 800c876:	ee07 3a90 	vmov	s15, r3
 800c87a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c87e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c9bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c886:	4b48      	ldr	r3, [pc, #288]	; (800c9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c88a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c88e:	ee07 3a90 	vmov	s15, r3
 800c892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c896:	ed97 6a03 	vldr	s12, [r7, #12]
 800c89a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c9b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c89e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c8b6:	e021      	b.n	800c8fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c8b8:	697b      	ldr	r3, [r7, #20]
 800c8ba:	ee07 3a90 	vmov	s15, r3
 800c8be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c8c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8ca:	4b37      	ldr	r3, [pc, #220]	; (800c9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8d2:	ee07 3a90 	vmov	s15, r3
 800c8d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8da:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8de:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c9b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c8e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c8fa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c8fc:	4b2a      	ldr	r3, [pc, #168]	; (800c9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c900:	0a5b      	lsrs	r3, r3, #9
 800c902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c906:	ee07 3a90 	vmov	s15, r3
 800c90a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c90e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c912:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c916:	edd7 6a07 	vldr	s13, [r7, #28]
 800c91a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c91e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c922:	ee17 2a90 	vmov	r2, s15
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c92a:	4b1f      	ldr	r3, [pc, #124]	; (800c9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c92c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c92e:	0c1b      	lsrs	r3, r3, #16
 800c930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c934:	ee07 3a90 	vmov	s15, r3
 800c938:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c93c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c940:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c944:	edd7 6a07 	vldr	s13, [r7, #28]
 800c948:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c94c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c950:	ee17 2a90 	vmov	r2, s15
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c958:	4b13      	ldr	r3, [pc, #76]	; (800c9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c95a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c95c:	0e1b      	lsrs	r3, r3, #24
 800c95e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c962:	ee07 3a90 	vmov	s15, r3
 800c966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c96a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c96e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c972:	edd7 6a07 	vldr	s13, [r7, #28]
 800c976:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c97a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c97e:	ee17 2a90 	vmov	r2, s15
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c986:	e008      	b.n	800c99a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2200      	movs	r2, #0
 800c98c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2200      	movs	r2, #0
 800c992:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2200      	movs	r2, #0
 800c998:	609a      	str	r2, [r3, #8]
}
 800c99a:	bf00      	nop
 800c99c:	3724      	adds	r7, #36	; 0x24
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a4:	4770      	bx	lr
 800c9a6:	bf00      	nop
 800c9a8:	58024400 	.word	0x58024400
 800c9ac:	03d09000 	.word	0x03d09000
 800c9b0:	46000000 	.word	0x46000000
 800c9b4:	4c742400 	.word	0x4c742400
 800c9b8:	4a742400 	.word	0x4a742400
 800c9bc:	4c3ebc20 	.word	0x4c3ebc20

0800c9c0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	b089      	sub	sp, #36	; 0x24
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c9c8:	4ba0      	ldr	r3, [pc, #640]	; (800cc4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c9ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9cc:	f003 0303 	and.w	r3, r3, #3
 800c9d0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c9d2:	4b9e      	ldr	r3, [pc, #632]	; (800cc4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c9d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9d6:	091b      	lsrs	r3, r3, #4
 800c9d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9dc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c9de:	4b9b      	ldr	r3, [pc, #620]	; (800cc4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c9e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9e2:	f003 0301 	and.w	r3, r3, #1
 800c9e6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c9e8:	4b98      	ldr	r3, [pc, #608]	; (800cc4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c9ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9ec:	08db      	lsrs	r3, r3, #3
 800c9ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c9f2:	693a      	ldr	r2, [r7, #16]
 800c9f4:	fb02 f303 	mul.w	r3, r2, r3
 800c9f8:	ee07 3a90 	vmov	s15, r3
 800c9fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca00:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ca04:	697b      	ldr	r3, [r7, #20]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	f000 8111 	beq.w	800cc2e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ca0c:	69bb      	ldr	r3, [r7, #24]
 800ca0e:	2b02      	cmp	r3, #2
 800ca10:	f000 8083 	beq.w	800cb1a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ca14:	69bb      	ldr	r3, [r7, #24]
 800ca16:	2b02      	cmp	r3, #2
 800ca18:	f200 80a1 	bhi.w	800cb5e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ca1c:	69bb      	ldr	r3, [r7, #24]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d003      	beq.n	800ca2a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ca22:	69bb      	ldr	r3, [r7, #24]
 800ca24:	2b01      	cmp	r3, #1
 800ca26:	d056      	beq.n	800cad6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ca28:	e099      	b.n	800cb5e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca2a:	4b88      	ldr	r3, [pc, #544]	; (800cc4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	f003 0320 	and.w	r3, r3, #32
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d02d      	beq.n	800ca92 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca36:	4b85      	ldr	r3, [pc, #532]	; (800cc4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	08db      	lsrs	r3, r3, #3
 800ca3c:	f003 0303 	and.w	r3, r3, #3
 800ca40:	4a83      	ldr	r2, [pc, #524]	; (800cc50 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ca42:	fa22 f303 	lsr.w	r3, r2, r3
 800ca46:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	ee07 3a90 	vmov	s15, r3
 800ca4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	ee07 3a90 	vmov	s15, r3
 800ca58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca60:	4b7a      	ldr	r3, [pc, #488]	; (800cc4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca68:	ee07 3a90 	vmov	s15, r3
 800ca6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca70:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca74:	eddf 5a77 	vldr	s11, [pc, #476]	; 800cc54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ca78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca8c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ca90:	e087      	b.n	800cba2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	ee07 3a90 	vmov	s15, r3
 800ca98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca9c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800cc58 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800caa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800caa4:	4b69      	ldr	r3, [pc, #420]	; (800cc4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800caa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caac:	ee07 3a90 	vmov	s15, r3
 800cab0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cab4:	ed97 6a03 	vldr	s12, [r7, #12]
 800cab8:	eddf 5a66 	vldr	s11, [pc, #408]	; 800cc54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cabc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cac0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cac4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cac8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cacc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cad0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cad4:	e065      	b.n	800cba2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cad6:	697b      	ldr	r3, [r7, #20]
 800cad8:	ee07 3a90 	vmov	s15, r3
 800cadc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cae0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800cc5c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800cae4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cae8:	4b58      	ldr	r3, [pc, #352]	; (800cc4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800caea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caf0:	ee07 3a90 	vmov	s15, r3
 800caf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800caf8:	ed97 6a03 	vldr	s12, [r7, #12]
 800cafc:	eddf 5a55 	vldr	s11, [pc, #340]	; 800cc54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cb00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb14:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb18:	e043      	b.n	800cba2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	ee07 3a90 	vmov	s15, r3
 800cb20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb24:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800cc60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800cb28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb2c:	4b47      	ldr	r3, [pc, #284]	; (800cc4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb34:	ee07 3a90 	vmov	s15, r3
 800cb38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb3c:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb40:	eddf 5a44 	vldr	s11, [pc, #272]	; 800cc54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cb44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb54:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb58:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb5c:	e021      	b.n	800cba2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cb5e:	697b      	ldr	r3, [r7, #20]
 800cb60:	ee07 3a90 	vmov	s15, r3
 800cb64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb68:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800cc58 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cb6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb70:	4b36      	ldr	r3, [pc, #216]	; (800cc4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb78:	ee07 3a90 	vmov	s15, r3
 800cb7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb80:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb84:	eddf 5a33 	vldr	s11, [pc, #204]	; 800cc54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cb88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb98:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cba0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800cba2:	4b2a      	ldr	r3, [pc, #168]	; (800cc4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cba6:	0a5b      	lsrs	r3, r3, #9
 800cba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbac:	ee07 3a90 	vmov	s15, r3
 800cbb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cbb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cbbc:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbc8:	ee17 2a90 	vmov	r2, s15
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800cbd0:	4b1e      	ldr	r3, [pc, #120]	; (800cc4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cbd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbd4:	0c1b      	lsrs	r3, r3, #16
 800cbd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbda:	ee07 3a90 	vmov	s15, r3
 800cbde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbe2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cbe6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cbea:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbf6:	ee17 2a90 	vmov	r2, s15
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800cbfe:	4b13      	ldr	r3, [pc, #76]	; (800cc4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc02:	0e1b      	lsrs	r3, r3, #24
 800cc04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc08:	ee07 3a90 	vmov	s15, r3
 800cc0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc14:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc18:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc24:	ee17 2a90 	vmov	r2, s15
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800cc2c:	e008      	b.n	800cc40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	2200      	movs	r2, #0
 800cc32:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2200      	movs	r2, #0
 800cc38:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	609a      	str	r2, [r3, #8]
}
 800cc40:	bf00      	nop
 800cc42:	3724      	adds	r7, #36	; 0x24
 800cc44:	46bd      	mov	sp, r7
 800cc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4a:	4770      	bx	lr
 800cc4c:	58024400 	.word	0x58024400
 800cc50:	03d09000 	.word	0x03d09000
 800cc54:	46000000 	.word	0x46000000
 800cc58:	4c742400 	.word	0x4c742400
 800cc5c:	4a742400 	.word	0x4a742400
 800cc60:	4c3ebc20 	.word	0x4c3ebc20

0800cc64 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b084      	sub	sp, #16
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
 800cc6c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cc72:	4b53      	ldr	r3, [pc, #332]	; (800cdc0 <RCCEx_PLL2_Config+0x15c>)
 800cc74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc76:	f003 0303 	and.w	r3, r3, #3
 800cc7a:	2b03      	cmp	r3, #3
 800cc7c:	d101      	bne.n	800cc82 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cc7e:	2301      	movs	r3, #1
 800cc80:	e099      	b.n	800cdb6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cc82:	4b4f      	ldr	r3, [pc, #316]	; (800cdc0 <RCCEx_PLL2_Config+0x15c>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	4a4e      	ldr	r2, [pc, #312]	; (800cdc0 <RCCEx_PLL2_Config+0x15c>)
 800cc88:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cc8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc8e:	f7f6 fe95 	bl	80039bc <HAL_GetTick>
 800cc92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cc94:	e008      	b.n	800cca8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cc96:	f7f6 fe91 	bl	80039bc <HAL_GetTick>
 800cc9a:	4602      	mov	r2, r0
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	1ad3      	subs	r3, r2, r3
 800cca0:	2b02      	cmp	r3, #2
 800cca2:	d901      	bls.n	800cca8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cca4:	2303      	movs	r3, #3
 800cca6:	e086      	b.n	800cdb6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cca8:	4b45      	ldr	r3, [pc, #276]	; (800cdc0 <RCCEx_PLL2_Config+0x15c>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d1f0      	bne.n	800cc96 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ccb4:	4b42      	ldr	r3, [pc, #264]	; (800cdc0 <RCCEx_PLL2_Config+0x15c>)
 800ccb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccb8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	031b      	lsls	r3, r3, #12
 800ccc2:	493f      	ldr	r1, [pc, #252]	; (800cdc0 <RCCEx_PLL2_Config+0x15c>)
 800ccc4:	4313      	orrs	r3, r2
 800ccc6:	628b      	str	r3, [r1, #40]	; 0x28
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	685b      	ldr	r3, [r3, #4]
 800cccc:	3b01      	subs	r3, #1
 800ccce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	689b      	ldr	r3, [r3, #8]
 800ccd6:	3b01      	subs	r3, #1
 800ccd8:	025b      	lsls	r3, r3, #9
 800ccda:	b29b      	uxth	r3, r3
 800ccdc:	431a      	orrs	r2, r3
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	68db      	ldr	r3, [r3, #12]
 800cce2:	3b01      	subs	r3, #1
 800cce4:	041b      	lsls	r3, r3, #16
 800cce6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ccea:	431a      	orrs	r2, r3
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	691b      	ldr	r3, [r3, #16]
 800ccf0:	3b01      	subs	r3, #1
 800ccf2:	061b      	lsls	r3, r3, #24
 800ccf4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ccf8:	4931      	ldr	r1, [pc, #196]	; (800cdc0 <RCCEx_PLL2_Config+0x15c>)
 800ccfa:	4313      	orrs	r3, r2
 800ccfc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ccfe:	4b30      	ldr	r3, [pc, #192]	; (800cdc0 <RCCEx_PLL2_Config+0x15c>)
 800cd00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd02:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	695b      	ldr	r3, [r3, #20]
 800cd0a:	492d      	ldr	r1, [pc, #180]	; (800cdc0 <RCCEx_PLL2_Config+0x15c>)
 800cd0c:	4313      	orrs	r3, r2
 800cd0e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cd10:	4b2b      	ldr	r3, [pc, #172]	; (800cdc0 <RCCEx_PLL2_Config+0x15c>)
 800cd12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd14:	f023 0220 	bic.w	r2, r3, #32
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	699b      	ldr	r3, [r3, #24]
 800cd1c:	4928      	ldr	r1, [pc, #160]	; (800cdc0 <RCCEx_PLL2_Config+0x15c>)
 800cd1e:	4313      	orrs	r3, r2
 800cd20:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cd22:	4b27      	ldr	r3, [pc, #156]	; (800cdc0 <RCCEx_PLL2_Config+0x15c>)
 800cd24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd26:	4a26      	ldr	r2, [pc, #152]	; (800cdc0 <RCCEx_PLL2_Config+0x15c>)
 800cd28:	f023 0310 	bic.w	r3, r3, #16
 800cd2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cd2e:	4b24      	ldr	r3, [pc, #144]	; (800cdc0 <RCCEx_PLL2_Config+0x15c>)
 800cd30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd32:	4b24      	ldr	r3, [pc, #144]	; (800cdc4 <RCCEx_PLL2_Config+0x160>)
 800cd34:	4013      	ands	r3, r2
 800cd36:	687a      	ldr	r2, [r7, #4]
 800cd38:	69d2      	ldr	r2, [r2, #28]
 800cd3a:	00d2      	lsls	r2, r2, #3
 800cd3c:	4920      	ldr	r1, [pc, #128]	; (800cdc0 <RCCEx_PLL2_Config+0x15c>)
 800cd3e:	4313      	orrs	r3, r2
 800cd40:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cd42:	4b1f      	ldr	r3, [pc, #124]	; (800cdc0 <RCCEx_PLL2_Config+0x15c>)
 800cd44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd46:	4a1e      	ldr	r2, [pc, #120]	; (800cdc0 <RCCEx_PLL2_Config+0x15c>)
 800cd48:	f043 0310 	orr.w	r3, r3, #16
 800cd4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d106      	bne.n	800cd62 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cd54:	4b1a      	ldr	r3, [pc, #104]	; (800cdc0 <RCCEx_PLL2_Config+0x15c>)
 800cd56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd58:	4a19      	ldr	r2, [pc, #100]	; (800cdc0 <RCCEx_PLL2_Config+0x15c>)
 800cd5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cd5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cd60:	e00f      	b.n	800cd82 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	2b01      	cmp	r3, #1
 800cd66:	d106      	bne.n	800cd76 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cd68:	4b15      	ldr	r3, [pc, #84]	; (800cdc0 <RCCEx_PLL2_Config+0x15c>)
 800cd6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd6c:	4a14      	ldr	r2, [pc, #80]	; (800cdc0 <RCCEx_PLL2_Config+0x15c>)
 800cd6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cd72:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cd74:	e005      	b.n	800cd82 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cd76:	4b12      	ldr	r3, [pc, #72]	; (800cdc0 <RCCEx_PLL2_Config+0x15c>)
 800cd78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd7a:	4a11      	ldr	r2, [pc, #68]	; (800cdc0 <RCCEx_PLL2_Config+0x15c>)
 800cd7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cd80:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cd82:	4b0f      	ldr	r3, [pc, #60]	; (800cdc0 <RCCEx_PLL2_Config+0x15c>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	4a0e      	ldr	r2, [pc, #56]	; (800cdc0 <RCCEx_PLL2_Config+0x15c>)
 800cd88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cd8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cd8e:	f7f6 fe15 	bl	80039bc <HAL_GetTick>
 800cd92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cd94:	e008      	b.n	800cda8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cd96:	f7f6 fe11 	bl	80039bc <HAL_GetTick>
 800cd9a:	4602      	mov	r2, r0
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	1ad3      	subs	r3, r2, r3
 800cda0:	2b02      	cmp	r3, #2
 800cda2:	d901      	bls.n	800cda8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cda4:	2303      	movs	r3, #3
 800cda6:	e006      	b.n	800cdb6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cda8:	4b05      	ldr	r3, [pc, #20]	; (800cdc0 <RCCEx_PLL2_Config+0x15c>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d0f0      	beq.n	800cd96 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cdb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	3710      	adds	r7, #16
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd80      	pop	{r7, pc}
 800cdbe:	bf00      	nop
 800cdc0:	58024400 	.word	0x58024400
 800cdc4:	ffff0007 	.word	0xffff0007

0800cdc8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b084      	sub	sp, #16
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
 800cdd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cdd6:	4b53      	ldr	r3, [pc, #332]	; (800cf24 <RCCEx_PLL3_Config+0x15c>)
 800cdd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdda:	f003 0303 	and.w	r3, r3, #3
 800cdde:	2b03      	cmp	r3, #3
 800cde0:	d101      	bne.n	800cde6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cde2:	2301      	movs	r3, #1
 800cde4:	e099      	b.n	800cf1a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cde6:	4b4f      	ldr	r3, [pc, #316]	; (800cf24 <RCCEx_PLL3_Config+0x15c>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	4a4e      	ldr	r2, [pc, #312]	; (800cf24 <RCCEx_PLL3_Config+0x15c>)
 800cdec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cdf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cdf2:	f7f6 fde3 	bl	80039bc <HAL_GetTick>
 800cdf6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cdf8:	e008      	b.n	800ce0c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cdfa:	f7f6 fddf 	bl	80039bc <HAL_GetTick>
 800cdfe:	4602      	mov	r2, r0
 800ce00:	68bb      	ldr	r3, [r7, #8]
 800ce02:	1ad3      	subs	r3, r2, r3
 800ce04:	2b02      	cmp	r3, #2
 800ce06:	d901      	bls.n	800ce0c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ce08:	2303      	movs	r3, #3
 800ce0a:	e086      	b.n	800cf1a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ce0c:	4b45      	ldr	r3, [pc, #276]	; (800cf24 <RCCEx_PLL3_Config+0x15c>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d1f0      	bne.n	800cdfa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ce18:	4b42      	ldr	r3, [pc, #264]	; (800cf24 <RCCEx_PLL3_Config+0x15c>)
 800ce1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce1c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	051b      	lsls	r3, r3, #20
 800ce26:	493f      	ldr	r1, [pc, #252]	; (800cf24 <RCCEx_PLL3_Config+0x15c>)
 800ce28:	4313      	orrs	r3, r2
 800ce2a:	628b      	str	r3, [r1, #40]	; 0x28
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	685b      	ldr	r3, [r3, #4]
 800ce30:	3b01      	subs	r3, #1
 800ce32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	689b      	ldr	r3, [r3, #8]
 800ce3a:	3b01      	subs	r3, #1
 800ce3c:	025b      	lsls	r3, r3, #9
 800ce3e:	b29b      	uxth	r3, r3
 800ce40:	431a      	orrs	r2, r3
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	68db      	ldr	r3, [r3, #12]
 800ce46:	3b01      	subs	r3, #1
 800ce48:	041b      	lsls	r3, r3, #16
 800ce4a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ce4e:	431a      	orrs	r2, r3
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	691b      	ldr	r3, [r3, #16]
 800ce54:	3b01      	subs	r3, #1
 800ce56:	061b      	lsls	r3, r3, #24
 800ce58:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ce5c:	4931      	ldr	r1, [pc, #196]	; (800cf24 <RCCEx_PLL3_Config+0x15c>)
 800ce5e:	4313      	orrs	r3, r2
 800ce60:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ce62:	4b30      	ldr	r3, [pc, #192]	; (800cf24 <RCCEx_PLL3_Config+0x15c>)
 800ce64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce66:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	695b      	ldr	r3, [r3, #20]
 800ce6e:	492d      	ldr	r1, [pc, #180]	; (800cf24 <RCCEx_PLL3_Config+0x15c>)
 800ce70:	4313      	orrs	r3, r2
 800ce72:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ce74:	4b2b      	ldr	r3, [pc, #172]	; (800cf24 <RCCEx_PLL3_Config+0x15c>)
 800ce76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce78:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	699b      	ldr	r3, [r3, #24]
 800ce80:	4928      	ldr	r1, [pc, #160]	; (800cf24 <RCCEx_PLL3_Config+0x15c>)
 800ce82:	4313      	orrs	r3, r2
 800ce84:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ce86:	4b27      	ldr	r3, [pc, #156]	; (800cf24 <RCCEx_PLL3_Config+0x15c>)
 800ce88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce8a:	4a26      	ldr	r2, [pc, #152]	; (800cf24 <RCCEx_PLL3_Config+0x15c>)
 800ce8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ce90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ce92:	4b24      	ldr	r3, [pc, #144]	; (800cf24 <RCCEx_PLL3_Config+0x15c>)
 800ce94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce96:	4b24      	ldr	r3, [pc, #144]	; (800cf28 <RCCEx_PLL3_Config+0x160>)
 800ce98:	4013      	ands	r3, r2
 800ce9a:	687a      	ldr	r2, [r7, #4]
 800ce9c:	69d2      	ldr	r2, [r2, #28]
 800ce9e:	00d2      	lsls	r2, r2, #3
 800cea0:	4920      	ldr	r1, [pc, #128]	; (800cf24 <RCCEx_PLL3_Config+0x15c>)
 800cea2:	4313      	orrs	r3, r2
 800cea4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cea6:	4b1f      	ldr	r3, [pc, #124]	; (800cf24 <RCCEx_PLL3_Config+0x15c>)
 800cea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceaa:	4a1e      	ldr	r2, [pc, #120]	; (800cf24 <RCCEx_PLL3_Config+0x15c>)
 800ceac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ceb0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d106      	bne.n	800cec6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ceb8:	4b1a      	ldr	r3, [pc, #104]	; (800cf24 <RCCEx_PLL3_Config+0x15c>)
 800ceba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cebc:	4a19      	ldr	r2, [pc, #100]	; (800cf24 <RCCEx_PLL3_Config+0x15c>)
 800cebe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cec2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cec4:	e00f      	b.n	800cee6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	2b01      	cmp	r3, #1
 800ceca:	d106      	bne.n	800ceda <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cecc:	4b15      	ldr	r3, [pc, #84]	; (800cf24 <RCCEx_PLL3_Config+0x15c>)
 800cece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ced0:	4a14      	ldr	r2, [pc, #80]	; (800cf24 <RCCEx_PLL3_Config+0x15c>)
 800ced2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ced6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ced8:	e005      	b.n	800cee6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ceda:	4b12      	ldr	r3, [pc, #72]	; (800cf24 <RCCEx_PLL3_Config+0x15c>)
 800cedc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cede:	4a11      	ldr	r2, [pc, #68]	; (800cf24 <RCCEx_PLL3_Config+0x15c>)
 800cee0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cee4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cee6:	4b0f      	ldr	r3, [pc, #60]	; (800cf24 <RCCEx_PLL3_Config+0x15c>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	4a0e      	ldr	r2, [pc, #56]	; (800cf24 <RCCEx_PLL3_Config+0x15c>)
 800ceec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cef0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cef2:	f7f6 fd63 	bl	80039bc <HAL_GetTick>
 800cef6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cef8:	e008      	b.n	800cf0c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cefa:	f7f6 fd5f 	bl	80039bc <HAL_GetTick>
 800cefe:	4602      	mov	r2, r0
 800cf00:	68bb      	ldr	r3, [r7, #8]
 800cf02:	1ad3      	subs	r3, r2, r3
 800cf04:	2b02      	cmp	r3, #2
 800cf06:	d901      	bls.n	800cf0c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cf08:	2303      	movs	r3, #3
 800cf0a:	e006      	b.n	800cf1a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cf0c:	4b05      	ldr	r3, [pc, #20]	; (800cf24 <RCCEx_PLL3_Config+0x15c>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d0f0      	beq.n	800cefa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cf18:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	3710      	adds	r7, #16
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}
 800cf22:	bf00      	nop
 800cf24:	58024400 	.word	0x58024400
 800cf28:	ffff0007 	.word	0xffff0007

0800cf2c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b08a      	sub	sp, #40	; 0x28
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d101      	bne.n	800cf3e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	e075      	b.n	800d02a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cf44:	b2db      	uxtb	r3, r3
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d105      	bne.n	800cf56 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800cf50:	6878      	ldr	r0, [r7, #4]
 800cf52:	f7f5 fe9f 	bl	8002c94 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2204      	movs	r2, #4
 800cf5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	f000 f868 	bl	800d034 <HAL_SD_InitCard>
 800cf64:	4603      	mov	r3, r0
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d001      	beq.n	800cf6e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	e05d      	b.n	800d02a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800cf6e:	f107 0308 	add.w	r3, r7, #8
 800cf72:	4619      	mov	r1, r3
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f000 fdaf 	bl	800dad8 <HAL_SD_GetCardStatus>
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d001      	beq.n	800cf84 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800cf80:	2301      	movs	r3, #1
 800cf82:	e052      	b.n	800d02a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800cf84:	7e3b      	ldrb	r3, [r7, #24]
 800cf86:	b2db      	uxtb	r3, r3
 800cf88:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800cf8a:	7e7b      	ldrb	r3, [r7, #25]
 800cf8c:	b2db      	uxtb	r3, r3
 800cf8e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf94:	2b01      	cmp	r3, #1
 800cf96:	d10a      	bne.n	800cfae <HAL_SD_Init+0x82>
 800cf98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d102      	bne.n	800cfa4 <HAL_SD_Init+0x78>
 800cf9e:	6a3b      	ldr	r3, [r7, #32]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d004      	beq.n	800cfae <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cfaa:	659a      	str	r2, [r3, #88]	; 0x58
 800cfac:	e00b      	b.n	800cfc6 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfb2:	2b01      	cmp	r3, #1
 800cfb4:	d104      	bne.n	800cfc0 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cfbc:	659a      	str	r2, [r3, #88]	; 0x58
 800cfbe:	e002      	b.n	800cfc6 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	68db      	ldr	r3, [r3, #12]
 800cfca:	4619      	mov	r1, r3
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f000 fe6d 	bl	800dcac <HAL_SD_ConfigWideBusOperation>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d001      	beq.n	800cfdc <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800cfd8:	2301      	movs	r3, #1
 800cfda:	e026      	b.n	800d02a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800cfdc:	f7f6 fcee 	bl	80039bc <HAL_GetTick>
 800cfe0:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800cfe2:	e011      	b.n	800d008 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cfe4:	f7f6 fcea 	bl	80039bc <HAL_GetTick>
 800cfe8:	4602      	mov	r2, r0
 800cfea:	69fb      	ldr	r3, [r7, #28]
 800cfec:	1ad3      	subs	r3, r2, r3
 800cfee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cff2:	d109      	bne.n	800d008 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cffa:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2201      	movs	r2, #1
 800d000:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800d004:	2303      	movs	r3, #3
 800d006:	e010      	b.n	800d02a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f000 ff61 	bl	800ded0 <HAL_SD_GetCardState>
 800d00e:	4603      	mov	r3, r0
 800d010:	2b04      	cmp	r3, #4
 800d012:	d1e7      	bne.n	800cfe4 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2200      	movs	r2, #0
 800d018:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2200      	movs	r2, #0
 800d01e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2201      	movs	r2, #1
 800d024:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800d028:	2300      	movs	r3, #0
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3728      	adds	r7, #40	; 0x28
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}
	...

0800d034 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d034:	b590      	push	{r4, r7, lr}
 800d036:	b08d      	sub	sp, #52	; 0x34
 800d038:	af02      	add	r7, sp, #8
 800d03a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d03c:	2300      	movs	r3, #0
 800d03e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d040:	2300      	movs	r3, #0
 800d042:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d044:	2300      	movs	r3, #0
 800d046:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d048:	2300      	movs	r3, #0
 800d04a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d04c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d050:	f04f 0100 	mov.w	r1, #0
 800d054:	f7fe fd24 	bl	800baa0 <HAL_RCCEx_GetPeriphCLKFreq>
 800d058:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800d05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d109      	bne.n	800d074 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2201      	movs	r2, #1
 800d064:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d06e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d070:	2301      	movs	r3, #1
 800d072:	e070      	b.n	800d156 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800d074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d076:	0a1b      	lsrs	r3, r3, #8
 800d078:	4a39      	ldr	r2, [pc, #228]	; (800d160 <HAL_SD_InitCard+0x12c>)
 800d07a:	fba2 2303 	umull	r2, r3, r2, r3
 800d07e:	091b      	lsrs	r3, r3, #4
 800d080:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681c      	ldr	r4, [r3, #0]
 800d086:	466a      	mov	r2, sp
 800d088:	f107 0318 	add.w	r3, r7, #24
 800d08c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d090:	e882 0003 	stmia.w	r2, {r0, r1}
 800d094:	f107 030c 	add.w	r3, r7, #12
 800d098:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d09a:	4620      	mov	r0, r4
 800d09c:	f004 fe6c 	bl	8011d78 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	f004 feaf 	bl	8011e08 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800d0aa:	69fb      	ldr	r3, [r7, #28]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d005      	beq.n	800d0bc <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800d0b0:	69fb      	ldr	r3, [r7, #28]
 800d0b2:	005b      	lsls	r3, r3, #1
 800d0b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0ba:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800d0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d007      	beq.n	800d0d2 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800d0c2:	4a28      	ldr	r2, [pc, #160]	; (800d164 <HAL_SD_InitCard+0x130>)
 800d0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0ca:	3301      	adds	r3, #1
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	f7f6 fc81 	bl	80039d4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f000 ffea 	bl	800e0ac <SD_PowerON>
 800d0d8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d0da:	6a3b      	ldr	r3, [r7, #32]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d00b      	beq.n	800d0f8 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2201      	movs	r2, #1
 800d0e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d0ec:	6a3b      	ldr	r3, [r7, #32]
 800d0ee:	431a      	orrs	r2, r3
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	e02e      	b.n	800d156 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f000 ff09 	bl	800df10 <SD_InitCard>
 800d0fe:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d100:	6a3b      	ldr	r3, [r7, #32]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d00b      	beq.n	800d11e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	2201      	movs	r2, #1
 800d10a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d112:	6a3b      	ldr	r3, [r7, #32]
 800d114:	431a      	orrs	r2, r3
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d11a:	2301      	movs	r3, #1
 800d11c:	e01b      	b.n	800d156 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d126:	4618      	mov	r0, r3
 800d128:	f004 ff04 	bl	8011f34 <SDMMC_CmdBlockLength>
 800d12c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d12e:	6a3b      	ldr	r3, [r7, #32]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d00f      	beq.n	800d154 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	4a0b      	ldr	r2, [pc, #44]	; (800d168 <HAL_SD_InitCard+0x134>)
 800d13a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d140:	6a3b      	ldr	r3, [r7, #32]
 800d142:	431a      	orrs	r2, r3
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2201      	movs	r2, #1
 800d14c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d150:	2301      	movs	r3, #1
 800d152:	e000      	b.n	800d156 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800d154:	2300      	movs	r3, #0
}
 800d156:	4618      	mov	r0, r3
 800d158:	372c      	adds	r7, #44	; 0x2c
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd90      	pop	{r4, r7, pc}
 800d15e:	bf00      	nop
 800d160:	014f8b59 	.word	0x014f8b59
 800d164:	00012110 	.word	0x00012110
 800d168:	1fe00fff 	.word	0x1fe00fff

0800d16c <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b08c      	sub	sp, #48	; 0x30
 800d170:	af00      	add	r7, sp, #0
 800d172:	60f8      	str	r0, [r7, #12]
 800d174:	60b9      	str	r1, [r7, #8]
 800d176:	607a      	str	r2, [r7, #4]
 800d178:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d107      	bne.n	800d194 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d188:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d190:	2301      	movs	r3, #1
 800d192:	e08d      	b.n	800d2b0 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d19a:	b2db      	uxtb	r3, r3
 800d19c:	2b01      	cmp	r3, #1
 800d19e:	f040 8086 	bne.w	800d2ae <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d1a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1aa:	683b      	ldr	r3, [r7, #0]
 800d1ac:	441a      	add	r2, r3
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d907      	bls.n	800d1c6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1ba:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	e074      	b.n	800d2b0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	2203      	movs	r2, #3
 800d1ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	68ba      	ldr	r2, [r7, #8]
 800d1da:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d1dc:	683b      	ldr	r3, [r7, #0]
 800d1de:	025a      	lsls	r2, r3, #9
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1e8:	2b01      	cmp	r3, #1
 800d1ea:	d002      	beq.n	800d1f2 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800d1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ee:	025b      	lsls	r3, r3, #9
 800d1f0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d1f2:	f04f 33ff 	mov.w	r3, #4294967295
 800d1f6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	025b      	lsls	r3, r3, #9
 800d1fc:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d1fe:	2390      	movs	r3, #144	; 0x90
 800d200:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d202:	2302      	movs	r3, #2
 800d204:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d206:	2300      	movs	r3, #0
 800d208:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d20a:	2300      	movs	r3, #0
 800d20c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	f107 0210 	add.w	r2, r7, #16
 800d216:	4611      	mov	r1, r2
 800d218:	4618      	mov	r0, r3
 800d21a:	f004 fe5f 	bl	8011edc <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	68da      	ldr	r2, [r3, #12]
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d22c:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	68ba      	ldr	r2, [r7, #8]
 800d234:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	2201      	movs	r2, #1
 800d23c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	2b01      	cmp	r3, #1
 800d242:	d90a      	bls.n	800d25a <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	2282      	movs	r2, #130	; 0x82
 800d248:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d250:	4618      	mov	r0, r3
 800d252:	f004 feb5 	bl	8011fc0 <SDMMC_CmdReadMultiBlock>
 800d256:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d258:	e009      	b.n	800d26e <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	2281      	movs	r2, #129	; 0x81
 800d25e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d266:	4618      	mov	r0, r3
 800d268:	f004 fe87 	bl	8011f7a <SDMMC_CmdReadSingleBlock>
 800d26c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d270:	2b00      	cmp	r3, #0
 800d272:	d012      	beq.n	800d29a <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	4a0f      	ldr	r2, [pc, #60]	; (800d2b8 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d27a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d282:	431a      	orrs	r2, r3
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	2201      	movs	r2, #1
 800d28c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	2200      	movs	r2, #0
 800d294:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d296:	2301      	movs	r3, #1
 800d298:	e00a      	b.n	800d2b0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d2a8:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	e000      	b.n	800d2b0 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d2ae:	2302      	movs	r3, #2
  }
}
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	3730      	adds	r7, #48	; 0x30
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}
 800d2b8:	1fe00fff 	.word	0x1fe00fff

0800d2bc <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b08c      	sub	sp, #48	; 0x30
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	60f8      	str	r0, [r7, #12]
 800d2c4:	60b9      	str	r1, [r7, #8]
 800d2c6:	607a      	str	r2, [r7, #4]
 800d2c8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d107      	bne.n	800d2e4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2d8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	e08d      	b.n	800d400 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d2ea:	b2db      	uxtb	r3, r3
 800d2ec:	2b01      	cmp	r3, #1
 800d2ee:	f040 8086 	bne.w	800d3fe <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d2f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	441a      	add	r2, r3
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d302:	429a      	cmp	r2, r3
 800d304:	d907      	bls.n	800d316 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d30a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d312:	2301      	movs	r3, #1
 800d314:	e074      	b.n	800d400 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	2203      	movs	r2, #3
 800d31a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	2200      	movs	r2, #0
 800d324:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	68ba      	ldr	r2, [r7, #8]
 800d32a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	025a      	lsls	r2, r3, #9
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d338:	2b01      	cmp	r3, #1
 800d33a:	d002      	beq.n	800d342 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800d33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d33e:	025b      	lsls	r3, r3, #9
 800d340:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d342:	f04f 33ff 	mov.w	r3, #4294967295
 800d346:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	025b      	lsls	r3, r3, #9
 800d34c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d34e:	2390      	movs	r3, #144	; 0x90
 800d350:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d352:	2300      	movs	r3, #0
 800d354:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d356:	2300      	movs	r3, #0
 800d358:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d35a:	2300      	movs	r3, #0
 800d35c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	f107 0210 	add.w	r2, r7, #16
 800d366:	4611      	mov	r1, r2
 800d368:	4618      	mov	r0, r3
 800d36a:	f004 fdb7 	bl	8011edc <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	68da      	ldr	r2, [r3, #12]
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d37c:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	68ba      	ldr	r2, [r7, #8]
 800d384:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	2201      	movs	r2, #1
 800d38c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	2b01      	cmp	r3, #1
 800d392:	d90a      	bls.n	800d3aa <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	22a0      	movs	r2, #160	; 0xa0
 800d398:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f004 fe53 	bl	801204c <SDMMC_CmdWriteMultiBlock>
 800d3a6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d3a8:	e009      	b.n	800d3be <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	2290      	movs	r2, #144	; 0x90
 800d3ae:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f004 fe25 	bl	8012006 <SDMMC_CmdWriteSingleBlock>
 800d3bc:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d012      	beq.n	800d3ea <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	4a0f      	ldr	r2, [pc, #60]	; (800d408 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800d3ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d2:	431a      	orrs	r2, r3
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	2201      	movs	r2, #1
 800d3dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d3e6:	2301      	movs	r3, #1
 800d3e8:	e00a      	b.n	800d400 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800d3f8:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	e000      	b.n	800d400 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d3fe:	2302      	movs	r3, #2
  }
}
 800d400:	4618      	mov	r0, r3
 800d402:	3730      	adds	r7, #48	; 0x30
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}
 800d408:	1fe00fff 	.word	0x1fe00fff

0800d40c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b084      	sub	sp, #16
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d418:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d420:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d424:	2b00      	cmp	r3, #0
 800d426:	d008      	beq.n	800d43a <HAL_SD_IRQHandler+0x2e>
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	f003 0308 	and.w	r3, r3, #8
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d003      	beq.n	800d43a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f001 f926 	bl	800e684 <SD_Read_IT>
 800d438:	e19a      	b.n	800d770 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d444:	2b00      	cmp	r3, #0
 800d446:	f000 80ac 	beq.w	800d5a2 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d452:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681a      	ldr	r2, [r3, #0]
 800d45e:	4b59      	ldr	r3, [pc, #356]	; (800d5c4 <HAL_SD_IRQHandler+0x1b8>)
 800d460:	400b      	ands	r3, r1
 800d462:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d472:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	68da      	ldr	r2, [r3, #12]
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d482:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	f003 0308 	and.w	r3, r3, #8
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d038      	beq.n	800d500 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	f003 0302 	and.w	r3, r3, #2
 800d494:	2b00      	cmp	r3, #0
 800d496:	d104      	bne.n	800d4a2 <HAL_SD_IRQHandler+0x96>
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	f003 0320 	and.w	r3, r3, #32
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d011      	beq.n	800d4c6 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f004 fdf4 	bl	8012094 <SDMMC_CmdStopTransfer>
 800d4ac:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d4ae:	68bb      	ldr	r3, [r7, #8]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d008      	beq.n	800d4c6 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d4b8:	68bb      	ldr	r3, [r7, #8]
 800d4ba:	431a      	orrs	r2, r3
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d4c0:	6878      	ldr	r0, [r7, #4]
 800d4c2:	f000 f95b 	bl	800d77c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	4a3f      	ldr	r2, [pc, #252]	; (800d5c8 <HAL_SD_IRQHandler+0x1bc>)
 800d4cc:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	2201      	movs	r2, #1
 800d4d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	2200      	movs	r2, #0
 800d4da:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	f003 0301 	and.w	r3, r3, #1
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d104      	bne.n	800d4f0 <HAL_SD_IRQHandler+0xe4>
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	f003 0302 	and.w	r3, r3, #2
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d003      	beq.n	800d4f8 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d4f0:	6878      	ldr	r0, [r7, #4]
 800d4f2:	f006 fdf5 	bl	80140e0 <HAL_SD_RxCpltCallback>
 800d4f6:	e13b      	b.n	800d770 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	f006 fde7 	bl	80140cc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d4fe:	e137      	b.n	800d770 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d506:	2b00      	cmp	r3, #0
 800d508:	f000 8132 	beq.w	800d770 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	2200      	movs	r2, #0
 800d512:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	2200      	movs	r2, #0
 800d51a:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	2200      	movs	r2, #0
 800d522:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	f003 0302 	and.w	r3, r3, #2
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d104      	bne.n	800d538 <HAL_SD_IRQHandler+0x12c>
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	f003 0320 	and.w	r3, r3, #32
 800d534:	2b00      	cmp	r3, #0
 800d536:	d011      	beq.n	800d55c <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	4618      	mov	r0, r3
 800d53e:	f004 fda9 	bl	8012094 <SDMMC_CmdStopTransfer>
 800d542:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d008      	beq.n	800d55c <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d54e:	68bb      	ldr	r3, [r7, #8]
 800d550:	431a      	orrs	r2, r3
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800d556:	6878      	ldr	r0, [r7, #4]
 800d558:	f000 f910 	bl	800d77c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2201      	movs	r2, #1
 800d560:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2200      	movs	r2, #0
 800d568:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	f003 0310 	and.w	r3, r3, #16
 800d570:	2b00      	cmp	r3, #0
 800d572:	d104      	bne.n	800d57e <HAL_SD_IRQHandler+0x172>
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	f003 0320 	and.w	r3, r3, #32
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d002      	beq.n	800d584 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	f006 fda4 	bl	80140cc <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	f003 0301 	and.w	r3, r3, #1
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d105      	bne.n	800d59a <HAL_SD_IRQHandler+0x18e>
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	f003 0302 	and.w	r3, r3, #2
 800d594:	2b00      	cmp	r3, #0
 800d596:	f000 80eb 	beq.w	800d770 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800d59a:	6878      	ldr	r0, [r7, #4]
 800d59c:	f006 fda0 	bl	80140e0 <HAL_SD_RxCpltCallback>
}
 800d5a0:	e0e6      	b.n	800d770 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d00d      	beq.n	800d5cc <HAL_SD_IRQHandler+0x1c0>
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	f003 0308 	and.w	r3, r3, #8
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d008      	beq.n	800d5cc <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f001 f8a8 	bl	800e710 <SD_Write_IT>
 800d5c0:	e0d6      	b.n	800d770 <HAL_SD_IRQHandler+0x364>
 800d5c2:	bf00      	nop
 800d5c4:	ffff3ec5 	.word	0xffff3ec5
 800d5c8:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5d2:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	f000 809d 	beq.w	800d716 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5e2:	f003 0302 	and.w	r3, r3, #2
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d005      	beq.n	800d5f6 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5ee:	f043 0202 	orr.w	r2, r3, #2
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5fc:	f003 0308 	and.w	r3, r3, #8
 800d600:	2b00      	cmp	r3, #0
 800d602:	d005      	beq.n	800d610 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d608:	f043 0208 	orr.w	r2, r3, #8
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d616:	f003 0320 	and.w	r3, r3, #32
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d005      	beq.n	800d62a <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d622:	f043 0220 	orr.w	r2, r3, #32
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d630:	f003 0310 	and.w	r3, r3, #16
 800d634:	2b00      	cmp	r3, #0
 800d636:	d005      	beq.n	800d644 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d63c:	f043 0210 	orr.w	r2, r3, #16
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	4a4b      	ldr	r2, [pc, #300]	; (800d778 <HAL_SD_IRQHandler+0x36c>)
 800d64a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d65a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	68da      	ldr	r2, [r3, #12]
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d66a:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d67a:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	68da      	ldr	r2, [r3, #12]
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d68a:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	4618      	mov	r0, r3
 800d692:	f004 fcff 	bl	8012094 <SDMMC_CmdStopTransfer>
 800d696:	4602      	mov	r2, r0
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d69c:	431a      	orrs	r2, r3
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	68da      	ldr	r2, [r3, #12]
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d6b0:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d6ba:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	f003 0308 	and.w	r3, r3, #8
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d00a      	beq.n	800d6dc <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2201      	movs	r2, #1
 800d6ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	f000 f851 	bl	800d77c <HAL_SD_ErrorCallback>
}
 800d6da:	e049      	b.n	800d770 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d044      	beq.n	800d770 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d040      	beq.n	800d770 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d6fc:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	2200      	movs	r2, #0
 800d704:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	2201      	movs	r2, #1
 800d70a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800d70e:	6878      	ldr	r0, [r7, #4]
 800d710:	f000 f834 	bl	800d77c <HAL_SD_ErrorCallback>
}
 800d714:	e02c      	b.n	800d770 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d71c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d720:	2b00      	cmp	r3, #0
 800d722:	d025      	beq.n	800d770 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d72c:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d734:	f003 0304 	and.w	r3, r3, #4
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d10c      	bne.n	800d756 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	f003 0320 	and.w	r3, r3, #32
 800d742:	2b00      	cmp	r3, #0
 800d744:	d003      	beq.n	800d74e <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f001 f84a 	bl	800e7e0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800d74c:	e010      	b.n	800d770 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800d74e:	6878      	ldr	r0, [r7, #4]
 800d750:	f001 f832 	bl	800e7b8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800d754:	e00c      	b.n	800d770 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	f003 0320 	and.w	r3, r3, #32
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d003      	beq.n	800d768 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f001 f833 	bl	800e7cc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800d766:	e003      	b.n	800d770 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800d768:	6878      	ldr	r0, [r7, #4]
 800d76a:	f001 f81b 	bl	800e7a4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800d76e:	e7ff      	b.n	800d770 <HAL_SD_IRQHandler+0x364>
 800d770:	bf00      	nop
 800d772:	3710      	adds	r7, #16
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}
 800d778:	18000f3a 	.word	0x18000f3a

0800d77c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d77c:	b480      	push	{r7}
 800d77e:	b083      	sub	sp, #12
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d784:	bf00      	nop
 800d786:	370c      	adds	r7, #12
 800d788:	46bd      	mov	sp, r7
 800d78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78e:	4770      	bx	lr

0800d790 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d790:	b480      	push	{r7}
 800d792:	b083      	sub	sp, #12
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
 800d798:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d79e:	0f9b      	lsrs	r3, r3, #30
 800d7a0:	b2da      	uxtb	r2, r3
 800d7a2:	683b      	ldr	r3, [r7, #0]
 800d7a4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7aa:	0e9b      	lsrs	r3, r3, #26
 800d7ac:	b2db      	uxtb	r3, r3
 800d7ae:	f003 030f 	and.w	r3, r3, #15
 800d7b2:	b2da      	uxtb	r2, r3
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7bc:	0e1b      	lsrs	r3, r3, #24
 800d7be:	b2db      	uxtb	r3, r3
 800d7c0:	f003 0303 	and.w	r3, r3, #3
 800d7c4:	b2da      	uxtb	r2, r3
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7ce:	0c1b      	lsrs	r3, r3, #16
 800d7d0:	b2da      	uxtb	r2, r3
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7da:	0a1b      	lsrs	r3, r3, #8
 800d7dc:	b2da      	uxtb	r2, r3
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7e6:	b2da      	uxtb	r2, r3
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d7f0:	0d1b      	lsrs	r3, r3, #20
 800d7f2:	b29a      	uxth	r2, r3
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d7fc:	0c1b      	lsrs	r3, r3, #16
 800d7fe:	b2db      	uxtb	r3, r3
 800d800:	f003 030f 	and.w	r3, r3, #15
 800d804:	b2da      	uxtb	r2, r3
 800d806:	683b      	ldr	r3, [r7, #0]
 800d808:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d80e:	0bdb      	lsrs	r3, r3, #15
 800d810:	b2db      	uxtb	r3, r3
 800d812:	f003 0301 	and.w	r3, r3, #1
 800d816:	b2da      	uxtb	r2, r3
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d820:	0b9b      	lsrs	r3, r3, #14
 800d822:	b2db      	uxtb	r3, r3
 800d824:	f003 0301 	and.w	r3, r3, #1
 800d828:	b2da      	uxtb	r2, r3
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d832:	0b5b      	lsrs	r3, r3, #13
 800d834:	b2db      	uxtb	r3, r3
 800d836:	f003 0301 	and.w	r3, r3, #1
 800d83a:	b2da      	uxtb	r2, r3
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d844:	0b1b      	lsrs	r3, r3, #12
 800d846:	b2db      	uxtb	r3, r3
 800d848:	f003 0301 	and.w	r3, r3, #1
 800d84c:	b2da      	uxtb	r2, r3
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	2200      	movs	r2, #0
 800d856:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d163      	bne.n	800d928 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d864:	009a      	lsls	r2, r3, #2
 800d866:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d86a:	4013      	ands	r3, r2
 800d86c:	687a      	ldr	r2, [r7, #4]
 800d86e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800d870:	0f92      	lsrs	r2, r2, #30
 800d872:	431a      	orrs	r2, r3
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d87c:	0edb      	lsrs	r3, r3, #27
 800d87e:	b2db      	uxtb	r3, r3
 800d880:	f003 0307 	and.w	r3, r3, #7
 800d884:	b2da      	uxtb	r2, r3
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d88e:	0e1b      	lsrs	r3, r3, #24
 800d890:	b2db      	uxtb	r3, r3
 800d892:	f003 0307 	and.w	r3, r3, #7
 800d896:	b2da      	uxtb	r2, r3
 800d898:	683b      	ldr	r3, [r7, #0]
 800d89a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8a0:	0d5b      	lsrs	r3, r3, #21
 800d8a2:	b2db      	uxtb	r3, r3
 800d8a4:	f003 0307 	and.w	r3, r3, #7
 800d8a8:	b2da      	uxtb	r2, r3
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8b2:	0c9b      	lsrs	r3, r3, #18
 800d8b4:	b2db      	uxtb	r3, r3
 800d8b6:	f003 0307 	and.w	r3, r3, #7
 800d8ba:	b2da      	uxtb	r2, r3
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8c4:	0bdb      	lsrs	r3, r3, #15
 800d8c6:	b2db      	uxtb	r3, r3
 800d8c8:	f003 0307 	and.w	r3, r3, #7
 800d8cc:	b2da      	uxtb	r2, r3
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	691b      	ldr	r3, [r3, #16]
 800d8d6:	1c5a      	adds	r2, r3, #1
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	7e1b      	ldrb	r3, [r3, #24]
 800d8e0:	b2db      	uxtb	r3, r3
 800d8e2:	f003 0307 	and.w	r3, r3, #7
 800d8e6:	3302      	adds	r3, #2
 800d8e8:	2201      	movs	r2, #1
 800d8ea:	fa02 f303 	lsl.w	r3, r2, r3
 800d8ee:	687a      	ldr	r2, [r7, #4]
 800d8f0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d8f2:	fb03 f202 	mul.w	r2, r3, r2
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	7a1b      	ldrb	r3, [r3, #8]
 800d8fe:	b2db      	uxtb	r3, r3
 800d900:	f003 030f 	and.w	r3, r3, #15
 800d904:	2201      	movs	r2, #1
 800d906:	409a      	lsls	r2, r3
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d910:	687a      	ldr	r2, [r7, #4]
 800d912:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800d914:	0a52      	lsrs	r2, r2, #9
 800d916:	fb03 f202 	mul.w	r2, r3, r2
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d924:	655a      	str	r2, [r3, #84]	; 0x54
 800d926:	e031      	b.n	800d98c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d92c:	2b01      	cmp	r3, #1
 800d92e:	d11d      	bne.n	800d96c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d934:	041b      	lsls	r3, r3, #16
 800d936:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d93e:	0c1b      	lsrs	r3, r3, #16
 800d940:	431a      	orrs	r2, r3
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	691b      	ldr	r3, [r3, #16]
 800d94a:	3301      	adds	r3, #1
 800d94c:	029a      	lsls	r2, r3, #10
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d960:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	655a      	str	r2, [r3, #84]	; 0x54
 800d96a:	e00f      	b.n	800d98c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	4a58      	ldr	r2, [pc, #352]	; (800dad4 <HAL_SD_GetCardCSD+0x344>)
 800d972:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d978:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2201      	movs	r2, #1
 800d984:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d988:	2301      	movs	r3, #1
 800d98a:	e09d      	b.n	800dac8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d990:	0b9b      	lsrs	r3, r3, #14
 800d992:	b2db      	uxtb	r3, r3
 800d994:	f003 0301 	and.w	r3, r3, #1
 800d998:	b2da      	uxtb	r2, r3
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9a2:	09db      	lsrs	r3, r3, #7
 800d9a4:	b2db      	uxtb	r3, r3
 800d9a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9aa:	b2da      	uxtb	r2, r3
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9b4:	b2db      	uxtb	r3, r3
 800d9b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9ba:	b2da      	uxtb	r2, r3
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9c4:	0fdb      	lsrs	r3, r3, #31
 800d9c6:	b2da      	uxtb	r2, r3
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9d0:	0f5b      	lsrs	r3, r3, #29
 800d9d2:	b2db      	uxtb	r3, r3
 800d9d4:	f003 0303 	and.w	r3, r3, #3
 800d9d8:	b2da      	uxtb	r2, r3
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9e2:	0e9b      	lsrs	r3, r3, #26
 800d9e4:	b2db      	uxtb	r3, r3
 800d9e6:	f003 0307 	and.w	r3, r3, #7
 800d9ea:	b2da      	uxtb	r2, r3
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9f4:	0d9b      	lsrs	r3, r3, #22
 800d9f6:	b2db      	uxtb	r3, r3
 800d9f8:	f003 030f 	and.w	r3, r3, #15
 800d9fc:	b2da      	uxtb	r2, r3
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da06:	0d5b      	lsrs	r3, r3, #21
 800da08:	b2db      	uxtb	r3, r3
 800da0a:	f003 0301 	and.w	r3, r3, #1
 800da0e:	b2da      	uxtb	r2, r3
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	2200      	movs	r2, #0
 800da1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da22:	0c1b      	lsrs	r3, r3, #16
 800da24:	b2db      	uxtb	r3, r3
 800da26:	f003 0301 	and.w	r3, r3, #1
 800da2a:	b2da      	uxtb	r2, r3
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da36:	0bdb      	lsrs	r3, r3, #15
 800da38:	b2db      	uxtb	r3, r3
 800da3a:	f003 0301 	and.w	r3, r3, #1
 800da3e:	b2da      	uxtb	r2, r3
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da4a:	0b9b      	lsrs	r3, r3, #14
 800da4c:	b2db      	uxtb	r3, r3
 800da4e:	f003 0301 	and.w	r3, r3, #1
 800da52:	b2da      	uxtb	r2, r3
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da5e:	0b5b      	lsrs	r3, r3, #13
 800da60:	b2db      	uxtb	r3, r3
 800da62:	f003 0301 	and.w	r3, r3, #1
 800da66:	b2da      	uxtb	r2, r3
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da72:	0b1b      	lsrs	r3, r3, #12
 800da74:	b2db      	uxtb	r3, r3
 800da76:	f003 0301 	and.w	r3, r3, #1
 800da7a:	b2da      	uxtb	r2, r3
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da86:	0a9b      	lsrs	r3, r3, #10
 800da88:	b2db      	uxtb	r3, r3
 800da8a:	f003 0303 	and.w	r3, r3, #3
 800da8e:	b2da      	uxtb	r2, r3
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da9a:	0a1b      	lsrs	r3, r3, #8
 800da9c:	b2db      	uxtb	r3, r3
 800da9e:	f003 0303 	and.w	r3, r3, #3
 800daa2:	b2da      	uxtb	r2, r3
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800daae:	085b      	lsrs	r3, r3, #1
 800dab0:	b2db      	uxtb	r3, r3
 800dab2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dab6:	b2da      	uxtb	r2, r3
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	2201      	movs	r2, #1
 800dac2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800dac6:	2300      	movs	r3, #0
}
 800dac8:	4618      	mov	r0, r3
 800daca:	370c      	adds	r7, #12
 800dacc:	46bd      	mov	sp, r7
 800dace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad2:	4770      	bx	lr
 800dad4:	1fe00fff 	.word	0x1fe00fff

0800dad8 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b094      	sub	sp, #80	; 0x50
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
 800dae0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800dae2:	2300      	movs	r3, #0
 800dae4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800daee:	b2db      	uxtb	r3, r3
 800daf0:	2b03      	cmp	r3, #3
 800daf2:	d101      	bne.n	800daf8 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800daf4:	2301      	movs	r3, #1
 800daf6:	e0a7      	b.n	800dc48 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800daf8:	f107 0308 	add.w	r3, r7, #8
 800dafc:	4619      	mov	r1, r3
 800dafe:	6878      	ldr	r0, [r7, #4]
 800db00:	f000 fb62 	bl	800e1c8 <SD_SendSDStatus>
 800db04:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800db06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d011      	beq.n	800db30 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	4a4f      	ldr	r2, [pc, #316]	; (800dc50 <HAL_SD_GetCardStatus+0x178>)
 800db12:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db1a:	431a      	orrs	r2, r3
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2201      	movs	r2, #1
 800db24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800db28:	2301      	movs	r3, #1
 800db2a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800db2e:	e070      	b.n	800dc12 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	099b      	lsrs	r3, r3, #6
 800db34:	b2db      	uxtb	r3, r3
 800db36:	f003 0303 	and.w	r3, r3, #3
 800db3a:	b2da      	uxtb	r2, r3
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	095b      	lsrs	r3, r3, #5
 800db44:	b2db      	uxtb	r3, r3
 800db46:	f003 0301 	and.w	r3, r3, #1
 800db4a:	b2da      	uxtb	r2, r3
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800db50:	68bb      	ldr	r3, [r7, #8]
 800db52:	0a1b      	lsrs	r3, r3, #8
 800db54:	b29b      	uxth	r3, r3
 800db56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800db5a:	b29a      	uxth	r2, r3
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	0e1b      	lsrs	r3, r3, #24
 800db60:	b29b      	uxth	r3, r3
 800db62:	4313      	orrs	r3, r2
 800db64:	b29a      	uxth	r2, r3
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	061a      	lsls	r2, r3, #24
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	021b      	lsls	r3, r3, #8
 800db72:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800db76:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	0a1b      	lsrs	r3, r3, #8
 800db7c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800db80:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	0e1b      	lsrs	r3, r3, #24
 800db86:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800db8c:	693b      	ldr	r3, [r7, #16]
 800db8e:	b2da      	uxtb	r2, r3
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800db94:	693b      	ldr	r3, [r7, #16]
 800db96:	0a1b      	lsrs	r3, r3, #8
 800db98:	b2da      	uxtb	r2, r3
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800db9e:	693b      	ldr	r3, [r7, #16]
 800dba0:	0d1b      	lsrs	r3, r3, #20
 800dba2:	b2db      	uxtb	r3, r3
 800dba4:	f003 030f 	and.w	r3, r3, #15
 800dba8:	b2da      	uxtb	r2, r3
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800dbae:	693b      	ldr	r3, [r7, #16]
 800dbb0:	0c1b      	lsrs	r3, r3, #16
 800dbb2:	b29b      	uxth	r3, r3
 800dbb4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dbb8:	b29a      	uxth	r2, r3
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	b29b      	uxth	r3, r3
 800dbbe:	b2db      	uxtb	r3, r3
 800dbc0:	b29b      	uxth	r3, r3
 800dbc2:	4313      	orrs	r3, r2
 800dbc4:	b29a      	uxth	r2, r3
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800dbca:	697b      	ldr	r3, [r7, #20]
 800dbcc:	0a9b      	lsrs	r3, r3, #10
 800dbce:	b2db      	uxtb	r3, r3
 800dbd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dbd4:	b2da      	uxtb	r2, r3
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	0a1b      	lsrs	r3, r3, #8
 800dbde:	b2db      	uxtb	r3, r3
 800dbe0:	f003 0303 	and.w	r3, r3, #3
 800dbe4:	b2da      	uxtb	r2, r3
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800dbea:	697b      	ldr	r3, [r7, #20]
 800dbec:	091b      	lsrs	r3, r3, #4
 800dbee:	b2db      	uxtb	r3, r3
 800dbf0:	f003 030f 	and.w	r3, r3, #15
 800dbf4:	b2da      	uxtb	r2, r3
 800dbf6:	683b      	ldr	r3, [r7, #0]
 800dbf8:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	b2db      	uxtb	r3, r3
 800dbfe:	f003 030f 	and.w	r3, r3, #15
 800dc02:	b2da      	uxtb	r2, r3
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800dc08:	69bb      	ldr	r3, [r7, #24]
 800dc0a:	0e1b      	lsrs	r3, r3, #24
 800dc0c:	b2da      	uxtb	r2, r3
 800dc0e:	683b      	ldr	r3, [r7, #0]
 800dc10:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	f004 f98a 	bl	8011f34 <SDMMC_CmdBlockLength>
 800dc20:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800dc22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d00d      	beq.n	800dc44 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	4a08      	ldr	r2, [pc, #32]	; (800dc50 <HAL_SD_GetCardStatus+0x178>)
 800dc2e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dc34:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	2201      	movs	r2, #1
 800dc3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800dc3e:	2301      	movs	r3, #1
 800dc40:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800dc44:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	3750      	adds	r7, #80	; 0x50
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}
 800dc50:	1fe00fff 	.word	0x1fe00fff

0800dc54 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800dc54:	b480      	push	{r7}
 800dc56:	b083      	sub	sp, #12
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
 800dc5c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dc7a:	683b      	ldr	r3, [r7, #0]
 800dc7c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800dc9e:	2300      	movs	r3, #0
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	370c      	adds	r7, #12
 800dca4:	46bd      	mov	sp, r7
 800dca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcaa:	4770      	bx	lr

0800dcac <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800dcac:	b590      	push	{r4, r7, lr}
 800dcae:	b08d      	sub	sp, #52	; 0x34
 800dcb0:	af02      	add	r7, sp, #8
 800dcb2:	6078      	str	r0, [r7, #4]
 800dcb4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2203      	movs	r2, #3
 800dcc0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcc8:	2b03      	cmp	r3, #3
 800dcca:	d02e      	beq.n	800dd2a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dcd2:	d106      	bne.n	800dce2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcd8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	635a      	str	r2, [r3, #52]	; 0x34
 800dce0:	e029      	b.n	800dd36 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dce8:	d10a      	bne.n	800dd00 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f000 fb64 	bl	800e3b8 <SD_WideBus_Enable>
 800dcf0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dcf6:	6a3b      	ldr	r3, [r7, #32]
 800dcf8:	431a      	orrs	r2, r3
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	635a      	str	r2, [r3, #52]	; 0x34
 800dcfe:	e01a      	b.n	800dd36 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800dd00:	683b      	ldr	r3, [r7, #0]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d10a      	bne.n	800dd1c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800dd06:	6878      	ldr	r0, [r7, #4]
 800dd08:	f000 fba1 	bl	800e44e <SD_WideBus_Disable>
 800dd0c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd12:	6a3b      	ldr	r3, [r7, #32]
 800dd14:	431a      	orrs	r2, r3
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	635a      	str	r2, [r3, #52]	; 0x34
 800dd1a:	e00c      	b.n	800dd36 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd20:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	635a      	str	r2, [r3, #52]	; 0x34
 800dd28:	e005      	b.n	800dd36 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd2e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d007      	beq.n	800dd4e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	4a5f      	ldr	r2, [pc, #380]	; (800dec0 <HAL_SD_ConfigWideBusOperation+0x214>)
 800dd44:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800dd46:	2301      	movs	r3, #1
 800dd48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dd4c:	e096      	b.n	800de7c <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800dd4e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800dd52:	f04f 0100 	mov.w	r1, #0
 800dd56:	f7fd fea3 	bl	800baa0 <HAL_RCCEx_GetPeriphCLKFreq>
 800dd5a:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800dd5c:	69fb      	ldr	r3, [r7, #28]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	f000 8083 	beq.w	800de6a <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	685b      	ldr	r3, [r3, #4]
 800dd68:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	689b      	ldr	r3, [r3, #8]
 800dd6e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	691b      	ldr	r3, [r3, #16]
 800dd78:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	695a      	ldr	r2, [r3, #20]
 800dd7e:	69fb      	ldr	r3, [r7, #28]
 800dd80:	4950      	ldr	r1, [pc, #320]	; (800dec4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800dd82:	fba1 1303 	umull	r1, r3, r1, r3
 800dd86:	0e1b      	lsrs	r3, r3, #24
 800dd88:	429a      	cmp	r2, r3
 800dd8a:	d303      	bcc.n	800dd94 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	695b      	ldr	r3, [r3, #20]
 800dd90:	61bb      	str	r3, [r7, #24]
 800dd92:	e05a      	b.n	800de4a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd9c:	d103      	bne.n	800dda6 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	695b      	ldr	r3, [r3, #20]
 800dda2:	61bb      	str	r3, [r7, #24]
 800dda4:	e051      	b.n	800de4a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ddaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ddae:	d126      	bne.n	800ddfe <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	695b      	ldr	r3, [r3, #20]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d10e      	bne.n	800ddd6 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800ddb8:	69fb      	ldr	r3, [r7, #28]
 800ddba:	4a43      	ldr	r2, [pc, #268]	; (800dec8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ddbc:	4293      	cmp	r3, r2
 800ddbe:	d906      	bls.n	800ddce <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ddc0:	69fb      	ldr	r3, [r7, #28]
 800ddc2:	4a40      	ldr	r2, [pc, #256]	; (800dec4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ddc4:	fba2 2303 	umull	r2, r3, r2, r3
 800ddc8:	0e5b      	lsrs	r3, r3, #25
 800ddca:	61bb      	str	r3, [r7, #24]
 800ddcc:	e03d      	b.n	800de4a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	695b      	ldr	r3, [r3, #20]
 800ddd2:	61bb      	str	r3, [r7, #24]
 800ddd4:	e039      	b.n	800de4a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	695b      	ldr	r3, [r3, #20]
 800ddda:	005b      	lsls	r3, r3, #1
 800dddc:	69fa      	ldr	r2, [r7, #28]
 800ddde:	fbb2 f3f3 	udiv	r3, r2, r3
 800dde2:	4a39      	ldr	r2, [pc, #228]	; (800dec8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800dde4:	4293      	cmp	r3, r2
 800dde6:	d906      	bls.n	800ddf6 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800dde8:	69fb      	ldr	r3, [r7, #28]
 800ddea:	4a36      	ldr	r2, [pc, #216]	; (800dec4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ddec:	fba2 2303 	umull	r2, r3, r2, r3
 800ddf0:	0e5b      	lsrs	r3, r3, #25
 800ddf2:	61bb      	str	r3, [r7, #24]
 800ddf4:	e029      	b.n	800de4a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	695b      	ldr	r3, [r3, #20]
 800ddfa:	61bb      	str	r3, [r7, #24]
 800ddfc:	e025      	b.n	800de4a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	695b      	ldr	r3, [r3, #20]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d10e      	bne.n	800de24 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800de06:	69fb      	ldr	r3, [r7, #28]
 800de08:	4a30      	ldr	r2, [pc, #192]	; (800decc <HAL_SD_ConfigWideBusOperation+0x220>)
 800de0a:	4293      	cmp	r3, r2
 800de0c:	d906      	bls.n	800de1c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800de0e:	69fb      	ldr	r3, [r7, #28]
 800de10:	4a2c      	ldr	r2, [pc, #176]	; (800dec4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800de12:	fba2 2303 	umull	r2, r3, r2, r3
 800de16:	0e1b      	lsrs	r3, r3, #24
 800de18:	61bb      	str	r3, [r7, #24]
 800de1a:	e016      	b.n	800de4a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	695b      	ldr	r3, [r3, #20]
 800de20:	61bb      	str	r3, [r7, #24]
 800de22:	e012      	b.n	800de4a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	695b      	ldr	r3, [r3, #20]
 800de28:	005b      	lsls	r3, r3, #1
 800de2a:	69fa      	ldr	r2, [r7, #28]
 800de2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800de30:	4a26      	ldr	r2, [pc, #152]	; (800decc <HAL_SD_ConfigWideBusOperation+0x220>)
 800de32:	4293      	cmp	r3, r2
 800de34:	d906      	bls.n	800de44 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800de36:	69fb      	ldr	r3, [r7, #28]
 800de38:	4a22      	ldr	r2, [pc, #136]	; (800dec4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800de3a:	fba2 2303 	umull	r2, r3, r2, r3
 800de3e:	0e1b      	lsrs	r3, r3, #24
 800de40:	61bb      	str	r3, [r7, #24]
 800de42:	e002      	b.n	800de4a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	695b      	ldr	r3, [r3, #20]
 800de48:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681c      	ldr	r4, [r3, #0]
 800de4e:	466a      	mov	r2, sp
 800de50:	f107 0314 	add.w	r3, r7, #20
 800de54:	e893 0003 	ldmia.w	r3, {r0, r1}
 800de58:	e882 0003 	stmia.w	r2, {r0, r1}
 800de5c:	f107 0308 	add.w	r3, r7, #8
 800de60:	cb0e      	ldmia	r3, {r1, r2, r3}
 800de62:	4620      	mov	r0, r4
 800de64:	f003 ff88 	bl	8011d78 <SDMMC_Init>
 800de68:	e008      	b.n	800de7c <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de6e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800de76:	2301      	movs	r3, #1
 800de78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	f44f 7100 	mov.w	r1, #512	; 0x200
 800de84:	4618      	mov	r0, r3
 800de86:	f004 f855 	bl	8011f34 <SDMMC_CmdBlockLength>
 800de8a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800de8c:	6a3b      	ldr	r3, [r7, #32]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d00c      	beq.n	800deac <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	4a0a      	ldr	r2, [pc, #40]	; (800dec0 <HAL_SD_ConfigWideBusOperation+0x214>)
 800de98:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800de9e:	6a3b      	ldr	r3, [r7, #32]
 800dea0:	431a      	orrs	r2, r3
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800dea6:	2301      	movs	r3, #1
 800dea8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2201      	movs	r2, #1
 800deb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800deb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800deb8:	4618      	mov	r0, r3
 800deba:	372c      	adds	r7, #44	; 0x2c
 800debc:	46bd      	mov	sp, r7
 800debe:	bd90      	pop	{r4, r7, pc}
 800dec0:	1fe00fff 	.word	0x1fe00fff
 800dec4:	55e63b89 	.word	0x55e63b89
 800dec8:	02faf080 	.word	0x02faf080
 800decc:	017d7840 	.word	0x017d7840

0800ded0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b086      	sub	sp, #24
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ded8:	2300      	movs	r3, #0
 800deda:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800dedc:	f107 030c 	add.w	r3, r7, #12
 800dee0:	4619      	mov	r1, r3
 800dee2:	6878      	ldr	r0, [r7, #4]
 800dee4:	f000 fa40 	bl	800e368 <SD_SendStatus>
 800dee8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800deea:	697b      	ldr	r3, [r7, #20]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d005      	beq.n	800defc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800def4:	697b      	ldr	r3, [r7, #20]
 800def6:	431a      	orrs	r2, r3
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	0a5b      	lsrs	r3, r3, #9
 800df00:	f003 030f 	and.w	r3, r3, #15
 800df04:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800df06:	693b      	ldr	r3, [r7, #16]
}
 800df08:	4618      	mov	r0, r3
 800df0a:	3718      	adds	r7, #24
 800df0c:	46bd      	mov	sp, r7
 800df0e:	bd80      	pop	{r7, pc}

0800df10 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b090      	sub	sp, #64	; 0x40
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800df18:	2300      	movs	r3, #0
 800df1a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800df1c:	f7f5 fd4e 	bl	80039bc <HAL_GetTick>
 800df20:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	4618      	mov	r0, r3
 800df28:	f003 ff7f 	bl	8011e2a <SDMMC_GetPowerState>
 800df2c:	4603      	mov	r3, r0
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d102      	bne.n	800df38 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800df32:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800df36:	e0b5      	b.n	800e0a4 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df3c:	2b03      	cmp	r3, #3
 800df3e:	d02e      	beq.n	800df9e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	4618      	mov	r0, r3
 800df46:	f004 f9ca 	bl	80122de <SDMMC_CmdSendCID>
 800df4a:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800df4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d001      	beq.n	800df56 <SD_InitCard+0x46>
    {
      return errorstate;
 800df52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df54:	e0a6      	b.n	800e0a4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	2100      	movs	r1, #0
 800df5c:	4618      	mov	r0, r3
 800df5e:	f003 ffaa 	bl	8011eb6 <SDMMC_GetResponse>
 800df62:	4602      	mov	r2, r0
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	2104      	movs	r1, #4
 800df6e:	4618      	mov	r0, r3
 800df70:	f003 ffa1 	bl	8011eb6 <SDMMC_GetResponse>
 800df74:	4602      	mov	r2, r0
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	2108      	movs	r1, #8
 800df80:	4618      	mov	r0, r3
 800df82:	f003 ff98 	bl	8011eb6 <SDMMC_GetResponse>
 800df86:	4602      	mov	r2, r0
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	210c      	movs	r1, #12
 800df92:	4618      	mov	r0, r3
 800df94:	f003 ff8f 	bl	8011eb6 <SDMMC_GetResponse>
 800df98:	4602      	mov	r2, r0
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfa2:	2b03      	cmp	r3, #3
 800dfa4:	d01d      	beq.n	800dfe2 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800dfa6:	e019      	b.n	800dfdc <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	f107 020a 	add.w	r2, r7, #10
 800dfb0:	4611      	mov	r1, r2
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	f004 f9d2 	bl	801235c <SDMMC_CmdSetRelAdd>
 800dfb8:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800dfba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d001      	beq.n	800dfc4 <SD_InitCard+0xb4>
      {
        return errorstate;
 800dfc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfc2:	e06f      	b.n	800e0a4 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800dfc4:	f7f5 fcfa 	bl	80039bc <HAL_GetTick>
 800dfc8:	4602      	mov	r2, r0
 800dfca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfcc:	1ad3      	subs	r3, r2, r3
 800dfce:	f241 3287 	movw	r2, #4999	; 0x1387
 800dfd2:	4293      	cmp	r3, r2
 800dfd4:	d902      	bls.n	800dfdc <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800dfd6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dfda:	e063      	b.n	800e0a4 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800dfdc:	897b      	ldrh	r3, [r7, #10]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d0e2      	beq.n	800dfa8 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfe6:	2b03      	cmp	r3, #3
 800dfe8:	d036      	beq.n	800e058 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800dfea:	897b      	ldrh	r3, [r7, #10]
 800dfec:	461a      	mov	r2, r3
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681a      	ldr	r2, [r3, #0]
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dffa:	041b      	lsls	r3, r3, #16
 800dffc:	4619      	mov	r1, r3
 800dffe:	4610      	mov	r0, r2
 800e000:	f004 f98c 	bl	801231c <SDMMC_CmdSendCSD>
 800e004:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d001      	beq.n	800e010 <SD_InitCard+0x100>
    {
      return errorstate;
 800e00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e00e:	e049      	b.n	800e0a4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	2100      	movs	r1, #0
 800e016:	4618      	mov	r0, r3
 800e018:	f003 ff4d 	bl	8011eb6 <SDMMC_GetResponse>
 800e01c:	4602      	mov	r2, r0
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	2104      	movs	r1, #4
 800e028:	4618      	mov	r0, r3
 800e02a:	f003 ff44 	bl	8011eb6 <SDMMC_GetResponse>
 800e02e:	4602      	mov	r2, r0
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	2108      	movs	r1, #8
 800e03a:	4618      	mov	r0, r3
 800e03c:	f003 ff3b 	bl	8011eb6 <SDMMC_GetResponse>
 800e040:	4602      	mov	r2, r0
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	210c      	movs	r1, #12
 800e04c:	4618      	mov	r0, r3
 800e04e:	f003 ff32 	bl	8011eb6 <SDMMC_GetResponse>
 800e052:	4602      	mov	r2, r0
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	2104      	movs	r1, #4
 800e05e:	4618      	mov	r0, r3
 800e060:	f003 ff29 	bl	8011eb6 <SDMMC_GetResponse>
 800e064:	4603      	mov	r3, r0
 800e066:	0d1a      	lsrs	r2, r3, #20
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e06c:	f107 030c 	add.w	r3, r7, #12
 800e070:	4619      	mov	r1, r3
 800e072:	6878      	ldr	r0, [r7, #4]
 800e074:	f7ff fb8c 	bl	800d790 <HAL_SD_GetCardCSD>
 800e078:	4603      	mov	r3, r0
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d002      	beq.n	800e084 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e07e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e082:	e00f      	b.n	800e0a4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681a      	ldr	r2, [r3, #0]
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e08c:	041b      	lsls	r3, r3, #16
 800e08e:	4619      	mov	r1, r3
 800e090:	4610      	mov	r0, r2
 800e092:	f004 f83b 	bl	801210c <SDMMC_CmdSelDesel>
 800e096:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800e098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d001      	beq.n	800e0a2 <SD_InitCard+0x192>
  {
    return errorstate;
 800e09e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0a0:	e000      	b.n	800e0a4 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e0a2:	2300      	movs	r3, #0
}
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	3740      	adds	r7, #64	; 0x40
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	bd80      	pop	{r7, pc}

0800e0ac <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b086      	sub	sp, #24
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f004 f844 	bl	8012152 <SDMMC_CmdGoIdleState>
 800e0ca:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d001      	beq.n	800e0d6 <SD_PowerON+0x2a>
  {
    return errorstate;
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	e072      	b.n	800e1bc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f004 f857 	bl	801218e <SDMMC_CmdOperCond>
 800e0e0:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e0e8:	d10d      	bne.n	800e106 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f004 f82c 	bl	8012152 <SDMMC_CmdGoIdleState>
 800e0fa:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d004      	beq.n	800e10c <SD_PowerON+0x60>
    {
      return errorstate;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	e05a      	b.n	800e1bc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	2201      	movs	r2, #1
 800e10a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e110:	2b01      	cmp	r3, #1
 800e112:	d137      	bne.n	800e184 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	2100      	movs	r1, #0
 800e11a:	4618      	mov	r0, r3
 800e11c:	f004 f857 	bl	80121ce <SDMMC_CmdAppCommand>
 800e120:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d02d      	beq.n	800e184 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e128:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e12c:	e046      	b.n	800e1bc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	2100      	movs	r1, #0
 800e134:	4618      	mov	r0, r3
 800e136:	f004 f84a 	bl	80121ce <SDMMC_CmdAppCommand>
 800e13a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d001      	beq.n	800e146 <SD_PowerON+0x9a>
    {
      return errorstate;
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	e03a      	b.n	800e1bc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	491e      	ldr	r1, [pc, #120]	; (800e1c4 <SD_PowerON+0x118>)
 800e14c:	4618      	mov	r0, r3
 800e14e:	f004 f861 	bl	8012214 <SDMMC_CmdAppOperCommand>
 800e152:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d002      	beq.n	800e160 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e15a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e15e:	e02d      	b.n	800e1bc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	2100      	movs	r1, #0
 800e166:	4618      	mov	r0, r3
 800e168:	f003 fea5 	bl	8011eb6 <SDMMC_GetResponse>
 800e16c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e16e:	697b      	ldr	r3, [r7, #20]
 800e170:	0fdb      	lsrs	r3, r3, #31
 800e172:	2b01      	cmp	r3, #1
 800e174:	d101      	bne.n	800e17a <SD_PowerON+0xce>
 800e176:	2301      	movs	r3, #1
 800e178:	e000      	b.n	800e17c <SD_PowerON+0xd0>
 800e17a:	2300      	movs	r3, #0
 800e17c:	613b      	str	r3, [r7, #16]

    count++;
 800e17e:	68bb      	ldr	r3, [r7, #8]
 800e180:	3301      	adds	r3, #1
 800e182:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e184:	68bb      	ldr	r3, [r7, #8]
 800e186:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e18a:	4293      	cmp	r3, r2
 800e18c:	d802      	bhi.n	800e194 <SD_PowerON+0xe8>
 800e18e:	693b      	ldr	r3, [r7, #16]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d0cc      	beq.n	800e12e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800e194:	68bb      	ldr	r3, [r7, #8]
 800e196:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e19a:	4293      	cmp	r3, r2
 800e19c:	d902      	bls.n	800e1a4 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e19e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e1a2:	e00b      	b.n	800e1bc <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800e1aa:	697b      	ldr	r3, [r7, #20]
 800e1ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d002      	beq.n	800e1ba <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2201      	movs	r2, #1
 800e1b8:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e1ba:	2300      	movs	r3, #0
}
 800e1bc:	4618      	mov	r0, r3
 800e1be:	3718      	adds	r7, #24
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	bd80      	pop	{r7, pc}
 800e1c4:	c1100000 	.word	0xc1100000

0800e1c8 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b08c      	sub	sp, #48	; 0x30
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
 800e1d0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e1d2:	f7f5 fbf3 	bl	80039bc <HAL_GetTick>
 800e1d6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e1d8:	683b      	ldr	r3, [r7, #0]
 800e1da:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	2100      	movs	r1, #0
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f003 fe67 	bl	8011eb6 <SDMMC_GetResponse>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e1ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e1f2:	d102      	bne.n	800e1fa <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e1f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e1f8:	e0b0      	b.n	800e35c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	2140      	movs	r1, #64	; 0x40
 800e200:	4618      	mov	r0, r3
 800e202:	f003 fe97 	bl	8011f34 <SDMMC_CmdBlockLength>
 800e206:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e208:	6a3b      	ldr	r3, [r7, #32]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d005      	beq.n	800e21a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e216:	6a3b      	ldr	r3, [r7, #32]
 800e218:	e0a0      	b.n	800e35c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681a      	ldr	r2, [r3, #0]
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e222:	041b      	lsls	r3, r3, #16
 800e224:	4619      	mov	r1, r3
 800e226:	4610      	mov	r0, r2
 800e228:	f003 ffd1 	bl	80121ce <SDMMC_CmdAppCommand>
 800e22c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e22e:	6a3b      	ldr	r3, [r7, #32]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d005      	beq.n	800e240 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e23c:	6a3b      	ldr	r3, [r7, #32]
 800e23e:	e08d      	b.n	800e35c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e240:	f04f 33ff 	mov.w	r3, #4294967295
 800e244:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e246:	2340      	movs	r3, #64	; 0x40
 800e248:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e24a:	2360      	movs	r3, #96	; 0x60
 800e24c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e24e:	2302      	movs	r3, #2
 800e250:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e252:	2300      	movs	r3, #0
 800e254:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e256:	2301      	movs	r3, #1
 800e258:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	f107 0208 	add.w	r2, r7, #8
 800e262:	4611      	mov	r1, r2
 800e264:	4618      	mov	r0, r3
 800e266:	f003 fe39 	bl	8011edc <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	4618      	mov	r0, r3
 800e270:	f004 f8b9 	bl	80123e6 <SDMMC_CmdStatusRegister>
 800e274:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e276:	6a3b      	ldr	r3, [r7, #32]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d02b      	beq.n	800e2d4 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e284:	6a3b      	ldr	r3, [r7, #32]
 800e286:	e069      	b.n	800e35c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e28e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e292:	2b00      	cmp	r3, #0
 800e294:	d013      	beq.n	800e2be <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800e296:	2300      	movs	r3, #0
 800e298:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e29a:	e00d      	b.n	800e2b8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	f003 fd93 	bl	8011dcc <SDMMC_ReadFIFO>
 800e2a6:	4602      	mov	r2, r0
 800e2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2aa:	601a      	str	r2, [r3, #0]
        pData++;
 800e2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ae:	3304      	adds	r3, #4
 800e2b0:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800e2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2b4:	3301      	adds	r3, #1
 800e2b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e2b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ba:	2b07      	cmp	r3, #7
 800e2bc:	d9ee      	bls.n	800e29c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e2be:	f7f5 fb7d 	bl	80039bc <HAL_GetTick>
 800e2c2:	4602      	mov	r2, r0
 800e2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2c6:	1ad3      	subs	r3, r2, r3
 800e2c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2cc:	d102      	bne.n	800e2d4 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e2ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e2d2:	e043      	b.n	800e35c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2da:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d0d2      	beq.n	800e288 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2e8:	f003 0308 	and.w	r3, r3, #8
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d001      	beq.n	800e2f4 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e2f0:	2308      	movs	r3, #8
 800e2f2:	e033      	b.n	800e35c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2fa:	f003 0302 	and.w	r3, r3, #2
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d001      	beq.n	800e306 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e302:	2302      	movs	r3, #2
 800e304:	e02a      	b.n	800e35c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e30c:	f003 0320 	and.w	r3, r3, #32
 800e310:	2b00      	cmp	r3, #0
 800e312:	d017      	beq.n	800e344 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e314:	2320      	movs	r3, #32
 800e316:	e021      	b.n	800e35c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	4618      	mov	r0, r3
 800e31e:	f003 fd55 	bl	8011dcc <SDMMC_ReadFIFO>
 800e322:	4602      	mov	r2, r0
 800e324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e326:	601a      	str	r2, [r3, #0]
    pData++;
 800e328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e32a:	3304      	adds	r3, #4
 800e32c:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e32e:	f7f5 fb45 	bl	80039bc <HAL_GetTick>
 800e332:	4602      	mov	r2, r0
 800e334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e336:	1ad3      	subs	r3, r2, r3
 800e338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e33c:	d102      	bne.n	800e344 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e33e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e342:	e00b      	b.n	800e35c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e34a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d1e2      	bne.n	800e318 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	4a03      	ldr	r2, [pc, #12]	; (800e364 <SD_SendSDStatus+0x19c>)
 800e358:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800e35a:	2300      	movs	r3, #0
}
 800e35c:	4618      	mov	r0, r3
 800e35e:	3730      	adds	r7, #48	; 0x30
 800e360:	46bd      	mov	sp, r7
 800e362:	bd80      	pop	{r7, pc}
 800e364:	18000f3a 	.word	0x18000f3a

0800e368 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b084      	sub	sp, #16
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
 800e370:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800e372:	683b      	ldr	r3, [r7, #0]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d102      	bne.n	800e37e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e378:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e37c:	e018      	b.n	800e3b0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681a      	ldr	r2, [r3, #0]
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e386:	041b      	lsls	r3, r3, #16
 800e388:	4619      	mov	r1, r3
 800e38a:	4610      	mov	r0, r2
 800e38c:	f004 f808 	bl	80123a0 <SDMMC_CmdSendStatus>
 800e390:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d001      	beq.n	800e39c <SD_SendStatus+0x34>
  {
    return errorstate;
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	e009      	b.n	800e3b0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	2100      	movs	r1, #0
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f003 fd87 	bl	8011eb6 <SDMMC_GetResponse>
 800e3a8:	4602      	mov	r2, r0
 800e3aa:	683b      	ldr	r3, [r7, #0]
 800e3ac:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e3ae:	2300      	movs	r3, #0
}
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	3710      	adds	r7, #16
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bd80      	pop	{r7, pc}

0800e3b8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b086      	sub	sp, #24
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	60fb      	str	r3, [r7, #12]
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	2100      	movs	r1, #0
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	f003 fd71 	bl	8011eb6 <SDMMC_GetResponse>
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e3da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e3de:	d102      	bne.n	800e3e6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e3e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e3e4:	e02f      	b.n	800e446 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e3e6:	f107 030c 	add.w	r3, r7, #12
 800e3ea:	4619      	mov	r1, r3
 800e3ec:	6878      	ldr	r0, [r7, #4]
 800e3ee:	f000 f879 	bl	800e4e4 <SD_FindSCR>
 800e3f2:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e3f4:	697b      	ldr	r3, [r7, #20]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d001      	beq.n	800e3fe <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e3fa:	697b      	ldr	r3, [r7, #20]
 800e3fc:	e023      	b.n	800e446 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e3fe:	693b      	ldr	r3, [r7, #16]
 800e400:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e404:	2b00      	cmp	r3, #0
 800e406:	d01c      	beq.n	800e442 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681a      	ldr	r2, [r3, #0]
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e410:	041b      	lsls	r3, r3, #16
 800e412:	4619      	mov	r1, r3
 800e414:	4610      	mov	r0, r2
 800e416:	f003 feda 	bl	80121ce <SDMMC_CmdAppCommand>
 800e41a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e41c:	697b      	ldr	r3, [r7, #20]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d001      	beq.n	800e426 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e422:	697b      	ldr	r3, [r7, #20]
 800e424:	e00f      	b.n	800e446 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	2102      	movs	r1, #2
 800e42c:	4618      	mov	r0, r3
 800e42e:	f003 ff11 	bl	8012254 <SDMMC_CmdBusWidth>
 800e432:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e434:	697b      	ldr	r3, [r7, #20]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d001      	beq.n	800e43e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e43a:	697b      	ldr	r3, [r7, #20]
 800e43c:	e003      	b.n	800e446 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e43e:	2300      	movs	r3, #0
 800e440:	e001      	b.n	800e446 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e442:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e446:	4618      	mov	r0, r3
 800e448:	3718      	adds	r7, #24
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}

0800e44e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e44e:	b580      	push	{r7, lr}
 800e450:	b086      	sub	sp, #24
 800e452:	af00      	add	r7, sp, #0
 800e454:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e456:	2300      	movs	r3, #0
 800e458:	60fb      	str	r3, [r7, #12]
 800e45a:	2300      	movs	r3, #0
 800e45c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	2100      	movs	r1, #0
 800e464:	4618      	mov	r0, r3
 800e466:	f003 fd26 	bl	8011eb6 <SDMMC_GetResponse>
 800e46a:	4603      	mov	r3, r0
 800e46c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e470:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e474:	d102      	bne.n	800e47c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e476:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e47a:	e02f      	b.n	800e4dc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e47c:	f107 030c 	add.w	r3, r7, #12
 800e480:	4619      	mov	r1, r3
 800e482:	6878      	ldr	r0, [r7, #4]
 800e484:	f000 f82e 	bl	800e4e4 <SD_FindSCR>
 800e488:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e48a:	697b      	ldr	r3, [r7, #20]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d001      	beq.n	800e494 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e490:	697b      	ldr	r3, [r7, #20]
 800e492:	e023      	b.n	800e4dc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e494:	693b      	ldr	r3, [r7, #16]
 800e496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d01c      	beq.n	800e4d8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681a      	ldr	r2, [r3, #0]
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4a6:	041b      	lsls	r3, r3, #16
 800e4a8:	4619      	mov	r1, r3
 800e4aa:	4610      	mov	r0, r2
 800e4ac:	f003 fe8f 	bl	80121ce <SDMMC_CmdAppCommand>
 800e4b0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e4b2:	697b      	ldr	r3, [r7, #20]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d001      	beq.n	800e4bc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e4b8:	697b      	ldr	r3, [r7, #20]
 800e4ba:	e00f      	b.n	800e4dc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	2100      	movs	r1, #0
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	f003 fec6 	bl	8012254 <SDMMC_CmdBusWidth>
 800e4c8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e4ca:	697b      	ldr	r3, [r7, #20]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d001      	beq.n	800e4d4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e4d0:	697b      	ldr	r3, [r7, #20]
 800e4d2:	e003      	b.n	800e4dc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	e001      	b.n	800e4dc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e4d8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e4dc:	4618      	mov	r0, r3
 800e4de:	3718      	adds	r7, #24
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}

0800e4e4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b08e      	sub	sp, #56	; 0x38
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
 800e4ec:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e4ee:	f7f5 fa65 	bl	80039bc <HAL_GetTick>
 800e4f2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	60bb      	str	r3, [r7, #8]
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e500:	683b      	ldr	r3, [r7, #0]
 800e502:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	2108      	movs	r1, #8
 800e50a:	4618      	mov	r0, r3
 800e50c:	f003 fd12 	bl	8011f34 <SDMMC_CmdBlockLength>
 800e510:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e514:	2b00      	cmp	r3, #0
 800e516:	d001      	beq.n	800e51c <SD_FindSCR+0x38>
  {
    return errorstate;
 800e518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e51a:	e0ad      	b.n	800e678 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681a      	ldr	r2, [r3, #0]
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e524:	041b      	lsls	r3, r3, #16
 800e526:	4619      	mov	r1, r3
 800e528:	4610      	mov	r0, r2
 800e52a:	f003 fe50 	bl	80121ce <SDMMC_CmdAppCommand>
 800e52e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e532:	2b00      	cmp	r3, #0
 800e534:	d001      	beq.n	800e53a <SD_FindSCR+0x56>
  {
    return errorstate;
 800e536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e538:	e09e      	b.n	800e678 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e53a:	f04f 33ff 	mov.w	r3, #4294967295
 800e53e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e540:	2308      	movs	r3, #8
 800e542:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e544:	2330      	movs	r3, #48	; 0x30
 800e546:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e548:	2302      	movs	r3, #2
 800e54a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e54c:	2300      	movs	r3, #0
 800e54e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e550:	2301      	movs	r3, #1
 800e552:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	f107 0210 	add.w	r2, r7, #16
 800e55c:	4611      	mov	r1, r2
 800e55e:	4618      	mov	r0, r3
 800e560:	f003 fcbc 	bl	8011edc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	4618      	mov	r0, r3
 800e56a:	f003 fe96 	bl	801229a <SDMMC_CmdSendSCR>
 800e56e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e572:	2b00      	cmp	r3, #0
 800e574:	d027      	beq.n	800e5c6 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800e576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e578:	e07e      	b.n	800e678 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e580:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e584:	2b00      	cmp	r3, #0
 800e586:	d113      	bne.n	800e5b0 <SD_FindSCR+0xcc>
 800e588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d110      	bne.n	800e5b0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	4618      	mov	r0, r3
 800e594:	f003 fc1a 	bl	8011dcc <SDMMC_ReadFIFO>
 800e598:	4603      	mov	r3, r0
 800e59a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f003 fc13 	bl	8011dcc <SDMMC_ReadFIFO>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	60fb      	str	r3, [r7, #12]
      index++;
 800e5aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5ac:	3301      	adds	r3, #1
 800e5ae:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e5b0:	f7f5 fa04 	bl	80039bc <HAL_GetTick>
 800e5b4:	4602      	mov	r2, r0
 800e5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5b8:	1ad3      	subs	r3, r2, r3
 800e5ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5be:	d102      	bne.n	800e5c6 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e5c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e5c4:	e058      	b.n	800e678 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e5cc:	f240 532a 	movw	r3, #1322	; 0x52a
 800e5d0:	4013      	ands	r3, r2
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d0d1      	beq.n	800e57a <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5dc:	f003 0308 	and.w	r3, r3, #8
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d005      	beq.n	800e5f0 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	2208      	movs	r2, #8
 800e5ea:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e5ec:	2308      	movs	r3, #8
 800e5ee:	e043      	b.n	800e678 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5f6:	f003 0302 	and.w	r3, r3, #2
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d005      	beq.n	800e60a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	2202      	movs	r2, #2
 800e604:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e606:	2302      	movs	r3, #2
 800e608:	e036      	b.n	800e678 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e610:	f003 0320 	and.w	r3, r3, #32
 800e614:	2b00      	cmp	r3, #0
 800e616:	d005      	beq.n	800e624 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	2220      	movs	r2, #32
 800e61e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e620:	2320      	movs	r3, #32
 800e622:	e029      	b.n	800e678 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	4a15      	ldr	r2, [pc, #84]	; (800e680 <SD_FindSCR+0x19c>)
 800e62a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	061a      	lsls	r2, r3, #24
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	021b      	lsls	r3, r3, #8
 800e634:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e638:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	0a1b      	lsrs	r3, r3, #8
 800e63e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e642:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	0e1b      	lsrs	r3, r3, #24
 800e648:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e64c:	601a      	str	r2, [r3, #0]
    scr++;
 800e64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e650:	3304      	adds	r3, #4
 800e652:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e654:	68bb      	ldr	r3, [r7, #8]
 800e656:	061a      	lsls	r2, r3, #24
 800e658:	68bb      	ldr	r3, [r7, #8]
 800e65a:	021b      	lsls	r3, r3, #8
 800e65c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e660:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e662:	68bb      	ldr	r3, [r7, #8]
 800e664:	0a1b      	lsrs	r3, r3, #8
 800e666:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e66a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e66c:	68bb      	ldr	r3, [r7, #8]
 800e66e:	0e1b      	lsrs	r3, r3, #24
 800e670:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e674:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e676:	2300      	movs	r3, #0
}
 800e678:	4618      	mov	r0, r3
 800e67a:	3738      	adds	r7, #56	; 0x38
 800e67c:	46bd      	mov	sp, r7
 800e67e:	bd80      	pop	{r7, pc}
 800e680:	18000f3a 	.word	0x18000f3a

0800e684 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b086      	sub	sp, #24
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e690:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e696:	2b1f      	cmp	r3, #31
 800e698:	d936      	bls.n	800e708 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800e69a:	2300      	movs	r3, #0
 800e69c:	617b      	str	r3, [r7, #20]
 800e69e:	e027      	b.n	800e6f0 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	f003 fb91 	bl	8011dcc <SDMMC_ReadFIFO>
 800e6aa:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	b2da      	uxtb	r2, r3
 800e6b0:	693b      	ldr	r3, [r7, #16]
 800e6b2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e6b4:	693b      	ldr	r3, [r7, #16]
 800e6b6:	3301      	adds	r3, #1
 800e6b8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	0a1b      	lsrs	r3, r3, #8
 800e6be:	b2da      	uxtb	r2, r3
 800e6c0:	693b      	ldr	r3, [r7, #16]
 800e6c2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e6c4:	693b      	ldr	r3, [r7, #16]
 800e6c6:	3301      	adds	r3, #1
 800e6c8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	0c1b      	lsrs	r3, r3, #16
 800e6ce:	b2da      	uxtb	r2, r3
 800e6d0:	693b      	ldr	r3, [r7, #16]
 800e6d2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e6d4:	693b      	ldr	r3, [r7, #16]
 800e6d6:	3301      	adds	r3, #1
 800e6d8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	0e1b      	lsrs	r3, r3, #24
 800e6de:	b2da      	uxtb	r2, r3
 800e6e0:	693b      	ldr	r3, [r7, #16]
 800e6e2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e6e4:	693b      	ldr	r3, [r7, #16]
 800e6e6:	3301      	adds	r3, #1
 800e6e8:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800e6ea:	697b      	ldr	r3, [r7, #20]
 800e6ec:	3301      	adds	r3, #1
 800e6ee:	617b      	str	r3, [r7, #20]
 800e6f0:	697b      	ldr	r3, [r7, #20]
 800e6f2:	2b07      	cmp	r3, #7
 800e6f4:	d9d4      	bls.n	800e6a0 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	693a      	ldr	r2, [r7, #16]
 800e6fa:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e700:	f1a3 0220 	sub.w	r2, r3, #32
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800e708:	bf00      	nop
 800e70a:	3718      	adds	r7, #24
 800e70c:	46bd      	mov	sp, r7
 800e70e:	bd80      	pop	{r7, pc}

0800e710 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b086      	sub	sp, #24
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	69db      	ldr	r3, [r3, #28]
 800e71c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	6a1b      	ldr	r3, [r3, #32]
 800e722:	2b1f      	cmp	r3, #31
 800e724:	d93a      	bls.n	800e79c <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800e726:	2300      	movs	r3, #0
 800e728:	617b      	str	r3, [r7, #20]
 800e72a:	e02b      	b.n	800e784 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800e72c:	693b      	ldr	r3, [r7, #16]
 800e72e:	781b      	ldrb	r3, [r3, #0]
 800e730:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e732:	693b      	ldr	r3, [r7, #16]
 800e734:	3301      	adds	r3, #1
 800e736:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e738:	693b      	ldr	r3, [r7, #16]
 800e73a:	781b      	ldrb	r3, [r3, #0]
 800e73c:	021a      	lsls	r2, r3, #8
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	4313      	orrs	r3, r2
 800e742:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e744:	693b      	ldr	r3, [r7, #16]
 800e746:	3301      	adds	r3, #1
 800e748:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e74a:	693b      	ldr	r3, [r7, #16]
 800e74c:	781b      	ldrb	r3, [r3, #0]
 800e74e:	041a      	lsls	r2, r3, #16
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	4313      	orrs	r3, r2
 800e754:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e756:	693b      	ldr	r3, [r7, #16]
 800e758:	3301      	adds	r3, #1
 800e75a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e75c:	693b      	ldr	r3, [r7, #16]
 800e75e:	781b      	ldrb	r3, [r3, #0]
 800e760:	061a      	lsls	r2, r3, #24
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	4313      	orrs	r3, r2
 800e766:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e768:	693b      	ldr	r3, [r7, #16]
 800e76a:	3301      	adds	r3, #1
 800e76c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	f107 020c 	add.w	r2, r7, #12
 800e776:	4611      	mov	r1, r2
 800e778:	4618      	mov	r0, r3
 800e77a:	f003 fb34 	bl	8011de6 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800e77e:	697b      	ldr	r3, [r7, #20]
 800e780:	3301      	adds	r3, #1
 800e782:	617b      	str	r3, [r7, #20]
 800e784:	697b      	ldr	r3, [r7, #20]
 800e786:	2b07      	cmp	r3, #7
 800e788:	d9d0      	bls.n	800e72c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	693a      	ldr	r2, [r7, #16]
 800e78e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	6a1b      	ldr	r3, [r3, #32]
 800e794:	f1a3 0220 	sub.w	r2, r3, #32
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	621a      	str	r2, [r3, #32]
  }
}
 800e79c:	bf00      	nop
 800e79e:	3718      	adds	r7, #24
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}

0800e7a4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e7a4:	b480      	push	{r7}
 800e7a6:	b083      	sub	sp, #12
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e7ac:	bf00      	nop
 800e7ae:	370c      	adds	r7, #12
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b6:	4770      	bx	lr

0800e7b8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e7b8:	b480      	push	{r7}
 800e7ba:	b083      	sub	sp, #12
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e7c0:	bf00      	nop
 800e7c2:	370c      	adds	r7, #12
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ca:	4770      	bx	lr

0800e7cc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e7cc:	b480      	push	{r7}
 800e7ce:	b083      	sub	sp, #12
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e7d4:	bf00      	nop
 800e7d6:	370c      	adds	r7, #12
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7de:	4770      	bx	lr

0800e7e0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e7e0:	b480      	push	{r7}
 800e7e2:	b083      	sub	sp, #12
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e7e8:	bf00      	nop
 800e7ea:	370c      	adds	r7, #12
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f2:	4770      	bx	lr

0800e7f4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b084      	sub	sp, #16
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d101      	bne.n	800e806 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e802:	2301      	movs	r3, #1
 800e804:	e10f      	b.n	800ea26 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	2200      	movs	r2, #0
 800e80a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	4a87      	ldr	r2, [pc, #540]	; (800ea30 <HAL_SPI_Init+0x23c>)
 800e812:	4293      	cmp	r3, r2
 800e814:	d00f      	beq.n	800e836 <HAL_SPI_Init+0x42>
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	4a86      	ldr	r2, [pc, #536]	; (800ea34 <HAL_SPI_Init+0x240>)
 800e81c:	4293      	cmp	r3, r2
 800e81e:	d00a      	beq.n	800e836 <HAL_SPI_Init+0x42>
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	4a84      	ldr	r2, [pc, #528]	; (800ea38 <HAL_SPI_Init+0x244>)
 800e826:	4293      	cmp	r3, r2
 800e828:	d005      	beq.n	800e836 <HAL_SPI_Init+0x42>
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	68db      	ldr	r3, [r3, #12]
 800e82e:	2b0f      	cmp	r3, #15
 800e830:	d901      	bls.n	800e836 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e832:	2301      	movs	r3, #1
 800e834:	e0f7      	b.n	800ea26 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e836:	6878      	ldr	r0, [r7, #4]
 800e838:	f000 fd5a 	bl	800f2f0 <SPI_GetPacketSize>
 800e83c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	4a7b      	ldr	r2, [pc, #492]	; (800ea30 <HAL_SPI_Init+0x23c>)
 800e844:	4293      	cmp	r3, r2
 800e846:	d00c      	beq.n	800e862 <HAL_SPI_Init+0x6e>
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	4a79      	ldr	r2, [pc, #484]	; (800ea34 <HAL_SPI_Init+0x240>)
 800e84e:	4293      	cmp	r3, r2
 800e850:	d007      	beq.n	800e862 <HAL_SPI_Init+0x6e>
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	4a78      	ldr	r2, [pc, #480]	; (800ea38 <HAL_SPI_Init+0x244>)
 800e858:	4293      	cmp	r3, r2
 800e85a:	d002      	beq.n	800e862 <HAL_SPI_Init+0x6e>
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	2b08      	cmp	r3, #8
 800e860:	d811      	bhi.n	800e886 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e866:	4a72      	ldr	r2, [pc, #456]	; (800ea30 <HAL_SPI_Init+0x23c>)
 800e868:	4293      	cmp	r3, r2
 800e86a:	d009      	beq.n	800e880 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	4a70      	ldr	r2, [pc, #448]	; (800ea34 <HAL_SPI_Init+0x240>)
 800e872:	4293      	cmp	r3, r2
 800e874:	d004      	beq.n	800e880 <HAL_SPI_Init+0x8c>
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	4a6f      	ldr	r2, [pc, #444]	; (800ea38 <HAL_SPI_Init+0x244>)
 800e87c:	4293      	cmp	r3, r2
 800e87e:	d104      	bne.n	800e88a <HAL_SPI_Init+0x96>
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	2b10      	cmp	r3, #16
 800e884:	d901      	bls.n	800e88a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e886:	2301      	movs	r3, #1
 800e888:	e0cd      	b.n	800ea26 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e890:	b2db      	uxtb	r3, r3
 800e892:	2b00      	cmp	r3, #0
 800e894:	d106      	bne.n	800e8a4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	2200      	movs	r2, #0
 800e89a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	f7f4 fad0 	bl	8002e44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2202      	movs	r2, #2
 800e8a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	681a      	ldr	r2, [r3, #0]
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	f022 0201 	bic.w	r2, r2, #1
 800e8ba:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	689b      	ldr	r3, [r3, #8]
 800e8c2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e8c6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	699b      	ldr	r3, [r3, #24]
 800e8cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e8d0:	d119      	bne.n	800e906 <HAL_SPI_Init+0x112>
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	685b      	ldr	r3, [r3, #4]
 800e8d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e8da:	d103      	bne.n	800e8e4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d008      	beq.n	800e8f6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d10c      	bne.n	800e906 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e8f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e8f4:	d107      	bne.n	800e906 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	681a      	ldr	r2, [r3, #0]
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e904:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	685b      	ldr	r3, [r3, #4]
 800e90a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d00f      	beq.n	800e932 <HAL_SPI_Init+0x13e>
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	68db      	ldr	r3, [r3, #12]
 800e916:	2b06      	cmp	r3, #6
 800e918:	d90b      	bls.n	800e932 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	430a      	orrs	r2, r1
 800e92e:	601a      	str	r2, [r3, #0]
 800e930:	e007      	b.n	800e942 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	681a      	ldr	r2, [r3, #0]
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e940:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	69da      	ldr	r2, [r3, #28]
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e94a:	431a      	orrs	r2, r3
 800e94c:	68bb      	ldr	r3, [r7, #8]
 800e94e:	431a      	orrs	r2, r3
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e954:	ea42 0103 	orr.w	r1, r2, r3
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	68da      	ldr	r2, [r3, #12]
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	430a      	orrs	r2, r1
 800e962:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e96c:	431a      	orrs	r2, r3
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e972:	431a      	orrs	r2, r3
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	699b      	ldr	r3, [r3, #24]
 800e978:	431a      	orrs	r2, r3
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	691b      	ldr	r3, [r3, #16]
 800e97e:	431a      	orrs	r2, r3
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	695b      	ldr	r3, [r3, #20]
 800e984:	431a      	orrs	r2, r3
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	6a1b      	ldr	r3, [r3, #32]
 800e98a:	431a      	orrs	r2, r3
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	685b      	ldr	r3, [r3, #4]
 800e990:	431a      	orrs	r2, r3
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e996:	431a      	orrs	r2, r3
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	689b      	ldr	r3, [r3, #8]
 800e99c:	431a      	orrs	r2, r3
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e9a2:	ea42 0103 	orr.w	r1, r2, r3
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	430a      	orrs	r2, r1
 800e9b0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	685b      	ldr	r3, [r3, #4]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d113      	bne.n	800e9e2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	689b      	ldr	r3, [r3, #8]
 800e9c0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e9cc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	689b      	ldr	r3, [r3, #8]
 800e9d4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e9e0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	f022 0201 	bic.w	r2, r2, #1
 800e9f0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	685b      	ldr	r3, [r3, #4]
 800e9f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d00a      	beq.n	800ea14 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	68db      	ldr	r3, [r3, #12]
 800ea04:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	430a      	orrs	r2, r1
 800ea12:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	2200      	movs	r2, #0
 800ea18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	2201      	movs	r2, #1
 800ea20:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800ea24:	2300      	movs	r3, #0
}
 800ea26:	4618      	mov	r0, r3
 800ea28:	3710      	adds	r7, #16
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}
 800ea2e:	bf00      	nop
 800ea30:	40013000 	.word	0x40013000
 800ea34:	40003800 	.word	0x40003800
 800ea38:	40003c00 	.word	0x40003c00

0800ea3c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b08a      	sub	sp, #40	; 0x28
 800ea40:	af02      	add	r7, sp, #8
 800ea42:	60f8      	str	r0, [r7, #12]
 800ea44:	60b9      	str	r1, [r7, #8]
 800ea46:	603b      	str	r3, [r7, #0]
 800ea48:	4613      	mov	r3, r2
 800ea4a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	3320      	adds	r3, #32
 800ea52:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ea54:	2300      	movs	r3, #0
 800ea56:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ea5e:	2b01      	cmp	r3, #1
 800ea60:	d101      	bne.n	800ea66 <HAL_SPI_Transmit+0x2a>
 800ea62:	2302      	movs	r3, #2
 800ea64:	e1e1      	b.n	800ee2a <HAL_SPI_Transmit+0x3ee>
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	2201      	movs	r2, #1
 800ea6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ea6e:	f7f4 ffa5 	bl	80039bc <HAL_GetTick>
 800ea72:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ea7a:	b2db      	uxtb	r3, r3
 800ea7c:	2b01      	cmp	r3, #1
 800ea7e:	d007      	beq.n	800ea90 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800ea80:	2302      	movs	r3, #2
 800ea82:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	2200      	movs	r2, #0
 800ea88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ea8c:	7efb      	ldrb	r3, [r7, #27]
 800ea8e:	e1cc      	b.n	800ee2a <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d002      	beq.n	800ea9c <HAL_SPI_Transmit+0x60>
 800ea96:	88fb      	ldrh	r3, [r7, #6]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d107      	bne.n	800eaac <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800ea9c:	2301      	movs	r3, #1
 800ea9e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800eaa8:	7efb      	ldrb	r3, [r7, #27]
 800eaaa:	e1be      	b.n	800ee2a <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	2203      	movs	r2, #3
 800eab0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	2200      	movs	r2, #0
 800eab8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	68ba      	ldr	r2, [r7, #8]
 800eac0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	88fa      	ldrh	r2, [r7, #6]
 800eac6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	88fa      	ldrh	r2, [r7, #6]
 800eace:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	2200      	movs	r2, #0
 800ead6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	2200      	movs	r2, #0
 800eadc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	2200      	movs	r2, #0
 800eae4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	2200      	movs	r2, #0
 800eaec:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	689b      	ldr	r3, [r3, #8]
 800eaf8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800eafc:	d108      	bne.n	800eb10 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	681a      	ldr	r2, [r3, #0]
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eb0c:	601a      	str	r2, [r3, #0]
 800eb0e:	e009      	b.n	800eb24 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	68db      	ldr	r3, [r3, #12]
 800eb16:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800eb22:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	685a      	ldr	r2, [r3, #4]
 800eb2a:	4b96      	ldr	r3, [pc, #600]	; (800ed84 <HAL_SPI_Transmit+0x348>)
 800eb2c:	4013      	ands	r3, r2
 800eb2e:	88f9      	ldrh	r1, [r7, #6]
 800eb30:	68fa      	ldr	r2, [r7, #12]
 800eb32:	6812      	ldr	r2, [r2, #0]
 800eb34:	430b      	orrs	r3, r1
 800eb36:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	681a      	ldr	r2, [r3, #0]
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	f042 0201 	orr.w	r2, r2, #1
 800eb46:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	685b      	ldr	r3, [r3, #4]
 800eb4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800eb50:	d107      	bne.n	800eb62 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	681a      	ldr	r2, [r3, #0]
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800eb60:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	68db      	ldr	r3, [r3, #12]
 800eb66:	2b0f      	cmp	r3, #15
 800eb68:	d947      	bls.n	800ebfa <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800eb6a:	e03f      	b.n	800ebec <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	695b      	ldr	r3, [r3, #20]
 800eb72:	f003 0302 	and.w	r3, r3, #2
 800eb76:	2b02      	cmp	r3, #2
 800eb78:	d114      	bne.n	800eba4 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	6812      	ldr	r2, [r2, #0]
 800eb84:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eb8a:	1d1a      	adds	r2, r3, #4
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eb96:	b29b      	uxth	r3, r3
 800eb98:	3b01      	subs	r3, #1
 800eb9a:	b29a      	uxth	r2, r3
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800eba2:	e023      	b.n	800ebec <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eba4:	f7f4 ff0a 	bl	80039bc <HAL_GetTick>
 800eba8:	4602      	mov	r2, r0
 800ebaa:	697b      	ldr	r3, [r7, #20]
 800ebac:	1ad3      	subs	r3, r2, r3
 800ebae:	683a      	ldr	r2, [r7, #0]
 800ebb0:	429a      	cmp	r2, r3
 800ebb2:	d803      	bhi.n	800ebbc <HAL_SPI_Transmit+0x180>
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebba:	d102      	bne.n	800ebc2 <HAL_SPI_Transmit+0x186>
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d114      	bne.n	800ebec <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ebc2:	68f8      	ldr	r0, [r7, #12]
 800ebc4:	f000 fac6 	bl	800f154 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	2200      	movs	r2, #0
 800ebcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ebd6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	2201      	movs	r2, #1
 800ebe4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ebe8:	2303      	movs	r3, #3
 800ebea:	e11e      	b.n	800ee2a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ebf2:	b29b      	uxth	r3, r3
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d1b9      	bne.n	800eb6c <HAL_SPI_Transmit+0x130>
 800ebf8:	e0f1      	b.n	800edde <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	68db      	ldr	r3, [r3, #12]
 800ebfe:	2b07      	cmp	r3, #7
 800ec00:	f240 80e6 	bls.w	800edd0 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ec04:	e05d      	b.n	800ecc2 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	695b      	ldr	r3, [r3, #20]
 800ec0c:	f003 0302 	and.w	r3, r3, #2
 800ec10:	2b02      	cmp	r3, #2
 800ec12:	d132      	bne.n	800ec7a <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ec1a:	b29b      	uxth	r3, r3
 800ec1c:	2b01      	cmp	r3, #1
 800ec1e:	d918      	bls.n	800ec52 <HAL_SPI_Transmit+0x216>
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d014      	beq.n	800ec52 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	6812      	ldr	r2, [r2, #0]
 800ec32:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec38:	1d1a      	adds	r2, r3, #4
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ec44:	b29b      	uxth	r3, r3
 800ec46:	3b02      	subs	r3, #2
 800ec48:	b29a      	uxth	r2, r3
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ec50:	e037      	b.n	800ecc2 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec56:	881a      	ldrh	r2, [r3, #0]
 800ec58:	69fb      	ldr	r3, [r7, #28]
 800ec5a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec60:	1c9a      	adds	r2, r3, #2
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ec6c:	b29b      	uxth	r3, r3
 800ec6e:	3b01      	subs	r3, #1
 800ec70:	b29a      	uxth	r2, r3
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ec78:	e023      	b.n	800ecc2 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ec7a:	f7f4 fe9f 	bl	80039bc <HAL_GetTick>
 800ec7e:	4602      	mov	r2, r0
 800ec80:	697b      	ldr	r3, [r7, #20]
 800ec82:	1ad3      	subs	r3, r2, r3
 800ec84:	683a      	ldr	r2, [r7, #0]
 800ec86:	429a      	cmp	r2, r3
 800ec88:	d803      	bhi.n	800ec92 <HAL_SPI_Transmit+0x256>
 800ec8a:	683b      	ldr	r3, [r7, #0]
 800ec8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec90:	d102      	bne.n	800ec98 <HAL_SPI_Transmit+0x25c>
 800ec92:	683b      	ldr	r3, [r7, #0]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d114      	bne.n	800ecc2 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ec98:	68f8      	ldr	r0, [r7, #12]
 800ec9a:	f000 fa5b 	bl	800f154 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	2200      	movs	r2, #0
 800eca2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ecac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	2201      	movs	r2, #1
 800ecba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ecbe:	2303      	movs	r3, #3
 800ecc0:	e0b3      	b.n	800ee2a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ecc8:	b29b      	uxth	r3, r3
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d19b      	bne.n	800ec06 <HAL_SPI_Transmit+0x1ca>
 800ecce:	e086      	b.n	800edde <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	695b      	ldr	r3, [r3, #20]
 800ecd6:	f003 0302 	and.w	r3, r3, #2
 800ecda:	2b02      	cmp	r3, #2
 800ecdc:	d154      	bne.n	800ed88 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ece4:	b29b      	uxth	r3, r3
 800ece6:	2b03      	cmp	r3, #3
 800ece8:	d918      	bls.n	800ed1c <HAL_SPI_Transmit+0x2e0>
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecee:	2b40      	cmp	r3, #64	; 0x40
 800ecf0:	d914      	bls.n	800ed1c <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	6812      	ldr	r2, [r2, #0]
 800ecfc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed02:	1d1a      	adds	r2, r3, #4
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed0e:	b29b      	uxth	r3, r3
 800ed10:	3b04      	subs	r3, #4
 800ed12:	b29a      	uxth	r2, r3
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ed1a:	e059      	b.n	800edd0 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed22:	b29b      	uxth	r3, r3
 800ed24:	2b01      	cmp	r3, #1
 800ed26:	d917      	bls.n	800ed58 <HAL_SPI_Transmit+0x31c>
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d013      	beq.n	800ed58 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed34:	881a      	ldrh	r2, [r3, #0]
 800ed36:	69fb      	ldr	r3, [r7, #28]
 800ed38:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed3e:	1c9a      	adds	r2, r3, #2
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed4a:	b29b      	uxth	r3, r3
 800ed4c:	3b02      	subs	r3, #2
 800ed4e:	b29a      	uxth	r2, r3
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ed56:	e03b      	b.n	800edd0 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	3320      	adds	r3, #32
 800ed62:	7812      	ldrb	r2, [r2, #0]
 800ed64:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed6a:	1c5a      	adds	r2, r3, #1
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed76:	b29b      	uxth	r3, r3
 800ed78:	3b01      	subs	r3, #1
 800ed7a:	b29a      	uxth	r2, r3
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ed82:	e025      	b.n	800edd0 <HAL_SPI_Transmit+0x394>
 800ed84:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ed88:	f7f4 fe18 	bl	80039bc <HAL_GetTick>
 800ed8c:	4602      	mov	r2, r0
 800ed8e:	697b      	ldr	r3, [r7, #20]
 800ed90:	1ad3      	subs	r3, r2, r3
 800ed92:	683a      	ldr	r2, [r7, #0]
 800ed94:	429a      	cmp	r2, r3
 800ed96:	d803      	bhi.n	800eda0 <HAL_SPI_Transmit+0x364>
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed9e:	d102      	bne.n	800eda6 <HAL_SPI_Transmit+0x36a>
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d114      	bne.n	800edd0 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800eda6:	68f8      	ldr	r0, [r7, #12]
 800eda8:	f000 f9d4 	bl	800f154 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	2200      	movs	r2, #0
 800edb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800edba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	2201      	movs	r2, #1
 800edc8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800edcc:	2303      	movs	r3, #3
 800edce:	e02c      	b.n	800ee2a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800edd6:	b29b      	uxth	r3, r3
 800edd8:	2b00      	cmp	r3, #0
 800edda:	f47f af79 	bne.w	800ecd0 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800edde:	697b      	ldr	r3, [r7, #20]
 800ede0:	9300      	str	r3, [sp, #0]
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	2200      	movs	r2, #0
 800ede6:	2108      	movs	r1, #8
 800ede8:	68f8      	ldr	r0, [r7, #12]
 800edea:	f000 fa53 	bl	800f294 <SPI_WaitOnFlagUntilTimeout>
 800edee:	4603      	mov	r3, r0
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d007      	beq.n	800ee04 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800edfa:	f043 0220 	orr.w	r2, r3, #32
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ee04:	68f8      	ldr	r0, [r7, #12]
 800ee06:	f000 f9a5 	bl	800f154 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	2201      	movs	r2, #1
 800ee16:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d001      	beq.n	800ee28 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800ee24:	2301      	movs	r3, #1
 800ee26:	e000      	b.n	800ee2a <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800ee28:	7efb      	ldrb	r3, [r7, #27]
}
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	3720      	adds	r7, #32
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	bd80      	pop	{r7, pc}
 800ee32:	bf00      	nop

0800ee34 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b088      	sub	sp, #32
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	60f8      	str	r0, [r7, #12]
 800ee3c:	60b9      	str	r1, [r7, #8]
 800ee3e:	603b      	str	r3, [r7, #0]
 800ee40:	4613      	mov	r3, r2
 800ee42:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ee44:	2300      	movs	r3, #0
 800ee46:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	3330      	adds	r3, #48	; 0x30
 800ee4e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ee56:	2b01      	cmp	r3, #1
 800ee58:	d101      	bne.n	800ee5e <HAL_SPI_Receive+0x2a>
 800ee5a:	2302      	movs	r3, #2
 800ee5c:	e173      	b.n	800f146 <HAL_SPI_Receive+0x312>
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	2201      	movs	r2, #1
 800ee62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ee66:	f7f4 fda9 	bl	80039bc <HAL_GetTick>
 800ee6a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ee72:	b2db      	uxtb	r3, r3
 800ee74:	2b01      	cmp	r3, #1
 800ee76:	d007      	beq.n	800ee88 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800ee78:	2302      	movs	r3, #2
 800ee7a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	2200      	movs	r2, #0
 800ee80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ee84:	7ffb      	ldrb	r3, [r7, #31]
 800ee86:	e15e      	b.n	800f146 <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d002      	beq.n	800ee94 <HAL_SPI_Receive+0x60>
 800ee8e:	88fb      	ldrh	r3, [r7, #6]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d107      	bne.n	800eea4 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800ee94:	2301      	movs	r3, #1
 800ee96:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800eea0:	7ffb      	ldrb	r3, [r7, #31]
 800eea2:	e150      	b.n	800f146 <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	2204      	movs	r2, #4
 800eea8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	2200      	movs	r2, #0
 800eeb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	68ba      	ldr	r2, [r7, #8]
 800eeb8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	88fa      	ldrh	r2, [r7, #6]
 800eebe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	88fa      	ldrh	r2, [r7, #6]
 800eec6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	2200      	movs	r2, #0
 800eece:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	2200      	movs	r2, #0
 800eed4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	2200      	movs	r2, #0
 800eedc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	2200      	movs	r2, #0
 800eee4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	2200      	movs	r2, #0
 800eeea:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	689b      	ldr	r3, [r3, #8]
 800eef0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800eef4:	d108      	bne.n	800ef08 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	681a      	ldr	r2, [r3, #0]
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ef04:	601a      	str	r2, [r3, #0]
 800ef06:	e009      	b.n	800ef1c <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	68db      	ldr	r3, [r3, #12]
 800ef0e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ef1a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	685a      	ldr	r2, [r3, #4]
 800ef22:	4b8b      	ldr	r3, [pc, #556]	; (800f150 <HAL_SPI_Receive+0x31c>)
 800ef24:	4013      	ands	r3, r2
 800ef26:	88f9      	ldrh	r1, [r7, #6]
 800ef28:	68fa      	ldr	r2, [r7, #12]
 800ef2a:	6812      	ldr	r2, [r2, #0]
 800ef2c:	430b      	orrs	r3, r1
 800ef2e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	681a      	ldr	r2, [r3, #0]
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	f042 0201 	orr.w	r2, r2, #1
 800ef3e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	685b      	ldr	r3, [r3, #4]
 800ef44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ef48:	d107      	bne.n	800ef5a <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	681a      	ldr	r2, [r3, #0]
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ef58:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	68db      	ldr	r3, [r3, #12]
 800ef5e:	2b0f      	cmp	r3, #15
 800ef60:	d948      	bls.n	800eff4 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ef62:	e040      	b.n	800efe6 <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	695a      	ldr	r2, [r3, #20]
 800ef6a:	f248 0308 	movw	r3, #32776	; 0x8008
 800ef6e:	4013      	ands	r3, r2
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d014      	beq.n	800ef9e <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	681a      	ldr	r2, [r3, #0]
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef7c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ef7e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef84:	1d1a      	adds	r2, r3, #4
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ef90:	b29b      	uxth	r3, r3
 800ef92:	3b01      	subs	r3, #1
 800ef94:	b29a      	uxth	r2, r3
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ef9c:	e023      	b.n	800efe6 <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ef9e:	f7f4 fd0d 	bl	80039bc <HAL_GetTick>
 800efa2:	4602      	mov	r2, r0
 800efa4:	697b      	ldr	r3, [r7, #20]
 800efa6:	1ad3      	subs	r3, r2, r3
 800efa8:	683a      	ldr	r2, [r7, #0]
 800efaa:	429a      	cmp	r2, r3
 800efac:	d803      	bhi.n	800efb6 <HAL_SPI_Receive+0x182>
 800efae:	683b      	ldr	r3, [r7, #0]
 800efb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efb4:	d102      	bne.n	800efbc <HAL_SPI_Receive+0x188>
 800efb6:	683b      	ldr	r3, [r7, #0]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d114      	bne.n	800efe6 <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800efbc:	68f8      	ldr	r0, [r7, #12]
 800efbe:	f000 f8c9 	bl	800f154 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	2200      	movs	r2, #0
 800efc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800efd0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	2201      	movs	r2, #1
 800efde:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800efe2:	2303      	movs	r3, #3
 800efe4:	e0af      	b.n	800f146 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800efec:	b29b      	uxth	r3, r3
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d1b8      	bne.n	800ef64 <HAL_SPI_Receive+0x130>
 800eff2:	e095      	b.n	800f120 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	68db      	ldr	r3, [r3, #12]
 800eff8:	2b07      	cmp	r3, #7
 800effa:	f240 808b 	bls.w	800f114 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800effe:	e03f      	b.n	800f080 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	695b      	ldr	r3, [r3, #20]
 800f006:	f003 0301 	and.w	r3, r3, #1
 800f00a:	2b01      	cmp	r3, #1
 800f00c:	d114      	bne.n	800f038 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f012:	69ba      	ldr	r2, [r7, #24]
 800f014:	8812      	ldrh	r2, [r2, #0]
 800f016:	b292      	uxth	r2, r2
 800f018:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f01e:	1c9a      	adds	r2, r3, #2
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f02a:	b29b      	uxth	r3, r3
 800f02c:	3b01      	subs	r3, #1
 800f02e:	b29a      	uxth	r2, r3
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f036:	e023      	b.n	800f080 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f038:	f7f4 fcc0 	bl	80039bc <HAL_GetTick>
 800f03c:	4602      	mov	r2, r0
 800f03e:	697b      	ldr	r3, [r7, #20]
 800f040:	1ad3      	subs	r3, r2, r3
 800f042:	683a      	ldr	r2, [r7, #0]
 800f044:	429a      	cmp	r2, r3
 800f046:	d803      	bhi.n	800f050 <HAL_SPI_Receive+0x21c>
 800f048:	683b      	ldr	r3, [r7, #0]
 800f04a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f04e:	d102      	bne.n	800f056 <HAL_SPI_Receive+0x222>
 800f050:	683b      	ldr	r3, [r7, #0]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d114      	bne.n	800f080 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f056:	68f8      	ldr	r0, [r7, #12]
 800f058:	f000 f87c 	bl	800f154 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	2200      	movs	r2, #0
 800f060:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f06a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	2201      	movs	r2, #1
 800f078:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f07c:	2303      	movs	r3, #3
 800f07e:	e062      	b.n	800f146 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f086:	b29b      	uxth	r3, r3
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d1b9      	bne.n	800f000 <HAL_SPI_Receive+0x1cc>
 800f08c:	e048      	b.n	800f120 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	695b      	ldr	r3, [r3, #20]
 800f094:	f003 0301 	and.w	r3, r3, #1
 800f098:	2b01      	cmp	r3, #1
 800f09a:	d117      	bne.n	800f0cc <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0a8:	7812      	ldrb	r2, [r2, #0]
 800f0aa:	b2d2      	uxtb	r2, r2
 800f0ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0b2:	1c5a      	adds	r2, r3, #1
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f0be:	b29b      	uxth	r3, r3
 800f0c0:	3b01      	subs	r3, #1
 800f0c2:	b29a      	uxth	r2, r3
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f0ca:	e023      	b.n	800f114 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f0cc:	f7f4 fc76 	bl	80039bc <HAL_GetTick>
 800f0d0:	4602      	mov	r2, r0
 800f0d2:	697b      	ldr	r3, [r7, #20]
 800f0d4:	1ad3      	subs	r3, r2, r3
 800f0d6:	683a      	ldr	r2, [r7, #0]
 800f0d8:	429a      	cmp	r2, r3
 800f0da:	d803      	bhi.n	800f0e4 <HAL_SPI_Receive+0x2b0>
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0e2:	d102      	bne.n	800f0ea <HAL_SPI_Receive+0x2b6>
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d114      	bne.n	800f114 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f0ea:	68f8      	ldr	r0, [r7, #12]
 800f0ec:	f000 f832 	bl	800f154 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f0fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	2201      	movs	r2, #1
 800f10c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f110:	2303      	movs	r3, #3
 800f112:	e018      	b.n	800f146 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f11a:	b29b      	uxth	r3, r3
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d1b6      	bne.n	800f08e <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f120:	68f8      	ldr	r0, [r7, #12]
 800f122:	f000 f817 	bl	800f154 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	2200      	movs	r2, #0
 800f12a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	2201      	movs	r2, #1
 800f132:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d001      	beq.n	800f144 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800f140:	2301      	movs	r3, #1
 800f142:	e000      	b.n	800f146 <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800f144:	7ffb      	ldrb	r3, [r7, #31]
}
 800f146:	4618      	mov	r0, r3
 800f148:	3720      	adds	r7, #32
 800f14a:	46bd      	mov	sp, r7
 800f14c:	bd80      	pop	{r7, pc}
 800f14e:	bf00      	nop
 800f150:	ffff0000 	.word	0xffff0000

0800f154 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f154:	b480      	push	{r7}
 800f156:	b085      	sub	sp, #20
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	695b      	ldr	r3, [r3, #20]
 800f162:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	699a      	ldr	r2, [r3, #24]
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	f042 0208 	orr.w	r2, r2, #8
 800f172:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	699a      	ldr	r2, [r3, #24]
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	f042 0210 	orr.w	r2, r2, #16
 800f182:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	681a      	ldr	r2, [r3, #0]
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	f022 0201 	bic.w	r2, r2, #1
 800f192:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	6919      	ldr	r1, [r3, #16]
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	681a      	ldr	r2, [r3, #0]
 800f19e:	4b3c      	ldr	r3, [pc, #240]	; (800f290 <SPI_CloseTransfer+0x13c>)
 800f1a0:	400b      	ands	r3, r1
 800f1a2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	689a      	ldr	r2, [r3, #8]
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f1b2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f1ba:	b2db      	uxtb	r3, r3
 800f1bc:	2b04      	cmp	r3, #4
 800f1be:	d014      	beq.n	800f1ea <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	f003 0320 	and.w	r3, r3, #32
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d00f      	beq.n	800f1ea <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	699a      	ldr	r2, [r3, #24]
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	f042 0220 	orr.w	r2, r2, #32
 800f1e8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f1f0:	b2db      	uxtb	r3, r3
 800f1f2:	2b03      	cmp	r3, #3
 800f1f4:	d014      	beq.n	800f220 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d00f      	beq.n	800f220 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f206:	f043 0204 	orr.w	r2, r3, #4
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	699a      	ldr	r2, [r3, #24]
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f21e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f226:	2b00      	cmp	r3, #0
 800f228:	d00f      	beq.n	800f24a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f230:	f043 0201 	orr.w	r2, r3, #1
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	699a      	ldr	r2, [r3, #24]
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f248:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f250:	2b00      	cmp	r3, #0
 800f252:	d00f      	beq.n	800f274 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f25a:	f043 0208 	orr.w	r2, r3, #8
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	699a      	ldr	r2, [r3, #24]
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f272:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	2200      	movs	r2, #0
 800f278:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	2200      	movs	r2, #0
 800f280:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800f284:	bf00      	nop
 800f286:	3714      	adds	r7, #20
 800f288:	46bd      	mov	sp, r7
 800f28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28e:	4770      	bx	lr
 800f290:	fffffc90 	.word	0xfffffc90

0800f294 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800f294:	b580      	push	{r7, lr}
 800f296:	b084      	sub	sp, #16
 800f298:	af00      	add	r7, sp, #0
 800f29a:	60f8      	str	r0, [r7, #12]
 800f29c:	60b9      	str	r1, [r7, #8]
 800f29e:	603b      	str	r3, [r7, #0]
 800f2a0:	4613      	mov	r3, r2
 800f2a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f2a4:	e010      	b.n	800f2c8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f2a6:	f7f4 fb89 	bl	80039bc <HAL_GetTick>
 800f2aa:	4602      	mov	r2, r0
 800f2ac:	69bb      	ldr	r3, [r7, #24]
 800f2ae:	1ad3      	subs	r3, r2, r3
 800f2b0:	683a      	ldr	r2, [r7, #0]
 800f2b2:	429a      	cmp	r2, r3
 800f2b4:	d803      	bhi.n	800f2be <SPI_WaitOnFlagUntilTimeout+0x2a>
 800f2b6:	683b      	ldr	r3, [r7, #0]
 800f2b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2bc:	d102      	bne.n	800f2c4 <SPI_WaitOnFlagUntilTimeout+0x30>
 800f2be:	683b      	ldr	r3, [r7, #0]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d101      	bne.n	800f2c8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800f2c4:	2303      	movs	r3, #3
 800f2c6:	e00f      	b.n	800f2e8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	695a      	ldr	r2, [r3, #20]
 800f2ce:	68bb      	ldr	r3, [r7, #8]
 800f2d0:	4013      	ands	r3, r2
 800f2d2:	68ba      	ldr	r2, [r7, #8]
 800f2d4:	429a      	cmp	r2, r3
 800f2d6:	bf0c      	ite	eq
 800f2d8:	2301      	moveq	r3, #1
 800f2da:	2300      	movne	r3, #0
 800f2dc:	b2db      	uxtb	r3, r3
 800f2de:	461a      	mov	r2, r3
 800f2e0:	79fb      	ldrb	r3, [r7, #7]
 800f2e2:	429a      	cmp	r2, r3
 800f2e4:	d0df      	beq.n	800f2a6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800f2e6:	2300      	movs	r3, #0
}
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	3710      	adds	r7, #16
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	bd80      	pop	{r7, pc}

0800f2f0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800f2f0:	b480      	push	{r7}
 800f2f2:	b085      	sub	sp, #20
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2fc:	095b      	lsrs	r3, r3, #5
 800f2fe:	3301      	adds	r3, #1
 800f300:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	68db      	ldr	r3, [r3, #12]
 800f306:	3301      	adds	r3, #1
 800f308:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	3307      	adds	r3, #7
 800f30e:	08db      	lsrs	r3, r3, #3
 800f310:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f312:	68bb      	ldr	r3, [r7, #8]
 800f314:	68fa      	ldr	r2, [r7, #12]
 800f316:	fb02 f303 	mul.w	r3, r2, r3
}
 800f31a:	4618      	mov	r0, r3
 800f31c:	3714      	adds	r7, #20
 800f31e:	46bd      	mov	sp, r7
 800f320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f324:	4770      	bx	lr

0800f326 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f326:	b580      	push	{r7, lr}
 800f328:	b082      	sub	sp, #8
 800f32a:	af00      	add	r7, sp, #0
 800f32c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d101      	bne.n	800f338 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f334:	2301      	movs	r3, #1
 800f336:	e049      	b.n	800f3cc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f33e:	b2db      	uxtb	r3, r3
 800f340:	2b00      	cmp	r3, #0
 800f342:	d106      	bne.n	800f352 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	2200      	movs	r2, #0
 800f348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f34c:	6878      	ldr	r0, [r7, #4]
 800f34e:	f7f3 fe35 	bl	8002fbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	2202      	movs	r2, #2
 800f356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681a      	ldr	r2, [r3, #0]
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	3304      	adds	r3, #4
 800f362:	4619      	mov	r1, r3
 800f364:	4610      	mov	r0, r2
 800f366:	f000 fed1 	bl	801010c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	2201      	movs	r2, #1
 800f36e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	2201      	movs	r2, #1
 800f376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	2201      	movs	r2, #1
 800f37e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	2201      	movs	r2, #1
 800f386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	2201      	movs	r2, #1
 800f38e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	2201      	movs	r2, #1
 800f396:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	2201      	movs	r2, #1
 800f39e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	2201      	movs	r2, #1
 800f3a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	2201      	movs	r2, #1
 800f3ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	2201      	movs	r2, #1
 800f3b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	2201      	movs	r2, #1
 800f3be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	2201      	movs	r2, #1
 800f3c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f3ca:	2300      	movs	r3, #0
}
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	3708      	adds	r7, #8
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	bd80      	pop	{r7, pc}

0800f3d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b084      	sub	sp, #16
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
 800f3dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d109      	bne.n	800f3f8 <HAL_TIM_PWM_Start+0x24>
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f3ea:	b2db      	uxtb	r3, r3
 800f3ec:	2b01      	cmp	r3, #1
 800f3ee:	bf14      	ite	ne
 800f3f0:	2301      	movne	r3, #1
 800f3f2:	2300      	moveq	r3, #0
 800f3f4:	b2db      	uxtb	r3, r3
 800f3f6:	e03c      	b.n	800f472 <HAL_TIM_PWM_Start+0x9e>
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	2b04      	cmp	r3, #4
 800f3fc:	d109      	bne.n	800f412 <HAL_TIM_PWM_Start+0x3e>
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f404:	b2db      	uxtb	r3, r3
 800f406:	2b01      	cmp	r3, #1
 800f408:	bf14      	ite	ne
 800f40a:	2301      	movne	r3, #1
 800f40c:	2300      	moveq	r3, #0
 800f40e:	b2db      	uxtb	r3, r3
 800f410:	e02f      	b.n	800f472 <HAL_TIM_PWM_Start+0x9e>
 800f412:	683b      	ldr	r3, [r7, #0]
 800f414:	2b08      	cmp	r3, #8
 800f416:	d109      	bne.n	800f42c <HAL_TIM_PWM_Start+0x58>
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f41e:	b2db      	uxtb	r3, r3
 800f420:	2b01      	cmp	r3, #1
 800f422:	bf14      	ite	ne
 800f424:	2301      	movne	r3, #1
 800f426:	2300      	moveq	r3, #0
 800f428:	b2db      	uxtb	r3, r3
 800f42a:	e022      	b.n	800f472 <HAL_TIM_PWM_Start+0x9e>
 800f42c:	683b      	ldr	r3, [r7, #0]
 800f42e:	2b0c      	cmp	r3, #12
 800f430:	d109      	bne.n	800f446 <HAL_TIM_PWM_Start+0x72>
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f438:	b2db      	uxtb	r3, r3
 800f43a:	2b01      	cmp	r3, #1
 800f43c:	bf14      	ite	ne
 800f43e:	2301      	movne	r3, #1
 800f440:	2300      	moveq	r3, #0
 800f442:	b2db      	uxtb	r3, r3
 800f444:	e015      	b.n	800f472 <HAL_TIM_PWM_Start+0x9e>
 800f446:	683b      	ldr	r3, [r7, #0]
 800f448:	2b10      	cmp	r3, #16
 800f44a:	d109      	bne.n	800f460 <HAL_TIM_PWM_Start+0x8c>
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f452:	b2db      	uxtb	r3, r3
 800f454:	2b01      	cmp	r3, #1
 800f456:	bf14      	ite	ne
 800f458:	2301      	movne	r3, #1
 800f45a:	2300      	moveq	r3, #0
 800f45c:	b2db      	uxtb	r3, r3
 800f45e:	e008      	b.n	800f472 <HAL_TIM_PWM_Start+0x9e>
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f466:	b2db      	uxtb	r3, r3
 800f468:	2b01      	cmp	r3, #1
 800f46a:	bf14      	ite	ne
 800f46c:	2301      	movne	r3, #1
 800f46e:	2300      	moveq	r3, #0
 800f470:	b2db      	uxtb	r3, r3
 800f472:	2b00      	cmp	r3, #0
 800f474:	d001      	beq.n	800f47a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800f476:	2301      	movs	r3, #1
 800f478:	e0ab      	b.n	800f5d2 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f47a:	683b      	ldr	r3, [r7, #0]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d104      	bne.n	800f48a <HAL_TIM_PWM_Start+0xb6>
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	2202      	movs	r2, #2
 800f484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f488:	e023      	b.n	800f4d2 <HAL_TIM_PWM_Start+0xfe>
 800f48a:	683b      	ldr	r3, [r7, #0]
 800f48c:	2b04      	cmp	r3, #4
 800f48e:	d104      	bne.n	800f49a <HAL_TIM_PWM_Start+0xc6>
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	2202      	movs	r2, #2
 800f494:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f498:	e01b      	b.n	800f4d2 <HAL_TIM_PWM_Start+0xfe>
 800f49a:	683b      	ldr	r3, [r7, #0]
 800f49c:	2b08      	cmp	r3, #8
 800f49e:	d104      	bne.n	800f4aa <HAL_TIM_PWM_Start+0xd6>
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	2202      	movs	r2, #2
 800f4a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f4a8:	e013      	b.n	800f4d2 <HAL_TIM_PWM_Start+0xfe>
 800f4aa:	683b      	ldr	r3, [r7, #0]
 800f4ac:	2b0c      	cmp	r3, #12
 800f4ae:	d104      	bne.n	800f4ba <HAL_TIM_PWM_Start+0xe6>
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	2202      	movs	r2, #2
 800f4b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f4b8:	e00b      	b.n	800f4d2 <HAL_TIM_PWM_Start+0xfe>
 800f4ba:	683b      	ldr	r3, [r7, #0]
 800f4bc:	2b10      	cmp	r3, #16
 800f4be:	d104      	bne.n	800f4ca <HAL_TIM_PWM_Start+0xf6>
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	2202      	movs	r2, #2
 800f4c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f4c8:	e003      	b.n	800f4d2 <HAL_TIM_PWM_Start+0xfe>
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	2202      	movs	r2, #2
 800f4ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	2201      	movs	r2, #1
 800f4d8:	6839      	ldr	r1, [r7, #0]
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f001 f992 	bl	8010804 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	4a3d      	ldr	r2, [pc, #244]	; (800f5dc <HAL_TIM_PWM_Start+0x208>)
 800f4e6:	4293      	cmp	r3, r2
 800f4e8:	d013      	beq.n	800f512 <HAL_TIM_PWM_Start+0x13e>
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	4a3c      	ldr	r2, [pc, #240]	; (800f5e0 <HAL_TIM_PWM_Start+0x20c>)
 800f4f0:	4293      	cmp	r3, r2
 800f4f2:	d00e      	beq.n	800f512 <HAL_TIM_PWM_Start+0x13e>
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	4a3a      	ldr	r2, [pc, #232]	; (800f5e4 <HAL_TIM_PWM_Start+0x210>)
 800f4fa:	4293      	cmp	r3, r2
 800f4fc:	d009      	beq.n	800f512 <HAL_TIM_PWM_Start+0x13e>
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	4a39      	ldr	r2, [pc, #228]	; (800f5e8 <HAL_TIM_PWM_Start+0x214>)
 800f504:	4293      	cmp	r3, r2
 800f506:	d004      	beq.n	800f512 <HAL_TIM_PWM_Start+0x13e>
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	4a37      	ldr	r2, [pc, #220]	; (800f5ec <HAL_TIM_PWM_Start+0x218>)
 800f50e:	4293      	cmp	r3, r2
 800f510:	d101      	bne.n	800f516 <HAL_TIM_PWM_Start+0x142>
 800f512:	2301      	movs	r3, #1
 800f514:	e000      	b.n	800f518 <HAL_TIM_PWM_Start+0x144>
 800f516:	2300      	movs	r3, #0
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d007      	beq.n	800f52c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f52a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	4a2a      	ldr	r2, [pc, #168]	; (800f5dc <HAL_TIM_PWM_Start+0x208>)
 800f532:	4293      	cmp	r3, r2
 800f534:	d02c      	beq.n	800f590 <HAL_TIM_PWM_Start+0x1bc>
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f53e:	d027      	beq.n	800f590 <HAL_TIM_PWM_Start+0x1bc>
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	4a2a      	ldr	r2, [pc, #168]	; (800f5f0 <HAL_TIM_PWM_Start+0x21c>)
 800f546:	4293      	cmp	r3, r2
 800f548:	d022      	beq.n	800f590 <HAL_TIM_PWM_Start+0x1bc>
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	4a29      	ldr	r2, [pc, #164]	; (800f5f4 <HAL_TIM_PWM_Start+0x220>)
 800f550:	4293      	cmp	r3, r2
 800f552:	d01d      	beq.n	800f590 <HAL_TIM_PWM_Start+0x1bc>
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	4a27      	ldr	r2, [pc, #156]	; (800f5f8 <HAL_TIM_PWM_Start+0x224>)
 800f55a:	4293      	cmp	r3, r2
 800f55c:	d018      	beq.n	800f590 <HAL_TIM_PWM_Start+0x1bc>
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	4a1f      	ldr	r2, [pc, #124]	; (800f5e0 <HAL_TIM_PWM_Start+0x20c>)
 800f564:	4293      	cmp	r3, r2
 800f566:	d013      	beq.n	800f590 <HAL_TIM_PWM_Start+0x1bc>
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	4a23      	ldr	r2, [pc, #140]	; (800f5fc <HAL_TIM_PWM_Start+0x228>)
 800f56e:	4293      	cmp	r3, r2
 800f570:	d00e      	beq.n	800f590 <HAL_TIM_PWM_Start+0x1bc>
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	4a1b      	ldr	r2, [pc, #108]	; (800f5e4 <HAL_TIM_PWM_Start+0x210>)
 800f578:	4293      	cmp	r3, r2
 800f57a:	d009      	beq.n	800f590 <HAL_TIM_PWM_Start+0x1bc>
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	4a1f      	ldr	r2, [pc, #124]	; (800f600 <HAL_TIM_PWM_Start+0x22c>)
 800f582:	4293      	cmp	r3, r2
 800f584:	d004      	beq.n	800f590 <HAL_TIM_PWM_Start+0x1bc>
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	4a1e      	ldr	r2, [pc, #120]	; (800f604 <HAL_TIM_PWM_Start+0x230>)
 800f58c:	4293      	cmp	r3, r2
 800f58e:	d115      	bne.n	800f5bc <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	689a      	ldr	r2, [r3, #8]
 800f596:	4b1c      	ldr	r3, [pc, #112]	; (800f608 <HAL_TIM_PWM_Start+0x234>)
 800f598:	4013      	ands	r3, r2
 800f59a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	2b06      	cmp	r3, #6
 800f5a0:	d015      	beq.n	800f5ce <HAL_TIM_PWM_Start+0x1fa>
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f5a8:	d011      	beq.n	800f5ce <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	681a      	ldr	r2, [r3, #0]
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	f042 0201 	orr.w	r2, r2, #1
 800f5b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f5ba:	e008      	b.n	800f5ce <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	681a      	ldr	r2, [r3, #0]
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	f042 0201 	orr.w	r2, r2, #1
 800f5ca:	601a      	str	r2, [r3, #0]
 800f5cc:	e000      	b.n	800f5d0 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f5ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f5d0:	2300      	movs	r3, #0
}
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	3710      	adds	r7, #16
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	bd80      	pop	{r7, pc}
 800f5da:	bf00      	nop
 800f5dc:	40010000 	.word	0x40010000
 800f5e0:	40010400 	.word	0x40010400
 800f5e4:	40014000 	.word	0x40014000
 800f5e8:	40014400 	.word	0x40014400
 800f5ec:	40014800 	.word	0x40014800
 800f5f0:	40000400 	.word	0x40000400
 800f5f4:	40000800 	.word	0x40000800
 800f5f8:	40000c00 	.word	0x40000c00
 800f5fc:	40001800 	.word	0x40001800
 800f600:	4000e000 	.word	0x4000e000
 800f604:	4000e400 	.word	0x4000e400
 800f608:	00010007 	.word	0x00010007

0800f60c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b086      	sub	sp, #24
 800f610:	af00      	add	r7, sp, #0
 800f612:	60f8      	str	r0, [r7, #12]
 800f614:	60b9      	str	r1, [r7, #8]
 800f616:	607a      	str	r2, [r7, #4]
 800f618:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800f61a:	2300      	movs	r3, #0
 800f61c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800f61e:	68bb      	ldr	r3, [r7, #8]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d109      	bne.n	800f638 <HAL_TIM_PWM_Start_DMA+0x2c>
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f62a:	b2db      	uxtb	r3, r3
 800f62c:	2b02      	cmp	r3, #2
 800f62e:	bf0c      	ite	eq
 800f630:	2301      	moveq	r3, #1
 800f632:	2300      	movne	r3, #0
 800f634:	b2db      	uxtb	r3, r3
 800f636:	e03c      	b.n	800f6b2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f638:	68bb      	ldr	r3, [r7, #8]
 800f63a:	2b04      	cmp	r3, #4
 800f63c:	d109      	bne.n	800f652 <HAL_TIM_PWM_Start_DMA+0x46>
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f644:	b2db      	uxtb	r3, r3
 800f646:	2b02      	cmp	r3, #2
 800f648:	bf0c      	ite	eq
 800f64a:	2301      	moveq	r3, #1
 800f64c:	2300      	movne	r3, #0
 800f64e:	b2db      	uxtb	r3, r3
 800f650:	e02f      	b.n	800f6b2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f652:	68bb      	ldr	r3, [r7, #8]
 800f654:	2b08      	cmp	r3, #8
 800f656:	d109      	bne.n	800f66c <HAL_TIM_PWM_Start_DMA+0x60>
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f65e:	b2db      	uxtb	r3, r3
 800f660:	2b02      	cmp	r3, #2
 800f662:	bf0c      	ite	eq
 800f664:	2301      	moveq	r3, #1
 800f666:	2300      	movne	r3, #0
 800f668:	b2db      	uxtb	r3, r3
 800f66a:	e022      	b.n	800f6b2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f66c:	68bb      	ldr	r3, [r7, #8]
 800f66e:	2b0c      	cmp	r3, #12
 800f670:	d109      	bne.n	800f686 <HAL_TIM_PWM_Start_DMA+0x7a>
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f678:	b2db      	uxtb	r3, r3
 800f67a:	2b02      	cmp	r3, #2
 800f67c:	bf0c      	ite	eq
 800f67e:	2301      	moveq	r3, #1
 800f680:	2300      	movne	r3, #0
 800f682:	b2db      	uxtb	r3, r3
 800f684:	e015      	b.n	800f6b2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f686:	68bb      	ldr	r3, [r7, #8]
 800f688:	2b10      	cmp	r3, #16
 800f68a:	d109      	bne.n	800f6a0 <HAL_TIM_PWM_Start_DMA+0x94>
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f692:	b2db      	uxtb	r3, r3
 800f694:	2b02      	cmp	r3, #2
 800f696:	bf0c      	ite	eq
 800f698:	2301      	moveq	r3, #1
 800f69a:	2300      	movne	r3, #0
 800f69c:	b2db      	uxtb	r3, r3
 800f69e:	e008      	b.n	800f6b2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f6a6:	b2db      	uxtb	r3, r3
 800f6a8:	2b02      	cmp	r3, #2
 800f6aa:	bf0c      	ite	eq
 800f6ac:	2301      	moveq	r3, #1
 800f6ae:	2300      	movne	r3, #0
 800f6b0:	b2db      	uxtb	r3, r3
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d001      	beq.n	800f6ba <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800f6b6:	2302      	movs	r3, #2
 800f6b8:	e1ba      	b.n	800fa30 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800f6ba:	68bb      	ldr	r3, [r7, #8]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d109      	bne.n	800f6d4 <HAL_TIM_PWM_Start_DMA+0xc8>
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f6c6:	b2db      	uxtb	r3, r3
 800f6c8:	2b01      	cmp	r3, #1
 800f6ca:	bf0c      	ite	eq
 800f6cc:	2301      	moveq	r3, #1
 800f6ce:	2300      	movne	r3, #0
 800f6d0:	b2db      	uxtb	r3, r3
 800f6d2:	e03c      	b.n	800f74e <HAL_TIM_PWM_Start_DMA+0x142>
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	2b04      	cmp	r3, #4
 800f6d8:	d109      	bne.n	800f6ee <HAL_TIM_PWM_Start_DMA+0xe2>
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f6e0:	b2db      	uxtb	r3, r3
 800f6e2:	2b01      	cmp	r3, #1
 800f6e4:	bf0c      	ite	eq
 800f6e6:	2301      	moveq	r3, #1
 800f6e8:	2300      	movne	r3, #0
 800f6ea:	b2db      	uxtb	r3, r3
 800f6ec:	e02f      	b.n	800f74e <HAL_TIM_PWM_Start_DMA+0x142>
 800f6ee:	68bb      	ldr	r3, [r7, #8]
 800f6f0:	2b08      	cmp	r3, #8
 800f6f2:	d109      	bne.n	800f708 <HAL_TIM_PWM_Start_DMA+0xfc>
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f6fa:	b2db      	uxtb	r3, r3
 800f6fc:	2b01      	cmp	r3, #1
 800f6fe:	bf0c      	ite	eq
 800f700:	2301      	moveq	r3, #1
 800f702:	2300      	movne	r3, #0
 800f704:	b2db      	uxtb	r3, r3
 800f706:	e022      	b.n	800f74e <HAL_TIM_PWM_Start_DMA+0x142>
 800f708:	68bb      	ldr	r3, [r7, #8]
 800f70a:	2b0c      	cmp	r3, #12
 800f70c:	d109      	bne.n	800f722 <HAL_TIM_PWM_Start_DMA+0x116>
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f714:	b2db      	uxtb	r3, r3
 800f716:	2b01      	cmp	r3, #1
 800f718:	bf0c      	ite	eq
 800f71a:	2301      	moveq	r3, #1
 800f71c:	2300      	movne	r3, #0
 800f71e:	b2db      	uxtb	r3, r3
 800f720:	e015      	b.n	800f74e <HAL_TIM_PWM_Start_DMA+0x142>
 800f722:	68bb      	ldr	r3, [r7, #8]
 800f724:	2b10      	cmp	r3, #16
 800f726:	d109      	bne.n	800f73c <HAL_TIM_PWM_Start_DMA+0x130>
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f72e:	b2db      	uxtb	r3, r3
 800f730:	2b01      	cmp	r3, #1
 800f732:	bf0c      	ite	eq
 800f734:	2301      	moveq	r3, #1
 800f736:	2300      	movne	r3, #0
 800f738:	b2db      	uxtb	r3, r3
 800f73a:	e008      	b.n	800f74e <HAL_TIM_PWM_Start_DMA+0x142>
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f742:	b2db      	uxtb	r3, r3
 800f744:	2b01      	cmp	r3, #1
 800f746:	bf0c      	ite	eq
 800f748:	2301      	moveq	r3, #1
 800f74a:	2300      	movne	r3, #0
 800f74c:	b2db      	uxtb	r3, r3
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d034      	beq.n	800f7bc <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d002      	beq.n	800f75e <HAL_TIM_PWM_Start_DMA+0x152>
 800f758:	887b      	ldrh	r3, [r7, #2]
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d101      	bne.n	800f762 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800f75e:	2301      	movs	r3, #1
 800f760:	e166      	b.n	800fa30 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f762:	68bb      	ldr	r3, [r7, #8]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d104      	bne.n	800f772 <HAL_TIM_PWM_Start_DMA+0x166>
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	2202      	movs	r2, #2
 800f76c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f770:	e026      	b.n	800f7c0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f772:	68bb      	ldr	r3, [r7, #8]
 800f774:	2b04      	cmp	r3, #4
 800f776:	d104      	bne.n	800f782 <HAL_TIM_PWM_Start_DMA+0x176>
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	2202      	movs	r2, #2
 800f77c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f780:	e01e      	b.n	800f7c0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f782:	68bb      	ldr	r3, [r7, #8]
 800f784:	2b08      	cmp	r3, #8
 800f786:	d104      	bne.n	800f792 <HAL_TIM_PWM_Start_DMA+0x186>
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	2202      	movs	r2, #2
 800f78c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f790:	e016      	b.n	800f7c0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f792:	68bb      	ldr	r3, [r7, #8]
 800f794:	2b0c      	cmp	r3, #12
 800f796:	d104      	bne.n	800f7a2 <HAL_TIM_PWM_Start_DMA+0x196>
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	2202      	movs	r2, #2
 800f79c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f7a0:	e00e      	b.n	800f7c0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f7a2:	68bb      	ldr	r3, [r7, #8]
 800f7a4:	2b10      	cmp	r3, #16
 800f7a6:	d104      	bne.n	800f7b2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	2202      	movs	r2, #2
 800f7ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f7b0:	e006      	b.n	800f7c0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	2202      	movs	r2, #2
 800f7b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f7ba:	e001      	b.n	800f7c0 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800f7bc:	2301      	movs	r3, #1
 800f7be:	e137      	b.n	800fa30 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800f7c0:	68bb      	ldr	r3, [r7, #8]
 800f7c2:	2b0c      	cmp	r3, #12
 800f7c4:	f200 80ae 	bhi.w	800f924 <HAL_TIM_PWM_Start_DMA+0x318>
 800f7c8:	a201      	add	r2, pc, #4	; (adr r2, 800f7d0 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800f7ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7ce:	bf00      	nop
 800f7d0:	0800f805 	.word	0x0800f805
 800f7d4:	0800f925 	.word	0x0800f925
 800f7d8:	0800f925 	.word	0x0800f925
 800f7dc:	0800f925 	.word	0x0800f925
 800f7e0:	0800f84d 	.word	0x0800f84d
 800f7e4:	0800f925 	.word	0x0800f925
 800f7e8:	0800f925 	.word	0x0800f925
 800f7ec:	0800f925 	.word	0x0800f925
 800f7f0:	0800f895 	.word	0x0800f895
 800f7f4:	0800f925 	.word	0x0800f925
 800f7f8:	0800f925 	.word	0x0800f925
 800f7fc:	0800f925 	.word	0x0800f925
 800f800:	0800f8dd 	.word	0x0800f8dd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f808:	4a8b      	ldr	r2, [pc, #556]	; (800fa38 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f80a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f810:	4a8a      	ldr	r2, [pc, #552]	; (800fa3c <HAL_TIM_PWM_Start_DMA+0x430>)
 800f812:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f818:	4a89      	ldr	r2, [pc, #548]	; (800fa40 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f81a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f820:	6879      	ldr	r1, [r7, #4]
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	3334      	adds	r3, #52	; 0x34
 800f828:	461a      	mov	r2, r3
 800f82a:	887b      	ldrh	r3, [r7, #2]
 800f82c:	f7f6 f8e4 	bl	80059f8 <HAL_DMA_Start_IT>
 800f830:	4603      	mov	r3, r0
 800f832:	2b00      	cmp	r3, #0
 800f834:	d001      	beq.n	800f83a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f836:	2301      	movs	r3, #1
 800f838:	e0fa      	b.n	800fa30 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	68da      	ldr	r2, [r3, #12]
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f848:	60da      	str	r2, [r3, #12]
      break;
 800f84a:	e06e      	b.n	800f92a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f850:	4a79      	ldr	r2, [pc, #484]	; (800fa38 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f852:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f858:	4a78      	ldr	r2, [pc, #480]	; (800fa3c <HAL_TIM_PWM_Start_DMA+0x430>)
 800f85a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f860:	4a77      	ldr	r2, [pc, #476]	; (800fa40 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f862:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800f868:	6879      	ldr	r1, [r7, #4]
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	3338      	adds	r3, #56	; 0x38
 800f870:	461a      	mov	r2, r3
 800f872:	887b      	ldrh	r3, [r7, #2]
 800f874:	f7f6 f8c0 	bl	80059f8 <HAL_DMA_Start_IT>
 800f878:	4603      	mov	r3, r0
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d001      	beq.n	800f882 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f87e:	2301      	movs	r3, #1
 800f880:	e0d6      	b.n	800fa30 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	68da      	ldr	r2, [r3, #12]
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f890:	60da      	str	r2, [r3, #12]
      break;
 800f892:	e04a      	b.n	800f92a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f898:	4a67      	ldr	r2, [pc, #412]	; (800fa38 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f89a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8a0:	4a66      	ldr	r2, [pc, #408]	; (800fa3c <HAL_TIM_PWM_Start_DMA+0x430>)
 800f8a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8a8:	4a65      	ldr	r2, [pc, #404]	; (800fa40 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f8aa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800f8b0:	6879      	ldr	r1, [r7, #4]
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	333c      	adds	r3, #60	; 0x3c
 800f8b8:	461a      	mov	r2, r3
 800f8ba:	887b      	ldrh	r3, [r7, #2]
 800f8bc:	f7f6 f89c 	bl	80059f8 <HAL_DMA_Start_IT>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d001      	beq.n	800f8ca <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f8c6:	2301      	movs	r3, #1
 800f8c8:	e0b2      	b.n	800fa30 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	68da      	ldr	r2, [r3, #12]
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f8d8:	60da      	str	r2, [r3, #12]
      break;
 800f8da:	e026      	b.n	800f92a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8e0:	4a55      	ldr	r2, [pc, #340]	; (800fa38 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f8e2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8e8:	4a54      	ldr	r2, [pc, #336]	; (800fa3c <HAL_TIM_PWM_Start_DMA+0x430>)
 800f8ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8f0:	4a53      	ldr	r2, [pc, #332]	; (800fa40 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f8f2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f8f8:	6879      	ldr	r1, [r7, #4]
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	3340      	adds	r3, #64	; 0x40
 800f900:	461a      	mov	r2, r3
 800f902:	887b      	ldrh	r3, [r7, #2]
 800f904:	f7f6 f878 	bl	80059f8 <HAL_DMA_Start_IT>
 800f908:	4603      	mov	r3, r0
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d001      	beq.n	800f912 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f90e:	2301      	movs	r3, #1
 800f910:	e08e      	b.n	800fa30 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	68da      	ldr	r2, [r3, #12]
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f920:	60da      	str	r2, [r3, #12]
      break;
 800f922:	e002      	b.n	800f92a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800f924:	2301      	movs	r3, #1
 800f926:	75fb      	strb	r3, [r7, #23]
      break;
 800f928:	bf00      	nop
  }

  if (status == HAL_OK)
 800f92a:	7dfb      	ldrb	r3, [r7, #23]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d17e      	bne.n	800fa2e <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	2201      	movs	r2, #1
 800f936:	68b9      	ldr	r1, [r7, #8]
 800f938:	4618      	mov	r0, r3
 800f93a:	f000 ff63 	bl	8010804 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	4a40      	ldr	r2, [pc, #256]	; (800fa44 <HAL_TIM_PWM_Start_DMA+0x438>)
 800f944:	4293      	cmp	r3, r2
 800f946:	d013      	beq.n	800f970 <HAL_TIM_PWM_Start_DMA+0x364>
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	4a3e      	ldr	r2, [pc, #248]	; (800fa48 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800f94e:	4293      	cmp	r3, r2
 800f950:	d00e      	beq.n	800f970 <HAL_TIM_PWM_Start_DMA+0x364>
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	4a3d      	ldr	r2, [pc, #244]	; (800fa4c <HAL_TIM_PWM_Start_DMA+0x440>)
 800f958:	4293      	cmp	r3, r2
 800f95a:	d009      	beq.n	800f970 <HAL_TIM_PWM_Start_DMA+0x364>
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	4a3b      	ldr	r2, [pc, #236]	; (800fa50 <HAL_TIM_PWM_Start_DMA+0x444>)
 800f962:	4293      	cmp	r3, r2
 800f964:	d004      	beq.n	800f970 <HAL_TIM_PWM_Start_DMA+0x364>
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	4a3a      	ldr	r2, [pc, #232]	; (800fa54 <HAL_TIM_PWM_Start_DMA+0x448>)
 800f96c:	4293      	cmp	r3, r2
 800f96e:	d101      	bne.n	800f974 <HAL_TIM_PWM_Start_DMA+0x368>
 800f970:	2301      	movs	r3, #1
 800f972:	e000      	b.n	800f976 <HAL_TIM_PWM_Start_DMA+0x36a>
 800f974:	2300      	movs	r3, #0
 800f976:	2b00      	cmp	r3, #0
 800f978:	d007      	beq.n	800f98a <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f988:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	4a2d      	ldr	r2, [pc, #180]	; (800fa44 <HAL_TIM_PWM_Start_DMA+0x438>)
 800f990:	4293      	cmp	r3, r2
 800f992:	d02c      	beq.n	800f9ee <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f99c:	d027      	beq.n	800f9ee <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	4a2d      	ldr	r2, [pc, #180]	; (800fa58 <HAL_TIM_PWM_Start_DMA+0x44c>)
 800f9a4:	4293      	cmp	r3, r2
 800f9a6:	d022      	beq.n	800f9ee <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	4a2b      	ldr	r2, [pc, #172]	; (800fa5c <HAL_TIM_PWM_Start_DMA+0x450>)
 800f9ae:	4293      	cmp	r3, r2
 800f9b0:	d01d      	beq.n	800f9ee <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	4a2a      	ldr	r2, [pc, #168]	; (800fa60 <HAL_TIM_PWM_Start_DMA+0x454>)
 800f9b8:	4293      	cmp	r3, r2
 800f9ba:	d018      	beq.n	800f9ee <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	4a21      	ldr	r2, [pc, #132]	; (800fa48 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800f9c2:	4293      	cmp	r3, r2
 800f9c4:	d013      	beq.n	800f9ee <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	4a26      	ldr	r2, [pc, #152]	; (800fa64 <HAL_TIM_PWM_Start_DMA+0x458>)
 800f9cc:	4293      	cmp	r3, r2
 800f9ce:	d00e      	beq.n	800f9ee <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	4a1d      	ldr	r2, [pc, #116]	; (800fa4c <HAL_TIM_PWM_Start_DMA+0x440>)
 800f9d6:	4293      	cmp	r3, r2
 800f9d8:	d009      	beq.n	800f9ee <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	4a22      	ldr	r2, [pc, #136]	; (800fa68 <HAL_TIM_PWM_Start_DMA+0x45c>)
 800f9e0:	4293      	cmp	r3, r2
 800f9e2:	d004      	beq.n	800f9ee <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	4a20      	ldr	r2, [pc, #128]	; (800fa6c <HAL_TIM_PWM_Start_DMA+0x460>)
 800f9ea:	4293      	cmp	r3, r2
 800f9ec:	d115      	bne.n	800fa1a <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	689a      	ldr	r2, [r3, #8]
 800f9f4:	4b1e      	ldr	r3, [pc, #120]	; (800fa70 <HAL_TIM_PWM_Start_DMA+0x464>)
 800f9f6:	4013      	ands	r3, r2
 800f9f8:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f9fa:	693b      	ldr	r3, [r7, #16]
 800f9fc:	2b06      	cmp	r3, #6
 800f9fe:	d015      	beq.n	800fa2c <HAL_TIM_PWM_Start_DMA+0x420>
 800fa00:	693b      	ldr	r3, [r7, #16]
 800fa02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fa06:	d011      	beq.n	800fa2c <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	681a      	ldr	r2, [r3, #0]
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	f042 0201 	orr.w	r2, r2, #1
 800fa16:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa18:	e008      	b.n	800fa2c <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	681a      	ldr	r2, [r3, #0]
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	f042 0201 	orr.w	r2, r2, #1
 800fa28:	601a      	str	r2, [r3, #0]
 800fa2a:	e000      	b.n	800fa2e <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa2c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800fa2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa30:	4618      	mov	r0, r3
 800fa32:	3718      	adds	r7, #24
 800fa34:	46bd      	mov	sp, r7
 800fa36:	bd80      	pop	{r7, pc}
 800fa38:	0800fffb 	.word	0x0800fffb
 800fa3c:	080100a3 	.word	0x080100a3
 800fa40:	0800ff69 	.word	0x0800ff69
 800fa44:	40010000 	.word	0x40010000
 800fa48:	40010400 	.word	0x40010400
 800fa4c:	40014000 	.word	0x40014000
 800fa50:	40014400 	.word	0x40014400
 800fa54:	40014800 	.word	0x40014800
 800fa58:	40000400 	.word	0x40000400
 800fa5c:	40000800 	.word	0x40000800
 800fa60:	40000c00 	.word	0x40000c00
 800fa64:	40001800 	.word	0x40001800
 800fa68:	4000e000 	.word	0x4000e000
 800fa6c:	4000e400 	.word	0x4000e400
 800fa70:	00010007 	.word	0x00010007

0800fa74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b082      	sub	sp, #8
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	691b      	ldr	r3, [r3, #16]
 800fa82:	f003 0302 	and.w	r3, r3, #2
 800fa86:	2b02      	cmp	r3, #2
 800fa88:	d122      	bne.n	800fad0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	68db      	ldr	r3, [r3, #12]
 800fa90:	f003 0302 	and.w	r3, r3, #2
 800fa94:	2b02      	cmp	r3, #2
 800fa96:	d11b      	bne.n	800fad0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	f06f 0202 	mvn.w	r2, #2
 800faa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	2201      	movs	r2, #1
 800faa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	699b      	ldr	r3, [r3, #24]
 800faae:	f003 0303 	and.w	r3, r3, #3
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d003      	beq.n	800fabe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fab6:	6878      	ldr	r0, [r7, #4]
 800fab8:	f000 fa24 	bl	800ff04 <HAL_TIM_IC_CaptureCallback>
 800fabc:	e005      	b.n	800faca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fabe:	6878      	ldr	r0, [r7, #4]
 800fac0:	f000 fa16 	bl	800fef0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fac4:	6878      	ldr	r0, [r7, #4]
 800fac6:	f000 fa27 	bl	800ff18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	2200      	movs	r2, #0
 800face:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	691b      	ldr	r3, [r3, #16]
 800fad6:	f003 0304 	and.w	r3, r3, #4
 800fada:	2b04      	cmp	r3, #4
 800fadc:	d122      	bne.n	800fb24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	68db      	ldr	r3, [r3, #12]
 800fae4:	f003 0304 	and.w	r3, r3, #4
 800fae8:	2b04      	cmp	r3, #4
 800faea:	d11b      	bne.n	800fb24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	f06f 0204 	mvn.w	r2, #4
 800faf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	2202      	movs	r2, #2
 800fafa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	699b      	ldr	r3, [r3, #24]
 800fb02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d003      	beq.n	800fb12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fb0a:	6878      	ldr	r0, [r7, #4]
 800fb0c:	f000 f9fa 	bl	800ff04 <HAL_TIM_IC_CaptureCallback>
 800fb10:	e005      	b.n	800fb1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fb12:	6878      	ldr	r0, [r7, #4]
 800fb14:	f000 f9ec 	bl	800fef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f000 f9fd 	bl	800ff18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	2200      	movs	r2, #0
 800fb22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	691b      	ldr	r3, [r3, #16]
 800fb2a:	f003 0308 	and.w	r3, r3, #8
 800fb2e:	2b08      	cmp	r3, #8
 800fb30:	d122      	bne.n	800fb78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	68db      	ldr	r3, [r3, #12]
 800fb38:	f003 0308 	and.w	r3, r3, #8
 800fb3c:	2b08      	cmp	r3, #8
 800fb3e:	d11b      	bne.n	800fb78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	f06f 0208 	mvn.w	r2, #8
 800fb48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	2204      	movs	r2, #4
 800fb4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	69db      	ldr	r3, [r3, #28]
 800fb56:	f003 0303 	and.w	r3, r3, #3
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d003      	beq.n	800fb66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fb5e:	6878      	ldr	r0, [r7, #4]
 800fb60:	f000 f9d0 	bl	800ff04 <HAL_TIM_IC_CaptureCallback>
 800fb64:	e005      	b.n	800fb72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fb66:	6878      	ldr	r0, [r7, #4]
 800fb68:	f000 f9c2 	bl	800fef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fb6c:	6878      	ldr	r0, [r7, #4]
 800fb6e:	f000 f9d3 	bl	800ff18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	2200      	movs	r2, #0
 800fb76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	691b      	ldr	r3, [r3, #16]
 800fb7e:	f003 0310 	and.w	r3, r3, #16
 800fb82:	2b10      	cmp	r3, #16
 800fb84:	d122      	bne.n	800fbcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	68db      	ldr	r3, [r3, #12]
 800fb8c:	f003 0310 	and.w	r3, r3, #16
 800fb90:	2b10      	cmp	r3, #16
 800fb92:	d11b      	bne.n	800fbcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	f06f 0210 	mvn.w	r2, #16
 800fb9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	2208      	movs	r2, #8
 800fba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	69db      	ldr	r3, [r3, #28]
 800fbaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d003      	beq.n	800fbba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fbb2:	6878      	ldr	r0, [r7, #4]
 800fbb4:	f000 f9a6 	bl	800ff04 <HAL_TIM_IC_CaptureCallback>
 800fbb8:	e005      	b.n	800fbc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fbba:	6878      	ldr	r0, [r7, #4]
 800fbbc:	f000 f998 	bl	800fef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fbc0:	6878      	ldr	r0, [r7, #4]
 800fbc2:	f000 f9a9 	bl	800ff18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	2200      	movs	r2, #0
 800fbca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	691b      	ldr	r3, [r3, #16]
 800fbd2:	f003 0301 	and.w	r3, r3, #1
 800fbd6:	2b01      	cmp	r3, #1
 800fbd8:	d10e      	bne.n	800fbf8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	68db      	ldr	r3, [r3, #12]
 800fbe0:	f003 0301 	and.w	r3, r3, #1
 800fbe4:	2b01      	cmp	r3, #1
 800fbe6:	d107      	bne.n	800fbf8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	f06f 0201 	mvn.w	r2, #1
 800fbf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fbf2:	6878      	ldr	r0, [r7, #4]
 800fbf4:	f000 f972 	bl	800fedc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	691b      	ldr	r3, [r3, #16]
 800fbfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc02:	2b80      	cmp	r3, #128	; 0x80
 800fc04:	d10e      	bne.n	800fc24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	68db      	ldr	r3, [r3, #12]
 800fc0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc10:	2b80      	cmp	r3, #128	; 0x80
 800fc12:	d107      	bne.n	800fc24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800fc1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fc1e:	6878      	ldr	r0, [r7, #4]
 800fc20:	f000 febc 	bl	801099c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	691b      	ldr	r3, [r3, #16]
 800fc2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fc2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc32:	d10e      	bne.n	800fc52 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	68db      	ldr	r3, [r3, #12]
 800fc3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc3e:	2b80      	cmp	r3, #128	; 0x80
 800fc40:	d107      	bne.n	800fc52 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800fc4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800fc4c:	6878      	ldr	r0, [r7, #4]
 800fc4e:	f000 feaf 	bl	80109b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	691b      	ldr	r3, [r3, #16]
 800fc58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc5c:	2b40      	cmp	r3, #64	; 0x40
 800fc5e:	d10e      	bne.n	800fc7e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	68db      	ldr	r3, [r3, #12]
 800fc66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc6a:	2b40      	cmp	r3, #64	; 0x40
 800fc6c:	d107      	bne.n	800fc7e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fc76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fc78:	6878      	ldr	r0, [r7, #4]
 800fc7a:	f000 f961 	bl	800ff40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	691b      	ldr	r3, [r3, #16]
 800fc84:	f003 0320 	and.w	r3, r3, #32
 800fc88:	2b20      	cmp	r3, #32
 800fc8a:	d10e      	bne.n	800fcaa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	68db      	ldr	r3, [r3, #12]
 800fc92:	f003 0320 	and.w	r3, r3, #32
 800fc96:	2b20      	cmp	r3, #32
 800fc98:	d107      	bne.n	800fcaa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	f06f 0220 	mvn.w	r2, #32
 800fca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fca4:	6878      	ldr	r0, [r7, #4]
 800fca6:	f000 fe6f 	bl	8010988 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fcaa:	bf00      	nop
 800fcac:	3708      	adds	r7, #8
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	bd80      	pop	{r7, pc}
	...

0800fcb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b086      	sub	sp, #24
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	60f8      	str	r0, [r7, #12]
 800fcbc:	60b9      	str	r1, [r7, #8]
 800fcbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fcca:	2b01      	cmp	r3, #1
 800fccc:	d101      	bne.n	800fcd2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800fcce:	2302      	movs	r3, #2
 800fcd0:	e0ff      	b.n	800fed2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	2201      	movs	r2, #1
 800fcd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	2b14      	cmp	r3, #20
 800fcde:	f200 80f0 	bhi.w	800fec2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800fce2:	a201      	add	r2, pc, #4	; (adr r2, 800fce8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800fce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fce8:	0800fd3d 	.word	0x0800fd3d
 800fcec:	0800fec3 	.word	0x0800fec3
 800fcf0:	0800fec3 	.word	0x0800fec3
 800fcf4:	0800fec3 	.word	0x0800fec3
 800fcf8:	0800fd7d 	.word	0x0800fd7d
 800fcfc:	0800fec3 	.word	0x0800fec3
 800fd00:	0800fec3 	.word	0x0800fec3
 800fd04:	0800fec3 	.word	0x0800fec3
 800fd08:	0800fdbf 	.word	0x0800fdbf
 800fd0c:	0800fec3 	.word	0x0800fec3
 800fd10:	0800fec3 	.word	0x0800fec3
 800fd14:	0800fec3 	.word	0x0800fec3
 800fd18:	0800fdff 	.word	0x0800fdff
 800fd1c:	0800fec3 	.word	0x0800fec3
 800fd20:	0800fec3 	.word	0x0800fec3
 800fd24:	0800fec3 	.word	0x0800fec3
 800fd28:	0800fe41 	.word	0x0800fe41
 800fd2c:	0800fec3 	.word	0x0800fec3
 800fd30:	0800fec3 	.word	0x0800fec3
 800fd34:	0800fec3 	.word	0x0800fec3
 800fd38:	0800fe81 	.word	0x0800fe81
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	68b9      	ldr	r1, [r7, #8]
 800fd42:	4618      	mov	r0, r3
 800fd44:	f000 fa88 	bl	8010258 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	699a      	ldr	r2, [r3, #24]
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	f042 0208 	orr.w	r2, r2, #8
 800fd56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	699a      	ldr	r2, [r3, #24]
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	f022 0204 	bic.w	r2, r2, #4
 800fd66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	6999      	ldr	r1, [r3, #24]
 800fd6e:	68bb      	ldr	r3, [r7, #8]
 800fd70:	691a      	ldr	r2, [r3, #16]
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	430a      	orrs	r2, r1
 800fd78:	619a      	str	r2, [r3, #24]
      break;
 800fd7a:	e0a5      	b.n	800fec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	68b9      	ldr	r1, [r7, #8]
 800fd82:	4618      	mov	r0, r3
 800fd84:	f000 faf8 	bl	8010378 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	699a      	ldr	r2, [r3, #24]
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fd96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	699a      	ldr	r2, [r3, #24]
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fda6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	6999      	ldr	r1, [r3, #24]
 800fdae:	68bb      	ldr	r3, [r7, #8]
 800fdb0:	691b      	ldr	r3, [r3, #16]
 800fdb2:	021a      	lsls	r2, r3, #8
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	430a      	orrs	r2, r1
 800fdba:	619a      	str	r2, [r3, #24]
      break;
 800fdbc:	e084      	b.n	800fec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	68b9      	ldr	r1, [r7, #8]
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	f000 fb61 	bl	801048c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	69da      	ldr	r2, [r3, #28]
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	f042 0208 	orr.w	r2, r2, #8
 800fdd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	69da      	ldr	r2, [r3, #28]
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	f022 0204 	bic.w	r2, r2, #4
 800fde8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	69d9      	ldr	r1, [r3, #28]
 800fdf0:	68bb      	ldr	r3, [r7, #8]
 800fdf2:	691a      	ldr	r2, [r3, #16]
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	430a      	orrs	r2, r1
 800fdfa:	61da      	str	r2, [r3, #28]
      break;
 800fdfc:	e064      	b.n	800fec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	68b9      	ldr	r1, [r7, #8]
 800fe04:	4618      	mov	r0, r3
 800fe06:	f000 fbc9 	bl	801059c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	69da      	ldr	r2, [r3, #28]
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fe18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	69da      	ldr	r2, [r3, #28]
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fe28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	69d9      	ldr	r1, [r3, #28]
 800fe30:	68bb      	ldr	r3, [r7, #8]
 800fe32:	691b      	ldr	r3, [r3, #16]
 800fe34:	021a      	lsls	r2, r3, #8
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	430a      	orrs	r2, r1
 800fe3c:	61da      	str	r2, [r3, #28]
      break;
 800fe3e:	e043      	b.n	800fec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	68b9      	ldr	r1, [r7, #8]
 800fe46:	4618      	mov	r0, r3
 800fe48:	f000 fc12 	bl	8010670 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	f042 0208 	orr.w	r2, r2, #8
 800fe5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	f022 0204 	bic.w	r2, r2, #4
 800fe6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fe72:	68bb      	ldr	r3, [r7, #8]
 800fe74:	691a      	ldr	r2, [r3, #16]
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	430a      	orrs	r2, r1
 800fe7c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fe7e:	e023      	b.n	800fec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	68b9      	ldr	r1, [r7, #8]
 800fe86:	4618      	mov	r0, r3
 800fe88:	f000 fc56 	bl	8010738 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fe9a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800feaa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800feb2:	68bb      	ldr	r3, [r7, #8]
 800feb4:	691b      	ldr	r3, [r3, #16]
 800feb6:	021a      	lsls	r2, r3, #8
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	430a      	orrs	r2, r1
 800febe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fec0:	e002      	b.n	800fec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800fec2:	2301      	movs	r3, #1
 800fec4:	75fb      	strb	r3, [r7, #23]
      break;
 800fec6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	2200      	movs	r2, #0
 800fecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800fed0:	7dfb      	ldrb	r3, [r7, #23]
}
 800fed2:	4618      	mov	r0, r3
 800fed4:	3718      	adds	r7, #24
 800fed6:	46bd      	mov	sp, r7
 800fed8:	bd80      	pop	{r7, pc}
 800feda:	bf00      	nop

0800fedc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fedc:	b480      	push	{r7}
 800fede:	b083      	sub	sp, #12
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800fee4:	bf00      	nop
 800fee6:	370c      	adds	r7, #12
 800fee8:	46bd      	mov	sp, r7
 800feea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feee:	4770      	bx	lr

0800fef0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fef0:	b480      	push	{r7}
 800fef2:	b083      	sub	sp, #12
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fef8:	bf00      	nop
 800fefa:	370c      	adds	r7, #12
 800fefc:	46bd      	mov	sp, r7
 800fefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff02:	4770      	bx	lr

0800ff04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ff04:	b480      	push	{r7}
 800ff06:	b083      	sub	sp, #12
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ff0c:	bf00      	nop
 800ff0e:	370c      	adds	r7, #12
 800ff10:	46bd      	mov	sp, r7
 800ff12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff16:	4770      	bx	lr

0800ff18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ff18:	b480      	push	{r7}
 800ff1a:	b083      	sub	sp, #12
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ff20:	bf00      	nop
 800ff22:	370c      	adds	r7, #12
 800ff24:	46bd      	mov	sp, r7
 800ff26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2a:	4770      	bx	lr

0800ff2c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ff2c:	b480      	push	{r7}
 800ff2e:	b083      	sub	sp, #12
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800ff34:	bf00      	nop
 800ff36:	370c      	adds	r7, #12
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3e:	4770      	bx	lr

0800ff40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ff40:	b480      	push	{r7}
 800ff42:	b083      	sub	sp, #12
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ff48:	bf00      	nop
 800ff4a:	370c      	adds	r7, #12
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff52:	4770      	bx	lr

0800ff54 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800ff54:	b480      	push	{r7}
 800ff56:	b083      	sub	sp, #12
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800ff5c:	bf00      	nop
 800ff5e:	370c      	adds	r7, #12
 800ff60:	46bd      	mov	sp, r7
 800ff62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff66:	4770      	bx	lr

0800ff68 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b084      	sub	sp, #16
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff74:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff7a:	687a      	ldr	r2, [r7, #4]
 800ff7c:	429a      	cmp	r2, r3
 800ff7e:	d107      	bne.n	800ff90 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	2201      	movs	r2, #1
 800ff84:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	2201      	movs	r2, #1
 800ff8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ff8e:	e02a      	b.n	800ffe6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff94:	687a      	ldr	r2, [r7, #4]
 800ff96:	429a      	cmp	r2, r3
 800ff98:	d107      	bne.n	800ffaa <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	2202      	movs	r2, #2
 800ff9e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	2201      	movs	r2, #1
 800ffa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ffa8:	e01d      	b.n	800ffe6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffae:	687a      	ldr	r2, [r7, #4]
 800ffb0:	429a      	cmp	r2, r3
 800ffb2:	d107      	bne.n	800ffc4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	2204      	movs	r2, #4
 800ffb8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	2201      	movs	r2, #1
 800ffbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ffc2:	e010      	b.n	800ffe6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffc8:	687a      	ldr	r2, [r7, #4]
 800ffca:	429a      	cmp	r2, r3
 800ffcc:	d107      	bne.n	800ffde <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	2208      	movs	r2, #8
 800ffd2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	2201      	movs	r2, #1
 800ffd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ffdc:	e003      	b.n	800ffe6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	2201      	movs	r2, #1
 800ffe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800ffe6:	68f8      	ldr	r0, [r7, #12]
 800ffe8:	f7ff ffb4 	bl	800ff54 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	2200      	movs	r2, #0
 800fff0:	771a      	strb	r2, [r3, #28]
}
 800fff2:	bf00      	nop
 800fff4:	3710      	adds	r7, #16
 800fff6:	46bd      	mov	sp, r7
 800fff8:	bd80      	pop	{r7, pc}

0800fffa <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800fffa:	b580      	push	{r7, lr}
 800fffc:	b084      	sub	sp, #16
 800fffe:	af00      	add	r7, sp, #0
 8010000:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010006:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801000c:	687a      	ldr	r2, [r7, #4]
 801000e:	429a      	cmp	r2, r3
 8010010:	d10b      	bne.n	801002a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	2201      	movs	r2, #1
 8010016:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	69db      	ldr	r3, [r3, #28]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d136      	bne.n	801008e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	2201      	movs	r2, #1
 8010024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010028:	e031      	b.n	801008e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801002e:	687a      	ldr	r2, [r7, #4]
 8010030:	429a      	cmp	r2, r3
 8010032:	d10b      	bne.n	801004c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	2202      	movs	r2, #2
 8010038:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	69db      	ldr	r3, [r3, #28]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d125      	bne.n	801008e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	2201      	movs	r2, #1
 8010046:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801004a:	e020      	b.n	801008e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010050:	687a      	ldr	r2, [r7, #4]
 8010052:	429a      	cmp	r2, r3
 8010054:	d10b      	bne.n	801006e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	2204      	movs	r2, #4
 801005a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	69db      	ldr	r3, [r3, #28]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d114      	bne.n	801008e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	2201      	movs	r2, #1
 8010068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801006c:	e00f      	b.n	801008e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010072:	687a      	ldr	r2, [r7, #4]
 8010074:	429a      	cmp	r2, r3
 8010076:	d10a      	bne.n	801008e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	2208      	movs	r2, #8
 801007c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	69db      	ldr	r3, [r3, #28]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d103      	bne.n	801008e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	2201      	movs	r2, #1
 801008a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 801008e:	68f8      	ldr	r0, [r7, #12]
 8010090:	f7ff ff42 	bl	800ff18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	2200      	movs	r2, #0
 8010098:	771a      	strb	r2, [r3, #28]
}
 801009a:	bf00      	nop
 801009c:	3710      	adds	r7, #16
 801009e:	46bd      	mov	sp, r7
 80100a0:	bd80      	pop	{r7, pc}

080100a2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80100a2:	b580      	push	{r7, lr}
 80100a4:	b084      	sub	sp, #16
 80100a6:	af00      	add	r7, sp, #0
 80100a8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100ae:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100b4:	687a      	ldr	r2, [r7, #4]
 80100b6:	429a      	cmp	r2, r3
 80100b8:	d103      	bne.n	80100c2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	2201      	movs	r2, #1
 80100be:	771a      	strb	r2, [r3, #28]
 80100c0:	e019      	b.n	80100f6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100c6:	687a      	ldr	r2, [r7, #4]
 80100c8:	429a      	cmp	r2, r3
 80100ca:	d103      	bne.n	80100d4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	2202      	movs	r2, #2
 80100d0:	771a      	strb	r2, [r3, #28]
 80100d2:	e010      	b.n	80100f6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100d8:	687a      	ldr	r2, [r7, #4]
 80100da:	429a      	cmp	r2, r3
 80100dc:	d103      	bne.n	80100e6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	2204      	movs	r2, #4
 80100e2:	771a      	strb	r2, [r3, #28]
 80100e4:	e007      	b.n	80100f6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100ea:	687a      	ldr	r2, [r7, #4]
 80100ec:	429a      	cmp	r2, r3
 80100ee:	d102      	bne.n	80100f6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	2208      	movs	r2, #8
 80100f4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80100f6:	68f8      	ldr	r0, [r7, #12]
 80100f8:	f7ff ff18 	bl	800ff2c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	2200      	movs	r2, #0
 8010100:	771a      	strb	r2, [r3, #28]
}
 8010102:	bf00      	nop
 8010104:	3710      	adds	r7, #16
 8010106:	46bd      	mov	sp, r7
 8010108:	bd80      	pop	{r7, pc}
	...

0801010c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801010c:	b480      	push	{r7}
 801010e:	b085      	sub	sp, #20
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
 8010114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	4a44      	ldr	r2, [pc, #272]	; (8010230 <TIM_Base_SetConfig+0x124>)
 8010120:	4293      	cmp	r3, r2
 8010122:	d013      	beq.n	801014c <TIM_Base_SetConfig+0x40>
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801012a:	d00f      	beq.n	801014c <TIM_Base_SetConfig+0x40>
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	4a41      	ldr	r2, [pc, #260]	; (8010234 <TIM_Base_SetConfig+0x128>)
 8010130:	4293      	cmp	r3, r2
 8010132:	d00b      	beq.n	801014c <TIM_Base_SetConfig+0x40>
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	4a40      	ldr	r2, [pc, #256]	; (8010238 <TIM_Base_SetConfig+0x12c>)
 8010138:	4293      	cmp	r3, r2
 801013a:	d007      	beq.n	801014c <TIM_Base_SetConfig+0x40>
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	4a3f      	ldr	r2, [pc, #252]	; (801023c <TIM_Base_SetConfig+0x130>)
 8010140:	4293      	cmp	r3, r2
 8010142:	d003      	beq.n	801014c <TIM_Base_SetConfig+0x40>
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	4a3e      	ldr	r2, [pc, #248]	; (8010240 <TIM_Base_SetConfig+0x134>)
 8010148:	4293      	cmp	r3, r2
 801014a:	d108      	bne.n	801015e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010152:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010154:	683b      	ldr	r3, [r7, #0]
 8010156:	685b      	ldr	r3, [r3, #4]
 8010158:	68fa      	ldr	r2, [r7, #12]
 801015a:	4313      	orrs	r3, r2
 801015c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	4a33      	ldr	r2, [pc, #204]	; (8010230 <TIM_Base_SetConfig+0x124>)
 8010162:	4293      	cmp	r3, r2
 8010164:	d027      	beq.n	80101b6 <TIM_Base_SetConfig+0xaa>
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801016c:	d023      	beq.n	80101b6 <TIM_Base_SetConfig+0xaa>
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	4a30      	ldr	r2, [pc, #192]	; (8010234 <TIM_Base_SetConfig+0x128>)
 8010172:	4293      	cmp	r3, r2
 8010174:	d01f      	beq.n	80101b6 <TIM_Base_SetConfig+0xaa>
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	4a2f      	ldr	r2, [pc, #188]	; (8010238 <TIM_Base_SetConfig+0x12c>)
 801017a:	4293      	cmp	r3, r2
 801017c:	d01b      	beq.n	80101b6 <TIM_Base_SetConfig+0xaa>
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	4a2e      	ldr	r2, [pc, #184]	; (801023c <TIM_Base_SetConfig+0x130>)
 8010182:	4293      	cmp	r3, r2
 8010184:	d017      	beq.n	80101b6 <TIM_Base_SetConfig+0xaa>
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	4a2d      	ldr	r2, [pc, #180]	; (8010240 <TIM_Base_SetConfig+0x134>)
 801018a:	4293      	cmp	r3, r2
 801018c:	d013      	beq.n	80101b6 <TIM_Base_SetConfig+0xaa>
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	4a2c      	ldr	r2, [pc, #176]	; (8010244 <TIM_Base_SetConfig+0x138>)
 8010192:	4293      	cmp	r3, r2
 8010194:	d00f      	beq.n	80101b6 <TIM_Base_SetConfig+0xaa>
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	4a2b      	ldr	r2, [pc, #172]	; (8010248 <TIM_Base_SetConfig+0x13c>)
 801019a:	4293      	cmp	r3, r2
 801019c:	d00b      	beq.n	80101b6 <TIM_Base_SetConfig+0xaa>
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	4a2a      	ldr	r2, [pc, #168]	; (801024c <TIM_Base_SetConfig+0x140>)
 80101a2:	4293      	cmp	r3, r2
 80101a4:	d007      	beq.n	80101b6 <TIM_Base_SetConfig+0xaa>
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	4a29      	ldr	r2, [pc, #164]	; (8010250 <TIM_Base_SetConfig+0x144>)
 80101aa:	4293      	cmp	r3, r2
 80101ac:	d003      	beq.n	80101b6 <TIM_Base_SetConfig+0xaa>
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	4a28      	ldr	r2, [pc, #160]	; (8010254 <TIM_Base_SetConfig+0x148>)
 80101b2:	4293      	cmp	r3, r2
 80101b4:	d108      	bne.n	80101c8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80101bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80101be:	683b      	ldr	r3, [r7, #0]
 80101c0:	68db      	ldr	r3, [r3, #12]
 80101c2:	68fa      	ldr	r2, [r7, #12]
 80101c4:	4313      	orrs	r3, r2
 80101c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80101ce:	683b      	ldr	r3, [r7, #0]
 80101d0:	695b      	ldr	r3, [r3, #20]
 80101d2:	4313      	orrs	r3, r2
 80101d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	68fa      	ldr	r2, [r7, #12]
 80101da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80101dc:	683b      	ldr	r3, [r7, #0]
 80101de:	689a      	ldr	r2, [r3, #8]
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	681a      	ldr	r2, [r3, #0]
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	4a10      	ldr	r2, [pc, #64]	; (8010230 <TIM_Base_SetConfig+0x124>)
 80101f0:	4293      	cmp	r3, r2
 80101f2:	d00f      	beq.n	8010214 <TIM_Base_SetConfig+0x108>
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	4a12      	ldr	r2, [pc, #72]	; (8010240 <TIM_Base_SetConfig+0x134>)
 80101f8:	4293      	cmp	r3, r2
 80101fa:	d00b      	beq.n	8010214 <TIM_Base_SetConfig+0x108>
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	4a11      	ldr	r2, [pc, #68]	; (8010244 <TIM_Base_SetConfig+0x138>)
 8010200:	4293      	cmp	r3, r2
 8010202:	d007      	beq.n	8010214 <TIM_Base_SetConfig+0x108>
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	4a10      	ldr	r2, [pc, #64]	; (8010248 <TIM_Base_SetConfig+0x13c>)
 8010208:	4293      	cmp	r3, r2
 801020a:	d003      	beq.n	8010214 <TIM_Base_SetConfig+0x108>
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	4a0f      	ldr	r2, [pc, #60]	; (801024c <TIM_Base_SetConfig+0x140>)
 8010210:	4293      	cmp	r3, r2
 8010212:	d103      	bne.n	801021c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010214:	683b      	ldr	r3, [r7, #0]
 8010216:	691a      	ldr	r2, [r3, #16]
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	2201      	movs	r2, #1
 8010220:	615a      	str	r2, [r3, #20]
}
 8010222:	bf00      	nop
 8010224:	3714      	adds	r7, #20
 8010226:	46bd      	mov	sp, r7
 8010228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022c:	4770      	bx	lr
 801022e:	bf00      	nop
 8010230:	40010000 	.word	0x40010000
 8010234:	40000400 	.word	0x40000400
 8010238:	40000800 	.word	0x40000800
 801023c:	40000c00 	.word	0x40000c00
 8010240:	40010400 	.word	0x40010400
 8010244:	40014000 	.word	0x40014000
 8010248:	40014400 	.word	0x40014400
 801024c:	40014800 	.word	0x40014800
 8010250:	4000e000 	.word	0x4000e000
 8010254:	4000e400 	.word	0x4000e400

08010258 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010258:	b480      	push	{r7}
 801025a:	b087      	sub	sp, #28
 801025c:	af00      	add	r7, sp, #0
 801025e:	6078      	str	r0, [r7, #4]
 8010260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	6a1b      	ldr	r3, [r3, #32]
 8010266:	f023 0201 	bic.w	r2, r3, #1
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	6a1b      	ldr	r3, [r3, #32]
 8010272:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	685b      	ldr	r3, [r3, #4]
 8010278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	699b      	ldr	r3, [r3, #24]
 801027e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010280:	68fa      	ldr	r2, [r7, #12]
 8010282:	4b37      	ldr	r3, [pc, #220]	; (8010360 <TIM_OC1_SetConfig+0x108>)
 8010284:	4013      	ands	r3, r2
 8010286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	f023 0303 	bic.w	r3, r3, #3
 801028e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010290:	683b      	ldr	r3, [r7, #0]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	68fa      	ldr	r2, [r7, #12]
 8010296:	4313      	orrs	r3, r2
 8010298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801029a:	697b      	ldr	r3, [r7, #20]
 801029c:	f023 0302 	bic.w	r3, r3, #2
 80102a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80102a2:	683b      	ldr	r3, [r7, #0]
 80102a4:	689b      	ldr	r3, [r3, #8]
 80102a6:	697a      	ldr	r2, [r7, #20]
 80102a8:	4313      	orrs	r3, r2
 80102aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	4a2d      	ldr	r2, [pc, #180]	; (8010364 <TIM_OC1_SetConfig+0x10c>)
 80102b0:	4293      	cmp	r3, r2
 80102b2:	d00f      	beq.n	80102d4 <TIM_OC1_SetConfig+0x7c>
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	4a2c      	ldr	r2, [pc, #176]	; (8010368 <TIM_OC1_SetConfig+0x110>)
 80102b8:	4293      	cmp	r3, r2
 80102ba:	d00b      	beq.n	80102d4 <TIM_OC1_SetConfig+0x7c>
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	4a2b      	ldr	r2, [pc, #172]	; (801036c <TIM_OC1_SetConfig+0x114>)
 80102c0:	4293      	cmp	r3, r2
 80102c2:	d007      	beq.n	80102d4 <TIM_OC1_SetConfig+0x7c>
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	4a2a      	ldr	r2, [pc, #168]	; (8010370 <TIM_OC1_SetConfig+0x118>)
 80102c8:	4293      	cmp	r3, r2
 80102ca:	d003      	beq.n	80102d4 <TIM_OC1_SetConfig+0x7c>
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	4a29      	ldr	r2, [pc, #164]	; (8010374 <TIM_OC1_SetConfig+0x11c>)
 80102d0:	4293      	cmp	r3, r2
 80102d2:	d10c      	bne.n	80102ee <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80102d4:	697b      	ldr	r3, [r7, #20]
 80102d6:	f023 0308 	bic.w	r3, r3, #8
 80102da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80102dc:	683b      	ldr	r3, [r7, #0]
 80102de:	68db      	ldr	r3, [r3, #12]
 80102e0:	697a      	ldr	r2, [r7, #20]
 80102e2:	4313      	orrs	r3, r2
 80102e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80102e6:	697b      	ldr	r3, [r7, #20]
 80102e8:	f023 0304 	bic.w	r3, r3, #4
 80102ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	4a1c      	ldr	r2, [pc, #112]	; (8010364 <TIM_OC1_SetConfig+0x10c>)
 80102f2:	4293      	cmp	r3, r2
 80102f4:	d00f      	beq.n	8010316 <TIM_OC1_SetConfig+0xbe>
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	4a1b      	ldr	r2, [pc, #108]	; (8010368 <TIM_OC1_SetConfig+0x110>)
 80102fa:	4293      	cmp	r3, r2
 80102fc:	d00b      	beq.n	8010316 <TIM_OC1_SetConfig+0xbe>
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	4a1a      	ldr	r2, [pc, #104]	; (801036c <TIM_OC1_SetConfig+0x114>)
 8010302:	4293      	cmp	r3, r2
 8010304:	d007      	beq.n	8010316 <TIM_OC1_SetConfig+0xbe>
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	4a19      	ldr	r2, [pc, #100]	; (8010370 <TIM_OC1_SetConfig+0x118>)
 801030a:	4293      	cmp	r3, r2
 801030c:	d003      	beq.n	8010316 <TIM_OC1_SetConfig+0xbe>
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	4a18      	ldr	r2, [pc, #96]	; (8010374 <TIM_OC1_SetConfig+0x11c>)
 8010312:	4293      	cmp	r3, r2
 8010314:	d111      	bne.n	801033a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010316:	693b      	ldr	r3, [r7, #16]
 8010318:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801031c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801031e:	693b      	ldr	r3, [r7, #16]
 8010320:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010324:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010326:	683b      	ldr	r3, [r7, #0]
 8010328:	695b      	ldr	r3, [r3, #20]
 801032a:	693a      	ldr	r2, [r7, #16]
 801032c:	4313      	orrs	r3, r2
 801032e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010330:	683b      	ldr	r3, [r7, #0]
 8010332:	699b      	ldr	r3, [r3, #24]
 8010334:	693a      	ldr	r2, [r7, #16]
 8010336:	4313      	orrs	r3, r2
 8010338:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	693a      	ldr	r2, [r7, #16]
 801033e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	68fa      	ldr	r2, [r7, #12]
 8010344:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010346:	683b      	ldr	r3, [r7, #0]
 8010348:	685a      	ldr	r2, [r3, #4]
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	697a      	ldr	r2, [r7, #20]
 8010352:	621a      	str	r2, [r3, #32]
}
 8010354:	bf00      	nop
 8010356:	371c      	adds	r7, #28
 8010358:	46bd      	mov	sp, r7
 801035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035e:	4770      	bx	lr
 8010360:	fffeff8f 	.word	0xfffeff8f
 8010364:	40010000 	.word	0x40010000
 8010368:	40010400 	.word	0x40010400
 801036c:	40014000 	.word	0x40014000
 8010370:	40014400 	.word	0x40014400
 8010374:	40014800 	.word	0x40014800

08010378 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010378:	b480      	push	{r7}
 801037a:	b087      	sub	sp, #28
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
 8010380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	6a1b      	ldr	r3, [r3, #32]
 8010386:	f023 0210 	bic.w	r2, r3, #16
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	6a1b      	ldr	r3, [r3, #32]
 8010392:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	685b      	ldr	r3, [r3, #4]
 8010398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	699b      	ldr	r3, [r3, #24]
 801039e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80103a0:	68fa      	ldr	r2, [r7, #12]
 80103a2:	4b34      	ldr	r3, [pc, #208]	; (8010474 <TIM_OC2_SetConfig+0xfc>)
 80103a4:	4013      	ands	r3, r2
 80103a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80103ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80103b0:	683b      	ldr	r3, [r7, #0]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	021b      	lsls	r3, r3, #8
 80103b6:	68fa      	ldr	r2, [r7, #12]
 80103b8:	4313      	orrs	r3, r2
 80103ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80103bc:	697b      	ldr	r3, [r7, #20]
 80103be:	f023 0320 	bic.w	r3, r3, #32
 80103c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80103c4:	683b      	ldr	r3, [r7, #0]
 80103c6:	689b      	ldr	r3, [r3, #8]
 80103c8:	011b      	lsls	r3, r3, #4
 80103ca:	697a      	ldr	r2, [r7, #20]
 80103cc:	4313      	orrs	r3, r2
 80103ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	4a29      	ldr	r2, [pc, #164]	; (8010478 <TIM_OC2_SetConfig+0x100>)
 80103d4:	4293      	cmp	r3, r2
 80103d6:	d003      	beq.n	80103e0 <TIM_OC2_SetConfig+0x68>
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	4a28      	ldr	r2, [pc, #160]	; (801047c <TIM_OC2_SetConfig+0x104>)
 80103dc:	4293      	cmp	r3, r2
 80103de:	d10d      	bne.n	80103fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80103e0:	697b      	ldr	r3, [r7, #20]
 80103e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80103e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80103e8:	683b      	ldr	r3, [r7, #0]
 80103ea:	68db      	ldr	r3, [r3, #12]
 80103ec:	011b      	lsls	r3, r3, #4
 80103ee:	697a      	ldr	r2, [r7, #20]
 80103f0:	4313      	orrs	r3, r2
 80103f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80103f4:	697b      	ldr	r3, [r7, #20]
 80103f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80103fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	4a1e      	ldr	r2, [pc, #120]	; (8010478 <TIM_OC2_SetConfig+0x100>)
 8010400:	4293      	cmp	r3, r2
 8010402:	d00f      	beq.n	8010424 <TIM_OC2_SetConfig+0xac>
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	4a1d      	ldr	r2, [pc, #116]	; (801047c <TIM_OC2_SetConfig+0x104>)
 8010408:	4293      	cmp	r3, r2
 801040a:	d00b      	beq.n	8010424 <TIM_OC2_SetConfig+0xac>
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	4a1c      	ldr	r2, [pc, #112]	; (8010480 <TIM_OC2_SetConfig+0x108>)
 8010410:	4293      	cmp	r3, r2
 8010412:	d007      	beq.n	8010424 <TIM_OC2_SetConfig+0xac>
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	4a1b      	ldr	r2, [pc, #108]	; (8010484 <TIM_OC2_SetConfig+0x10c>)
 8010418:	4293      	cmp	r3, r2
 801041a:	d003      	beq.n	8010424 <TIM_OC2_SetConfig+0xac>
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	4a1a      	ldr	r2, [pc, #104]	; (8010488 <TIM_OC2_SetConfig+0x110>)
 8010420:	4293      	cmp	r3, r2
 8010422:	d113      	bne.n	801044c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010424:	693b      	ldr	r3, [r7, #16]
 8010426:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801042a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801042c:	693b      	ldr	r3, [r7, #16]
 801042e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010432:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010434:	683b      	ldr	r3, [r7, #0]
 8010436:	695b      	ldr	r3, [r3, #20]
 8010438:	009b      	lsls	r3, r3, #2
 801043a:	693a      	ldr	r2, [r7, #16]
 801043c:	4313      	orrs	r3, r2
 801043e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010440:	683b      	ldr	r3, [r7, #0]
 8010442:	699b      	ldr	r3, [r3, #24]
 8010444:	009b      	lsls	r3, r3, #2
 8010446:	693a      	ldr	r2, [r7, #16]
 8010448:	4313      	orrs	r3, r2
 801044a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	693a      	ldr	r2, [r7, #16]
 8010450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	68fa      	ldr	r2, [r7, #12]
 8010456:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010458:	683b      	ldr	r3, [r7, #0]
 801045a:	685a      	ldr	r2, [r3, #4]
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	697a      	ldr	r2, [r7, #20]
 8010464:	621a      	str	r2, [r3, #32]
}
 8010466:	bf00      	nop
 8010468:	371c      	adds	r7, #28
 801046a:	46bd      	mov	sp, r7
 801046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010470:	4770      	bx	lr
 8010472:	bf00      	nop
 8010474:	feff8fff 	.word	0xfeff8fff
 8010478:	40010000 	.word	0x40010000
 801047c:	40010400 	.word	0x40010400
 8010480:	40014000 	.word	0x40014000
 8010484:	40014400 	.word	0x40014400
 8010488:	40014800 	.word	0x40014800

0801048c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801048c:	b480      	push	{r7}
 801048e:	b087      	sub	sp, #28
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
 8010494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	6a1b      	ldr	r3, [r3, #32]
 801049a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	6a1b      	ldr	r3, [r3, #32]
 80104a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	685b      	ldr	r3, [r3, #4]
 80104ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	69db      	ldr	r3, [r3, #28]
 80104b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80104b4:	68fa      	ldr	r2, [r7, #12]
 80104b6:	4b33      	ldr	r3, [pc, #204]	; (8010584 <TIM_OC3_SetConfig+0xf8>)
 80104b8:	4013      	ands	r3, r2
 80104ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	f023 0303 	bic.w	r3, r3, #3
 80104c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80104c4:	683b      	ldr	r3, [r7, #0]
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	68fa      	ldr	r2, [r7, #12]
 80104ca:	4313      	orrs	r3, r2
 80104cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80104ce:	697b      	ldr	r3, [r7, #20]
 80104d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80104d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80104d6:	683b      	ldr	r3, [r7, #0]
 80104d8:	689b      	ldr	r3, [r3, #8]
 80104da:	021b      	lsls	r3, r3, #8
 80104dc:	697a      	ldr	r2, [r7, #20]
 80104de:	4313      	orrs	r3, r2
 80104e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	4a28      	ldr	r2, [pc, #160]	; (8010588 <TIM_OC3_SetConfig+0xfc>)
 80104e6:	4293      	cmp	r3, r2
 80104e8:	d003      	beq.n	80104f2 <TIM_OC3_SetConfig+0x66>
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	4a27      	ldr	r2, [pc, #156]	; (801058c <TIM_OC3_SetConfig+0x100>)
 80104ee:	4293      	cmp	r3, r2
 80104f0:	d10d      	bne.n	801050e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80104f2:	697b      	ldr	r3, [r7, #20]
 80104f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80104f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80104fa:	683b      	ldr	r3, [r7, #0]
 80104fc:	68db      	ldr	r3, [r3, #12]
 80104fe:	021b      	lsls	r3, r3, #8
 8010500:	697a      	ldr	r2, [r7, #20]
 8010502:	4313      	orrs	r3, r2
 8010504:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010506:	697b      	ldr	r3, [r7, #20]
 8010508:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801050c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	4a1d      	ldr	r2, [pc, #116]	; (8010588 <TIM_OC3_SetConfig+0xfc>)
 8010512:	4293      	cmp	r3, r2
 8010514:	d00f      	beq.n	8010536 <TIM_OC3_SetConfig+0xaa>
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	4a1c      	ldr	r2, [pc, #112]	; (801058c <TIM_OC3_SetConfig+0x100>)
 801051a:	4293      	cmp	r3, r2
 801051c:	d00b      	beq.n	8010536 <TIM_OC3_SetConfig+0xaa>
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	4a1b      	ldr	r2, [pc, #108]	; (8010590 <TIM_OC3_SetConfig+0x104>)
 8010522:	4293      	cmp	r3, r2
 8010524:	d007      	beq.n	8010536 <TIM_OC3_SetConfig+0xaa>
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	4a1a      	ldr	r2, [pc, #104]	; (8010594 <TIM_OC3_SetConfig+0x108>)
 801052a:	4293      	cmp	r3, r2
 801052c:	d003      	beq.n	8010536 <TIM_OC3_SetConfig+0xaa>
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	4a19      	ldr	r2, [pc, #100]	; (8010598 <TIM_OC3_SetConfig+0x10c>)
 8010532:	4293      	cmp	r3, r2
 8010534:	d113      	bne.n	801055e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010536:	693b      	ldr	r3, [r7, #16]
 8010538:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801053c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801053e:	693b      	ldr	r3, [r7, #16]
 8010540:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010544:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010546:	683b      	ldr	r3, [r7, #0]
 8010548:	695b      	ldr	r3, [r3, #20]
 801054a:	011b      	lsls	r3, r3, #4
 801054c:	693a      	ldr	r2, [r7, #16]
 801054e:	4313      	orrs	r3, r2
 8010550:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	699b      	ldr	r3, [r3, #24]
 8010556:	011b      	lsls	r3, r3, #4
 8010558:	693a      	ldr	r2, [r7, #16]
 801055a:	4313      	orrs	r3, r2
 801055c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	693a      	ldr	r2, [r7, #16]
 8010562:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	68fa      	ldr	r2, [r7, #12]
 8010568:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801056a:	683b      	ldr	r3, [r7, #0]
 801056c:	685a      	ldr	r2, [r3, #4]
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	697a      	ldr	r2, [r7, #20]
 8010576:	621a      	str	r2, [r3, #32]
}
 8010578:	bf00      	nop
 801057a:	371c      	adds	r7, #28
 801057c:	46bd      	mov	sp, r7
 801057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010582:	4770      	bx	lr
 8010584:	fffeff8f 	.word	0xfffeff8f
 8010588:	40010000 	.word	0x40010000
 801058c:	40010400 	.word	0x40010400
 8010590:	40014000 	.word	0x40014000
 8010594:	40014400 	.word	0x40014400
 8010598:	40014800 	.word	0x40014800

0801059c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801059c:	b480      	push	{r7}
 801059e:	b087      	sub	sp, #28
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
 80105a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	6a1b      	ldr	r3, [r3, #32]
 80105aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	6a1b      	ldr	r3, [r3, #32]
 80105b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	685b      	ldr	r3, [r3, #4]
 80105bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	69db      	ldr	r3, [r3, #28]
 80105c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80105c4:	68fa      	ldr	r2, [r7, #12]
 80105c6:	4b24      	ldr	r3, [pc, #144]	; (8010658 <TIM_OC4_SetConfig+0xbc>)
 80105c8:	4013      	ands	r3, r2
 80105ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80105d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80105d4:	683b      	ldr	r3, [r7, #0]
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	021b      	lsls	r3, r3, #8
 80105da:	68fa      	ldr	r2, [r7, #12]
 80105dc:	4313      	orrs	r3, r2
 80105de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80105e0:	693b      	ldr	r3, [r7, #16]
 80105e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80105e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80105e8:	683b      	ldr	r3, [r7, #0]
 80105ea:	689b      	ldr	r3, [r3, #8]
 80105ec:	031b      	lsls	r3, r3, #12
 80105ee:	693a      	ldr	r2, [r7, #16]
 80105f0:	4313      	orrs	r3, r2
 80105f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	4a19      	ldr	r2, [pc, #100]	; (801065c <TIM_OC4_SetConfig+0xc0>)
 80105f8:	4293      	cmp	r3, r2
 80105fa:	d00f      	beq.n	801061c <TIM_OC4_SetConfig+0x80>
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	4a18      	ldr	r2, [pc, #96]	; (8010660 <TIM_OC4_SetConfig+0xc4>)
 8010600:	4293      	cmp	r3, r2
 8010602:	d00b      	beq.n	801061c <TIM_OC4_SetConfig+0x80>
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	4a17      	ldr	r2, [pc, #92]	; (8010664 <TIM_OC4_SetConfig+0xc8>)
 8010608:	4293      	cmp	r3, r2
 801060a:	d007      	beq.n	801061c <TIM_OC4_SetConfig+0x80>
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	4a16      	ldr	r2, [pc, #88]	; (8010668 <TIM_OC4_SetConfig+0xcc>)
 8010610:	4293      	cmp	r3, r2
 8010612:	d003      	beq.n	801061c <TIM_OC4_SetConfig+0x80>
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	4a15      	ldr	r2, [pc, #84]	; (801066c <TIM_OC4_SetConfig+0xd0>)
 8010618:	4293      	cmp	r3, r2
 801061a:	d109      	bne.n	8010630 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801061c:	697b      	ldr	r3, [r7, #20]
 801061e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010622:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	695b      	ldr	r3, [r3, #20]
 8010628:	019b      	lsls	r3, r3, #6
 801062a:	697a      	ldr	r2, [r7, #20]
 801062c:	4313      	orrs	r3, r2
 801062e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	697a      	ldr	r2, [r7, #20]
 8010634:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	68fa      	ldr	r2, [r7, #12]
 801063a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801063c:	683b      	ldr	r3, [r7, #0]
 801063e:	685a      	ldr	r2, [r3, #4]
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	693a      	ldr	r2, [r7, #16]
 8010648:	621a      	str	r2, [r3, #32]
}
 801064a:	bf00      	nop
 801064c:	371c      	adds	r7, #28
 801064e:	46bd      	mov	sp, r7
 8010650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010654:	4770      	bx	lr
 8010656:	bf00      	nop
 8010658:	feff8fff 	.word	0xfeff8fff
 801065c:	40010000 	.word	0x40010000
 8010660:	40010400 	.word	0x40010400
 8010664:	40014000 	.word	0x40014000
 8010668:	40014400 	.word	0x40014400
 801066c:	40014800 	.word	0x40014800

08010670 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010670:	b480      	push	{r7}
 8010672:	b087      	sub	sp, #28
 8010674:	af00      	add	r7, sp, #0
 8010676:	6078      	str	r0, [r7, #4]
 8010678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	6a1b      	ldr	r3, [r3, #32]
 801067e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	6a1b      	ldr	r3, [r3, #32]
 801068a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	685b      	ldr	r3, [r3, #4]
 8010690:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010698:	68fa      	ldr	r2, [r7, #12]
 801069a:	4b21      	ldr	r3, [pc, #132]	; (8010720 <TIM_OC5_SetConfig+0xb0>)
 801069c:	4013      	ands	r3, r2
 801069e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80106a0:	683b      	ldr	r3, [r7, #0]
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	68fa      	ldr	r2, [r7, #12]
 80106a6:	4313      	orrs	r3, r2
 80106a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80106aa:	693b      	ldr	r3, [r7, #16]
 80106ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80106b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80106b2:	683b      	ldr	r3, [r7, #0]
 80106b4:	689b      	ldr	r3, [r3, #8]
 80106b6:	041b      	lsls	r3, r3, #16
 80106b8:	693a      	ldr	r2, [r7, #16]
 80106ba:	4313      	orrs	r3, r2
 80106bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	4a18      	ldr	r2, [pc, #96]	; (8010724 <TIM_OC5_SetConfig+0xb4>)
 80106c2:	4293      	cmp	r3, r2
 80106c4:	d00f      	beq.n	80106e6 <TIM_OC5_SetConfig+0x76>
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	4a17      	ldr	r2, [pc, #92]	; (8010728 <TIM_OC5_SetConfig+0xb8>)
 80106ca:	4293      	cmp	r3, r2
 80106cc:	d00b      	beq.n	80106e6 <TIM_OC5_SetConfig+0x76>
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	4a16      	ldr	r2, [pc, #88]	; (801072c <TIM_OC5_SetConfig+0xbc>)
 80106d2:	4293      	cmp	r3, r2
 80106d4:	d007      	beq.n	80106e6 <TIM_OC5_SetConfig+0x76>
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	4a15      	ldr	r2, [pc, #84]	; (8010730 <TIM_OC5_SetConfig+0xc0>)
 80106da:	4293      	cmp	r3, r2
 80106dc:	d003      	beq.n	80106e6 <TIM_OC5_SetConfig+0x76>
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	4a14      	ldr	r2, [pc, #80]	; (8010734 <TIM_OC5_SetConfig+0xc4>)
 80106e2:	4293      	cmp	r3, r2
 80106e4:	d109      	bne.n	80106fa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80106e6:	697b      	ldr	r3, [r7, #20]
 80106e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80106ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80106ee:	683b      	ldr	r3, [r7, #0]
 80106f0:	695b      	ldr	r3, [r3, #20]
 80106f2:	021b      	lsls	r3, r3, #8
 80106f4:	697a      	ldr	r2, [r7, #20]
 80106f6:	4313      	orrs	r3, r2
 80106f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	697a      	ldr	r2, [r7, #20]
 80106fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	68fa      	ldr	r2, [r7, #12]
 8010704:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8010706:	683b      	ldr	r3, [r7, #0]
 8010708:	685a      	ldr	r2, [r3, #4]
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	693a      	ldr	r2, [r7, #16]
 8010712:	621a      	str	r2, [r3, #32]
}
 8010714:	bf00      	nop
 8010716:	371c      	adds	r7, #28
 8010718:	46bd      	mov	sp, r7
 801071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071e:	4770      	bx	lr
 8010720:	fffeff8f 	.word	0xfffeff8f
 8010724:	40010000 	.word	0x40010000
 8010728:	40010400 	.word	0x40010400
 801072c:	40014000 	.word	0x40014000
 8010730:	40014400 	.word	0x40014400
 8010734:	40014800 	.word	0x40014800

08010738 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010738:	b480      	push	{r7}
 801073a:	b087      	sub	sp, #28
 801073c:	af00      	add	r7, sp, #0
 801073e:	6078      	str	r0, [r7, #4]
 8010740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	6a1b      	ldr	r3, [r3, #32]
 8010746:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	6a1b      	ldr	r3, [r3, #32]
 8010752:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	685b      	ldr	r3, [r3, #4]
 8010758:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801075e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010760:	68fa      	ldr	r2, [r7, #12]
 8010762:	4b22      	ldr	r3, [pc, #136]	; (80107ec <TIM_OC6_SetConfig+0xb4>)
 8010764:	4013      	ands	r3, r2
 8010766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010768:	683b      	ldr	r3, [r7, #0]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	021b      	lsls	r3, r3, #8
 801076e:	68fa      	ldr	r2, [r7, #12]
 8010770:	4313      	orrs	r3, r2
 8010772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010774:	693b      	ldr	r3, [r7, #16]
 8010776:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801077a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801077c:	683b      	ldr	r3, [r7, #0]
 801077e:	689b      	ldr	r3, [r3, #8]
 8010780:	051b      	lsls	r3, r3, #20
 8010782:	693a      	ldr	r2, [r7, #16]
 8010784:	4313      	orrs	r3, r2
 8010786:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	4a19      	ldr	r2, [pc, #100]	; (80107f0 <TIM_OC6_SetConfig+0xb8>)
 801078c:	4293      	cmp	r3, r2
 801078e:	d00f      	beq.n	80107b0 <TIM_OC6_SetConfig+0x78>
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	4a18      	ldr	r2, [pc, #96]	; (80107f4 <TIM_OC6_SetConfig+0xbc>)
 8010794:	4293      	cmp	r3, r2
 8010796:	d00b      	beq.n	80107b0 <TIM_OC6_SetConfig+0x78>
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	4a17      	ldr	r2, [pc, #92]	; (80107f8 <TIM_OC6_SetConfig+0xc0>)
 801079c:	4293      	cmp	r3, r2
 801079e:	d007      	beq.n	80107b0 <TIM_OC6_SetConfig+0x78>
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	4a16      	ldr	r2, [pc, #88]	; (80107fc <TIM_OC6_SetConfig+0xc4>)
 80107a4:	4293      	cmp	r3, r2
 80107a6:	d003      	beq.n	80107b0 <TIM_OC6_SetConfig+0x78>
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	4a15      	ldr	r2, [pc, #84]	; (8010800 <TIM_OC6_SetConfig+0xc8>)
 80107ac:	4293      	cmp	r3, r2
 80107ae:	d109      	bne.n	80107c4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80107b0:	697b      	ldr	r3, [r7, #20]
 80107b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80107b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80107b8:	683b      	ldr	r3, [r7, #0]
 80107ba:	695b      	ldr	r3, [r3, #20]
 80107bc:	029b      	lsls	r3, r3, #10
 80107be:	697a      	ldr	r2, [r7, #20]
 80107c0:	4313      	orrs	r3, r2
 80107c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	697a      	ldr	r2, [r7, #20]
 80107c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	68fa      	ldr	r2, [r7, #12]
 80107ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80107d0:	683b      	ldr	r3, [r7, #0]
 80107d2:	685a      	ldr	r2, [r3, #4]
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	693a      	ldr	r2, [r7, #16]
 80107dc:	621a      	str	r2, [r3, #32]
}
 80107de:	bf00      	nop
 80107e0:	371c      	adds	r7, #28
 80107e2:	46bd      	mov	sp, r7
 80107e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e8:	4770      	bx	lr
 80107ea:	bf00      	nop
 80107ec:	feff8fff 	.word	0xfeff8fff
 80107f0:	40010000 	.word	0x40010000
 80107f4:	40010400 	.word	0x40010400
 80107f8:	40014000 	.word	0x40014000
 80107fc:	40014400 	.word	0x40014400
 8010800:	40014800 	.word	0x40014800

08010804 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010804:	b480      	push	{r7}
 8010806:	b087      	sub	sp, #28
 8010808:	af00      	add	r7, sp, #0
 801080a:	60f8      	str	r0, [r7, #12]
 801080c:	60b9      	str	r1, [r7, #8]
 801080e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010810:	68bb      	ldr	r3, [r7, #8]
 8010812:	f003 031f 	and.w	r3, r3, #31
 8010816:	2201      	movs	r2, #1
 8010818:	fa02 f303 	lsl.w	r3, r2, r3
 801081c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	6a1a      	ldr	r2, [r3, #32]
 8010822:	697b      	ldr	r3, [r7, #20]
 8010824:	43db      	mvns	r3, r3
 8010826:	401a      	ands	r2, r3
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	6a1a      	ldr	r2, [r3, #32]
 8010830:	68bb      	ldr	r3, [r7, #8]
 8010832:	f003 031f 	and.w	r3, r3, #31
 8010836:	6879      	ldr	r1, [r7, #4]
 8010838:	fa01 f303 	lsl.w	r3, r1, r3
 801083c:	431a      	orrs	r2, r3
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	621a      	str	r2, [r3, #32]
}
 8010842:	bf00      	nop
 8010844:	371c      	adds	r7, #28
 8010846:	46bd      	mov	sp, r7
 8010848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801084c:	4770      	bx	lr
	...

08010850 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010850:	b480      	push	{r7}
 8010852:	b085      	sub	sp, #20
 8010854:	af00      	add	r7, sp, #0
 8010856:	6078      	str	r0, [r7, #4]
 8010858:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010860:	2b01      	cmp	r3, #1
 8010862:	d101      	bne.n	8010868 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010864:	2302      	movs	r3, #2
 8010866:	e077      	b.n	8010958 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	2201      	movs	r2, #1
 801086c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	2202      	movs	r2, #2
 8010874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	685b      	ldr	r3, [r3, #4]
 801087e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	689b      	ldr	r3, [r3, #8]
 8010886:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	4a35      	ldr	r2, [pc, #212]	; (8010964 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801088e:	4293      	cmp	r3, r2
 8010890:	d004      	beq.n	801089c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	4a34      	ldr	r2, [pc, #208]	; (8010968 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010898:	4293      	cmp	r3, r2
 801089a:	d108      	bne.n	80108ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80108a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80108a4:	683b      	ldr	r3, [r7, #0]
 80108a6:	685b      	ldr	r3, [r3, #4]
 80108a8:	68fa      	ldr	r2, [r7, #12]
 80108aa:	4313      	orrs	r3, r2
 80108ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80108b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80108b6:	683b      	ldr	r3, [r7, #0]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	68fa      	ldr	r2, [r7, #12]
 80108bc:	4313      	orrs	r3, r2
 80108be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	68fa      	ldr	r2, [r7, #12]
 80108c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	4a25      	ldr	r2, [pc, #148]	; (8010964 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80108ce:	4293      	cmp	r3, r2
 80108d0:	d02c      	beq.n	801092c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80108da:	d027      	beq.n	801092c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	4a22      	ldr	r2, [pc, #136]	; (801096c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80108e2:	4293      	cmp	r3, r2
 80108e4:	d022      	beq.n	801092c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	4a21      	ldr	r2, [pc, #132]	; (8010970 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80108ec:	4293      	cmp	r3, r2
 80108ee:	d01d      	beq.n	801092c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	4a1f      	ldr	r2, [pc, #124]	; (8010974 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80108f6:	4293      	cmp	r3, r2
 80108f8:	d018      	beq.n	801092c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	4a1a      	ldr	r2, [pc, #104]	; (8010968 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010900:	4293      	cmp	r3, r2
 8010902:	d013      	beq.n	801092c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	4a1b      	ldr	r2, [pc, #108]	; (8010978 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 801090a:	4293      	cmp	r3, r2
 801090c:	d00e      	beq.n	801092c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	4a1a      	ldr	r2, [pc, #104]	; (801097c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8010914:	4293      	cmp	r3, r2
 8010916:	d009      	beq.n	801092c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	4a18      	ldr	r2, [pc, #96]	; (8010980 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 801091e:	4293      	cmp	r3, r2
 8010920:	d004      	beq.n	801092c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	4a17      	ldr	r2, [pc, #92]	; (8010984 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8010928:	4293      	cmp	r3, r2
 801092a:	d10c      	bne.n	8010946 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801092c:	68bb      	ldr	r3, [r7, #8]
 801092e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010932:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010934:	683b      	ldr	r3, [r7, #0]
 8010936:	689b      	ldr	r3, [r3, #8]
 8010938:	68ba      	ldr	r2, [r7, #8]
 801093a:	4313      	orrs	r3, r2
 801093c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	68ba      	ldr	r2, [r7, #8]
 8010944:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	2201      	movs	r2, #1
 801094a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	2200      	movs	r2, #0
 8010952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010956:	2300      	movs	r3, #0
}
 8010958:	4618      	mov	r0, r3
 801095a:	3714      	adds	r7, #20
 801095c:	46bd      	mov	sp, r7
 801095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010962:	4770      	bx	lr
 8010964:	40010000 	.word	0x40010000
 8010968:	40010400 	.word	0x40010400
 801096c:	40000400 	.word	0x40000400
 8010970:	40000800 	.word	0x40000800
 8010974:	40000c00 	.word	0x40000c00
 8010978:	40001800 	.word	0x40001800
 801097c:	40014000 	.word	0x40014000
 8010980:	4000e000 	.word	0x4000e000
 8010984:	4000e400 	.word	0x4000e400

08010988 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010988:	b480      	push	{r7}
 801098a:	b083      	sub	sp, #12
 801098c:	af00      	add	r7, sp, #0
 801098e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010990:	bf00      	nop
 8010992:	370c      	adds	r7, #12
 8010994:	46bd      	mov	sp, r7
 8010996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801099a:	4770      	bx	lr

0801099c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801099c:	b480      	push	{r7}
 801099e:	b083      	sub	sp, #12
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80109a4:	bf00      	nop
 80109a6:	370c      	adds	r7, #12
 80109a8:	46bd      	mov	sp, r7
 80109aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ae:	4770      	bx	lr

080109b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80109b0:	b480      	push	{r7}
 80109b2:	b083      	sub	sp, #12
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80109b8:	bf00      	nop
 80109ba:	370c      	adds	r7, #12
 80109bc:	46bd      	mov	sp, r7
 80109be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c2:	4770      	bx	lr

080109c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b082      	sub	sp, #8
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d101      	bne.n	80109d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80109d2:	2301      	movs	r3, #1
 80109d4:	e042      	b.n	8010a5c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d106      	bne.n	80109ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	2200      	movs	r2, #0
 80109e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80109e8:	6878      	ldr	r0, [r7, #4]
 80109ea:	f7f2 fd41 	bl	8003470 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	2224      	movs	r2, #36	; 0x24
 80109f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	681a      	ldr	r2, [r3, #0]
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	f022 0201 	bic.w	r2, r2, #1
 8010a04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010a06:	6878      	ldr	r0, [r7, #4]
 8010a08:	f000 f82c 	bl	8010a64 <UART_SetConfig>
 8010a0c:	4603      	mov	r3, r0
 8010a0e:	2b01      	cmp	r3, #1
 8010a10:	d101      	bne.n	8010a16 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8010a12:	2301      	movs	r3, #1
 8010a14:	e022      	b.n	8010a5c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d002      	beq.n	8010a24 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8010a1e:	6878      	ldr	r0, [r7, #4]
 8010a20:	f000 fe8c 	bl	801173c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	685a      	ldr	r2, [r3, #4]
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010a32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	689a      	ldr	r2, [r3, #8]
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010a42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	681a      	ldr	r2, [r3, #0]
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	f042 0201 	orr.w	r2, r2, #1
 8010a52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010a54:	6878      	ldr	r0, [r7, #4]
 8010a56:	f000 ff13 	bl	8011880 <UART_CheckIdleState>
 8010a5a:	4603      	mov	r3, r0
}
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	3708      	adds	r7, #8
 8010a60:	46bd      	mov	sp, r7
 8010a62:	bd80      	pop	{r7, pc}

08010a64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010a68:	b092      	sub	sp, #72	; 0x48
 8010a6a:	af00      	add	r7, sp, #0
 8010a6c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010a6e:	2300      	movs	r3, #0
 8010a70:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010a74:	697b      	ldr	r3, [r7, #20]
 8010a76:	689a      	ldr	r2, [r3, #8]
 8010a78:	697b      	ldr	r3, [r7, #20]
 8010a7a:	691b      	ldr	r3, [r3, #16]
 8010a7c:	431a      	orrs	r2, r3
 8010a7e:	697b      	ldr	r3, [r7, #20]
 8010a80:	695b      	ldr	r3, [r3, #20]
 8010a82:	431a      	orrs	r2, r3
 8010a84:	697b      	ldr	r3, [r7, #20]
 8010a86:	69db      	ldr	r3, [r3, #28]
 8010a88:	4313      	orrs	r3, r2
 8010a8a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010a8c:	697b      	ldr	r3, [r7, #20]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	681a      	ldr	r2, [r3, #0]
 8010a92:	4bbe      	ldr	r3, [pc, #760]	; (8010d8c <UART_SetConfig+0x328>)
 8010a94:	4013      	ands	r3, r2
 8010a96:	697a      	ldr	r2, [r7, #20]
 8010a98:	6812      	ldr	r2, [r2, #0]
 8010a9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010a9c:	430b      	orrs	r3, r1
 8010a9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010aa0:	697b      	ldr	r3, [r7, #20]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	685b      	ldr	r3, [r3, #4]
 8010aa6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010aaa:	697b      	ldr	r3, [r7, #20]
 8010aac:	68da      	ldr	r2, [r3, #12]
 8010aae:	697b      	ldr	r3, [r7, #20]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	430a      	orrs	r2, r1
 8010ab4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010ab6:	697b      	ldr	r3, [r7, #20]
 8010ab8:	699b      	ldr	r3, [r3, #24]
 8010aba:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010abc:	697b      	ldr	r3, [r7, #20]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	4ab3      	ldr	r2, [pc, #716]	; (8010d90 <UART_SetConfig+0x32c>)
 8010ac2:	4293      	cmp	r3, r2
 8010ac4:	d004      	beq.n	8010ad0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010ac6:	697b      	ldr	r3, [r7, #20]
 8010ac8:	6a1b      	ldr	r3, [r3, #32]
 8010aca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010acc:	4313      	orrs	r3, r2
 8010ace:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010ad0:	697b      	ldr	r3, [r7, #20]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	689a      	ldr	r2, [r3, #8]
 8010ad6:	4baf      	ldr	r3, [pc, #700]	; (8010d94 <UART_SetConfig+0x330>)
 8010ad8:	4013      	ands	r3, r2
 8010ada:	697a      	ldr	r2, [r7, #20]
 8010adc:	6812      	ldr	r2, [r2, #0]
 8010ade:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010ae0:	430b      	orrs	r3, r1
 8010ae2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010ae4:	697b      	ldr	r3, [r7, #20]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010aea:	f023 010f 	bic.w	r1, r3, #15
 8010aee:	697b      	ldr	r3, [r7, #20]
 8010af0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010af2:	697b      	ldr	r3, [r7, #20]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	430a      	orrs	r2, r1
 8010af8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010afa:	697b      	ldr	r3, [r7, #20]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	4aa6      	ldr	r2, [pc, #664]	; (8010d98 <UART_SetConfig+0x334>)
 8010b00:	4293      	cmp	r3, r2
 8010b02:	d177      	bne.n	8010bf4 <UART_SetConfig+0x190>
 8010b04:	4ba5      	ldr	r3, [pc, #660]	; (8010d9c <UART_SetConfig+0x338>)
 8010b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010b0c:	2b28      	cmp	r3, #40	; 0x28
 8010b0e:	d86d      	bhi.n	8010bec <UART_SetConfig+0x188>
 8010b10:	a201      	add	r2, pc, #4	; (adr r2, 8010b18 <UART_SetConfig+0xb4>)
 8010b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b16:	bf00      	nop
 8010b18:	08010bbd 	.word	0x08010bbd
 8010b1c:	08010bed 	.word	0x08010bed
 8010b20:	08010bed 	.word	0x08010bed
 8010b24:	08010bed 	.word	0x08010bed
 8010b28:	08010bed 	.word	0x08010bed
 8010b2c:	08010bed 	.word	0x08010bed
 8010b30:	08010bed 	.word	0x08010bed
 8010b34:	08010bed 	.word	0x08010bed
 8010b38:	08010bc5 	.word	0x08010bc5
 8010b3c:	08010bed 	.word	0x08010bed
 8010b40:	08010bed 	.word	0x08010bed
 8010b44:	08010bed 	.word	0x08010bed
 8010b48:	08010bed 	.word	0x08010bed
 8010b4c:	08010bed 	.word	0x08010bed
 8010b50:	08010bed 	.word	0x08010bed
 8010b54:	08010bed 	.word	0x08010bed
 8010b58:	08010bcd 	.word	0x08010bcd
 8010b5c:	08010bed 	.word	0x08010bed
 8010b60:	08010bed 	.word	0x08010bed
 8010b64:	08010bed 	.word	0x08010bed
 8010b68:	08010bed 	.word	0x08010bed
 8010b6c:	08010bed 	.word	0x08010bed
 8010b70:	08010bed 	.word	0x08010bed
 8010b74:	08010bed 	.word	0x08010bed
 8010b78:	08010bd5 	.word	0x08010bd5
 8010b7c:	08010bed 	.word	0x08010bed
 8010b80:	08010bed 	.word	0x08010bed
 8010b84:	08010bed 	.word	0x08010bed
 8010b88:	08010bed 	.word	0x08010bed
 8010b8c:	08010bed 	.word	0x08010bed
 8010b90:	08010bed 	.word	0x08010bed
 8010b94:	08010bed 	.word	0x08010bed
 8010b98:	08010bdd 	.word	0x08010bdd
 8010b9c:	08010bed 	.word	0x08010bed
 8010ba0:	08010bed 	.word	0x08010bed
 8010ba4:	08010bed 	.word	0x08010bed
 8010ba8:	08010bed 	.word	0x08010bed
 8010bac:	08010bed 	.word	0x08010bed
 8010bb0:	08010bed 	.word	0x08010bed
 8010bb4:	08010bed 	.word	0x08010bed
 8010bb8:	08010be5 	.word	0x08010be5
 8010bbc:	2301      	movs	r3, #1
 8010bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bc2:	e326      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010bc4:	2304      	movs	r3, #4
 8010bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bca:	e322      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010bcc:	2308      	movs	r3, #8
 8010bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bd2:	e31e      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010bd4:	2310      	movs	r3, #16
 8010bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bda:	e31a      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010bdc:	2320      	movs	r3, #32
 8010bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010be2:	e316      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010be4:	2340      	movs	r3, #64	; 0x40
 8010be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bea:	e312      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010bec:	2380      	movs	r3, #128	; 0x80
 8010bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bf2:	e30e      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010bf4:	697b      	ldr	r3, [r7, #20]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	4a69      	ldr	r2, [pc, #420]	; (8010da0 <UART_SetConfig+0x33c>)
 8010bfa:	4293      	cmp	r3, r2
 8010bfc:	d130      	bne.n	8010c60 <UART_SetConfig+0x1fc>
 8010bfe:	4b67      	ldr	r3, [pc, #412]	; (8010d9c <UART_SetConfig+0x338>)
 8010c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c02:	f003 0307 	and.w	r3, r3, #7
 8010c06:	2b05      	cmp	r3, #5
 8010c08:	d826      	bhi.n	8010c58 <UART_SetConfig+0x1f4>
 8010c0a:	a201      	add	r2, pc, #4	; (adr r2, 8010c10 <UART_SetConfig+0x1ac>)
 8010c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c10:	08010c29 	.word	0x08010c29
 8010c14:	08010c31 	.word	0x08010c31
 8010c18:	08010c39 	.word	0x08010c39
 8010c1c:	08010c41 	.word	0x08010c41
 8010c20:	08010c49 	.word	0x08010c49
 8010c24:	08010c51 	.word	0x08010c51
 8010c28:	2300      	movs	r3, #0
 8010c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c2e:	e2f0      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010c30:	2304      	movs	r3, #4
 8010c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c36:	e2ec      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010c38:	2308      	movs	r3, #8
 8010c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c3e:	e2e8      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010c40:	2310      	movs	r3, #16
 8010c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c46:	e2e4      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010c48:	2320      	movs	r3, #32
 8010c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c4e:	e2e0      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010c50:	2340      	movs	r3, #64	; 0x40
 8010c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c56:	e2dc      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010c58:	2380      	movs	r3, #128	; 0x80
 8010c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c5e:	e2d8      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010c60:	697b      	ldr	r3, [r7, #20]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	4a4f      	ldr	r2, [pc, #316]	; (8010da4 <UART_SetConfig+0x340>)
 8010c66:	4293      	cmp	r3, r2
 8010c68:	d130      	bne.n	8010ccc <UART_SetConfig+0x268>
 8010c6a:	4b4c      	ldr	r3, [pc, #304]	; (8010d9c <UART_SetConfig+0x338>)
 8010c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c6e:	f003 0307 	and.w	r3, r3, #7
 8010c72:	2b05      	cmp	r3, #5
 8010c74:	d826      	bhi.n	8010cc4 <UART_SetConfig+0x260>
 8010c76:	a201      	add	r2, pc, #4	; (adr r2, 8010c7c <UART_SetConfig+0x218>)
 8010c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c7c:	08010c95 	.word	0x08010c95
 8010c80:	08010c9d 	.word	0x08010c9d
 8010c84:	08010ca5 	.word	0x08010ca5
 8010c88:	08010cad 	.word	0x08010cad
 8010c8c:	08010cb5 	.word	0x08010cb5
 8010c90:	08010cbd 	.word	0x08010cbd
 8010c94:	2300      	movs	r3, #0
 8010c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c9a:	e2ba      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010c9c:	2304      	movs	r3, #4
 8010c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ca2:	e2b6      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010ca4:	2308      	movs	r3, #8
 8010ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010caa:	e2b2      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010cac:	2310      	movs	r3, #16
 8010cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cb2:	e2ae      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010cb4:	2320      	movs	r3, #32
 8010cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cba:	e2aa      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010cbc:	2340      	movs	r3, #64	; 0x40
 8010cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cc2:	e2a6      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010cc4:	2380      	movs	r3, #128	; 0x80
 8010cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cca:	e2a2      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010ccc:	697b      	ldr	r3, [r7, #20]
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	4a35      	ldr	r2, [pc, #212]	; (8010da8 <UART_SetConfig+0x344>)
 8010cd2:	4293      	cmp	r3, r2
 8010cd4:	d130      	bne.n	8010d38 <UART_SetConfig+0x2d4>
 8010cd6:	4b31      	ldr	r3, [pc, #196]	; (8010d9c <UART_SetConfig+0x338>)
 8010cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010cda:	f003 0307 	and.w	r3, r3, #7
 8010cde:	2b05      	cmp	r3, #5
 8010ce0:	d826      	bhi.n	8010d30 <UART_SetConfig+0x2cc>
 8010ce2:	a201      	add	r2, pc, #4	; (adr r2, 8010ce8 <UART_SetConfig+0x284>)
 8010ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ce8:	08010d01 	.word	0x08010d01
 8010cec:	08010d09 	.word	0x08010d09
 8010cf0:	08010d11 	.word	0x08010d11
 8010cf4:	08010d19 	.word	0x08010d19
 8010cf8:	08010d21 	.word	0x08010d21
 8010cfc:	08010d29 	.word	0x08010d29
 8010d00:	2300      	movs	r3, #0
 8010d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d06:	e284      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010d08:	2304      	movs	r3, #4
 8010d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d0e:	e280      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010d10:	2308      	movs	r3, #8
 8010d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d16:	e27c      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010d18:	2310      	movs	r3, #16
 8010d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d1e:	e278      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010d20:	2320      	movs	r3, #32
 8010d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d26:	e274      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010d28:	2340      	movs	r3, #64	; 0x40
 8010d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d2e:	e270      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010d30:	2380      	movs	r3, #128	; 0x80
 8010d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d36:	e26c      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010d38:	697b      	ldr	r3, [r7, #20]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	4a1b      	ldr	r2, [pc, #108]	; (8010dac <UART_SetConfig+0x348>)
 8010d3e:	4293      	cmp	r3, r2
 8010d40:	d142      	bne.n	8010dc8 <UART_SetConfig+0x364>
 8010d42:	4b16      	ldr	r3, [pc, #88]	; (8010d9c <UART_SetConfig+0x338>)
 8010d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d46:	f003 0307 	and.w	r3, r3, #7
 8010d4a:	2b05      	cmp	r3, #5
 8010d4c:	d838      	bhi.n	8010dc0 <UART_SetConfig+0x35c>
 8010d4e:	a201      	add	r2, pc, #4	; (adr r2, 8010d54 <UART_SetConfig+0x2f0>)
 8010d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d54:	08010d6d 	.word	0x08010d6d
 8010d58:	08010d75 	.word	0x08010d75
 8010d5c:	08010d7d 	.word	0x08010d7d
 8010d60:	08010d85 	.word	0x08010d85
 8010d64:	08010db1 	.word	0x08010db1
 8010d68:	08010db9 	.word	0x08010db9
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d72:	e24e      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010d74:	2304      	movs	r3, #4
 8010d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d7a:	e24a      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010d7c:	2308      	movs	r3, #8
 8010d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d82:	e246      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010d84:	2310      	movs	r3, #16
 8010d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d8a:	e242      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010d8c:	cfff69f3 	.word	0xcfff69f3
 8010d90:	58000c00 	.word	0x58000c00
 8010d94:	11fff4ff 	.word	0x11fff4ff
 8010d98:	40011000 	.word	0x40011000
 8010d9c:	58024400 	.word	0x58024400
 8010da0:	40004400 	.word	0x40004400
 8010da4:	40004800 	.word	0x40004800
 8010da8:	40004c00 	.word	0x40004c00
 8010dac:	40005000 	.word	0x40005000
 8010db0:	2320      	movs	r3, #32
 8010db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010db6:	e22c      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010db8:	2340      	movs	r3, #64	; 0x40
 8010dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dbe:	e228      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010dc0:	2380      	movs	r3, #128	; 0x80
 8010dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dc6:	e224      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010dc8:	697b      	ldr	r3, [r7, #20]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	4ab1      	ldr	r2, [pc, #708]	; (8011094 <UART_SetConfig+0x630>)
 8010dce:	4293      	cmp	r3, r2
 8010dd0:	d176      	bne.n	8010ec0 <UART_SetConfig+0x45c>
 8010dd2:	4bb1      	ldr	r3, [pc, #708]	; (8011098 <UART_SetConfig+0x634>)
 8010dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010dd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010dda:	2b28      	cmp	r3, #40	; 0x28
 8010ddc:	d86c      	bhi.n	8010eb8 <UART_SetConfig+0x454>
 8010dde:	a201      	add	r2, pc, #4	; (adr r2, 8010de4 <UART_SetConfig+0x380>)
 8010de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010de4:	08010e89 	.word	0x08010e89
 8010de8:	08010eb9 	.word	0x08010eb9
 8010dec:	08010eb9 	.word	0x08010eb9
 8010df0:	08010eb9 	.word	0x08010eb9
 8010df4:	08010eb9 	.word	0x08010eb9
 8010df8:	08010eb9 	.word	0x08010eb9
 8010dfc:	08010eb9 	.word	0x08010eb9
 8010e00:	08010eb9 	.word	0x08010eb9
 8010e04:	08010e91 	.word	0x08010e91
 8010e08:	08010eb9 	.word	0x08010eb9
 8010e0c:	08010eb9 	.word	0x08010eb9
 8010e10:	08010eb9 	.word	0x08010eb9
 8010e14:	08010eb9 	.word	0x08010eb9
 8010e18:	08010eb9 	.word	0x08010eb9
 8010e1c:	08010eb9 	.word	0x08010eb9
 8010e20:	08010eb9 	.word	0x08010eb9
 8010e24:	08010e99 	.word	0x08010e99
 8010e28:	08010eb9 	.word	0x08010eb9
 8010e2c:	08010eb9 	.word	0x08010eb9
 8010e30:	08010eb9 	.word	0x08010eb9
 8010e34:	08010eb9 	.word	0x08010eb9
 8010e38:	08010eb9 	.word	0x08010eb9
 8010e3c:	08010eb9 	.word	0x08010eb9
 8010e40:	08010eb9 	.word	0x08010eb9
 8010e44:	08010ea1 	.word	0x08010ea1
 8010e48:	08010eb9 	.word	0x08010eb9
 8010e4c:	08010eb9 	.word	0x08010eb9
 8010e50:	08010eb9 	.word	0x08010eb9
 8010e54:	08010eb9 	.word	0x08010eb9
 8010e58:	08010eb9 	.word	0x08010eb9
 8010e5c:	08010eb9 	.word	0x08010eb9
 8010e60:	08010eb9 	.word	0x08010eb9
 8010e64:	08010ea9 	.word	0x08010ea9
 8010e68:	08010eb9 	.word	0x08010eb9
 8010e6c:	08010eb9 	.word	0x08010eb9
 8010e70:	08010eb9 	.word	0x08010eb9
 8010e74:	08010eb9 	.word	0x08010eb9
 8010e78:	08010eb9 	.word	0x08010eb9
 8010e7c:	08010eb9 	.word	0x08010eb9
 8010e80:	08010eb9 	.word	0x08010eb9
 8010e84:	08010eb1 	.word	0x08010eb1
 8010e88:	2301      	movs	r3, #1
 8010e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e8e:	e1c0      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010e90:	2304      	movs	r3, #4
 8010e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e96:	e1bc      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010e98:	2308      	movs	r3, #8
 8010e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e9e:	e1b8      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010ea0:	2310      	movs	r3, #16
 8010ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ea6:	e1b4      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010ea8:	2320      	movs	r3, #32
 8010eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eae:	e1b0      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010eb0:	2340      	movs	r3, #64	; 0x40
 8010eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eb6:	e1ac      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010eb8:	2380      	movs	r3, #128	; 0x80
 8010eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ebe:	e1a8      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010ec0:	697b      	ldr	r3, [r7, #20]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	4a75      	ldr	r2, [pc, #468]	; (801109c <UART_SetConfig+0x638>)
 8010ec6:	4293      	cmp	r3, r2
 8010ec8:	d130      	bne.n	8010f2c <UART_SetConfig+0x4c8>
 8010eca:	4b73      	ldr	r3, [pc, #460]	; (8011098 <UART_SetConfig+0x634>)
 8010ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ece:	f003 0307 	and.w	r3, r3, #7
 8010ed2:	2b05      	cmp	r3, #5
 8010ed4:	d826      	bhi.n	8010f24 <UART_SetConfig+0x4c0>
 8010ed6:	a201      	add	r2, pc, #4	; (adr r2, 8010edc <UART_SetConfig+0x478>)
 8010ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010edc:	08010ef5 	.word	0x08010ef5
 8010ee0:	08010efd 	.word	0x08010efd
 8010ee4:	08010f05 	.word	0x08010f05
 8010ee8:	08010f0d 	.word	0x08010f0d
 8010eec:	08010f15 	.word	0x08010f15
 8010ef0:	08010f1d 	.word	0x08010f1d
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010efa:	e18a      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010efc:	2304      	movs	r3, #4
 8010efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f02:	e186      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010f04:	2308      	movs	r3, #8
 8010f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f0a:	e182      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010f0c:	2310      	movs	r3, #16
 8010f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f12:	e17e      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010f14:	2320      	movs	r3, #32
 8010f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f1a:	e17a      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010f1c:	2340      	movs	r3, #64	; 0x40
 8010f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f22:	e176      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010f24:	2380      	movs	r3, #128	; 0x80
 8010f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f2a:	e172      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010f2c:	697b      	ldr	r3, [r7, #20]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	4a5b      	ldr	r2, [pc, #364]	; (80110a0 <UART_SetConfig+0x63c>)
 8010f32:	4293      	cmp	r3, r2
 8010f34:	d130      	bne.n	8010f98 <UART_SetConfig+0x534>
 8010f36:	4b58      	ldr	r3, [pc, #352]	; (8011098 <UART_SetConfig+0x634>)
 8010f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f3a:	f003 0307 	and.w	r3, r3, #7
 8010f3e:	2b05      	cmp	r3, #5
 8010f40:	d826      	bhi.n	8010f90 <UART_SetConfig+0x52c>
 8010f42:	a201      	add	r2, pc, #4	; (adr r2, 8010f48 <UART_SetConfig+0x4e4>)
 8010f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f48:	08010f61 	.word	0x08010f61
 8010f4c:	08010f69 	.word	0x08010f69
 8010f50:	08010f71 	.word	0x08010f71
 8010f54:	08010f79 	.word	0x08010f79
 8010f58:	08010f81 	.word	0x08010f81
 8010f5c:	08010f89 	.word	0x08010f89
 8010f60:	2300      	movs	r3, #0
 8010f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f66:	e154      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010f68:	2304      	movs	r3, #4
 8010f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f6e:	e150      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010f70:	2308      	movs	r3, #8
 8010f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f76:	e14c      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010f78:	2310      	movs	r3, #16
 8010f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f7e:	e148      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010f80:	2320      	movs	r3, #32
 8010f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f86:	e144      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010f88:	2340      	movs	r3, #64	; 0x40
 8010f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f8e:	e140      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010f90:	2380      	movs	r3, #128	; 0x80
 8010f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f96:	e13c      	b.n	8011212 <UART_SetConfig+0x7ae>
 8010f98:	697b      	ldr	r3, [r7, #20]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	4a41      	ldr	r2, [pc, #260]	; (80110a4 <UART_SetConfig+0x640>)
 8010f9e:	4293      	cmp	r3, r2
 8010fa0:	f040 8082 	bne.w	80110a8 <UART_SetConfig+0x644>
 8010fa4:	4b3c      	ldr	r3, [pc, #240]	; (8011098 <UART_SetConfig+0x634>)
 8010fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010fa8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010fac:	2b28      	cmp	r3, #40	; 0x28
 8010fae:	d86d      	bhi.n	801108c <UART_SetConfig+0x628>
 8010fb0:	a201      	add	r2, pc, #4	; (adr r2, 8010fb8 <UART_SetConfig+0x554>)
 8010fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fb6:	bf00      	nop
 8010fb8:	0801105d 	.word	0x0801105d
 8010fbc:	0801108d 	.word	0x0801108d
 8010fc0:	0801108d 	.word	0x0801108d
 8010fc4:	0801108d 	.word	0x0801108d
 8010fc8:	0801108d 	.word	0x0801108d
 8010fcc:	0801108d 	.word	0x0801108d
 8010fd0:	0801108d 	.word	0x0801108d
 8010fd4:	0801108d 	.word	0x0801108d
 8010fd8:	08011065 	.word	0x08011065
 8010fdc:	0801108d 	.word	0x0801108d
 8010fe0:	0801108d 	.word	0x0801108d
 8010fe4:	0801108d 	.word	0x0801108d
 8010fe8:	0801108d 	.word	0x0801108d
 8010fec:	0801108d 	.word	0x0801108d
 8010ff0:	0801108d 	.word	0x0801108d
 8010ff4:	0801108d 	.word	0x0801108d
 8010ff8:	0801106d 	.word	0x0801106d
 8010ffc:	0801108d 	.word	0x0801108d
 8011000:	0801108d 	.word	0x0801108d
 8011004:	0801108d 	.word	0x0801108d
 8011008:	0801108d 	.word	0x0801108d
 801100c:	0801108d 	.word	0x0801108d
 8011010:	0801108d 	.word	0x0801108d
 8011014:	0801108d 	.word	0x0801108d
 8011018:	08011075 	.word	0x08011075
 801101c:	0801108d 	.word	0x0801108d
 8011020:	0801108d 	.word	0x0801108d
 8011024:	0801108d 	.word	0x0801108d
 8011028:	0801108d 	.word	0x0801108d
 801102c:	0801108d 	.word	0x0801108d
 8011030:	0801108d 	.word	0x0801108d
 8011034:	0801108d 	.word	0x0801108d
 8011038:	0801107d 	.word	0x0801107d
 801103c:	0801108d 	.word	0x0801108d
 8011040:	0801108d 	.word	0x0801108d
 8011044:	0801108d 	.word	0x0801108d
 8011048:	0801108d 	.word	0x0801108d
 801104c:	0801108d 	.word	0x0801108d
 8011050:	0801108d 	.word	0x0801108d
 8011054:	0801108d 	.word	0x0801108d
 8011058:	08011085 	.word	0x08011085
 801105c:	2301      	movs	r3, #1
 801105e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011062:	e0d6      	b.n	8011212 <UART_SetConfig+0x7ae>
 8011064:	2304      	movs	r3, #4
 8011066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801106a:	e0d2      	b.n	8011212 <UART_SetConfig+0x7ae>
 801106c:	2308      	movs	r3, #8
 801106e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011072:	e0ce      	b.n	8011212 <UART_SetConfig+0x7ae>
 8011074:	2310      	movs	r3, #16
 8011076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801107a:	e0ca      	b.n	8011212 <UART_SetConfig+0x7ae>
 801107c:	2320      	movs	r3, #32
 801107e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011082:	e0c6      	b.n	8011212 <UART_SetConfig+0x7ae>
 8011084:	2340      	movs	r3, #64	; 0x40
 8011086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801108a:	e0c2      	b.n	8011212 <UART_SetConfig+0x7ae>
 801108c:	2380      	movs	r3, #128	; 0x80
 801108e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011092:	e0be      	b.n	8011212 <UART_SetConfig+0x7ae>
 8011094:	40011400 	.word	0x40011400
 8011098:	58024400 	.word	0x58024400
 801109c:	40007800 	.word	0x40007800
 80110a0:	40007c00 	.word	0x40007c00
 80110a4:	40011800 	.word	0x40011800
 80110a8:	697b      	ldr	r3, [r7, #20]
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	4aad      	ldr	r2, [pc, #692]	; (8011364 <UART_SetConfig+0x900>)
 80110ae:	4293      	cmp	r3, r2
 80110b0:	d176      	bne.n	80111a0 <UART_SetConfig+0x73c>
 80110b2:	4bad      	ldr	r3, [pc, #692]	; (8011368 <UART_SetConfig+0x904>)
 80110b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80110b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80110ba:	2b28      	cmp	r3, #40	; 0x28
 80110bc:	d86c      	bhi.n	8011198 <UART_SetConfig+0x734>
 80110be:	a201      	add	r2, pc, #4	; (adr r2, 80110c4 <UART_SetConfig+0x660>)
 80110c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110c4:	08011169 	.word	0x08011169
 80110c8:	08011199 	.word	0x08011199
 80110cc:	08011199 	.word	0x08011199
 80110d0:	08011199 	.word	0x08011199
 80110d4:	08011199 	.word	0x08011199
 80110d8:	08011199 	.word	0x08011199
 80110dc:	08011199 	.word	0x08011199
 80110e0:	08011199 	.word	0x08011199
 80110e4:	08011171 	.word	0x08011171
 80110e8:	08011199 	.word	0x08011199
 80110ec:	08011199 	.word	0x08011199
 80110f0:	08011199 	.word	0x08011199
 80110f4:	08011199 	.word	0x08011199
 80110f8:	08011199 	.word	0x08011199
 80110fc:	08011199 	.word	0x08011199
 8011100:	08011199 	.word	0x08011199
 8011104:	08011179 	.word	0x08011179
 8011108:	08011199 	.word	0x08011199
 801110c:	08011199 	.word	0x08011199
 8011110:	08011199 	.word	0x08011199
 8011114:	08011199 	.word	0x08011199
 8011118:	08011199 	.word	0x08011199
 801111c:	08011199 	.word	0x08011199
 8011120:	08011199 	.word	0x08011199
 8011124:	08011181 	.word	0x08011181
 8011128:	08011199 	.word	0x08011199
 801112c:	08011199 	.word	0x08011199
 8011130:	08011199 	.word	0x08011199
 8011134:	08011199 	.word	0x08011199
 8011138:	08011199 	.word	0x08011199
 801113c:	08011199 	.word	0x08011199
 8011140:	08011199 	.word	0x08011199
 8011144:	08011189 	.word	0x08011189
 8011148:	08011199 	.word	0x08011199
 801114c:	08011199 	.word	0x08011199
 8011150:	08011199 	.word	0x08011199
 8011154:	08011199 	.word	0x08011199
 8011158:	08011199 	.word	0x08011199
 801115c:	08011199 	.word	0x08011199
 8011160:	08011199 	.word	0x08011199
 8011164:	08011191 	.word	0x08011191
 8011168:	2301      	movs	r3, #1
 801116a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801116e:	e050      	b.n	8011212 <UART_SetConfig+0x7ae>
 8011170:	2304      	movs	r3, #4
 8011172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011176:	e04c      	b.n	8011212 <UART_SetConfig+0x7ae>
 8011178:	2308      	movs	r3, #8
 801117a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801117e:	e048      	b.n	8011212 <UART_SetConfig+0x7ae>
 8011180:	2310      	movs	r3, #16
 8011182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011186:	e044      	b.n	8011212 <UART_SetConfig+0x7ae>
 8011188:	2320      	movs	r3, #32
 801118a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801118e:	e040      	b.n	8011212 <UART_SetConfig+0x7ae>
 8011190:	2340      	movs	r3, #64	; 0x40
 8011192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011196:	e03c      	b.n	8011212 <UART_SetConfig+0x7ae>
 8011198:	2380      	movs	r3, #128	; 0x80
 801119a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801119e:	e038      	b.n	8011212 <UART_SetConfig+0x7ae>
 80111a0:	697b      	ldr	r3, [r7, #20]
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	4a71      	ldr	r2, [pc, #452]	; (801136c <UART_SetConfig+0x908>)
 80111a6:	4293      	cmp	r3, r2
 80111a8:	d130      	bne.n	801120c <UART_SetConfig+0x7a8>
 80111aa:	4b6f      	ldr	r3, [pc, #444]	; (8011368 <UART_SetConfig+0x904>)
 80111ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80111ae:	f003 0307 	and.w	r3, r3, #7
 80111b2:	2b05      	cmp	r3, #5
 80111b4:	d826      	bhi.n	8011204 <UART_SetConfig+0x7a0>
 80111b6:	a201      	add	r2, pc, #4	; (adr r2, 80111bc <UART_SetConfig+0x758>)
 80111b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111bc:	080111d5 	.word	0x080111d5
 80111c0:	080111dd 	.word	0x080111dd
 80111c4:	080111e5 	.word	0x080111e5
 80111c8:	080111ed 	.word	0x080111ed
 80111cc:	080111f5 	.word	0x080111f5
 80111d0:	080111fd 	.word	0x080111fd
 80111d4:	2302      	movs	r3, #2
 80111d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111da:	e01a      	b.n	8011212 <UART_SetConfig+0x7ae>
 80111dc:	2304      	movs	r3, #4
 80111de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111e2:	e016      	b.n	8011212 <UART_SetConfig+0x7ae>
 80111e4:	2308      	movs	r3, #8
 80111e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ea:	e012      	b.n	8011212 <UART_SetConfig+0x7ae>
 80111ec:	2310      	movs	r3, #16
 80111ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111f2:	e00e      	b.n	8011212 <UART_SetConfig+0x7ae>
 80111f4:	2320      	movs	r3, #32
 80111f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111fa:	e00a      	b.n	8011212 <UART_SetConfig+0x7ae>
 80111fc:	2340      	movs	r3, #64	; 0x40
 80111fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011202:	e006      	b.n	8011212 <UART_SetConfig+0x7ae>
 8011204:	2380      	movs	r3, #128	; 0x80
 8011206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801120a:	e002      	b.n	8011212 <UART_SetConfig+0x7ae>
 801120c:	2380      	movs	r3, #128	; 0x80
 801120e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011212:	697b      	ldr	r3, [r7, #20]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	4a55      	ldr	r2, [pc, #340]	; (801136c <UART_SetConfig+0x908>)
 8011218:	4293      	cmp	r3, r2
 801121a:	f040 80f8 	bne.w	801140e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801121e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011222:	2b20      	cmp	r3, #32
 8011224:	dc46      	bgt.n	80112b4 <UART_SetConfig+0x850>
 8011226:	2b02      	cmp	r3, #2
 8011228:	db75      	blt.n	8011316 <UART_SetConfig+0x8b2>
 801122a:	3b02      	subs	r3, #2
 801122c:	2b1e      	cmp	r3, #30
 801122e:	d872      	bhi.n	8011316 <UART_SetConfig+0x8b2>
 8011230:	a201      	add	r2, pc, #4	; (adr r2, 8011238 <UART_SetConfig+0x7d4>)
 8011232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011236:	bf00      	nop
 8011238:	080112bb 	.word	0x080112bb
 801123c:	08011317 	.word	0x08011317
 8011240:	080112c3 	.word	0x080112c3
 8011244:	08011317 	.word	0x08011317
 8011248:	08011317 	.word	0x08011317
 801124c:	08011317 	.word	0x08011317
 8011250:	080112d3 	.word	0x080112d3
 8011254:	08011317 	.word	0x08011317
 8011258:	08011317 	.word	0x08011317
 801125c:	08011317 	.word	0x08011317
 8011260:	08011317 	.word	0x08011317
 8011264:	08011317 	.word	0x08011317
 8011268:	08011317 	.word	0x08011317
 801126c:	08011317 	.word	0x08011317
 8011270:	080112e3 	.word	0x080112e3
 8011274:	08011317 	.word	0x08011317
 8011278:	08011317 	.word	0x08011317
 801127c:	08011317 	.word	0x08011317
 8011280:	08011317 	.word	0x08011317
 8011284:	08011317 	.word	0x08011317
 8011288:	08011317 	.word	0x08011317
 801128c:	08011317 	.word	0x08011317
 8011290:	08011317 	.word	0x08011317
 8011294:	08011317 	.word	0x08011317
 8011298:	08011317 	.word	0x08011317
 801129c:	08011317 	.word	0x08011317
 80112a0:	08011317 	.word	0x08011317
 80112a4:	08011317 	.word	0x08011317
 80112a8:	08011317 	.word	0x08011317
 80112ac:	08011317 	.word	0x08011317
 80112b0:	08011309 	.word	0x08011309
 80112b4:	2b40      	cmp	r3, #64	; 0x40
 80112b6:	d02a      	beq.n	801130e <UART_SetConfig+0x8aa>
 80112b8:	e02d      	b.n	8011316 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80112ba:	f7fb f8c3 	bl	800c444 <HAL_RCCEx_GetD3PCLK1Freq>
 80112be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80112c0:	e02f      	b.n	8011322 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80112c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80112c6:	4618      	mov	r0, r3
 80112c8:	f7fb f8d2 	bl	800c470 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80112cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112d0:	e027      	b.n	8011322 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80112d2:	f107 0318 	add.w	r3, r7, #24
 80112d6:	4618      	mov	r0, r3
 80112d8:	f7fb fa1e 	bl	800c718 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80112dc:	69fb      	ldr	r3, [r7, #28]
 80112de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112e0:	e01f      	b.n	8011322 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80112e2:	4b21      	ldr	r3, [pc, #132]	; (8011368 <UART_SetConfig+0x904>)
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	f003 0320 	and.w	r3, r3, #32
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d009      	beq.n	8011302 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80112ee:	4b1e      	ldr	r3, [pc, #120]	; (8011368 <UART_SetConfig+0x904>)
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	08db      	lsrs	r3, r3, #3
 80112f4:	f003 0303 	and.w	r3, r3, #3
 80112f8:	4a1d      	ldr	r2, [pc, #116]	; (8011370 <UART_SetConfig+0x90c>)
 80112fa:	fa22 f303 	lsr.w	r3, r2, r3
 80112fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011300:	e00f      	b.n	8011322 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8011302:	4b1b      	ldr	r3, [pc, #108]	; (8011370 <UART_SetConfig+0x90c>)
 8011304:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011306:	e00c      	b.n	8011322 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011308:	4b1a      	ldr	r3, [pc, #104]	; (8011374 <UART_SetConfig+0x910>)
 801130a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801130c:	e009      	b.n	8011322 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801130e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011312:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011314:	e005      	b.n	8011322 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011316:	2300      	movs	r3, #0
 8011318:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801131a:	2301      	movs	r3, #1
 801131c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011320:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011324:	2b00      	cmp	r3, #0
 8011326:	f000 81ee 	beq.w	8011706 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801132a:	697b      	ldr	r3, [r7, #20]
 801132c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801132e:	4a12      	ldr	r2, [pc, #72]	; (8011378 <UART_SetConfig+0x914>)
 8011330:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011334:	461a      	mov	r2, r3
 8011336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011338:	fbb3 f3f2 	udiv	r3, r3, r2
 801133c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801133e:	697b      	ldr	r3, [r7, #20]
 8011340:	685a      	ldr	r2, [r3, #4]
 8011342:	4613      	mov	r3, r2
 8011344:	005b      	lsls	r3, r3, #1
 8011346:	4413      	add	r3, r2
 8011348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801134a:	429a      	cmp	r2, r3
 801134c:	d305      	bcc.n	801135a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801134e:	697b      	ldr	r3, [r7, #20]
 8011350:	685b      	ldr	r3, [r3, #4]
 8011352:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011356:	429a      	cmp	r2, r3
 8011358:	d910      	bls.n	801137c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 801135a:	2301      	movs	r3, #1
 801135c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011360:	e1d1      	b.n	8011706 <UART_SetConfig+0xca2>
 8011362:	bf00      	nop
 8011364:	40011c00 	.word	0x40011c00
 8011368:	58024400 	.word	0x58024400
 801136c:	58000c00 	.word	0x58000c00
 8011370:	03d09000 	.word	0x03d09000
 8011374:	003d0900 	.word	0x003d0900
 8011378:	08017ab8 	.word	0x08017ab8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801137c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801137e:	2200      	movs	r2, #0
 8011380:	60bb      	str	r3, [r7, #8]
 8011382:	60fa      	str	r2, [r7, #12]
 8011384:	697b      	ldr	r3, [r7, #20]
 8011386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011388:	4ac0      	ldr	r2, [pc, #768]	; (801168c <UART_SetConfig+0xc28>)
 801138a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801138e:	b29b      	uxth	r3, r3
 8011390:	2200      	movs	r2, #0
 8011392:	603b      	str	r3, [r7, #0]
 8011394:	607a      	str	r2, [r7, #4]
 8011396:	e9d7 2300 	ldrd	r2, r3, [r7]
 801139a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801139e:	f7ef f81f 	bl	80003e0 <__aeabi_uldivmod>
 80113a2:	4602      	mov	r2, r0
 80113a4:	460b      	mov	r3, r1
 80113a6:	4610      	mov	r0, r2
 80113a8:	4619      	mov	r1, r3
 80113aa:	f04f 0200 	mov.w	r2, #0
 80113ae:	f04f 0300 	mov.w	r3, #0
 80113b2:	020b      	lsls	r3, r1, #8
 80113b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80113b8:	0202      	lsls	r2, r0, #8
 80113ba:	6979      	ldr	r1, [r7, #20]
 80113bc:	6849      	ldr	r1, [r1, #4]
 80113be:	0849      	lsrs	r1, r1, #1
 80113c0:	2000      	movs	r0, #0
 80113c2:	460c      	mov	r4, r1
 80113c4:	4605      	mov	r5, r0
 80113c6:	eb12 0804 	adds.w	r8, r2, r4
 80113ca:	eb43 0905 	adc.w	r9, r3, r5
 80113ce:	697b      	ldr	r3, [r7, #20]
 80113d0:	685b      	ldr	r3, [r3, #4]
 80113d2:	2200      	movs	r2, #0
 80113d4:	469a      	mov	sl, r3
 80113d6:	4693      	mov	fp, r2
 80113d8:	4652      	mov	r2, sl
 80113da:	465b      	mov	r3, fp
 80113dc:	4640      	mov	r0, r8
 80113de:	4649      	mov	r1, r9
 80113e0:	f7ee fffe 	bl	80003e0 <__aeabi_uldivmod>
 80113e4:	4602      	mov	r2, r0
 80113e6:	460b      	mov	r3, r1
 80113e8:	4613      	mov	r3, r2
 80113ea:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80113ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80113f2:	d308      	bcc.n	8011406 <UART_SetConfig+0x9a2>
 80113f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80113fa:	d204      	bcs.n	8011406 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80113fc:	697b      	ldr	r3, [r7, #20]
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011402:	60da      	str	r2, [r3, #12]
 8011404:	e17f      	b.n	8011706 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8011406:	2301      	movs	r3, #1
 8011408:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801140c:	e17b      	b.n	8011706 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801140e:	697b      	ldr	r3, [r7, #20]
 8011410:	69db      	ldr	r3, [r3, #28]
 8011412:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011416:	f040 80bd 	bne.w	8011594 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 801141a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801141e:	2b20      	cmp	r3, #32
 8011420:	dc48      	bgt.n	80114b4 <UART_SetConfig+0xa50>
 8011422:	2b00      	cmp	r3, #0
 8011424:	db7b      	blt.n	801151e <UART_SetConfig+0xaba>
 8011426:	2b20      	cmp	r3, #32
 8011428:	d879      	bhi.n	801151e <UART_SetConfig+0xaba>
 801142a:	a201      	add	r2, pc, #4	; (adr r2, 8011430 <UART_SetConfig+0x9cc>)
 801142c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011430:	080114bb 	.word	0x080114bb
 8011434:	080114c3 	.word	0x080114c3
 8011438:	0801151f 	.word	0x0801151f
 801143c:	0801151f 	.word	0x0801151f
 8011440:	080114cb 	.word	0x080114cb
 8011444:	0801151f 	.word	0x0801151f
 8011448:	0801151f 	.word	0x0801151f
 801144c:	0801151f 	.word	0x0801151f
 8011450:	080114db 	.word	0x080114db
 8011454:	0801151f 	.word	0x0801151f
 8011458:	0801151f 	.word	0x0801151f
 801145c:	0801151f 	.word	0x0801151f
 8011460:	0801151f 	.word	0x0801151f
 8011464:	0801151f 	.word	0x0801151f
 8011468:	0801151f 	.word	0x0801151f
 801146c:	0801151f 	.word	0x0801151f
 8011470:	080114eb 	.word	0x080114eb
 8011474:	0801151f 	.word	0x0801151f
 8011478:	0801151f 	.word	0x0801151f
 801147c:	0801151f 	.word	0x0801151f
 8011480:	0801151f 	.word	0x0801151f
 8011484:	0801151f 	.word	0x0801151f
 8011488:	0801151f 	.word	0x0801151f
 801148c:	0801151f 	.word	0x0801151f
 8011490:	0801151f 	.word	0x0801151f
 8011494:	0801151f 	.word	0x0801151f
 8011498:	0801151f 	.word	0x0801151f
 801149c:	0801151f 	.word	0x0801151f
 80114a0:	0801151f 	.word	0x0801151f
 80114a4:	0801151f 	.word	0x0801151f
 80114a8:	0801151f 	.word	0x0801151f
 80114ac:	0801151f 	.word	0x0801151f
 80114b0:	08011511 	.word	0x08011511
 80114b4:	2b40      	cmp	r3, #64	; 0x40
 80114b6:	d02e      	beq.n	8011516 <UART_SetConfig+0xab2>
 80114b8:	e031      	b.n	801151e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80114ba:	f7f9 f925 	bl	800a708 <HAL_RCC_GetPCLK1Freq>
 80114be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80114c0:	e033      	b.n	801152a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80114c2:	f7f9 f937 	bl	800a734 <HAL_RCC_GetPCLK2Freq>
 80114c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80114c8:	e02f      	b.n	801152a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80114ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80114ce:	4618      	mov	r0, r3
 80114d0:	f7fa ffce 	bl	800c470 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80114d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114d8:	e027      	b.n	801152a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80114da:	f107 0318 	add.w	r3, r7, #24
 80114de:	4618      	mov	r0, r3
 80114e0:	f7fb f91a 	bl	800c718 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80114e4:	69fb      	ldr	r3, [r7, #28]
 80114e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114e8:	e01f      	b.n	801152a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80114ea:	4b69      	ldr	r3, [pc, #420]	; (8011690 <UART_SetConfig+0xc2c>)
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	f003 0320 	and.w	r3, r3, #32
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d009      	beq.n	801150a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80114f6:	4b66      	ldr	r3, [pc, #408]	; (8011690 <UART_SetConfig+0xc2c>)
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	08db      	lsrs	r3, r3, #3
 80114fc:	f003 0303 	and.w	r3, r3, #3
 8011500:	4a64      	ldr	r2, [pc, #400]	; (8011694 <UART_SetConfig+0xc30>)
 8011502:	fa22 f303 	lsr.w	r3, r2, r3
 8011506:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011508:	e00f      	b.n	801152a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 801150a:	4b62      	ldr	r3, [pc, #392]	; (8011694 <UART_SetConfig+0xc30>)
 801150c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801150e:	e00c      	b.n	801152a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011510:	4b61      	ldr	r3, [pc, #388]	; (8011698 <UART_SetConfig+0xc34>)
 8011512:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011514:	e009      	b.n	801152a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801151a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801151c:	e005      	b.n	801152a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 801151e:	2300      	movs	r3, #0
 8011520:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011522:	2301      	movs	r3, #1
 8011524:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011528:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801152a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801152c:	2b00      	cmp	r3, #0
 801152e:	f000 80ea 	beq.w	8011706 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011532:	697b      	ldr	r3, [r7, #20]
 8011534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011536:	4a55      	ldr	r2, [pc, #340]	; (801168c <UART_SetConfig+0xc28>)
 8011538:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801153c:	461a      	mov	r2, r3
 801153e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011540:	fbb3 f3f2 	udiv	r3, r3, r2
 8011544:	005a      	lsls	r2, r3, #1
 8011546:	697b      	ldr	r3, [r7, #20]
 8011548:	685b      	ldr	r3, [r3, #4]
 801154a:	085b      	lsrs	r3, r3, #1
 801154c:	441a      	add	r2, r3
 801154e:	697b      	ldr	r3, [r7, #20]
 8011550:	685b      	ldr	r3, [r3, #4]
 8011552:	fbb2 f3f3 	udiv	r3, r2, r3
 8011556:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801155a:	2b0f      	cmp	r3, #15
 801155c:	d916      	bls.n	801158c <UART_SetConfig+0xb28>
 801155e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011564:	d212      	bcs.n	801158c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011568:	b29b      	uxth	r3, r3
 801156a:	f023 030f 	bic.w	r3, r3, #15
 801156e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011572:	085b      	lsrs	r3, r3, #1
 8011574:	b29b      	uxth	r3, r3
 8011576:	f003 0307 	and.w	r3, r3, #7
 801157a:	b29a      	uxth	r2, r3
 801157c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801157e:	4313      	orrs	r3, r2
 8011580:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011582:	697b      	ldr	r3, [r7, #20]
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011588:	60da      	str	r2, [r3, #12]
 801158a:	e0bc      	b.n	8011706 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 801158c:	2301      	movs	r3, #1
 801158e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011592:	e0b8      	b.n	8011706 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011594:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011598:	2b20      	cmp	r3, #32
 801159a:	dc4b      	bgt.n	8011634 <UART_SetConfig+0xbd0>
 801159c:	2b00      	cmp	r3, #0
 801159e:	f2c0 8087 	blt.w	80116b0 <UART_SetConfig+0xc4c>
 80115a2:	2b20      	cmp	r3, #32
 80115a4:	f200 8084 	bhi.w	80116b0 <UART_SetConfig+0xc4c>
 80115a8:	a201      	add	r2, pc, #4	; (adr r2, 80115b0 <UART_SetConfig+0xb4c>)
 80115aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115ae:	bf00      	nop
 80115b0:	0801163b 	.word	0x0801163b
 80115b4:	08011643 	.word	0x08011643
 80115b8:	080116b1 	.word	0x080116b1
 80115bc:	080116b1 	.word	0x080116b1
 80115c0:	0801164b 	.word	0x0801164b
 80115c4:	080116b1 	.word	0x080116b1
 80115c8:	080116b1 	.word	0x080116b1
 80115cc:	080116b1 	.word	0x080116b1
 80115d0:	0801165b 	.word	0x0801165b
 80115d4:	080116b1 	.word	0x080116b1
 80115d8:	080116b1 	.word	0x080116b1
 80115dc:	080116b1 	.word	0x080116b1
 80115e0:	080116b1 	.word	0x080116b1
 80115e4:	080116b1 	.word	0x080116b1
 80115e8:	080116b1 	.word	0x080116b1
 80115ec:	080116b1 	.word	0x080116b1
 80115f0:	0801166b 	.word	0x0801166b
 80115f4:	080116b1 	.word	0x080116b1
 80115f8:	080116b1 	.word	0x080116b1
 80115fc:	080116b1 	.word	0x080116b1
 8011600:	080116b1 	.word	0x080116b1
 8011604:	080116b1 	.word	0x080116b1
 8011608:	080116b1 	.word	0x080116b1
 801160c:	080116b1 	.word	0x080116b1
 8011610:	080116b1 	.word	0x080116b1
 8011614:	080116b1 	.word	0x080116b1
 8011618:	080116b1 	.word	0x080116b1
 801161c:	080116b1 	.word	0x080116b1
 8011620:	080116b1 	.word	0x080116b1
 8011624:	080116b1 	.word	0x080116b1
 8011628:	080116b1 	.word	0x080116b1
 801162c:	080116b1 	.word	0x080116b1
 8011630:	080116a3 	.word	0x080116a3
 8011634:	2b40      	cmp	r3, #64	; 0x40
 8011636:	d037      	beq.n	80116a8 <UART_SetConfig+0xc44>
 8011638:	e03a      	b.n	80116b0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801163a:	f7f9 f865 	bl	800a708 <HAL_RCC_GetPCLK1Freq>
 801163e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011640:	e03c      	b.n	80116bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011642:	f7f9 f877 	bl	800a734 <HAL_RCC_GetPCLK2Freq>
 8011646:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011648:	e038      	b.n	80116bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801164a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801164e:	4618      	mov	r0, r3
 8011650:	f7fa ff0e 	bl	800c470 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011656:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011658:	e030      	b.n	80116bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801165a:	f107 0318 	add.w	r3, r7, #24
 801165e:	4618      	mov	r0, r3
 8011660:	f7fb f85a 	bl	800c718 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011664:	69fb      	ldr	r3, [r7, #28]
 8011666:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011668:	e028      	b.n	80116bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801166a:	4b09      	ldr	r3, [pc, #36]	; (8011690 <UART_SetConfig+0xc2c>)
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	f003 0320 	and.w	r3, r3, #32
 8011672:	2b00      	cmp	r3, #0
 8011674:	d012      	beq.n	801169c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011676:	4b06      	ldr	r3, [pc, #24]	; (8011690 <UART_SetConfig+0xc2c>)
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	08db      	lsrs	r3, r3, #3
 801167c:	f003 0303 	and.w	r3, r3, #3
 8011680:	4a04      	ldr	r2, [pc, #16]	; (8011694 <UART_SetConfig+0xc30>)
 8011682:	fa22 f303 	lsr.w	r3, r2, r3
 8011686:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011688:	e018      	b.n	80116bc <UART_SetConfig+0xc58>
 801168a:	bf00      	nop
 801168c:	08017ab8 	.word	0x08017ab8
 8011690:	58024400 	.word	0x58024400
 8011694:	03d09000 	.word	0x03d09000
 8011698:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 801169c:	4b24      	ldr	r3, [pc, #144]	; (8011730 <UART_SetConfig+0xccc>)
 801169e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116a0:	e00c      	b.n	80116bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80116a2:	4b24      	ldr	r3, [pc, #144]	; (8011734 <UART_SetConfig+0xcd0>)
 80116a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116a6:	e009      	b.n	80116bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80116a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80116ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116ae:	e005      	b.n	80116bc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80116b0:	2300      	movs	r3, #0
 80116b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80116b4:	2301      	movs	r3, #1
 80116b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80116ba:	bf00      	nop
    }

    if (pclk != 0U)
 80116bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d021      	beq.n	8011706 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80116c2:	697b      	ldr	r3, [r7, #20]
 80116c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116c6:	4a1c      	ldr	r2, [pc, #112]	; (8011738 <UART_SetConfig+0xcd4>)
 80116c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80116cc:	461a      	mov	r2, r3
 80116ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80116d4:	697b      	ldr	r3, [r7, #20]
 80116d6:	685b      	ldr	r3, [r3, #4]
 80116d8:	085b      	lsrs	r3, r3, #1
 80116da:	441a      	add	r2, r3
 80116dc:	697b      	ldr	r3, [r7, #20]
 80116de:	685b      	ldr	r3, [r3, #4]
 80116e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80116e4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80116e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116e8:	2b0f      	cmp	r3, #15
 80116ea:	d909      	bls.n	8011700 <UART_SetConfig+0xc9c>
 80116ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80116f2:	d205      	bcs.n	8011700 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80116f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116f6:	b29a      	uxth	r2, r3
 80116f8:	697b      	ldr	r3, [r7, #20]
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	60da      	str	r2, [r3, #12]
 80116fe:	e002      	b.n	8011706 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011700:	2301      	movs	r3, #1
 8011702:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011706:	697b      	ldr	r3, [r7, #20]
 8011708:	2201      	movs	r2, #1
 801170a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801170e:	697b      	ldr	r3, [r7, #20]
 8011710:	2201      	movs	r2, #1
 8011712:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011716:	697b      	ldr	r3, [r7, #20]
 8011718:	2200      	movs	r2, #0
 801171a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801171c:	697b      	ldr	r3, [r7, #20]
 801171e:	2200      	movs	r2, #0
 8011720:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011722:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011726:	4618      	mov	r0, r3
 8011728:	3748      	adds	r7, #72	; 0x48
 801172a:	46bd      	mov	sp, r7
 801172c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011730:	03d09000 	.word	0x03d09000
 8011734:	003d0900 	.word	0x003d0900
 8011738:	08017ab8 	.word	0x08017ab8

0801173c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801173c:	b480      	push	{r7}
 801173e:	b083      	sub	sp, #12
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011748:	f003 0301 	and.w	r3, r3, #1
 801174c:	2b00      	cmp	r3, #0
 801174e:	d00a      	beq.n	8011766 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	685b      	ldr	r3, [r3, #4]
 8011756:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	430a      	orrs	r2, r1
 8011764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801176a:	f003 0302 	and.w	r3, r3, #2
 801176e:	2b00      	cmp	r3, #0
 8011770:	d00a      	beq.n	8011788 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	685b      	ldr	r3, [r3, #4]
 8011778:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	430a      	orrs	r2, r1
 8011786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801178c:	f003 0304 	and.w	r3, r3, #4
 8011790:	2b00      	cmp	r3, #0
 8011792:	d00a      	beq.n	80117aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	685b      	ldr	r3, [r3, #4]
 801179a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	430a      	orrs	r2, r1
 80117a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117ae:	f003 0308 	and.w	r3, r3, #8
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d00a      	beq.n	80117cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	685b      	ldr	r3, [r3, #4]
 80117bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	430a      	orrs	r2, r1
 80117ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117d0:	f003 0310 	and.w	r3, r3, #16
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d00a      	beq.n	80117ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	689b      	ldr	r3, [r3, #8]
 80117de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	430a      	orrs	r2, r1
 80117ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117f2:	f003 0320 	and.w	r3, r3, #32
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d00a      	beq.n	8011810 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	689b      	ldr	r3, [r3, #8]
 8011800:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	430a      	orrs	r2, r1
 801180e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011818:	2b00      	cmp	r3, #0
 801181a:	d01a      	beq.n	8011852 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	685b      	ldr	r3, [r3, #4]
 8011822:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	430a      	orrs	r2, r1
 8011830:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801183a:	d10a      	bne.n	8011852 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	685b      	ldr	r3, [r3, #4]
 8011842:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	430a      	orrs	r2, r1
 8011850:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801185a:	2b00      	cmp	r3, #0
 801185c:	d00a      	beq.n	8011874 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	685b      	ldr	r3, [r3, #4]
 8011864:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	430a      	orrs	r2, r1
 8011872:	605a      	str	r2, [r3, #4]
  }
}
 8011874:	bf00      	nop
 8011876:	370c      	adds	r7, #12
 8011878:	46bd      	mov	sp, r7
 801187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187e:	4770      	bx	lr

08011880 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011880:	b580      	push	{r7, lr}
 8011882:	b098      	sub	sp, #96	; 0x60
 8011884:	af02      	add	r7, sp, #8
 8011886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	2200      	movs	r2, #0
 801188c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011890:	f7f2 f894 	bl	80039bc <HAL_GetTick>
 8011894:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	f003 0308 	and.w	r3, r3, #8
 80118a0:	2b08      	cmp	r3, #8
 80118a2:	d12f      	bne.n	8011904 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80118a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80118a8:	9300      	str	r3, [sp, #0]
 80118aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80118ac:	2200      	movs	r2, #0
 80118ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80118b2:	6878      	ldr	r0, [r7, #4]
 80118b4:	f000 f88e 	bl	80119d4 <UART_WaitOnFlagUntilTimeout>
 80118b8:	4603      	mov	r3, r0
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d022      	beq.n	8011904 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118c6:	e853 3f00 	ldrex	r3, [r3]
 80118ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80118cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80118d2:	653b      	str	r3, [r7, #80]	; 0x50
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	461a      	mov	r2, r3
 80118da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118dc:	647b      	str	r3, [r7, #68]	; 0x44
 80118de:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80118e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80118e4:	e841 2300 	strex	r3, r2, [r1]
 80118e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80118ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d1e6      	bne.n	80118be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	2220      	movs	r2, #32
 80118f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	2200      	movs	r2, #0
 80118fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011900:	2303      	movs	r3, #3
 8011902:	e063      	b.n	80119cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	f003 0304 	and.w	r3, r3, #4
 801190e:	2b04      	cmp	r3, #4
 8011910:	d149      	bne.n	80119a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011912:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011916:	9300      	str	r3, [sp, #0]
 8011918:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801191a:	2200      	movs	r2, #0
 801191c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011920:	6878      	ldr	r0, [r7, #4]
 8011922:	f000 f857 	bl	80119d4 <UART_WaitOnFlagUntilTimeout>
 8011926:	4603      	mov	r3, r0
 8011928:	2b00      	cmp	r3, #0
 801192a:	d03c      	beq.n	80119a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011934:	e853 3f00 	ldrex	r3, [r3]
 8011938:	623b      	str	r3, [r7, #32]
   return(result);
 801193a:	6a3b      	ldr	r3, [r7, #32]
 801193c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011940:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	461a      	mov	r2, r3
 8011948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801194a:	633b      	str	r3, [r7, #48]	; 0x30
 801194c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801194e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011952:	e841 2300 	strex	r3, r2, [r1]
 8011956:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801195a:	2b00      	cmp	r3, #0
 801195c:	d1e6      	bne.n	801192c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	3308      	adds	r3, #8
 8011964:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011966:	693b      	ldr	r3, [r7, #16]
 8011968:	e853 3f00 	ldrex	r3, [r3]
 801196c:	60fb      	str	r3, [r7, #12]
   return(result);
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	f023 0301 	bic.w	r3, r3, #1
 8011974:	64bb      	str	r3, [r7, #72]	; 0x48
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	3308      	adds	r3, #8
 801197c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801197e:	61fa      	str	r2, [r7, #28]
 8011980:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011982:	69b9      	ldr	r1, [r7, #24]
 8011984:	69fa      	ldr	r2, [r7, #28]
 8011986:	e841 2300 	strex	r3, r2, [r1]
 801198a:	617b      	str	r3, [r7, #20]
   return(result);
 801198c:	697b      	ldr	r3, [r7, #20]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d1e5      	bne.n	801195e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	2220      	movs	r2, #32
 8011996:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	2200      	movs	r2, #0
 801199e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80119a2:	2303      	movs	r3, #3
 80119a4:	e012      	b.n	80119cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	2220      	movs	r2, #32
 80119aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	2220      	movs	r2, #32
 80119b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	2200      	movs	r2, #0
 80119ba:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	2200      	movs	r2, #0
 80119c0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	2200      	movs	r2, #0
 80119c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80119ca:	2300      	movs	r3, #0
}
 80119cc:	4618      	mov	r0, r3
 80119ce:	3758      	adds	r7, #88	; 0x58
 80119d0:	46bd      	mov	sp, r7
 80119d2:	bd80      	pop	{r7, pc}

080119d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b084      	sub	sp, #16
 80119d8:	af00      	add	r7, sp, #0
 80119da:	60f8      	str	r0, [r7, #12]
 80119dc:	60b9      	str	r1, [r7, #8]
 80119de:	603b      	str	r3, [r7, #0]
 80119e0:	4613      	mov	r3, r2
 80119e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80119e4:	e049      	b.n	8011a7a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80119e6:	69bb      	ldr	r3, [r7, #24]
 80119e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119ec:	d045      	beq.n	8011a7a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80119ee:	f7f1 ffe5 	bl	80039bc <HAL_GetTick>
 80119f2:	4602      	mov	r2, r0
 80119f4:	683b      	ldr	r3, [r7, #0]
 80119f6:	1ad3      	subs	r3, r2, r3
 80119f8:	69ba      	ldr	r2, [r7, #24]
 80119fa:	429a      	cmp	r2, r3
 80119fc:	d302      	bcc.n	8011a04 <UART_WaitOnFlagUntilTimeout+0x30>
 80119fe:	69bb      	ldr	r3, [r7, #24]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d101      	bne.n	8011a08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011a04:	2303      	movs	r3, #3
 8011a06:	e048      	b.n	8011a9a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	f003 0304 	and.w	r3, r3, #4
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d031      	beq.n	8011a7a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	69db      	ldr	r3, [r3, #28]
 8011a1c:	f003 0308 	and.w	r3, r3, #8
 8011a20:	2b08      	cmp	r3, #8
 8011a22:	d110      	bne.n	8011a46 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	2208      	movs	r2, #8
 8011a2a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8011a2c:	68f8      	ldr	r0, [r7, #12]
 8011a2e:	f000 f839 	bl	8011aa4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	2208      	movs	r2, #8
 8011a36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	2200      	movs	r2, #0
 8011a3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8011a42:	2301      	movs	r3, #1
 8011a44:	e029      	b.n	8011a9a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	69db      	ldr	r3, [r3, #28]
 8011a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011a50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011a54:	d111      	bne.n	8011a7a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011a5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011a60:	68f8      	ldr	r0, [r7, #12]
 8011a62:	f000 f81f 	bl	8011aa4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	2220      	movs	r2, #32
 8011a6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	2200      	movs	r2, #0
 8011a72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011a76:	2303      	movs	r3, #3
 8011a78:	e00f      	b.n	8011a9a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	69da      	ldr	r2, [r3, #28]
 8011a80:	68bb      	ldr	r3, [r7, #8]
 8011a82:	4013      	ands	r3, r2
 8011a84:	68ba      	ldr	r2, [r7, #8]
 8011a86:	429a      	cmp	r2, r3
 8011a88:	bf0c      	ite	eq
 8011a8a:	2301      	moveq	r3, #1
 8011a8c:	2300      	movne	r3, #0
 8011a8e:	b2db      	uxtb	r3, r3
 8011a90:	461a      	mov	r2, r3
 8011a92:	79fb      	ldrb	r3, [r7, #7]
 8011a94:	429a      	cmp	r2, r3
 8011a96:	d0a6      	beq.n	80119e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011a98:	2300      	movs	r3, #0
}
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	3710      	adds	r7, #16
 8011a9e:	46bd      	mov	sp, r7
 8011aa0:	bd80      	pop	{r7, pc}
	...

08011aa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011aa4:	b480      	push	{r7}
 8011aa6:	b095      	sub	sp, #84	; 0x54
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ab4:	e853 3f00 	ldrex	r3, [r3]
 8011ab8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011abc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	461a      	mov	r2, r3
 8011ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011aca:	643b      	str	r3, [r7, #64]	; 0x40
 8011acc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ace:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011ad0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011ad2:	e841 2300 	strex	r3, r2, [r1]
 8011ad6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d1e6      	bne.n	8011aac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	3308      	adds	r3, #8
 8011ae4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ae6:	6a3b      	ldr	r3, [r7, #32]
 8011ae8:	e853 3f00 	ldrex	r3, [r3]
 8011aec:	61fb      	str	r3, [r7, #28]
   return(result);
 8011aee:	69fa      	ldr	r2, [r7, #28]
 8011af0:	4b1e      	ldr	r3, [pc, #120]	; (8011b6c <UART_EndRxTransfer+0xc8>)
 8011af2:	4013      	ands	r3, r2
 8011af4:	64bb      	str	r3, [r7, #72]	; 0x48
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	3308      	adds	r3, #8
 8011afc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011afe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011b00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011b04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011b06:	e841 2300 	strex	r3, r2, [r1]
 8011b0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d1e5      	bne.n	8011ade <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b16:	2b01      	cmp	r3, #1
 8011b18:	d118      	bne.n	8011b4c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	e853 3f00 	ldrex	r3, [r3]
 8011b26:	60bb      	str	r3, [r7, #8]
   return(result);
 8011b28:	68bb      	ldr	r3, [r7, #8]
 8011b2a:	f023 0310 	bic.w	r3, r3, #16
 8011b2e:	647b      	str	r3, [r7, #68]	; 0x44
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	461a      	mov	r2, r3
 8011b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b38:	61bb      	str	r3, [r7, #24]
 8011b3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b3c:	6979      	ldr	r1, [r7, #20]
 8011b3e:	69ba      	ldr	r2, [r7, #24]
 8011b40:	e841 2300 	strex	r3, r2, [r1]
 8011b44:	613b      	str	r3, [r7, #16]
   return(result);
 8011b46:	693b      	ldr	r3, [r7, #16]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d1e6      	bne.n	8011b1a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	2220      	movs	r2, #32
 8011b50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	2200      	movs	r2, #0
 8011b58:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	2200      	movs	r2, #0
 8011b5e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011b60:	bf00      	nop
 8011b62:	3754      	adds	r7, #84	; 0x54
 8011b64:	46bd      	mov	sp, r7
 8011b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b6a:	4770      	bx	lr
 8011b6c:	effffffe 	.word	0xeffffffe

08011b70 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011b70:	b480      	push	{r7}
 8011b72:	b085      	sub	sp, #20
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011b7e:	2b01      	cmp	r3, #1
 8011b80:	d101      	bne.n	8011b86 <HAL_UARTEx_DisableFifoMode+0x16>
 8011b82:	2302      	movs	r3, #2
 8011b84:	e027      	b.n	8011bd6 <HAL_UARTEx_DisableFifoMode+0x66>
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	2201      	movs	r2, #1
 8011b8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	2224      	movs	r2, #36	; 0x24
 8011b92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	681a      	ldr	r2, [r3, #0]
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	f022 0201 	bic.w	r2, r2, #1
 8011bac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011bb4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	2200      	movs	r2, #0
 8011bba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	68fa      	ldr	r2, [r7, #12]
 8011bc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	2220      	movs	r2, #32
 8011bc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	2200      	movs	r2, #0
 8011bd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011bd4:	2300      	movs	r3, #0
}
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	3714      	adds	r7, #20
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be0:	4770      	bx	lr

08011be2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011be2:	b580      	push	{r7, lr}
 8011be4:	b084      	sub	sp, #16
 8011be6:	af00      	add	r7, sp, #0
 8011be8:	6078      	str	r0, [r7, #4]
 8011bea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011bf2:	2b01      	cmp	r3, #1
 8011bf4:	d101      	bne.n	8011bfa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011bf6:	2302      	movs	r3, #2
 8011bf8:	e02d      	b.n	8011c56 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	2201      	movs	r2, #1
 8011bfe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	2224      	movs	r2, #36	; 0x24
 8011c06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	681a      	ldr	r2, [r3, #0]
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	f022 0201 	bic.w	r2, r2, #1
 8011c20:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	689b      	ldr	r3, [r3, #8]
 8011c28:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	683a      	ldr	r2, [r7, #0]
 8011c32:	430a      	orrs	r2, r1
 8011c34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011c36:	6878      	ldr	r0, [r7, #4]
 8011c38:	f000 f850 	bl	8011cdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	68fa      	ldr	r2, [r7, #12]
 8011c42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	2220      	movs	r2, #32
 8011c48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	2200      	movs	r2, #0
 8011c50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011c54:	2300      	movs	r3, #0
}
 8011c56:	4618      	mov	r0, r3
 8011c58:	3710      	adds	r7, #16
 8011c5a:	46bd      	mov	sp, r7
 8011c5c:	bd80      	pop	{r7, pc}

08011c5e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011c5e:	b580      	push	{r7, lr}
 8011c60:	b084      	sub	sp, #16
 8011c62:	af00      	add	r7, sp, #0
 8011c64:	6078      	str	r0, [r7, #4]
 8011c66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011c6e:	2b01      	cmp	r3, #1
 8011c70:	d101      	bne.n	8011c76 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011c72:	2302      	movs	r3, #2
 8011c74:	e02d      	b.n	8011cd2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	2201      	movs	r2, #1
 8011c7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	2224      	movs	r2, #36	; 0x24
 8011c82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	681a      	ldr	r2, [r3, #0]
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	f022 0201 	bic.w	r2, r2, #1
 8011c9c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	689b      	ldr	r3, [r3, #8]
 8011ca4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	683a      	ldr	r2, [r7, #0]
 8011cae:	430a      	orrs	r2, r1
 8011cb0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011cb2:	6878      	ldr	r0, [r7, #4]
 8011cb4:	f000 f812 	bl	8011cdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	68fa      	ldr	r2, [r7, #12]
 8011cbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	2220      	movs	r2, #32
 8011cc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	2200      	movs	r2, #0
 8011ccc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011cd0:	2300      	movs	r3, #0
}
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	3710      	adds	r7, #16
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	bd80      	pop	{r7, pc}
	...

08011cdc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011cdc:	b480      	push	{r7}
 8011cde:	b085      	sub	sp, #20
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d108      	bne.n	8011cfe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	2201      	movs	r2, #1
 8011cf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	2201      	movs	r2, #1
 8011cf8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011cfc:	e031      	b.n	8011d62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011cfe:	2310      	movs	r3, #16
 8011d00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011d02:	2310      	movs	r3, #16
 8011d04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	689b      	ldr	r3, [r3, #8]
 8011d0c:	0e5b      	lsrs	r3, r3, #25
 8011d0e:	b2db      	uxtb	r3, r3
 8011d10:	f003 0307 	and.w	r3, r3, #7
 8011d14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	689b      	ldr	r3, [r3, #8]
 8011d1c:	0f5b      	lsrs	r3, r3, #29
 8011d1e:	b2db      	uxtb	r3, r3
 8011d20:	f003 0307 	and.w	r3, r3, #7
 8011d24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011d26:	7bbb      	ldrb	r3, [r7, #14]
 8011d28:	7b3a      	ldrb	r2, [r7, #12]
 8011d2a:	4911      	ldr	r1, [pc, #68]	; (8011d70 <UARTEx_SetNbDataToProcess+0x94>)
 8011d2c:	5c8a      	ldrb	r2, [r1, r2]
 8011d2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011d32:	7b3a      	ldrb	r2, [r7, #12]
 8011d34:	490f      	ldr	r1, [pc, #60]	; (8011d74 <UARTEx_SetNbDataToProcess+0x98>)
 8011d36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011d38:	fb93 f3f2 	sdiv	r3, r3, r2
 8011d3c:	b29a      	uxth	r2, r3
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011d44:	7bfb      	ldrb	r3, [r7, #15]
 8011d46:	7b7a      	ldrb	r2, [r7, #13]
 8011d48:	4909      	ldr	r1, [pc, #36]	; (8011d70 <UARTEx_SetNbDataToProcess+0x94>)
 8011d4a:	5c8a      	ldrb	r2, [r1, r2]
 8011d4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011d50:	7b7a      	ldrb	r2, [r7, #13]
 8011d52:	4908      	ldr	r1, [pc, #32]	; (8011d74 <UARTEx_SetNbDataToProcess+0x98>)
 8011d54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011d56:	fb93 f3f2 	sdiv	r3, r3, r2
 8011d5a:	b29a      	uxth	r2, r3
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011d62:	bf00      	nop
 8011d64:	3714      	adds	r7, #20
 8011d66:	46bd      	mov	sp, r7
 8011d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d6c:	4770      	bx	lr
 8011d6e:	bf00      	nop
 8011d70:	08017ad0 	.word	0x08017ad0
 8011d74:	08017ad8 	.word	0x08017ad8

08011d78 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8011d78:	b084      	sub	sp, #16
 8011d7a:	b480      	push	{r7}
 8011d7c:	b085      	sub	sp, #20
 8011d7e:	af00      	add	r7, sp, #0
 8011d80:	6078      	str	r0, [r7, #4]
 8011d82:	f107 001c 	add.w	r0, r7, #28
 8011d86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8011d8e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8011d90:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8011d92:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8011d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8011d96:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8011d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8011d9a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8011d9e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8011da0:	68fa      	ldr	r2, [r7, #12]
 8011da2:	4313      	orrs	r3, r2
 8011da4:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	685a      	ldr	r2, [r3, #4]
 8011daa:	4b07      	ldr	r3, [pc, #28]	; (8011dc8 <SDMMC_Init+0x50>)
 8011dac:	4013      	ands	r3, r2
 8011dae:	68fa      	ldr	r2, [r7, #12]
 8011db0:	431a      	orrs	r2, r3
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8011db6:	2300      	movs	r3, #0
}
 8011db8:	4618      	mov	r0, r3
 8011dba:	3714      	adds	r7, #20
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dc2:	b004      	add	sp, #16
 8011dc4:	4770      	bx	lr
 8011dc6:	bf00      	nop
 8011dc8:	ffc02c00 	.word	0xffc02c00

08011dcc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8011dcc:	b480      	push	{r7}
 8011dce:	b083      	sub	sp, #12
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011dda:	4618      	mov	r0, r3
 8011ddc:	370c      	adds	r7, #12
 8011dde:	46bd      	mov	sp, r7
 8011de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de4:	4770      	bx	lr

08011de6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8011de6:	b480      	push	{r7}
 8011de8:	b083      	sub	sp, #12
 8011dea:	af00      	add	r7, sp, #0
 8011dec:	6078      	str	r0, [r7, #4]
 8011dee:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8011df0:	683b      	ldr	r3, [r7, #0]
 8011df2:	681a      	ldr	r2, [r3, #0]
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011dfa:	2300      	movs	r3, #0
}
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	370c      	adds	r7, #12
 8011e00:	46bd      	mov	sp, r7
 8011e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e06:	4770      	bx	lr

08011e08 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8011e08:	b480      	push	{r7}
 8011e0a:	b083      	sub	sp, #12
 8011e0c:	af00      	add	r7, sp, #0
 8011e0e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	f043 0203 	orr.w	r2, r3, #3
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8011e1c:	2300      	movs	r3, #0
}
 8011e1e:	4618      	mov	r0, r3
 8011e20:	370c      	adds	r7, #12
 8011e22:	46bd      	mov	sp, r7
 8011e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e28:	4770      	bx	lr

08011e2a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8011e2a:	b480      	push	{r7}
 8011e2c:	b083      	sub	sp, #12
 8011e2e:	af00      	add	r7, sp, #0
 8011e30:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	f003 0303 	and.w	r3, r3, #3
}
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	370c      	adds	r7, #12
 8011e3e:	46bd      	mov	sp, r7
 8011e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e44:	4770      	bx	lr
	...

08011e48 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8011e48:	b480      	push	{r7}
 8011e4a:	b085      	sub	sp, #20
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	6078      	str	r0, [r7, #4]
 8011e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011e52:	2300      	movs	r3, #0
 8011e54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8011e56:	683b      	ldr	r3, [r7, #0]
 8011e58:	681a      	ldr	r2, [r3, #0]
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011e5e:	683b      	ldr	r3, [r7, #0]
 8011e60:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8011e62:	683b      	ldr	r3, [r7, #0]
 8011e64:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011e66:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8011e68:	683b      	ldr	r3, [r7, #0]
 8011e6a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8011e6c:	431a      	orrs	r2, r3
                       Command->CPSM);
 8011e6e:	683b      	ldr	r3, [r7, #0]
 8011e70:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8011e72:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011e74:	68fa      	ldr	r2, [r7, #12]
 8011e76:	4313      	orrs	r3, r2
 8011e78:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	68da      	ldr	r2, [r3, #12]
 8011e7e:	4b06      	ldr	r3, [pc, #24]	; (8011e98 <SDMMC_SendCommand+0x50>)
 8011e80:	4013      	ands	r3, r2
 8011e82:	68fa      	ldr	r2, [r7, #12]
 8011e84:	431a      	orrs	r2, r3
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011e8a:	2300      	movs	r3, #0
}
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	3714      	adds	r7, #20
 8011e90:	46bd      	mov	sp, r7
 8011e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e96:	4770      	bx	lr
 8011e98:	fffee0c0 	.word	0xfffee0c0

08011e9c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8011e9c:	b480      	push	{r7}
 8011e9e:	b083      	sub	sp, #12
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	691b      	ldr	r3, [r3, #16]
 8011ea8:	b2db      	uxtb	r3, r3
}
 8011eaa:	4618      	mov	r0, r3
 8011eac:	370c      	adds	r7, #12
 8011eae:	46bd      	mov	sp, r7
 8011eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb4:	4770      	bx	lr

08011eb6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8011eb6:	b480      	push	{r7}
 8011eb8:	b085      	sub	sp, #20
 8011eba:	af00      	add	r7, sp, #0
 8011ebc:	6078      	str	r0, [r7, #4]
 8011ebe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	3314      	adds	r3, #20
 8011ec4:	461a      	mov	r2, r3
 8011ec6:	683b      	ldr	r3, [r7, #0]
 8011ec8:	4413      	add	r3, r2
 8011eca:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	681b      	ldr	r3, [r3, #0]
}
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	3714      	adds	r7, #20
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eda:	4770      	bx	lr

08011edc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8011edc:	b480      	push	{r7}
 8011ede:	b085      	sub	sp, #20
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	6078      	str	r0, [r7, #4]
 8011ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8011eea:	683b      	ldr	r3, [r7, #0]
 8011eec:	681a      	ldr	r2, [r3, #0]
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8011ef2:	683b      	ldr	r3, [r7, #0]
 8011ef4:	685a      	ldr	r2, [r3, #4]
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011efa:	683b      	ldr	r3, [r7, #0]
 8011efc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8011efe:	683b      	ldr	r3, [r7, #0]
 8011f00:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011f02:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8011f04:	683b      	ldr	r3, [r7, #0]
 8011f06:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8011f08:	431a      	orrs	r2, r3
                       Data->DPSM);
 8011f0a:	683b      	ldr	r3, [r7, #0]
 8011f0c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8011f0e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011f10:	68fa      	ldr	r2, [r7, #12]
 8011f12:	4313      	orrs	r3, r2
 8011f14:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f1a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	431a      	orrs	r2, r3
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8011f26:	2300      	movs	r3, #0

}
 8011f28:	4618      	mov	r0, r3
 8011f2a:	3714      	adds	r7, #20
 8011f2c:	46bd      	mov	sp, r7
 8011f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f32:	4770      	bx	lr

08011f34 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8011f34:	b580      	push	{r7, lr}
 8011f36:	b088      	sub	sp, #32
 8011f38:	af00      	add	r7, sp, #0
 8011f3a:	6078      	str	r0, [r7, #4]
 8011f3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8011f3e:	683b      	ldr	r3, [r7, #0]
 8011f40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8011f42:	2310      	movs	r3, #16
 8011f44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011f46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011f4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011f4c:	2300      	movs	r3, #0
 8011f4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011f50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011f54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011f56:	f107 0308 	add.w	r3, r7, #8
 8011f5a:	4619      	mov	r1, r3
 8011f5c:	6878      	ldr	r0, [r7, #4]
 8011f5e:	f7ff ff73 	bl	8011e48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8011f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f66:	2110      	movs	r1, #16
 8011f68:	6878      	ldr	r0, [r7, #4]
 8011f6a:	f000 fa5f 	bl	801242c <SDMMC_GetCmdResp1>
 8011f6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f70:	69fb      	ldr	r3, [r7, #28]
}
 8011f72:	4618      	mov	r0, r3
 8011f74:	3720      	adds	r7, #32
 8011f76:	46bd      	mov	sp, r7
 8011f78:	bd80      	pop	{r7, pc}

08011f7a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011f7a:	b580      	push	{r7, lr}
 8011f7c:	b088      	sub	sp, #32
 8011f7e:	af00      	add	r7, sp, #0
 8011f80:	6078      	str	r0, [r7, #4]
 8011f82:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011f84:	683b      	ldr	r3, [r7, #0]
 8011f86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8011f88:	2311      	movs	r3, #17
 8011f8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011f8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011f90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011f92:	2300      	movs	r3, #0
 8011f94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011f96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011f9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011f9c:	f107 0308 	add.w	r3, r7, #8
 8011fa0:	4619      	mov	r1, r3
 8011fa2:	6878      	ldr	r0, [r7, #4]
 8011fa4:	f7ff ff50 	bl	8011e48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8011fac:	2111      	movs	r1, #17
 8011fae:	6878      	ldr	r0, [r7, #4]
 8011fb0:	f000 fa3c 	bl	801242c <SDMMC_GetCmdResp1>
 8011fb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011fb6:	69fb      	ldr	r3, [r7, #28]
}
 8011fb8:	4618      	mov	r0, r3
 8011fba:	3720      	adds	r7, #32
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	bd80      	pop	{r7, pc}

08011fc0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011fc0:	b580      	push	{r7, lr}
 8011fc2:	b088      	sub	sp, #32
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	6078      	str	r0, [r7, #4]
 8011fc8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011fca:	683b      	ldr	r3, [r7, #0]
 8011fcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8011fce:	2312      	movs	r3, #18
 8011fd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011fd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011fd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011fd8:	2300      	movs	r3, #0
 8011fda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011fdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011fe0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011fe2:	f107 0308 	add.w	r3, r7, #8
 8011fe6:	4619      	mov	r1, r3
 8011fe8:	6878      	ldr	r0, [r7, #4]
 8011fea:	f7ff ff2d 	bl	8011e48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8011ff2:	2112      	movs	r1, #18
 8011ff4:	6878      	ldr	r0, [r7, #4]
 8011ff6:	f000 fa19 	bl	801242c <SDMMC_GetCmdResp1>
 8011ffa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011ffc:	69fb      	ldr	r3, [r7, #28]
}
 8011ffe:	4618      	mov	r0, r3
 8012000:	3720      	adds	r7, #32
 8012002:	46bd      	mov	sp, r7
 8012004:	bd80      	pop	{r7, pc}

08012006 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012006:	b580      	push	{r7, lr}
 8012008:	b088      	sub	sp, #32
 801200a:	af00      	add	r7, sp, #0
 801200c:	6078      	str	r0, [r7, #4]
 801200e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012010:	683b      	ldr	r3, [r7, #0]
 8012012:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8012014:	2318      	movs	r3, #24
 8012016:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012018:	f44f 7380 	mov.w	r3, #256	; 0x100
 801201c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801201e:	2300      	movs	r3, #0
 8012020:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012022:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012026:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012028:	f107 0308 	add.w	r3, r7, #8
 801202c:	4619      	mov	r1, r3
 801202e:	6878      	ldr	r0, [r7, #4]
 8012030:	f7ff ff0a 	bl	8011e48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012034:	f241 3288 	movw	r2, #5000	; 0x1388
 8012038:	2118      	movs	r1, #24
 801203a:	6878      	ldr	r0, [r7, #4]
 801203c:	f000 f9f6 	bl	801242c <SDMMC_GetCmdResp1>
 8012040:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012042:	69fb      	ldr	r3, [r7, #28]
}
 8012044:	4618      	mov	r0, r3
 8012046:	3720      	adds	r7, #32
 8012048:	46bd      	mov	sp, r7
 801204a:	bd80      	pop	{r7, pc}

0801204c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801204c:	b580      	push	{r7, lr}
 801204e:	b088      	sub	sp, #32
 8012050:	af00      	add	r7, sp, #0
 8012052:	6078      	str	r0, [r7, #4]
 8012054:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012056:	683b      	ldr	r3, [r7, #0]
 8012058:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801205a:	2319      	movs	r3, #25
 801205c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801205e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012062:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012064:	2300      	movs	r3, #0
 8012066:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801206c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801206e:	f107 0308 	add.w	r3, r7, #8
 8012072:	4619      	mov	r1, r3
 8012074:	6878      	ldr	r0, [r7, #4]
 8012076:	f7ff fee7 	bl	8011e48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801207a:	f241 3288 	movw	r2, #5000	; 0x1388
 801207e:	2119      	movs	r1, #25
 8012080:	6878      	ldr	r0, [r7, #4]
 8012082:	f000 f9d3 	bl	801242c <SDMMC_GetCmdResp1>
 8012086:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012088:	69fb      	ldr	r3, [r7, #28]
}
 801208a:	4618      	mov	r0, r3
 801208c:	3720      	adds	r7, #32
 801208e:	46bd      	mov	sp, r7
 8012090:	bd80      	pop	{r7, pc}
	...

08012094 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8012094:	b580      	push	{r7, lr}
 8012096:	b088      	sub	sp, #32
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 801209c:	2300      	movs	r3, #0
 801209e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80120a0:	230c      	movs	r3, #12
 80120a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80120a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80120a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80120aa:	2300      	movs	r3, #0
 80120ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80120ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80120b2:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	68db      	ldr	r3, [r3, #12]
 80120b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	68db      	ldr	r3, [r3, #12]
 80120c4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80120cc:	f107 0308 	add.w	r3, r7, #8
 80120d0:	4619      	mov	r1, r3
 80120d2:	6878      	ldr	r0, [r7, #4]
 80120d4:	f7ff feb8 	bl	8011e48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80120d8:	4a0b      	ldr	r2, [pc, #44]	; (8012108 <SDMMC_CmdStopTransfer+0x74>)
 80120da:	210c      	movs	r1, #12
 80120dc:	6878      	ldr	r0, [r7, #4]
 80120de:	f000 f9a5 	bl	801242c <SDMMC_GetCmdResp1>
 80120e2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	68db      	ldr	r3, [r3, #12]
 80120e8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80120f0:	69fb      	ldr	r3, [r7, #28]
 80120f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80120f6:	d101      	bne.n	80120fc <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80120f8:	2300      	movs	r3, #0
 80120fa:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80120fc:	69fb      	ldr	r3, [r7, #28]
}
 80120fe:	4618      	mov	r0, r3
 8012100:	3720      	adds	r7, #32
 8012102:	46bd      	mov	sp, r7
 8012104:	bd80      	pop	{r7, pc}
 8012106:	bf00      	nop
 8012108:	05f5e100 	.word	0x05f5e100

0801210c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 801210c:	b580      	push	{r7, lr}
 801210e:	b088      	sub	sp, #32
 8012110:	af00      	add	r7, sp, #0
 8012112:	6078      	str	r0, [r7, #4]
 8012114:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8012116:	683b      	ldr	r3, [r7, #0]
 8012118:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 801211a:	2307      	movs	r3, #7
 801211c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801211e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012122:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012124:	2300      	movs	r3, #0
 8012126:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801212c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801212e:	f107 0308 	add.w	r3, r7, #8
 8012132:	4619      	mov	r1, r3
 8012134:	6878      	ldr	r0, [r7, #4]
 8012136:	f7ff fe87 	bl	8011e48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 801213a:	f241 3288 	movw	r2, #5000	; 0x1388
 801213e:	2107      	movs	r1, #7
 8012140:	6878      	ldr	r0, [r7, #4]
 8012142:	f000 f973 	bl	801242c <SDMMC_GetCmdResp1>
 8012146:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012148:	69fb      	ldr	r3, [r7, #28]
}
 801214a:	4618      	mov	r0, r3
 801214c:	3720      	adds	r7, #32
 801214e:	46bd      	mov	sp, r7
 8012150:	bd80      	pop	{r7, pc}

08012152 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8012152:	b580      	push	{r7, lr}
 8012154:	b088      	sub	sp, #32
 8012156:	af00      	add	r7, sp, #0
 8012158:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801215a:	2300      	movs	r3, #0
 801215c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801215e:	2300      	movs	r3, #0
 8012160:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8012162:	2300      	movs	r3, #0
 8012164:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012166:	2300      	movs	r3, #0
 8012168:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801216a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801216e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012170:	f107 0308 	add.w	r3, r7, #8
 8012174:	4619      	mov	r1, r3
 8012176:	6878      	ldr	r0, [r7, #4]
 8012178:	f7ff fe66 	bl	8011e48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 801217c:	6878      	ldr	r0, [r7, #4]
 801217e:	f000 fb97 	bl	80128b0 <SDMMC_GetCmdError>
 8012182:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012184:	69fb      	ldr	r3, [r7, #28]
}
 8012186:	4618      	mov	r0, r3
 8012188:	3720      	adds	r7, #32
 801218a:	46bd      	mov	sp, r7
 801218c:	bd80      	pop	{r7, pc}

0801218e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801218e:	b580      	push	{r7, lr}
 8012190:	b088      	sub	sp, #32
 8012192:	af00      	add	r7, sp, #0
 8012194:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8012196:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801219a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 801219c:	2308      	movs	r3, #8
 801219e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80121a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80121a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80121a6:	2300      	movs	r3, #0
 80121a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80121aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80121ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80121b0:	f107 0308 	add.w	r3, r7, #8
 80121b4:	4619      	mov	r1, r3
 80121b6:	6878      	ldr	r0, [r7, #4]
 80121b8:	f7ff fe46 	bl	8011e48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80121bc:	6878      	ldr	r0, [r7, #4]
 80121be:	f000 fb29 	bl	8012814 <SDMMC_GetCmdResp7>
 80121c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80121c4:	69fb      	ldr	r3, [r7, #28]
}
 80121c6:	4618      	mov	r0, r3
 80121c8:	3720      	adds	r7, #32
 80121ca:	46bd      	mov	sp, r7
 80121cc:	bd80      	pop	{r7, pc}

080121ce <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80121ce:	b580      	push	{r7, lr}
 80121d0:	b088      	sub	sp, #32
 80121d2:	af00      	add	r7, sp, #0
 80121d4:	6078      	str	r0, [r7, #4]
 80121d6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80121d8:	683b      	ldr	r3, [r7, #0]
 80121da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80121dc:	2337      	movs	r3, #55	; 0x37
 80121de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80121e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80121e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80121e6:	2300      	movs	r3, #0
 80121e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80121ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80121ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80121f0:	f107 0308 	add.w	r3, r7, #8
 80121f4:	4619      	mov	r1, r3
 80121f6:	6878      	ldr	r0, [r7, #4]
 80121f8:	f7ff fe26 	bl	8011e48 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80121fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8012200:	2137      	movs	r1, #55	; 0x37
 8012202:	6878      	ldr	r0, [r7, #4]
 8012204:	f000 f912 	bl	801242c <SDMMC_GetCmdResp1>
 8012208:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801220a:	69fb      	ldr	r3, [r7, #28]
}
 801220c:	4618      	mov	r0, r3
 801220e:	3720      	adds	r7, #32
 8012210:	46bd      	mov	sp, r7
 8012212:	bd80      	pop	{r7, pc}

08012214 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012214:	b580      	push	{r7, lr}
 8012216:	b088      	sub	sp, #32
 8012218:	af00      	add	r7, sp, #0
 801221a:	6078      	str	r0, [r7, #4]
 801221c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801221e:	683b      	ldr	r3, [r7, #0]
 8012220:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8012222:	2329      	movs	r3, #41	; 0x29
 8012224:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012226:	f44f 7380 	mov.w	r3, #256	; 0x100
 801222a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801222c:	2300      	movs	r3, #0
 801222e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012230:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012234:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012236:	f107 0308 	add.w	r3, r7, #8
 801223a:	4619      	mov	r1, r3
 801223c:	6878      	ldr	r0, [r7, #4]
 801223e:	f7ff fe03 	bl	8011e48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8012242:	6878      	ldr	r0, [r7, #4]
 8012244:	f000 fa2e 	bl	80126a4 <SDMMC_GetCmdResp3>
 8012248:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801224a:	69fb      	ldr	r3, [r7, #28]
}
 801224c:	4618      	mov	r0, r3
 801224e:	3720      	adds	r7, #32
 8012250:	46bd      	mov	sp, r7
 8012252:	bd80      	pop	{r7, pc}

08012254 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8012254:	b580      	push	{r7, lr}
 8012256:	b088      	sub	sp, #32
 8012258:	af00      	add	r7, sp, #0
 801225a:	6078      	str	r0, [r7, #4]
 801225c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801225e:	683b      	ldr	r3, [r7, #0]
 8012260:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8012262:	2306      	movs	r3, #6
 8012264:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012266:	f44f 7380 	mov.w	r3, #256	; 0x100
 801226a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801226c:	2300      	movs	r3, #0
 801226e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012270:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012274:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012276:	f107 0308 	add.w	r3, r7, #8
 801227a:	4619      	mov	r1, r3
 801227c:	6878      	ldr	r0, [r7, #4]
 801227e:	f7ff fde3 	bl	8011e48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8012282:	f241 3288 	movw	r2, #5000	; 0x1388
 8012286:	2106      	movs	r1, #6
 8012288:	6878      	ldr	r0, [r7, #4]
 801228a:	f000 f8cf 	bl	801242c <SDMMC_GetCmdResp1>
 801228e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012290:	69fb      	ldr	r3, [r7, #28]
}
 8012292:	4618      	mov	r0, r3
 8012294:	3720      	adds	r7, #32
 8012296:	46bd      	mov	sp, r7
 8012298:	bd80      	pop	{r7, pc}

0801229a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801229a:	b580      	push	{r7, lr}
 801229c:	b088      	sub	sp, #32
 801229e:	af00      	add	r7, sp, #0
 80122a0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80122a2:	2300      	movs	r3, #0
 80122a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80122a6:	2333      	movs	r3, #51	; 0x33
 80122a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80122aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80122ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80122b0:	2300      	movs	r3, #0
 80122b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80122b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80122b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80122ba:	f107 0308 	add.w	r3, r7, #8
 80122be:	4619      	mov	r1, r3
 80122c0:	6878      	ldr	r0, [r7, #4]
 80122c2:	f7ff fdc1 	bl	8011e48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80122c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80122ca:	2133      	movs	r1, #51	; 0x33
 80122cc:	6878      	ldr	r0, [r7, #4]
 80122ce:	f000 f8ad 	bl	801242c <SDMMC_GetCmdResp1>
 80122d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80122d4:	69fb      	ldr	r3, [r7, #28]
}
 80122d6:	4618      	mov	r0, r3
 80122d8:	3720      	adds	r7, #32
 80122da:	46bd      	mov	sp, r7
 80122dc:	bd80      	pop	{r7, pc}

080122de <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80122de:	b580      	push	{r7, lr}
 80122e0:	b088      	sub	sp, #32
 80122e2:	af00      	add	r7, sp, #0
 80122e4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80122e6:	2300      	movs	r3, #0
 80122e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80122ea:	2302      	movs	r3, #2
 80122ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80122ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80122f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80122f4:	2300      	movs	r3, #0
 80122f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80122f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80122fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80122fe:	f107 0308 	add.w	r3, r7, #8
 8012302:	4619      	mov	r1, r3
 8012304:	6878      	ldr	r0, [r7, #4]
 8012306:	f7ff fd9f 	bl	8011e48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801230a:	6878      	ldr	r0, [r7, #4]
 801230c:	f000 f980 	bl	8012610 <SDMMC_GetCmdResp2>
 8012310:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012312:	69fb      	ldr	r3, [r7, #28]
}
 8012314:	4618      	mov	r0, r3
 8012316:	3720      	adds	r7, #32
 8012318:	46bd      	mov	sp, r7
 801231a:	bd80      	pop	{r7, pc}

0801231c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801231c:	b580      	push	{r7, lr}
 801231e:	b088      	sub	sp, #32
 8012320:	af00      	add	r7, sp, #0
 8012322:	6078      	str	r0, [r7, #4]
 8012324:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8012326:	683b      	ldr	r3, [r7, #0]
 8012328:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801232a:	2309      	movs	r3, #9
 801232c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801232e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012332:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012334:	2300      	movs	r3, #0
 8012336:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801233c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801233e:	f107 0308 	add.w	r3, r7, #8
 8012342:	4619      	mov	r1, r3
 8012344:	6878      	ldr	r0, [r7, #4]
 8012346:	f7ff fd7f 	bl	8011e48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801234a:	6878      	ldr	r0, [r7, #4]
 801234c:	f000 f960 	bl	8012610 <SDMMC_GetCmdResp2>
 8012350:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012352:	69fb      	ldr	r3, [r7, #28]
}
 8012354:	4618      	mov	r0, r3
 8012356:	3720      	adds	r7, #32
 8012358:	46bd      	mov	sp, r7
 801235a:	bd80      	pop	{r7, pc}

0801235c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 801235c:	b580      	push	{r7, lr}
 801235e:	b088      	sub	sp, #32
 8012360:	af00      	add	r7, sp, #0
 8012362:	6078      	str	r0, [r7, #4]
 8012364:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8012366:	2300      	movs	r3, #0
 8012368:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801236a:	2303      	movs	r3, #3
 801236c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801236e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012372:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012374:	2300      	movs	r3, #0
 8012376:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012378:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801237c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801237e:	f107 0308 	add.w	r3, r7, #8
 8012382:	4619      	mov	r1, r3
 8012384:	6878      	ldr	r0, [r7, #4]
 8012386:	f7ff fd5f 	bl	8011e48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801238a:	683a      	ldr	r2, [r7, #0]
 801238c:	2103      	movs	r1, #3
 801238e:	6878      	ldr	r0, [r7, #4]
 8012390:	f000 f9c8 	bl	8012724 <SDMMC_GetCmdResp6>
 8012394:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012396:	69fb      	ldr	r3, [r7, #28]
}
 8012398:	4618      	mov	r0, r3
 801239a:	3720      	adds	r7, #32
 801239c:	46bd      	mov	sp, r7
 801239e:	bd80      	pop	{r7, pc}

080123a0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80123a0:	b580      	push	{r7, lr}
 80123a2:	b088      	sub	sp, #32
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	6078      	str	r0, [r7, #4]
 80123a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80123aa:	683b      	ldr	r3, [r7, #0]
 80123ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80123ae:	230d      	movs	r3, #13
 80123b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80123b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80123b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80123b8:	2300      	movs	r3, #0
 80123ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80123bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80123c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80123c2:	f107 0308 	add.w	r3, r7, #8
 80123c6:	4619      	mov	r1, r3
 80123c8:	6878      	ldr	r0, [r7, #4]
 80123ca:	f7ff fd3d 	bl	8011e48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80123ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80123d2:	210d      	movs	r1, #13
 80123d4:	6878      	ldr	r0, [r7, #4]
 80123d6:	f000 f829 	bl	801242c <SDMMC_GetCmdResp1>
 80123da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80123dc:	69fb      	ldr	r3, [r7, #28]
}
 80123de:	4618      	mov	r0, r3
 80123e0:	3720      	adds	r7, #32
 80123e2:	46bd      	mov	sp, r7
 80123e4:	bd80      	pop	{r7, pc}

080123e6 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80123e6:	b580      	push	{r7, lr}
 80123e8:	b088      	sub	sp, #32
 80123ea:	af00      	add	r7, sp, #0
 80123ec:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80123ee:	2300      	movs	r3, #0
 80123f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80123f2:	230d      	movs	r3, #13
 80123f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80123f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80123fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80123fc:	2300      	movs	r3, #0
 80123fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012404:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012406:	f107 0308 	add.w	r3, r7, #8
 801240a:	4619      	mov	r1, r3
 801240c:	6878      	ldr	r0, [r7, #4]
 801240e:	f7ff fd1b 	bl	8011e48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8012412:	f241 3288 	movw	r2, #5000	; 0x1388
 8012416:	210d      	movs	r1, #13
 8012418:	6878      	ldr	r0, [r7, #4]
 801241a:	f000 f807 	bl	801242c <SDMMC_GetCmdResp1>
 801241e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012420:	69fb      	ldr	r3, [r7, #28]
}
 8012422:	4618      	mov	r0, r3
 8012424:	3720      	adds	r7, #32
 8012426:	46bd      	mov	sp, r7
 8012428:	bd80      	pop	{r7, pc}
	...

0801242c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 801242c:	b580      	push	{r7, lr}
 801242e:	b088      	sub	sp, #32
 8012430:	af00      	add	r7, sp, #0
 8012432:	60f8      	str	r0, [r7, #12]
 8012434:	460b      	mov	r3, r1
 8012436:	607a      	str	r2, [r7, #4]
 8012438:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801243a:	4b70      	ldr	r3, [pc, #448]	; (80125fc <SDMMC_GetCmdResp1+0x1d0>)
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	4a70      	ldr	r2, [pc, #448]	; (8012600 <SDMMC_GetCmdResp1+0x1d4>)
 8012440:	fba2 2303 	umull	r2, r3, r2, r3
 8012444:	0a5a      	lsrs	r2, r3, #9
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	fb02 f303 	mul.w	r3, r2, r3
 801244c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801244e:	69fb      	ldr	r3, [r7, #28]
 8012450:	1e5a      	subs	r2, r3, #1
 8012452:	61fa      	str	r2, [r7, #28]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d102      	bne.n	801245e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012458:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801245c:	e0c9      	b.n	80125f2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012462:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8012464:	69ba      	ldr	r2, [r7, #24]
 8012466:	4b67      	ldr	r3, [pc, #412]	; (8012604 <SDMMC_GetCmdResp1+0x1d8>)
 8012468:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801246a:	2b00      	cmp	r3, #0
 801246c:	d0ef      	beq.n	801244e <SDMMC_GetCmdResp1+0x22>
 801246e:	69bb      	ldr	r3, [r7, #24]
 8012470:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012474:	2b00      	cmp	r3, #0
 8012476:	d1ea      	bne.n	801244e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801247c:	f003 0304 	and.w	r3, r3, #4
 8012480:	2b00      	cmp	r3, #0
 8012482:	d004      	beq.n	801248e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	2204      	movs	r2, #4
 8012488:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801248a:	2304      	movs	r3, #4
 801248c:	e0b1      	b.n	80125f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012492:	f003 0301 	and.w	r3, r3, #1
 8012496:	2b00      	cmp	r3, #0
 8012498:	d004      	beq.n	80124a4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	2201      	movs	r2, #1
 801249e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80124a0:	2301      	movs	r3, #1
 80124a2:	e0a6      	b.n	80125f2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	4a58      	ldr	r2, [pc, #352]	; (8012608 <SDMMC_GetCmdResp1+0x1dc>)
 80124a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80124aa:	68f8      	ldr	r0, [r7, #12]
 80124ac:	f7ff fcf6 	bl	8011e9c <SDMMC_GetCommandResponse>
 80124b0:	4603      	mov	r3, r0
 80124b2:	461a      	mov	r2, r3
 80124b4:	7afb      	ldrb	r3, [r7, #11]
 80124b6:	4293      	cmp	r3, r2
 80124b8:	d001      	beq.n	80124be <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80124ba:	2301      	movs	r3, #1
 80124bc:	e099      	b.n	80125f2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80124be:	2100      	movs	r1, #0
 80124c0:	68f8      	ldr	r0, [r7, #12]
 80124c2:	f7ff fcf8 	bl	8011eb6 <SDMMC_GetResponse>
 80124c6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80124c8:	697a      	ldr	r2, [r7, #20]
 80124ca:	4b50      	ldr	r3, [pc, #320]	; (801260c <SDMMC_GetCmdResp1+0x1e0>)
 80124cc:	4013      	ands	r3, r2
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d101      	bne.n	80124d6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80124d2:	2300      	movs	r3, #0
 80124d4:	e08d      	b.n	80125f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80124d6:	697b      	ldr	r3, [r7, #20]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	da02      	bge.n	80124e2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80124dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80124e0:	e087      	b.n	80125f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80124e2:	697b      	ldr	r3, [r7, #20]
 80124e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d001      	beq.n	80124f0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80124ec:	2340      	movs	r3, #64	; 0x40
 80124ee:	e080      	b.n	80125f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80124f0:	697b      	ldr	r3, [r7, #20]
 80124f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d001      	beq.n	80124fe <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80124fa:	2380      	movs	r3, #128	; 0x80
 80124fc:	e079      	b.n	80125f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80124fe:	697b      	ldr	r3, [r7, #20]
 8012500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012504:	2b00      	cmp	r3, #0
 8012506:	d002      	beq.n	801250e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012508:	f44f 7380 	mov.w	r3, #256	; 0x100
 801250c:	e071      	b.n	80125f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801250e:	697b      	ldr	r3, [r7, #20]
 8012510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012514:	2b00      	cmp	r3, #0
 8012516:	d002      	beq.n	801251e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012518:	f44f 7300 	mov.w	r3, #512	; 0x200
 801251c:	e069      	b.n	80125f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801251e:	697b      	ldr	r3, [r7, #20]
 8012520:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012524:	2b00      	cmp	r3, #0
 8012526:	d002      	beq.n	801252e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012528:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801252c:	e061      	b.n	80125f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801252e:	697b      	ldr	r3, [r7, #20]
 8012530:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012534:	2b00      	cmp	r3, #0
 8012536:	d002      	beq.n	801253e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012538:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801253c:	e059      	b.n	80125f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801253e:	697b      	ldr	r3, [r7, #20]
 8012540:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012544:	2b00      	cmp	r3, #0
 8012546:	d002      	beq.n	801254e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012548:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801254c:	e051      	b.n	80125f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801254e:	697b      	ldr	r3, [r7, #20]
 8012550:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012554:	2b00      	cmp	r3, #0
 8012556:	d002      	beq.n	801255e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012558:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801255c:	e049      	b.n	80125f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801255e:	697b      	ldr	r3, [r7, #20]
 8012560:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012564:	2b00      	cmp	r3, #0
 8012566:	d002      	beq.n	801256e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012568:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801256c:	e041      	b.n	80125f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801256e:	697b      	ldr	r3, [r7, #20]
 8012570:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012574:	2b00      	cmp	r3, #0
 8012576:	d002      	beq.n	801257e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8012578:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801257c:	e039      	b.n	80125f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801257e:	697b      	ldr	r3, [r7, #20]
 8012580:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012584:	2b00      	cmp	r3, #0
 8012586:	d002      	beq.n	801258e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012588:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801258c:	e031      	b.n	80125f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801258e:	697b      	ldr	r3, [r7, #20]
 8012590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012594:	2b00      	cmp	r3, #0
 8012596:	d002      	beq.n	801259e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012598:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801259c:	e029      	b.n	80125f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801259e:	697b      	ldr	r3, [r7, #20]
 80125a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d002      	beq.n	80125ae <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80125a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80125ac:	e021      	b.n	80125f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80125ae:	697b      	ldr	r3, [r7, #20]
 80125b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d002      	beq.n	80125be <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80125b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80125bc:	e019      	b.n	80125f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80125be:	697b      	ldr	r3, [r7, #20]
 80125c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d002      	beq.n	80125ce <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80125c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80125cc:	e011      	b.n	80125f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80125ce:	697b      	ldr	r3, [r7, #20]
 80125d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d002      	beq.n	80125de <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80125d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80125dc:	e009      	b.n	80125f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80125de:	697b      	ldr	r3, [r7, #20]
 80125e0:	f003 0308 	and.w	r3, r3, #8
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d002      	beq.n	80125ee <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80125e8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80125ec:	e001      	b.n	80125f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80125ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80125f2:	4618      	mov	r0, r3
 80125f4:	3720      	adds	r7, #32
 80125f6:	46bd      	mov	sp, r7
 80125f8:	bd80      	pop	{r7, pc}
 80125fa:	bf00      	nop
 80125fc:	24000000 	.word	0x24000000
 8012600:	10624dd3 	.word	0x10624dd3
 8012604:	00200045 	.word	0x00200045
 8012608:	002000c5 	.word	0x002000c5
 801260c:	fdffe008 	.word	0xfdffe008

08012610 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8012610:	b480      	push	{r7}
 8012612:	b085      	sub	sp, #20
 8012614:	af00      	add	r7, sp, #0
 8012616:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012618:	4b1f      	ldr	r3, [pc, #124]	; (8012698 <SDMMC_GetCmdResp2+0x88>)
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	4a1f      	ldr	r2, [pc, #124]	; (801269c <SDMMC_GetCmdResp2+0x8c>)
 801261e:	fba2 2303 	umull	r2, r3, r2, r3
 8012622:	0a5b      	lsrs	r3, r3, #9
 8012624:	f241 3288 	movw	r2, #5000	; 0x1388
 8012628:	fb02 f303 	mul.w	r3, r2, r3
 801262c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	1e5a      	subs	r2, r3, #1
 8012632:	60fa      	str	r2, [r7, #12]
 8012634:	2b00      	cmp	r3, #0
 8012636:	d102      	bne.n	801263e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012638:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801263c:	e026      	b.n	801268c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012642:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012644:	68bb      	ldr	r3, [r7, #8]
 8012646:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801264a:	2b00      	cmp	r3, #0
 801264c:	d0ef      	beq.n	801262e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801264e:	68bb      	ldr	r3, [r7, #8]
 8012650:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012654:	2b00      	cmp	r3, #0
 8012656:	d1ea      	bne.n	801262e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801265c:	f003 0304 	and.w	r3, r3, #4
 8012660:	2b00      	cmp	r3, #0
 8012662:	d004      	beq.n	801266e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	2204      	movs	r2, #4
 8012668:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801266a:	2304      	movs	r3, #4
 801266c:	e00e      	b.n	801268c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012672:	f003 0301 	and.w	r3, r3, #1
 8012676:	2b00      	cmp	r3, #0
 8012678:	d004      	beq.n	8012684 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	2201      	movs	r2, #1
 801267e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012680:	2301      	movs	r3, #1
 8012682:	e003      	b.n	801268c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	4a06      	ldr	r2, [pc, #24]	; (80126a0 <SDMMC_GetCmdResp2+0x90>)
 8012688:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801268a:	2300      	movs	r3, #0
}
 801268c:	4618      	mov	r0, r3
 801268e:	3714      	adds	r7, #20
 8012690:	46bd      	mov	sp, r7
 8012692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012696:	4770      	bx	lr
 8012698:	24000000 	.word	0x24000000
 801269c:	10624dd3 	.word	0x10624dd3
 80126a0:	002000c5 	.word	0x002000c5

080126a4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80126a4:	b480      	push	{r7}
 80126a6:	b085      	sub	sp, #20
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80126ac:	4b1a      	ldr	r3, [pc, #104]	; (8012718 <SDMMC_GetCmdResp3+0x74>)
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	4a1a      	ldr	r2, [pc, #104]	; (801271c <SDMMC_GetCmdResp3+0x78>)
 80126b2:	fba2 2303 	umull	r2, r3, r2, r3
 80126b6:	0a5b      	lsrs	r3, r3, #9
 80126b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80126bc:	fb02 f303 	mul.w	r3, r2, r3
 80126c0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	1e5a      	subs	r2, r3, #1
 80126c6:	60fa      	str	r2, [r7, #12]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d102      	bne.n	80126d2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80126cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80126d0:	e01b      	b.n	801270a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126d6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80126d8:	68bb      	ldr	r3, [r7, #8]
 80126da:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d0ef      	beq.n	80126c2 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80126e2:	68bb      	ldr	r3, [r7, #8]
 80126e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d1ea      	bne.n	80126c2 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126f0:	f003 0304 	and.w	r3, r3, #4
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d004      	beq.n	8012702 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	2204      	movs	r2, #4
 80126fc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80126fe:	2304      	movs	r3, #4
 8012700:	e003      	b.n	801270a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	4a06      	ldr	r2, [pc, #24]	; (8012720 <SDMMC_GetCmdResp3+0x7c>)
 8012706:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012708:	2300      	movs	r3, #0
}
 801270a:	4618      	mov	r0, r3
 801270c:	3714      	adds	r7, #20
 801270e:	46bd      	mov	sp, r7
 8012710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012714:	4770      	bx	lr
 8012716:	bf00      	nop
 8012718:	24000000 	.word	0x24000000
 801271c:	10624dd3 	.word	0x10624dd3
 8012720:	002000c5 	.word	0x002000c5

08012724 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8012724:	b580      	push	{r7, lr}
 8012726:	b088      	sub	sp, #32
 8012728:	af00      	add	r7, sp, #0
 801272a:	60f8      	str	r0, [r7, #12]
 801272c:	460b      	mov	r3, r1
 801272e:	607a      	str	r2, [r7, #4]
 8012730:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012732:	4b35      	ldr	r3, [pc, #212]	; (8012808 <SDMMC_GetCmdResp6+0xe4>)
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	4a35      	ldr	r2, [pc, #212]	; (801280c <SDMMC_GetCmdResp6+0xe8>)
 8012738:	fba2 2303 	umull	r2, r3, r2, r3
 801273c:	0a5b      	lsrs	r3, r3, #9
 801273e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012742:	fb02 f303 	mul.w	r3, r2, r3
 8012746:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012748:	69fb      	ldr	r3, [r7, #28]
 801274a:	1e5a      	subs	r2, r3, #1
 801274c:	61fa      	str	r2, [r7, #28]
 801274e:	2b00      	cmp	r3, #0
 8012750:	d102      	bne.n	8012758 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012752:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012756:	e052      	b.n	80127fe <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801275c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801275e:	69bb      	ldr	r3, [r7, #24]
 8012760:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012764:	2b00      	cmp	r3, #0
 8012766:	d0ef      	beq.n	8012748 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012768:	69bb      	ldr	r3, [r7, #24]
 801276a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801276e:	2b00      	cmp	r3, #0
 8012770:	d1ea      	bne.n	8012748 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012776:	f003 0304 	and.w	r3, r3, #4
 801277a:	2b00      	cmp	r3, #0
 801277c:	d004      	beq.n	8012788 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	2204      	movs	r2, #4
 8012782:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012784:	2304      	movs	r3, #4
 8012786:	e03a      	b.n	80127fe <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801278c:	f003 0301 	and.w	r3, r3, #1
 8012790:	2b00      	cmp	r3, #0
 8012792:	d004      	beq.n	801279e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	2201      	movs	r2, #1
 8012798:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801279a:	2301      	movs	r3, #1
 801279c:	e02f      	b.n	80127fe <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801279e:	68f8      	ldr	r0, [r7, #12]
 80127a0:	f7ff fb7c 	bl	8011e9c <SDMMC_GetCommandResponse>
 80127a4:	4603      	mov	r3, r0
 80127a6:	461a      	mov	r2, r3
 80127a8:	7afb      	ldrb	r3, [r7, #11]
 80127aa:	4293      	cmp	r3, r2
 80127ac:	d001      	beq.n	80127b2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80127ae:	2301      	movs	r3, #1
 80127b0:	e025      	b.n	80127fe <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	4a16      	ldr	r2, [pc, #88]	; (8012810 <SDMMC_GetCmdResp6+0xec>)
 80127b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80127b8:	2100      	movs	r1, #0
 80127ba:	68f8      	ldr	r0, [r7, #12]
 80127bc:	f7ff fb7b 	bl	8011eb6 <SDMMC_GetResponse>
 80127c0:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80127c2:	697b      	ldr	r3, [r7, #20]
 80127c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d106      	bne.n	80127da <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80127cc:	697b      	ldr	r3, [r7, #20]
 80127ce:	0c1b      	lsrs	r3, r3, #16
 80127d0:	b29a      	uxth	r2, r3
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80127d6:	2300      	movs	r3, #0
 80127d8:	e011      	b.n	80127fe <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80127da:	697b      	ldr	r3, [r7, #20]
 80127dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d002      	beq.n	80127ea <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80127e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80127e8:	e009      	b.n	80127fe <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80127ea:	697b      	ldr	r3, [r7, #20]
 80127ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d002      	beq.n	80127fa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80127f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80127f8:	e001      	b.n	80127fe <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80127fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80127fe:	4618      	mov	r0, r3
 8012800:	3720      	adds	r7, #32
 8012802:	46bd      	mov	sp, r7
 8012804:	bd80      	pop	{r7, pc}
 8012806:	bf00      	nop
 8012808:	24000000 	.word	0x24000000
 801280c:	10624dd3 	.word	0x10624dd3
 8012810:	002000c5 	.word	0x002000c5

08012814 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8012814:	b480      	push	{r7}
 8012816:	b085      	sub	sp, #20
 8012818:	af00      	add	r7, sp, #0
 801281a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801281c:	4b22      	ldr	r3, [pc, #136]	; (80128a8 <SDMMC_GetCmdResp7+0x94>)
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	4a22      	ldr	r2, [pc, #136]	; (80128ac <SDMMC_GetCmdResp7+0x98>)
 8012822:	fba2 2303 	umull	r2, r3, r2, r3
 8012826:	0a5b      	lsrs	r3, r3, #9
 8012828:	f241 3288 	movw	r2, #5000	; 0x1388
 801282c:	fb02 f303 	mul.w	r3, r2, r3
 8012830:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	1e5a      	subs	r2, r3, #1
 8012836:	60fa      	str	r2, [r7, #12]
 8012838:	2b00      	cmp	r3, #0
 801283a:	d102      	bne.n	8012842 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801283c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012840:	e02c      	b.n	801289c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012846:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012848:	68bb      	ldr	r3, [r7, #8]
 801284a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801284e:	2b00      	cmp	r3, #0
 8012850:	d0ef      	beq.n	8012832 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012852:	68bb      	ldr	r3, [r7, #8]
 8012854:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012858:	2b00      	cmp	r3, #0
 801285a:	d1ea      	bne.n	8012832 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012860:	f003 0304 	and.w	r3, r3, #4
 8012864:	2b00      	cmp	r3, #0
 8012866:	d004      	beq.n	8012872 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	2204      	movs	r2, #4
 801286c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801286e:	2304      	movs	r3, #4
 8012870:	e014      	b.n	801289c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012876:	f003 0301 	and.w	r3, r3, #1
 801287a:	2b00      	cmp	r3, #0
 801287c:	d004      	beq.n	8012888 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	2201      	movs	r2, #1
 8012882:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012884:	2301      	movs	r3, #1
 8012886:	e009      	b.n	801289c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801288c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012890:	2b00      	cmp	r3, #0
 8012892:	d002      	beq.n	801289a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	2240      	movs	r2, #64	; 0x40
 8012898:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801289a:	2300      	movs	r3, #0

}
 801289c:	4618      	mov	r0, r3
 801289e:	3714      	adds	r7, #20
 80128a0:	46bd      	mov	sp, r7
 80128a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a6:	4770      	bx	lr
 80128a8:	24000000 	.word	0x24000000
 80128ac:	10624dd3 	.word	0x10624dd3

080128b0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80128b0:	b480      	push	{r7}
 80128b2:	b085      	sub	sp, #20
 80128b4:	af00      	add	r7, sp, #0
 80128b6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80128b8:	4b11      	ldr	r3, [pc, #68]	; (8012900 <SDMMC_GetCmdError+0x50>)
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	4a11      	ldr	r2, [pc, #68]	; (8012904 <SDMMC_GetCmdError+0x54>)
 80128be:	fba2 2303 	umull	r2, r3, r2, r3
 80128c2:	0a5b      	lsrs	r3, r3, #9
 80128c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80128c8:	fb02 f303 	mul.w	r3, r2, r3
 80128cc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	1e5a      	subs	r2, r3, #1
 80128d2:	60fa      	str	r2, [r7, #12]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d102      	bne.n	80128de <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80128d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80128dc:	e009      	b.n	80128f2 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d0f1      	beq.n	80128ce <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	4a06      	ldr	r2, [pc, #24]	; (8012908 <SDMMC_GetCmdError+0x58>)
 80128ee:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80128f0:	2300      	movs	r3, #0
}
 80128f2:	4618      	mov	r0, r3
 80128f4:	3714      	adds	r7, #20
 80128f6:	46bd      	mov	sp, r7
 80128f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128fc:	4770      	bx	lr
 80128fe:	bf00      	nop
 8012900:	24000000 	.word	0x24000000
 8012904:	10624dd3 	.word	0x10624dd3
 8012908:	002000c5 	.word	0x002000c5

0801290c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801290c:	b084      	sub	sp, #16
 801290e:	b580      	push	{r7, lr}
 8012910:	b084      	sub	sp, #16
 8012912:	af00      	add	r7, sp, #0
 8012914:	6078      	str	r0, [r7, #4]
 8012916:	f107 001c 	add.w	r0, r7, #28
 801291a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801291e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012920:	2b01      	cmp	r3, #1
 8012922:	d120      	bne.n	8012966 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012928:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	68da      	ldr	r2, [r3, #12]
 8012934:	4b2a      	ldr	r3, [pc, #168]	; (80129e0 <USB_CoreInit+0xd4>)
 8012936:	4013      	ands	r3, r2
 8012938:	687a      	ldr	r2, [r7, #4]
 801293a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	68db      	ldr	r3, [r3, #12]
 8012940:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801294a:	2b01      	cmp	r3, #1
 801294c:	d105      	bne.n	801295a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	68db      	ldr	r3, [r3, #12]
 8012952:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801295a:	6878      	ldr	r0, [r7, #4]
 801295c:	f001 faf8 	bl	8013f50 <USB_CoreReset>
 8012960:	4603      	mov	r3, r0
 8012962:	73fb      	strb	r3, [r7, #15]
 8012964:	e01a      	b.n	801299c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	68db      	ldr	r3, [r3, #12]
 801296a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012972:	6878      	ldr	r0, [r7, #4]
 8012974:	f001 faec 	bl	8013f50 <USB_CoreReset>
 8012978:	4603      	mov	r3, r0
 801297a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801297c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801297e:	2b00      	cmp	r3, #0
 8012980:	d106      	bne.n	8012990 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012986:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	639a      	str	r2, [r3, #56]	; 0x38
 801298e:	e005      	b.n	801299c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012994:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801299e:	2b01      	cmp	r3, #1
 80129a0:	d116      	bne.n	80129d0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80129a6:	b29a      	uxth	r2, r3
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80129b0:	4b0c      	ldr	r3, [pc, #48]	; (80129e4 <USB_CoreInit+0xd8>)
 80129b2:	4313      	orrs	r3, r2
 80129b4:	687a      	ldr	r2, [r7, #4]
 80129b6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	689b      	ldr	r3, [r3, #8]
 80129bc:	f043 0206 	orr.w	r2, r3, #6
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	689b      	ldr	r3, [r3, #8]
 80129c8:	f043 0220 	orr.w	r2, r3, #32
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80129d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80129d2:	4618      	mov	r0, r3
 80129d4:	3710      	adds	r7, #16
 80129d6:	46bd      	mov	sp, r7
 80129d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80129dc:	b004      	add	sp, #16
 80129de:	4770      	bx	lr
 80129e0:	ffbdffbf 	.word	0xffbdffbf
 80129e4:	03ee0000 	.word	0x03ee0000

080129e8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80129e8:	b480      	push	{r7}
 80129ea:	b087      	sub	sp, #28
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	60f8      	str	r0, [r7, #12]
 80129f0:	60b9      	str	r1, [r7, #8]
 80129f2:	4613      	mov	r3, r2
 80129f4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80129f6:	79fb      	ldrb	r3, [r7, #7]
 80129f8:	2b02      	cmp	r3, #2
 80129fa:	d165      	bne.n	8012ac8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80129fc:	68bb      	ldr	r3, [r7, #8]
 80129fe:	4a41      	ldr	r2, [pc, #260]	; (8012b04 <USB_SetTurnaroundTime+0x11c>)
 8012a00:	4293      	cmp	r3, r2
 8012a02:	d906      	bls.n	8012a12 <USB_SetTurnaroundTime+0x2a>
 8012a04:	68bb      	ldr	r3, [r7, #8]
 8012a06:	4a40      	ldr	r2, [pc, #256]	; (8012b08 <USB_SetTurnaroundTime+0x120>)
 8012a08:	4293      	cmp	r3, r2
 8012a0a:	d202      	bcs.n	8012a12 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8012a0c:	230f      	movs	r3, #15
 8012a0e:	617b      	str	r3, [r7, #20]
 8012a10:	e062      	b.n	8012ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8012a12:	68bb      	ldr	r3, [r7, #8]
 8012a14:	4a3c      	ldr	r2, [pc, #240]	; (8012b08 <USB_SetTurnaroundTime+0x120>)
 8012a16:	4293      	cmp	r3, r2
 8012a18:	d306      	bcc.n	8012a28 <USB_SetTurnaroundTime+0x40>
 8012a1a:	68bb      	ldr	r3, [r7, #8]
 8012a1c:	4a3b      	ldr	r2, [pc, #236]	; (8012b0c <USB_SetTurnaroundTime+0x124>)
 8012a1e:	4293      	cmp	r3, r2
 8012a20:	d202      	bcs.n	8012a28 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8012a22:	230e      	movs	r3, #14
 8012a24:	617b      	str	r3, [r7, #20]
 8012a26:	e057      	b.n	8012ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8012a28:	68bb      	ldr	r3, [r7, #8]
 8012a2a:	4a38      	ldr	r2, [pc, #224]	; (8012b0c <USB_SetTurnaroundTime+0x124>)
 8012a2c:	4293      	cmp	r3, r2
 8012a2e:	d306      	bcc.n	8012a3e <USB_SetTurnaroundTime+0x56>
 8012a30:	68bb      	ldr	r3, [r7, #8]
 8012a32:	4a37      	ldr	r2, [pc, #220]	; (8012b10 <USB_SetTurnaroundTime+0x128>)
 8012a34:	4293      	cmp	r3, r2
 8012a36:	d202      	bcs.n	8012a3e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8012a38:	230d      	movs	r3, #13
 8012a3a:	617b      	str	r3, [r7, #20]
 8012a3c:	e04c      	b.n	8012ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8012a3e:	68bb      	ldr	r3, [r7, #8]
 8012a40:	4a33      	ldr	r2, [pc, #204]	; (8012b10 <USB_SetTurnaroundTime+0x128>)
 8012a42:	4293      	cmp	r3, r2
 8012a44:	d306      	bcc.n	8012a54 <USB_SetTurnaroundTime+0x6c>
 8012a46:	68bb      	ldr	r3, [r7, #8]
 8012a48:	4a32      	ldr	r2, [pc, #200]	; (8012b14 <USB_SetTurnaroundTime+0x12c>)
 8012a4a:	4293      	cmp	r3, r2
 8012a4c:	d802      	bhi.n	8012a54 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8012a4e:	230c      	movs	r3, #12
 8012a50:	617b      	str	r3, [r7, #20]
 8012a52:	e041      	b.n	8012ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8012a54:	68bb      	ldr	r3, [r7, #8]
 8012a56:	4a2f      	ldr	r2, [pc, #188]	; (8012b14 <USB_SetTurnaroundTime+0x12c>)
 8012a58:	4293      	cmp	r3, r2
 8012a5a:	d906      	bls.n	8012a6a <USB_SetTurnaroundTime+0x82>
 8012a5c:	68bb      	ldr	r3, [r7, #8]
 8012a5e:	4a2e      	ldr	r2, [pc, #184]	; (8012b18 <USB_SetTurnaroundTime+0x130>)
 8012a60:	4293      	cmp	r3, r2
 8012a62:	d802      	bhi.n	8012a6a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8012a64:	230b      	movs	r3, #11
 8012a66:	617b      	str	r3, [r7, #20]
 8012a68:	e036      	b.n	8012ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8012a6a:	68bb      	ldr	r3, [r7, #8]
 8012a6c:	4a2a      	ldr	r2, [pc, #168]	; (8012b18 <USB_SetTurnaroundTime+0x130>)
 8012a6e:	4293      	cmp	r3, r2
 8012a70:	d906      	bls.n	8012a80 <USB_SetTurnaroundTime+0x98>
 8012a72:	68bb      	ldr	r3, [r7, #8]
 8012a74:	4a29      	ldr	r2, [pc, #164]	; (8012b1c <USB_SetTurnaroundTime+0x134>)
 8012a76:	4293      	cmp	r3, r2
 8012a78:	d802      	bhi.n	8012a80 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8012a7a:	230a      	movs	r3, #10
 8012a7c:	617b      	str	r3, [r7, #20]
 8012a7e:	e02b      	b.n	8012ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8012a80:	68bb      	ldr	r3, [r7, #8]
 8012a82:	4a26      	ldr	r2, [pc, #152]	; (8012b1c <USB_SetTurnaroundTime+0x134>)
 8012a84:	4293      	cmp	r3, r2
 8012a86:	d906      	bls.n	8012a96 <USB_SetTurnaroundTime+0xae>
 8012a88:	68bb      	ldr	r3, [r7, #8]
 8012a8a:	4a25      	ldr	r2, [pc, #148]	; (8012b20 <USB_SetTurnaroundTime+0x138>)
 8012a8c:	4293      	cmp	r3, r2
 8012a8e:	d202      	bcs.n	8012a96 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8012a90:	2309      	movs	r3, #9
 8012a92:	617b      	str	r3, [r7, #20]
 8012a94:	e020      	b.n	8012ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8012a96:	68bb      	ldr	r3, [r7, #8]
 8012a98:	4a21      	ldr	r2, [pc, #132]	; (8012b20 <USB_SetTurnaroundTime+0x138>)
 8012a9a:	4293      	cmp	r3, r2
 8012a9c:	d306      	bcc.n	8012aac <USB_SetTurnaroundTime+0xc4>
 8012a9e:	68bb      	ldr	r3, [r7, #8]
 8012aa0:	4a20      	ldr	r2, [pc, #128]	; (8012b24 <USB_SetTurnaroundTime+0x13c>)
 8012aa2:	4293      	cmp	r3, r2
 8012aa4:	d802      	bhi.n	8012aac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8012aa6:	2308      	movs	r3, #8
 8012aa8:	617b      	str	r3, [r7, #20]
 8012aaa:	e015      	b.n	8012ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8012aac:	68bb      	ldr	r3, [r7, #8]
 8012aae:	4a1d      	ldr	r2, [pc, #116]	; (8012b24 <USB_SetTurnaroundTime+0x13c>)
 8012ab0:	4293      	cmp	r3, r2
 8012ab2:	d906      	bls.n	8012ac2 <USB_SetTurnaroundTime+0xda>
 8012ab4:	68bb      	ldr	r3, [r7, #8]
 8012ab6:	4a1c      	ldr	r2, [pc, #112]	; (8012b28 <USB_SetTurnaroundTime+0x140>)
 8012ab8:	4293      	cmp	r3, r2
 8012aba:	d202      	bcs.n	8012ac2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8012abc:	2307      	movs	r3, #7
 8012abe:	617b      	str	r3, [r7, #20]
 8012ac0:	e00a      	b.n	8012ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8012ac2:	2306      	movs	r3, #6
 8012ac4:	617b      	str	r3, [r7, #20]
 8012ac6:	e007      	b.n	8012ad8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8012ac8:	79fb      	ldrb	r3, [r7, #7]
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d102      	bne.n	8012ad4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8012ace:	2309      	movs	r3, #9
 8012ad0:	617b      	str	r3, [r7, #20]
 8012ad2:	e001      	b.n	8012ad8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8012ad4:	2309      	movs	r3, #9
 8012ad6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	68db      	ldr	r3, [r3, #12]
 8012adc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	68da      	ldr	r2, [r3, #12]
 8012ae8:	697b      	ldr	r3, [r7, #20]
 8012aea:	029b      	lsls	r3, r3, #10
 8012aec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8012af0:	431a      	orrs	r2, r3
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012af6:	2300      	movs	r3, #0
}
 8012af8:	4618      	mov	r0, r3
 8012afa:	371c      	adds	r7, #28
 8012afc:	46bd      	mov	sp, r7
 8012afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b02:	4770      	bx	lr
 8012b04:	00d8acbf 	.word	0x00d8acbf
 8012b08:	00e4e1c0 	.word	0x00e4e1c0
 8012b0c:	00f42400 	.word	0x00f42400
 8012b10:	01067380 	.word	0x01067380
 8012b14:	011a499f 	.word	0x011a499f
 8012b18:	01312cff 	.word	0x01312cff
 8012b1c:	014ca43f 	.word	0x014ca43f
 8012b20:	016e3600 	.word	0x016e3600
 8012b24:	01a6ab1f 	.word	0x01a6ab1f
 8012b28:	01e84800 	.word	0x01e84800

08012b2c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012b2c:	b480      	push	{r7}
 8012b2e:	b083      	sub	sp, #12
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	689b      	ldr	r3, [r3, #8]
 8012b38:	f043 0201 	orr.w	r2, r3, #1
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012b40:	2300      	movs	r3, #0
}
 8012b42:	4618      	mov	r0, r3
 8012b44:	370c      	adds	r7, #12
 8012b46:	46bd      	mov	sp, r7
 8012b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b4c:	4770      	bx	lr

08012b4e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012b4e:	b480      	push	{r7}
 8012b50:	b083      	sub	sp, #12
 8012b52:	af00      	add	r7, sp, #0
 8012b54:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	689b      	ldr	r3, [r3, #8]
 8012b5a:	f023 0201 	bic.w	r2, r3, #1
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012b62:	2300      	movs	r3, #0
}
 8012b64:	4618      	mov	r0, r3
 8012b66:	370c      	adds	r7, #12
 8012b68:	46bd      	mov	sp, r7
 8012b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b6e:	4770      	bx	lr

08012b70 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012b70:	b580      	push	{r7, lr}
 8012b72:	b084      	sub	sp, #16
 8012b74:	af00      	add	r7, sp, #0
 8012b76:	6078      	str	r0, [r7, #4]
 8012b78:	460b      	mov	r3, r1
 8012b7a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	68db      	ldr	r3, [r3, #12]
 8012b84:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012b8c:	78fb      	ldrb	r3, [r7, #3]
 8012b8e:	2b01      	cmp	r3, #1
 8012b90:	d115      	bne.n	8012bbe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	68db      	ldr	r3, [r3, #12]
 8012b96:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012b9e:	2001      	movs	r0, #1
 8012ba0:	f7f0 ff18 	bl	80039d4 <HAL_Delay>
      ms++;
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	3301      	adds	r3, #1
 8012ba8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8012baa:	6878      	ldr	r0, [r7, #4]
 8012bac:	f001 f93f 	bl	8013e2e <USB_GetMode>
 8012bb0:	4603      	mov	r3, r0
 8012bb2:	2b01      	cmp	r3, #1
 8012bb4:	d01e      	beq.n	8012bf4 <USB_SetCurrentMode+0x84>
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	2b31      	cmp	r3, #49	; 0x31
 8012bba:	d9f0      	bls.n	8012b9e <USB_SetCurrentMode+0x2e>
 8012bbc:	e01a      	b.n	8012bf4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8012bbe:	78fb      	ldrb	r3, [r7, #3]
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d115      	bne.n	8012bf0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	68db      	ldr	r3, [r3, #12]
 8012bc8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012bd0:	2001      	movs	r0, #1
 8012bd2:	f7f0 feff 	bl	80039d4 <HAL_Delay>
      ms++;
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	3301      	adds	r3, #1
 8012bda:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8012bdc:	6878      	ldr	r0, [r7, #4]
 8012bde:	f001 f926 	bl	8013e2e <USB_GetMode>
 8012be2:	4603      	mov	r3, r0
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d005      	beq.n	8012bf4 <USB_SetCurrentMode+0x84>
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	2b31      	cmp	r3, #49	; 0x31
 8012bec:	d9f0      	bls.n	8012bd0 <USB_SetCurrentMode+0x60>
 8012bee:	e001      	b.n	8012bf4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8012bf0:	2301      	movs	r3, #1
 8012bf2:	e005      	b.n	8012c00 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	2b32      	cmp	r3, #50	; 0x32
 8012bf8:	d101      	bne.n	8012bfe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8012bfa:	2301      	movs	r3, #1
 8012bfc:	e000      	b.n	8012c00 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8012bfe:	2300      	movs	r3, #0
}
 8012c00:	4618      	mov	r0, r3
 8012c02:	3710      	adds	r7, #16
 8012c04:	46bd      	mov	sp, r7
 8012c06:	bd80      	pop	{r7, pc}

08012c08 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012c08:	b084      	sub	sp, #16
 8012c0a:	b580      	push	{r7, lr}
 8012c0c:	b086      	sub	sp, #24
 8012c0e:	af00      	add	r7, sp, #0
 8012c10:	6078      	str	r0, [r7, #4]
 8012c12:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8012c16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8012c1a:	2300      	movs	r3, #0
 8012c1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8012c22:	2300      	movs	r3, #0
 8012c24:	613b      	str	r3, [r7, #16]
 8012c26:	e009      	b.n	8012c3c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8012c28:	687a      	ldr	r2, [r7, #4]
 8012c2a:	693b      	ldr	r3, [r7, #16]
 8012c2c:	3340      	adds	r3, #64	; 0x40
 8012c2e:	009b      	lsls	r3, r3, #2
 8012c30:	4413      	add	r3, r2
 8012c32:	2200      	movs	r2, #0
 8012c34:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8012c36:	693b      	ldr	r3, [r7, #16]
 8012c38:	3301      	adds	r3, #1
 8012c3a:	613b      	str	r3, [r7, #16]
 8012c3c:	693b      	ldr	r3, [r7, #16]
 8012c3e:	2b0e      	cmp	r3, #14
 8012c40:	d9f2      	bls.n	8012c28 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8012c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d11c      	bne.n	8012c82 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c4e:	685b      	ldr	r3, [r3, #4]
 8012c50:	68fa      	ldr	r2, [r7, #12]
 8012c52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012c56:	f043 0302 	orr.w	r3, r3, #2
 8012c5a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c60:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	601a      	str	r2, [r3, #0]
 8012c80:	e005      	b.n	8012c8e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c86:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8012c8e:	68fb      	ldr	r3, [r7, #12]
 8012c90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012c94:	461a      	mov	r2, r3
 8012c96:	2300      	movs	r3, #0
 8012c98:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ca0:	4619      	mov	r1, r3
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ca8:	461a      	mov	r2, r3
 8012caa:	680b      	ldr	r3, [r1, #0]
 8012cac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cb0:	2b01      	cmp	r3, #1
 8012cb2:	d10c      	bne.n	8012cce <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8012cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d104      	bne.n	8012cc4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8012cba:	2100      	movs	r1, #0
 8012cbc:	6878      	ldr	r0, [r7, #4]
 8012cbe:	f000 f965 	bl	8012f8c <USB_SetDevSpeed>
 8012cc2:	e008      	b.n	8012cd6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8012cc4:	2101      	movs	r1, #1
 8012cc6:	6878      	ldr	r0, [r7, #4]
 8012cc8:	f000 f960 	bl	8012f8c <USB_SetDevSpeed>
 8012ccc:	e003      	b.n	8012cd6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8012cce:	2103      	movs	r1, #3
 8012cd0:	6878      	ldr	r0, [r7, #4]
 8012cd2:	f000 f95b 	bl	8012f8c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012cd6:	2110      	movs	r1, #16
 8012cd8:	6878      	ldr	r0, [r7, #4]
 8012cda:	f000 f8f3 	bl	8012ec4 <USB_FlushTxFifo>
 8012cde:	4603      	mov	r3, r0
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d001      	beq.n	8012ce8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8012ce4:	2301      	movs	r3, #1
 8012ce6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012ce8:	6878      	ldr	r0, [r7, #4]
 8012cea:	f000 f91f 	bl	8012f2c <USB_FlushRxFifo>
 8012cee:	4603      	mov	r3, r0
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d001      	beq.n	8012cf8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8012cf4:	2301      	movs	r3, #1
 8012cf6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012cfe:	461a      	mov	r2, r3
 8012d00:	2300      	movs	r3, #0
 8012d02:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012d0a:	461a      	mov	r2, r3
 8012d0c:	2300      	movs	r3, #0
 8012d0e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012d16:	461a      	mov	r2, r3
 8012d18:	2300      	movs	r3, #0
 8012d1a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012d1c:	2300      	movs	r3, #0
 8012d1e:	613b      	str	r3, [r7, #16]
 8012d20:	e043      	b.n	8012daa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012d22:	693b      	ldr	r3, [r7, #16]
 8012d24:	015a      	lsls	r2, r3, #5
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	4413      	add	r3, r2
 8012d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012d34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012d38:	d118      	bne.n	8012d6c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8012d3a:	693b      	ldr	r3, [r7, #16]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d10a      	bne.n	8012d56 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8012d40:	693b      	ldr	r3, [r7, #16]
 8012d42:	015a      	lsls	r2, r3, #5
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	4413      	add	r3, r2
 8012d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d4c:	461a      	mov	r2, r3
 8012d4e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012d52:	6013      	str	r3, [r2, #0]
 8012d54:	e013      	b.n	8012d7e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8012d56:	693b      	ldr	r3, [r7, #16]
 8012d58:	015a      	lsls	r2, r3, #5
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	4413      	add	r3, r2
 8012d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d62:	461a      	mov	r2, r3
 8012d64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012d68:	6013      	str	r3, [r2, #0]
 8012d6a:	e008      	b.n	8012d7e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8012d6c:	693b      	ldr	r3, [r7, #16]
 8012d6e:	015a      	lsls	r2, r3, #5
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	4413      	add	r3, r2
 8012d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d78:	461a      	mov	r2, r3
 8012d7a:	2300      	movs	r3, #0
 8012d7c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8012d7e:	693b      	ldr	r3, [r7, #16]
 8012d80:	015a      	lsls	r2, r3, #5
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	4413      	add	r3, r2
 8012d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d8a:	461a      	mov	r2, r3
 8012d8c:	2300      	movs	r3, #0
 8012d8e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012d90:	693b      	ldr	r3, [r7, #16]
 8012d92:	015a      	lsls	r2, r3, #5
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	4413      	add	r3, r2
 8012d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d9c:	461a      	mov	r2, r3
 8012d9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012da2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012da4:	693b      	ldr	r3, [r7, #16]
 8012da6:	3301      	adds	r3, #1
 8012da8:	613b      	str	r3, [r7, #16]
 8012daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dac:	693a      	ldr	r2, [r7, #16]
 8012dae:	429a      	cmp	r2, r3
 8012db0:	d3b7      	bcc.n	8012d22 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012db2:	2300      	movs	r3, #0
 8012db4:	613b      	str	r3, [r7, #16]
 8012db6:	e043      	b.n	8012e40 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012db8:	693b      	ldr	r3, [r7, #16]
 8012dba:	015a      	lsls	r2, r3, #5
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	4413      	add	r3, r2
 8012dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012dca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012dce:	d118      	bne.n	8012e02 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8012dd0:	693b      	ldr	r3, [r7, #16]
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d10a      	bne.n	8012dec <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8012dd6:	693b      	ldr	r3, [r7, #16]
 8012dd8:	015a      	lsls	r2, r3, #5
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	4413      	add	r3, r2
 8012dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012de2:	461a      	mov	r2, r3
 8012de4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012de8:	6013      	str	r3, [r2, #0]
 8012dea:	e013      	b.n	8012e14 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012dec:	693b      	ldr	r3, [r7, #16]
 8012dee:	015a      	lsls	r2, r3, #5
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	4413      	add	r3, r2
 8012df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012df8:	461a      	mov	r2, r3
 8012dfa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012dfe:	6013      	str	r3, [r2, #0]
 8012e00:	e008      	b.n	8012e14 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012e02:	693b      	ldr	r3, [r7, #16]
 8012e04:	015a      	lsls	r2, r3, #5
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	4413      	add	r3, r2
 8012e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e0e:	461a      	mov	r2, r3
 8012e10:	2300      	movs	r3, #0
 8012e12:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012e14:	693b      	ldr	r3, [r7, #16]
 8012e16:	015a      	lsls	r2, r3, #5
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	4413      	add	r3, r2
 8012e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e20:	461a      	mov	r2, r3
 8012e22:	2300      	movs	r3, #0
 8012e24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8012e26:	693b      	ldr	r3, [r7, #16]
 8012e28:	015a      	lsls	r2, r3, #5
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	4413      	add	r3, r2
 8012e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e32:	461a      	mov	r2, r3
 8012e34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012e38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012e3a:	693b      	ldr	r3, [r7, #16]
 8012e3c:	3301      	adds	r3, #1
 8012e3e:	613b      	str	r3, [r7, #16]
 8012e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e42:	693a      	ldr	r2, [r7, #16]
 8012e44:	429a      	cmp	r2, r3
 8012e46:	d3b7      	bcc.n	8012db8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e4e:	691b      	ldr	r3, [r3, #16]
 8012e50:	68fa      	ldr	r2, [r7, #12]
 8012e52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012e56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012e5a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	2200      	movs	r2, #0
 8012e60:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8012e68:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8012e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d105      	bne.n	8012e7c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	699b      	ldr	r3, [r3, #24]
 8012e74:	f043 0210 	orr.w	r2, r3, #16
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	699a      	ldr	r2, [r3, #24]
 8012e80:	4b0e      	ldr	r3, [pc, #56]	; (8012ebc <USB_DevInit+0x2b4>)
 8012e82:	4313      	orrs	r3, r2
 8012e84:	687a      	ldr	r2, [r7, #4]
 8012e86:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8012e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d005      	beq.n	8012e9a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	699b      	ldr	r3, [r3, #24]
 8012e92:	f043 0208 	orr.w	r2, r3, #8
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8012e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e9c:	2b01      	cmp	r3, #1
 8012e9e:	d105      	bne.n	8012eac <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	699a      	ldr	r2, [r3, #24]
 8012ea4:	4b06      	ldr	r3, [pc, #24]	; (8012ec0 <USB_DevInit+0x2b8>)
 8012ea6:	4313      	orrs	r3, r2
 8012ea8:	687a      	ldr	r2, [r7, #4]
 8012eaa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8012eac:	7dfb      	ldrb	r3, [r7, #23]
}
 8012eae:	4618      	mov	r0, r3
 8012eb0:	3718      	adds	r7, #24
 8012eb2:	46bd      	mov	sp, r7
 8012eb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012eb8:	b004      	add	sp, #16
 8012eba:	4770      	bx	lr
 8012ebc:	803c3800 	.word	0x803c3800
 8012ec0:	40000004 	.word	0x40000004

08012ec4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012ec4:	b480      	push	{r7}
 8012ec6:	b085      	sub	sp, #20
 8012ec8:	af00      	add	r7, sp, #0
 8012eca:	6078      	str	r0, [r7, #4]
 8012ecc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012ece:	2300      	movs	r3, #0
 8012ed0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	3301      	adds	r3, #1
 8012ed6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	4a13      	ldr	r2, [pc, #76]	; (8012f28 <USB_FlushTxFifo+0x64>)
 8012edc:	4293      	cmp	r3, r2
 8012ede:	d901      	bls.n	8012ee4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8012ee0:	2303      	movs	r3, #3
 8012ee2:	e01b      	b.n	8012f1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	691b      	ldr	r3, [r3, #16]
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	daf2      	bge.n	8012ed2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8012eec:	2300      	movs	r3, #0
 8012eee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012ef0:	683b      	ldr	r3, [r7, #0]
 8012ef2:	019b      	lsls	r3, r3, #6
 8012ef4:	f043 0220 	orr.w	r2, r3, #32
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	3301      	adds	r3, #1
 8012f00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	4a08      	ldr	r2, [pc, #32]	; (8012f28 <USB_FlushTxFifo+0x64>)
 8012f06:	4293      	cmp	r3, r2
 8012f08:	d901      	bls.n	8012f0e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8012f0a:	2303      	movs	r3, #3
 8012f0c:	e006      	b.n	8012f1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	691b      	ldr	r3, [r3, #16]
 8012f12:	f003 0320 	and.w	r3, r3, #32
 8012f16:	2b20      	cmp	r3, #32
 8012f18:	d0f0      	beq.n	8012efc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8012f1a:	2300      	movs	r3, #0
}
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	3714      	adds	r7, #20
 8012f20:	46bd      	mov	sp, r7
 8012f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f26:	4770      	bx	lr
 8012f28:	00030d40 	.word	0x00030d40

08012f2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012f2c:	b480      	push	{r7}
 8012f2e:	b085      	sub	sp, #20
 8012f30:	af00      	add	r7, sp, #0
 8012f32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012f34:	2300      	movs	r3, #0
 8012f36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	3301      	adds	r3, #1
 8012f3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	4a11      	ldr	r2, [pc, #68]	; (8012f88 <USB_FlushRxFifo+0x5c>)
 8012f42:	4293      	cmp	r3, r2
 8012f44:	d901      	bls.n	8012f4a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8012f46:	2303      	movs	r3, #3
 8012f48:	e018      	b.n	8012f7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	691b      	ldr	r3, [r3, #16]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	daf2      	bge.n	8012f38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8012f52:	2300      	movs	r3, #0
 8012f54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	2210      	movs	r2, #16
 8012f5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	3301      	adds	r3, #1
 8012f60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	4a08      	ldr	r2, [pc, #32]	; (8012f88 <USB_FlushRxFifo+0x5c>)
 8012f66:	4293      	cmp	r3, r2
 8012f68:	d901      	bls.n	8012f6e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8012f6a:	2303      	movs	r3, #3
 8012f6c:	e006      	b.n	8012f7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	691b      	ldr	r3, [r3, #16]
 8012f72:	f003 0310 	and.w	r3, r3, #16
 8012f76:	2b10      	cmp	r3, #16
 8012f78:	d0f0      	beq.n	8012f5c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8012f7a:	2300      	movs	r3, #0
}
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	3714      	adds	r7, #20
 8012f80:	46bd      	mov	sp, r7
 8012f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f86:	4770      	bx	lr
 8012f88:	00030d40 	.word	0x00030d40

08012f8c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8012f8c:	b480      	push	{r7}
 8012f8e:	b085      	sub	sp, #20
 8012f90:	af00      	add	r7, sp, #0
 8012f92:	6078      	str	r0, [r7, #4]
 8012f94:	460b      	mov	r3, r1
 8012f96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fa2:	681a      	ldr	r2, [r3, #0]
 8012fa4:	78fb      	ldrb	r3, [r7, #3]
 8012fa6:	68f9      	ldr	r1, [r7, #12]
 8012fa8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012fac:	4313      	orrs	r3, r2
 8012fae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8012fb0:	2300      	movs	r3, #0
}
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	3714      	adds	r7, #20
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fbc:	4770      	bx	lr

08012fbe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8012fbe:	b480      	push	{r7}
 8012fc0:	b087      	sub	sp, #28
 8012fc2:	af00      	add	r7, sp, #0
 8012fc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8012fca:	693b      	ldr	r3, [r7, #16]
 8012fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fd0:	689b      	ldr	r3, [r3, #8]
 8012fd2:	f003 0306 	and.w	r3, r3, #6
 8012fd6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d102      	bne.n	8012fe4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8012fde:	2300      	movs	r3, #0
 8012fe0:	75fb      	strb	r3, [r7, #23]
 8012fe2:	e00a      	b.n	8012ffa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	2b02      	cmp	r3, #2
 8012fe8:	d002      	beq.n	8012ff0 <USB_GetDevSpeed+0x32>
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	2b06      	cmp	r3, #6
 8012fee:	d102      	bne.n	8012ff6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8012ff0:	2302      	movs	r3, #2
 8012ff2:	75fb      	strb	r3, [r7, #23]
 8012ff4:	e001      	b.n	8012ffa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8012ff6:	230f      	movs	r3, #15
 8012ff8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8012ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	371c      	adds	r7, #28
 8013000:	46bd      	mov	sp, r7
 8013002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013006:	4770      	bx	lr

08013008 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013008:	b480      	push	{r7}
 801300a:	b085      	sub	sp, #20
 801300c:	af00      	add	r7, sp, #0
 801300e:	6078      	str	r0, [r7, #4]
 8013010:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013016:	683b      	ldr	r3, [r7, #0]
 8013018:	781b      	ldrb	r3, [r3, #0]
 801301a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801301c:	683b      	ldr	r3, [r7, #0]
 801301e:	785b      	ldrb	r3, [r3, #1]
 8013020:	2b01      	cmp	r3, #1
 8013022:	d139      	bne.n	8013098 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801302a:	69da      	ldr	r2, [r3, #28]
 801302c:	683b      	ldr	r3, [r7, #0]
 801302e:	781b      	ldrb	r3, [r3, #0]
 8013030:	f003 030f 	and.w	r3, r3, #15
 8013034:	2101      	movs	r1, #1
 8013036:	fa01 f303 	lsl.w	r3, r1, r3
 801303a:	b29b      	uxth	r3, r3
 801303c:	68f9      	ldr	r1, [r7, #12]
 801303e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013042:	4313      	orrs	r3, r2
 8013044:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8013046:	68bb      	ldr	r3, [r7, #8]
 8013048:	015a      	lsls	r2, r3, #5
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	4413      	add	r3, r2
 801304e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013058:	2b00      	cmp	r3, #0
 801305a:	d153      	bne.n	8013104 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801305c:	68bb      	ldr	r3, [r7, #8]
 801305e:	015a      	lsls	r2, r3, #5
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	4413      	add	r3, r2
 8013064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013068:	681a      	ldr	r2, [r3, #0]
 801306a:	683b      	ldr	r3, [r7, #0]
 801306c:	689b      	ldr	r3, [r3, #8]
 801306e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013072:	683b      	ldr	r3, [r7, #0]
 8013074:	791b      	ldrb	r3, [r3, #4]
 8013076:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013078:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801307a:	68bb      	ldr	r3, [r7, #8]
 801307c:	059b      	lsls	r3, r3, #22
 801307e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013080:	431a      	orrs	r2, r3
 8013082:	68bb      	ldr	r3, [r7, #8]
 8013084:	0159      	lsls	r1, r3, #5
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	440b      	add	r3, r1
 801308a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801308e:	4619      	mov	r1, r3
 8013090:	4b20      	ldr	r3, [pc, #128]	; (8013114 <USB_ActivateEndpoint+0x10c>)
 8013092:	4313      	orrs	r3, r2
 8013094:	600b      	str	r3, [r1, #0]
 8013096:	e035      	b.n	8013104 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801309e:	69da      	ldr	r2, [r3, #28]
 80130a0:	683b      	ldr	r3, [r7, #0]
 80130a2:	781b      	ldrb	r3, [r3, #0]
 80130a4:	f003 030f 	and.w	r3, r3, #15
 80130a8:	2101      	movs	r1, #1
 80130aa:	fa01 f303 	lsl.w	r3, r1, r3
 80130ae:	041b      	lsls	r3, r3, #16
 80130b0:	68f9      	ldr	r1, [r7, #12]
 80130b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80130b6:	4313      	orrs	r3, r2
 80130b8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80130ba:	68bb      	ldr	r3, [r7, #8]
 80130bc:	015a      	lsls	r2, r3, #5
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	4413      	add	r3, r2
 80130c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d119      	bne.n	8013104 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80130d0:	68bb      	ldr	r3, [r7, #8]
 80130d2:	015a      	lsls	r2, r3, #5
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	4413      	add	r3, r2
 80130d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80130dc:	681a      	ldr	r2, [r3, #0]
 80130de:	683b      	ldr	r3, [r7, #0]
 80130e0:	689b      	ldr	r3, [r3, #8]
 80130e2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80130e6:	683b      	ldr	r3, [r7, #0]
 80130e8:	791b      	ldrb	r3, [r3, #4]
 80130ea:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80130ec:	430b      	orrs	r3, r1
 80130ee:	431a      	orrs	r2, r3
 80130f0:	68bb      	ldr	r3, [r7, #8]
 80130f2:	0159      	lsls	r1, r3, #5
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	440b      	add	r3, r1
 80130f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80130fc:	4619      	mov	r1, r3
 80130fe:	4b05      	ldr	r3, [pc, #20]	; (8013114 <USB_ActivateEndpoint+0x10c>)
 8013100:	4313      	orrs	r3, r2
 8013102:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8013104:	2300      	movs	r3, #0
}
 8013106:	4618      	mov	r0, r3
 8013108:	3714      	adds	r7, #20
 801310a:	46bd      	mov	sp, r7
 801310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013110:	4770      	bx	lr
 8013112:	bf00      	nop
 8013114:	10008000 	.word	0x10008000

08013118 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013118:	b480      	push	{r7}
 801311a:	b085      	sub	sp, #20
 801311c:	af00      	add	r7, sp, #0
 801311e:	6078      	str	r0, [r7, #4]
 8013120:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013126:	683b      	ldr	r3, [r7, #0]
 8013128:	781b      	ldrb	r3, [r3, #0]
 801312a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801312c:	683b      	ldr	r3, [r7, #0]
 801312e:	785b      	ldrb	r3, [r3, #1]
 8013130:	2b01      	cmp	r3, #1
 8013132:	d161      	bne.n	80131f8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013134:	68bb      	ldr	r3, [r7, #8]
 8013136:	015a      	lsls	r2, r3, #5
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	4413      	add	r3, r2
 801313c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013146:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801314a:	d11f      	bne.n	801318c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801314c:	68bb      	ldr	r3, [r7, #8]
 801314e:	015a      	lsls	r2, r3, #5
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	4413      	add	r3, r2
 8013154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	68ba      	ldr	r2, [r7, #8]
 801315c:	0151      	lsls	r1, r2, #5
 801315e:	68fa      	ldr	r2, [r7, #12]
 8013160:	440a      	add	r2, r1
 8013162:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013166:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801316a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801316c:	68bb      	ldr	r3, [r7, #8]
 801316e:	015a      	lsls	r2, r3, #5
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	4413      	add	r3, r2
 8013174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	68ba      	ldr	r2, [r7, #8]
 801317c:	0151      	lsls	r1, r2, #5
 801317e:	68fa      	ldr	r2, [r7, #12]
 8013180:	440a      	add	r2, r1
 8013182:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013186:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801318a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013192:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013194:	683b      	ldr	r3, [r7, #0]
 8013196:	781b      	ldrb	r3, [r3, #0]
 8013198:	f003 030f 	and.w	r3, r3, #15
 801319c:	2101      	movs	r1, #1
 801319e:	fa01 f303 	lsl.w	r3, r1, r3
 80131a2:	b29b      	uxth	r3, r3
 80131a4:	43db      	mvns	r3, r3
 80131a6:	68f9      	ldr	r1, [r7, #12]
 80131a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80131ac:	4013      	ands	r3, r2
 80131ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80131b6:	69da      	ldr	r2, [r3, #28]
 80131b8:	683b      	ldr	r3, [r7, #0]
 80131ba:	781b      	ldrb	r3, [r3, #0]
 80131bc:	f003 030f 	and.w	r3, r3, #15
 80131c0:	2101      	movs	r1, #1
 80131c2:	fa01 f303 	lsl.w	r3, r1, r3
 80131c6:	b29b      	uxth	r3, r3
 80131c8:	43db      	mvns	r3, r3
 80131ca:	68f9      	ldr	r1, [r7, #12]
 80131cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80131d0:	4013      	ands	r3, r2
 80131d2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80131d4:	68bb      	ldr	r3, [r7, #8]
 80131d6:	015a      	lsls	r2, r3, #5
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	4413      	add	r3, r2
 80131dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131e0:	681a      	ldr	r2, [r3, #0]
 80131e2:	68bb      	ldr	r3, [r7, #8]
 80131e4:	0159      	lsls	r1, r3, #5
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	440b      	add	r3, r1
 80131ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131ee:	4619      	mov	r1, r3
 80131f0:	4b35      	ldr	r3, [pc, #212]	; (80132c8 <USB_DeactivateEndpoint+0x1b0>)
 80131f2:	4013      	ands	r3, r2
 80131f4:	600b      	str	r3, [r1, #0]
 80131f6:	e060      	b.n	80132ba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80131f8:	68bb      	ldr	r3, [r7, #8]
 80131fa:	015a      	lsls	r2, r3, #5
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	4413      	add	r3, r2
 8013200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801320a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801320e:	d11f      	bne.n	8013250 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8013210:	68bb      	ldr	r3, [r7, #8]
 8013212:	015a      	lsls	r2, r3, #5
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	4413      	add	r3, r2
 8013218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	68ba      	ldr	r2, [r7, #8]
 8013220:	0151      	lsls	r1, r2, #5
 8013222:	68fa      	ldr	r2, [r7, #12]
 8013224:	440a      	add	r2, r1
 8013226:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801322a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801322e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8013230:	68bb      	ldr	r3, [r7, #8]
 8013232:	015a      	lsls	r2, r3, #5
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	4413      	add	r3, r2
 8013238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801323c:	681b      	ldr	r3, [r3, #0]
 801323e:	68ba      	ldr	r2, [r7, #8]
 8013240:	0151      	lsls	r1, r2, #5
 8013242:	68fa      	ldr	r2, [r7, #12]
 8013244:	440a      	add	r2, r1
 8013246:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801324a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801324e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013256:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013258:	683b      	ldr	r3, [r7, #0]
 801325a:	781b      	ldrb	r3, [r3, #0]
 801325c:	f003 030f 	and.w	r3, r3, #15
 8013260:	2101      	movs	r1, #1
 8013262:	fa01 f303 	lsl.w	r3, r1, r3
 8013266:	041b      	lsls	r3, r3, #16
 8013268:	43db      	mvns	r3, r3
 801326a:	68f9      	ldr	r1, [r7, #12]
 801326c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013270:	4013      	ands	r3, r2
 8013272:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801327a:	69da      	ldr	r2, [r3, #28]
 801327c:	683b      	ldr	r3, [r7, #0]
 801327e:	781b      	ldrb	r3, [r3, #0]
 8013280:	f003 030f 	and.w	r3, r3, #15
 8013284:	2101      	movs	r1, #1
 8013286:	fa01 f303 	lsl.w	r3, r1, r3
 801328a:	041b      	lsls	r3, r3, #16
 801328c:	43db      	mvns	r3, r3
 801328e:	68f9      	ldr	r1, [r7, #12]
 8013290:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013294:	4013      	ands	r3, r2
 8013296:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013298:	68bb      	ldr	r3, [r7, #8]
 801329a:	015a      	lsls	r2, r3, #5
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	4413      	add	r3, r2
 80132a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132a4:	681a      	ldr	r2, [r3, #0]
 80132a6:	68bb      	ldr	r3, [r7, #8]
 80132a8:	0159      	lsls	r1, r3, #5
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	440b      	add	r3, r1
 80132ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132b2:	4619      	mov	r1, r3
 80132b4:	4b05      	ldr	r3, [pc, #20]	; (80132cc <USB_DeactivateEndpoint+0x1b4>)
 80132b6:	4013      	ands	r3, r2
 80132b8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80132ba:	2300      	movs	r3, #0
}
 80132bc:	4618      	mov	r0, r3
 80132be:	3714      	adds	r7, #20
 80132c0:	46bd      	mov	sp, r7
 80132c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c6:	4770      	bx	lr
 80132c8:	ec337800 	.word	0xec337800
 80132cc:	eff37800 	.word	0xeff37800

080132d0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80132d0:	b580      	push	{r7, lr}
 80132d2:	b08a      	sub	sp, #40	; 0x28
 80132d4:	af02      	add	r7, sp, #8
 80132d6:	60f8      	str	r0, [r7, #12]
 80132d8:	60b9      	str	r1, [r7, #8]
 80132da:	4613      	mov	r3, r2
 80132dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80132e2:	68bb      	ldr	r3, [r7, #8]
 80132e4:	781b      	ldrb	r3, [r3, #0]
 80132e6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80132e8:	68bb      	ldr	r3, [r7, #8]
 80132ea:	785b      	ldrb	r3, [r3, #1]
 80132ec:	2b01      	cmp	r3, #1
 80132ee:	f040 8181 	bne.w	80135f4 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80132f2:	68bb      	ldr	r3, [r7, #8]
 80132f4:	691b      	ldr	r3, [r3, #16]
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d132      	bne.n	8013360 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80132fa:	69bb      	ldr	r3, [r7, #24]
 80132fc:	015a      	lsls	r2, r3, #5
 80132fe:	69fb      	ldr	r3, [r7, #28]
 8013300:	4413      	add	r3, r2
 8013302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013306:	691a      	ldr	r2, [r3, #16]
 8013308:	69bb      	ldr	r3, [r7, #24]
 801330a:	0159      	lsls	r1, r3, #5
 801330c:	69fb      	ldr	r3, [r7, #28]
 801330e:	440b      	add	r3, r1
 8013310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013314:	4619      	mov	r1, r3
 8013316:	4ba5      	ldr	r3, [pc, #660]	; (80135ac <USB_EPStartXfer+0x2dc>)
 8013318:	4013      	ands	r3, r2
 801331a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801331c:	69bb      	ldr	r3, [r7, #24]
 801331e:	015a      	lsls	r2, r3, #5
 8013320:	69fb      	ldr	r3, [r7, #28]
 8013322:	4413      	add	r3, r2
 8013324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013328:	691b      	ldr	r3, [r3, #16]
 801332a:	69ba      	ldr	r2, [r7, #24]
 801332c:	0151      	lsls	r1, r2, #5
 801332e:	69fa      	ldr	r2, [r7, #28]
 8013330:	440a      	add	r2, r1
 8013332:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013336:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801333a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801333c:	69bb      	ldr	r3, [r7, #24]
 801333e:	015a      	lsls	r2, r3, #5
 8013340:	69fb      	ldr	r3, [r7, #28]
 8013342:	4413      	add	r3, r2
 8013344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013348:	691a      	ldr	r2, [r3, #16]
 801334a:	69bb      	ldr	r3, [r7, #24]
 801334c:	0159      	lsls	r1, r3, #5
 801334e:	69fb      	ldr	r3, [r7, #28]
 8013350:	440b      	add	r3, r1
 8013352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013356:	4619      	mov	r1, r3
 8013358:	4b95      	ldr	r3, [pc, #596]	; (80135b0 <USB_EPStartXfer+0x2e0>)
 801335a:	4013      	ands	r3, r2
 801335c:	610b      	str	r3, [r1, #16]
 801335e:	e092      	b.n	8013486 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013360:	69bb      	ldr	r3, [r7, #24]
 8013362:	015a      	lsls	r2, r3, #5
 8013364:	69fb      	ldr	r3, [r7, #28]
 8013366:	4413      	add	r3, r2
 8013368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801336c:	691a      	ldr	r2, [r3, #16]
 801336e:	69bb      	ldr	r3, [r7, #24]
 8013370:	0159      	lsls	r1, r3, #5
 8013372:	69fb      	ldr	r3, [r7, #28]
 8013374:	440b      	add	r3, r1
 8013376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801337a:	4619      	mov	r1, r3
 801337c:	4b8c      	ldr	r3, [pc, #560]	; (80135b0 <USB_EPStartXfer+0x2e0>)
 801337e:	4013      	ands	r3, r2
 8013380:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013382:	69bb      	ldr	r3, [r7, #24]
 8013384:	015a      	lsls	r2, r3, #5
 8013386:	69fb      	ldr	r3, [r7, #28]
 8013388:	4413      	add	r3, r2
 801338a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801338e:	691a      	ldr	r2, [r3, #16]
 8013390:	69bb      	ldr	r3, [r7, #24]
 8013392:	0159      	lsls	r1, r3, #5
 8013394:	69fb      	ldr	r3, [r7, #28]
 8013396:	440b      	add	r3, r1
 8013398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801339c:	4619      	mov	r1, r3
 801339e:	4b83      	ldr	r3, [pc, #524]	; (80135ac <USB_EPStartXfer+0x2dc>)
 80133a0:	4013      	ands	r3, r2
 80133a2:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80133a4:	69bb      	ldr	r3, [r7, #24]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d11a      	bne.n	80133e0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80133aa:	68bb      	ldr	r3, [r7, #8]
 80133ac:	691a      	ldr	r2, [r3, #16]
 80133ae:	68bb      	ldr	r3, [r7, #8]
 80133b0:	689b      	ldr	r3, [r3, #8]
 80133b2:	429a      	cmp	r2, r3
 80133b4:	d903      	bls.n	80133be <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80133b6:	68bb      	ldr	r3, [r7, #8]
 80133b8:	689a      	ldr	r2, [r3, #8]
 80133ba:	68bb      	ldr	r3, [r7, #8]
 80133bc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80133be:	69bb      	ldr	r3, [r7, #24]
 80133c0:	015a      	lsls	r2, r3, #5
 80133c2:	69fb      	ldr	r3, [r7, #28]
 80133c4:	4413      	add	r3, r2
 80133c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80133ca:	691b      	ldr	r3, [r3, #16]
 80133cc:	69ba      	ldr	r2, [r7, #24]
 80133ce:	0151      	lsls	r1, r2, #5
 80133d0:	69fa      	ldr	r2, [r7, #28]
 80133d2:	440a      	add	r2, r1
 80133d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80133d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80133dc:	6113      	str	r3, [r2, #16]
 80133de:	e01b      	b.n	8013418 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80133e0:	69bb      	ldr	r3, [r7, #24]
 80133e2:	015a      	lsls	r2, r3, #5
 80133e4:	69fb      	ldr	r3, [r7, #28]
 80133e6:	4413      	add	r3, r2
 80133e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80133ec:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80133ee:	68bb      	ldr	r3, [r7, #8]
 80133f0:	6919      	ldr	r1, [r3, #16]
 80133f2:	68bb      	ldr	r3, [r7, #8]
 80133f4:	689b      	ldr	r3, [r3, #8]
 80133f6:	440b      	add	r3, r1
 80133f8:	1e59      	subs	r1, r3, #1
 80133fa:	68bb      	ldr	r3, [r7, #8]
 80133fc:	689b      	ldr	r3, [r3, #8]
 80133fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8013402:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013404:	4b6b      	ldr	r3, [pc, #428]	; (80135b4 <USB_EPStartXfer+0x2e4>)
 8013406:	400b      	ands	r3, r1
 8013408:	69b9      	ldr	r1, [r7, #24]
 801340a:	0148      	lsls	r0, r1, #5
 801340c:	69f9      	ldr	r1, [r7, #28]
 801340e:	4401      	add	r1, r0
 8013410:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013414:	4313      	orrs	r3, r2
 8013416:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013418:	69bb      	ldr	r3, [r7, #24]
 801341a:	015a      	lsls	r2, r3, #5
 801341c:	69fb      	ldr	r3, [r7, #28]
 801341e:	4413      	add	r3, r2
 8013420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013424:	691a      	ldr	r2, [r3, #16]
 8013426:	68bb      	ldr	r3, [r7, #8]
 8013428:	691b      	ldr	r3, [r3, #16]
 801342a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801342e:	69b9      	ldr	r1, [r7, #24]
 8013430:	0148      	lsls	r0, r1, #5
 8013432:	69f9      	ldr	r1, [r7, #28]
 8013434:	4401      	add	r1, r0
 8013436:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801343a:	4313      	orrs	r3, r2
 801343c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801343e:	68bb      	ldr	r3, [r7, #8]
 8013440:	791b      	ldrb	r3, [r3, #4]
 8013442:	2b01      	cmp	r3, #1
 8013444:	d11f      	bne.n	8013486 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8013446:	69bb      	ldr	r3, [r7, #24]
 8013448:	015a      	lsls	r2, r3, #5
 801344a:	69fb      	ldr	r3, [r7, #28]
 801344c:	4413      	add	r3, r2
 801344e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013452:	691b      	ldr	r3, [r3, #16]
 8013454:	69ba      	ldr	r2, [r7, #24]
 8013456:	0151      	lsls	r1, r2, #5
 8013458:	69fa      	ldr	r2, [r7, #28]
 801345a:	440a      	add	r2, r1
 801345c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013460:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8013464:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8013466:	69bb      	ldr	r3, [r7, #24]
 8013468:	015a      	lsls	r2, r3, #5
 801346a:	69fb      	ldr	r3, [r7, #28]
 801346c:	4413      	add	r3, r2
 801346e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013472:	691b      	ldr	r3, [r3, #16]
 8013474:	69ba      	ldr	r2, [r7, #24]
 8013476:	0151      	lsls	r1, r2, #5
 8013478:	69fa      	ldr	r2, [r7, #28]
 801347a:	440a      	add	r2, r1
 801347c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013480:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013484:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8013486:	79fb      	ldrb	r3, [r7, #7]
 8013488:	2b01      	cmp	r3, #1
 801348a:	d14b      	bne.n	8013524 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801348c:	68bb      	ldr	r3, [r7, #8]
 801348e:	69db      	ldr	r3, [r3, #28]
 8013490:	2b00      	cmp	r3, #0
 8013492:	d009      	beq.n	80134a8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013494:	69bb      	ldr	r3, [r7, #24]
 8013496:	015a      	lsls	r2, r3, #5
 8013498:	69fb      	ldr	r3, [r7, #28]
 801349a:	4413      	add	r3, r2
 801349c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134a0:	461a      	mov	r2, r3
 80134a2:	68bb      	ldr	r3, [r7, #8]
 80134a4:	69db      	ldr	r3, [r3, #28]
 80134a6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80134a8:	68bb      	ldr	r3, [r7, #8]
 80134aa:	791b      	ldrb	r3, [r3, #4]
 80134ac:	2b01      	cmp	r3, #1
 80134ae:	d128      	bne.n	8013502 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80134b0:	69fb      	ldr	r3, [r7, #28]
 80134b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80134b6:	689b      	ldr	r3, [r3, #8]
 80134b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d110      	bne.n	80134e2 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80134c0:	69bb      	ldr	r3, [r7, #24]
 80134c2:	015a      	lsls	r2, r3, #5
 80134c4:	69fb      	ldr	r3, [r7, #28]
 80134c6:	4413      	add	r3, r2
 80134c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	69ba      	ldr	r2, [r7, #24]
 80134d0:	0151      	lsls	r1, r2, #5
 80134d2:	69fa      	ldr	r2, [r7, #28]
 80134d4:	440a      	add	r2, r1
 80134d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80134da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80134de:	6013      	str	r3, [r2, #0]
 80134e0:	e00f      	b.n	8013502 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80134e2:	69bb      	ldr	r3, [r7, #24]
 80134e4:	015a      	lsls	r2, r3, #5
 80134e6:	69fb      	ldr	r3, [r7, #28]
 80134e8:	4413      	add	r3, r2
 80134ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	69ba      	ldr	r2, [r7, #24]
 80134f2:	0151      	lsls	r1, r2, #5
 80134f4:	69fa      	ldr	r2, [r7, #28]
 80134f6:	440a      	add	r2, r1
 80134f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80134fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013500:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013502:	69bb      	ldr	r3, [r7, #24]
 8013504:	015a      	lsls	r2, r3, #5
 8013506:	69fb      	ldr	r3, [r7, #28]
 8013508:	4413      	add	r3, r2
 801350a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	69ba      	ldr	r2, [r7, #24]
 8013512:	0151      	lsls	r1, r2, #5
 8013514:	69fa      	ldr	r2, [r7, #28]
 8013516:	440a      	add	r2, r1
 8013518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801351c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013520:	6013      	str	r3, [r2, #0]
 8013522:	e16a      	b.n	80137fa <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013524:	69bb      	ldr	r3, [r7, #24]
 8013526:	015a      	lsls	r2, r3, #5
 8013528:	69fb      	ldr	r3, [r7, #28]
 801352a:	4413      	add	r3, r2
 801352c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	69ba      	ldr	r2, [r7, #24]
 8013534:	0151      	lsls	r1, r2, #5
 8013536:	69fa      	ldr	r2, [r7, #28]
 8013538:	440a      	add	r2, r1
 801353a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801353e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013542:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8013544:	68bb      	ldr	r3, [r7, #8]
 8013546:	791b      	ldrb	r3, [r3, #4]
 8013548:	2b01      	cmp	r3, #1
 801354a:	d015      	beq.n	8013578 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801354c:	68bb      	ldr	r3, [r7, #8]
 801354e:	691b      	ldr	r3, [r3, #16]
 8013550:	2b00      	cmp	r3, #0
 8013552:	f000 8152 	beq.w	80137fa <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013556:	69fb      	ldr	r3, [r7, #28]
 8013558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801355c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801355e:	68bb      	ldr	r3, [r7, #8]
 8013560:	781b      	ldrb	r3, [r3, #0]
 8013562:	f003 030f 	and.w	r3, r3, #15
 8013566:	2101      	movs	r1, #1
 8013568:	fa01 f303 	lsl.w	r3, r1, r3
 801356c:	69f9      	ldr	r1, [r7, #28]
 801356e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013572:	4313      	orrs	r3, r2
 8013574:	634b      	str	r3, [r1, #52]	; 0x34
 8013576:	e140      	b.n	80137fa <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013578:	69fb      	ldr	r3, [r7, #28]
 801357a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801357e:	689b      	ldr	r3, [r3, #8]
 8013580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013584:	2b00      	cmp	r3, #0
 8013586:	d117      	bne.n	80135b8 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013588:	69bb      	ldr	r3, [r7, #24]
 801358a:	015a      	lsls	r2, r3, #5
 801358c:	69fb      	ldr	r3, [r7, #28]
 801358e:	4413      	add	r3, r2
 8013590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	69ba      	ldr	r2, [r7, #24]
 8013598:	0151      	lsls	r1, r2, #5
 801359a:	69fa      	ldr	r2, [r7, #28]
 801359c:	440a      	add	r2, r1
 801359e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80135a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80135a6:	6013      	str	r3, [r2, #0]
 80135a8:	e016      	b.n	80135d8 <USB_EPStartXfer+0x308>
 80135aa:	bf00      	nop
 80135ac:	e007ffff 	.word	0xe007ffff
 80135b0:	fff80000 	.word	0xfff80000
 80135b4:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80135b8:	69bb      	ldr	r3, [r7, #24]
 80135ba:	015a      	lsls	r2, r3, #5
 80135bc:	69fb      	ldr	r3, [r7, #28]
 80135be:	4413      	add	r3, r2
 80135c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	69ba      	ldr	r2, [r7, #24]
 80135c8:	0151      	lsls	r1, r2, #5
 80135ca:	69fa      	ldr	r2, [r7, #28]
 80135cc:	440a      	add	r2, r1
 80135ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80135d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80135d6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80135d8:	68bb      	ldr	r3, [r7, #8]
 80135da:	68d9      	ldr	r1, [r3, #12]
 80135dc:	68bb      	ldr	r3, [r7, #8]
 80135de:	781a      	ldrb	r2, [r3, #0]
 80135e0:	68bb      	ldr	r3, [r7, #8]
 80135e2:	691b      	ldr	r3, [r3, #16]
 80135e4:	b298      	uxth	r0, r3
 80135e6:	79fb      	ldrb	r3, [r7, #7]
 80135e8:	9300      	str	r3, [sp, #0]
 80135ea:	4603      	mov	r3, r0
 80135ec:	68f8      	ldr	r0, [r7, #12]
 80135ee:	f000 f9b9 	bl	8013964 <USB_WritePacket>
 80135f2:	e102      	b.n	80137fa <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80135f4:	69bb      	ldr	r3, [r7, #24]
 80135f6:	015a      	lsls	r2, r3, #5
 80135f8:	69fb      	ldr	r3, [r7, #28]
 80135fa:	4413      	add	r3, r2
 80135fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013600:	691a      	ldr	r2, [r3, #16]
 8013602:	69bb      	ldr	r3, [r7, #24]
 8013604:	0159      	lsls	r1, r3, #5
 8013606:	69fb      	ldr	r3, [r7, #28]
 8013608:	440b      	add	r3, r1
 801360a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801360e:	4619      	mov	r1, r3
 8013610:	4b7c      	ldr	r3, [pc, #496]	; (8013804 <USB_EPStartXfer+0x534>)
 8013612:	4013      	ands	r3, r2
 8013614:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8013616:	69bb      	ldr	r3, [r7, #24]
 8013618:	015a      	lsls	r2, r3, #5
 801361a:	69fb      	ldr	r3, [r7, #28]
 801361c:	4413      	add	r3, r2
 801361e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013622:	691a      	ldr	r2, [r3, #16]
 8013624:	69bb      	ldr	r3, [r7, #24]
 8013626:	0159      	lsls	r1, r3, #5
 8013628:	69fb      	ldr	r3, [r7, #28]
 801362a:	440b      	add	r3, r1
 801362c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013630:	4619      	mov	r1, r3
 8013632:	4b75      	ldr	r3, [pc, #468]	; (8013808 <USB_EPStartXfer+0x538>)
 8013634:	4013      	ands	r3, r2
 8013636:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8013638:	69bb      	ldr	r3, [r7, #24]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d12f      	bne.n	801369e <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 801363e:	68bb      	ldr	r3, [r7, #8]
 8013640:	691b      	ldr	r3, [r3, #16]
 8013642:	2b00      	cmp	r3, #0
 8013644:	d003      	beq.n	801364e <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8013646:	68bb      	ldr	r3, [r7, #8]
 8013648:	689a      	ldr	r2, [r3, #8]
 801364a:	68bb      	ldr	r3, [r7, #8]
 801364c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 801364e:	68bb      	ldr	r3, [r7, #8]
 8013650:	689a      	ldr	r2, [r3, #8]
 8013652:	68bb      	ldr	r3, [r7, #8]
 8013654:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8013656:	69bb      	ldr	r3, [r7, #24]
 8013658:	015a      	lsls	r2, r3, #5
 801365a:	69fb      	ldr	r3, [r7, #28]
 801365c:	4413      	add	r3, r2
 801365e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013662:	691a      	ldr	r2, [r3, #16]
 8013664:	68bb      	ldr	r3, [r7, #8]
 8013666:	6a1b      	ldr	r3, [r3, #32]
 8013668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801366c:	69b9      	ldr	r1, [r7, #24]
 801366e:	0148      	lsls	r0, r1, #5
 8013670:	69f9      	ldr	r1, [r7, #28]
 8013672:	4401      	add	r1, r0
 8013674:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013678:	4313      	orrs	r3, r2
 801367a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801367c:	69bb      	ldr	r3, [r7, #24]
 801367e:	015a      	lsls	r2, r3, #5
 8013680:	69fb      	ldr	r3, [r7, #28]
 8013682:	4413      	add	r3, r2
 8013684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013688:	691b      	ldr	r3, [r3, #16]
 801368a:	69ba      	ldr	r2, [r7, #24]
 801368c:	0151      	lsls	r1, r2, #5
 801368e:	69fa      	ldr	r2, [r7, #28]
 8013690:	440a      	add	r2, r1
 8013692:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013696:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801369a:	6113      	str	r3, [r2, #16]
 801369c:	e05f      	b.n	801375e <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 801369e:	68bb      	ldr	r3, [r7, #8]
 80136a0:	691b      	ldr	r3, [r3, #16]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d123      	bne.n	80136ee <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80136a6:	69bb      	ldr	r3, [r7, #24]
 80136a8:	015a      	lsls	r2, r3, #5
 80136aa:	69fb      	ldr	r3, [r7, #28]
 80136ac:	4413      	add	r3, r2
 80136ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136b2:	691a      	ldr	r2, [r3, #16]
 80136b4:	68bb      	ldr	r3, [r7, #8]
 80136b6:	689b      	ldr	r3, [r3, #8]
 80136b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80136bc:	69b9      	ldr	r1, [r7, #24]
 80136be:	0148      	lsls	r0, r1, #5
 80136c0:	69f9      	ldr	r1, [r7, #28]
 80136c2:	4401      	add	r1, r0
 80136c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80136c8:	4313      	orrs	r3, r2
 80136ca:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80136cc:	69bb      	ldr	r3, [r7, #24]
 80136ce:	015a      	lsls	r2, r3, #5
 80136d0:	69fb      	ldr	r3, [r7, #28]
 80136d2:	4413      	add	r3, r2
 80136d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136d8:	691b      	ldr	r3, [r3, #16]
 80136da:	69ba      	ldr	r2, [r7, #24]
 80136dc:	0151      	lsls	r1, r2, #5
 80136de:	69fa      	ldr	r2, [r7, #28]
 80136e0:	440a      	add	r2, r1
 80136e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80136e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80136ea:	6113      	str	r3, [r2, #16]
 80136ec:	e037      	b.n	801375e <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80136ee:	68bb      	ldr	r3, [r7, #8]
 80136f0:	691a      	ldr	r2, [r3, #16]
 80136f2:	68bb      	ldr	r3, [r7, #8]
 80136f4:	689b      	ldr	r3, [r3, #8]
 80136f6:	4413      	add	r3, r2
 80136f8:	1e5a      	subs	r2, r3, #1
 80136fa:	68bb      	ldr	r3, [r7, #8]
 80136fc:	689b      	ldr	r3, [r3, #8]
 80136fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8013702:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8013704:	68bb      	ldr	r3, [r7, #8]
 8013706:	689b      	ldr	r3, [r3, #8]
 8013708:	8afa      	ldrh	r2, [r7, #22]
 801370a:	fb03 f202 	mul.w	r2, r3, r2
 801370e:	68bb      	ldr	r3, [r7, #8]
 8013710:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013712:	69bb      	ldr	r3, [r7, #24]
 8013714:	015a      	lsls	r2, r3, #5
 8013716:	69fb      	ldr	r3, [r7, #28]
 8013718:	4413      	add	r3, r2
 801371a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801371e:	691a      	ldr	r2, [r3, #16]
 8013720:	8afb      	ldrh	r3, [r7, #22]
 8013722:	04d9      	lsls	r1, r3, #19
 8013724:	4b39      	ldr	r3, [pc, #228]	; (801380c <USB_EPStartXfer+0x53c>)
 8013726:	400b      	ands	r3, r1
 8013728:	69b9      	ldr	r1, [r7, #24]
 801372a:	0148      	lsls	r0, r1, #5
 801372c:	69f9      	ldr	r1, [r7, #28]
 801372e:	4401      	add	r1, r0
 8013730:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013734:	4313      	orrs	r3, r2
 8013736:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8013738:	69bb      	ldr	r3, [r7, #24]
 801373a:	015a      	lsls	r2, r3, #5
 801373c:	69fb      	ldr	r3, [r7, #28]
 801373e:	4413      	add	r3, r2
 8013740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013744:	691a      	ldr	r2, [r3, #16]
 8013746:	68bb      	ldr	r3, [r7, #8]
 8013748:	6a1b      	ldr	r3, [r3, #32]
 801374a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801374e:	69b9      	ldr	r1, [r7, #24]
 8013750:	0148      	lsls	r0, r1, #5
 8013752:	69f9      	ldr	r1, [r7, #28]
 8013754:	4401      	add	r1, r0
 8013756:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801375a:	4313      	orrs	r3, r2
 801375c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 801375e:	79fb      	ldrb	r3, [r7, #7]
 8013760:	2b01      	cmp	r3, #1
 8013762:	d10d      	bne.n	8013780 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8013764:	68bb      	ldr	r3, [r7, #8]
 8013766:	68db      	ldr	r3, [r3, #12]
 8013768:	2b00      	cmp	r3, #0
 801376a:	d009      	beq.n	8013780 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801376c:	68bb      	ldr	r3, [r7, #8]
 801376e:	68d9      	ldr	r1, [r3, #12]
 8013770:	69bb      	ldr	r3, [r7, #24]
 8013772:	015a      	lsls	r2, r3, #5
 8013774:	69fb      	ldr	r3, [r7, #28]
 8013776:	4413      	add	r3, r2
 8013778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801377c:	460a      	mov	r2, r1
 801377e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8013780:	68bb      	ldr	r3, [r7, #8]
 8013782:	791b      	ldrb	r3, [r3, #4]
 8013784:	2b01      	cmp	r3, #1
 8013786:	d128      	bne.n	80137da <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013788:	69fb      	ldr	r3, [r7, #28]
 801378a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801378e:	689b      	ldr	r3, [r3, #8]
 8013790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013794:	2b00      	cmp	r3, #0
 8013796:	d110      	bne.n	80137ba <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8013798:	69bb      	ldr	r3, [r7, #24]
 801379a:	015a      	lsls	r2, r3, #5
 801379c:	69fb      	ldr	r3, [r7, #28]
 801379e:	4413      	add	r3, r2
 80137a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	69ba      	ldr	r2, [r7, #24]
 80137a8:	0151      	lsls	r1, r2, #5
 80137aa:	69fa      	ldr	r2, [r7, #28]
 80137ac:	440a      	add	r2, r1
 80137ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80137b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80137b6:	6013      	str	r3, [r2, #0]
 80137b8:	e00f      	b.n	80137da <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80137ba:	69bb      	ldr	r3, [r7, #24]
 80137bc:	015a      	lsls	r2, r3, #5
 80137be:	69fb      	ldr	r3, [r7, #28]
 80137c0:	4413      	add	r3, r2
 80137c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	69ba      	ldr	r2, [r7, #24]
 80137ca:	0151      	lsls	r1, r2, #5
 80137cc:	69fa      	ldr	r2, [r7, #28]
 80137ce:	440a      	add	r2, r1
 80137d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80137d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80137d8:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80137da:	69bb      	ldr	r3, [r7, #24]
 80137dc:	015a      	lsls	r2, r3, #5
 80137de:	69fb      	ldr	r3, [r7, #28]
 80137e0:	4413      	add	r3, r2
 80137e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	69ba      	ldr	r2, [r7, #24]
 80137ea:	0151      	lsls	r1, r2, #5
 80137ec:	69fa      	ldr	r2, [r7, #28]
 80137ee:	440a      	add	r2, r1
 80137f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80137f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80137f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80137fa:	2300      	movs	r3, #0
}
 80137fc:	4618      	mov	r0, r3
 80137fe:	3720      	adds	r7, #32
 8013800:	46bd      	mov	sp, r7
 8013802:	bd80      	pop	{r7, pc}
 8013804:	fff80000 	.word	0xfff80000
 8013808:	e007ffff 	.word	0xe007ffff
 801380c:	1ff80000 	.word	0x1ff80000

08013810 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013810:	b480      	push	{r7}
 8013812:	b087      	sub	sp, #28
 8013814:	af00      	add	r7, sp, #0
 8013816:	6078      	str	r0, [r7, #4]
 8013818:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801381a:	2300      	movs	r3, #0
 801381c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801381e:	2300      	movs	r3, #0
 8013820:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013826:	683b      	ldr	r3, [r7, #0]
 8013828:	785b      	ldrb	r3, [r3, #1]
 801382a:	2b01      	cmp	r3, #1
 801382c:	d14a      	bne.n	80138c4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801382e:	683b      	ldr	r3, [r7, #0]
 8013830:	781b      	ldrb	r3, [r3, #0]
 8013832:	015a      	lsls	r2, r3, #5
 8013834:	693b      	ldr	r3, [r7, #16]
 8013836:	4413      	add	r3, r2
 8013838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013842:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013846:	f040 8086 	bne.w	8013956 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801384a:	683b      	ldr	r3, [r7, #0]
 801384c:	781b      	ldrb	r3, [r3, #0]
 801384e:	015a      	lsls	r2, r3, #5
 8013850:	693b      	ldr	r3, [r7, #16]
 8013852:	4413      	add	r3, r2
 8013854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	683a      	ldr	r2, [r7, #0]
 801385c:	7812      	ldrb	r2, [r2, #0]
 801385e:	0151      	lsls	r1, r2, #5
 8013860:	693a      	ldr	r2, [r7, #16]
 8013862:	440a      	add	r2, r1
 8013864:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013868:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801386c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801386e:	683b      	ldr	r3, [r7, #0]
 8013870:	781b      	ldrb	r3, [r3, #0]
 8013872:	015a      	lsls	r2, r3, #5
 8013874:	693b      	ldr	r3, [r7, #16]
 8013876:	4413      	add	r3, r2
 8013878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	683a      	ldr	r2, [r7, #0]
 8013880:	7812      	ldrb	r2, [r2, #0]
 8013882:	0151      	lsls	r1, r2, #5
 8013884:	693a      	ldr	r2, [r7, #16]
 8013886:	440a      	add	r2, r1
 8013888:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801388c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013890:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	3301      	adds	r3, #1
 8013896:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	f242 7210 	movw	r2, #10000	; 0x2710
 801389e:	4293      	cmp	r3, r2
 80138a0:	d902      	bls.n	80138a8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80138a2:	2301      	movs	r3, #1
 80138a4:	75fb      	strb	r3, [r7, #23]
          break;
 80138a6:	e056      	b.n	8013956 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80138a8:	683b      	ldr	r3, [r7, #0]
 80138aa:	781b      	ldrb	r3, [r3, #0]
 80138ac:	015a      	lsls	r2, r3, #5
 80138ae:	693b      	ldr	r3, [r7, #16]
 80138b0:	4413      	add	r3, r2
 80138b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80138b6:	681b      	ldr	r3, [r3, #0]
 80138b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80138bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80138c0:	d0e7      	beq.n	8013892 <USB_EPStopXfer+0x82>
 80138c2:	e048      	b.n	8013956 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80138c4:	683b      	ldr	r3, [r7, #0]
 80138c6:	781b      	ldrb	r3, [r3, #0]
 80138c8:	015a      	lsls	r2, r3, #5
 80138ca:	693b      	ldr	r3, [r7, #16]
 80138cc:	4413      	add	r3, r2
 80138ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80138d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80138dc:	d13b      	bne.n	8013956 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80138de:	683b      	ldr	r3, [r7, #0]
 80138e0:	781b      	ldrb	r3, [r3, #0]
 80138e2:	015a      	lsls	r2, r3, #5
 80138e4:	693b      	ldr	r3, [r7, #16]
 80138e6:	4413      	add	r3, r2
 80138e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138ec:	681b      	ldr	r3, [r3, #0]
 80138ee:	683a      	ldr	r2, [r7, #0]
 80138f0:	7812      	ldrb	r2, [r2, #0]
 80138f2:	0151      	lsls	r1, r2, #5
 80138f4:	693a      	ldr	r2, [r7, #16]
 80138f6:	440a      	add	r2, r1
 80138f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80138fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013900:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8013902:	683b      	ldr	r3, [r7, #0]
 8013904:	781b      	ldrb	r3, [r3, #0]
 8013906:	015a      	lsls	r2, r3, #5
 8013908:	693b      	ldr	r3, [r7, #16]
 801390a:	4413      	add	r3, r2
 801390c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	683a      	ldr	r2, [r7, #0]
 8013914:	7812      	ldrb	r2, [r2, #0]
 8013916:	0151      	lsls	r1, r2, #5
 8013918:	693a      	ldr	r2, [r7, #16]
 801391a:	440a      	add	r2, r1
 801391c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013920:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013924:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	3301      	adds	r3, #1
 801392a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	f242 7210 	movw	r2, #10000	; 0x2710
 8013932:	4293      	cmp	r3, r2
 8013934:	d902      	bls.n	801393c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8013936:	2301      	movs	r3, #1
 8013938:	75fb      	strb	r3, [r7, #23]
          break;
 801393a:	e00c      	b.n	8013956 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 801393c:	683b      	ldr	r3, [r7, #0]
 801393e:	781b      	ldrb	r3, [r3, #0]
 8013940:	015a      	lsls	r2, r3, #5
 8013942:	693b      	ldr	r3, [r7, #16]
 8013944:	4413      	add	r3, r2
 8013946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013950:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013954:	d0e7      	beq.n	8013926 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8013956:	7dfb      	ldrb	r3, [r7, #23]
}
 8013958:	4618      	mov	r0, r3
 801395a:	371c      	adds	r7, #28
 801395c:	46bd      	mov	sp, r7
 801395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013962:	4770      	bx	lr

08013964 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8013964:	b480      	push	{r7}
 8013966:	b089      	sub	sp, #36	; 0x24
 8013968:	af00      	add	r7, sp, #0
 801396a:	60f8      	str	r0, [r7, #12]
 801396c:	60b9      	str	r1, [r7, #8]
 801396e:	4611      	mov	r1, r2
 8013970:	461a      	mov	r2, r3
 8013972:	460b      	mov	r3, r1
 8013974:	71fb      	strb	r3, [r7, #7]
 8013976:	4613      	mov	r3, r2
 8013978:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801397e:	68bb      	ldr	r3, [r7, #8]
 8013980:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8013982:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013986:	2b00      	cmp	r3, #0
 8013988:	d123      	bne.n	80139d2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801398a:	88bb      	ldrh	r3, [r7, #4]
 801398c:	3303      	adds	r3, #3
 801398e:	089b      	lsrs	r3, r3, #2
 8013990:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8013992:	2300      	movs	r3, #0
 8013994:	61bb      	str	r3, [r7, #24]
 8013996:	e018      	b.n	80139ca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013998:	79fb      	ldrb	r3, [r7, #7]
 801399a:	031a      	lsls	r2, r3, #12
 801399c:	697b      	ldr	r3, [r7, #20]
 801399e:	4413      	add	r3, r2
 80139a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80139a4:	461a      	mov	r2, r3
 80139a6:	69fb      	ldr	r3, [r7, #28]
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80139ac:	69fb      	ldr	r3, [r7, #28]
 80139ae:	3301      	adds	r3, #1
 80139b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80139b2:	69fb      	ldr	r3, [r7, #28]
 80139b4:	3301      	adds	r3, #1
 80139b6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80139b8:	69fb      	ldr	r3, [r7, #28]
 80139ba:	3301      	adds	r3, #1
 80139bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80139be:	69fb      	ldr	r3, [r7, #28]
 80139c0:	3301      	adds	r3, #1
 80139c2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80139c4:	69bb      	ldr	r3, [r7, #24]
 80139c6:	3301      	adds	r3, #1
 80139c8:	61bb      	str	r3, [r7, #24]
 80139ca:	69ba      	ldr	r2, [r7, #24]
 80139cc:	693b      	ldr	r3, [r7, #16]
 80139ce:	429a      	cmp	r2, r3
 80139d0:	d3e2      	bcc.n	8013998 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80139d2:	2300      	movs	r3, #0
}
 80139d4:	4618      	mov	r0, r3
 80139d6:	3724      	adds	r7, #36	; 0x24
 80139d8:	46bd      	mov	sp, r7
 80139da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139de:	4770      	bx	lr

080139e0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80139e0:	b480      	push	{r7}
 80139e2:	b08b      	sub	sp, #44	; 0x2c
 80139e4:	af00      	add	r7, sp, #0
 80139e6:	60f8      	str	r0, [r7, #12]
 80139e8:	60b9      	str	r1, [r7, #8]
 80139ea:	4613      	mov	r3, r2
 80139ec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80139f2:	68bb      	ldr	r3, [r7, #8]
 80139f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80139f6:	88fb      	ldrh	r3, [r7, #6]
 80139f8:	089b      	lsrs	r3, r3, #2
 80139fa:	b29b      	uxth	r3, r3
 80139fc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80139fe:	88fb      	ldrh	r3, [r7, #6]
 8013a00:	f003 0303 	and.w	r3, r3, #3
 8013a04:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8013a06:	2300      	movs	r3, #0
 8013a08:	623b      	str	r3, [r7, #32]
 8013a0a:	e014      	b.n	8013a36 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013a0c:	69bb      	ldr	r3, [r7, #24]
 8013a0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013a12:	681a      	ldr	r2, [r3, #0]
 8013a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a16:	601a      	str	r2, [r3, #0]
    pDest++;
 8013a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a1a:	3301      	adds	r3, #1
 8013a1c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a20:	3301      	adds	r3, #1
 8013a22:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a26:	3301      	adds	r3, #1
 8013a28:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a2c:	3301      	adds	r3, #1
 8013a2e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8013a30:	6a3b      	ldr	r3, [r7, #32]
 8013a32:	3301      	adds	r3, #1
 8013a34:	623b      	str	r3, [r7, #32]
 8013a36:	6a3a      	ldr	r2, [r7, #32]
 8013a38:	697b      	ldr	r3, [r7, #20]
 8013a3a:	429a      	cmp	r2, r3
 8013a3c:	d3e6      	bcc.n	8013a0c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8013a3e:	8bfb      	ldrh	r3, [r7, #30]
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d01e      	beq.n	8013a82 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013a44:	2300      	movs	r3, #0
 8013a46:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013a48:	69bb      	ldr	r3, [r7, #24]
 8013a4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013a4e:	461a      	mov	r2, r3
 8013a50:	f107 0310 	add.w	r3, r7, #16
 8013a54:	6812      	ldr	r2, [r2, #0]
 8013a56:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013a58:	693a      	ldr	r2, [r7, #16]
 8013a5a:	6a3b      	ldr	r3, [r7, #32]
 8013a5c:	b2db      	uxtb	r3, r3
 8013a5e:	00db      	lsls	r3, r3, #3
 8013a60:	fa22 f303 	lsr.w	r3, r2, r3
 8013a64:	b2da      	uxtb	r2, r3
 8013a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a68:	701a      	strb	r2, [r3, #0]
      i++;
 8013a6a:	6a3b      	ldr	r3, [r7, #32]
 8013a6c:	3301      	adds	r3, #1
 8013a6e:	623b      	str	r3, [r7, #32]
      pDest++;
 8013a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a72:	3301      	adds	r3, #1
 8013a74:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8013a76:	8bfb      	ldrh	r3, [r7, #30]
 8013a78:	3b01      	subs	r3, #1
 8013a7a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8013a7c:	8bfb      	ldrh	r3, [r7, #30]
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d1ea      	bne.n	8013a58 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8013a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013a84:	4618      	mov	r0, r3
 8013a86:	372c      	adds	r7, #44	; 0x2c
 8013a88:	46bd      	mov	sp, r7
 8013a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a8e:	4770      	bx	lr

08013a90 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013a90:	b480      	push	{r7}
 8013a92:	b085      	sub	sp, #20
 8013a94:	af00      	add	r7, sp, #0
 8013a96:	6078      	str	r0, [r7, #4]
 8013a98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013a9e:	683b      	ldr	r3, [r7, #0]
 8013aa0:	781b      	ldrb	r3, [r3, #0]
 8013aa2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013aa4:	683b      	ldr	r3, [r7, #0]
 8013aa6:	785b      	ldrb	r3, [r3, #1]
 8013aa8:	2b01      	cmp	r3, #1
 8013aaa:	d12c      	bne.n	8013b06 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013aac:	68bb      	ldr	r3, [r7, #8]
 8013aae:	015a      	lsls	r2, r3, #5
 8013ab0:	68fb      	ldr	r3, [r7, #12]
 8013ab2:	4413      	add	r3, r2
 8013ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	db12      	blt.n	8013ae4 <USB_EPSetStall+0x54>
 8013abe:	68bb      	ldr	r3, [r7, #8]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d00f      	beq.n	8013ae4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013ac4:	68bb      	ldr	r3, [r7, #8]
 8013ac6:	015a      	lsls	r2, r3, #5
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	4413      	add	r3, r2
 8013acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	68ba      	ldr	r2, [r7, #8]
 8013ad4:	0151      	lsls	r1, r2, #5
 8013ad6:	68fa      	ldr	r2, [r7, #12]
 8013ad8:	440a      	add	r2, r1
 8013ada:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013ade:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013ae2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013ae4:	68bb      	ldr	r3, [r7, #8]
 8013ae6:	015a      	lsls	r2, r3, #5
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	4413      	add	r3, r2
 8013aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	68ba      	ldr	r2, [r7, #8]
 8013af4:	0151      	lsls	r1, r2, #5
 8013af6:	68fa      	ldr	r2, [r7, #12]
 8013af8:	440a      	add	r2, r1
 8013afa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013afe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013b02:	6013      	str	r3, [r2, #0]
 8013b04:	e02b      	b.n	8013b5e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013b06:	68bb      	ldr	r3, [r7, #8]
 8013b08:	015a      	lsls	r2, r3, #5
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	4413      	add	r3, r2
 8013b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b12:	681b      	ldr	r3, [r3, #0]
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	db12      	blt.n	8013b3e <USB_EPSetStall+0xae>
 8013b18:	68bb      	ldr	r3, [r7, #8]
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d00f      	beq.n	8013b3e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013b1e:	68bb      	ldr	r3, [r7, #8]
 8013b20:	015a      	lsls	r2, r3, #5
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	4413      	add	r3, r2
 8013b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	68ba      	ldr	r2, [r7, #8]
 8013b2e:	0151      	lsls	r1, r2, #5
 8013b30:	68fa      	ldr	r2, [r7, #12]
 8013b32:	440a      	add	r2, r1
 8013b34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013b38:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013b3c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8013b3e:	68bb      	ldr	r3, [r7, #8]
 8013b40:	015a      	lsls	r2, r3, #5
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	4413      	add	r3, r2
 8013b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b4a:	681b      	ldr	r3, [r3, #0]
 8013b4c:	68ba      	ldr	r2, [r7, #8]
 8013b4e:	0151      	lsls	r1, r2, #5
 8013b50:	68fa      	ldr	r2, [r7, #12]
 8013b52:	440a      	add	r2, r1
 8013b54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013b58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013b5c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013b5e:	2300      	movs	r3, #0
}
 8013b60:	4618      	mov	r0, r3
 8013b62:	3714      	adds	r7, #20
 8013b64:	46bd      	mov	sp, r7
 8013b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b6a:	4770      	bx	lr

08013b6c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013b6c:	b480      	push	{r7}
 8013b6e:	b085      	sub	sp, #20
 8013b70:	af00      	add	r7, sp, #0
 8013b72:	6078      	str	r0, [r7, #4]
 8013b74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013b7a:	683b      	ldr	r3, [r7, #0]
 8013b7c:	781b      	ldrb	r3, [r3, #0]
 8013b7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013b80:	683b      	ldr	r3, [r7, #0]
 8013b82:	785b      	ldrb	r3, [r3, #1]
 8013b84:	2b01      	cmp	r3, #1
 8013b86:	d128      	bne.n	8013bda <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013b88:	68bb      	ldr	r3, [r7, #8]
 8013b8a:	015a      	lsls	r2, r3, #5
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	4413      	add	r3, r2
 8013b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	68ba      	ldr	r2, [r7, #8]
 8013b98:	0151      	lsls	r1, r2, #5
 8013b9a:	68fa      	ldr	r2, [r7, #12]
 8013b9c:	440a      	add	r2, r1
 8013b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013ba2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013ba6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013ba8:	683b      	ldr	r3, [r7, #0]
 8013baa:	791b      	ldrb	r3, [r3, #4]
 8013bac:	2b03      	cmp	r3, #3
 8013bae:	d003      	beq.n	8013bb8 <USB_EPClearStall+0x4c>
 8013bb0:	683b      	ldr	r3, [r7, #0]
 8013bb2:	791b      	ldrb	r3, [r3, #4]
 8013bb4:	2b02      	cmp	r3, #2
 8013bb6:	d138      	bne.n	8013c2a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013bb8:	68bb      	ldr	r3, [r7, #8]
 8013bba:	015a      	lsls	r2, r3, #5
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	4413      	add	r3, r2
 8013bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	68ba      	ldr	r2, [r7, #8]
 8013bc8:	0151      	lsls	r1, r2, #5
 8013bca:	68fa      	ldr	r2, [r7, #12]
 8013bcc:	440a      	add	r2, r1
 8013bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013bd6:	6013      	str	r3, [r2, #0]
 8013bd8:	e027      	b.n	8013c2a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8013bda:	68bb      	ldr	r3, [r7, #8]
 8013bdc:	015a      	lsls	r2, r3, #5
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	4413      	add	r3, r2
 8013be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	68ba      	ldr	r2, [r7, #8]
 8013bea:	0151      	lsls	r1, r2, #5
 8013bec:	68fa      	ldr	r2, [r7, #12]
 8013bee:	440a      	add	r2, r1
 8013bf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013bf4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013bf8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013bfa:	683b      	ldr	r3, [r7, #0]
 8013bfc:	791b      	ldrb	r3, [r3, #4]
 8013bfe:	2b03      	cmp	r3, #3
 8013c00:	d003      	beq.n	8013c0a <USB_EPClearStall+0x9e>
 8013c02:	683b      	ldr	r3, [r7, #0]
 8013c04:	791b      	ldrb	r3, [r3, #4]
 8013c06:	2b02      	cmp	r3, #2
 8013c08:	d10f      	bne.n	8013c2a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013c0a:	68bb      	ldr	r3, [r7, #8]
 8013c0c:	015a      	lsls	r2, r3, #5
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	4413      	add	r3, r2
 8013c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	68ba      	ldr	r2, [r7, #8]
 8013c1a:	0151      	lsls	r1, r2, #5
 8013c1c:	68fa      	ldr	r2, [r7, #12]
 8013c1e:	440a      	add	r2, r1
 8013c20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013c28:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8013c2a:	2300      	movs	r3, #0
}
 8013c2c:	4618      	mov	r0, r3
 8013c2e:	3714      	adds	r7, #20
 8013c30:	46bd      	mov	sp, r7
 8013c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c36:	4770      	bx	lr

08013c38 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8013c38:	b480      	push	{r7}
 8013c3a:	b085      	sub	sp, #20
 8013c3c:	af00      	add	r7, sp, #0
 8013c3e:	6078      	str	r0, [r7, #4]
 8013c40:	460b      	mov	r3, r1
 8013c42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	68fa      	ldr	r2, [r7, #12]
 8013c52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013c56:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8013c5a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c62:	681a      	ldr	r2, [r3, #0]
 8013c64:	78fb      	ldrb	r3, [r7, #3]
 8013c66:	011b      	lsls	r3, r3, #4
 8013c68:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8013c6c:	68f9      	ldr	r1, [r7, #12]
 8013c6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013c72:	4313      	orrs	r3, r2
 8013c74:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8013c76:	2300      	movs	r3, #0
}
 8013c78:	4618      	mov	r0, r3
 8013c7a:	3714      	adds	r7, #20
 8013c7c:	46bd      	mov	sp, r7
 8013c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c82:	4770      	bx	lr

08013c84 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013c84:	b480      	push	{r7}
 8013c86:	b085      	sub	sp, #20
 8013c88:	af00      	add	r7, sp, #0
 8013c8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	68fa      	ldr	r2, [r7, #12]
 8013c9a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013c9e:	f023 0303 	bic.w	r3, r3, #3
 8013ca2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013caa:	685b      	ldr	r3, [r3, #4]
 8013cac:	68fa      	ldr	r2, [r7, #12]
 8013cae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013cb2:	f023 0302 	bic.w	r3, r3, #2
 8013cb6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013cb8:	2300      	movs	r3, #0
}
 8013cba:	4618      	mov	r0, r3
 8013cbc:	3714      	adds	r7, #20
 8013cbe:	46bd      	mov	sp, r7
 8013cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc4:	4770      	bx	lr

08013cc6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013cc6:	b480      	push	{r7}
 8013cc8:	b085      	sub	sp, #20
 8013cca:	af00      	add	r7, sp, #0
 8013ccc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	68fa      	ldr	r2, [r7, #12]
 8013cdc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013ce0:	f023 0303 	bic.w	r3, r3, #3
 8013ce4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013cec:	685b      	ldr	r3, [r3, #4]
 8013cee:	68fa      	ldr	r2, [r7, #12]
 8013cf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013cf4:	f043 0302 	orr.w	r3, r3, #2
 8013cf8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013cfa:	2300      	movs	r3, #0
}
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	3714      	adds	r7, #20
 8013d00:	46bd      	mov	sp, r7
 8013d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d06:	4770      	bx	lr

08013d08 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8013d08:	b480      	push	{r7}
 8013d0a:	b085      	sub	sp, #20
 8013d0c:	af00      	add	r7, sp, #0
 8013d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	695b      	ldr	r3, [r3, #20]
 8013d14:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	699b      	ldr	r3, [r3, #24]
 8013d1a:	68fa      	ldr	r2, [r7, #12]
 8013d1c:	4013      	ands	r3, r2
 8013d1e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013d20:	68fb      	ldr	r3, [r7, #12]
}
 8013d22:	4618      	mov	r0, r3
 8013d24:	3714      	adds	r7, #20
 8013d26:	46bd      	mov	sp, r7
 8013d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d2c:	4770      	bx	lr

08013d2e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013d2e:	b480      	push	{r7}
 8013d30:	b085      	sub	sp, #20
 8013d32:	af00      	add	r7, sp, #0
 8013d34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013d3a:	68fb      	ldr	r3, [r7, #12]
 8013d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d40:	699b      	ldr	r3, [r3, #24]
 8013d42:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d4a:	69db      	ldr	r3, [r3, #28]
 8013d4c:	68ba      	ldr	r2, [r7, #8]
 8013d4e:	4013      	ands	r3, r2
 8013d50:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8013d52:	68bb      	ldr	r3, [r7, #8]
 8013d54:	0c1b      	lsrs	r3, r3, #16
}
 8013d56:	4618      	mov	r0, r3
 8013d58:	3714      	adds	r7, #20
 8013d5a:	46bd      	mov	sp, r7
 8013d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d60:	4770      	bx	lr

08013d62 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013d62:	b480      	push	{r7}
 8013d64:	b085      	sub	sp, #20
 8013d66:	af00      	add	r7, sp, #0
 8013d68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d74:	699b      	ldr	r3, [r3, #24]
 8013d76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d7e:	69db      	ldr	r3, [r3, #28]
 8013d80:	68ba      	ldr	r2, [r7, #8]
 8013d82:	4013      	ands	r3, r2
 8013d84:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8013d86:	68bb      	ldr	r3, [r7, #8]
 8013d88:	b29b      	uxth	r3, r3
}
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	3714      	adds	r7, #20
 8013d8e:	46bd      	mov	sp, r7
 8013d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d94:	4770      	bx	lr

08013d96 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013d96:	b480      	push	{r7}
 8013d98:	b085      	sub	sp, #20
 8013d9a:	af00      	add	r7, sp, #0
 8013d9c:	6078      	str	r0, [r7, #4]
 8013d9e:	460b      	mov	r3, r1
 8013da0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8013da6:	78fb      	ldrb	r3, [r7, #3]
 8013da8:	015a      	lsls	r2, r3, #5
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	4413      	add	r3, r2
 8013dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013db2:	689b      	ldr	r3, [r3, #8]
 8013db4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013dbc:	695b      	ldr	r3, [r3, #20]
 8013dbe:	68ba      	ldr	r2, [r7, #8]
 8013dc0:	4013      	ands	r3, r2
 8013dc2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013dc4:	68bb      	ldr	r3, [r7, #8]
}
 8013dc6:	4618      	mov	r0, r3
 8013dc8:	3714      	adds	r7, #20
 8013dca:	46bd      	mov	sp, r7
 8013dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dd0:	4770      	bx	lr

08013dd2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013dd2:	b480      	push	{r7}
 8013dd4:	b087      	sub	sp, #28
 8013dd6:	af00      	add	r7, sp, #0
 8013dd8:	6078      	str	r0, [r7, #4]
 8013dda:	460b      	mov	r3, r1
 8013ddc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8013de2:	697b      	ldr	r3, [r7, #20]
 8013de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013de8:	691b      	ldr	r3, [r3, #16]
 8013dea:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013dec:	697b      	ldr	r3, [r7, #20]
 8013dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013df4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8013df6:	78fb      	ldrb	r3, [r7, #3]
 8013df8:	f003 030f 	and.w	r3, r3, #15
 8013dfc:	68fa      	ldr	r2, [r7, #12]
 8013dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8013e02:	01db      	lsls	r3, r3, #7
 8013e04:	b2db      	uxtb	r3, r3
 8013e06:	693a      	ldr	r2, [r7, #16]
 8013e08:	4313      	orrs	r3, r2
 8013e0a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013e0c:	78fb      	ldrb	r3, [r7, #3]
 8013e0e:	015a      	lsls	r2, r3, #5
 8013e10:	697b      	ldr	r3, [r7, #20]
 8013e12:	4413      	add	r3, r2
 8013e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e18:	689b      	ldr	r3, [r3, #8]
 8013e1a:	693a      	ldr	r2, [r7, #16]
 8013e1c:	4013      	ands	r3, r2
 8013e1e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013e20:	68bb      	ldr	r3, [r7, #8]
}
 8013e22:	4618      	mov	r0, r3
 8013e24:	371c      	adds	r7, #28
 8013e26:	46bd      	mov	sp, r7
 8013e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e2c:	4770      	bx	lr

08013e2e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013e2e:	b480      	push	{r7}
 8013e30:	b083      	sub	sp, #12
 8013e32:	af00      	add	r7, sp, #0
 8013e34:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	695b      	ldr	r3, [r3, #20]
 8013e3a:	f003 0301 	and.w	r3, r3, #1
}
 8013e3e:	4618      	mov	r0, r3
 8013e40:	370c      	adds	r7, #12
 8013e42:	46bd      	mov	sp, r7
 8013e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e48:	4770      	bx	lr
	...

08013e4c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8013e4c:	b480      	push	{r7}
 8013e4e:	b085      	sub	sp, #20
 8013e50:	af00      	add	r7, sp, #0
 8013e52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e5e:	681a      	ldr	r2, [r3, #0]
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e66:	4619      	mov	r1, r3
 8013e68:	4b09      	ldr	r3, [pc, #36]	; (8013e90 <USB_ActivateSetup+0x44>)
 8013e6a:	4013      	ands	r3, r2
 8013e6c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e74:	685b      	ldr	r3, [r3, #4]
 8013e76:	68fa      	ldr	r2, [r7, #12]
 8013e78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013e80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013e82:	2300      	movs	r3, #0
}
 8013e84:	4618      	mov	r0, r3
 8013e86:	3714      	adds	r7, #20
 8013e88:	46bd      	mov	sp, r7
 8013e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e8e:	4770      	bx	lr
 8013e90:	fffff800 	.word	0xfffff800

08013e94 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8013e94:	b480      	push	{r7}
 8013e96:	b087      	sub	sp, #28
 8013e98:	af00      	add	r7, sp, #0
 8013e9a:	60f8      	str	r0, [r7, #12]
 8013e9c:	460b      	mov	r3, r1
 8013e9e:	607a      	str	r2, [r7, #4]
 8013ea0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	333c      	adds	r3, #60	; 0x3c
 8013eaa:	3304      	adds	r3, #4
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8013eb0:	693b      	ldr	r3, [r7, #16]
 8013eb2:	4a26      	ldr	r2, [pc, #152]	; (8013f4c <USB_EP0_OutStart+0xb8>)
 8013eb4:	4293      	cmp	r3, r2
 8013eb6:	d90a      	bls.n	8013ece <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013eb8:	697b      	ldr	r3, [r7, #20]
 8013eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013ec4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013ec8:	d101      	bne.n	8013ece <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8013eca:	2300      	movs	r3, #0
 8013ecc:	e037      	b.n	8013f3e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8013ece:	697b      	ldr	r3, [r7, #20]
 8013ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ed4:	461a      	mov	r2, r3
 8013ed6:	2300      	movs	r3, #0
 8013ed8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013eda:	697b      	ldr	r3, [r7, #20]
 8013edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ee0:	691b      	ldr	r3, [r3, #16]
 8013ee2:	697a      	ldr	r2, [r7, #20]
 8013ee4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013ee8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013eec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8013eee:	697b      	ldr	r3, [r7, #20]
 8013ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ef4:	691b      	ldr	r3, [r3, #16]
 8013ef6:	697a      	ldr	r2, [r7, #20]
 8013ef8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013efc:	f043 0318 	orr.w	r3, r3, #24
 8013f00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8013f02:	697b      	ldr	r3, [r7, #20]
 8013f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f08:	691b      	ldr	r3, [r3, #16]
 8013f0a:	697a      	ldr	r2, [r7, #20]
 8013f0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013f10:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8013f14:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8013f16:	7afb      	ldrb	r3, [r7, #11]
 8013f18:	2b01      	cmp	r3, #1
 8013f1a:	d10f      	bne.n	8013f3c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8013f1c:	697b      	ldr	r3, [r7, #20]
 8013f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f22:	461a      	mov	r2, r3
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8013f28:	697b      	ldr	r3, [r7, #20]
 8013f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	697a      	ldr	r2, [r7, #20]
 8013f32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013f36:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8013f3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013f3c:	2300      	movs	r3, #0
}
 8013f3e:	4618      	mov	r0, r3
 8013f40:	371c      	adds	r7, #28
 8013f42:	46bd      	mov	sp, r7
 8013f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f48:	4770      	bx	lr
 8013f4a:	bf00      	nop
 8013f4c:	4f54300a 	.word	0x4f54300a

08013f50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013f50:	b480      	push	{r7}
 8013f52:	b085      	sub	sp, #20
 8013f54:	af00      	add	r7, sp, #0
 8013f56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013f58:	2300      	movs	r3, #0
 8013f5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	3301      	adds	r3, #1
 8013f60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	4a13      	ldr	r2, [pc, #76]	; (8013fb4 <USB_CoreReset+0x64>)
 8013f66:	4293      	cmp	r3, r2
 8013f68:	d901      	bls.n	8013f6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8013f6a:	2303      	movs	r3, #3
 8013f6c:	e01b      	b.n	8013fa6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	691b      	ldr	r3, [r3, #16]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	daf2      	bge.n	8013f5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8013f76:	2300      	movs	r3, #0
 8013f78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	691b      	ldr	r3, [r3, #16]
 8013f7e:	f043 0201 	orr.w	r2, r3, #1
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	3301      	adds	r3, #1
 8013f8a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	4a09      	ldr	r2, [pc, #36]	; (8013fb4 <USB_CoreReset+0x64>)
 8013f90:	4293      	cmp	r3, r2
 8013f92:	d901      	bls.n	8013f98 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8013f94:	2303      	movs	r3, #3
 8013f96:	e006      	b.n	8013fa6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	691b      	ldr	r3, [r3, #16]
 8013f9c:	f003 0301 	and.w	r3, r3, #1
 8013fa0:	2b01      	cmp	r3, #1
 8013fa2:	d0f0      	beq.n	8013f86 <USB_CoreReset+0x36>

  return HAL_OK;
 8013fa4:	2300      	movs	r3, #0
}
 8013fa6:	4618      	mov	r0, r3
 8013fa8:	3714      	adds	r7, #20
 8013faa:	46bd      	mov	sp, r7
 8013fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fb0:	4770      	bx	lr
 8013fb2:	bf00      	nop
 8013fb4:	00030d40 	.word	0x00030d40

08013fb8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8013fb8:	b580      	push	{r7, lr}
 8013fba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8013fbc:	4904      	ldr	r1, [pc, #16]	; (8013fd0 <MX_FATFS_Init+0x18>)
 8013fbe:	4805      	ldr	r0, [pc, #20]	; (8013fd4 <MX_FATFS_Init+0x1c>)
 8013fc0:	f002 fa56 	bl	8016470 <FATFS_LinkDriver>
 8013fc4:	4603      	mov	r3, r0
 8013fc6:	461a      	mov	r2, r3
 8013fc8:	4b03      	ldr	r3, [pc, #12]	; (8013fd8 <MX_FATFS_Init+0x20>)
 8013fca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8013fcc:	bf00      	nop
 8013fce:	bd80      	pop	{r7, pc}
 8013fd0:	24001488 	.word	0x24001488
 8013fd4:	08017ae0 	.word	0x08017ae0
 8013fd8:	24001484 	.word	0x24001484

08013fdc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8013fdc:	b580      	push	{r7, lr}
 8013fde:	b082      	sub	sp, #8
 8013fe0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8013fe2:	2300      	movs	r3, #0
 8013fe4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8013fe6:	f000 f885 	bl	80140f4 <BSP_SD_IsDetected>
 8013fea:	4603      	mov	r3, r0
 8013fec:	2b01      	cmp	r3, #1
 8013fee:	d001      	beq.n	8013ff4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8013ff0:	2302      	movs	r3, #2
 8013ff2:	e012      	b.n	801401a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 8013ff4:	480b      	ldr	r0, [pc, #44]	; (8014024 <BSP_SD_Init+0x48>)
 8013ff6:	f7f8 ff99 	bl	800cf2c <HAL_SD_Init>
 8013ffa:	4603      	mov	r3, r0
 8013ffc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8013ffe:	79fb      	ldrb	r3, [r7, #7]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d109      	bne.n	8014018 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8014004:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8014008:	4806      	ldr	r0, [pc, #24]	; (8014024 <BSP_SD_Init+0x48>)
 801400a:	f7f9 fe4f 	bl	800dcac <HAL_SD_ConfigWideBusOperation>
 801400e:	4603      	mov	r3, r0
 8014010:	2b00      	cmp	r3, #0
 8014012:	d001      	beq.n	8014018 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8014014:	2301      	movs	r3, #1
 8014016:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8014018:	79fb      	ldrb	r3, [r7, #7]
}
 801401a:	4618      	mov	r0, r3
 801401c:	3708      	adds	r7, #8
 801401e:	46bd      	mov	sp, r7
 8014020:	bd80      	pop	{r7, pc}
 8014022:	bf00      	nop
 8014024:	24000db8 	.word	0x24000db8

08014028 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8014028:	b580      	push	{r7, lr}
 801402a:	b086      	sub	sp, #24
 801402c:	af00      	add	r7, sp, #0
 801402e:	60f8      	str	r0, [r7, #12]
 8014030:	60b9      	str	r1, [r7, #8]
 8014032:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014034:	2300      	movs	r3, #0
 8014036:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	68ba      	ldr	r2, [r7, #8]
 801403c:	68f9      	ldr	r1, [r7, #12]
 801403e:	4806      	ldr	r0, [pc, #24]	; (8014058 <BSP_SD_ReadBlocks_DMA+0x30>)
 8014040:	f7f9 f894 	bl	800d16c <HAL_SD_ReadBlocks_DMA>
 8014044:	4603      	mov	r3, r0
 8014046:	2b00      	cmp	r3, #0
 8014048:	d001      	beq.n	801404e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801404a:	2301      	movs	r3, #1
 801404c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801404e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014050:	4618      	mov	r0, r3
 8014052:	3718      	adds	r7, #24
 8014054:	46bd      	mov	sp, r7
 8014056:	bd80      	pop	{r7, pc}
 8014058:	24000db8 	.word	0x24000db8

0801405c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 801405c:	b580      	push	{r7, lr}
 801405e:	b086      	sub	sp, #24
 8014060:	af00      	add	r7, sp, #0
 8014062:	60f8      	str	r0, [r7, #12]
 8014064:	60b9      	str	r1, [r7, #8]
 8014066:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014068:	2300      	movs	r3, #0
 801406a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	68ba      	ldr	r2, [r7, #8]
 8014070:	68f9      	ldr	r1, [r7, #12]
 8014072:	4806      	ldr	r0, [pc, #24]	; (801408c <BSP_SD_WriteBlocks_DMA+0x30>)
 8014074:	f7f9 f922 	bl	800d2bc <HAL_SD_WriteBlocks_DMA>
 8014078:	4603      	mov	r3, r0
 801407a:	2b00      	cmp	r3, #0
 801407c:	d001      	beq.n	8014082 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801407e:	2301      	movs	r3, #1
 8014080:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8014082:	7dfb      	ldrb	r3, [r7, #23]
}
 8014084:	4618      	mov	r0, r3
 8014086:	3718      	adds	r7, #24
 8014088:	46bd      	mov	sp, r7
 801408a:	bd80      	pop	{r7, pc}
 801408c:	24000db8 	.word	0x24000db8

08014090 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8014090:	b580      	push	{r7, lr}
 8014092:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8014094:	4805      	ldr	r0, [pc, #20]	; (80140ac <BSP_SD_GetCardState+0x1c>)
 8014096:	f7f9 ff1b 	bl	800ded0 <HAL_SD_GetCardState>
 801409a:	4603      	mov	r3, r0
 801409c:	2b04      	cmp	r3, #4
 801409e:	bf14      	ite	ne
 80140a0:	2301      	movne	r3, #1
 80140a2:	2300      	moveq	r3, #0
 80140a4:	b2db      	uxtb	r3, r3
}
 80140a6:	4618      	mov	r0, r3
 80140a8:	bd80      	pop	{r7, pc}
 80140aa:	bf00      	nop
 80140ac:	24000db8 	.word	0x24000db8

080140b0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80140b0:	b580      	push	{r7, lr}
 80140b2:	b082      	sub	sp, #8
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 80140b8:	6879      	ldr	r1, [r7, #4]
 80140ba:	4803      	ldr	r0, [pc, #12]	; (80140c8 <BSP_SD_GetCardInfo+0x18>)
 80140bc:	f7f9 fdca 	bl	800dc54 <HAL_SD_GetCardInfo>
}
 80140c0:	bf00      	nop
 80140c2:	3708      	adds	r7, #8
 80140c4:	46bd      	mov	sp, r7
 80140c6:	bd80      	pop	{r7, pc}
 80140c8:	24000db8 	.word	0x24000db8

080140cc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80140cc:	b580      	push	{r7, lr}
 80140ce:	b082      	sub	sp, #8
 80140d0:	af00      	add	r7, sp, #0
 80140d2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80140d4:	f000 f9a0 	bl	8014418 <BSP_SD_WriteCpltCallback>
}
 80140d8:	bf00      	nop
 80140da:	3708      	adds	r7, #8
 80140dc:	46bd      	mov	sp, r7
 80140de:	bd80      	pop	{r7, pc}

080140e0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80140e0:	b580      	push	{r7, lr}
 80140e2:	b082      	sub	sp, #8
 80140e4:	af00      	add	r7, sp, #0
 80140e6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80140e8:	f000 f9a2 	bl	8014430 <BSP_SD_ReadCpltCallback>
}
 80140ec:	bf00      	nop
 80140ee:	3708      	adds	r7, #8
 80140f0:	46bd      	mov	sp, r7
 80140f2:	bd80      	pop	{r7, pc}

080140f4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80140f4:	b580      	push	{r7, lr}
 80140f6:	b082      	sub	sp, #8
 80140f8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80140fa:	2301      	movs	r3, #1
 80140fc:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80140fe:	f000 f80b 	bl	8014118 <BSP_PlatformIsDetected>
 8014102:	4603      	mov	r3, r0
 8014104:	2b00      	cmp	r3, #0
 8014106:	d101      	bne.n	801410c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8014108:	2300      	movs	r3, #0
 801410a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801410c:	79fb      	ldrb	r3, [r7, #7]
 801410e:	b2db      	uxtb	r3, r3
}
 8014110:	4618      	mov	r0, r3
 8014112:	3708      	adds	r7, #8
 8014114:	46bd      	mov	sp, r7
 8014116:	bd80      	pop	{r7, pc}

08014118 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8014118:	b580      	push	{r7, lr}
 801411a:	b082      	sub	sp, #8
 801411c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801411e:	2301      	movs	r3, #1
 8014120:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8014122:	2104      	movs	r1, #4
 8014124:	4806      	ldr	r0, [pc, #24]	; (8014140 <BSP_PlatformIsDetected+0x28>)
 8014126:	f7f3 feef 	bl	8007f08 <HAL_GPIO_ReadPin>
 801412a:	4603      	mov	r3, r0
 801412c:	2b00      	cmp	r3, #0
 801412e:	d001      	beq.n	8014134 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8014130:	2300      	movs	r3, #0
 8014132:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8014134:	79fb      	ldrb	r3, [r7, #7]
}
 8014136:	4618      	mov	r0, r3
 8014138:	3708      	adds	r7, #8
 801413a:	46bd      	mov	sp, r7
 801413c:	bd80      	pop	{r7, pc}
 801413e:	bf00      	nop
 8014140:	58020400 	.word	0x58020400

08014144 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8014144:	b580      	push	{r7, lr}
 8014146:	b084      	sub	sp, #16
 8014148:	af00      	add	r7, sp, #0
 801414a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 801414c:	f7ef fc36 	bl	80039bc <HAL_GetTick>
 8014150:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8014152:	e006      	b.n	8014162 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014154:	f7ff ff9c 	bl	8014090 <BSP_SD_GetCardState>
 8014158:	4603      	mov	r3, r0
 801415a:	2b00      	cmp	r3, #0
 801415c:	d101      	bne.n	8014162 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801415e:	2300      	movs	r3, #0
 8014160:	e009      	b.n	8014176 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8014162:	f7ef fc2b 	bl	80039bc <HAL_GetTick>
 8014166:	4602      	mov	r2, r0
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	1ad3      	subs	r3, r2, r3
 801416c:	687a      	ldr	r2, [r7, #4]
 801416e:	429a      	cmp	r2, r3
 8014170:	d8f0      	bhi.n	8014154 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8014172:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014176:	4618      	mov	r0, r3
 8014178:	3710      	adds	r7, #16
 801417a:	46bd      	mov	sp, r7
 801417c:	bd80      	pop	{r7, pc}
	...

08014180 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8014180:	b580      	push	{r7, lr}
 8014182:	b082      	sub	sp, #8
 8014184:	af00      	add	r7, sp, #0
 8014186:	4603      	mov	r3, r0
 8014188:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801418a:	4b0b      	ldr	r3, [pc, #44]	; (80141b8 <SD_CheckStatus+0x38>)
 801418c:	2201      	movs	r2, #1
 801418e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8014190:	f7ff ff7e 	bl	8014090 <BSP_SD_GetCardState>
 8014194:	4603      	mov	r3, r0
 8014196:	2b00      	cmp	r3, #0
 8014198:	d107      	bne.n	80141aa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801419a:	4b07      	ldr	r3, [pc, #28]	; (80141b8 <SD_CheckStatus+0x38>)
 801419c:	781b      	ldrb	r3, [r3, #0]
 801419e:	b2db      	uxtb	r3, r3
 80141a0:	f023 0301 	bic.w	r3, r3, #1
 80141a4:	b2da      	uxtb	r2, r3
 80141a6:	4b04      	ldr	r3, [pc, #16]	; (80141b8 <SD_CheckStatus+0x38>)
 80141a8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80141aa:	4b03      	ldr	r3, [pc, #12]	; (80141b8 <SD_CheckStatus+0x38>)
 80141ac:	781b      	ldrb	r3, [r3, #0]
 80141ae:	b2db      	uxtb	r3, r3
}
 80141b0:	4618      	mov	r0, r3
 80141b2:	3708      	adds	r7, #8
 80141b4:	46bd      	mov	sp, r7
 80141b6:	bd80      	pop	{r7, pc}
 80141b8:	2400000d 	.word	0x2400000d

080141bc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80141bc:	b580      	push	{r7, lr}
 80141be:	b082      	sub	sp, #8
 80141c0:	af00      	add	r7, sp, #0
 80141c2:	4603      	mov	r3, r0
 80141c4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80141c6:	f7ff ff09 	bl	8013fdc <BSP_SD_Init>
 80141ca:	4603      	mov	r3, r0
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d107      	bne.n	80141e0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80141d0:	79fb      	ldrb	r3, [r7, #7]
 80141d2:	4618      	mov	r0, r3
 80141d4:	f7ff ffd4 	bl	8014180 <SD_CheckStatus>
 80141d8:	4603      	mov	r3, r0
 80141da:	461a      	mov	r2, r3
 80141dc:	4b04      	ldr	r3, [pc, #16]	; (80141f0 <SD_initialize+0x34>)
 80141de:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80141e0:	4b03      	ldr	r3, [pc, #12]	; (80141f0 <SD_initialize+0x34>)
 80141e2:	781b      	ldrb	r3, [r3, #0]
 80141e4:	b2db      	uxtb	r3, r3
}
 80141e6:	4618      	mov	r0, r3
 80141e8:	3708      	adds	r7, #8
 80141ea:	46bd      	mov	sp, r7
 80141ec:	bd80      	pop	{r7, pc}
 80141ee:	bf00      	nop
 80141f0:	2400000d 	.word	0x2400000d

080141f4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80141f4:	b580      	push	{r7, lr}
 80141f6:	b082      	sub	sp, #8
 80141f8:	af00      	add	r7, sp, #0
 80141fa:	4603      	mov	r3, r0
 80141fc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80141fe:	79fb      	ldrb	r3, [r7, #7]
 8014200:	4618      	mov	r0, r3
 8014202:	f7ff ffbd 	bl	8014180 <SD_CheckStatus>
 8014206:	4603      	mov	r3, r0
}
 8014208:	4618      	mov	r0, r3
 801420a:	3708      	adds	r7, #8
 801420c:	46bd      	mov	sp, r7
 801420e:	bd80      	pop	{r7, pc}

08014210 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8014210:	b580      	push	{r7, lr}
 8014212:	b086      	sub	sp, #24
 8014214:	af00      	add	r7, sp, #0
 8014216:	60b9      	str	r1, [r7, #8]
 8014218:	607a      	str	r2, [r7, #4]
 801421a:	603b      	str	r3, [r7, #0]
 801421c:	4603      	mov	r3, r0
 801421e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014220:	2301      	movs	r3, #1
 8014222:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014224:	f247 5030 	movw	r0, #30000	; 0x7530
 8014228:	f7ff ff8c 	bl	8014144 <SD_CheckStatusWithTimeout>
 801422c:	4603      	mov	r3, r0
 801422e:	2b00      	cmp	r3, #0
 8014230:	da01      	bge.n	8014236 <SD_read+0x26>
  {
    return res;
 8014232:	7dfb      	ldrb	r3, [r7, #23]
 8014234:	e03b      	b.n	80142ae <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8014236:	683a      	ldr	r2, [r7, #0]
 8014238:	6879      	ldr	r1, [r7, #4]
 801423a:	68b8      	ldr	r0, [r7, #8]
 801423c:	f7ff fef4 	bl	8014028 <BSP_SD_ReadBlocks_DMA>
 8014240:	4603      	mov	r3, r0
 8014242:	2b00      	cmp	r3, #0
 8014244:	d132      	bne.n	80142ac <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8014246:	4b1c      	ldr	r3, [pc, #112]	; (80142b8 <SD_read+0xa8>)
 8014248:	2200      	movs	r2, #0
 801424a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 801424c:	f7ef fbb6 	bl	80039bc <HAL_GetTick>
 8014250:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8014252:	bf00      	nop
 8014254:	4b18      	ldr	r3, [pc, #96]	; (80142b8 <SD_read+0xa8>)
 8014256:	681b      	ldr	r3, [r3, #0]
 8014258:	2b00      	cmp	r3, #0
 801425a:	d108      	bne.n	801426e <SD_read+0x5e>
 801425c:	f7ef fbae 	bl	80039bc <HAL_GetTick>
 8014260:	4602      	mov	r2, r0
 8014262:	693b      	ldr	r3, [r7, #16]
 8014264:	1ad3      	subs	r3, r2, r3
 8014266:	f247 522f 	movw	r2, #29999	; 0x752f
 801426a:	4293      	cmp	r3, r2
 801426c:	d9f2      	bls.n	8014254 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 801426e:	4b12      	ldr	r3, [pc, #72]	; (80142b8 <SD_read+0xa8>)
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	2b00      	cmp	r3, #0
 8014274:	d102      	bne.n	801427c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8014276:	2301      	movs	r3, #1
 8014278:	75fb      	strb	r3, [r7, #23]
 801427a:	e017      	b.n	80142ac <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 801427c:	4b0e      	ldr	r3, [pc, #56]	; (80142b8 <SD_read+0xa8>)
 801427e:	2200      	movs	r2, #0
 8014280:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8014282:	f7ef fb9b 	bl	80039bc <HAL_GetTick>
 8014286:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014288:	e007      	b.n	801429a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801428a:	f7ff ff01 	bl	8014090 <BSP_SD_GetCardState>
 801428e:	4603      	mov	r3, r0
 8014290:	2b00      	cmp	r3, #0
 8014292:	d102      	bne.n	801429a <SD_read+0x8a>
          {
            res = RES_OK;
 8014294:	2300      	movs	r3, #0
 8014296:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8014298:	e008      	b.n	80142ac <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801429a:	f7ef fb8f 	bl	80039bc <HAL_GetTick>
 801429e:	4602      	mov	r2, r0
 80142a0:	693b      	ldr	r3, [r7, #16]
 80142a2:	1ad3      	subs	r3, r2, r3
 80142a4:	f247 522f 	movw	r2, #29999	; 0x752f
 80142a8:	4293      	cmp	r3, r2
 80142aa:	d9ee      	bls.n	801428a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80142ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80142ae:	4618      	mov	r0, r3
 80142b0:	3718      	adds	r7, #24
 80142b2:	46bd      	mov	sp, r7
 80142b4:	bd80      	pop	{r7, pc}
 80142b6:	bf00      	nop
 80142b8:	24001490 	.word	0x24001490

080142bc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80142bc:	b580      	push	{r7, lr}
 80142be:	b086      	sub	sp, #24
 80142c0:	af00      	add	r7, sp, #0
 80142c2:	60b9      	str	r1, [r7, #8]
 80142c4:	607a      	str	r2, [r7, #4]
 80142c6:	603b      	str	r3, [r7, #0]
 80142c8:	4603      	mov	r3, r0
 80142ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80142cc:	2301      	movs	r3, #1
 80142ce:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80142d0:	4b24      	ldr	r3, [pc, #144]	; (8014364 <SD_write+0xa8>)
 80142d2:	2200      	movs	r2, #0
 80142d4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80142d6:	f247 5030 	movw	r0, #30000	; 0x7530
 80142da:	f7ff ff33 	bl	8014144 <SD_CheckStatusWithTimeout>
 80142de:	4603      	mov	r3, r0
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	da01      	bge.n	80142e8 <SD_write+0x2c>
  {
    return res;
 80142e4:	7dfb      	ldrb	r3, [r7, #23]
 80142e6:	e038      	b.n	801435a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80142e8:	683a      	ldr	r2, [r7, #0]
 80142ea:	6879      	ldr	r1, [r7, #4]
 80142ec:	68b8      	ldr	r0, [r7, #8]
 80142ee:	f7ff feb5 	bl	801405c <BSP_SD_WriteBlocks_DMA>
 80142f2:	4603      	mov	r3, r0
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d12f      	bne.n	8014358 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80142f8:	f7ef fb60 	bl	80039bc <HAL_GetTick>
 80142fc:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80142fe:	bf00      	nop
 8014300:	4b18      	ldr	r3, [pc, #96]	; (8014364 <SD_write+0xa8>)
 8014302:	681b      	ldr	r3, [r3, #0]
 8014304:	2b00      	cmp	r3, #0
 8014306:	d108      	bne.n	801431a <SD_write+0x5e>
 8014308:	f7ef fb58 	bl	80039bc <HAL_GetTick>
 801430c:	4602      	mov	r2, r0
 801430e:	693b      	ldr	r3, [r7, #16]
 8014310:	1ad3      	subs	r3, r2, r3
 8014312:	f247 522f 	movw	r2, #29999	; 0x752f
 8014316:	4293      	cmp	r3, r2
 8014318:	d9f2      	bls.n	8014300 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 801431a:	4b12      	ldr	r3, [pc, #72]	; (8014364 <SD_write+0xa8>)
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	2b00      	cmp	r3, #0
 8014320:	d102      	bne.n	8014328 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8014322:	2301      	movs	r3, #1
 8014324:	75fb      	strb	r3, [r7, #23]
 8014326:	e017      	b.n	8014358 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8014328:	4b0e      	ldr	r3, [pc, #56]	; (8014364 <SD_write+0xa8>)
 801432a:	2200      	movs	r2, #0
 801432c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801432e:	f7ef fb45 	bl	80039bc <HAL_GetTick>
 8014332:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014334:	e007      	b.n	8014346 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014336:	f7ff feab 	bl	8014090 <BSP_SD_GetCardState>
 801433a:	4603      	mov	r3, r0
 801433c:	2b00      	cmp	r3, #0
 801433e:	d102      	bne.n	8014346 <SD_write+0x8a>
          {
            res = RES_OK;
 8014340:	2300      	movs	r3, #0
 8014342:	75fb      	strb	r3, [r7, #23]
            break;
 8014344:	e008      	b.n	8014358 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014346:	f7ef fb39 	bl	80039bc <HAL_GetTick>
 801434a:	4602      	mov	r2, r0
 801434c:	693b      	ldr	r3, [r7, #16]
 801434e:	1ad3      	subs	r3, r2, r3
 8014350:	f247 522f 	movw	r2, #29999	; 0x752f
 8014354:	4293      	cmp	r3, r2
 8014356:	d9ee      	bls.n	8014336 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8014358:	7dfb      	ldrb	r3, [r7, #23]
}
 801435a:	4618      	mov	r0, r3
 801435c:	3718      	adds	r7, #24
 801435e:	46bd      	mov	sp, r7
 8014360:	bd80      	pop	{r7, pc}
 8014362:	bf00      	nop
 8014364:	2400148c 	.word	0x2400148c

08014368 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8014368:	b580      	push	{r7, lr}
 801436a:	b08c      	sub	sp, #48	; 0x30
 801436c:	af00      	add	r7, sp, #0
 801436e:	4603      	mov	r3, r0
 8014370:	603a      	str	r2, [r7, #0]
 8014372:	71fb      	strb	r3, [r7, #7]
 8014374:	460b      	mov	r3, r1
 8014376:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8014378:	2301      	movs	r3, #1
 801437a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801437e:	4b25      	ldr	r3, [pc, #148]	; (8014414 <SD_ioctl+0xac>)
 8014380:	781b      	ldrb	r3, [r3, #0]
 8014382:	b2db      	uxtb	r3, r3
 8014384:	f003 0301 	and.w	r3, r3, #1
 8014388:	2b00      	cmp	r3, #0
 801438a:	d001      	beq.n	8014390 <SD_ioctl+0x28>
 801438c:	2303      	movs	r3, #3
 801438e:	e03c      	b.n	801440a <SD_ioctl+0xa2>

  switch (cmd)
 8014390:	79bb      	ldrb	r3, [r7, #6]
 8014392:	2b03      	cmp	r3, #3
 8014394:	d834      	bhi.n	8014400 <SD_ioctl+0x98>
 8014396:	a201      	add	r2, pc, #4	; (adr r2, 801439c <SD_ioctl+0x34>)
 8014398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801439c:	080143ad 	.word	0x080143ad
 80143a0:	080143b5 	.word	0x080143b5
 80143a4:	080143cd 	.word	0x080143cd
 80143a8:	080143e7 	.word	0x080143e7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80143ac:	2300      	movs	r3, #0
 80143ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80143b2:	e028      	b.n	8014406 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80143b4:	f107 0308 	add.w	r3, r7, #8
 80143b8:	4618      	mov	r0, r3
 80143ba:	f7ff fe79 	bl	80140b0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80143be:	6a3a      	ldr	r2, [r7, #32]
 80143c0:	683b      	ldr	r3, [r7, #0]
 80143c2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80143c4:	2300      	movs	r3, #0
 80143c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80143ca:	e01c      	b.n	8014406 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80143cc:	f107 0308 	add.w	r3, r7, #8
 80143d0:	4618      	mov	r0, r3
 80143d2:	f7ff fe6d 	bl	80140b0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80143d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143d8:	b29a      	uxth	r2, r3
 80143da:	683b      	ldr	r3, [r7, #0]
 80143dc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80143de:	2300      	movs	r3, #0
 80143e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80143e4:	e00f      	b.n	8014406 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80143e6:	f107 0308 	add.w	r3, r7, #8
 80143ea:	4618      	mov	r0, r3
 80143ec:	f7ff fe60 	bl	80140b0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80143f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143f2:	0a5a      	lsrs	r2, r3, #9
 80143f4:	683b      	ldr	r3, [r7, #0]
 80143f6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80143f8:	2300      	movs	r3, #0
 80143fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80143fe:	e002      	b.n	8014406 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8014400:	2304      	movs	r3, #4
 8014402:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8014406:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801440a:	4618      	mov	r0, r3
 801440c:	3730      	adds	r7, #48	; 0x30
 801440e:	46bd      	mov	sp, r7
 8014410:	bd80      	pop	{r7, pc}
 8014412:	bf00      	nop
 8014414:	2400000d 	.word	0x2400000d

08014418 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8014418:	b480      	push	{r7}
 801441a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 801441c:	4b03      	ldr	r3, [pc, #12]	; (801442c <BSP_SD_WriteCpltCallback+0x14>)
 801441e:	2201      	movs	r2, #1
 8014420:	601a      	str	r2, [r3, #0]
}
 8014422:	bf00      	nop
 8014424:	46bd      	mov	sp, r7
 8014426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801442a:	4770      	bx	lr
 801442c:	2400148c 	.word	0x2400148c

08014430 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8014430:	b480      	push	{r7}
 8014432:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8014434:	4b03      	ldr	r3, [pc, #12]	; (8014444 <BSP_SD_ReadCpltCallback+0x14>)
 8014436:	2201      	movs	r2, #1
 8014438:	601a      	str	r2, [r3, #0]
}
 801443a:	bf00      	nop
 801443c:	46bd      	mov	sp, r7
 801443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014442:	4770      	bx	lr
 8014444:	24001490 	.word	0x24001490

08014448 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014448:	b580      	push	{r7, lr}
 801444a:	b084      	sub	sp, #16
 801444c:	af00      	add	r7, sp, #0
 801444e:	6078      	str	r0, [r7, #4]
 8014450:	460b      	mov	r3, r1
 8014452:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014454:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8014458:	f002 fcea 	bl	8016e30 <USBD_static_malloc>
 801445c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	2b00      	cmp	r3, #0
 8014462:	d109      	bne.n	8014478 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	32b0      	adds	r2, #176	; 0xb0
 801446e:	2100      	movs	r1, #0
 8014470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8014474:	2302      	movs	r3, #2
 8014476:	e0d4      	b.n	8014622 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8014478:	f44f 7207 	mov.w	r2, #540	; 0x21c
 801447c:	2100      	movs	r1, #0
 801447e:	68f8      	ldr	r0, [r7, #12]
 8014480:	f002 fd3a 	bl	8016ef8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	32b0      	adds	r2, #176	; 0xb0
 801448e:	68f9      	ldr	r1, [r7, #12]
 8014490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	32b0      	adds	r2, #176	; 0xb0
 801449e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	7c1b      	ldrb	r3, [r3, #16]
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d138      	bne.n	8014522 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80144b0:	4b5e      	ldr	r3, [pc, #376]	; (801462c <USBD_CDC_Init+0x1e4>)
 80144b2:	7819      	ldrb	r1, [r3, #0]
 80144b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80144b8:	2202      	movs	r2, #2
 80144ba:	6878      	ldr	r0, [r7, #4]
 80144bc:	f002 fb95 	bl	8016bea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80144c0:	4b5a      	ldr	r3, [pc, #360]	; (801462c <USBD_CDC_Init+0x1e4>)
 80144c2:	781b      	ldrb	r3, [r3, #0]
 80144c4:	f003 020f 	and.w	r2, r3, #15
 80144c8:	6879      	ldr	r1, [r7, #4]
 80144ca:	4613      	mov	r3, r2
 80144cc:	009b      	lsls	r3, r3, #2
 80144ce:	4413      	add	r3, r2
 80144d0:	009b      	lsls	r3, r3, #2
 80144d2:	440b      	add	r3, r1
 80144d4:	3324      	adds	r3, #36	; 0x24
 80144d6:	2201      	movs	r2, #1
 80144d8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80144da:	4b55      	ldr	r3, [pc, #340]	; (8014630 <USBD_CDC_Init+0x1e8>)
 80144dc:	7819      	ldrb	r1, [r3, #0]
 80144de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80144e2:	2202      	movs	r2, #2
 80144e4:	6878      	ldr	r0, [r7, #4]
 80144e6:	f002 fb80 	bl	8016bea <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80144ea:	4b51      	ldr	r3, [pc, #324]	; (8014630 <USBD_CDC_Init+0x1e8>)
 80144ec:	781b      	ldrb	r3, [r3, #0]
 80144ee:	f003 020f 	and.w	r2, r3, #15
 80144f2:	6879      	ldr	r1, [r7, #4]
 80144f4:	4613      	mov	r3, r2
 80144f6:	009b      	lsls	r3, r3, #2
 80144f8:	4413      	add	r3, r2
 80144fa:	009b      	lsls	r3, r3, #2
 80144fc:	440b      	add	r3, r1
 80144fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014502:	2201      	movs	r2, #1
 8014504:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8014506:	4b4b      	ldr	r3, [pc, #300]	; (8014634 <USBD_CDC_Init+0x1ec>)
 8014508:	781b      	ldrb	r3, [r3, #0]
 801450a:	f003 020f 	and.w	r2, r3, #15
 801450e:	6879      	ldr	r1, [r7, #4]
 8014510:	4613      	mov	r3, r2
 8014512:	009b      	lsls	r3, r3, #2
 8014514:	4413      	add	r3, r2
 8014516:	009b      	lsls	r3, r3, #2
 8014518:	440b      	add	r3, r1
 801451a:	3326      	adds	r3, #38	; 0x26
 801451c:	2210      	movs	r2, #16
 801451e:	801a      	strh	r2, [r3, #0]
 8014520:	e035      	b.n	801458e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014522:	4b42      	ldr	r3, [pc, #264]	; (801462c <USBD_CDC_Init+0x1e4>)
 8014524:	7819      	ldrb	r1, [r3, #0]
 8014526:	2340      	movs	r3, #64	; 0x40
 8014528:	2202      	movs	r2, #2
 801452a:	6878      	ldr	r0, [r7, #4]
 801452c:	f002 fb5d 	bl	8016bea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014530:	4b3e      	ldr	r3, [pc, #248]	; (801462c <USBD_CDC_Init+0x1e4>)
 8014532:	781b      	ldrb	r3, [r3, #0]
 8014534:	f003 020f 	and.w	r2, r3, #15
 8014538:	6879      	ldr	r1, [r7, #4]
 801453a:	4613      	mov	r3, r2
 801453c:	009b      	lsls	r3, r3, #2
 801453e:	4413      	add	r3, r2
 8014540:	009b      	lsls	r3, r3, #2
 8014542:	440b      	add	r3, r1
 8014544:	3324      	adds	r3, #36	; 0x24
 8014546:	2201      	movs	r2, #1
 8014548:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801454a:	4b39      	ldr	r3, [pc, #228]	; (8014630 <USBD_CDC_Init+0x1e8>)
 801454c:	7819      	ldrb	r1, [r3, #0]
 801454e:	2340      	movs	r3, #64	; 0x40
 8014550:	2202      	movs	r2, #2
 8014552:	6878      	ldr	r0, [r7, #4]
 8014554:	f002 fb49 	bl	8016bea <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014558:	4b35      	ldr	r3, [pc, #212]	; (8014630 <USBD_CDC_Init+0x1e8>)
 801455a:	781b      	ldrb	r3, [r3, #0]
 801455c:	f003 020f 	and.w	r2, r3, #15
 8014560:	6879      	ldr	r1, [r7, #4]
 8014562:	4613      	mov	r3, r2
 8014564:	009b      	lsls	r3, r3, #2
 8014566:	4413      	add	r3, r2
 8014568:	009b      	lsls	r3, r3, #2
 801456a:	440b      	add	r3, r1
 801456c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014570:	2201      	movs	r2, #1
 8014572:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014574:	4b2f      	ldr	r3, [pc, #188]	; (8014634 <USBD_CDC_Init+0x1ec>)
 8014576:	781b      	ldrb	r3, [r3, #0]
 8014578:	f003 020f 	and.w	r2, r3, #15
 801457c:	6879      	ldr	r1, [r7, #4]
 801457e:	4613      	mov	r3, r2
 8014580:	009b      	lsls	r3, r3, #2
 8014582:	4413      	add	r3, r2
 8014584:	009b      	lsls	r3, r3, #2
 8014586:	440b      	add	r3, r1
 8014588:	3326      	adds	r3, #38	; 0x26
 801458a:	2210      	movs	r2, #16
 801458c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801458e:	4b29      	ldr	r3, [pc, #164]	; (8014634 <USBD_CDC_Init+0x1ec>)
 8014590:	7819      	ldrb	r1, [r3, #0]
 8014592:	2308      	movs	r3, #8
 8014594:	2203      	movs	r2, #3
 8014596:	6878      	ldr	r0, [r7, #4]
 8014598:	f002 fb27 	bl	8016bea <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801459c:	4b25      	ldr	r3, [pc, #148]	; (8014634 <USBD_CDC_Init+0x1ec>)
 801459e:	781b      	ldrb	r3, [r3, #0]
 80145a0:	f003 020f 	and.w	r2, r3, #15
 80145a4:	6879      	ldr	r1, [r7, #4]
 80145a6:	4613      	mov	r3, r2
 80145a8:	009b      	lsls	r3, r3, #2
 80145aa:	4413      	add	r3, r2
 80145ac:	009b      	lsls	r3, r3, #2
 80145ae:	440b      	add	r3, r1
 80145b0:	3324      	adds	r3, #36	; 0x24
 80145b2:	2201      	movs	r2, #1
 80145b4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80145b6:	68fb      	ldr	r3, [r7, #12]
 80145b8:	2200      	movs	r2, #0
 80145ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80145c4:	687a      	ldr	r2, [r7, #4]
 80145c6:	33b0      	adds	r3, #176	; 0xb0
 80145c8:	009b      	lsls	r3, r3, #2
 80145ca:	4413      	add	r3, r2
 80145cc:	685b      	ldr	r3, [r3, #4]
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80145d2:	68fb      	ldr	r3, [r7, #12]
 80145d4:	2200      	movs	r2, #0
 80145d6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	2200      	movs	r2, #0
 80145de:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d101      	bne.n	80145f0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80145ec:	2302      	movs	r3, #2
 80145ee:	e018      	b.n	8014622 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	7c1b      	ldrb	r3, [r3, #16]
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d10a      	bne.n	801460e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80145f8:	4b0d      	ldr	r3, [pc, #52]	; (8014630 <USBD_CDC_Init+0x1e8>)
 80145fa:	7819      	ldrb	r1, [r3, #0]
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014602:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014606:	6878      	ldr	r0, [r7, #4]
 8014608:	f002 fbde 	bl	8016dc8 <USBD_LL_PrepareReceive>
 801460c:	e008      	b.n	8014620 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801460e:	4b08      	ldr	r3, [pc, #32]	; (8014630 <USBD_CDC_Init+0x1e8>)
 8014610:	7819      	ldrb	r1, [r3, #0]
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014618:	2340      	movs	r3, #64	; 0x40
 801461a:	6878      	ldr	r0, [r7, #4]
 801461c:	f002 fbd4 	bl	8016dc8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014620:	2300      	movs	r3, #0
}
 8014622:	4618      	mov	r0, r3
 8014624:	3710      	adds	r7, #16
 8014626:	46bd      	mov	sp, r7
 8014628:	bd80      	pop	{r7, pc}
 801462a:	bf00      	nop
 801462c:	24000097 	.word	0x24000097
 8014630:	24000098 	.word	0x24000098
 8014634:	24000099 	.word	0x24000099

08014638 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014638:	b580      	push	{r7, lr}
 801463a:	b082      	sub	sp, #8
 801463c:	af00      	add	r7, sp, #0
 801463e:	6078      	str	r0, [r7, #4]
 8014640:	460b      	mov	r3, r1
 8014642:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8014644:	4b3a      	ldr	r3, [pc, #232]	; (8014730 <USBD_CDC_DeInit+0xf8>)
 8014646:	781b      	ldrb	r3, [r3, #0]
 8014648:	4619      	mov	r1, r3
 801464a:	6878      	ldr	r0, [r7, #4]
 801464c:	f002 faf3 	bl	8016c36 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8014650:	4b37      	ldr	r3, [pc, #220]	; (8014730 <USBD_CDC_DeInit+0xf8>)
 8014652:	781b      	ldrb	r3, [r3, #0]
 8014654:	f003 020f 	and.w	r2, r3, #15
 8014658:	6879      	ldr	r1, [r7, #4]
 801465a:	4613      	mov	r3, r2
 801465c:	009b      	lsls	r3, r3, #2
 801465e:	4413      	add	r3, r2
 8014660:	009b      	lsls	r3, r3, #2
 8014662:	440b      	add	r3, r1
 8014664:	3324      	adds	r3, #36	; 0x24
 8014666:	2200      	movs	r2, #0
 8014668:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801466a:	4b32      	ldr	r3, [pc, #200]	; (8014734 <USBD_CDC_DeInit+0xfc>)
 801466c:	781b      	ldrb	r3, [r3, #0]
 801466e:	4619      	mov	r1, r3
 8014670:	6878      	ldr	r0, [r7, #4]
 8014672:	f002 fae0 	bl	8016c36 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8014676:	4b2f      	ldr	r3, [pc, #188]	; (8014734 <USBD_CDC_DeInit+0xfc>)
 8014678:	781b      	ldrb	r3, [r3, #0]
 801467a:	f003 020f 	and.w	r2, r3, #15
 801467e:	6879      	ldr	r1, [r7, #4]
 8014680:	4613      	mov	r3, r2
 8014682:	009b      	lsls	r3, r3, #2
 8014684:	4413      	add	r3, r2
 8014686:	009b      	lsls	r3, r3, #2
 8014688:	440b      	add	r3, r1
 801468a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801468e:	2200      	movs	r2, #0
 8014690:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8014692:	4b29      	ldr	r3, [pc, #164]	; (8014738 <USBD_CDC_DeInit+0x100>)
 8014694:	781b      	ldrb	r3, [r3, #0]
 8014696:	4619      	mov	r1, r3
 8014698:	6878      	ldr	r0, [r7, #4]
 801469a:	f002 facc 	bl	8016c36 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801469e:	4b26      	ldr	r3, [pc, #152]	; (8014738 <USBD_CDC_DeInit+0x100>)
 80146a0:	781b      	ldrb	r3, [r3, #0]
 80146a2:	f003 020f 	and.w	r2, r3, #15
 80146a6:	6879      	ldr	r1, [r7, #4]
 80146a8:	4613      	mov	r3, r2
 80146aa:	009b      	lsls	r3, r3, #2
 80146ac:	4413      	add	r3, r2
 80146ae:	009b      	lsls	r3, r3, #2
 80146b0:	440b      	add	r3, r1
 80146b2:	3324      	adds	r3, #36	; 0x24
 80146b4:	2200      	movs	r2, #0
 80146b6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80146b8:	4b1f      	ldr	r3, [pc, #124]	; (8014738 <USBD_CDC_DeInit+0x100>)
 80146ba:	781b      	ldrb	r3, [r3, #0]
 80146bc:	f003 020f 	and.w	r2, r3, #15
 80146c0:	6879      	ldr	r1, [r7, #4]
 80146c2:	4613      	mov	r3, r2
 80146c4:	009b      	lsls	r3, r3, #2
 80146c6:	4413      	add	r3, r2
 80146c8:	009b      	lsls	r3, r3, #2
 80146ca:	440b      	add	r3, r1
 80146cc:	3326      	adds	r3, #38	; 0x26
 80146ce:	2200      	movs	r2, #0
 80146d0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	32b0      	adds	r2, #176	; 0xb0
 80146dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d01f      	beq.n	8014724 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80146ea:	687a      	ldr	r2, [r7, #4]
 80146ec:	33b0      	adds	r3, #176	; 0xb0
 80146ee:	009b      	lsls	r3, r3, #2
 80146f0:	4413      	add	r3, r2
 80146f2:	685b      	ldr	r3, [r3, #4]
 80146f4:	685b      	ldr	r3, [r3, #4]
 80146f6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	32b0      	adds	r2, #176	; 0xb0
 8014702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014706:	4618      	mov	r0, r3
 8014708:	f002 fba0 	bl	8016e4c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	32b0      	adds	r2, #176	; 0xb0
 8014716:	2100      	movs	r1, #0
 8014718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	2200      	movs	r2, #0
 8014720:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014724:	2300      	movs	r3, #0
}
 8014726:	4618      	mov	r0, r3
 8014728:	3708      	adds	r7, #8
 801472a:	46bd      	mov	sp, r7
 801472c:	bd80      	pop	{r7, pc}
 801472e:	bf00      	nop
 8014730:	24000097 	.word	0x24000097
 8014734:	24000098 	.word	0x24000098
 8014738:	24000099 	.word	0x24000099

0801473c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801473c:	b580      	push	{r7, lr}
 801473e:	b086      	sub	sp, #24
 8014740:	af00      	add	r7, sp, #0
 8014742:	6078      	str	r0, [r7, #4]
 8014744:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	32b0      	adds	r2, #176	; 0xb0
 8014750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014754:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8014756:	2300      	movs	r3, #0
 8014758:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801475a:	2300      	movs	r3, #0
 801475c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801475e:	2300      	movs	r3, #0
 8014760:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8014762:	693b      	ldr	r3, [r7, #16]
 8014764:	2b00      	cmp	r3, #0
 8014766:	d101      	bne.n	801476c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8014768:	2303      	movs	r3, #3
 801476a:	e0bf      	b.n	80148ec <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801476c:	683b      	ldr	r3, [r7, #0]
 801476e:	781b      	ldrb	r3, [r3, #0]
 8014770:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014774:	2b00      	cmp	r3, #0
 8014776:	d050      	beq.n	801481a <USBD_CDC_Setup+0xde>
 8014778:	2b20      	cmp	r3, #32
 801477a:	f040 80af 	bne.w	80148dc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801477e:	683b      	ldr	r3, [r7, #0]
 8014780:	88db      	ldrh	r3, [r3, #6]
 8014782:	2b00      	cmp	r3, #0
 8014784:	d03a      	beq.n	80147fc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8014786:	683b      	ldr	r3, [r7, #0]
 8014788:	781b      	ldrb	r3, [r3, #0]
 801478a:	b25b      	sxtb	r3, r3
 801478c:	2b00      	cmp	r3, #0
 801478e:	da1b      	bge.n	80147c8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014796:	687a      	ldr	r2, [r7, #4]
 8014798:	33b0      	adds	r3, #176	; 0xb0
 801479a:	009b      	lsls	r3, r3, #2
 801479c:	4413      	add	r3, r2
 801479e:	685b      	ldr	r3, [r3, #4]
 80147a0:	689b      	ldr	r3, [r3, #8]
 80147a2:	683a      	ldr	r2, [r7, #0]
 80147a4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80147a6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80147a8:	683a      	ldr	r2, [r7, #0]
 80147aa:	88d2      	ldrh	r2, [r2, #6]
 80147ac:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80147ae:	683b      	ldr	r3, [r7, #0]
 80147b0:	88db      	ldrh	r3, [r3, #6]
 80147b2:	2b07      	cmp	r3, #7
 80147b4:	bf28      	it	cs
 80147b6:	2307      	movcs	r3, #7
 80147b8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80147ba:	693b      	ldr	r3, [r7, #16]
 80147bc:	89fa      	ldrh	r2, [r7, #14]
 80147be:	4619      	mov	r1, r3
 80147c0:	6878      	ldr	r0, [r7, #4]
 80147c2:	f001 fd89 	bl	80162d8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80147c6:	e090      	b.n	80148ea <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80147c8:	683b      	ldr	r3, [r7, #0]
 80147ca:	785a      	ldrb	r2, [r3, #1]
 80147cc:	693b      	ldr	r3, [r7, #16]
 80147ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80147d2:	683b      	ldr	r3, [r7, #0]
 80147d4:	88db      	ldrh	r3, [r3, #6]
 80147d6:	2b3f      	cmp	r3, #63	; 0x3f
 80147d8:	d803      	bhi.n	80147e2 <USBD_CDC_Setup+0xa6>
 80147da:	683b      	ldr	r3, [r7, #0]
 80147dc:	88db      	ldrh	r3, [r3, #6]
 80147de:	b2da      	uxtb	r2, r3
 80147e0:	e000      	b.n	80147e4 <USBD_CDC_Setup+0xa8>
 80147e2:	2240      	movs	r2, #64	; 0x40
 80147e4:	693b      	ldr	r3, [r7, #16]
 80147e6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80147ea:	6939      	ldr	r1, [r7, #16]
 80147ec:	693b      	ldr	r3, [r7, #16]
 80147ee:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80147f2:	461a      	mov	r2, r3
 80147f4:	6878      	ldr	r0, [r7, #4]
 80147f6:	f001 fd9b 	bl	8016330 <USBD_CtlPrepareRx>
      break;
 80147fa:	e076      	b.n	80148ea <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014802:	687a      	ldr	r2, [r7, #4]
 8014804:	33b0      	adds	r3, #176	; 0xb0
 8014806:	009b      	lsls	r3, r3, #2
 8014808:	4413      	add	r3, r2
 801480a:	685b      	ldr	r3, [r3, #4]
 801480c:	689b      	ldr	r3, [r3, #8]
 801480e:	683a      	ldr	r2, [r7, #0]
 8014810:	7850      	ldrb	r0, [r2, #1]
 8014812:	2200      	movs	r2, #0
 8014814:	6839      	ldr	r1, [r7, #0]
 8014816:	4798      	blx	r3
      break;
 8014818:	e067      	b.n	80148ea <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801481a:	683b      	ldr	r3, [r7, #0]
 801481c:	785b      	ldrb	r3, [r3, #1]
 801481e:	2b0b      	cmp	r3, #11
 8014820:	d851      	bhi.n	80148c6 <USBD_CDC_Setup+0x18a>
 8014822:	a201      	add	r2, pc, #4	; (adr r2, 8014828 <USBD_CDC_Setup+0xec>)
 8014824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014828:	08014859 	.word	0x08014859
 801482c:	080148d5 	.word	0x080148d5
 8014830:	080148c7 	.word	0x080148c7
 8014834:	080148c7 	.word	0x080148c7
 8014838:	080148c7 	.word	0x080148c7
 801483c:	080148c7 	.word	0x080148c7
 8014840:	080148c7 	.word	0x080148c7
 8014844:	080148c7 	.word	0x080148c7
 8014848:	080148c7 	.word	0x080148c7
 801484c:	080148c7 	.word	0x080148c7
 8014850:	08014883 	.word	0x08014883
 8014854:	080148ad 	.word	0x080148ad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801485e:	b2db      	uxtb	r3, r3
 8014860:	2b03      	cmp	r3, #3
 8014862:	d107      	bne.n	8014874 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014864:	f107 030a 	add.w	r3, r7, #10
 8014868:	2202      	movs	r2, #2
 801486a:	4619      	mov	r1, r3
 801486c:	6878      	ldr	r0, [r7, #4]
 801486e:	f001 fd33 	bl	80162d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014872:	e032      	b.n	80148da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014874:	6839      	ldr	r1, [r7, #0]
 8014876:	6878      	ldr	r0, [r7, #4]
 8014878:	f001 fcbd 	bl	80161f6 <USBD_CtlError>
            ret = USBD_FAIL;
 801487c:	2303      	movs	r3, #3
 801487e:	75fb      	strb	r3, [r7, #23]
          break;
 8014880:	e02b      	b.n	80148da <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014888:	b2db      	uxtb	r3, r3
 801488a:	2b03      	cmp	r3, #3
 801488c:	d107      	bne.n	801489e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801488e:	f107 030d 	add.w	r3, r7, #13
 8014892:	2201      	movs	r2, #1
 8014894:	4619      	mov	r1, r3
 8014896:	6878      	ldr	r0, [r7, #4]
 8014898:	f001 fd1e 	bl	80162d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801489c:	e01d      	b.n	80148da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801489e:	6839      	ldr	r1, [r7, #0]
 80148a0:	6878      	ldr	r0, [r7, #4]
 80148a2:	f001 fca8 	bl	80161f6 <USBD_CtlError>
            ret = USBD_FAIL;
 80148a6:	2303      	movs	r3, #3
 80148a8:	75fb      	strb	r3, [r7, #23]
          break;
 80148aa:	e016      	b.n	80148da <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80148b2:	b2db      	uxtb	r3, r3
 80148b4:	2b03      	cmp	r3, #3
 80148b6:	d00f      	beq.n	80148d8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80148b8:	6839      	ldr	r1, [r7, #0]
 80148ba:	6878      	ldr	r0, [r7, #4]
 80148bc:	f001 fc9b 	bl	80161f6 <USBD_CtlError>
            ret = USBD_FAIL;
 80148c0:	2303      	movs	r3, #3
 80148c2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80148c4:	e008      	b.n	80148d8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80148c6:	6839      	ldr	r1, [r7, #0]
 80148c8:	6878      	ldr	r0, [r7, #4]
 80148ca:	f001 fc94 	bl	80161f6 <USBD_CtlError>
          ret = USBD_FAIL;
 80148ce:	2303      	movs	r3, #3
 80148d0:	75fb      	strb	r3, [r7, #23]
          break;
 80148d2:	e002      	b.n	80148da <USBD_CDC_Setup+0x19e>
          break;
 80148d4:	bf00      	nop
 80148d6:	e008      	b.n	80148ea <USBD_CDC_Setup+0x1ae>
          break;
 80148d8:	bf00      	nop
      }
      break;
 80148da:	e006      	b.n	80148ea <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80148dc:	6839      	ldr	r1, [r7, #0]
 80148de:	6878      	ldr	r0, [r7, #4]
 80148e0:	f001 fc89 	bl	80161f6 <USBD_CtlError>
      ret = USBD_FAIL;
 80148e4:	2303      	movs	r3, #3
 80148e6:	75fb      	strb	r3, [r7, #23]
      break;
 80148e8:	bf00      	nop
  }

  return (uint8_t)ret;
 80148ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80148ec:	4618      	mov	r0, r3
 80148ee:	3718      	adds	r7, #24
 80148f0:	46bd      	mov	sp, r7
 80148f2:	bd80      	pop	{r7, pc}

080148f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80148f4:	b580      	push	{r7, lr}
 80148f6:	b084      	sub	sp, #16
 80148f8:	af00      	add	r7, sp, #0
 80148fa:	6078      	str	r0, [r7, #4]
 80148fc:	460b      	mov	r3, r1
 80148fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014906:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	32b0      	adds	r2, #176	; 0xb0
 8014912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014916:	2b00      	cmp	r3, #0
 8014918:	d101      	bne.n	801491e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801491a:	2303      	movs	r3, #3
 801491c:	e065      	b.n	80149ea <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	32b0      	adds	r2, #176	; 0xb0
 8014928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801492c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801492e:	78fb      	ldrb	r3, [r7, #3]
 8014930:	f003 020f 	and.w	r2, r3, #15
 8014934:	6879      	ldr	r1, [r7, #4]
 8014936:	4613      	mov	r3, r2
 8014938:	009b      	lsls	r3, r3, #2
 801493a:	4413      	add	r3, r2
 801493c:	009b      	lsls	r3, r3, #2
 801493e:	440b      	add	r3, r1
 8014940:	3318      	adds	r3, #24
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	2b00      	cmp	r3, #0
 8014946:	d02f      	beq.n	80149a8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8014948:	78fb      	ldrb	r3, [r7, #3]
 801494a:	f003 020f 	and.w	r2, r3, #15
 801494e:	6879      	ldr	r1, [r7, #4]
 8014950:	4613      	mov	r3, r2
 8014952:	009b      	lsls	r3, r3, #2
 8014954:	4413      	add	r3, r2
 8014956:	009b      	lsls	r3, r3, #2
 8014958:	440b      	add	r3, r1
 801495a:	3318      	adds	r3, #24
 801495c:	681a      	ldr	r2, [r3, #0]
 801495e:	78fb      	ldrb	r3, [r7, #3]
 8014960:	f003 010f 	and.w	r1, r3, #15
 8014964:	68f8      	ldr	r0, [r7, #12]
 8014966:	460b      	mov	r3, r1
 8014968:	00db      	lsls	r3, r3, #3
 801496a:	440b      	add	r3, r1
 801496c:	009b      	lsls	r3, r3, #2
 801496e:	4403      	add	r3, r0
 8014970:	3344      	adds	r3, #68	; 0x44
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	fbb2 f1f3 	udiv	r1, r2, r3
 8014978:	fb01 f303 	mul.w	r3, r1, r3
 801497c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801497e:	2b00      	cmp	r3, #0
 8014980:	d112      	bne.n	80149a8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8014982:	78fb      	ldrb	r3, [r7, #3]
 8014984:	f003 020f 	and.w	r2, r3, #15
 8014988:	6879      	ldr	r1, [r7, #4]
 801498a:	4613      	mov	r3, r2
 801498c:	009b      	lsls	r3, r3, #2
 801498e:	4413      	add	r3, r2
 8014990:	009b      	lsls	r3, r3, #2
 8014992:	440b      	add	r3, r1
 8014994:	3318      	adds	r3, #24
 8014996:	2200      	movs	r2, #0
 8014998:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801499a:	78f9      	ldrb	r1, [r7, #3]
 801499c:	2300      	movs	r3, #0
 801499e:	2200      	movs	r2, #0
 80149a0:	6878      	ldr	r0, [r7, #4]
 80149a2:	f002 f9f0 	bl	8016d86 <USBD_LL_Transmit>
 80149a6:	e01f      	b.n	80149e8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80149a8:	68bb      	ldr	r3, [r7, #8]
 80149aa:	2200      	movs	r2, #0
 80149ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80149b6:	687a      	ldr	r2, [r7, #4]
 80149b8:	33b0      	adds	r3, #176	; 0xb0
 80149ba:	009b      	lsls	r3, r3, #2
 80149bc:	4413      	add	r3, r2
 80149be:	685b      	ldr	r3, [r3, #4]
 80149c0:	691b      	ldr	r3, [r3, #16]
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d010      	beq.n	80149e8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80149cc:	687a      	ldr	r2, [r7, #4]
 80149ce:	33b0      	adds	r3, #176	; 0xb0
 80149d0:	009b      	lsls	r3, r3, #2
 80149d2:	4413      	add	r3, r2
 80149d4:	685b      	ldr	r3, [r3, #4]
 80149d6:	691b      	ldr	r3, [r3, #16]
 80149d8:	68ba      	ldr	r2, [r7, #8]
 80149da:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80149de:	68ba      	ldr	r2, [r7, #8]
 80149e0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80149e4:	78fa      	ldrb	r2, [r7, #3]
 80149e6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80149e8:	2300      	movs	r3, #0
}
 80149ea:	4618      	mov	r0, r3
 80149ec:	3710      	adds	r7, #16
 80149ee:	46bd      	mov	sp, r7
 80149f0:	bd80      	pop	{r7, pc}

080149f2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80149f2:	b580      	push	{r7, lr}
 80149f4:	b084      	sub	sp, #16
 80149f6:	af00      	add	r7, sp, #0
 80149f8:	6078      	str	r0, [r7, #4]
 80149fa:	460b      	mov	r3, r1
 80149fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	32b0      	adds	r2, #176	; 0xb0
 8014a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a0c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	32b0      	adds	r2, #176	; 0xb0
 8014a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d101      	bne.n	8014a24 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8014a20:	2303      	movs	r3, #3
 8014a22:	e01a      	b.n	8014a5a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014a24:	78fb      	ldrb	r3, [r7, #3]
 8014a26:	4619      	mov	r1, r3
 8014a28:	6878      	ldr	r0, [r7, #4]
 8014a2a:	f002 f9ee 	bl	8016e0a <USBD_LL_GetRxDataSize>
 8014a2e:	4602      	mov	r2, r0
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014a3c:	687a      	ldr	r2, [r7, #4]
 8014a3e:	33b0      	adds	r3, #176	; 0xb0
 8014a40:	009b      	lsls	r3, r3, #2
 8014a42:	4413      	add	r3, r2
 8014a44:	685b      	ldr	r3, [r3, #4]
 8014a46:	68db      	ldr	r3, [r3, #12]
 8014a48:	68fa      	ldr	r2, [r7, #12]
 8014a4a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8014a4e:	68fa      	ldr	r2, [r7, #12]
 8014a50:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8014a54:	4611      	mov	r1, r2
 8014a56:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8014a58:	2300      	movs	r3, #0
}
 8014a5a:	4618      	mov	r0, r3
 8014a5c:	3710      	adds	r7, #16
 8014a5e:	46bd      	mov	sp, r7
 8014a60:	bd80      	pop	{r7, pc}

08014a62 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014a62:	b580      	push	{r7, lr}
 8014a64:	b084      	sub	sp, #16
 8014a66:	af00      	add	r7, sp, #0
 8014a68:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	32b0      	adds	r2, #176	; 0xb0
 8014a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a78:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	d101      	bne.n	8014a84 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014a80:	2303      	movs	r3, #3
 8014a82:	e025      	b.n	8014ad0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014a8a:	687a      	ldr	r2, [r7, #4]
 8014a8c:	33b0      	adds	r3, #176	; 0xb0
 8014a8e:	009b      	lsls	r3, r3, #2
 8014a90:	4413      	add	r3, r2
 8014a92:	685b      	ldr	r3, [r3, #4]
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d01a      	beq.n	8014ace <USBD_CDC_EP0_RxReady+0x6c>
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8014a9e:	2bff      	cmp	r3, #255	; 0xff
 8014aa0:	d015      	beq.n	8014ace <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014aa8:	687a      	ldr	r2, [r7, #4]
 8014aaa:	33b0      	adds	r3, #176	; 0xb0
 8014aac:	009b      	lsls	r3, r3, #2
 8014aae:	4413      	add	r3, r2
 8014ab0:	685b      	ldr	r3, [r3, #4]
 8014ab2:	689b      	ldr	r3, [r3, #8]
 8014ab4:	68fa      	ldr	r2, [r7, #12]
 8014ab6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8014aba:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8014abc:	68fa      	ldr	r2, [r7, #12]
 8014abe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014ac2:	b292      	uxth	r2, r2
 8014ac4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	22ff      	movs	r2, #255	; 0xff
 8014aca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8014ace:	2300      	movs	r3, #0
}
 8014ad0:	4618      	mov	r0, r3
 8014ad2:	3710      	adds	r7, #16
 8014ad4:	46bd      	mov	sp, r7
 8014ad6:	bd80      	pop	{r7, pc}

08014ad8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014ad8:	b580      	push	{r7, lr}
 8014ada:	b086      	sub	sp, #24
 8014adc:	af00      	add	r7, sp, #0
 8014ade:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014ae0:	2182      	movs	r1, #130	; 0x82
 8014ae2:	4818      	ldr	r0, [pc, #96]	; (8014b44 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014ae4:	f000 fd4f 	bl	8015586 <USBD_GetEpDesc>
 8014ae8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014aea:	2101      	movs	r1, #1
 8014aec:	4815      	ldr	r0, [pc, #84]	; (8014b44 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014aee:	f000 fd4a 	bl	8015586 <USBD_GetEpDesc>
 8014af2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014af4:	2181      	movs	r1, #129	; 0x81
 8014af6:	4813      	ldr	r0, [pc, #76]	; (8014b44 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014af8:	f000 fd45 	bl	8015586 <USBD_GetEpDesc>
 8014afc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014afe:	697b      	ldr	r3, [r7, #20]
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d002      	beq.n	8014b0a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014b04:	697b      	ldr	r3, [r7, #20]
 8014b06:	2210      	movs	r2, #16
 8014b08:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014b0a:	693b      	ldr	r3, [r7, #16]
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d006      	beq.n	8014b1e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014b10:	693b      	ldr	r3, [r7, #16]
 8014b12:	2200      	movs	r2, #0
 8014b14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014b18:	711a      	strb	r2, [r3, #4]
 8014b1a:	2200      	movs	r2, #0
 8014b1c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d006      	beq.n	8014b32 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	2200      	movs	r2, #0
 8014b28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014b2c:	711a      	strb	r2, [r3, #4]
 8014b2e:	2200      	movs	r2, #0
 8014b30:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	2243      	movs	r2, #67	; 0x43
 8014b36:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014b38:	4b02      	ldr	r3, [pc, #8]	; (8014b44 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	3718      	adds	r7, #24
 8014b3e:	46bd      	mov	sp, r7
 8014b40:	bd80      	pop	{r7, pc}
 8014b42:	bf00      	nop
 8014b44:	24000054 	.word	0x24000054

08014b48 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014b48:	b580      	push	{r7, lr}
 8014b4a:	b086      	sub	sp, #24
 8014b4c:	af00      	add	r7, sp, #0
 8014b4e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014b50:	2182      	movs	r1, #130	; 0x82
 8014b52:	4818      	ldr	r0, [pc, #96]	; (8014bb4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014b54:	f000 fd17 	bl	8015586 <USBD_GetEpDesc>
 8014b58:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014b5a:	2101      	movs	r1, #1
 8014b5c:	4815      	ldr	r0, [pc, #84]	; (8014bb4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014b5e:	f000 fd12 	bl	8015586 <USBD_GetEpDesc>
 8014b62:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014b64:	2181      	movs	r1, #129	; 0x81
 8014b66:	4813      	ldr	r0, [pc, #76]	; (8014bb4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014b68:	f000 fd0d 	bl	8015586 <USBD_GetEpDesc>
 8014b6c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014b6e:	697b      	ldr	r3, [r7, #20]
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d002      	beq.n	8014b7a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8014b74:	697b      	ldr	r3, [r7, #20]
 8014b76:	2210      	movs	r2, #16
 8014b78:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014b7a:	693b      	ldr	r3, [r7, #16]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d006      	beq.n	8014b8e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014b80:	693b      	ldr	r3, [r7, #16]
 8014b82:	2200      	movs	r2, #0
 8014b84:	711a      	strb	r2, [r3, #4]
 8014b86:	2200      	movs	r2, #0
 8014b88:	f042 0202 	orr.w	r2, r2, #2
 8014b8c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d006      	beq.n	8014ba2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	2200      	movs	r2, #0
 8014b98:	711a      	strb	r2, [r3, #4]
 8014b9a:	2200      	movs	r2, #0
 8014b9c:	f042 0202 	orr.w	r2, r2, #2
 8014ba0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	2243      	movs	r2, #67	; 0x43
 8014ba6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014ba8:	4b02      	ldr	r3, [pc, #8]	; (8014bb4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8014baa:	4618      	mov	r0, r3
 8014bac:	3718      	adds	r7, #24
 8014bae:	46bd      	mov	sp, r7
 8014bb0:	bd80      	pop	{r7, pc}
 8014bb2:	bf00      	nop
 8014bb4:	24000054 	.word	0x24000054

08014bb8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014bb8:	b580      	push	{r7, lr}
 8014bba:	b086      	sub	sp, #24
 8014bbc:	af00      	add	r7, sp, #0
 8014bbe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014bc0:	2182      	movs	r1, #130	; 0x82
 8014bc2:	4818      	ldr	r0, [pc, #96]	; (8014c24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014bc4:	f000 fcdf 	bl	8015586 <USBD_GetEpDesc>
 8014bc8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014bca:	2101      	movs	r1, #1
 8014bcc:	4815      	ldr	r0, [pc, #84]	; (8014c24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014bce:	f000 fcda 	bl	8015586 <USBD_GetEpDesc>
 8014bd2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014bd4:	2181      	movs	r1, #129	; 0x81
 8014bd6:	4813      	ldr	r0, [pc, #76]	; (8014c24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014bd8:	f000 fcd5 	bl	8015586 <USBD_GetEpDesc>
 8014bdc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014bde:	697b      	ldr	r3, [r7, #20]
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d002      	beq.n	8014bea <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014be4:	697b      	ldr	r3, [r7, #20]
 8014be6:	2210      	movs	r2, #16
 8014be8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014bea:	693b      	ldr	r3, [r7, #16]
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d006      	beq.n	8014bfe <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014bf0:	693b      	ldr	r3, [r7, #16]
 8014bf2:	2200      	movs	r2, #0
 8014bf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014bf8:	711a      	strb	r2, [r3, #4]
 8014bfa:	2200      	movs	r2, #0
 8014bfc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d006      	beq.n	8014c12 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	2200      	movs	r2, #0
 8014c08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014c0c:	711a      	strb	r2, [r3, #4]
 8014c0e:	2200      	movs	r2, #0
 8014c10:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	2243      	movs	r2, #67	; 0x43
 8014c16:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014c18:	4b02      	ldr	r3, [pc, #8]	; (8014c24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8014c1a:	4618      	mov	r0, r3
 8014c1c:	3718      	adds	r7, #24
 8014c1e:	46bd      	mov	sp, r7
 8014c20:	bd80      	pop	{r7, pc}
 8014c22:	bf00      	nop
 8014c24:	24000054 	.word	0x24000054

08014c28 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014c28:	b480      	push	{r7}
 8014c2a:	b083      	sub	sp, #12
 8014c2c:	af00      	add	r7, sp, #0
 8014c2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	220a      	movs	r2, #10
 8014c34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8014c36:	4b03      	ldr	r3, [pc, #12]	; (8014c44 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014c38:	4618      	mov	r0, r3
 8014c3a:	370c      	adds	r7, #12
 8014c3c:	46bd      	mov	sp, r7
 8014c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c42:	4770      	bx	lr
 8014c44:	24000010 	.word	0x24000010

08014c48 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8014c48:	b480      	push	{r7}
 8014c4a:	b083      	sub	sp, #12
 8014c4c:	af00      	add	r7, sp, #0
 8014c4e:	6078      	str	r0, [r7, #4]
 8014c50:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8014c52:	683b      	ldr	r3, [r7, #0]
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d101      	bne.n	8014c5c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014c58:	2303      	movs	r3, #3
 8014c5a:	e009      	b.n	8014c70 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014c62:	687a      	ldr	r2, [r7, #4]
 8014c64:	33b0      	adds	r3, #176	; 0xb0
 8014c66:	009b      	lsls	r3, r3, #2
 8014c68:	4413      	add	r3, r2
 8014c6a:	683a      	ldr	r2, [r7, #0]
 8014c6c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8014c6e:	2300      	movs	r3, #0
}
 8014c70:	4618      	mov	r0, r3
 8014c72:	370c      	adds	r7, #12
 8014c74:	46bd      	mov	sp, r7
 8014c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c7a:	4770      	bx	lr

08014c7c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014c7c:	b480      	push	{r7}
 8014c7e:	b087      	sub	sp, #28
 8014c80:	af00      	add	r7, sp, #0
 8014c82:	60f8      	str	r0, [r7, #12]
 8014c84:	60b9      	str	r1, [r7, #8]
 8014c86:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	32b0      	adds	r2, #176	; 0xb0
 8014c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c96:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014c98:	697b      	ldr	r3, [r7, #20]
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d101      	bne.n	8014ca2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014c9e:	2303      	movs	r3, #3
 8014ca0:	e008      	b.n	8014cb4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8014ca2:	697b      	ldr	r3, [r7, #20]
 8014ca4:	68ba      	ldr	r2, [r7, #8]
 8014ca6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8014caa:	697b      	ldr	r3, [r7, #20]
 8014cac:	687a      	ldr	r2, [r7, #4]
 8014cae:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8014cb2:	2300      	movs	r3, #0
}
 8014cb4:	4618      	mov	r0, r3
 8014cb6:	371c      	adds	r7, #28
 8014cb8:	46bd      	mov	sp, r7
 8014cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cbe:	4770      	bx	lr

08014cc0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014cc0:	b480      	push	{r7}
 8014cc2:	b085      	sub	sp, #20
 8014cc4:	af00      	add	r7, sp, #0
 8014cc6:	6078      	str	r0, [r7, #4]
 8014cc8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	32b0      	adds	r2, #176	; 0xb0
 8014cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014cd8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d101      	bne.n	8014ce4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8014ce0:	2303      	movs	r3, #3
 8014ce2:	e004      	b.n	8014cee <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	683a      	ldr	r2, [r7, #0]
 8014ce8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8014cec:	2300      	movs	r3, #0
}
 8014cee:	4618      	mov	r0, r3
 8014cf0:	3714      	adds	r7, #20
 8014cf2:	46bd      	mov	sp, r7
 8014cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cf8:	4770      	bx	lr
	...

08014cfc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8014cfc:	b580      	push	{r7, lr}
 8014cfe:	b084      	sub	sp, #16
 8014d00:	af00      	add	r7, sp, #0
 8014d02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	32b0      	adds	r2, #176	; 0xb0
 8014d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d12:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8014d14:	2301      	movs	r3, #1
 8014d16:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014d18:	68bb      	ldr	r3, [r7, #8]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d101      	bne.n	8014d22 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014d1e:	2303      	movs	r3, #3
 8014d20:	e025      	b.n	8014d6e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8014d22:	68bb      	ldr	r3, [r7, #8]
 8014d24:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d11f      	bne.n	8014d6c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8014d2c:	68bb      	ldr	r3, [r7, #8]
 8014d2e:	2201      	movs	r2, #1
 8014d30:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8014d34:	4b10      	ldr	r3, [pc, #64]	; (8014d78 <USBD_CDC_TransmitPacket+0x7c>)
 8014d36:	781b      	ldrb	r3, [r3, #0]
 8014d38:	f003 020f 	and.w	r2, r3, #15
 8014d3c:	68bb      	ldr	r3, [r7, #8]
 8014d3e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8014d42:	6878      	ldr	r0, [r7, #4]
 8014d44:	4613      	mov	r3, r2
 8014d46:	009b      	lsls	r3, r3, #2
 8014d48:	4413      	add	r3, r2
 8014d4a:	009b      	lsls	r3, r3, #2
 8014d4c:	4403      	add	r3, r0
 8014d4e:	3318      	adds	r3, #24
 8014d50:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8014d52:	4b09      	ldr	r3, [pc, #36]	; (8014d78 <USBD_CDC_TransmitPacket+0x7c>)
 8014d54:	7819      	ldrb	r1, [r3, #0]
 8014d56:	68bb      	ldr	r3, [r7, #8]
 8014d58:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8014d5c:	68bb      	ldr	r3, [r7, #8]
 8014d5e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014d62:	6878      	ldr	r0, [r7, #4]
 8014d64:	f002 f80f 	bl	8016d86 <USBD_LL_Transmit>

    ret = USBD_OK;
 8014d68:	2300      	movs	r3, #0
 8014d6a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8014d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d6e:	4618      	mov	r0, r3
 8014d70:	3710      	adds	r7, #16
 8014d72:	46bd      	mov	sp, r7
 8014d74:	bd80      	pop	{r7, pc}
 8014d76:	bf00      	nop
 8014d78:	24000097 	.word	0x24000097

08014d7c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014d7c:	b580      	push	{r7, lr}
 8014d7e:	b084      	sub	sp, #16
 8014d80:	af00      	add	r7, sp, #0
 8014d82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	32b0      	adds	r2, #176	; 0xb0
 8014d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d92:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	32b0      	adds	r2, #176	; 0xb0
 8014d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d101      	bne.n	8014daa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8014da6:	2303      	movs	r3, #3
 8014da8:	e018      	b.n	8014ddc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	7c1b      	ldrb	r3, [r3, #16]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d10a      	bne.n	8014dc8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014db2:	4b0c      	ldr	r3, [pc, #48]	; (8014de4 <USBD_CDC_ReceivePacket+0x68>)
 8014db4:	7819      	ldrb	r1, [r3, #0]
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014dbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014dc0:	6878      	ldr	r0, [r7, #4]
 8014dc2:	f002 f801 	bl	8016dc8 <USBD_LL_PrepareReceive>
 8014dc6:	e008      	b.n	8014dda <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014dc8:	4b06      	ldr	r3, [pc, #24]	; (8014de4 <USBD_CDC_ReceivePacket+0x68>)
 8014dca:	7819      	ldrb	r1, [r3, #0]
 8014dcc:	68fb      	ldr	r3, [r7, #12]
 8014dce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014dd2:	2340      	movs	r3, #64	; 0x40
 8014dd4:	6878      	ldr	r0, [r7, #4]
 8014dd6:	f001 fff7 	bl	8016dc8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014dda:	2300      	movs	r3, #0
}
 8014ddc:	4618      	mov	r0, r3
 8014dde:	3710      	adds	r7, #16
 8014de0:	46bd      	mov	sp, r7
 8014de2:	bd80      	pop	{r7, pc}
 8014de4:	24000098 	.word	0x24000098

08014de8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014de8:	b580      	push	{r7, lr}
 8014dea:	b086      	sub	sp, #24
 8014dec:	af00      	add	r7, sp, #0
 8014dee:	60f8      	str	r0, [r7, #12]
 8014df0:	60b9      	str	r1, [r7, #8]
 8014df2:	4613      	mov	r3, r2
 8014df4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014df6:	68fb      	ldr	r3, [r7, #12]
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d101      	bne.n	8014e00 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014dfc:	2303      	movs	r3, #3
 8014dfe:	e01f      	b.n	8014e40 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8014e00:	68fb      	ldr	r3, [r7, #12]
 8014e02:	2200      	movs	r2, #0
 8014e04:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8014e08:	68fb      	ldr	r3, [r7, #12]
 8014e0a:	2200      	movs	r2, #0
 8014e0c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	2200      	movs	r2, #0
 8014e14:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014e18:	68bb      	ldr	r3, [r7, #8]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d003      	beq.n	8014e26 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8014e1e:	68fb      	ldr	r3, [r7, #12]
 8014e20:	68ba      	ldr	r2, [r7, #8]
 8014e22:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014e26:	68fb      	ldr	r3, [r7, #12]
 8014e28:	2201      	movs	r2, #1
 8014e2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8014e2e:	68fb      	ldr	r3, [r7, #12]
 8014e30:	79fa      	ldrb	r2, [r7, #7]
 8014e32:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014e34:	68f8      	ldr	r0, [r7, #12]
 8014e36:	f001 fe6b 	bl	8016b10 <USBD_LL_Init>
 8014e3a:	4603      	mov	r3, r0
 8014e3c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014e40:	4618      	mov	r0, r3
 8014e42:	3718      	adds	r7, #24
 8014e44:	46bd      	mov	sp, r7
 8014e46:	bd80      	pop	{r7, pc}

08014e48 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014e48:	b580      	push	{r7, lr}
 8014e4a:	b084      	sub	sp, #16
 8014e4c:	af00      	add	r7, sp, #0
 8014e4e:	6078      	str	r0, [r7, #4]
 8014e50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014e52:	2300      	movs	r3, #0
 8014e54:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8014e56:	683b      	ldr	r3, [r7, #0]
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d101      	bne.n	8014e60 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014e5c:	2303      	movs	r3, #3
 8014e5e:	e025      	b.n	8014eac <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	683a      	ldr	r2, [r7, #0]
 8014e64:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	32ae      	adds	r2, #174	; 0xae
 8014e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d00f      	beq.n	8014e9c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	32ae      	adds	r2, #174	; 0xae
 8014e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e8c:	f107 020e 	add.w	r2, r7, #14
 8014e90:	4610      	mov	r0, r2
 8014e92:	4798      	blx	r3
 8014e94:	4602      	mov	r2, r0
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8014ea2:	1c5a      	adds	r2, r3, #1
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8014eaa:	2300      	movs	r3, #0
}
 8014eac:	4618      	mov	r0, r3
 8014eae:	3710      	adds	r7, #16
 8014eb0:	46bd      	mov	sp, r7
 8014eb2:	bd80      	pop	{r7, pc}

08014eb4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8014eb4:	b580      	push	{r7, lr}
 8014eb6:	b082      	sub	sp, #8
 8014eb8:	af00      	add	r7, sp, #0
 8014eba:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8014ebc:	6878      	ldr	r0, [r7, #4]
 8014ebe:	f001 fe79 	bl	8016bb4 <USBD_LL_Start>
 8014ec2:	4603      	mov	r3, r0
}
 8014ec4:	4618      	mov	r0, r3
 8014ec6:	3708      	adds	r7, #8
 8014ec8:	46bd      	mov	sp, r7
 8014eca:	bd80      	pop	{r7, pc}

08014ecc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8014ecc:	b480      	push	{r7}
 8014ece:	b083      	sub	sp, #12
 8014ed0:	af00      	add	r7, sp, #0
 8014ed2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014ed4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8014ed6:	4618      	mov	r0, r3
 8014ed8:	370c      	adds	r7, #12
 8014eda:	46bd      	mov	sp, r7
 8014edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ee0:	4770      	bx	lr

08014ee2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014ee2:	b580      	push	{r7, lr}
 8014ee4:	b084      	sub	sp, #16
 8014ee6:	af00      	add	r7, sp, #0
 8014ee8:	6078      	str	r0, [r7, #4]
 8014eea:	460b      	mov	r3, r1
 8014eec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014eee:	2300      	movs	r3, #0
 8014ef0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d009      	beq.n	8014f10 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014f02:	681b      	ldr	r3, [r3, #0]
 8014f04:	78fa      	ldrb	r2, [r7, #3]
 8014f06:	4611      	mov	r1, r2
 8014f08:	6878      	ldr	r0, [r7, #4]
 8014f0a:	4798      	blx	r3
 8014f0c:	4603      	mov	r3, r0
 8014f0e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f12:	4618      	mov	r0, r3
 8014f14:	3710      	adds	r7, #16
 8014f16:	46bd      	mov	sp, r7
 8014f18:	bd80      	pop	{r7, pc}

08014f1a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014f1a:	b580      	push	{r7, lr}
 8014f1c:	b084      	sub	sp, #16
 8014f1e:	af00      	add	r7, sp, #0
 8014f20:	6078      	str	r0, [r7, #4]
 8014f22:	460b      	mov	r3, r1
 8014f24:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014f26:	2300      	movs	r3, #0
 8014f28:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014f30:	685b      	ldr	r3, [r3, #4]
 8014f32:	78fa      	ldrb	r2, [r7, #3]
 8014f34:	4611      	mov	r1, r2
 8014f36:	6878      	ldr	r0, [r7, #4]
 8014f38:	4798      	blx	r3
 8014f3a:	4603      	mov	r3, r0
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d001      	beq.n	8014f44 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8014f40:	2303      	movs	r3, #3
 8014f42:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f46:	4618      	mov	r0, r3
 8014f48:	3710      	adds	r7, #16
 8014f4a:	46bd      	mov	sp, r7
 8014f4c:	bd80      	pop	{r7, pc}

08014f4e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014f4e:	b580      	push	{r7, lr}
 8014f50:	b084      	sub	sp, #16
 8014f52:	af00      	add	r7, sp, #0
 8014f54:	6078      	str	r0, [r7, #4]
 8014f56:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014f5e:	6839      	ldr	r1, [r7, #0]
 8014f60:	4618      	mov	r0, r3
 8014f62:	f001 f90e 	bl	8016182 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	2201      	movs	r2, #1
 8014f6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8014f74:	461a      	mov	r2, r3
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014f82:	f003 031f 	and.w	r3, r3, #31
 8014f86:	2b02      	cmp	r3, #2
 8014f88:	d01a      	beq.n	8014fc0 <USBD_LL_SetupStage+0x72>
 8014f8a:	2b02      	cmp	r3, #2
 8014f8c:	d822      	bhi.n	8014fd4 <USBD_LL_SetupStage+0x86>
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d002      	beq.n	8014f98 <USBD_LL_SetupStage+0x4a>
 8014f92:	2b01      	cmp	r3, #1
 8014f94:	d00a      	beq.n	8014fac <USBD_LL_SetupStage+0x5e>
 8014f96:	e01d      	b.n	8014fd4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014f9e:	4619      	mov	r1, r3
 8014fa0:	6878      	ldr	r0, [r7, #4]
 8014fa2:	f000 fb65 	bl	8015670 <USBD_StdDevReq>
 8014fa6:	4603      	mov	r3, r0
 8014fa8:	73fb      	strb	r3, [r7, #15]
      break;
 8014faa:	e020      	b.n	8014fee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014fb2:	4619      	mov	r1, r3
 8014fb4:	6878      	ldr	r0, [r7, #4]
 8014fb6:	f000 fbcd 	bl	8015754 <USBD_StdItfReq>
 8014fba:	4603      	mov	r3, r0
 8014fbc:	73fb      	strb	r3, [r7, #15]
      break;
 8014fbe:	e016      	b.n	8014fee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014fc6:	4619      	mov	r1, r3
 8014fc8:	6878      	ldr	r0, [r7, #4]
 8014fca:	f000 fc2f 	bl	801582c <USBD_StdEPReq>
 8014fce:	4603      	mov	r3, r0
 8014fd0:	73fb      	strb	r3, [r7, #15]
      break;
 8014fd2:	e00c      	b.n	8014fee <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014fda:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014fde:	b2db      	uxtb	r3, r3
 8014fe0:	4619      	mov	r1, r3
 8014fe2:	6878      	ldr	r0, [r7, #4]
 8014fe4:	f001 fe46 	bl	8016c74 <USBD_LL_StallEP>
 8014fe8:	4603      	mov	r3, r0
 8014fea:	73fb      	strb	r3, [r7, #15]
      break;
 8014fec:	bf00      	nop
  }

  return ret;
 8014fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ff0:	4618      	mov	r0, r3
 8014ff2:	3710      	adds	r7, #16
 8014ff4:	46bd      	mov	sp, r7
 8014ff6:	bd80      	pop	{r7, pc}

08014ff8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8014ff8:	b580      	push	{r7, lr}
 8014ffa:	b086      	sub	sp, #24
 8014ffc:	af00      	add	r7, sp, #0
 8014ffe:	60f8      	str	r0, [r7, #12]
 8015000:	460b      	mov	r3, r1
 8015002:	607a      	str	r2, [r7, #4]
 8015004:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8015006:	2300      	movs	r3, #0
 8015008:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801500a:	7afb      	ldrb	r3, [r7, #11]
 801500c:	2b00      	cmp	r3, #0
 801500e:	d16e      	bne.n	80150ee <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015016:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015018:	68fb      	ldr	r3, [r7, #12]
 801501a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801501e:	2b03      	cmp	r3, #3
 8015020:	f040 8098 	bne.w	8015154 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8015024:	693b      	ldr	r3, [r7, #16]
 8015026:	689a      	ldr	r2, [r3, #8]
 8015028:	693b      	ldr	r3, [r7, #16]
 801502a:	68db      	ldr	r3, [r3, #12]
 801502c:	429a      	cmp	r2, r3
 801502e:	d913      	bls.n	8015058 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8015030:	693b      	ldr	r3, [r7, #16]
 8015032:	689a      	ldr	r2, [r3, #8]
 8015034:	693b      	ldr	r3, [r7, #16]
 8015036:	68db      	ldr	r3, [r3, #12]
 8015038:	1ad2      	subs	r2, r2, r3
 801503a:	693b      	ldr	r3, [r7, #16]
 801503c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801503e:	693b      	ldr	r3, [r7, #16]
 8015040:	68da      	ldr	r2, [r3, #12]
 8015042:	693b      	ldr	r3, [r7, #16]
 8015044:	689b      	ldr	r3, [r3, #8]
 8015046:	4293      	cmp	r3, r2
 8015048:	bf28      	it	cs
 801504a:	4613      	movcs	r3, r2
 801504c:	461a      	mov	r2, r3
 801504e:	6879      	ldr	r1, [r7, #4]
 8015050:	68f8      	ldr	r0, [r7, #12]
 8015052:	f001 f98a 	bl	801636a <USBD_CtlContinueRx>
 8015056:	e07d      	b.n	8015154 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801505e:	f003 031f 	and.w	r3, r3, #31
 8015062:	2b02      	cmp	r3, #2
 8015064:	d014      	beq.n	8015090 <USBD_LL_DataOutStage+0x98>
 8015066:	2b02      	cmp	r3, #2
 8015068:	d81d      	bhi.n	80150a6 <USBD_LL_DataOutStage+0xae>
 801506a:	2b00      	cmp	r3, #0
 801506c:	d002      	beq.n	8015074 <USBD_LL_DataOutStage+0x7c>
 801506e:	2b01      	cmp	r3, #1
 8015070:	d003      	beq.n	801507a <USBD_LL_DataOutStage+0x82>
 8015072:	e018      	b.n	80150a6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8015074:	2300      	movs	r3, #0
 8015076:	75bb      	strb	r3, [r7, #22]
            break;
 8015078:	e018      	b.n	80150ac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015080:	b2db      	uxtb	r3, r3
 8015082:	4619      	mov	r1, r3
 8015084:	68f8      	ldr	r0, [r7, #12]
 8015086:	f000 fa64 	bl	8015552 <USBD_CoreFindIF>
 801508a:	4603      	mov	r3, r0
 801508c:	75bb      	strb	r3, [r7, #22]
            break;
 801508e:	e00d      	b.n	80150ac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015096:	b2db      	uxtb	r3, r3
 8015098:	4619      	mov	r1, r3
 801509a:	68f8      	ldr	r0, [r7, #12]
 801509c:	f000 fa66 	bl	801556c <USBD_CoreFindEP>
 80150a0:	4603      	mov	r3, r0
 80150a2:	75bb      	strb	r3, [r7, #22]
            break;
 80150a4:	e002      	b.n	80150ac <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80150a6:	2300      	movs	r3, #0
 80150a8:	75bb      	strb	r3, [r7, #22]
            break;
 80150aa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80150ac:	7dbb      	ldrb	r3, [r7, #22]
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	d119      	bne.n	80150e6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80150b8:	b2db      	uxtb	r3, r3
 80150ba:	2b03      	cmp	r3, #3
 80150bc:	d113      	bne.n	80150e6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80150be:	7dba      	ldrb	r2, [r7, #22]
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	32ae      	adds	r2, #174	; 0xae
 80150c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150c8:	691b      	ldr	r3, [r3, #16]
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d00b      	beq.n	80150e6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80150ce:	7dba      	ldrb	r2, [r7, #22]
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80150d6:	7dba      	ldrb	r2, [r7, #22]
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	32ae      	adds	r2, #174	; 0xae
 80150dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150e0:	691b      	ldr	r3, [r3, #16]
 80150e2:	68f8      	ldr	r0, [r7, #12]
 80150e4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80150e6:	68f8      	ldr	r0, [r7, #12]
 80150e8:	f001 f950 	bl	801638c <USBD_CtlSendStatus>
 80150ec:	e032      	b.n	8015154 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80150ee:	7afb      	ldrb	r3, [r7, #11]
 80150f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80150f4:	b2db      	uxtb	r3, r3
 80150f6:	4619      	mov	r1, r3
 80150f8:	68f8      	ldr	r0, [r7, #12]
 80150fa:	f000 fa37 	bl	801556c <USBD_CoreFindEP>
 80150fe:	4603      	mov	r3, r0
 8015100:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015102:	7dbb      	ldrb	r3, [r7, #22]
 8015104:	2bff      	cmp	r3, #255	; 0xff
 8015106:	d025      	beq.n	8015154 <USBD_LL_DataOutStage+0x15c>
 8015108:	7dbb      	ldrb	r3, [r7, #22]
 801510a:	2b00      	cmp	r3, #0
 801510c:	d122      	bne.n	8015154 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015114:	b2db      	uxtb	r3, r3
 8015116:	2b03      	cmp	r3, #3
 8015118:	d117      	bne.n	801514a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801511a:	7dba      	ldrb	r2, [r7, #22]
 801511c:	68fb      	ldr	r3, [r7, #12]
 801511e:	32ae      	adds	r2, #174	; 0xae
 8015120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015124:	699b      	ldr	r3, [r3, #24]
 8015126:	2b00      	cmp	r3, #0
 8015128:	d00f      	beq.n	801514a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801512a:	7dba      	ldrb	r2, [r7, #22]
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8015132:	7dba      	ldrb	r2, [r7, #22]
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	32ae      	adds	r2, #174	; 0xae
 8015138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801513c:	699b      	ldr	r3, [r3, #24]
 801513e:	7afa      	ldrb	r2, [r7, #11]
 8015140:	4611      	mov	r1, r2
 8015142:	68f8      	ldr	r0, [r7, #12]
 8015144:	4798      	blx	r3
 8015146:	4603      	mov	r3, r0
 8015148:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801514a:	7dfb      	ldrb	r3, [r7, #23]
 801514c:	2b00      	cmp	r3, #0
 801514e:	d001      	beq.n	8015154 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8015150:	7dfb      	ldrb	r3, [r7, #23]
 8015152:	e000      	b.n	8015156 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8015154:	2300      	movs	r3, #0
}
 8015156:	4618      	mov	r0, r3
 8015158:	3718      	adds	r7, #24
 801515a:	46bd      	mov	sp, r7
 801515c:	bd80      	pop	{r7, pc}

0801515e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801515e:	b580      	push	{r7, lr}
 8015160:	b086      	sub	sp, #24
 8015162:	af00      	add	r7, sp, #0
 8015164:	60f8      	str	r0, [r7, #12]
 8015166:	460b      	mov	r3, r1
 8015168:	607a      	str	r2, [r7, #4]
 801516a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801516c:	7afb      	ldrb	r3, [r7, #11]
 801516e:	2b00      	cmp	r3, #0
 8015170:	d16f      	bne.n	8015252 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	3314      	adds	r3, #20
 8015176:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801517e:	2b02      	cmp	r3, #2
 8015180:	d15a      	bne.n	8015238 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8015182:	693b      	ldr	r3, [r7, #16]
 8015184:	689a      	ldr	r2, [r3, #8]
 8015186:	693b      	ldr	r3, [r7, #16]
 8015188:	68db      	ldr	r3, [r3, #12]
 801518a:	429a      	cmp	r2, r3
 801518c:	d914      	bls.n	80151b8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801518e:	693b      	ldr	r3, [r7, #16]
 8015190:	689a      	ldr	r2, [r3, #8]
 8015192:	693b      	ldr	r3, [r7, #16]
 8015194:	68db      	ldr	r3, [r3, #12]
 8015196:	1ad2      	subs	r2, r2, r3
 8015198:	693b      	ldr	r3, [r7, #16]
 801519a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801519c:	693b      	ldr	r3, [r7, #16]
 801519e:	689b      	ldr	r3, [r3, #8]
 80151a0:	461a      	mov	r2, r3
 80151a2:	6879      	ldr	r1, [r7, #4]
 80151a4:	68f8      	ldr	r0, [r7, #12]
 80151a6:	f001 f8b2 	bl	801630e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80151aa:	2300      	movs	r3, #0
 80151ac:	2200      	movs	r2, #0
 80151ae:	2100      	movs	r1, #0
 80151b0:	68f8      	ldr	r0, [r7, #12]
 80151b2:	f001 fe09 	bl	8016dc8 <USBD_LL_PrepareReceive>
 80151b6:	e03f      	b.n	8015238 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80151b8:	693b      	ldr	r3, [r7, #16]
 80151ba:	68da      	ldr	r2, [r3, #12]
 80151bc:	693b      	ldr	r3, [r7, #16]
 80151be:	689b      	ldr	r3, [r3, #8]
 80151c0:	429a      	cmp	r2, r3
 80151c2:	d11c      	bne.n	80151fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80151c4:	693b      	ldr	r3, [r7, #16]
 80151c6:	685a      	ldr	r2, [r3, #4]
 80151c8:	693b      	ldr	r3, [r7, #16]
 80151ca:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80151cc:	429a      	cmp	r2, r3
 80151ce:	d316      	bcc.n	80151fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80151d0:	693b      	ldr	r3, [r7, #16]
 80151d2:	685a      	ldr	r2, [r3, #4]
 80151d4:	68fb      	ldr	r3, [r7, #12]
 80151d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80151da:	429a      	cmp	r2, r3
 80151dc:	d20f      	bcs.n	80151fe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80151de:	2200      	movs	r2, #0
 80151e0:	2100      	movs	r1, #0
 80151e2:	68f8      	ldr	r0, [r7, #12]
 80151e4:	f001 f893 	bl	801630e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80151e8:	68fb      	ldr	r3, [r7, #12]
 80151ea:	2200      	movs	r2, #0
 80151ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80151f0:	2300      	movs	r3, #0
 80151f2:	2200      	movs	r2, #0
 80151f4:	2100      	movs	r1, #0
 80151f6:	68f8      	ldr	r0, [r7, #12]
 80151f8:	f001 fde6 	bl	8016dc8 <USBD_LL_PrepareReceive>
 80151fc:	e01c      	b.n	8015238 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015204:	b2db      	uxtb	r3, r3
 8015206:	2b03      	cmp	r3, #3
 8015208:	d10f      	bne.n	801522a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015210:	68db      	ldr	r3, [r3, #12]
 8015212:	2b00      	cmp	r3, #0
 8015214:	d009      	beq.n	801522a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	2200      	movs	r2, #0
 801521a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801521e:	68fb      	ldr	r3, [r7, #12]
 8015220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015224:	68db      	ldr	r3, [r3, #12]
 8015226:	68f8      	ldr	r0, [r7, #12]
 8015228:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801522a:	2180      	movs	r1, #128	; 0x80
 801522c:	68f8      	ldr	r0, [r7, #12]
 801522e:	f001 fd21 	bl	8016c74 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015232:	68f8      	ldr	r0, [r7, #12]
 8015234:	f001 f8bd 	bl	80163b2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801523e:	2b00      	cmp	r3, #0
 8015240:	d03a      	beq.n	80152b8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8015242:	68f8      	ldr	r0, [r7, #12]
 8015244:	f7ff fe42 	bl	8014ecc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	2200      	movs	r2, #0
 801524c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8015250:	e032      	b.n	80152b8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8015252:	7afb      	ldrb	r3, [r7, #11]
 8015254:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015258:	b2db      	uxtb	r3, r3
 801525a:	4619      	mov	r1, r3
 801525c:	68f8      	ldr	r0, [r7, #12]
 801525e:	f000 f985 	bl	801556c <USBD_CoreFindEP>
 8015262:	4603      	mov	r3, r0
 8015264:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015266:	7dfb      	ldrb	r3, [r7, #23]
 8015268:	2bff      	cmp	r3, #255	; 0xff
 801526a:	d025      	beq.n	80152b8 <USBD_LL_DataInStage+0x15a>
 801526c:	7dfb      	ldrb	r3, [r7, #23]
 801526e:	2b00      	cmp	r3, #0
 8015270:	d122      	bne.n	80152b8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015272:	68fb      	ldr	r3, [r7, #12]
 8015274:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015278:	b2db      	uxtb	r3, r3
 801527a:	2b03      	cmp	r3, #3
 801527c:	d11c      	bne.n	80152b8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801527e:	7dfa      	ldrb	r2, [r7, #23]
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	32ae      	adds	r2, #174	; 0xae
 8015284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015288:	695b      	ldr	r3, [r3, #20]
 801528a:	2b00      	cmp	r3, #0
 801528c:	d014      	beq.n	80152b8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801528e:	7dfa      	ldrb	r2, [r7, #23]
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8015296:	7dfa      	ldrb	r2, [r7, #23]
 8015298:	68fb      	ldr	r3, [r7, #12]
 801529a:	32ae      	adds	r2, #174	; 0xae
 801529c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152a0:	695b      	ldr	r3, [r3, #20]
 80152a2:	7afa      	ldrb	r2, [r7, #11]
 80152a4:	4611      	mov	r1, r2
 80152a6:	68f8      	ldr	r0, [r7, #12]
 80152a8:	4798      	blx	r3
 80152aa:	4603      	mov	r3, r0
 80152ac:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80152ae:	7dbb      	ldrb	r3, [r7, #22]
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d001      	beq.n	80152b8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80152b4:	7dbb      	ldrb	r3, [r7, #22]
 80152b6:	e000      	b.n	80152ba <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80152b8:	2300      	movs	r3, #0
}
 80152ba:	4618      	mov	r0, r3
 80152bc:	3718      	adds	r7, #24
 80152be:	46bd      	mov	sp, r7
 80152c0:	bd80      	pop	{r7, pc}

080152c2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80152c2:	b580      	push	{r7, lr}
 80152c4:	b084      	sub	sp, #16
 80152c6:	af00      	add	r7, sp, #0
 80152c8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80152ca:	2300      	movs	r3, #0
 80152cc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	2201      	movs	r2, #1
 80152d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	2200      	movs	r2, #0
 80152da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	2200      	movs	r2, #0
 80152e2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	2200      	movs	r2, #0
 80152e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	2200      	movs	r2, #0
 80152f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d014      	beq.n	8015328 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015304:	685b      	ldr	r3, [r3, #4]
 8015306:	2b00      	cmp	r3, #0
 8015308:	d00e      	beq.n	8015328 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015310:	685b      	ldr	r3, [r3, #4]
 8015312:	687a      	ldr	r2, [r7, #4]
 8015314:	6852      	ldr	r2, [r2, #4]
 8015316:	b2d2      	uxtb	r2, r2
 8015318:	4611      	mov	r1, r2
 801531a:	6878      	ldr	r0, [r7, #4]
 801531c:	4798      	blx	r3
 801531e:	4603      	mov	r3, r0
 8015320:	2b00      	cmp	r3, #0
 8015322:	d001      	beq.n	8015328 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8015324:	2303      	movs	r3, #3
 8015326:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015328:	2340      	movs	r3, #64	; 0x40
 801532a:	2200      	movs	r2, #0
 801532c:	2100      	movs	r1, #0
 801532e:	6878      	ldr	r0, [r7, #4]
 8015330:	f001 fc5b 	bl	8016bea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	2201      	movs	r2, #1
 8015338:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	2240      	movs	r2, #64	; 0x40
 8015340:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015344:	2340      	movs	r3, #64	; 0x40
 8015346:	2200      	movs	r2, #0
 8015348:	2180      	movs	r1, #128	; 0x80
 801534a:	6878      	ldr	r0, [r7, #4]
 801534c:	f001 fc4d 	bl	8016bea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	2201      	movs	r2, #1
 8015354:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	2240      	movs	r2, #64	; 0x40
 801535a:	621a      	str	r2, [r3, #32]

  return ret;
 801535c:	7bfb      	ldrb	r3, [r7, #15]
}
 801535e:	4618      	mov	r0, r3
 8015360:	3710      	adds	r7, #16
 8015362:	46bd      	mov	sp, r7
 8015364:	bd80      	pop	{r7, pc}

08015366 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015366:	b480      	push	{r7}
 8015368:	b083      	sub	sp, #12
 801536a:	af00      	add	r7, sp, #0
 801536c:	6078      	str	r0, [r7, #4]
 801536e:	460b      	mov	r3, r1
 8015370:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	78fa      	ldrb	r2, [r7, #3]
 8015376:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015378:	2300      	movs	r3, #0
}
 801537a:	4618      	mov	r0, r3
 801537c:	370c      	adds	r7, #12
 801537e:	46bd      	mov	sp, r7
 8015380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015384:	4770      	bx	lr

08015386 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015386:	b480      	push	{r7}
 8015388:	b083      	sub	sp, #12
 801538a:	af00      	add	r7, sp, #0
 801538c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015394:	b2db      	uxtb	r3, r3
 8015396:	2b04      	cmp	r3, #4
 8015398:	d006      	beq.n	80153a8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80153a0:	b2da      	uxtb	r2, r3
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	2204      	movs	r2, #4
 80153ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80153b0:	2300      	movs	r3, #0
}
 80153b2:	4618      	mov	r0, r3
 80153b4:	370c      	adds	r7, #12
 80153b6:	46bd      	mov	sp, r7
 80153b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153bc:	4770      	bx	lr

080153be <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80153be:	b480      	push	{r7}
 80153c0:	b083      	sub	sp, #12
 80153c2:	af00      	add	r7, sp, #0
 80153c4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80153cc:	b2db      	uxtb	r3, r3
 80153ce:	2b04      	cmp	r3, #4
 80153d0:	d106      	bne.n	80153e0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80153d8:	b2da      	uxtb	r2, r3
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80153e0:	2300      	movs	r3, #0
}
 80153e2:	4618      	mov	r0, r3
 80153e4:	370c      	adds	r7, #12
 80153e6:	46bd      	mov	sp, r7
 80153e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ec:	4770      	bx	lr

080153ee <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80153ee:	b580      	push	{r7, lr}
 80153f0:	b082      	sub	sp, #8
 80153f2:	af00      	add	r7, sp, #0
 80153f4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80153fc:	b2db      	uxtb	r3, r3
 80153fe:	2b03      	cmp	r3, #3
 8015400:	d110      	bne.n	8015424 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015408:	2b00      	cmp	r3, #0
 801540a:	d00b      	beq.n	8015424 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015412:	69db      	ldr	r3, [r3, #28]
 8015414:	2b00      	cmp	r3, #0
 8015416:	d005      	beq.n	8015424 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801541e:	69db      	ldr	r3, [r3, #28]
 8015420:	6878      	ldr	r0, [r7, #4]
 8015422:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8015424:	2300      	movs	r3, #0
}
 8015426:	4618      	mov	r0, r3
 8015428:	3708      	adds	r7, #8
 801542a:	46bd      	mov	sp, r7
 801542c:	bd80      	pop	{r7, pc}

0801542e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801542e:	b580      	push	{r7, lr}
 8015430:	b082      	sub	sp, #8
 8015432:	af00      	add	r7, sp, #0
 8015434:	6078      	str	r0, [r7, #4]
 8015436:	460b      	mov	r3, r1
 8015438:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	32ae      	adds	r2, #174	; 0xae
 8015444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015448:	2b00      	cmp	r3, #0
 801544a:	d101      	bne.n	8015450 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801544c:	2303      	movs	r3, #3
 801544e:	e01c      	b.n	801548a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015456:	b2db      	uxtb	r3, r3
 8015458:	2b03      	cmp	r3, #3
 801545a:	d115      	bne.n	8015488 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	32ae      	adds	r2, #174	; 0xae
 8015466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801546a:	6a1b      	ldr	r3, [r3, #32]
 801546c:	2b00      	cmp	r3, #0
 801546e:	d00b      	beq.n	8015488 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	32ae      	adds	r2, #174	; 0xae
 801547a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801547e:	6a1b      	ldr	r3, [r3, #32]
 8015480:	78fa      	ldrb	r2, [r7, #3]
 8015482:	4611      	mov	r1, r2
 8015484:	6878      	ldr	r0, [r7, #4]
 8015486:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015488:	2300      	movs	r3, #0
}
 801548a:	4618      	mov	r0, r3
 801548c:	3708      	adds	r7, #8
 801548e:	46bd      	mov	sp, r7
 8015490:	bd80      	pop	{r7, pc}

08015492 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015492:	b580      	push	{r7, lr}
 8015494:	b082      	sub	sp, #8
 8015496:	af00      	add	r7, sp, #0
 8015498:	6078      	str	r0, [r7, #4]
 801549a:	460b      	mov	r3, r1
 801549c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	32ae      	adds	r2, #174	; 0xae
 80154a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d101      	bne.n	80154b4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80154b0:	2303      	movs	r3, #3
 80154b2:	e01c      	b.n	80154ee <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80154ba:	b2db      	uxtb	r3, r3
 80154bc:	2b03      	cmp	r3, #3
 80154be:	d115      	bne.n	80154ec <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	32ae      	adds	r2, #174	; 0xae
 80154ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d00b      	beq.n	80154ec <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	32ae      	adds	r2, #174	; 0xae
 80154de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80154e4:	78fa      	ldrb	r2, [r7, #3]
 80154e6:	4611      	mov	r1, r2
 80154e8:	6878      	ldr	r0, [r7, #4]
 80154ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80154ec:	2300      	movs	r3, #0
}
 80154ee:	4618      	mov	r0, r3
 80154f0:	3708      	adds	r7, #8
 80154f2:	46bd      	mov	sp, r7
 80154f4:	bd80      	pop	{r7, pc}

080154f6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80154f6:	b480      	push	{r7}
 80154f8:	b083      	sub	sp, #12
 80154fa:	af00      	add	r7, sp, #0
 80154fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80154fe:	2300      	movs	r3, #0
}
 8015500:	4618      	mov	r0, r3
 8015502:	370c      	adds	r7, #12
 8015504:	46bd      	mov	sp, r7
 8015506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801550a:	4770      	bx	lr

0801550c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801550c:	b580      	push	{r7, lr}
 801550e:	b084      	sub	sp, #16
 8015510:	af00      	add	r7, sp, #0
 8015512:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8015514:	2300      	movs	r3, #0
 8015516:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	2201      	movs	r2, #1
 801551c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015526:	2b00      	cmp	r3, #0
 8015528:	d00e      	beq.n	8015548 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015530:	685b      	ldr	r3, [r3, #4]
 8015532:	687a      	ldr	r2, [r7, #4]
 8015534:	6852      	ldr	r2, [r2, #4]
 8015536:	b2d2      	uxtb	r2, r2
 8015538:	4611      	mov	r1, r2
 801553a:	6878      	ldr	r0, [r7, #4]
 801553c:	4798      	blx	r3
 801553e:	4603      	mov	r3, r0
 8015540:	2b00      	cmp	r3, #0
 8015542:	d001      	beq.n	8015548 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8015544:	2303      	movs	r3, #3
 8015546:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015548:	7bfb      	ldrb	r3, [r7, #15]
}
 801554a:	4618      	mov	r0, r3
 801554c:	3710      	adds	r7, #16
 801554e:	46bd      	mov	sp, r7
 8015550:	bd80      	pop	{r7, pc}

08015552 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015552:	b480      	push	{r7}
 8015554:	b083      	sub	sp, #12
 8015556:	af00      	add	r7, sp, #0
 8015558:	6078      	str	r0, [r7, #4]
 801555a:	460b      	mov	r3, r1
 801555c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801555e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015560:	4618      	mov	r0, r3
 8015562:	370c      	adds	r7, #12
 8015564:	46bd      	mov	sp, r7
 8015566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801556a:	4770      	bx	lr

0801556c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801556c:	b480      	push	{r7}
 801556e:	b083      	sub	sp, #12
 8015570:	af00      	add	r7, sp, #0
 8015572:	6078      	str	r0, [r7, #4]
 8015574:	460b      	mov	r3, r1
 8015576:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015578:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801557a:	4618      	mov	r0, r3
 801557c:	370c      	adds	r7, #12
 801557e:	46bd      	mov	sp, r7
 8015580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015584:	4770      	bx	lr

08015586 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8015586:	b580      	push	{r7, lr}
 8015588:	b086      	sub	sp, #24
 801558a:	af00      	add	r7, sp, #0
 801558c:	6078      	str	r0, [r7, #4]
 801558e:	460b      	mov	r3, r1
 8015590:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801559a:	2300      	movs	r3, #0
 801559c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801559e:	68fb      	ldr	r3, [r7, #12]
 80155a0:	885b      	ldrh	r3, [r3, #2]
 80155a2:	b29a      	uxth	r2, r3
 80155a4:	68fb      	ldr	r3, [r7, #12]
 80155a6:	781b      	ldrb	r3, [r3, #0]
 80155a8:	b29b      	uxth	r3, r3
 80155aa:	429a      	cmp	r2, r3
 80155ac:	d920      	bls.n	80155f0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80155ae:	68fb      	ldr	r3, [r7, #12]
 80155b0:	781b      	ldrb	r3, [r3, #0]
 80155b2:	b29b      	uxth	r3, r3
 80155b4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80155b6:	e013      	b.n	80155e0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80155b8:	f107 030a 	add.w	r3, r7, #10
 80155bc:	4619      	mov	r1, r3
 80155be:	6978      	ldr	r0, [r7, #20]
 80155c0:	f000 f81b 	bl	80155fa <USBD_GetNextDesc>
 80155c4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80155c6:	697b      	ldr	r3, [r7, #20]
 80155c8:	785b      	ldrb	r3, [r3, #1]
 80155ca:	2b05      	cmp	r3, #5
 80155cc:	d108      	bne.n	80155e0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80155ce:	697b      	ldr	r3, [r7, #20]
 80155d0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80155d2:	693b      	ldr	r3, [r7, #16]
 80155d4:	789b      	ldrb	r3, [r3, #2]
 80155d6:	78fa      	ldrb	r2, [r7, #3]
 80155d8:	429a      	cmp	r2, r3
 80155da:	d008      	beq.n	80155ee <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80155dc:	2300      	movs	r3, #0
 80155de:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80155e0:	68fb      	ldr	r3, [r7, #12]
 80155e2:	885b      	ldrh	r3, [r3, #2]
 80155e4:	b29a      	uxth	r2, r3
 80155e6:	897b      	ldrh	r3, [r7, #10]
 80155e8:	429a      	cmp	r2, r3
 80155ea:	d8e5      	bhi.n	80155b8 <USBD_GetEpDesc+0x32>
 80155ec:	e000      	b.n	80155f0 <USBD_GetEpDesc+0x6a>
          break;
 80155ee:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80155f0:	693b      	ldr	r3, [r7, #16]
}
 80155f2:	4618      	mov	r0, r3
 80155f4:	3718      	adds	r7, #24
 80155f6:	46bd      	mov	sp, r7
 80155f8:	bd80      	pop	{r7, pc}

080155fa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80155fa:	b480      	push	{r7}
 80155fc:	b085      	sub	sp, #20
 80155fe:	af00      	add	r7, sp, #0
 8015600:	6078      	str	r0, [r7, #4]
 8015602:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8015608:	683b      	ldr	r3, [r7, #0]
 801560a:	881a      	ldrh	r2, [r3, #0]
 801560c:	68fb      	ldr	r3, [r7, #12]
 801560e:	781b      	ldrb	r3, [r3, #0]
 8015610:	b29b      	uxth	r3, r3
 8015612:	4413      	add	r3, r2
 8015614:	b29a      	uxth	r2, r3
 8015616:	683b      	ldr	r3, [r7, #0]
 8015618:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801561a:	68fb      	ldr	r3, [r7, #12]
 801561c:	781b      	ldrb	r3, [r3, #0]
 801561e:	461a      	mov	r2, r3
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	4413      	add	r3, r2
 8015624:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8015626:	68fb      	ldr	r3, [r7, #12]
}
 8015628:	4618      	mov	r0, r3
 801562a:	3714      	adds	r7, #20
 801562c:	46bd      	mov	sp, r7
 801562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015632:	4770      	bx	lr

08015634 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015634:	b480      	push	{r7}
 8015636:	b087      	sub	sp, #28
 8015638:	af00      	add	r7, sp, #0
 801563a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015640:	697b      	ldr	r3, [r7, #20]
 8015642:	781b      	ldrb	r3, [r3, #0]
 8015644:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8015646:	697b      	ldr	r3, [r7, #20]
 8015648:	3301      	adds	r3, #1
 801564a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801564c:	697b      	ldr	r3, [r7, #20]
 801564e:	781b      	ldrb	r3, [r3, #0]
 8015650:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015652:	8a3b      	ldrh	r3, [r7, #16]
 8015654:	021b      	lsls	r3, r3, #8
 8015656:	b21a      	sxth	r2, r3
 8015658:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801565c:	4313      	orrs	r3, r2
 801565e:	b21b      	sxth	r3, r3
 8015660:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015662:	89fb      	ldrh	r3, [r7, #14]
}
 8015664:	4618      	mov	r0, r3
 8015666:	371c      	adds	r7, #28
 8015668:	46bd      	mov	sp, r7
 801566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801566e:	4770      	bx	lr

08015670 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015670:	b580      	push	{r7, lr}
 8015672:	b084      	sub	sp, #16
 8015674:	af00      	add	r7, sp, #0
 8015676:	6078      	str	r0, [r7, #4]
 8015678:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801567a:	2300      	movs	r3, #0
 801567c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801567e:	683b      	ldr	r3, [r7, #0]
 8015680:	781b      	ldrb	r3, [r3, #0]
 8015682:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015686:	2b40      	cmp	r3, #64	; 0x40
 8015688:	d005      	beq.n	8015696 <USBD_StdDevReq+0x26>
 801568a:	2b40      	cmp	r3, #64	; 0x40
 801568c:	d857      	bhi.n	801573e <USBD_StdDevReq+0xce>
 801568e:	2b00      	cmp	r3, #0
 8015690:	d00f      	beq.n	80156b2 <USBD_StdDevReq+0x42>
 8015692:	2b20      	cmp	r3, #32
 8015694:	d153      	bne.n	801573e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	32ae      	adds	r2, #174	; 0xae
 80156a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156a4:	689b      	ldr	r3, [r3, #8]
 80156a6:	6839      	ldr	r1, [r7, #0]
 80156a8:	6878      	ldr	r0, [r7, #4]
 80156aa:	4798      	blx	r3
 80156ac:	4603      	mov	r3, r0
 80156ae:	73fb      	strb	r3, [r7, #15]
      break;
 80156b0:	e04a      	b.n	8015748 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80156b2:	683b      	ldr	r3, [r7, #0]
 80156b4:	785b      	ldrb	r3, [r3, #1]
 80156b6:	2b09      	cmp	r3, #9
 80156b8:	d83b      	bhi.n	8015732 <USBD_StdDevReq+0xc2>
 80156ba:	a201      	add	r2, pc, #4	; (adr r2, 80156c0 <USBD_StdDevReq+0x50>)
 80156bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80156c0:	08015715 	.word	0x08015715
 80156c4:	08015729 	.word	0x08015729
 80156c8:	08015733 	.word	0x08015733
 80156cc:	0801571f 	.word	0x0801571f
 80156d0:	08015733 	.word	0x08015733
 80156d4:	080156f3 	.word	0x080156f3
 80156d8:	080156e9 	.word	0x080156e9
 80156dc:	08015733 	.word	0x08015733
 80156e0:	0801570b 	.word	0x0801570b
 80156e4:	080156fd 	.word	0x080156fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80156e8:	6839      	ldr	r1, [r7, #0]
 80156ea:	6878      	ldr	r0, [r7, #4]
 80156ec:	f000 fa3c 	bl	8015b68 <USBD_GetDescriptor>
          break;
 80156f0:	e024      	b.n	801573c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80156f2:	6839      	ldr	r1, [r7, #0]
 80156f4:	6878      	ldr	r0, [r7, #4]
 80156f6:	f000 fba1 	bl	8015e3c <USBD_SetAddress>
          break;
 80156fa:	e01f      	b.n	801573c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80156fc:	6839      	ldr	r1, [r7, #0]
 80156fe:	6878      	ldr	r0, [r7, #4]
 8015700:	f000 fbe0 	bl	8015ec4 <USBD_SetConfig>
 8015704:	4603      	mov	r3, r0
 8015706:	73fb      	strb	r3, [r7, #15]
          break;
 8015708:	e018      	b.n	801573c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801570a:	6839      	ldr	r1, [r7, #0]
 801570c:	6878      	ldr	r0, [r7, #4]
 801570e:	f000 fc83 	bl	8016018 <USBD_GetConfig>
          break;
 8015712:	e013      	b.n	801573c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8015714:	6839      	ldr	r1, [r7, #0]
 8015716:	6878      	ldr	r0, [r7, #4]
 8015718:	f000 fcb4 	bl	8016084 <USBD_GetStatus>
          break;
 801571c:	e00e      	b.n	801573c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801571e:	6839      	ldr	r1, [r7, #0]
 8015720:	6878      	ldr	r0, [r7, #4]
 8015722:	f000 fce3 	bl	80160ec <USBD_SetFeature>
          break;
 8015726:	e009      	b.n	801573c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015728:	6839      	ldr	r1, [r7, #0]
 801572a:	6878      	ldr	r0, [r7, #4]
 801572c:	f000 fd07 	bl	801613e <USBD_ClrFeature>
          break;
 8015730:	e004      	b.n	801573c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8015732:	6839      	ldr	r1, [r7, #0]
 8015734:	6878      	ldr	r0, [r7, #4]
 8015736:	f000 fd5e 	bl	80161f6 <USBD_CtlError>
          break;
 801573a:	bf00      	nop
      }
      break;
 801573c:	e004      	b.n	8015748 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801573e:	6839      	ldr	r1, [r7, #0]
 8015740:	6878      	ldr	r0, [r7, #4]
 8015742:	f000 fd58 	bl	80161f6 <USBD_CtlError>
      break;
 8015746:	bf00      	nop
  }

  return ret;
 8015748:	7bfb      	ldrb	r3, [r7, #15]
}
 801574a:	4618      	mov	r0, r3
 801574c:	3710      	adds	r7, #16
 801574e:	46bd      	mov	sp, r7
 8015750:	bd80      	pop	{r7, pc}
 8015752:	bf00      	nop

08015754 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015754:	b580      	push	{r7, lr}
 8015756:	b084      	sub	sp, #16
 8015758:	af00      	add	r7, sp, #0
 801575a:	6078      	str	r0, [r7, #4]
 801575c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801575e:	2300      	movs	r3, #0
 8015760:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015762:	683b      	ldr	r3, [r7, #0]
 8015764:	781b      	ldrb	r3, [r3, #0]
 8015766:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801576a:	2b40      	cmp	r3, #64	; 0x40
 801576c:	d005      	beq.n	801577a <USBD_StdItfReq+0x26>
 801576e:	2b40      	cmp	r3, #64	; 0x40
 8015770:	d852      	bhi.n	8015818 <USBD_StdItfReq+0xc4>
 8015772:	2b00      	cmp	r3, #0
 8015774:	d001      	beq.n	801577a <USBD_StdItfReq+0x26>
 8015776:	2b20      	cmp	r3, #32
 8015778:	d14e      	bne.n	8015818 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015780:	b2db      	uxtb	r3, r3
 8015782:	3b01      	subs	r3, #1
 8015784:	2b02      	cmp	r3, #2
 8015786:	d840      	bhi.n	801580a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015788:	683b      	ldr	r3, [r7, #0]
 801578a:	889b      	ldrh	r3, [r3, #4]
 801578c:	b2db      	uxtb	r3, r3
 801578e:	2b01      	cmp	r3, #1
 8015790:	d836      	bhi.n	8015800 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8015792:	683b      	ldr	r3, [r7, #0]
 8015794:	889b      	ldrh	r3, [r3, #4]
 8015796:	b2db      	uxtb	r3, r3
 8015798:	4619      	mov	r1, r3
 801579a:	6878      	ldr	r0, [r7, #4]
 801579c:	f7ff fed9 	bl	8015552 <USBD_CoreFindIF>
 80157a0:	4603      	mov	r3, r0
 80157a2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80157a4:	7bbb      	ldrb	r3, [r7, #14]
 80157a6:	2bff      	cmp	r3, #255	; 0xff
 80157a8:	d01d      	beq.n	80157e6 <USBD_StdItfReq+0x92>
 80157aa:	7bbb      	ldrb	r3, [r7, #14]
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	d11a      	bne.n	80157e6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80157b0:	7bba      	ldrb	r2, [r7, #14]
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	32ae      	adds	r2, #174	; 0xae
 80157b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80157ba:	689b      	ldr	r3, [r3, #8]
 80157bc:	2b00      	cmp	r3, #0
 80157be:	d00f      	beq.n	80157e0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80157c0:	7bba      	ldrb	r2, [r7, #14]
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80157c8:	7bba      	ldrb	r2, [r7, #14]
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	32ae      	adds	r2, #174	; 0xae
 80157ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80157d2:	689b      	ldr	r3, [r3, #8]
 80157d4:	6839      	ldr	r1, [r7, #0]
 80157d6:	6878      	ldr	r0, [r7, #4]
 80157d8:	4798      	blx	r3
 80157da:	4603      	mov	r3, r0
 80157dc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80157de:	e004      	b.n	80157ea <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80157e0:	2303      	movs	r3, #3
 80157e2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80157e4:	e001      	b.n	80157ea <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80157e6:	2303      	movs	r3, #3
 80157e8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80157ea:	683b      	ldr	r3, [r7, #0]
 80157ec:	88db      	ldrh	r3, [r3, #6]
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d110      	bne.n	8015814 <USBD_StdItfReq+0xc0>
 80157f2:	7bfb      	ldrb	r3, [r7, #15]
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d10d      	bne.n	8015814 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80157f8:	6878      	ldr	r0, [r7, #4]
 80157fa:	f000 fdc7 	bl	801638c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80157fe:	e009      	b.n	8015814 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8015800:	6839      	ldr	r1, [r7, #0]
 8015802:	6878      	ldr	r0, [r7, #4]
 8015804:	f000 fcf7 	bl	80161f6 <USBD_CtlError>
          break;
 8015808:	e004      	b.n	8015814 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801580a:	6839      	ldr	r1, [r7, #0]
 801580c:	6878      	ldr	r0, [r7, #4]
 801580e:	f000 fcf2 	bl	80161f6 <USBD_CtlError>
          break;
 8015812:	e000      	b.n	8015816 <USBD_StdItfReq+0xc2>
          break;
 8015814:	bf00      	nop
      }
      break;
 8015816:	e004      	b.n	8015822 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8015818:	6839      	ldr	r1, [r7, #0]
 801581a:	6878      	ldr	r0, [r7, #4]
 801581c:	f000 fceb 	bl	80161f6 <USBD_CtlError>
      break;
 8015820:	bf00      	nop
  }

  return ret;
 8015822:	7bfb      	ldrb	r3, [r7, #15]
}
 8015824:	4618      	mov	r0, r3
 8015826:	3710      	adds	r7, #16
 8015828:	46bd      	mov	sp, r7
 801582a:	bd80      	pop	{r7, pc}

0801582c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801582c:	b580      	push	{r7, lr}
 801582e:	b084      	sub	sp, #16
 8015830:	af00      	add	r7, sp, #0
 8015832:	6078      	str	r0, [r7, #4]
 8015834:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8015836:	2300      	movs	r3, #0
 8015838:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801583a:	683b      	ldr	r3, [r7, #0]
 801583c:	889b      	ldrh	r3, [r3, #4]
 801583e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015840:	683b      	ldr	r3, [r7, #0]
 8015842:	781b      	ldrb	r3, [r3, #0]
 8015844:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015848:	2b40      	cmp	r3, #64	; 0x40
 801584a:	d007      	beq.n	801585c <USBD_StdEPReq+0x30>
 801584c:	2b40      	cmp	r3, #64	; 0x40
 801584e:	f200 817f 	bhi.w	8015b50 <USBD_StdEPReq+0x324>
 8015852:	2b00      	cmp	r3, #0
 8015854:	d02a      	beq.n	80158ac <USBD_StdEPReq+0x80>
 8015856:	2b20      	cmp	r3, #32
 8015858:	f040 817a 	bne.w	8015b50 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801585c:	7bbb      	ldrb	r3, [r7, #14]
 801585e:	4619      	mov	r1, r3
 8015860:	6878      	ldr	r0, [r7, #4]
 8015862:	f7ff fe83 	bl	801556c <USBD_CoreFindEP>
 8015866:	4603      	mov	r3, r0
 8015868:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801586a:	7b7b      	ldrb	r3, [r7, #13]
 801586c:	2bff      	cmp	r3, #255	; 0xff
 801586e:	f000 8174 	beq.w	8015b5a <USBD_StdEPReq+0x32e>
 8015872:	7b7b      	ldrb	r3, [r7, #13]
 8015874:	2b00      	cmp	r3, #0
 8015876:	f040 8170 	bne.w	8015b5a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801587a:	7b7a      	ldrb	r2, [r7, #13]
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8015882:	7b7a      	ldrb	r2, [r7, #13]
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	32ae      	adds	r2, #174	; 0xae
 8015888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801588c:	689b      	ldr	r3, [r3, #8]
 801588e:	2b00      	cmp	r3, #0
 8015890:	f000 8163 	beq.w	8015b5a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015894:	7b7a      	ldrb	r2, [r7, #13]
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	32ae      	adds	r2, #174	; 0xae
 801589a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801589e:	689b      	ldr	r3, [r3, #8]
 80158a0:	6839      	ldr	r1, [r7, #0]
 80158a2:	6878      	ldr	r0, [r7, #4]
 80158a4:	4798      	blx	r3
 80158a6:	4603      	mov	r3, r0
 80158a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80158aa:	e156      	b.n	8015b5a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80158ac:	683b      	ldr	r3, [r7, #0]
 80158ae:	785b      	ldrb	r3, [r3, #1]
 80158b0:	2b03      	cmp	r3, #3
 80158b2:	d008      	beq.n	80158c6 <USBD_StdEPReq+0x9a>
 80158b4:	2b03      	cmp	r3, #3
 80158b6:	f300 8145 	bgt.w	8015b44 <USBD_StdEPReq+0x318>
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	f000 809b 	beq.w	80159f6 <USBD_StdEPReq+0x1ca>
 80158c0:	2b01      	cmp	r3, #1
 80158c2:	d03c      	beq.n	801593e <USBD_StdEPReq+0x112>
 80158c4:	e13e      	b.n	8015b44 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80158cc:	b2db      	uxtb	r3, r3
 80158ce:	2b02      	cmp	r3, #2
 80158d0:	d002      	beq.n	80158d8 <USBD_StdEPReq+0xac>
 80158d2:	2b03      	cmp	r3, #3
 80158d4:	d016      	beq.n	8015904 <USBD_StdEPReq+0xd8>
 80158d6:	e02c      	b.n	8015932 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80158d8:	7bbb      	ldrb	r3, [r7, #14]
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d00d      	beq.n	80158fa <USBD_StdEPReq+0xce>
 80158de:	7bbb      	ldrb	r3, [r7, #14]
 80158e0:	2b80      	cmp	r3, #128	; 0x80
 80158e2:	d00a      	beq.n	80158fa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80158e4:	7bbb      	ldrb	r3, [r7, #14]
 80158e6:	4619      	mov	r1, r3
 80158e8:	6878      	ldr	r0, [r7, #4]
 80158ea:	f001 f9c3 	bl	8016c74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80158ee:	2180      	movs	r1, #128	; 0x80
 80158f0:	6878      	ldr	r0, [r7, #4]
 80158f2:	f001 f9bf 	bl	8016c74 <USBD_LL_StallEP>
 80158f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80158f8:	e020      	b.n	801593c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80158fa:	6839      	ldr	r1, [r7, #0]
 80158fc:	6878      	ldr	r0, [r7, #4]
 80158fe:	f000 fc7a 	bl	80161f6 <USBD_CtlError>
              break;
 8015902:	e01b      	b.n	801593c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015904:	683b      	ldr	r3, [r7, #0]
 8015906:	885b      	ldrh	r3, [r3, #2]
 8015908:	2b00      	cmp	r3, #0
 801590a:	d10e      	bne.n	801592a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801590c:	7bbb      	ldrb	r3, [r7, #14]
 801590e:	2b00      	cmp	r3, #0
 8015910:	d00b      	beq.n	801592a <USBD_StdEPReq+0xfe>
 8015912:	7bbb      	ldrb	r3, [r7, #14]
 8015914:	2b80      	cmp	r3, #128	; 0x80
 8015916:	d008      	beq.n	801592a <USBD_StdEPReq+0xfe>
 8015918:	683b      	ldr	r3, [r7, #0]
 801591a:	88db      	ldrh	r3, [r3, #6]
 801591c:	2b00      	cmp	r3, #0
 801591e:	d104      	bne.n	801592a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015920:	7bbb      	ldrb	r3, [r7, #14]
 8015922:	4619      	mov	r1, r3
 8015924:	6878      	ldr	r0, [r7, #4]
 8015926:	f001 f9a5 	bl	8016c74 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801592a:	6878      	ldr	r0, [r7, #4]
 801592c:	f000 fd2e 	bl	801638c <USBD_CtlSendStatus>

              break;
 8015930:	e004      	b.n	801593c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8015932:	6839      	ldr	r1, [r7, #0]
 8015934:	6878      	ldr	r0, [r7, #4]
 8015936:	f000 fc5e 	bl	80161f6 <USBD_CtlError>
              break;
 801593a:	bf00      	nop
          }
          break;
 801593c:	e107      	b.n	8015b4e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015944:	b2db      	uxtb	r3, r3
 8015946:	2b02      	cmp	r3, #2
 8015948:	d002      	beq.n	8015950 <USBD_StdEPReq+0x124>
 801594a:	2b03      	cmp	r3, #3
 801594c:	d016      	beq.n	801597c <USBD_StdEPReq+0x150>
 801594e:	e04b      	b.n	80159e8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015950:	7bbb      	ldrb	r3, [r7, #14]
 8015952:	2b00      	cmp	r3, #0
 8015954:	d00d      	beq.n	8015972 <USBD_StdEPReq+0x146>
 8015956:	7bbb      	ldrb	r3, [r7, #14]
 8015958:	2b80      	cmp	r3, #128	; 0x80
 801595a:	d00a      	beq.n	8015972 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801595c:	7bbb      	ldrb	r3, [r7, #14]
 801595e:	4619      	mov	r1, r3
 8015960:	6878      	ldr	r0, [r7, #4]
 8015962:	f001 f987 	bl	8016c74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015966:	2180      	movs	r1, #128	; 0x80
 8015968:	6878      	ldr	r0, [r7, #4]
 801596a:	f001 f983 	bl	8016c74 <USBD_LL_StallEP>
 801596e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015970:	e040      	b.n	80159f4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8015972:	6839      	ldr	r1, [r7, #0]
 8015974:	6878      	ldr	r0, [r7, #4]
 8015976:	f000 fc3e 	bl	80161f6 <USBD_CtlError>
              break;
 801597a:	e03b      	b.n	80159f4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801597c:	683b      	ldr	r3, [r7, #0]
 801597e:	885b      	ldrh	r3, [r3, #2]
 8015980:	2b00      	cmp	r3, #0
 8015982:	d136      	bne.n	80159f2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015984:	7bbb      	ldrb	r3, [r7, #14]
 8015986:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801598a:	2b00      	cmp	r3, #0
 801598c:	d004      	beq.n	8015998 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801598e:	7bbb      	ldrb	r3, [r7, #14]
 8015990:	4619      	mov	r1, r3
 8015992:	6878      	ldr	r0, [r7, #4]
 8015994:	f001 f98d 	bl	8016cb2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015998:	6878      	ldr	r0, [r7, #4]
 801599a:	f000 fcf7 	bl	801638c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801599e:	7bbb      	ldrb	r3, [r7, #14]
 80159a0:	4619      	mov	r1, r3
 80159a2:	6878      	ldr	r0, [r7, #4]
 80159a4:	f7ff fde2 	bl	801556c <USBD_CoreFindEP>
 80159a8:	4603      	mov	r3, r0
 80159aa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80159ac:	7b7b      	ldrb	r3, [r7, #13]
 80159ae:	2bff      	cmp	r3, #255	; 0xff
 80159b0:	d01f      	beq.n	80159f2 <USBD_StdEPReq+0x1c6>
 80159b2:	7b7b      	ldrb	r3, [r7, #13]
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d11c      	bne.n	80159f2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80159b8:	7b7a      	ldrb	r2, [r7, #13]
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80159c0:	7b7a      	ldrb	r2, [r7, #13]
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	32ae      	adds	r2, #174	; 0xae
 80159c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159ca:	689b      	ldr	r3, [r3, #8]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d010      	beq.n	80159f2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80159d0:	7b7a      	ldrb	r2, [r7, #13]
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	32ae      	adds	r2, #174	; 0xae
 80159d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159da:	689b      	ldr	r3, [r3, #8]
 80159dc:	6839      	ldr	r1, [r7, #0]
 80159de:	6878      	ldr	r0, [r7, #4]
 80159e0:	4798      	blx	r3
 80159e2:	4603      	mov	r3, r0
 80159e4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80159e6:	e004      	b.n	80159f2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80159e8:	6839      	ldr	r1, [r7, #0]
 80159ea:	6878      	ldr	r0, [r7, #4]
 80159ec:	f000 fc03 	bl	80161f6 <USBD_CtlError>
              break;
 80159f0:	e000      	b.n	80159f4 <USBD_StdEPReq+0x1c8>
              break;
 80159f2:	bf00      	nop
          }
          break;
 80159f4:	e0ab      	b.n	8015b4e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80159fc:	b2db      	uxtb	r3, r3
 80159fe:	2b02      	cmp	r3, #2
 8015a00:	d002      	beq.n	8015a08 <USBD_StdEPReq+0x1dc>
 8015a02:	2b03      	cmp	r3, #3
 8015a04:	d032      	beq.n	8015a6c <USBD_StdEPReq+0x240>
 8015a06:	e097      	b.n	8015b38 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015a08:	7bbb      	ldrb	r3, [r7, #14]
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d007      	beq.n	8015a1e <USBD_StdEPReq+0x1f2>
 8015a0e:	7bbb      	ldrb	r3, [r7, #14]
 8015a10:	2b80      	cmp	r3, #128	; 0x80
 8015a12:	d004      	beq.n	8015a1e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8015a14:	6839      	ldr	r1, [r7, #0]
 8015a16:	6878      	ldr	r0, [r7, #4]
 8015a18:	f000 fbed 	bl	80161f6 <USBD_CtlError>
                break;
 8015a1c:	e091      	b.n	8015b42 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015a1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	da0b      	bge.n	8015a3e <USBD_StdEPReq+0x212>
 8015a26:	7bbb      	ldrb	r3, [r7, #14]
 8015a28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015a2c:	4613      	mov	r3, r2
 8015a2e:	009b      	lsls	r3, r3, #2
 8015a30:	4413      	add	r3, r2
 8015a32:	009b      	lsls	r3, r3, #2
 8015a34:	3310      	adds	r3, #16
 8015a36:	687a      	ldr	r2, [r7, #4]
 8015a38:	4413      	add	r3, r2
 8015a3a:	3304      	adds	r3, #4
 8015a3c:	e00b      	b.n	8015a56 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015a3e:	7bbb      	ldrb	r3, [r7, #14]
 8015a40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015a44:	4613      	mov	r3, r2
 8015a46:	009b      	lsls	r3, r3, #2
 8015a48:	4413      	add	r3, r2
 8015a4a:	009b      	lsls	r3, r3, #2
 8015a4c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015a50:	687a      	ldr	r2, [r7, #4]
 8015a52:	4413      	add	r3, r2
 8015a54:	3304      	adds	r3, #4
 8015a56:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015a58:	68bb      	ldr	r3, [r7, #8]
 8015a5a:	2200      	movs	r2, #0
 8015a5c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015a5e:	68bb      	ldr	r3, [r7, #8]
 8015a60:	2202      	movs	r2, #2
 8015a62:	4619      	mov	r1, r3
 8015a64:	6878      	ldr	r0, [r7, #4]
 8015a66:	f000 fc37 	bl	80162d8 <USBD_CtlSendData>
              break;
 8015a6a:	e06a      	b.n	8015b42 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015a6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	da11      	bge.n	8015a98 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015a74:	7bbb      	ldrb	r3, [r7, #14]
 8015a76:	f003 020f 	and.w	r2, r3, #15
 8015a7a:	6879      	ldr	r1, [r7, #4]
 8015a7c:	4613      	mov	r3, r2
 8015a7e:	009b      	lsls	r3, r3, #2
 8015a80:	4413      	add	r3, r2
 8015a82:	009b      	lsls	r3, r3, #2
 8015a84:	440b      	add	r3, r1
 8015a86:	3324      	adds	r3, #36	; 0x24
 8015a88:	881b      	ldrh	r3, [r3, #0]
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d117      	bne.n	8015abe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015a8e:	6839      	ldr	r1, [r7, #0]
 8015a90:	6878      	ldr	r0, [r7, #4]
 8015a92:	f000 fbb0 	bl	80161f6 <USBD_CtlError>
                  break;
 8015a96:	e054      	b.n	8015b42 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015a98:	7bbb      	ldrb	r3, [r7, #14]
 8015a9a:	f003 020f 	and.w	r2, r3, #15
 8015a9e:	6879      	ldr	r1, [r7, #4]
 8015aa0:	4613      	mov	r3, r2
 8015aa2:	009b      	lsls	r3, r3, #2
 8015aa4:	4413      	add	r3, r2
 8015aa6:	009b      	lsls	r3, r3, #2
 8015aa8:	440b      	add	r3, r1
 8015aaa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015aae:	881b      	ldrh	r3, [r3, #0]
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	d104      	bne.n	8015abe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015ab4:	6839      	ldr	r1, [r7, #0]
 8015ab6:	6878      	ldr	r0, [r7, #4]
 8015ab8:	f000 fb9d 	bl	80161f6 <USBD_CtlError>
                  break;
 8015abc:	e041      	b.n	8015b42 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015abe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	da0b      	bge.n	8015ade <USBD_StdEPReq+0x2b2>
 8015ac6:	7bbb      	ldrb	r3, [r7, #14]
 8015ac8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015acc:	4613      	mov	r3, r2
 8015ace:	009b      	lsls	r3, r3, #2
 8015ad0:	4413      	add	r3, r2
 8015ad2:	009b      	lsls	r3, r3, #2
 8015ad4:	3310      	adds	r3, #16
 8015ad6:	687a      	ldr	r2, [r7, #4]
 8015ad8:	4413      	add	r3, r2
 8015ada:	3304      	adds	r3, #4
 8015adc:	e00b      	b.n	8015af6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015ade:	7bbb      	ldrb	r3, [r7, #14]
 8015ae0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015ae4:	4613      	mov	r3, r2
 8015ae6:	009b      	lsls	r3, r3, #2
 8015ae8:	4413      	add	r3, r2
 8015aea:	009b      	lsls	r3, r3, #2
 8015aec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015af0:	687a      	ldr	r2, [r7, #4]
 8015af2:	4413      	add	r3, r2
 8015af4:	3304      	adds	r3, #4
 8015af6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015af8:	7bbb      	ldrb	r3, [r7, #14]
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d002      	beq.n	8015b04 <USBD_StdEPReq+0x2d8>
 8015afe:	7bbb      	ldrb	r3, [r7, #14]
 8015b00:	2b80      	cmp	r3, #128	; 0x80
 8015b02:	d103      	bne.n	8015b0c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8015b04:	68bb      	ldr	r3, [r7, #8]
 8015b06:	2200      	movs	r2, #0
 8015b08:	601a      	str	r2, [r3, #0]
 8015b0a:	e00e      	b.n	8015b2a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015b0c:	7bbb      	ldrb	r3, [r7, #14]
 8015b0e:	4619      	mov	r1, r3
 8015b10:	6878      	ldr	r0, [r7, #4]
 8015b12:	f001 f8ed 	bl	8016cf0 <USBD_LL_IsStallEP>
 8015b16:	4603      	mov	r3, r0
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	d003      	beq.n	8015b24 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8015b1c:	68bb      	ldr	r3, [r7, #8]
 8015b1e:	2201      	movs	r2, #1
 8015b20:	601a      	str	r2, [r3, #0]
 8015b22:	e002      	b.n	8015b2a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8015b24:	68bb      	ldr	r3, [r7, #8]
 8015b26:	2200      	movs	r2, #0
 8015b28:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015b2a:	68bb      	ldr	r3, [r7, #8]
 8015b2c:	2202      	movs	r2, #2
 8015b2e:	4619      	mov	r1, r3
 8015b30:	6878      	ldr	r0, [r7, #4]
 8015b32:	f000 fbd1 	bl	80162d8 <USBD_CtlSendData>
              break;
 8015b36:	e004      	b.n	8015b42 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8015b38:	6839      	ldr	r1, [r7, #0]
 8015b3a:	6878      	ldr	r0, [r7, #4]
 8015b3c:	f000 fb5b 	bl	80161f6 <USBD_CtlError>
              break;
 8015b40:	bf00      	nop
          }
          break;
 8015b42:	e004      	b.n	8015b4e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015b44:	6839      	ldr	r1, [r7, #0]
 8015b46:	6878      	ldr	r0, [r7, #4]
 8015b48:	f000 fb55 	bl	80161f6 <USBD_CtlError>
          break;
 8015b4c:	bf00      	nop
      }
      break;
 8015b4e:	e005      	b.n	8015b5c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8015b50:	6839      	ldr	r1, [r7, #0]
 8015b52:	6878      	ldr	r0, [r7, #4]
 8015b54:	f000 fb4f 	bl	80161f6 <USBD_CtlError>
      break;
 8015b58:	e000      	b.n	8015b5c <USBD_StdEPReq+0x330>
      break;
 8015b5a:	bf00      	nop
  }

  return ret;
 8015b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b5e:	4618      	mov	r0, r3
 8015b60:	3710      	adds	r7, #16
 8015b62:	46bd      	mov	sp, r7
 8015b64:	bd80      	pop	{r7, pc}
	...

08015b68 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015b68:	b580      	push	{r7, lr}
 8015b6a:	b084      	sub	sp, #16
 8015b6c:	af00      	add	r7, sp, #0
 8015b6e:	6078      	str	r0, [r7, #4]
 8015b70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015b72:	2300      	movs	r3, #0
 8015b74:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015b76:	2300      	movs	r3, #0
 8015b78:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015b7a:	2300      	movs	r3, #0
 8015b7c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015b7e:	683b      	ldr	r3, [r7, #0]
 8015b80:	885b      	ldrh	r3, [r3, #2]
 8015b82:	0a1b      	lsrs	r3, r3, #8
 8015b84:	b29b      	uxth	r3, r3
 8015b86:	3b01      	subs	r3, #1
 8015b88:	2b06      	cmp	r3, #6
 8015b8a:	f200 8128 	bhi.w	8015dde <USBD_GetDescriptor+0x276>
 8015b8e:	a201      	add	r2, pc, #4	; (adr r2, 8015b94 <USBD_GetDescriptor+0x2c>)
 8015b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b94:	08015bb1 	.word	0x08015bb1
 8015b98:	08015bc9 	.word	0x08015bc9
 8015b9c:	08015c09 	.word	0x08015c09
 8015ba0:	08015ddf 	.word	0x08015ddf
 8015ba4:	08015ddf 	.word	0x08015ddf
 8015ba8:	08015d7f 	.word	0x08015d7f
 8015bac:	08015dab 	.word	0x08015dab
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015bb6:	681b      	ldr	r3, [r3, #0]
 8015bb8:	687a      	ldr	r2, [r7, #4]
 8015bba:	7c12      	ldrb	r2, [r2, #16]
 8015bbc:	f107 0108 	add.w	r1, r7, #8
 8015bc0:	4610      	mov	r0, r2
 8015bc2:	4798      	blx	r3
 8015bc4:	60f8      	str	r0, [r7, #12]
      break;
 8015bc6:	e112      	b.n	8015dee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	7c1b      	ldrb	r3, [r3, #16]
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d10d      	bne.n	8015bec <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015bd8:	f107 0208 	add.w	r2, r7, #8
 8015bdc:	4610      	mov	r0, r2
 8015bde:	4798      	blx	r3
 8015be0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	3301      	adds	r3, #1
 8015be6:	2202      	movs	r2, #2
 8015be8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015bea:	e100      	b.n	8015dee <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015bf4:	f107 0208 	add.w	r2, r7, #8
 8015bf8:	4610      	mov	r0, r2
 8015bfa:	4798      	blx	r3
 8015bfc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015bfe:	68fb      	ldr	r3, [r7, #12]
 8015c00:	3301      	adds	r3, #1
 8015c02:	2202      	movs	r2, #2
 8015c04:	701a      	strb	r2, [r3, #0]
      break;
 8015c06:	e0f2      	b.n	8015dee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015c08:	683b      	ldr	r3, [r7, #0]
 8015c0a:	885b      	ldrh	r3, [r3, #2]
 8015c0c:	b2db      	uxtb	r3, r3
 8015c0e:	2b05      	cmp	r3, #5
 8015c10:	f200 80ac 	bhi.w	8015d6c <USBD_GetDescriptor+0x204>
 8015c14:	a201      	add	r2, pc, #4	; (adr r2, 8015c1c <USBD_GetDescriptor+0xb4>)
 8015c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c1a:	bf00      	nop
 8015c1c:	08015c35 	.word	0x08015c35
 8015c20:	08015c69 	.word	0x08015c69
 8015c24:	08015c9d 	.word	0x08015c9d
 8015c28:	08015cd1 	.word	0x08015cd1
 8015c2c:	08015d05 	.word	0x08015d05
 8015c30:	08015d39 	.word	0x08015d39
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c3a:	685b      	ldr	r3, [r3, #4]
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d00b      	beq.n	8015c58 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c46:	685b      	ldr	r3, [r3, #4]
 8015c48:	687a      	ldr	r2, [r7, #4]
 8015c4a:	7c12      	ldrb	r2, [r2, #16]
 8015c4c:	f107 0108 	add.w	r1, r7, #8
 8015c50:	4610      	mov	r0, r2
 8015c52:	4798      	blx	r3
 8015c54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015c56:	e091      	b.n	8015d7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015c58:	6839      	ldr	r1, [r7, #0]
 8015c5a:	6878      	ldr	r0, [r7, #4]
 8015c5c:	f000 facb 	bl	80161f6 <USBD_CtlError>
            err++;
 8015c60:	7afb      	ldrb	r3, [r7, #11]
 8015c62:	3301      	adds	r3, #1
 8015c64:	72fb      	strb	r3, [r7, #11]
          break;
 8015c66:	e089      	b.n	8015d7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c6e:	689b      	ldr	r3, [r3, #8]
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	d00b      	beq.n	8015c8c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c7a:	689b      	ldr	r3, [r3, #8]
 8015c7c:	687a      	ldr	r2, [r7, #4]
 8015c7e:	7c12      	ldrb	r2, [r2, #16]
 8015c80:	f107 0108 	add.w	r1, r7, #8
 8015c84:	4610      	mov	r0, r2
 8015c86:	4798      	blx	r3
 8015c88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015c8a:	e077      	b.n	8015d7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015c8c:	6839      	ldr	r1, [r7, #0]
 8015c8e:	6878      	ldr	r0, [r7, #4]
 8015c90:	f000 fab1 	bl	80161f6 <USBD_CtlError>
            err++;
 8015c94:	7afb      	ldrb	r3, [r7, #11]
 8015c96:	3301      	adds	r3, #1
 8015c98:	72fb      	strb	r3, [r7, #11]
          break;
 8015c9a:	e06f      	b.n	8015d7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015ca2:	68db      	ldr	r3, [r3, #12]
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d00b      	beq.n	8015cc0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015cae:	68db      	ldr	r3, [r3, #12]
 8015cb0:	687a      	ldr	r2, [r7, #4]
 8015cb2:	7c12      	ldrb	r2, [r2, #16]
 8015cb4:	f107 0108 	add.w	r1, r7, #8
 8015cb8:	4610      	mov	r0, r2
 8015cba:	4798      	blx	r3
 8015cbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015cbe:	e05d      	b.n	8015d7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015cc0:	6839      	ldr	r1, [r7, #0]
 8015cc2:	6878      	ldr	r0, [r7, #4]
 8015cc4:	f000 fa97 	bl	80161f6 <USBD_CtlError>
            err++;
 8015cc8:	7afb      	ldrb	r3, [r7, #11]
 8015cca:	3301      	adds	r3, #1
 8015ccc:	72fb      	strb	r3, [r7, #11]
          break;
 8015cce:	e055      	b.n	8015d7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015cd6:	691b      	ldr	r3, [r3, #16]
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d00b      	beq.n	8015cf4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015ce2:	691b      	ldr	r3, [r3, #16]
 8015ce4:	687a      	ldr	r2, [r7, #4]
 8015ce6:	7c12      	ldrb	r2, [r2, #16]
 8015ce8:	f107 0108 	add.w	r1, r7, #8
 8015cec:	4610      	mov	r0, r2
 8015cee:	4798      	blx	r3
 8015cf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015cf2:	e043      	b.n	8015d7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015cf4:	6839      	ldr	r1, [r7, #0]
 8015cf6:	6878      	ldr	r0, [r7, #4]
 8015cf8:	f000 fa7d 	bl	80161f6 <USBD_CtlError>
            err++;
 8015cfc:	7afb      	ldrb	r3, [r7, #11]
 8015cfe:	3301      	adds	r3, #1
 8015d00:	72fb      	strb	r3, [r7, #11]
          break;
 8015d02:	e03b      	b.n	8015d7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d0a:	695b      	ldr	r3, [r3, #20]
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	d00b      	beq.n	8015d28 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d16:	695b      	ldr	r3, [r3, #20]
 8015d18:	687a      	ldr	r2, [r7, #4]
 8015d1a:	7c12      	ldrb	r2, [r2, #16]
 8015d1c:	f107 0108 	add.w	r1, r7, #8
 8015d20:	4610      	mov	r0, r2
 8015d22:	4798      	blx	r3
 8015d24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015d26:	e029      	b.n	8015d7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015d28:	6839      	ldr	r1, [r7, #0]
 8015d2a:	6878      	ldr	r0, [r7, #4]
 8015d2c:	f000 fa63 	bl	80161f6 <USBD_CtlError>
            err++;
 8015d30:	7afb      	ldrb	r3, [r7, #11]
 8015d32:	3301      	adds	r3, #1
 8015d34:	72fb      	strb	r3, [r7, #11]
          break;
 8015d36:	e021      	b.n	8015d7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d3e:	699b      	ldr	r3, [r3, #24]
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d00b      	beq.n	8015d5c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d4a:	699b      	ldr	r3, [r3, #24]
 8015d4c:	687a      	ldr	r2, [r7, #4]
 8015d4e:	7c12      	ldrb	r2, [r2, #16]
 8015d50:	f107 0108 	add.w	r1, r7, #8
 8015d54:	4610      	mov	r0, r2
 8015d56:	4798      	blx	r3
 8015d58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015d5a:	e00f      	b.n	8015d7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015d5c:	6839      	ldr	r1, [r7, #0]
 8015d5e:	6878      	ldr	r0, [r7, #4]
 8015d60:	f000 fa49 	bl	80161f6 <USBD_CtlError>
            err++;
 8015d64:	7afb      	ldrb	r3, [r7, #11]
 8015d66:	3301      	adds	r3, #1
 8015d68:	72fb      	strb	r3, [r7, #11]
          break;
 8015d6a:	e007      	b.n	8015d7c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015d6c:	6839      	ldr	r1, [r7, #0]
 8015d6e:	6878      	ldr	r0, [r7, #4]
 8015d70:	f000 fa41 	bl	80161f6 <USBD_CtlError>
          err++;
 8015d74:	7afb      	ldrb	r3, [r7, #11]
 8015d76:	3301      	adds	r3, #1
 8015d78:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8015d7a:	bf00      	nop
      }
      break;
 8015d7c:	e037      	b.n	8015dee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	7c1b      	ldrb	r3, [r3, #16]
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d109      	bne.n	8015d9a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015d8e:	f107 0208 	add.w	r2, r7, #8
 8015d92:	4610      	mov	r0, r2
 8015d94:	4798      	blx	r3
 8015d96:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015d98:	e029      	b.n	8015dee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015d9a:	6839      	ldr	r1, [r7, #0]
 8015d9c:	6878      	ldr	r0, [r7, #4]
 8015d9e:	f000 fa2a 	bl	80161f6 <USBD_CtlError>
        err++;
 8015da2:	7afb      	ldrb	r3, [r7, #11]
 8015da4:	3301      	adds	r3, #1
 8015da6:	72fb      	strb	r3, [r7, #11]
      break;
 8015da8:	e021      	b.n	8015dee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	7c1b      	ldrb	r3, [r3, #16]
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d10d      	bne.n	8015dce <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015dba:	f107 0208 	add.w	r2, r7, #8
 8015dbe:	4610      	mov	r0, r2
 8015dc0:	4798      	blx	r3
 8015dc2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015dc4:	68fb      	ldr	r3, [r7, #12]
 8015dc6:	3301      	adds	r3, #1
 8015dc8:	2207      	movs	r2, #7
 8015dca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015dcc:	e00f      	b.n	8015dee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015dce:	6839      	ldr	r1, [r7, #0]
 8015dd0:	6878      	ldr	r0, [r7, #4]
 8015dd2:	f000 fa10 	bl	80161f6 <USBD_CtlError>
        err++;
 8015dd6:	7afb      	ldrb	r3, [r7, #11]
 8015dd8:	3301      	adds	r3, #1
 8015dda:	72fb      	strb	r3, [r7, #11]
      break;
 8015ddc:	e007      	b.n	8015dee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8015dde:	6839      	ldr	r1, [r7, #0]
 8015de0:	6878      	ldr	r0, [r7, #4]
 8015de2:	f000 fa08 	bl	80161f6 <USBD_CtlError>
      err++;
 8015de6:	7afb      	ldrb	r3, [r7, #11]
 8015de8:	3301      	adds	r3, #1
 8015dea:	72fb      	strb	r3, [r7, #11]
      break;
 8015dec:	bf00      	nop
  }

  if (err != 0U)
 8015dee:	7afb      	ldrb	r3, [r7, #11]
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d11e      	bne.n	8015e32 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8015df4:	683b      	ldr	r3, [r7, #0]
 8015df6:	88db      	ldrh	r3, [r3, #6]
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d016      	beq.n	8015e2a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8015dfc:	893b      	ldrh	r3, [r7, #8]
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d00e      	beq.n	8015e20 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8015e02:	683b      	ldr	r3, [r7, #0]
 8015e04:	88da      	ldrh	r2, [r3, #6]
 8015e06:	893b      	ldrh	r3, [r7, #8]
 8015e08:	4293      	cmp	r3, r2
 8015e0a:	bf28      	it	cs
 8015e0c:	4613      	movcs	r3, r2
 8015e0e:	b29b      	uxth	r3, r3
 8015e10:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015e12:	893b      	ldrh	r3, [r7, #8]
 8015e14:	461a      	mov	r2, r3
 8015e16:	68f9      	ldr	r1, [r7, #12]
 8015e18:	6878      	ldr	r0, [r7, #4]
 8015e1a:	f000 fa5d 	bl	80162d8 <USBD_CtlSendData>
 8015e1e:	e009      	b.n	8015e34 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015e20:	6839      	ldr	r1, [r7, #0]
 8015e22:	6878      	ldr	r0, [r7, #4]
 8015e24:	f000 f9e7 	bl	80161f6 <USBD_CtlError>
 8015e28:	e004      	b.n	8015e34 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015e2a:	6878      	ldr	r0, [r7, #4]
 8015e2c:	f000 faae 	bl	801638c <USBD_CtlSendStatus>
 8015e30:	e000      	b.n	8015e34 <USBD_GetDescriptor+0x2cc>
    return;
 8015e32:	bf00      	nop
  }
}
 8015e34:	3710      	adds	r7, #16
 8015e36:	46bd      	mov	sp, r7
 8015e38:	bd80      	pop	{r7, pc}
 8015e3a:	bf00      	nop

08015e3c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e3c:	b580      	push	{r7, lr}
 8015e3e:	b084      	sub	sp, #16
 8015e40:	af00      	add	r7, sp, #0
 8015e42:	6078      	str	r0, [r7, #4]
 8015e44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015e46:	683b      	ldr	r3, [r7, #0]
 8015e48:	889b      	ldrh	r3, [r3, #4]
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d131      	bne.n	8015eb2 <USBD_SetAddress+0x76>
 8015e4e:	683b      	ldr	r3, [r7, #0]
 8015e50:	88db      	ldrh	r3, [r3, #6]
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d12d      	bne.n	8015eb2 <USBD_SetAddress+0x76>
 8015e56:	683b      	ldr	r3, [r7, #0]
 8015e58:	885b      	ldrh	r3, [r3, #2]
 8015e5a:	2b7f      	cmp	r3, #127	; 0x7f
 8015e5c:	d829      	bhi.n	8015eb2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015e5e:	683b      	ldr	r3, [r7, #0]
 8015e60:	885b      	ldrh	r3, [r3, #2]
 8015e62:	b2db      	uxtb	r3, r3
 8015e64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015e68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015e70:	b2db      	uxtb	r3, r3
 8015e72:	2b03      	cmp	r3, #3
 8015e74:	d104      	bne.n	8015e80 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8015e76:	6839      	ldr	r1, [r7, #0]
 8015e78:	6878      	ldr	r0, [r7, #4]
 8015e7a:	f000 f9bc 	bl	80161f6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e7e:	e01d      	b.n	8015ebc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	7bfa      	ldrb	r2, [r7, #15]
 8015e84:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015e88:	7bfb      	ldrb	r3, [r7, #15]
 8015e8a:	4619      	mov	r1, r3
 8015e8c:	6878      	ldr	r0, [r7, #4]
 8015e8e:	f000 ff5b 	bl	8016d48 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015e92:	6878      	ldr	r0, [r7, #4]
 8015e94:	f000 fa7a 	bl	801638c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015e98:	7bfb      	ldrb	r3, [r7, #15]
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d004      	beq.n	8015ea8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	2202      	movs	r2, #2
 8015ea2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015ea6:	e009      	b.n	8015ebc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	2201      	movs	r2, #1
 8015eac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015eb0:	e004      	b.n	8015ebc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8015eb2:	6839      	ldr	r1, [r7, #0]
 8015eb4:	6878      	ldr	r0, [r7, #4]
 8015eb6:	f000 f99e 	bl	80161f6 <USBD_CtlError>
  }
}
 8015eba:	bf00      	nop
 8015ebc:	bf00      	nop
 8015ebe:	3710      	adds	r7, #16
 8015ec0:	46bd      	mov	sp, r7
 8015ec2:	bd80      	pop	{r7, pc}

08015ec4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015ec4:	b580      	push	{r7, lr}
 8015ec6:	b084      	sub	sp, #16
 8015ec8:	af00      	add	r7, sp, #0
 8015eca:	6078      	str	r0, [r7, #4]
 8015ecc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015ece:	2300      	movs	r3, #0
 8015ed0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8015ed2:	683b      	ldr	r3, [r7, #0]
 8015ed4:	885b      	ldrh	r3, [r3, #2]
 8015ed6:	b2da      	uxtb	r2, r3
 8015ed8:	4b4e      	ldr	r3, [pc, #312]	; (8016014 <USBD_SetConfig+0x150>)
 8015eda:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015edc:	4b4d      	ldr	r3, [pc, #308]	; (8016014 <USBD_SetConfig+0x150>)
 8015ede:	781b      	ldrb	r3, [r3, #0]
 8015ee0:	2b01      	cmp	r3, #1
 8015ee2:	d905      	bls.n	8015ef0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015ee4:	6839      	ldr	r1, [r7, #0]
 8015ee6:	6878      	ldr	r0, [r7, #4]
 8015ee8:	f000 f985 	bl	80161f6 <USBD_CtlError>
    return USBD_FAIL;
 8015eec:	2303      	movs	r3, #3
 8015eee:	e08c      	b.n	801600a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ef6:	b2db      	uxtb	r3, r3
 8015ef8:	2b02      	cmp	r3, #2
 8015efa:	d002      	beq.n	8015f02 <USBD_SetConfig+0x3e>
 8015efc:	2b03      	cmp	r3, #3
 8015efe:	d029      	beq.n	8015f54 <USBD_SetConfig+0x90>
 8015f00:	e075      	b.n	8015fee <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8015f02:	4b44      	ldr	r3, [pc, #272]	; (8016014 <USBD_SetConfig+0x150>)
 8015f04:	781b      	ldrb	r3, [r3, #0]
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d020      	beq.n	8015f4c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8015f0a:	4b42      	ldr	r3, [pc, #264]	; (8016014 <USBD_SetConfig+0x150>)
 8015f0c:	781b      	ldrb	r3, [r3, #0]
 8015f0e:	461a      	mov	r2, r3
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015f14:	4b3f      	ldr	r3, [pc, #252]	; (8016014 <USBD_SetConfig+0x150>)
 8015f16:	781b      	ldrb	r3, [r3, #0]
 8015f18:	4619      	mov	r1, r3
 8015f1a:	6878      	ldr	r0, [r7, #4]
 8015f1c:	f7fe ffe1 	bl	8014ee2 <USBD_SetClassConfig>
 8015f20:	4603      	mov	r3, r0
 8015f22:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8015f24:	7bfb      	ldrb	r3, [r7, #15]
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d008      	beq.n	8015f3c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8015f2a:	6839      	ldr	r1, [r7, #0]
 8015f2c:	6878      	ldr	r0, [r7, #4]
 8015f2e:	f000 f962 	bl	80161f6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	2202      	movs	r2, #2
 8015f36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015f3a:	e065      	b.n	8016008 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015f3c:	6878      	ldr	r0, [r7, #4]
 8015f3e:	f000 fa25 	bl	801638c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	2203      	movs	r2, #3
 8015f46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015f4a:	e05d      	b.n	8016008 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015f4c:	6878      	ldr	r0, [r7, #4]
 8015f4e:	f000 fa1d 	bl	801638c <USBD_CtlSendStatus>
      break;
 8015f52:	e059      	b.n	8016008 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8015f54:	4b2f      	ldr	r3, [pc, #188]	; (8016014 <USBD_SetConfig+0x150>)
 8015f56:	781b      	ldrb	r3, [r3, #0]
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d112      	bne.n	8015f82 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	2202      	movs	r2, #2
 8015f60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8015f64:	4b2b      	ldr	r3, [pc, #172]	; (8016014 <USBD_SetConfig+0x150>)
 8015f66:	781b      	ldrb	r3, [r3, #0]
 8015f68:	461a      	mov	r2, r3
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015f6e:	4b29      	ldr	r3, [pc, #164]	; (8016014 <USBD_SetConfig+0x150>)
 8015f70:	781b      	ldrb	r3, [r3, #0]
 8015f72:	4619      	mov	r1, r3
 8015f74:	6878      	ldr	r0, [r7, #4]
 8015f76:	f7fe ffd0 	bl	8014f1a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8015f7a:	6878      	ldr	r0, [r7, #4]
 8015f7c:	f000 fa06 	bl	801638c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015f80:	e042      	b.n	8016008 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8015f82:	4b24      	ldr	r3, [pc, #144]	; (8016014 <USBD_SetConfig+0x150>)
 8015f84:	781b      	ldrb	r3, [r3, #0]
 8015f86:	461a      	mov	r2, r3
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	685b      	ldr	r3, [r3, #4]
 8015f8c:	429a      	cmp	r2, r3
 8015f8e:	d02a      	beq.n	8015fe6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	685b      	ldr	r3, [r3, #4]
 8015f94:	b2db      	uxtb	r3, r3
 8015f96:	4619      	mov	r1, r3
 8015f98:	6878      	ldr	r0, [r7, #4]
 8015f9a:	f7fe ffbe 	bl	8014f1a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8015f9e:	4b1d      	ldr	r3, [pc, #116]	; (8016014 <USBD_SetConfig+0x150>)
 8015fa0:	781b      	ldrb	r3, [r3, #0]
 8015fa2:	461a      	mov	r2, r3
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015fa8:	4b1a      	ldr	r3, [pc, #104]	; (8016014 <USBD_SetConfig+0x150>)
 8015faa:	781b      	ldrb	r3, [r3, #0]
 8015fac:	4619      	mov	r1, r3
 8015fae:	6878      	ldr	r0, [r7, #4]
 8015fb0:	f7fe ff97 	bl	8014ee2 <USBD_SetClassConfig>
 8015fb4:	4603      	mov	r3, r0
 8015fb6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8015fb8:	7bfb      	ldrb	r3, [r7, #15]
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	d00f      	beq.n	8015fde <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8015fbe:	6839      	ldr	r1, [r7, #0]
 8015fc0:	6878      	ldr	r0, [r7, #4]
 8015fc2:	f000 f918 	bl	80161f6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	685b      	ldr	r3, [r3, #4]
 8015fca:	b2db      	uxtb	r3, r3
 8015fcc:	4619      	mov	r1, r3
 8015fce:	6878      	ldr	r0, [r7, #4]
 8015fd0:	f7fe ffa3 	bl	8014f1a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	2202      	movs	r2, #2
 8015fd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015fdc:	e014      	b.n	8016008 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015fde:	6878      	ldr	r0, [r7, #4]
 8015fe0:	f000 f9d4 	bl	801638c <USBD_CtlSendStatus>
      break;
 8015fe4:	e010      	b.n	8016008 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015fe6:	6878      	ldr	r0, [r7, #4]
 8015fe8:	f000 f9d0 	bl	801638c <USBD_CtlSendStatus>
      break;
 8015fec:	e00c      	b.n	8016008 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8015fee:	6839      	ldr	r1, [r7, #0]
 8015ff0:	6878      	ldr	r0, [r7, #4]
 8015ff2:	f000 f900 	bl	80161f6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015ff6:	4b07      	ldr	r3, [pc, #28]	; (8016014 <USBD_SetConfig+0x150>)
 8015ff8:	781b      	ldrb	r3, [r3, #0]
 8015ffa:	4619      	mov	r1, r3
 8015ffc:	6878      	ldr	r0, [r7, #4]
 8015ffe:	f7fe ff8c 	bl	8014f1a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8016002:	2303      	movs	r3, #3
 8016004:	73fb      	strb	r3, [r7, #15]
      break;
 8016006:	bf00      	nop
  }

  return ret;
 8016008:	7bfb      	ldrb	r3, [r7, #15]
}
 801600a:	4618      	mov	r0, r3
 801600c:	3710      	adds	r7, #16
 801600e:	46bd      	mov	sp, r7
 8016010:	bd80      	pop	{r7, pc}
 8016012:	bf00      	nop
 8016014:	24001494 	.word	0x24001494

08016018 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016018:	b580      	push	{r7, lr}
 801601a:	b082      	sub	sp, #8
 801601c:	af00      	add	r7, sp, #0
 801601e:	6078      	str	r0, [r7, #4]
 8016020:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8016022:	683b      	ldr	r3, [r7, #0]
 8016024:	88db      	ldrh	r3, [r3, #6]
 8016026:	2b01      	cmp	r3, #1
 8016028:	d004      	beq.n	8016034 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801602a:	6839      	ldr	r1, [r7, #0]
 801602c:	6878      	ldr	r0, [r7, #4]
 801602e:	f000 f8e2 	bl	80161f6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8016032:	e023      	b.n	801607c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801603a:	b2db      	uxtb	r3, r3
 801603c:	2b02      	cmp	r3, #2
 801603e:	dc02      	bgt.n	8016046 <USBD_GetConfig+0x2e>
 8016040:	2b00      	cmp	r3, #0
 8016042:	dc03      	bgt.n	801604c <USBD_GetConfig+0x34>
 8016044:	e015      	b.n	8016072 <USBD_GetConfig+0x5a>
 8016046:	2b03      	cmp	r3, #3
 8016048:	d00b      	beq.n	8016062 <USBD_GetConfig+0x4a>
 801604a:	e012      	b.n	8016072 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	2200      	movs	r2, #0
 8016050:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	3308      	adds	r3, #8
 8016056:	2201      	movs	r2, #1
 8016058:	4619      	mov	r1, r3
 801605a:	6878      	ldr	r0, [r7, #4]
 801605c:	f000 f93c 	bl	80162d8 <USBD_CtlSendData>
        break;
 8016060:	e00c      	b.n	801607c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	3304      	adds	r3, #4
 8016066:	2201      	movs	r2, #1
 8016068:	4619      	mov	r1, r3
 801606a:	6878      	ldr	r0, [r7, #4]
 801606c:	f000 f934 	bl	80162d8 <USBD_CtlSendData>
        break;
 8016070:	e004      	b.n	801607c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8016072:	6839      	ldr	r1, [r7, #0]
 8016074:	6878      	ldr	r0, [r7, #4]
 8016076:	f000 f8be 	bl	80161f6 <USBD_CtlError>
        break;
 801607a:	bf00      	nop
}
 801607c:	bf00      	nop
 801607e:	3708      	adds	r7, #8
 8016080:	46bd      	mov	sp, r7
 8016082:	bd80      	pop	{r7, pc}

08016084 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016084:	b580      	push	{r7, lr}
 8016086:	b082      	sub	sp, #8
 8016088:	af00      	add	r7, sp, #0
 801608a:	6078      	str	r0, [r7, #4]
 801608c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016094:	b2db      	uxtb	r3, r3
 8016096:	3b01      	subs	r3, #1
 8016098:	2b02      	cmp	r3, #2
 801609a:	d81e      	bhi.n	80160da <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801609c:	683b      	ldr	r3, [r7, #0]
 801609e:	88db      	ldrh	r3, [r3, #6]
 80160a0:	2b02      	cmp	r3, #2
 80160a2:	d004      	beq.n	80160ae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80160a4:	6839      	ldr	r1, [r7, #0]
 80160a6:	6878      	ldr	r0, [r7, #4]
 80160a8:	f000 f8a5 	bl	80161f6 <USBD_CtlError>
        break;
 80160ac:	e01a      	b.n	80160e4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	2201      	movs	r2, #1
 80160b2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d005      	beq.n	80160ca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	68db      	ldr	r3, [r3, #12]
 80160c2:	f043 0202 	orr.w	r2, r3, #2
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	330c      	adds	r3, #12
 80160ce:	2202      	movs	r2, #2
 80160d0:	4619      	mov	r1, r3
 80160d2:	6878      	ldr	r0, [r7, #4]
 80160d4:	f000 f900 	bl	80162d8 <USBD_CtlSendData>
      break;
 80160d8:	e004      	b.n	80160e4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80160da:	6839      	ldr	r1, [r7, #0]
 80160dc:	6878      	ldr	r0, [r7, #4]
 80160de:	f000 f88a 	bl	80161f6 <USBD_CtlError>
      break;
 80160e2:	bf00      	nop
  }
}
 80160e4:	bf00      	nop
 80160e6:	3708      	adds	r7, #8
 80160e8:	46bd      	mov	sp, r7
 80160ea:	bd80      	pop	{r7, pc}

080160ec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80160ec:	b580      	push	{r7, lr}
 80160ee:	b082      	sub	sp, #8
 80160f0:	af00      	add	r7, sp, #0
 80160f2:	6078      	str	r0, [r7, #4]
 80160f4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80160f6:	683b      	ldr	r3, [r7, #0]
 80160f8:	885b      	ldrh	r3, [r3, #2]
 80160fa:	2b01      	cmp	r3, #1
 80160fc:	d107      	bne.n	801610e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	2201      	movs	r2, #1
 8016102:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8016106:	6878      	ldr	r0, [r7, #4]
 8016108:	f000 f940 	bl	801638c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801610c:	e013      	b.n	8016136 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801610e:	683b      	ldr	r3, [r7, #0]
 8016110:	885b      	ldrh	r3, [r3, #2]
 8016112:	2b02      	cmp	r3, #2
 8016114:	d10b      	bne.n	801612e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8016116:	683b      	ldr	r3, [r7, #0]
 8016118:	889b      	ldrh	r3, [r3, #4]
 801611a:	0a1b      	lsrs	r3, r3, #8
 801611c:	b29b      	uxth	r3, r3
 801611e:	b2da      	uxtb	r2, r3
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8016126:	6878      	ldr	r0, [r7, #4]
 8016128:	f000 f930 	bl	801638c <USBD_CtlSendStatus>
}
 801612c:	e003      	b.n	8016136 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801612e:	6839      	ldr	r1, [r7, #0]
 8016130:	6878      	ldr	r0, [r7, #4]
 8016132:	f000 f860 	bl	80161f6 <USBD_CtlError>
}
 8016136:	bf00      	nop
 8016138:	3708      	adds	r7, #8
 801613a:	46bd      	mov	sp, r7
 801613c:	bd80      	pop	{r7, pc}

0801613e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801613e:	b580      	push	{r7, lr}
 8016140:	b082      	sub	sp, #8
 8016142:	af00      	add	r7, sp, #0
 8016144:	6078      	str	r0, [r7, #4]
 8016146:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801614e:	b2db      	uxtb	r3, r3
 8016150:	3b01      	subs	r3, #1
 8016152:	2b02      	cmp	r3, #2
 8016154:	d80b      	bhi.n	801616e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016156:	683b      	ldr	r3, [r7, #0]
 8016158:	885b      	ldrh	r3, [r3, #2]
 801615a:	2b01      	cmp	r3, #1
 801615c:	d10c      	bne.n	8016178 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	2200      	movs	r2, #0
 8016162:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8016166:	6878      	ldr	r0, [r7, #4]
 8016168:	f000 f910 	bl	801638c <USBD_CtlSendStatus>
      }
      break;
 801616c:	e004      	b.n	8016178 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801616e:	6839      	ldr	r1, [r7, #0]
 8016170:	6878      	ldr	r0, [r7, #4]
 8016172:	f000 f840 	bl	80161f6 <USBD_CtlError>
      break;
 8016176:	e000      	b.n	801617a <USBD_ClrFeature+0x3c>
      break;
 8016178:	bf00      	nop
  }
}
 801617a:	bf00      	nop
 801617c:	3708      	adds	r7, #8
 801617e:	46bd      	mov	sp, r7
 8016180:	bd80      	pop	{r7, pc}

08016182 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8016182:	b580      	push	{r7, lr}
 8016184:	b084      	sub	sp, #16
 8016186:	af00      	add	r7, sp, #0
 8016188:	6078      	str	r0, [r7, #4]
 801618a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801618c:	683b      	ldr	r3, [r7, #0]
 801618e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016190:	68fb      	ldr	r3, [r7, #12]
 8016192:	781a      	ldrb	r2, [r3, #0]
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	3301      	adds	r3, #1
 801619c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	781a      	ldrb	r2, [r3, #0]
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80161a6:	68fb      	ldr	r3, [r7, #12]
 80161a8:	3301      	adds	r3, #1
 80161aa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80161ac:	68f8      	ldr	r0, [r7, #12]
 80161ae:	f7ff fa41 	bl	8015634 <SWAPBYTE>
 80161b2:	4603      	mov	r3, r0
 80161b4:	461a      	mov	r2, r3
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80161ba:	68fb      	ldr	r3, [r7, #12]
 80161bc:	3301      	adds	r3, #1
 80161be:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80161c0:	68fb      	ldr	r3, [r7, #12]
 80161c2:	3301      	adds	r3, #1
 80161c4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80161c6:	68f8      	ldr	r0, [r7, #12]
 80161c8:	f7ff fa34 	bl	8015634 <SWAPBYTE>
 80161cc:	4603      	mov	r3, r0
 80161ce:	461a      	mov	r2, r3
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80161d4:	68fb      	ldr	r3, [r7, #12]
 80161d6:	3301      	adds	r3, #1
 80161d8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	3301      	adds	r3, #1
 80161de:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80161e0:	68f8      	ldr	r0, [r7, #12]
 80161e2:	f7ff fa27 	bl	8015634 <SWAPBYTE>
 80161e6:	4603      	mov	r3, r0
 80161e8:	461a      	mov	r2, r3
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	80da      	strh	r2, [r3, #6]
}
 80161ee:	bf00      	nop
 80161f0:	3710      	adds	r7, #16
 80161f2:	46bd      	mov	sp, r7
 80161f4:	bd80      	pop	{r7, pc}

080161f6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80161f6:	b580      	push	{r7, lr}
 80161f8:	b082      	sub	sp, #8
 80161fa:	af00      	add	r7, sp, #0
 80161fc:	6078      	str	r0, [r7, #4]
 80161fe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016200:	2180      	movs	r1, #128	; 0x80
 8016202:	6878      	ldr	r0, [r7, #4]
 8016204:	f000 fd36 	bl	8016c74 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016208:	2100      	movs	r1, #0
 801620a:	6878      	ldr	r0, [r7, #4]
 801620c:	f000 fd32 	bl	8016c74 <USBD_LL_StallEP>
}
 8016210:	bf00      	nop
 8016212:	3708      	adds	r7, #8
 8016214:	46bd      	mov	sp, r7
 8016216:	bd80      	pop	{r7, pc}

08016218 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016218:	b580      	push	{r7, lr}
 801621a:	b086      	sub	sp, #24
 801621c:	af00      	add	r7, sp, #0
 801621e:	60f8      	str	r0, [r7, #12]
 8016220:	60b9      	str	r1, [r7, #8]
 8016222:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016224:	2300      	movs	r3, #0
 8016226:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016228:	68fb      	ldr	r3, [r7, #12]
 801622a:	2b00      	cmp	r3, #0
 801622c:	d036      	beq.n	801629c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8016232:	6938      	ldr	r0, [r7, #16]
 8016234:	f000 f836 	bl	80162a4 <USBD_GetLen>
 8016238:	4603      	mov	r3, r0
 801623a:	3301      	adds	r3, #1
 801623c:	b29b      	uxth	r3, r3
 801623e:	005b      	lsls	r3, r3, #1
 8016240:	b29a      	uxth	r2, r3
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8016246:	7dfb      	ldrb	r3, [r7, #23]
 8016248:	68ba      	ldr	r2, [r7, #8]
 801624a:	4413      	add	r3, r2
 801624c:	687a      	ldr	r2, [r7, #4]
 801624e:	7812      	ldrb	r2, [r2, #0]
 8016250:	701a      	strb	r2, [r3, #0]
  idx++;
 8016252:	7dfb      	ldrb	r3, [r7, #23]
 8016254:	3301      	adds	r3, #1
 8016256:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016258:	7dfb      	ldrb	r3, [r7, #23]
 801625a:	68ba      	ldr	r2, [r7, #8]
 801625c:	4413      	add	r3, r2
 801625e:	2203      	movs	r2, #3
 8016260:	701a      	strb	r2, [r3, #0]
  idx++;
 8016262:	7dfb      	ldrb	r3, [r7, #23]
 8016264:	3301      	adds	r3, #1
 8016266:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016268:	e013      	b.n	8016292 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801626a:	7dfb      	ldrb	r3, [r7, #23]
 801626c:	68ba      	ldr	r2, [r7, #8]
 801626e:	4413      	add	r3, r2
 8016270:	693a      	ldr	r2, [r7, #16]
 8016272:	7812      	ldrb	r2, [r2, #0]
 8016274:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016276:	693b      	ldr	r3, [r7, #16]
 8016278:	3301      	adds	r3, #1
 801627a:	613b      	str	r3, [r7, #16]
    idx++;
 801627c:	7dfb      	ldrb	r3, [r7, #23]
 801627e:	3301      	adds	r3, #1
 8016280:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8016282:	7dfb      	ldrb	r3, [r7, #23]
 8016284:	68ba      	ldr	r2, [r7, #8]
 8016286:	4413      	add	r3, r2
 8016288:	2200      	movs	r2, #0
 801628a:	701a      	strb	r2, [r3, #0]
    idx++;
 801628c:	7dfb      	ldrb	r3, [r7, #23]
 801628e:	3301      	adds	r3, #1
 8016290:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016292:	693b      	ldr	r3, [r7, #16]
 8016294:	781b      	ldrb	r3, [r3, #0]
 8016296:	2b00      	cmp	r3, #0
 8016298:	d1e7      	bne.n	801626a <USBD_GetString+0x52>
 801629a:	e000      	b.n	801629e <USBD_GetString+0x86>
    return;
 801629c:	bf00      	nop
  }
}
 801629e:	3718      	adds	r7, #24
 80162a0:	46bd      	mov	sp, r7
 80162a2:	bd80      	pop	{r7, pc}

080162a4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80162a4:	b480      	push	{r7}
 80162a6:	b085      	sub	sp, #20
 80162a8:	af00      	add	r7, sp, #0
 80162aa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80162ac:	2300      	movs	r3, #0
 80162ae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80162b4:	e005      	b.n	80162c2 <USBD_GetLen+0x1e>
  {
    len++;
 80162b6:	7bfb      	ldrb	r3, [r7, #15]
 80162b8:	3301      	adds	r3, #1
 80162ba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80162bc:	68bb      	ldr	r3, [r7, #8]
 80162be:	3301      	adds	r3, #1
 80162c0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80162c2:	68bb      	ldr	r3, [r7, #8]
 80162c4:	781b      	ldrb	r3, [r3, #0]
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d1f5      	bne.n	80162b6 <USBD_GetLen+0x12>
  }

  return len;
 80162ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80162cc:	4618      	mov	r0, r3
 80162ce:	3714      	adds	r7, #20
 80162d0:	46bd      	mov	sp, r7
 80162d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162d6:	4770      	bx	lr

080162d8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80162d8:	b580      	push	{r7, lr}
 80162da:	b084      	sub	sp, #16
 80162dc:	af00      	add	r7, sp, #0
 80162de:	60f8      	str	r0, [r7, #12]
 80162e0:	60b9      	str	r1, [r7, #8]
 80162e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	2202      	movs	r2, #2
 80162e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80162ec:	68fb      	ldr	r3, [r7, #12]
 80162ee:	687a      	ldr	r2, [r7, #4]
 80162f0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80162f2:	68fb      	ldr	r3, [r7, #12]
 80162f4:	687a      	ldr	r2, [r7, #4]
 80162f6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	68ba      	ldr	r2, [r7, #8]
 80162fc:	2100      	movs	r1, #0
 80162fe:	68f8      	ldr	r0, [r7, #12]
 8016300:	f000 fd41 	bl	8016d86 <USBD_LL_Transmit>

  return USBD_OK;
 8016304:	2300      	movs	r3, #0
}
 8016306:	4618      	mov	r0, r3
 8016308:	3710      	adds	r7, #16
 801630a:	46bd      	mov	sp, r7
 801630c:	bd80      	pop	{r7, pc}

0801630e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801630e:	b580      	push	{r7, lr}
 8016310:	b084      	sub	sp, #16
 8016312:	af00      	add	r7, sp, #0
 8016314:	60f8      	str	r0, [r7, #12]
 8016316:	60b9      	str	r1, [r7, #8]
 8016318:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	68ba      	ldr	r2, [r7, #8]
 801631e:	2100      	movs	r1, #0
 8016320:	68f8      	ldr	r0, [r7, #12]
 8016322:	f000 fd30 	bl	8016d86 <USBD_LL_Transmit>

  return USBD_OK;
 8016326:	2300      	movs	r3, #0
}
 8016328:	4618      	mov	r0, r3
 801632a:	3710      	adds	r7, #16
 801632c:	46bd      	mov	sp, r7
 801632e:	bd80      	pop	{r7, pc}

08016330 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8016330:	b580      	push	{r7, lr}
 8016332:	b084      	sub	sp, #16
 8016334:	af00      	add	r7, sp, #0
 8016336:	60f8      	str	r0, [r7, #12]
 8016338:	60b9      	str	r1, [r7, #8]
 801633a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801633c:	68fb      	ldr	r3, [r7, #12]
 801633e:	2203      	movs	r2, #3
 8016340:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8016344:	68fb      	ldr	r3, [r7, #12]
 8016346:	687a      	ldr	r2, [r7, #4]
 8016348:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	687a      	ldr	r2, [r7, #4]
 8016350:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	68ba      	ldr	r2, [r7, #8]
 8016358:	2100      	movs	r1, #0
 801635a:	68f8      	ldr	r0, [r7, #12]
 801635c:	f000 fd34 	bl	8016dc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016360:	2300      	movs	r3, #0
}
 8016362:	4618      	mov	r0, r3
 8016364:	3710      	adds	r7, #16
 8016366:	46bd      	mov	sp, r7
 8016368:	bd80      	pop	{r7, pc}

0801636a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801636a:	b580      	push	{r7, lr}
 801636c:	b084      	sub	sp, #16
 801636e:	af00      	add	r7, sp, #0
 8016370:	60f8      	str	r0, [r7, #12]
 8016372:	60b9      	str	r1, [r7, #8]
 8016374:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	68ba      	ldr	r2, [r7, #8]
 801637a:	2100      	movs	r1, #0
 801637c:	68f8      	ldr	r0, [r7, #12]
 801637e:	f000 fd23 	bl	8016dc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016382:	2300      	movs	r3, #0
}
 8016384:	4618      	mov	r0, r3
 8016386:	3710      	adds	r7, #16
 8016388:	46bd      	mov	sp, r7
 801638a:	bd80      	pop	{r7, pc}

0801638c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801638c:	b580      	push	{r7, lr}
 801638e:	b082      	sub	sp, #8
 8016390:	af00      	add	r7, sp, #0
 8016392:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	2204      	movs	r2, #4
 8016398:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801639c:	2300      	movs	r3, #0
 801639e:	2200      	movs	r2, #0
 80163a0:	2100      	movs	r1, #0
 80163a2:	6878      	ldr	r0, [r7, #4]
 80163a4:	f000 fcef 	bl	8016d86 <USBD_LL_Transmit>

  return USBD_OK;
 80163a8:	2300      	movs	r3, #0
}
 80163aa:	4618      	mov	r0, r3
 80163ac:	3708      	adds	r7, #8
 80163ae:	46bd      	mov	sp, r7
 80163b0:	bd80      	pop	{r7, pc}

080163b2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80163b2:	b580      	push	{r7, lr}
 80163b4:	b082      	sub	sp, #8
 80163b6:	af00      	add	r7, sp, #0
 80163b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	2205      	movs	r2, #5
 80163be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80163c2:	2300      	movs	r3, #0
 80163c4:	2200      	movs	r2, #0
 80163c6:	2100      	movs	r1, #0
 80163c8:	6878      	ldr	r0, [r7, #4]
 80163ca:	f000 fcfd 	bl	8016dc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80163ce:	2300      	movs	r3, #0
}
 80163d0:	4618      	mov	r0, r3
 80163d2:	3708      	adds	r7, #8
 80163d4:	46bd      	mov	sp, r7
 80163d6:	bd80      	pop	{r7, pc}

080163d8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80163d8:	b480      	push	{r7}
 80163da:	b087      	sub	sp, #28
 80163dc:	af00      	add	r7, sp, #0
 80163de:	60f8      	str	r0, [r7, #12]
 80163e0:	60b9      	str	r1, [r7, #8]
 80163e2:	4613      	mov	r3, r2
 80163e4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80163e6:	2301      	movs	r3, #1
 80163e8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80163ea:	2300      	movs	r3, #0
 80163ec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80163ee:	4b1f      	ldr	r3, [pc, #124]	; (801646c <FATFS_LinkDriverEx+0x94>)
 80163f0:	7a5b      	ldrb	r3, [r3, #9]
 80163f2:	b2db      	uxtb	r3, r3
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d131      	bne.n	801645c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80163f8:	4b1c      	ldr	r3, [pc, #112]	; (801646c <FATFS_LinkDriverEx+0x94>)
 80163fa:	7a5b      	ldrb	r3, [r3, #9]
 80163fc:	b2db      	uxtb	r3, r3
 80163fe:	461a      	mov	r2, r3
 8016400:	4b1a      	ldr	r3, [pc, #104]	; (801646c <FATFS_LinkDriverEx+0x94>)
 8016402:	2100      	movs	r1, #0
 8016404:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8016406:	4b19      	ldr	r3, [pc, #100]	; (801646c <FATFS_LinkDriverEx+0x94>)
 8016408:	7a5b      	ldrb	r3, [r3, #9]
 801640a:	b2db      	uxtb	r3, r3
 801640c:	4a17      	ldr	r2, [pc, #92]	; (801646c <FATFS_LinkDriverEx+0x94>)
 801640e:	009b      	lsls	r3, r3, #2
 8016410:	4413      	add	r3, r2
 8016412:	68fa      	ldr	r2, [r7, #12]
 8016414:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8016416:	4b15      	ldr	r3, [pc, #84]	; (801646c <FATFS_LinkDriverEx+0x94>)
 8016418:	7a5b      	ldrb	r3, [r3, #9]
 801641a:	b2db      	uxtb	r3, r3
 801641c:	461a      	mov	r2, r3
 801641e:	4b13      	ldr	r3, [pc, #76]	; (801646c <FATFS_LinkDriverEx+0x94>)
 8016420:	4413      	add	r3, r2
 8016422:	79fa      	ldrb	r2, [r7, #7]
 8016424:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8016426:	4b11      	ldr	r3, [pc, #68]	; (801646c <FATFS_LinkDriverEx+0x94>)
 8016428:	7a5b      	ldrb	r3, [r3, #9]
 801642a:	b2db      	uxtb	r3, r3
 801642c:	1c5a      	adds	r2, r3, #1
 801642e:	b2d1      	uxtb	r1, r2
 8016430:	4a0e      	ldr	r2, [pc, #56]	; (801646c <FATFS_LinkDriverEx+0x94>)
 8016432:	7251      	strb	r1, [r2, #9]
 8016434:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8016436:	7dbb      	ldrb	r3, [r7, #22]
 8016438:	3330      	adds	r3, #48	; 0x30
 801643a:	b2da      	uxtb	r2, r3
 801643c:	68bb      	ldr	r3, [r7, #8]
 801643e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8016440:	68bb      	ldr	r3, [r7, #8]
 8016442:	3301      	adds	r3, #1
 8016444:	223a      	movs	r2, #58	; 0x3a
 8016446:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8016448:	68bb      	ldr	r3, [r7, #8]
 801644a:	3302      	adds	r3, #2
 801644c:	222f      	movs	r2, #47	; 0x2f
 801644e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8016450:	68bb      	ldr	r3, [r7, #8]
 8016452:	3303      	adds	r3, #3
 8016454:	2200      	movs	r2, #0
 8016456:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8016458:	2300      	movs	r3, #0
 801645a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801645c:	7dfb      	ldrb	r3, [r7, #23]
}
 801645e:	4618      	mov	r0, r3
 8016460:	371c      	adds	r7, #28
 8016462:	46bd      	mov	sp, r7
 8016464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016468:	4770      	bx	lr
 801646a:	bf00      	nop
 801646c:	24001498 	.word	0x24001498

08016470 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016470:	b580      	push	{r7, lr}
 8016472:	b082      	sub	sp, #8
 8016474:	af00      	add	r7, sp, #0
 8016476:	6078      	str	r0, [r7, #4]
 8016478:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801647a:	2200      	movs	r2, #0
 801647c:	6839      	ldr	r1, [r7, #0]
 801647e:	6878      	ldr	r0, [r7, #4]
 8016480:	f7ff ffaa 	bl	80163d8 <FATFS_LinkDriverEx>
 8016484:	4603      	mov	r3, r0
}
 8016486:	4618      	mov	r0, r3
 8016488:	3708      	adds	r7, #8
 801648a:	46bd      	mov	sp, r7
 801648c:	bd80      	pop	{r7, pc}
	...

08016490 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016490:	b580      	push	{r7, lr}
 8016492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8016494:	2201      	movs	r2, #1
 8016496:	4913      	ldr	r1, [pc, #76]	; (80164e4 <MX_USB_DEVICE_Init+0x54>)
 8016498:	4813      	ldr	r0, [pc, #76]	; (80164e8 <MX_USB_DEVICE_Init+0x58>)
 801649a:	f7fe fca5 	bl	8014de8 <USBD_Init>
 801649e:	4603      	mov	r3, r0
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d001      	beq.n	80164a8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80164a4:	f7ec fa2c 	bl	8002900 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 80164a8:	4910      	ldr	r1, [pc, #64]	; (80164ec <MX_USB_DEVICE_Init+0x5c>)
 80164aa:	480f      	ldr	r0, [pc, #60]	; (80164e8 <MX_USB_DEVICE_Init+0x58>)
 80164ac:	f7fe fccc 	bl	8014e48 <USBD_RegisterClass>
 80164b0:	4603      	mov	r3, r0
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	d001      	beq.n	80164ba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80164b6:	f7ec fa23 	bl	8002900 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 80164ba:	490d      	ldr	r1, [pc, #52]	; (80164f0 <MX_USB_DEVICE_Init+0x60>)
 80164bc:	480a      	ldr	r0, [pc, #40]	; (80164e8 <MX_USB_DEVICE_Init+0x58>)
 80164be:	f7fe fbc3 	bl	8014c48 <USBD_CDC_RegisterInterface>
 80164c2:	4603      	mov	r3, r0
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	d001      	beq.n	80164cc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80164c8:	f7ec fa1a 	bl	8002900 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 80164cc:	4806      	ldr	r0, [pc, #24]	; (80164e8 <MX_USB_DEVICE_Init+0x58>)
 80164ce:	f7fe fcf1 	bl	8014eb4 <USBD_Start>
 80164d2:	4603      	mov	r3, r0
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	d001      	beq.n	80164dc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80164d8:	f7ec fa12 	bl	8002900 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80164dc:	f7f3 f960 	bl	80097a0 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80164e0:	bf00      	nop
 80164e2:	bd80      	pop	{r7, pc}
 80164e4:	240000b0 	.word	0x240000b0
 80164e8:	240014a4 	.word	0x240014a4
 80164ec:	2400001c 	.word	0x2400001c
 80164f0:	2400009c 	.word	0x2400009c

080164f4 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80164f4:	b580      	push	{r7, lr}
 80164f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80164f8:	2200      	movs	r2, #0
 80164fa:	4905      	ldr	r1, [pc, #20]	; (8016510 <CDC_Init_HS+0x1c>)
 80164fc:	4805      	ldr	r0, [pc, #20]	; (8016514 <CDC_Init_HS+0x20>)
 80164fe:	f7fe fbbd 	bl	8014c7c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8016502:	4905      	ldr	r1, [pc, #20]	; (8016518 <CDC_Init_HS+0x24>)
 8016504:	4803      	ldr	r0, [pc, #12]	; (8016514 <CDC_Init_HS+0x20>)
 8016506:	f7fe fbdb 	bl	8014cc0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801650a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801650c:	4618      	mov	r0, r3
 801650e:	bd80      	pop	{r7, pc}
 8016510:	24001f80 	.word	0x24001f80
 8016514:	240014a4 	.word	0x240014a4
 8016518:	24001780 	.word	0x24001780

0801651c <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 801651c:	b480      	push	{r7}
 801651e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8016520:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8016522:	4618      	mov	r0, r3
 8016524:	46bd      	mov	sp, r7
 8016526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801652a:	4770      	bx	lr

0801652c <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801652c:	b480      	push	{r7}
 801652e:	b083      	sub	sp, #12
 8016530:	af00      	add	r7, sp, #0
 8016532:	4603      	mov	r3, r0
 8016534:	6039      	str	r1, [r7, #0]
 8016536:	71fb      	strb	r3, [r7, #7]
 8016538:	4613      	mov	r3, r2
 801653a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 801653c:	79fb      	ldrb	r3, [r7, #7]
 801653e:	2b23      	cmp	r3, #35	; 0x23
 8016540:	d84a      	bhi.n	80165d8 <CDC_Control_HS+0xac>
 8016542:	a201      	add	r2, pc, #4	; (adr r2, 8016548 <CDC_Control_HS+0x1c>)
 8016544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016548:	080165d9 	.word	0x080165d9
 801654c:	080165d9 	.word	0x080165d9
 8016550:	080165d9 	.word	0x080165d9
 8016554:	080165d9 	.word	0x080165d9
 8016558:	080165d9 	.word	0x080165d9
 801655c:	080165d9 	.word	0x080165d9
 8016560:	080165d9 	.word	0x080165d9
 8016564:	080165d9 	.word	0x080165d9
 8016568:	080165d9 	.word	0x080165d9
 801656c:	080165d9 	.word	0x080165d9
 8016570:	080165d9 	.word	0x080165d9
 8016574:	080165d9 	.word	0x080165d9
 8016578:	080165d9 	.word	0x080165d9
 801657c:	080165d9 	.word	0x080165d9
 8016580:	080165d9 	.word	0x080165d9
 8016584:	080165d9 	.word	0x080165d9
 8016588:	080165d9 	.word	0x080165d9
 801658c:	080165d9 	.word	0x080165d9
 8016590:	080165d9 	.word	0x080165d9
 8016594:	080165d9 	.word	0x080165d9
 8016598:	080165d9 	.word	0x080165d9
 801659c:	080165d9 	.word	0x080165d9
 80165a0:	080165d9 	.word	0x080165d9
 80165a4:	080165d9 	.word	0x080165d9
 80165a8:	080165d9 	.word	0x080165d9
 80165ac:	080165d9 	.word	0x080165d9
 80165b0:	080165d9 	.word	0x080165d9
 80165b4:	080165d9 	.word	0x080165d9
 80165b8:	080165d9 	.word	0x080165d9
 80165bc:	080165d9 	.word	0x080165d9
 80165c0:	080165d9 	.word	0x080165d9
 80165c4:	080165d9 	.word	0x080165d9
 80165c8:	080165d9 	.word	0x080165d9
 80165cc:	080165d9 	.word	0x080165d9
 80165d0:	080165d9 	.word	0x080165d9
 80165d4:	080165d9 	.word	0x080165d9
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80165d8:	bf00      	nop
  }

  return (USBD_OK);
 80165da:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 80165dc:	4618      	mov	r0, r3
 80165de:	370c      	adds	r7, #12
 80165e0:	46bd      	mov	sp, r7
 80165e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165e6:	4770      	bx	lr

080165e8 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 80165e8:	b580      	push	{r7, lr}
 80165ea:	b082      	sub	sp, #8
 80165ec:	af00      	add	r7, sp, #0
 80165ee:	6078      	str	r0, [r7, #4]
 80165f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80165f2:	6879      	ldr	r1, [r7, #4]
 80165f4:	4805      	ldr	r0, [pc, #20]	; (801660c <CDC_Receive_HS+0x24>)
 80165f6:	f7fe fb63 	bl	8014cc0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80165fa:	4804      	ldr	r0, [pc, #16]	; (801660c <CDC_Receive_HS+0x24>)
 80165fc:	f7fe fbbe 	bl	8014d7c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8016600:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8016602:	4618      	mov	r0, r3
 8016604:	3708      	adds	r7, #8
 8016606:	46bd      	mov	sp, r7
 8016608:	bd80      	pop	{r7, pc}
 801660a:	bf00      	nop
 801660c:	240014a4 	.word	0x240014a4

08016610 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8016610:	b580      	push	{r7, lr}
 8016612:	b084      	sub	sp, #16
 8016614:	af00      	add	r7, sp, #0
 8016616:	6078      	str	r0, [r7, #4]
 8016618:	460b      	mov	r3, r1
 801661a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801661c:	2300      	movs	r3, #0
 801661e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8016620:	4b0d      	ldr	r3, [pc, #52]	; (8016658 <CDC_Transmit_HS+0x48>)
 8016622:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016626:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016628:	68bb      	ldr	r3, [r7, #8]
 801662a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801662e:	2b00      	cmp	r3, #0
 8016630:	d001      	beq.n	8016636 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8016632:	2301      	movs	r3, #1
 8016634:	e00b      	b.n	801664e <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8016636:	887b      	ldrh	r3, [r7, #2]
 8016638:	461a      	mov	r2, r3
 801663a:	6879      	ldr	r1, [r7, #4]
 801663c:	4806      	ldr	r0, [pc, #24]	; (8016658 <CDC_Transmit_HS+0x48>)
 801663e:	f7fe fb1d 	bl	8014c7c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8016642:	4805      	ldr	r0, [pc, #20]	; (8016658 <CDC_Transmit_HS+0x48>)
 8016644:	f7fe fb5a 	bl	8014cfc <USBD_CDC_TransmitPacket>
 8016648:	4603      	mov	r3, r0
 801664a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 801664c:	7bfb      	ldrb	r3, [r7, #15]
}
 801664e:	4618      	mov	r0, r3
 8016650:	3710      	adds	r7, #16
 8016652:	46bd      	mov	sp, r7
 8016654:	bd80      	pop	{r7, pc}
 8016656:	bf00      	nop
 8016658:	240014a4 	.word	0x240014a4

0801665c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801665c:	b480      	push	{r7}
 801665e:	b087      	sub	sp, #28
 8016660:	af00      	add	r7, sp, #0
 8016662:	60f8      	str	r0, [r7, #12]
 8016664:	60b9      	str	r1, [r7, #8]
 8016666:	4613      	mov	r3, r2
 8016668:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801666a:	2300      	movs	r3, #0
 801666c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801666e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016672:	4618      	mov	r0, r3
 8016674:	371c      	adds	r7, #28
 8016676:	46bd      	mov	sp, r7
 8016678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801667c:	4770      	bx	lr
	...

08016680 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016680:	b480      	push	{r7}
 8016682:	b083      	sub	sp, #12
 8016684:	af00      	add	r7, sp, #0
 8016686:	4603      	mov	r3, r0
 8016688:	6039      	str	r1, [r7, #0]
 801668a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 801668c:	683b      	ldr	r3, [r7, #0]
 801668e:	2212      	movs	r2, #18
 8016690:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8016692:	4b03      	ldr	r3, [pc, #12]	; (80166a0 <USBD_HS_DeviceDescriptor+0x20>)
}
 8016694:	4618      	mov	r0, r3
 8016696:	370c      	adds	r7, #12
 8016698:	46bd      	mov	sp, r7
 801669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801669e:	4770      	bx	lr
 80166a0:	240000cc 	.word	0x240000cc

080166a4 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80166a4:	b480      	push	{r7}
 80166a6:	b083      	sub	sp, #12
 80166a8:	af00      	add	r7, sp, #0
 80166aa:	4603      	mov	r3, r0
 80166ac:	6039      	str	r1, [r7, #0]
 80166ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80166b0:	683b      	ldr	r3, [r7, #0]
 80166b2:	2204      	movs	r2, #4
 80166b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80166b6:	4b03      	ldr	r3, [pc, #12]	; (80166c4 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80166b8:	4618      	mov	r0, r3
 80166ba:	370c      	adds	r7, #12
 80166bc:	46bd      	mov	sp, r7
 80166be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166c2:	4770      	bx	lr
 80166c4:	240000e0 	.word	0x240000e0

080166c8 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80166c8:	b580      	push	{r7, lr}
 80166ca:	b082      	sub	sp, #8
 80166cc:	af00      	add	r7, sp, #0
 80166ce:	4603      	mov	r3, r0
 80166d0:	6039      	str	r1, [r7, #0]
 80166d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80166d4:	79fb      	ldrb	r3, [r7, #7]
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d105      	bne.n	80166e6 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80166da:	683a      	ldr	r2, [r7, #0]
 80166dc:	4907      	ldr	r1, [pc, #28]	; (80166fc <USBD_HS_ProductStrDescriptor+0x34>)
 80166de:	4808      	ldr	r0, [pc, #32]	; (8016700 <USBD_HS_ProductStrDescriptor+0x38>)
 80166e0:	f7ff fd9a 	bl	8016218 <USBD_GetString>
 80166e4:	e004      	b.n	80166f0 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80166e6:	683a      	ldr	r2, [r7, #0]
 80166e8:	4904      	ldr	r1, [pc, #16]	; (80166fc <USBD_HS_ProductStrDescriptor+0x34>)
 80166ea:	4805      	ldr	r0, [pc, #20]	; (8016700 <USBD_HS_ProductStrDescriptor+0x38>)
 80166ec:	f7ff fd94 	bl	8016218 <USBD_GetString>
  }
  return USBD_StrDesc;
 80166f0:	4b02      	ldr	r3, [pc, #8]	; (80166fc <USBD_HS_ProductStrDescriptor+0x34>)
}
 80166f2:	4618      	mov	r0, r3
 80166f4:	3708      	adds	r7, #8
 80166f6:	46bd      	mov	sp, r7
 80166f8:	bd80      	pop	{r7, pc}
 80166fa:	bf00      	nop
 80166fc:	24002780 	.word	0x24002780
 8016700:	080179f4 	.word	0x080179f4

08016704 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016704:	b580      	push	{r7, lr}
 8016706:	b082      	sub	sp, #8
 8016708:	af00      	add	r7, sp, #0
 801670a:	4603      	mov	r3, r0
 801670c:	6039      	str	r1, [r7, #0]
 801670e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016710:	683a      	ldr	r2, [r7, #0]
 8016712:	4904      	ldr	r1, [pc, #16]	; (8016724 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8016714:	4804      	ldr	r0, [pc, #16]	; (8016728 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8016716:	f7ff fd7f 	bl	8016218 <USBD_GetString>
  return USBD_StrDesc;
 801671a:	4b02      	ldr	r3, [pc, #8]	; (8016724 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 801671c:	4618      	mov	r0, r3
 801671e:	3708      	adds	r7, #8
 8016720:	46bd      	mov	sp, r7
 8016722:	bd80      	pop	{r7, pc}
 8016724:	24002780 	.word	0x24002780
 8016728:	08017a10 	.word	0x08017a10

0801672c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801672c:	b580      	push	{r7, lr}
 801672e:	b082      	sub	sp, #8
 8016730:	af00      	add	r7, sp, #0
 8016732:	4603      	mov	r3, r0
 8016734:	6039      	str	r1, [r7, #0]
 8016736:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016738:	683b      	ldr	r3, [r7, #0]
 801673a:	221a      	movs	r2, #26
 801673c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801673e:	f000 f843 	bl	80167c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8016742:	4b02      	ldr	r3, [pc, #8]	; (801674c <USBD_HS_SerialStrDescriptor+0x20>)
}
 8016744:	4618      	mov	r0, r3
 8016746:	3708      	adds	r7, #8
 8016748:	46bd      	mov	sp, r7
 801674a:	bd80      	pop	{r7, pc}
 801674c:	240000e4 	.word	0x240000e4

08016750 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016750:	b580      	push	{r7, lr}
 8016752:	b082      	sub	sp, #8
 8016754:	af00      	add	r7, sp, #0
 8016756:	4603      	mov	r3, r0
 8016758:	6039      	str	r1, [r7, #0]
 801675a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801675c:	79fb      	ldrb	r3, [r7, #7]
 801675e:	2b00      	cmp	r3, #0
 8016760:	d105      	bne.n	801676e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8016762:	683a      	ldr	r2, [r7, #0]
 8016764:	4907      	ldr	r1, [pc, #28]	; (8016784 <USBD_HS_ConfigStrDescriptor+0x34>)
 8016766:	4808      	ldr	r0, [pc, #32]	; (8016788 <USBD_HS_ConfigStrDescriptor+0x38>)
 8016768:	f7ff fd56 	bl	8016218 <USBD_GetString>
 801676c:	e004      	b.n	8016778 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801676e:	683a      	ldr	r2, [r7, #0]
 8016770:	4904      	ldr	r1, [pc, #16]	; (8016784 <USBD_HS_ConfigStrDescriptor+0x34>)
 8016772:	4805      	ldr	r0, [pc, #20]	; (8016788 <USBD_HS_ConfigStrDescriptor+0x38>)
 8016774:	f7ff fd50 	bl	8016218 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016778:	4b02      	ldr	r3, [pc, #8]	; (8016784 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801677a:	4618      	mov	r0, r3
 801677c:	3708      	adds	r7, #8
 801677e:	46bd      	mov	sp, r7
 8016780:	bd80      	pop	{r7, pc}
 8016782:	bf00      	nop
 8016784:	24002780 	.word	0x24002780
 8016788:	08017a14 	.word	0x08017a14

0801678c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801678c:	b580      	push	{r7, lr}
 801678e:	b082      	sub	sp, #8
 8016790:	af00      	add	r7, sp, #0
 8016792:	4603      	mov	r3, r0
 8016794:	6039      	str	r1, [r7, #0]
 8016796:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016798:	79fb      	ldrb	r3, [r7, #7]
 801679a:	2b00      	cmp	r3, #0
 801679c:	d105      	bne.n	80167aa <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801679e:	683a      	ldr	r2, [r7, #0]
 80167a0:	4907      	ldr	r1, [pc, #28]	; (80167c0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80167a2:	4808      	ldr	r0, [pc, #32]	; (80167c4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80167a4:	f7ff fd38 	bl	8016218 <USBD_GetString>
 80167a8:	e004      	b.n	80167b4 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80167aa:	683a      	ldr	r2, [r7, #0]
 80167ac:	4904      	ldr	r1, [pc, #16]	; (80167c0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80167ae:	4805      	ldr	r0, [pc, #20]	; (80167c4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80167b0:	f7ff fd32 	bl	8016218 <USBD_GetString>
  }
  return USBD_StrDesc;
 80167b4:	4b02      	ldr	r3, [pc, #8]	; (80167c0 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 80167b6:	4618      	mov	r0, r3
 80167b8:	3708      	adds	r7, #8
 80167ba:	46bd      	mov	sp, r7
 80167bc:	bd80      	pop	{r7, pc}
 80167be:	bf00      	nop
 80167c0:	24002780 	.word	0x24002780
 80167c4:	08017a20 	.word	0x08017a20

080167c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80167c8:	b580      	push	{r7, lr}
 80167ca:	b084      	sub	sp, #16
 80167cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80167ce:	4b0f      	ldr	r3, [pc, #60]	; (801680c <Get_SerialNum+0x44>)
 80167d0:	681b      	ldr	r3, [r3, #0]
 80167d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80167d4:	4b0e      	ldr	r3, [pc, #56]	; (8016810 <Get_SerialNum+0x48>)
 80167d6:	681b      	ldr	r3, [r3, #0]
 80167d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80167da:	4b0e      	ldr	r3, [pc, #56]	; (8016814 <Get_SerialNum+0x4c>)
 80167dc:	681b      	ldr	r3, [r3, #0]
 80167de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80167e0:	68fa      	ldr	r2, [r7, #12]
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	4413      	add	r3, r2
 80167e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80167e8:	68fb      	ldr	r3, [r7, #12]
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d009      	beq.n	8016802 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80167ee:	2208      	movs	r2, #8
 80167f0:	4909      	ldr	r1, [pc, #36]	; (8016818 <Get_SerialNum+0x50>)
 80167f2:	68f8      	ldr	r0, [r7, #12]
 80167f4:	f000 f814 	bl	8016820 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80167f8:	2204      	movs	r2, #4
 80167fa:	4908      	ldr	r1, [pc, #32]	; (801681c <Get_SerialNum+0x54>)
 80167fc:	68b8      	ldr	r0, [r7, #8]
 80167fe:	f000 f80f 	bl	8016820 <IntToUnicode>
  }
}
 8016802:	bf00      	nop
 8016804:	3710      	adds	r7, #16
 8016806:	46bd      	mov	sp, r7
 8016808:	bd80      	pop	{r7, pc}
 801680a:	bf00      	nop
 801680c:	1ff1e800 	.word	0x1ff1e800
 8016810:	1ff1e804 	.word	0x1ff1e804
 8016814:	1ff1e808 	.word	0x1ff1e808
 8016818:	240000e6 	.word	0x240000e6
 801681c:	240000f6 	.word	0x240000f6

08016820 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016820:	b480      	push	{r7}
 8016822:	b087      	sub	sp, #28
 8016824:	af00      	add	r7, sp, #0
 8016826:	60f8      	str	r0, [r7, #12]
 8016828:	60b9      	str	r1, [r7, #8]
 801682a:	4613      	mov	r3, r2
 801682c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801682e:	2300      	movs	r3, #0
 8016830:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016832:	2300      	movs	r3, #0
 8016834:	75fb      	strb	r3, [r7, #23]
 8016836:	e027      	b.n	8016888 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016838:	68fb      	ldr	r3, [r7, #12]
 801683a:	0f1b      	lsrs	r3, r3, #28
 801683c:	2b09      	cmp	r3, #9
 801683e:	d80b      	bhi.n	8016858 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016840:	68fb      	ldr	r3, [r7, #12]
 8016842:	0f1b      	lsrs	r3, r3, #28
 8016844:	b2da      	uxtb	r2, r3
 8016846:	7dfb      	ldrb	r3, [r7, #23]
 8016848:	005b      	lsls	r3, r3, #1
 801684a:	4619      	mov	r1, r3
 801684c:	68bb      	ldr	r3, [r7, #8]
 801684e:	440b      	add	r3, r1
 8016850:	3230      	adds	r2, #48	; 0x30
 8016852:	b2d2      	uxtb	r2, r2
 8016854:	701a      	strb	r2, [r3, #0]
 8016856:	e00a      	b.n	801686e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016858:	68fb      	ldr	r3, [r7, #12]
 801685a:	0f1b      	lsrs	r3, r3, #28
 801685c:	b2da      	uxtb	r2, r3
 801685e:	7dfb      	ldrb	r3, [r7, #23]
 8016860:	005b      	lsls	r3, r3, #1
 8016862:	4619      	mov	r1, r3
 8016864:	68bb      	ldr	r3, [r7, #8]
 8016866:	440b      	add	r3, r1
 8016868:	3237      	adds	r2, #55	; 0x37
 801686a:	b2d2      	uxtb	r2, r2
 801686c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801686e:	68fb      	ldr	r3, [r7, #12]
 8016870:	011b      	lsls	r3, r3, #4
 8016872:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016874:	7dfb      	ldrb	r3, [r7, #23]
 8016876:	005b      	lsls	r3, r3, #1
 8016878:	3301      	adds	r3, #1
 801687a:	68ba      	ldr	r2, [r7, #8]
 801687c:	4413      	add	r3, r2
 801687e:	2200      	movs	r2, #0
 8016880:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016882:	7dfb      	ldrb	r3, [r7, #23]
 8016884:	3301      	adds	r3, #1
 8016886:	75fb      	strb	r3, [r7, #23]
 8016888:	7dfa      	ldrb	r2, [r7, #23]
 801688a:	79fb      	ldrb	r3, [r7, #7]
 801688c:	429a      	cmp	r2, r3
 801688e:	d3d3      	bcc.n	8016838 <IntToUnicode+0x18>
  }
}
 8016890:	bf00      	nop
 8016892:	bf00      	nop
 8016894:	371c      	adds	r7, #28
 8016896:	46bd      	mov	sp, r7
 8016898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801689c:	4770      	bx	lr
	...

080168a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80168a0:	b580      	push	{r7, lr}
 80168a2:	b0b2      	sub	sp, #200	; 0xc8
 80168a4:	af00      	add	r7, sp, #0
 80168a6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80168a8:	f107 0310 	add.w	r3, r7, #16
 80168ac:	22b8      	movs	r2, #184	; 0xb8
 80168ae:	2100      	movs	r1, #0
 80168b0:	4618      	mov	r0, r3
 80168b2:	f000 fb21 	bl	8016ef8 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	681b      	ldr	r3, [r3, #0]
 80168ba:	4a1a      	ldr	r2, [pc, #104]	; (8016924 <HAL_PCD_MspInit+0x84>)
 80168bc:	4293      	cmp	r3, r2
 80168be:	d12c      	bne.n	801691a <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80168c0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80168c4:	f04f 0300 	mov.w	r3, #0
 80168c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80168cc:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80168d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80168d4:	f107 0310 	add.w	r3, r7, #16
 80168d8:	4618      	mov	r0, r3
 80168da:	f7f3 ff41 	bl	800a760 <HAL_RCCEx_PeriphCLKConfig>
 80168de:	4603      	mov	r3, r0
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d001      	beq.n	80168e8 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 80168e4:	f7ec f80c 	bl	8002900 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80168e8:	f7f2 ff5a 	bl	80097a0 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80168ec:	4b0e      	ldr	r3, [pc, #56]	; (8016928 <HAL_PCD_MspInit+0x88>)
 80168ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80168f2:	4a0d      	ldr	r2, [pc, #52]	; (8016928 <HAL_PCD_MspInit+0x88>)
 80168f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80168f8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80168fc:	4b0a      	ldr	r3, [pc, #40]	; (8016928 <HAL_PCD_MspInit+0x88>)
 80168fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016906:	60fb      	str	r3, [r7, #12]
 8016908:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 801690a:	2200      	movs	r2, #0
 801690c:	2100      	movs	r1, #0
 801690e:	204d      	movs	r0, #77	; 0x4d
 8016910:	f7ee fce5 	bl	80052de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8016914:	204d      	movs	r0, #77	; 0x4d
 8016916:	f7ee fcfc 	bl	8005312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801691a:	bf00      	nop
 801691c:	37c8      	adds	r7, #200	; 0xc8
 801691e:	46bd      	mov	sp, r7
 8016920:	bd80      	pop	{r7, pc}
 8016922:	bf00      	nop
 8016924:	40040000 	.word	0x40040000
 8016928:	58024400 	.word	0x58024400

0801692c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801692c:	b580      	push	{r7, lr}
 801692e:	b082      	sub	sp, #8
 8016930:	af00      	add	r7, sp, #0
 8016932:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8016940:	4619      	mov	r1, r3
 8016942:	4610      	mov	r0, r2
 8016944:	f7fe fb03 	bl	8014f4e <USBD_LL_SetupStage>
}
 8016948:	bf00      	nop
 801694a:	3708      	adds	r7, #8
 801694c:	46bd      	mov	sp, r7
 801694e:	bd80      	pop	{r7, pc}

08016950 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016950:	b580      	push	{r7, lr}
 8016952:	b082      	sub	sp, #8
 8016954:	af00      	add	r7, sp, #0
 8016956:	6078      	str	r0, [r7, #4]
 8016958:	460b      	mov	r3, r1
 801695a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016962:	78fa      	ldrb	r2, [r7, #3]
 8016964:	6879      	ldr	r1, [r7, #4]
 8016966:	4613      	mov	r3, r2
 8016968:	00db      	lsls	r3, r3, #3
 801696a:	4413      	add	r3, r2
 801696c:	009b      	lsls	r3, r3, #2
 801696e:	440b      	add	r3, r1
 8016970:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8016974:	681a      	ldr	r2, [r3, #0]
 8016976:	78fb      	ldrb	r3, [r7, #3]
 8016978:	4619      	mov	r1, r3
 801697a:	f7fe fb3d 	bl	8014ff8 <USBD_LL_DataOutStage>
}
 801697e:	bf00      	nop
 8016980:	3708      	adds	r7, #8
 8016982:	46bd      	mov	sp, r7
 8016984:	bd80      	pop	{r7, pc}

08016986 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016986:	b580      	push	{r7, lr}
 8016988:	b082      	sub	sp, #8
 801698a:	af00      	add	r7, sp, #0
 801698c:	6078      	str	r0, [r7, #4]
 801698e:	460b      	mov	r3, r1
 8016990:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016998:	78fa      	ldrb	r2, [r7, #3]
 801699a:	6879      	ldr	r1, [r7, #4]
 801699c:	4613      	mov	r3, r2
 801699e:	00db      	lsls	r3, r3, #3
 80169a0:	4413      	add	r3, r2
 80169a2:	009b      	lsls	r3, r3, #2
 80169a4:	440b      	add	r3, r1
 80169a6:	3348      	adds	r3, #72	; 0x48
 80169a8:	681a      	ldr	r2, [r3, #0]
 80169aa:	78fb      	ldrb	r3, [r7, #3]
 80169ac:	4619      	mov	r1, r3
 80169ae:	f7fe fbd6 	bl	801515e <USBD_LL_DataInStage>
}
 80169b2:	bf00      	nop
 80169b4:	3708      	adds	r7, #8
 80169b6:	46bd      	mov	sp, r7
 80169b8:	bd80      	pop	{r7, pc}

080169ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80169ba:	b580      	push	{r7, lr}
 80169bc:	b082      	sub	sp, #8
 80169be:	af00      	add	r7, sp, #0
 80169c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80169c8:	4618      	mov	r0, r3
 80169ca:	f7fe fd10 	bl	80153ee <USBD_LL_SOF>
}
 80169ce:	bf00      	nop
 80169d0:	3708      	adds	r7, #8
 80169d2:	46bd      	mov	sp, r7
 80169d4:	bd80      	pop	{r7, pc}

080169d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80169d6:	b580      	push	{r7, lr}
 80169d8:	b084      	sub	sp, #16
 80169da:	af00      	add	r7, sp, #0
 80169dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80169de:	2301      	movs	r3, #1
 80169e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	691b      	ldr	r3, [r3, #16]
 80169e6:	2b00      	cmp	r3, #0
 80169e8:	d102      	bne.n	80169f0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80169ea:	2300      	movs	r3, #0
 80169ec:	73fb      	strb	r3, [r7, #15]
 80169ee:	e008      	b.n	8016a02 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	691b      	ldr	r3, [r3, #16]
 80169f4:	2b02      	cmp	r3, #2
 80169f6:	d102      	bne.n	80169fe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80169f8:	2301      	movs	r3, #1
 80169fa:	73fb      	strb	r3, [r7, #15]
 80169fc:	e001      	b.n	8016a02 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80169fe:	f7eb ff7f 	bl	8002900 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016a08:	7bfa      	ldrb	r2, [r7, #15]
 8016a0a:	4611      	mov	r1, r2
 8016a0c:	4618      	mov	r0, r3
 8016a0e:	f7fe fcaa 	bl	8015366 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016a18:	4618      	mov	r0, r3
 8016a1a:	f7fe fc52 	bl	80152c2 <USBD_LL_Reset>
}
 8016a1e:	bf00      	nop
 8016a20:	3710      	adds	r7, #16
 8016a22:	46bd      	mov	sp, r7
 8016a24:	bd80      	pop	{r7, pc}
	...

08016a28 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a28:	b580      	push	{r7, lr}
 8016a2a:	b082      	sub	sp, #8
 8016a2c:	af00      	add	r7, sp, #0
 8016a2e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016a36:	4618      	mov	r0, r3
 8016a38:	f7fe fca5 	bl	8015386 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	681b      	ldr	r3, [r3, #0]
 8016a40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016a44:	681b      	ldr	r3, [r3, #0]
 8016a46:	687a      	ldr	r2, [r7, #4]
 8016a48:	6812      	ldr	r2, [r2, #0]
 8016a4a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016a4e:	f043 0301 	orr.w	r3, r3, #1
 8016a52:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	6a1b      	ldr	r3, [r3, #32]
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	d005      	beq.n	8016a68 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016a5c:	4b04      	ldr	r3, [pc, #16]	; (8016a70 <HAL_PCD_SuspendCallback+0x48>)
 8016a5e:	691b      	ldr	r3, [r3, #16]
 8016a60:	4a03      	ldr	r2, [pc, #12]	; (8016a70 <HAL_PCD_SuspendCallback+0x48>)
 8016a62:	f043 0306 	orr.w	r3, r3, #6
 8016a66:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016a68:	bf00      	nop
 8016a6a:	3708      	adds	r7, #8
 8016a6c:	46bd      	mov	sp, r7
 8016a6e:	bd80      	pop	{r7, pc}
 8016a70:	e000ed00 	.word	0xe000ed00

08016a74 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a74:	b580      	push	{r7, lr}
 8016a76:	b082      	sub	sp, #8
 8016a78:	af00      	add	r7, sp, #0
 8016a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016a82:	4618      	mov	r0, r3
 8016a84:	f7fe fc9b 	bl	80153be <USBD_LL_Resume>
}
 8016a88:	bf00      	nop
 8016a8a:	3708      	adds	r7, #8
 8016a8c:	46bd      	mov	sp, r7
 8016a8e:	bd80      	pop	{r7, pc}

08016a90 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a90:	b580      	push	{r7, lr}
 8016a92:	b082      	sub	sp, #8
 8016a94:	af00      	add	r7, sp, #0
 8016a96:	6078      	str	r0, [r7, #4]
 8016a98:	460b      	mov	r3, r1
 8016a9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016aa2:	78fa      	ldrb	r2, [r7, #3]
 8016aa4:	4611      	mov	r1, r2
 8016aa6:	4618      	mov	r0, r3
 8016aa8:	f7fe fcf3 	bl	8015492 <USBD_LL_IsoOUTIncomplete>
}
 8016aac:	bf00      	nop
 8016aae:	3708      	adds	r7, #8
 8016ab0:	46bd      	mov	sp, r7
 8016ab2:	bd80      	pop	{r7, pc}

08016ab4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ab4:	b580      	push	{r7, lr}
 8016ab6:	b082      	sub	sp, #8
 8016ab8:	af00      	add	r7, sp, #0
 8016aba:	6078      	str	r0, [r7, #4]
 8016abc:	460b      	mov	r3, r1
 8016abe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016ac6:	78fa      	ldrb	r2, [r7, #3]
 8016ac8:	4611      	mov	r1, r2
 8016aca:	4618      	mov	r0, r3
 8016acc:	f7fe fcaf 	bl	801542e <USBD_LL_IsoINIncomplete>
}
 8016ad0:	bf00      	nop
 8016ad2:	3708      	adds	r7, #8
 8016ad4:	46bd      	mov	sp, r7
 8016ad6:	bd80      	pop	{r7, pc}

08016ad8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ad8:	b580      	push	{r7, lr}
 8016ada:	b082      	sub	sp, #8
 8016adc:	af00      	add	r7, sp, #0
 8016ade:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016ae6:	4618      	mov	r0, r3
 8016ae8:	f7fe fd05 	bl	80154f6 <USBD_LL_DevConnected>
}
 8016aec:	bf00      	nop
 8016aee:	3708      	adds	r7, #8
 8016af0:	46bd      	mov	sp, r7
 8016af2:	bd80      	pop	{r7, pc}

08016af4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016af4:	b580      	push	{r7, lr}
 8016af6:	b082      	sub	sp, #8
 8016af8:	af00      	add	r7, sp, #0
 8016afa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016b02:	4618      	mov	r0, r3
 8016b04:	f7fe fd02 	bl	801550c <USBD_LL_DevDisconnected>
}
 8016b08:	bf00      	nop
 8016b0a:	3708      	adds	r7, #8
 8016b0c:	46bd      	mov	sp, r7
 8016b0e:	bd80      	pop	{r7, pc}

08016b10 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016b10:	b580      	push	{r7, lr}
 8016b12:	b082      	sub	sp, #8
 8016b14:	af00      	add	r7, sp, #0
 8016b16:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	781b      	ldrb	r3, [r3, #0]
 8016b1c:	2b01      	cmp	r3, #1
 8016b1e:	d140      	bne.n	8016ba2 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8016b20:	4a22      	ldr	r2, [pc, #136]	; (8016bac <USBD_LL_Init+0x9c>)
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	4a20      	ldr	r2, [pc, #128]	; (8016bac <USBD_LL_Init+0x9c>)
 8016b2c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8016b30:	4b1e      	ldr	r3, [pc, #120]	; (8016bac <USBD_LL_Init+0x9c>)
 8016b32:	4a1f      	ldr	r2, [pc, #124]	; (8016bb0 <USBD_LL_Init+0xa0>)
 8016b34:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8016b36:	4b1d      	ldr	r3, [pc, #116]	; (8016bac <USBD_LL_Init+0x9c>)
 8016b38:	2209      	movs	r2, #9
 8016b3a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8016b3c:	4b1b      	ldr	r3, [pc, #108]	; (8016bac <USBD_LL_Init+0x9c>)
 8016b3e:	2202      	movs	r2, #2
 8016b40:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8016b42:	4b1a      	ldr	r3, [pc, #104]	; (8016bac <USBD_LL_Init+0x9c>)
 8016b44:	2200      	movs	r2, #0
 8016b46:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8016b48:	4b18      	ldr	r3, [pc, #96]	; (8016bac <USBD_LL_Init+0x9c>)
 8016b4a:	2202      	movs	r2, #2
 8016b4c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8016b4e:	4b17      	ldr	r3, [pc, #92]	; (8016bac <USBD_LL_Init+0x9c>)
 8016b50:	2200      	movs	r2, #0
 8016b52:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8016b54:	4b15      	ldr	r3, [pc, #84]	; (8016bac <USBD_LL_Init+0x9c>)
 8016b56:	2200      	movs	r2, #0
 8016b58:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8016b5a:	4b14      	ldr	r3, [pc, #80]	; (8016bac <USBD_LL_Init+0x9c>)
 8016b5c:	2200      	movs	r2, #0
 8016b5e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8016b60:	4b12      	ldr	r3, [pc, #72]	; (8016bac <USBD_LL_Init+0x9c>)
 8016b62:	2200      	movs	r2, #0
 8016b64:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8016b66:	4b11      	ldr	r3, [pc, #68]	; (8016bac <USBD_LL_Init+0x9c>)
 8016b68:	2200      	movs	r2, #0
 8016b6a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8016b6c:	4b0f      	ldr	r3, [pc, #60]	; (8016bac <USBD_LL_Init+0x9c>)
 8016b6e:	2200      	movs	r2, #0
 8016b70:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8016b72:	480e      	ldr	r0, [pc, #56]	; (8016bac <USBD_LL_Init+0x9c>)
 8016b74:	f7f1 fb21 	bl	80081ba <HAL_PCD_Init>
 8016b78:	4603      	mov	r3, r0
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d001      	beq.n	8016b82 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8016b7e:	f7eb febf 	bl	8002900 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8016b82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8016b86:	4809      	ldr	r0, [pc, #36]	; (8016bac <USBD_LL_Init+0x9c>)
 8016b88:	f7f2 fd8f 	bl	80096aa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8016b8c:	2280      	movs	r2, #128	; 0x80
 8016b8e:	2100      	movs	r1, #0
 8016b90:	4806      	ldr	r0, [pc, #24]	; (8016bac <USBD_LL_Init+0x9c>)
 8016b92:	f7f2 fd43 	bl	800961c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8016b96:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8016b9a:	2101      	movs	r1, #1
 8016b9c:	4803      	ldr	r0, [pc, #12]	; (8016bac <USBD_LL_Init+0x9c>)
 8016b9e:	f7f2 fd3d 	bl	800961c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8016ba2:	2300      	movs	r3, #0
}
 8016ba4:	4618      	mov	r0, r3
 8016ba6:	3708      	adds	r7, #8
 8016ba8:	46bd      	mov	sp, r7
 8016baa:	bd80      	pop	{r7, pc}
 8016bac:	24002980 	.word	0x24002980
 8016bb0:	40040000 	.word	0x40040000

08016bb4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016bb4:	b580      	push	{r7, lr}
 8016bb6:	b084      	sub	sp, #16
 8016bb8:	af00      	add	r7, sp, #0
 8016bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016bbc:	2300      	movs	r3, #0
 8016bbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016bc0:	2300      	movs	r3, #0
 8016bc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016bca:	4618      	mov	r0, r3
 8016bcc:	f7f1 fc19 	bl	8008402 <HAL_PCD_Start>
 8016bd0:	4603      	mov	r3, r0
 8016bd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016bd4:	7bfb      	ldrb	r3, [r7, #15]
 8016bd6:	4618      	mov	r0, r3
 8016bd8:	f000 f942 	bl	8016e60 <USBD_Get_USB_Status>
 8016bdc:	4603      	mov	r3, r0
 8016bde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016be0:	7bbb      	ldrb	r3, [r7, #14]
}
 8016be2:	4618      	mov	r0, r3
 8016be4:	3710      	adds	r7, #16
 8016be6:	46bd      	mov	sp, r7
 8016be8:	bd80      	pop	{r7, pc}

08016bea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016bea:	b580      	push	{r7, lr}
 8016bec:	b084      	sub	sp, #16
 8016bee:	af00      	add	r7, sp, #0
 8016bf0:	6078      	str	r0, [r7, #4]
 8016bf2:	4608      	mov	r0, r1
 8016bf4:	4611      	mov	r1, r2
 8016bf6:	461a      	mov	r2, r3
 8016bf8:	4603      	mov	r3, r0
 8016bfa:	70fb      	strb	r3, [r7, #3]
 8016bfc:	460b      	mov	r3, r1
 8016bfe:	70bb      	strb	r3, [r7, #2]
 8016c00:	4613      	mov	r3, r2
 8016c02:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c04:	2300      	movs	r3, #0
 8016c06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c08:	2300      	movs	r3, #0
 8016c0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016c12:	78bb      	ldrb	r3, [r7, #2]
 8016c14:	883a      	ldrh	r2, [r7, #0]
 8016c16:	78f9      	ldrb	r1, [r7, #3]
 8016c18:	f7f2 f919 	bl	8008e4e <HAL_PCD_EP_Open>
 8016c1c:	4603      	mov	r3, r0
 8016c1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c20:	7bfb      	ldrb	r3, [r7, #15]
 8016c22:	4618      	mov	r0, r3
 8016c24:	f000 f91c 	bl	8016e60 <USBD_Get_USB_Status>
 8016c28:	4603      	mov	r3, r0
 8016c2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016c2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8016c2e:	4618      	mov	r0, r3
 8016c30:	3710      	adds	r7, #16
 8016c32:	46bd      	mov	sp, r7
 8016c34:	bd80      	pop	{r7, pc}

08016c36 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016c36:	b580      	push	{r7, lr}
 8016c38:	b084      	sub	sp, #16
 8016c3a:	af00      	add	r7, sp, #0
 8016c3c:	6078      	str	r0, [r7, #4]
 8016c3e:	460b      	mov	r3, r1
 8016c40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c42:	2300      	movs	r3, #0
 8016c44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c46:	2300      	movs	r3, #0
 8016c48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016c50:	78fa      	ldrb	r2, [r7, #3]
 8016c52:	4611      	mov	r1, r2
 8016c54:	4618      	mov	r0, r3
 8016c56:	f7f2 f962 	bl	8008f1e <HAL_PCD_EP_Close>
 8016c5a:	4603      	mov	r3, r0
 8016c5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c5e:	7bfb      	ldrb	r3, [r7, #15]
 8016c60:	4618      	mov	r0, r3
 8016c62:	f000 f8fd 	bl	8016e60 <USBD_Get_USB_Status>
 8016c66:	4603      	mov	r3, r0
 8016c68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016c6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8016c6c:	4618      	mov	r0, r3
 8016c6e:	3710      	adds	r7, #16
 8016c70:	46bd      	mov	sp, r7
 8016c72:	bd80      	pop	{r7, pc}

08016c74 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016c74:	b580      	push	{r7, lr}
 8016c76:	b084      	sub	sp, #16
 8016c78:	af00      	add	r7, sp, #0
 8016c7a:	6078      	str	r0, [r7, #4]
 8016c7c:	460b      	mov	r3, r1
 8016c7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c80:	2300      	movs	r3, #0
 8016c82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c84:	2300      	movs	r3, #0
 8016c86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016c8e:	78fa      	ldrb	r2, [r7, #3]
 8016c90:	4611      	mov	r1, r2
 8016c92:	4618      	mov	r0, r3
 8016c94:	f7f2 fa1c 	bl	80090d0 <HAL_PCD_EP_SetStall>
 8016c98:	4603      	mov	r3, r0
 8016c9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c9c:	7bfb      	ldrb	r3, [r7, #15]
 8016c9e:	4618      	mov	r0, r3
 8016ca0:	f000 f8de 	bl	8016e60 <USBD_Get_USB_Status>
 8016ca4:	4603      	mov	r3, r0
 8016ca6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016ca8:	7bbb      	ldrb	r3, [r7, #14]
}
 8016caa:	4618      	mov	r0, r3
 8016cac:	3710      	adds	r7, #16
 8016cae:	46bd      	mov	sp, r7
 8016cb0:	bd80      	pop	{r7, pc}

08016cb2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016cb2:	b580      	push	{r7, lr}
 8016cb4:	b084      	sub	sp, #16
 8016cb6:	af00      	add	r7, sp, #0
 8016cb8:	6078      	str	r0, [r7, #4]
 8016cba:	460b      	mov	r3, r1
 8016cbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016cbe:	2300      	movs	r3, #0
 8016cc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016cc2:	2300      	movs	r3, #0
 8016cc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016ccc:	78fa      	ldrb	r2, [r7, #3]
 8016cce:	4611      	mov	r1, r2
 8016cd0:	4618      	mov	r0, r3
 8016cd2:	f7f2 fa61 	bl	8009198 <HAL_PCD_EP_ClrStall>
 8016cd6:	4603      	mov	r3, r0
 8016cd8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016cda:	7bfb      	ldrb	r3, [r7, #15]
 8016cdc:	4618      	mov	r0, r3
 8016cde:	f000 f8bf 	bl	8016e60 <USBD_Get_USB_Status>
 8016ce2:	4603      	mov	r3, r0
 8016ce4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016ce6:	7bbb      	ldrb	r3, [r7, #14]
}
 8016ce8:	4618      	mov	r0, r3
 8016cea:	3710      	adds	r7, #16
 8016cec:	46bd      	mov	sp, r7
 8016cee:	bd80      	pop	{r7, pc}

08016cf0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016cf0:	b480      	push	{r7}
 8016cf2:	b085      	sub	sp, #20
 8016cf4:	af00      	add	r7, sp, #0
 8016cf6:	6078      	str	r0, [r7, #4]
 8016cf8:	460b      	mov	r3, r1
 8016cfa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016d02:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016d04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	da0b      	bge.n	8016d24 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016d0c:	78fb      	ldrb	r3, [r7, #3]
 8016d0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016d12:	68f9      	ldr	r1, [r7, #12]
 8016d14:	4613      	mov	r3, r2
 8016d16:	00db      	lsls	r3, r3, #3
 8016d18:	4413      	add	r3, r2
 8016d1a:	009b      	lsls	r3, r3, #2
 8016d1c:	440b      	add	r3, r1
 8016d1e:	333e      	adds	r3, #62	; 0x3e
 8016d20:	781b      	ldrb	r3, [r3, #0]
 8016d22:	e00b      	b.n	8016d3c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016d24:	78fb      	ldrb	r3, [r7, #3]
 8016d26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016d2a:	68f9      	ldr	r1, [r7, #12]
 8016d2c:	4613      	mov	r3, r2
 8016d2e:	00db      	lsls	r3, r3, #3
 8016d30:	4413      	add	r3, r2
 8016d32:	009b      	lsls	r3, r3, #2
 8016d34:	440b      	add	r3, r1
 8016d36:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8016d3a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016d3c:	4618      	mov	r0, r3
 8016d3e:	3714      	adds	r7, #20
 8016d40:	46bd      	mov	sp, r7
 8016d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d46:	4770      	bx	lr

08016d48 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016d48:	b580      	push	{r7, lr}
 8016d4a:	b084      	sub	sp, #16
 8016d4c:	af00      	add	r7, sp, #0
 8016d4e:	6078      	str	r0, [r7, #4]
 8016d50:	460b      	mov	r3, r1
 8016d52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d54:	2300      	movs	r3, #0
 8016d56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d58:	2300      	movs	r3, #0
 8016d5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016d62:	78fa      	ldrb	r2, [r7, #3]
 8016d64:	4611      	mov	r1, r2
 8016d66:	4618      	mov	r0, r3
 8016d68:	f7f2 f84c 	bl	8008e04 <HAL_PCD_SetAddress>
 8016d6c:	4603      	mov	r3, r0
 8016d6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d70:	7bfb      	ldrb	r3, [r7, #15]
 8016d72:	4618      	mov	r0, r3
 8016d74:	f000 f874 	bl	8016e60 <USBD_Get_USB_Status>
 8016d78:	4603      	mov	r3, r0
 8016d7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016d7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8016d7e:	4618      	mov	r0, r3
 8016d80:	3710      	adds	r7, #16
 8016d82:	46bd      	mov	sp, r7
 8016d84:	bd80      	pop	{r7, pc}

08016d86 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016d86:	b580      	push	{r7, lr}
 8016d88:	b086      	sub	sp, #24
 8016d8a:	af00      	add	r7, sp, #0
 8016d8c:	60f8      	str	r0, [r7, #12]
 8016d8e:	607a      	str	r2, [r7, #4]
 8016d90:	603b      	str	r3, [r7, #0]
 8016d92:	460b      	mov	r3, r1
 8016d94:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d96:	2300      	movs	r3, #0
 8016d98:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d9a:	2300      	movs	r3, #0
 8016d9c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016d9e:	68fb      	ldr	r3, [r7, #12]
 8016da0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016da4:	7af9      	ldrb	r1, [r7, #11]
 8016da6:	683b      	ldr	r3, [r7, #0]
 8016da8:	687a      	ldr	r2, [r7, #4]
 8016daa:	f7f2 f956 	bl	800905a <HAL_PCD_EP_Transmit>
 8016dae:	4603      	mov	r3, r0
 8016db0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016db2:	7dfb      	ldrb	r3, [r7, #23]
 8016db4:	4618      	mov	r0, r3
 8016db6:	f000 f853 	bl	8016e60 <USBD_Get_USB_Status>
 8016dba:	4603      	mov	r3, r0
 8016dbc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016dbe:	7dbb      	ldrb	r3, [r7, #22]
}
 8016dc0:	4618      	mov	r0, r3
 8016dc2:	3718      	adds	r7, #24
 8016dc4:	46bd      	mov	sp, r7
 8016dc6:	bd80      	pop	{r7, pc}

08016dc8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016dc8:	b580      	push	{r7, lr}
 8016dca:	b086      	sub	sp, #24
 8016dcc:	af00      	add	r7, sp, #0
 8016dce:	60f8      	str	r0, [r7, #12]
 8016dd0:	607a      	str	r2, [r7, #4]
 8016dd2:	603b      	str	r3, [r7, #0]
 8016dd4:	460b      	mov	r3, r1
 8016dd6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016dd8:	2300      	movs	r3, #0
 8016dda:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ddc:	2300      	movs	r3, #0
 8016dde:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016de0:	68fb      	ldr	r3, [r7, #12]
 8016de2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016de6:	7af9      	ldrb	r1, [r7, #11]
 8016de8:	683b      	ldr	r3, [r7, #0]
 8016dea:	687a      	ldr	r2, [r7, #4]
 8016dec:	f7f2 f8e1 	bl	8008fb2 <HAL_PCD_EP_Receive>
 8016df0:	4603      	mov	r3, r0
 8016df2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016df4:	7dfb      	ldrb	r3, [r7, #23]
 8016df6:	4618      	mov	r0, r3
 8016df8:	f000 f832 	bl	8016e60 <USBD_Get_USB_Status>
 8016dfc:	4603      	mov	r3, r0
 8016dfe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016e00:	7dbb      	ldrb	r3, [r7, #22]
}
 8016e02:	4618      	mov	r0, r3
 8016e04:	3718      	adds	r7, #24
 8016e06:	46bd      	mov	sp, r7
 8016e08:	bd80      	pop	{r7, pc}

08016e0a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016e0a:	b580      	push	{r7, lr}
 8016e0c:	b082      	sub	sp, #8
 8016e0e:	af00      	add	r7, sp, #0
 8016e10:	6078      	str	r0, [r7, #4]
 8016e12:	460b      	mov	r3, r1
 8016e14:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016e1c:	78fa      	ldrb	r2, [r7, #3]
 8016e1e:	4611      	mov	r1, r2
 8016e20:	4618      	mov	r0, r3
 8016e22:	f7f2 f902 	bl	800902a <HAL_PCD_EP_GetRxCount>
 8016e26:	4603      	mov	r3, r0
}
 8016e28:	4618      	mov	r0, r3
 8016e2a:	3708      	adds	r7, #8
 8016e2c:	46bd      	mov	sp, r7
 8016e2e:	bd80      	pop	{r7, pc}

08016e30 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016e30:	b480      	push	{r7}
 8016e32:	b083      	sub	sp, #12
 8016e34:	af00      	add	r7, sp, #0
 8016e36:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016e38:	4b03      	ldr	r3, [pc, #12]	; (8016e48 <USBD_static_malloc+0x18>)
}
 8016e3a:	4618      	mov	r0, r3
 8016e3c:	370c      	adds	r7, #12
 8016e3e:	46bd      	mov	sp, r7
 8016e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e44:	4770      	bx	lr
 8016e46:	bf00      	nop
 8016e48:	24002e8c 	.word	0x24002e8c

08016e4c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016e4c:	b480      	push	{r7}
 8016e4e:	b083      	sub	sp, #12
 8016e50:	af00      	add	r7, sp, #0
 8016e52:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8016e54:	bf00      	nop
 8016e56:	370c      	adds	r7, #12
 8016e58:	46bd      	mov	sp, r7
 8016e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e5e:	4770      	bx	lr

08016e60 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016e60:	b480      	push	{r7}
 8016e62:	b085      	sub	sp, #20
 8016e64:	af00      	add	r7, sp, #0
 8016e66:	4603      	mov	r3, r0
 8016e68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e6a:	2300      	movs	r3, #0
 8016e6c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016e6e:	79fb      	ldrb	r3, [r7, #7]
 8016e70:	2b03      	cmp	r3, #3
 8016e72:	d817      	bhi.n	8016ea4 <USBD_Get_USB_Status+0x44>
 8016e74:	a201      	add	r2, pc, #4	; (adr r2, 8016e7c <USBD_Get_USB_Status+0x1c>)
 8016e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e7a:	bf00      	nop
 8016e7c:	08016e8d 	.word	0x08016e8d
 8016e80:	08016e93 	.word	0x08016e93
 8016e84:	08016e99 	.word	0x08016e99
 8016e88:	08016e9f 	.word	0x08016e9f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016e8c:	2300      	movs	r3, #0
 8016e8e:	73fb      	strb	r3, [r7, #15]
    break;
 8016e90:	e00b      	b.n	8016eaa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016e92:	2303      	movs	r3, #3
 8016e94:	73fb      	strb	r3, [r7, #15]
    break;
 8016e96:	e008      	b.n	8016eaa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016e98:	2301      	movs	r3, #1
 8016e9a:	73fb      	strb	r3, [r7, #15]
    break;
 8016e9c:	e005      	b.n	8016eaa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016e9e:	2303      	movs	r3, #3
 8016ea0:	73fb      	strb	r3, [r7, #15]
    break;
 8016ea2:	e002      	b.n	8016eaa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016ea4:	2303      	movs	r3, #3
 8016ea6:	73fb      	strb	r3, [r7, #15]
    break;
 8016ea8:	bf00      	nop
  }
  return usb_status;
 8016eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8016eac:	4618      	mov	r0, r3
 8016eae:	3714      	adds	r7, #20
 8016eb0:	46bd      	mov	sp, r7
 8016eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eb6:	4770      	bx	lr

08016eb8 <siprintf>:
 8016eb8:	b40e      	push	{r1, r2, r3}
 8016eba:	b500      	push	{lr}
 8016ebc:	b09c      	sub	sp, #112	; 0x70
 8016ebe:	ab1d      	add	r3, sp, #116	; 0x74
 8016ec0:	9002      	str	r0, [sp, #8]
 8016ec2:	9006      	str	r0, [sp, #24]
 8016ec4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016ec8:	4809      	ldr	r0, [pc, #36]	; (8016ef0 <siprintf+0x38>)
 8016eca:	9107      	str	r1, [sp, #28]
 8016ecc:	9104      	str	r1, [sp, #16]
 8016ece:	4909      	ldr	r1, [pc, #36]	; (8016ef4 <siprintf+0x3c>)
 8016ed0:	f853 2b04 	ldr.w	r2, [r3], #4
 8016ed4:	9105      	str	r1, [sp, #20]
 8016ed6:	6800      	ldr	r0, [r0, #0]
 8016ed8:	9301      	str	r3, [sp, #4]
 8016eda:	a902      	add	r1, sp, #8
 8016edc:	f000 f9a8 	bl	8017230 <_svfiprintf_r>
 8016ee0:	9b02      	ldr	r3, [sp, #8]
 8016ee2:	2200      	movs	r2, #0
 8016ee4:	701a      	strb	r2, [r3, #0]
 8016ee6:	b01c      	add	sp, #112	; 0x70
 8016ee8:	f85d eb04 	ldr.w	lr, [sp], #4
 8016eec:	b003      	add	sp, #12
 8016eee:	4770      	bx	lr
 8016ef0:	2400014c 	.word	0x2400014c
 8016ef4:	ffff0208 	.word	0xffff0208

08016ef8 <memset>:
 8016ef8:	4402      	add	r2, r0
 8016efa:	4603      	mov	r3, r0
 8016efc:	4293      	cmp	r3, r2
 8016efe:	d100      	bne.n	8016f02 <memset+0xa>
 8016f00:	4770      	bx	lr
 8016f02:	f803 1b01 	strb.w	r1, [r3], #1
 8016f06:	e7f9      	b.n	8016efc <memset+0x4>

08016f08 <__errno>:
 8016f08:	4b01      	ldr	r3, [pc, #4]	; (8016f10 <__errno+0x8>)
 8016f0a:	6818      	ldr	r0, [r3, #0]
 8016f0c:	4770      	bx	lr
 8016f0e:	bf00      	nop
 8016f10:	2400014c 	.word	0x2400014c

08016f14 <__libc_init_array>:
 8016f14:	b570      	push	{r4, r5, r6, lr}
 8016f16:	4d0d      	ldr	r5, [pc, #52]	; (8016f4c <__libc_init_array+0x38>)
 8016f18:	4c0d      	ldr	r4, [pc, #52]	; (8016f50 <__libc_init_array+0x3c>)
 8016f1a:	1b64      	subs	r4, r4, r5
 8016f1c:	10a4      	asrs	r4, r4, #2
 8016f1e:	2600      	movs	r6, #0
 8016f20:	42a6      	cmp	r6, r4
 8016f22:	d109      	bne.n	8016f38 <__libc_init_array+0x24>
 8016f24:	4d0b      	ldr	r5, [pc, #44]	; (8016f54 <__libc_init_array+0x40>)
 8016f26:	4c0c      	ldr	r4, [pc, #48]	; (8016f58 <__libc_init_array+0x44>)
 8016f28:	f000 fc72 	bl	8017810 <_init>
 8016f2c:	1b64      	subs	r4, r4, r5
 8016f2e:	10a4      	asrs	r4, r4, #2
 8016f30:	2600      	movs	r6, #0
 8016f32:	42a6      	cmp	r6, r4
 8016f34:	d105      	bne.n	8016f42 <__libc_init_array+0x2e>
 8016f36:	bd70      	pop	{r4, r5, r6, pc}
 8016f38:	f855 3b04 	ldr.w	r3, [r5], #4
 8016f3c:	4798      	blx	r3
 8016f3e:	3601      	adds	r6, #1
 8016f40:	e7ee      	b.n	8016f20 <__libc_init_array+0xc>
 8016f42:	f855 3b04 	ldr.w	r3, [r5], #4
 8016f46:	4798      	blx	r3
 8016f48:	3601      	adds	r6, #1
 8016f4a:	e7f2      	b.n	8016f32 <__libc_init_array+0x1e>
 8016f4c:	08017b30 	.word	0x08017b30
 8016f50:	08017b30 	.word	0x08017b30
 8016f54:	08017b30 	.word	0x08017b30
 8016f58:	08017b34 	.word	0x08017b34

08016f5c <__retarget_lock_acquire_recursive>:
 8016f5c:	4770      	bx	lr

08016f5e <__retarget_lock_release_recursive>:
 8016f5e:	4770      	bx	lr

08016f60 <strcpy>:
 8016f60:	4603      	mov	r3, r0
 8016f62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016f66:	f803 2b01 	strb.w	r2, [r3], #1
 8016f6a:	2a00      	cmp	r2, #0
 8016f6c:	d1f9      	bne.n	8016f62 <strcpy+0x2>
 8016f6e:	4770      	bx	lr

08016f70 <memcpy>:
 8016f70:	440a      	add	r2, r1
 8016f72:	4291      	cmp	r1, r2
 8016f74:	f100 33ff 	add.w	r3, r0, #4294967295
 8016f78:	d100      	bne.n	8016f7c <memcpy+0xc>
 8016f7a:	4770      	bx	lr
 8016f7c:	b510      	push	{r4, lr}
 8016f7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016f82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016f86:	4291      	cmp	r1, r2
 8016f88:	d1f9      	bne.n	8016f7e <memcpy+0xe>
 8016f8a:	bd10      	pop	{r4, pc}

08016f8c <_free_r>:
 8016f8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016f8e:	2900      	cmp	r1, #0
 8016f90:	d044      	beq.n	801701c <_free_r+0x90>
 8016f92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016f96:	9001      	str	r0, [sp, #4]
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	f1a1 0404 	sub.w	r4, r1, #4
 8016f9e:	bfb8      	it	lt
 8016fa0:	18e4      	addlt	r4, r4, r3
 8016fa2:	f000 f8df 	bl	8017164 <__malloc_lock>
 8016fa6:	4a1e      	ldr	r2, [pc, #120]	; (8017020 <_free_r+0x94>)
 8016fa8:	9801      	ldr	r0, [sp, #4]
 8016faa:	6813      	ldr	r3, [r2, #0]
 8016fac:	b933      	cbnz	r3, 8016fbc <_free_r+0x30>
 8016fae:	6063      	str	r3, [r4, #4]
 8016fb0:	6014      	str	r4, [r2, #0]
 8016fb2:	b003      	add	sp, #12
 8016fb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016fb8:	f000 b8da 	b.w	8017170 <__malloc_unlock>
 8016fbc:	42a3      	cmp	r3, r4
 8016fbe:	d908      	bls.n	8016fd2 <_free_r+0x46>
 8016fc0:	6825      	ldr	r5, [r4, #0]
 8016fc2:	1961      	adds	r1, r4, r5
 8016fc4:	428b      	cmp	r3, r1
 8016fc6:	bf01      	itttt	eq
 8016fc8:	6819      	ldreq	r1, [r3, #0]
 8016fca:	685b      	ldreq	r3, [r3, #4]
 8016fcc:	1949      	addeq	r1, r1, r5
 8016fce:	6021      	streq	r1, [r4, #0]
 8016fd0:	e7ed      	b.n	8016fae <_free_r+0x22>
 8016fd2:	461a      	mov	r2, r3
 8016fd4:	685b      	ldr	r3, [r3, #4]
 8016fd6:	b10b      	cbz	r3, 8016fdc <_free_r+0x50>
 8016fd8:	42a3      	cmp	r3, r4
 8016fda:	d9fa      	bls.n	8016fd2 <_free_r+0x46>
 8016fdc:	6811      	ldr	r1, [r2, #0]
 8016fde:	1855      	adds	r5, r2, r1
 8016fe0:	42a5      	cmp	r5, r4
 8016fe2:	d10b      	bne.n	8016ffc <_free_r+0x70>
 8016fe4:	6824      	ldr	r4, [r4, #0]
 8016fe6:	4421      	add	r1, r4
 8016fe8:	1854      	adds	r4, r2, r1
 8016fea:	42a3      	cmp	r3, r4
 8016fec:	6011      	str	r1, [r2, #0]
 8016fee:	d1e0      	bne.n	8016fb2 <_free_r+0x26>
 8016ff0:	681c      	ldr	r4, [r3, #0]
 8016ff2:	685b      	ldr	r3, [r3, #4]
 8016ff4:	6053      	str	r3, [r2, #4]
 8016ff6:	440c      	add	r4, r1
 8016ff8:	6014      	str	r4, [r2, #0]
 8016ffa:	e7da      	b.n	8016fb2 <_free_r+0x26>
 8016ffc:	d902      	bls.n	8017004 <_free_r+0x78>
 8016ffe:	230c      	movs	r3, #12
 8017000:	6003      	str	r3, [r0, #0]
 8017002:	e7d6      	b.n	8016fb2 <_free_r+0x26>
 8017004:	6825      	ldr	r5, [r4, #0]
 8017006:	1961      	adds	r1, r4, r5
 8017008:	428b      	cmp	r3, r1
 801700a:	bf04      	itt	eq
 801700c:	6819      	ldreq	r1, [r3, #0]
 801700e:	685b      	ldreq	r3, [r3, #4]
 8017010:	6063      	str	r3, [r4, #4]
 8017012:	bf04      	itt	eq
 8017014:	1949      	addeq	r1, r1, r5
 8017016:	6021      	streq	r1, [r4, #0]
 8017018:	6054      	str	r4, [r2, #4]
 801701a:	e7ca      	b.n	8016fb2 <_free_r+0x26>
 801701c:	b003      	add	sp, #12
 801701e:	bd30      	pop	{r4, r5, pc}
 8017020:	240031ec 	.word	0x240031ec

08017024 <sbrk_aligned>:
 8017024:	b570      	push	{r4, r5, r6, lr}
 8017026:	4e0e      	ldr	r6, [pc, #56]	; (8017060 <sbrk_aligned+0x3c>)
 8017028:	460c      	mov	r4, r1
 801702a:	6831      	ldr	r1, [r6, #0]
 801702c:	4605      	mov	r5, r0
 801702e:	b911      	cbnz	r1, 8017036 <sbrk_aligned+0x12>
 8017030:	f000 fba6 	bl	8017780 <_sbrk_r>
 8017034:	6030      	str	r0, [r6, #0]
 8017036:	4621      	mov	r1, r4
 8017038:	4628      	mov	r0, r5
 801703a:	f000 fba1 	bl	8017780 <_sbrk_r>
 801703e:	1c43      	adds	r3, r0, #1
 8017040:	d00a      	beq.n	8017058 <sbrk_aligned+0x34>
 8017042:	1cc4      	adds	r4, r0, #3
 8017044:	f024 0403 	bic.w	r4, r4, #3
 8017048:	42a0      	cmp	r0, r4
 801704a:	d007      	beq.n	801705c <sbrk_aligned+0x38>
 801704c:	1a21      	subs	r1, r4, r0
 801704e:	4628      	mov	r0, r5
 8017050:	f000 fb96 	bl	8017780 <_sbrk_r>
 8017054:	3001      	adds	r0, #1
 8017056:	d101      	bne.n	801705c <sbrk_aligned+0x38>
 8017058:	f04f 34ff 	mov.w	r4, #4294967295
 801705c:	4620      	mov	r0, r4
 801705e:	bd70      	pop	{r4, r5, r6, pc}
 8017060:	240031f0 	.word	0x240031f0

08017064 <_malloc_r>:
 8017064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017068:	1ccd      	adds	r5, r1, #3
 801706a:	f025 0503 	bic.w	r5, r5, #3
 801706e:	3508      	adds	r5, #8
 8017070:	2d0c      	cmp	r5, #12
 8017072:	bf38      	it	cc
 8017074:	250c      	movcc	r5, #12
 8017076:	2d00      	cmp	r5, #0
 8017078:	4607      	mov	r7, r0
 801707a:	db01      	blt.n	8017080 <_malloc_r+0x1c>
 801707c:	42a9      	cmp	r1, r5
 801707e:	d905      	bls.n	801708c <_malloc_r+0x28>
 8017080:	230c      	movs	r3, #12
 8017082:	603b      	str	r3, [r7, #0]
 8017084:	2600      	movs	r6, #0
 8017086:	4630      	mov	r0, r6
 8017088:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801708c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017160 <_malloc_r+0xfc>
 8017090:	f000 f868 	bl	8017164 <__malloc_lock>
 8017094:	f8d8 3000 	ldr.w	r3, [r8]
 8017098:	461c      	mov	r4, r3
 801709a:	bb5c      	cbnz	r4, 80170f4 <_malloc_r+0x90>
 801709c:	4629      	mov	r1, r5
 801709e:	4638      	mov	r0, r7
 80170a0:	f7ff ffc0 	bl	8017024 <sbrk_aligned>
 80170a4:	1c43      	adds	r3, r0, #1
 80170a6:	4604      	mov	r4, r0
 80170a8:	d155      	bne.n	8017156 <_malloc_r+0xf2>
 80170aa:	f8d8 4000 	ldr.w	r4, [r8]
 80170ae:	4626      	mov	r6, r4
 80170b0:	2e00      	cmp	r6, #0
 80170b2:	d145      	bne.n	8017140 <_malloc_r+0xdc>
 80170b4:	2c00      	cmp	r4, #0
 80170b6:	d048      	beq.n	801714a <_malloc_r+0xe6>
 80170b8:	6823      	ldr	r3, [r4, #0]
 80170ba:	4631      	mov	r1, r6
 80170bc:	4638      	mov	r0, r7
 80170be:	eb04 0903 	add.w	r9, r4, r3
 80170c2:	f000 fb5d 	bl	8017780 <_sbrk_r>
 80170c6:	4581      	cmp	r9, r0
 80170c8:	d13f      	bne.n	801714a <_malloc_r+0xe6>
 80170ca:	6821      	ldr	r1, [r4, #0]
 80170cc:	1a6d      	subs	r5, r5, r1
 80170ce:	4629      	mov	r1, r5
 80170d0:	4638      	mov	r0, r7
 80170d2:	f7ff ffa7 	bl	8017024 <sbrk_aligned>
 80170d6:	3001      	adds	r0, #1
 80170d8:	d037      	beq.n	801714a <_malloc_r+0xe6>
 80170da:	6823      	ldr	r3, [r4, #0]
 80170dc:	442b      	add	r3, r5
 80170de:	6023      	str	r3, [r4, #0]
 80170e0:	f8d8 3000 	ldr.w	r3, [r8]
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d038      	beq.n	801715a <_malloc_r+0xf6>
 80170e8:	685a      	ldr	r2, [r3, #4]
 80170ea:	42a2      	cmp	r2, r4
 80170ec:	d12b      	bne.n	8017146 <_malloc_r+0xe2>
 80170ee:	2200      	movs	r2, #0
 80170f0:	605a      	str	r2, [r3, #4]
 80170f2:	e00f      	b.n	8017114 <_malloc_r+0xb0>
 80170f4:	6822      	ldr	r2, [r4, #0]
 80170f6:	1b52      	subs	r2, r2, r5
 80170f8:	d41f      	bmi.n	801713a <_malloc_r+0xd6>
 80170fa:	2a0b      	cmp	r2, #11
 80170fc:	d917      	bls.n	801712e <_malloc_r+0xca>
 80170fe:	1961      	adds	r1, r4, r5
 8017100:	42a3      	cmp	r3, r4
 8017102:	6025      	str	r5, [r4, #0]
 8017104:	bf18      	it	ne
 8017106:	6059      	strne	r1, [r3, #4]
 8017108:	6863      	ldr	r3, [r4, #4]
 801710a:	bf08      	it	eq
 801710c:	f8c8 1000 	streq.w	r1, [r8]
 8017110:	5162      	str	r2, [r4, r5]
 8017112:	604b      	str	r3, [r1, #4]
 8017114:	4638      	mov	r0, r7
 8017116:	f104 060b 	add.w	r6, r4, #11
 801711a:	f000 f829 	bl	8017170 <__malloc_unlock>
 801711e:	f026 0607 	bic.w	r6, r6, #7
 8017122:	1d23      	adds	r3, r4, #4
 8017124:	1af2      	subs	r2, r6, r3
 8017126:	d0ae      	beq.n	8017086 <_malloc_r+0x22>
 8017128:	1b9b      	subs	r3, r3, r6
 801712a:	50a3      	str	r3, [r4, r2]
 801712c:	e7ab      	b.n	8017086 <_malloc_r+0x22>
 801712e:	42a3      	cmp	r3, r4
 8017130:	6862      	ldr	r2, [r4, #4]
 8017132:	d1dd      	bne.n	80170f0 <_malloc_r+0x8c>
 8017134:	f8c8 2000 	str.w	r2, [r8]
 8017138:	e7ec      	b.n	8017114 <_malloc_r+0xb0>
 801713a:	4623      	mov	r3, r4
 801713c:	6864      	ldr	r4, [r4, #4]
 801713e:	e7ac      	b.n	801709a <_malloc_r+0x36>
 8017140:	4634      	mov	r4, r6
 8017142:	6876      	ldr	r6, [r6, #4]
 8017144:	e7b4      	b.n	80170b0 <_malloc_r+0x4c>
 8017146:	4613      	mov	r3, r2
 8017148:	e7cc      	b.n	80170e4 <_malloc_r+0x80>
 801714a:	230c      	movs	r3, #12
 801714c:	603b      	str	r3, [r7, #0]
 801714e:	4638      	mov	r0, r7
 8017150:	f000 f80e 	bl	8017170 <__malloc_unlock>
 8017154:	e797      	b.n	8017086 <_malloc_r+0x22>
 8017156:	6025      	str	r5, [r4, #0]
 8017158:	e7dc      	b.n	8017114 <_malloc_r+0xb0>
 801715a:	605b      	str	r3, [r3, #4]
 801715c:	deff      	udf	#255	; 0xff
 801715e:	bf00      	nop
 8017160:	240031ec 	.word	0x240031ec

08017164 <__malloc_lock>:
 8017164:	4801      	ldr	r0, [pc, #4]	; (801716c <__malloc_lock+0x8>)
 8017166:	f7ff bef9 	b.w	8016f5c <__retarget_lock_acquire_recursive>
 801716a:	bf00      	nop
 801716c:	240031e8 	.word	0x240031e8

08017170 <__malloc_unlock>:
 8017170:	4801      	ldr	r0, [pc, #4]	; (8017178 <__malloc_unlock+0x8>)
 8017172:	f7ff bef4 	b.w	8016f5e <__retarget_lock_release_recursive>
 8017176:	bf00      	nop
 8017178:	240031e8 	.word	0x240031e8

0801717c <__ssputs_r>:
 801717c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017180:	688e      	ldr	r6, [r1, #8]
 8017182:	461f      	mov	r7, r3
 8017184:	42be      	cmp	r6, r7
 8017186:	680b      	ldr	r3, [r1, #0]
 8017188:	4682      	mov	sl, r0
 801718a:	460c      	mov	r4, r1
 801718c:	4690      	mov	r8, r2
 801718e:	d82c      	bhi.n	80171ea <__ssputs_r+0x6e>
 8017190:	898a      	ldrh	r2, [r1, #12]
 8017192:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017196:	d026      	beq.n	80171e6 <__ssputs_r+0x6a>
 8017198:	6965      	ldr	r5, [r4, #20]
 801719a:	6909      	ldr	r1, [r1, #16]
 801719c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80171a0:	eba3 0901 	sub.w	r9, r3, r1
 80171a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80171a8:	1c7b      	adds	r3, r7, #1
 80171aa:	444b      	add	r3, r9
 80171ac:	106d      	asrs	r5, r5, #1
 80171ae:	429d      	cmp	r5, r3
 80171b0:	bf38      	it	cc
 80171b2:	461d      	movcc	r5, r3
 80171b4:	0553      	lsls	r3, r2, #21
 80171b6:	d527      	bpl.n	8017208 <__ssputs_r+0x8c>
 80171b8:	4629      	mov	r1, r5
 80171ba:	f7ff ff53 	bl	8017064 <_malloc_r>
 80171be:	4606      	mov	r6, r0
 80171c0:	b360      	cbz	r0, 801721c <__ssputs_r+0xa0>
 80171c2:	6921      	ldr	r1, [r4, #16]
 80171c4:	464a      	mov	r2, r9
 80171c6:	f7ff fed3 	bl	8016f70 <memcpy>
 80171ca:	89a3      	ldrh	r3, [r4, #12]
 80171cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80171d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80171d4:	81a3      	strh	r3, [r4, #12]
 80171d6:	6126      	str	r6, [r4, #16]
 80171d8:	6165      	str	r5, [r4, #20]
 80171da:	444e      	add	r6, r9
 80171dc:	eba5 0509 	sub.w	r5, r5, r9
 80171e0:	6026      	str	r6, [r4, #0]
 80171e2:	60a5      	str	r5, [r4, #8]
 80171e4:	463e      	mov	r6, r7
 80171e6:	42be      	cmp	r6, r7
 80171e8:	d900      	bls.n	80171ec <__ssputs_r+0x70>
 80171ea:	463e      	mov	r6, r7
 80171ec:	6820      	ldr	r0, [r4, #0]
 80171ee:	4632      	mov	r2, r6
 80171f0:	4641      	mov	r1, r8
 80171f2:	f000 faab 	bl	801774c <memmove>
 80171f6:	68a3      	ldr	r3, [r4, #8]
 80171f8:	1b9b      	subs	r3, r3, r6
 80171fa:	60a3      	str	r3, [r4, #8]
 80171fc:	6823      	ldr	r3, [r4, #0]
 80171fe:	4433      	add	r3, r6
 8017200:	6023      	str	r3, [r4, #0]
 8017202:	2000      	movs	r0, #0
 8017204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017208:	462a      	mov	r2, r5
 801720a:	f000 fac9 	bl	80177a0 <_realloc_r>
 801720e:	4606      	mov	r6, r0
 8017210:	2800      	cmp	r0, #0
 8017212:	d1e0      	bne.n	80171d6 <__ssputs_r+0x5a>
 8017214:	6921      	ldr	r1, [r4, #16]
 8017216:	4650      	mov	r0, sl
 8017218:	f7ff feb8 	bl	8016f8c <_free_r>
 801721c:	230c      	movs	r3, #12
 801721e:	f8ca 3000 	str.w	r3, [sl]
 8017222:	89a3      	ldrh	r3, [r4, #12]
 8017224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017228:	81a3      	strh	r3, [r4, #12]
 801722a:	f04f 30ff 	mov.w	r0, #4294967295
 801722e:	e7e9      	b.n	8017204 <__ssputs_r+0x88>

08017230 <_svfiprintf_r>:
 8017230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017234:	4698      	mov	r8, r3
 8017236:	898b      	ldrh	r3, [r1, #12]
 8017238:	061b      	lsls	r3, r3, #24
 801723a:	b09d      	sub	sp, #116	; 0x74
 801723c:	4607      	mov	r7, r0
 801723e:	460d      	mov	r5, r1
 8017240:	4614      	mov	r4, r2
 8017242:	d50e      	bpl.n	8017262 <_svfiprintf_r+0x32>
 8017244:	690b      	ldr	r3, [r1, #16]
 8017246:	b963      	cbnz	r3, 8017262 <_svfiprintf_r+0x32>
 8017248:	2140      	movs	r1, #64	; 0x40
 801724a:	f7ff ff0b 	bl	8017064 <_malloc_r>
 801724e:	6028      	str	r0, [r5, #0]
 8017250:	6128      	str	r0, [r5, #16]
 8017252:	b920      	cbnz	r0, 801725e <_svfiprintf_r+0x2e>
 8017254:	230c      	movs	r3, #12
 8017256:	603b      	str	r3, [r7, #0]
 8017258:	f04f 30ff 	mov.w	r0, #4294967295
 801725c:	e0d0      	b.n	8017400 <_svfiprintf_r+0x1d0>
 801725e:	2340      	movs	r3, #64	; 0x40
 8017260:	616b      	str	r3, [r5, #20]
 8017262:	2300      	movs	r3, #0
 8017264:	9309      	str	r3, [sp, #36]	; 0x24
 8017266:	2320      	movs	r3, #32
 8017268:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801726c:	f8cd 800c 	str.w	r8, [sp, #12]
 8017270:	2330      	movs	r3, #48	; 0x30
 8017272:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8017418 <_svfiprintf_r+0x1e8>
 8017276:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801727a:	f04f 0901 	mov.w	r9, #1
 801727e:	4623      	mov	r3, r4
 8017280:	469a      	mov	sl, r3
 8017282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017286:	b10a      	cbz	r2, 801728c <_svfiprintf_r+0x5c>
 8017288:	2a25      	cmp	r2, #37	; 0x25
 801728a:	d1f9      	bne.n	8017280 <_svfiprintf_r+0x50>
 801728c:	ebba 0b04 	subs.w	fp, sl, r4
 8017290:	d00b      	beq.n	80172aa <_svfiprintf_r+0x7a>
 8017292:	465b      	mov	r3, fp
 8017294:	4622      	mov	r2, r4
 8017296:	4629      	mov	r1, r5
 8017298:	4638      	mov	r0, r7
 801729a:	f7ff ff6f 	bl	801717c <__ssputs_r>
 801729e:	3001      	adds	r0, #1
 80172a0:	f000 80a9 	beq.w	80173f6 <_svfiprintf_r+0x1c6>
 80172a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80172a6:	445a      	add	r2, fp
 80172a8:	9209      	str	r2, [sp, #36]	; 0x24
 80172aa:	f89a 3000 	ldrb.w	r3, [sl]
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	f000 80a1 	beq.w	80173f6 <_svfiprintf_r+0x1c6>
 80172b4:	2300      	movs	r3, #0
 80172b6:	f04f 32ff 	mov.w	r2, #4294967295
 80172ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80172be:	f10a 0a01 	add.w	sl, sl, #1
 80172c2:	9304      	str	r3, [sp, #16]
 80172c4:	9307      	str	r3, [sp, #28]
 80172c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80172ca:	931a      	str	r3, [sp, #104]	; 0x68
 80172cc:	4654      	mov	r4, sl
 80172ce:	2205      	movs	r2, #5
 80172d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80172d4:	4850      	ldr	r0, [pc, #320]	; (8017418 <_svfiprintf_r+0x1e8>)
 80172d6:	f7e9 f833 	bl	8000340 <memchr>
 80172da:	9a04      	ldr	r2, [sp, #16]
 80172dc:	b9d8      	cbnz	r0, 8017316 <_svfiprintf_r+0xe6>
 80172de:	06d0      	lsls	r0, r2, #27
 80172e0:	bf44      	itt	mi
 80172e2:	2320      	movmi	r3, #32
 80172e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80172e8:	0711      	lsls	r1, r2, #28
 80172ea:	bf44      	itt	mi
 80172ec:	232b      	movmi	r3, #43	; 0x2b
 80172ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80172f2:	f89a 3000 	ldrb.w	r3, [sl]
 80172f6:	2b2a      	cmp	r3, #42	; 0x2a
 80172f8:	d015      	beq.n	8017326 <_svfiprintf_r+0xf6>
 80172fa:	9a07      	ldr	r2, [sp, #28]
 80172fc:	4654      	mov	r4, sl
 80172fe:	2000      	movs	r0, #0
 8017300:	f04f 0c0a 	mov.w	ip, #10
 8017304:	4621      	mov	r1, r4
 8017306:	f811 3b01 	ldrb.w	r3, [r1], #1
 801730a:	3b30      	subs	r3, #48	; 0x30
 801730c:	2b09      	cmp	r3, #9
 801730e:	d94d      	bls.n	80173ac <_svfiprintf_r+0x17c>
 8017310:	b1b0      	cbz	r0, 8017340 <_svfiprintf_r+0x110>
 8017312:	9207      	str	r2, [sp, #28]
 8017314:	e014      	b.n	8017340 <_svfiprintf_r+0x110>
 8017316:	eba0 0308 	sub.w	r3, r0, r8
 801731a:	fa09 f303 	lsl.w	r3, r9, r3
 801731e:	4313      	orrs	r3, r2
 8017320:	9304      	str	r3, [sp, #16]
 8017322:	46a2      	mov	sl, r4
 8017324:	e7d2      	b.n	80172cc <_svfiprintf_r+0x9c>
 8017326:	9b03      	ldr	r3, [sp, #12]
 8017328:	1d19      	adds	r1, r3, #4
 801732a:	681b      	ldr	r3, [r3, #0]
 801732c:	9103      	str	r1, [sp, #12]
 801732e:	2b00      	cmp	r3, #0
 8017330:	bfbb      	ittet	lt
 8017332:	425b      	neglt	r3, r3
 8017334:	f042 0202 	orrlt.w	r2, r2, #2
 8017338:	9307      	strge	r3, [sp, #28]
 801733a:	9307      	strlt	r3, [sp, #28]
 801733c:	bfb8      	it	lt
 801733e:	9204      	strlt	r2, [sp, #16]
 8017340:	7823      	ldrb	r3, [r4, #0]
 8017342:	2b2e      	cmp	r3, #46	; 0x2e
 8017344:	d10c      	bne.n	8017360 <_svfiprintf_r+0x130>
 8017346:	7863      	ldrb	r3, [r4, #1]
 8017348:	2b2a      	cmp	r3, #42	; 0x2a
 801734a:	d134      	bne.n	80173b6 <_svfiprintf_r+0x186>
 801734c:	9b03      	ldr	r3, [sp, #12]
 801734e:	1d1a      	adds	r2, r3, #4
 8017350:	681b      	ldr	r3, [r3, #0]
 8017352:	9203      	str	r2, [sp, #12]
 8017354:	2b00      	cmp	r3, #0
 8017356:	bfb8      	it	lt
 8017358:	f04f 33ff 	movlt.w	r3, #4294967295
 801735c:	3402      	adds	r4, #2
 801735e:	9305      	str	r3, [sp, #20]
 8017360:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8017428 <_svfiprintf_r+0x1f8>
 8017364:	7821      	ldrb	r1, [r4, #0]
 8017366:	2203      	movs	r2, #3
 8017368:	4650      	mov	r0, sl
 801736a:	f7e8 ffe9 	bl	8000340 <memchr>
 801736e:	b138      	cbz	r0, 8017380 <_svfiprintf_r+0x150>
 8017370:	9b04      	ldr	r3, [sp, #16]
 8017372:	eba0 000a 	sub.w	r0, r0, sl
 8017376:	2240      	movs	r2, #64	; 0x40
 8017378:	4082      	lsls	r2, r0
 801737a:	4313      	orrs	r3, r2
 801737c:	3401      	adds	r4, #1
 801737e:	9304      	str	r3, [sp, #16]
 8017380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017384:	4825      	ldr	r0, [pc, #148]	; (801741c <_svfiprintf_r+0x1ec>)
 8017386:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801738a:	2206      	movs	r2, #6
 801738c:	f7e8 ffd8 	bl	8000340 <memchr>
 8017390:	2800      	cmp	r0, #0
 8017392:	d038      	beq.n	8017406 <_svfiprintf_r+0x1d6>
 8017394:	4b22      	ldr	r3, [pc, #136]	; (8017420 <_svfiprintf_r+0x1f0>)
 8017396:	bb1b      	cbnz	r3, 80173e0 <_svfiprintf_r+0x1b0>
 8017398:	9b03      	ldr	r3, [sp, #12]
 801739a:	3307      	adds	r3, #7
 801739c:	f023 0307 	bic.w	r3, r3, #7
 80173a0:	3308      	adds	r3, #8
 80173a2:	9303      	str	r3, [sp, #12]
 80173a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173a6:	4433      	add	r3, r6
 80173a8:	9309      	str	r3, [sp, #36]	; 0x24
 80173aa:	e768      	b.n	801727e <_svfiprintf_r+0x4e>
 80173ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80173b0:	460c      	mov	r4, r1
 80173b2:	2001      	movs	r0, #1
 80173b4:	e7a6      	b.n	8017304 <_svfiprintf_r+0xd4>
 80173b6:	2300      	movs	r3, #0
 80173b8:	3401      	adds	r4, #1
 80173ba:	9305      	str	r3, [sp, #20]
 80173bc:	4619      	mov	r1, r3
 80173be:	f04f 0c0a 	mov.w	ip, #10
 80173c2:	4620      	mov	r0, r4
 80173c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80173c8:	3a30      	subs	r2, #48	; 0x30
 80173ca:	2a09      	cmp	r2, #9
 80173cc:	d903      	bls.n	80173d6 <_svfiprintf_r+0x1a6>
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d0c6      	beq.n	8017360 <_svfiprintf_r+0x130>
 80173d2:	9105      	str	r1, [sp, #20]
 80173d4:	e7c4      	b.n	8017360 <_svfiprintf_r+0x130>
 80173d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80173da:	4604      	mov	r4, r0
 80173dc:	2301      	movs	r3, #1
 80173de:	e7f0      	b.n	80173c2 <_svfiprintf_r+0x192>
 80173e0:	ab03      	add	r3, sp, #12
 80173e2:	9300      	str	r3, [sp, #0]
 80173e4:	462a      	mov	r2, r5
 80173e6:	4b0f      	ldr	r3, [pc, #60]	; (8017424 <_svfiprintf_r+0x1f4>)
 80173e8:	a904      	add	r1, sp, #16
 80173ea:	4638      	mov	r0, r7
 80173ec:	f3af 8000 	nop.w
 80173f0:	1c42      	adds	r2, r0, #1
 80173f2:	4606      	mov	r6, r0
 80173f4:	d1d6      	bne.n	80173a4 <_svfiprintf_r+0x174>
 80173f6:	89ab      	ldrh	r3, [r5, #12]
 80173f8:	065b      	lsls	r3, r3, #25
 80173fa:	f53f af2d 	bmi.w	8017258 <_svfiprintf_r+0x28>
 80173fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017400:	b01d      	add	sp, #116	; 0x74
 8017402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017406:	ab03      	add	r3, sp, #12
 8017408:	9300      	str	r3, [sp, #0]
 801740a:	462a      	mov	r2, r5
 801740c:	4b05      	ldr	r3, [pc, #20]	; (8017424 <_svfiprintf_r+0x1f4>)
 801740e:	a904      	add	r1, sp, #16
 8017410:	4638      	mov	r0, r7
 8017412:	f000 f879 	bl	8017508 <_printf_i>
 8017416:	e7eb      	b.n	80173f0 <_svfiprintf_r+0x1c0>
 8017418:	08017af4 	.word	0x08017af4
 801741c:	08017afe 	.word	0x08017afe
 8017420:	00000000 	.word	0x00000000
 8017424:	0801717d 	.word	0x0801717d
 8017428:	08017afa 	.word	0x08017afa

0801742c <_printf_common>:
 801742c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017430:	4616      	mov	r6, r2
 8017432:	4699      	mov	r9, r3
 8017434:	688a      	ldr	r2, [r1, #8]
 8017436:	690b      	ldr	r3, [r1, #16]
 8017438:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801743c:	4293      	cmp	r3, r2
 801743e:	bfb8      	it	lt
 8017440:	4613      	movlt	r3, r2
 8017442:	6033      	str	r3, [r6, #0]
 8017444:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017448:	4607      	mov	r7, r0
 801744a:	460c      	mov	r4, r1
 801744c:	b10a      	cbz	r2, 8017452 <_printf_common+0x26>
 801744e:	3301      	adds	r3, #1
 8017450:	6033      	str	r3, [r6, #0]
 8017452:	6823      	ldr	r3, [r4, #0]
 8017454:	0699      	lsls	r1, r3, #26
 8017456:	bf42      	ittt	mi
 8017458:	6833      	ldrmi	r3, [r6, #0]
 801745a:	3302      	addmi	r3, #2
 801745c:	6033      	strmi	r3, [r6, #0]
 801745e:	6825      	ldr	r5, [r4, #0]
 8017460:	f015 0506 	ands.w	r5, r5, #6
 8017464:	d106      	bne.n	8017474 <_printf_common+0x48>
 8017466:	f104 0a19 	add.w	sl, r4, #25
 801746a:	68e3      	ldr	r3, [r4, #12]
 801746c:	6832      	ldr	r2, [r6, #0]
 801746e:	1a9b      	subs	r3, r3, r2
 8017470:	42ab      	cmp	r3, r5
 8017472:	dc26      	bgt.n	80174c2 <_printf_common+0x96>
 8017474:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017478:	1e13      	subs	r3, r2, #0
 801747a:	6822      	ldr	r2, [r4, #0]
 801747c:	bf18      	it	ne
 801747e:	2301      	movne	r3, #1
 8017480:	0692      	lsls	r2, r2, #26
 8017482:	d42b      	bmi.n	80174dc <_printf_common+0xb0>
 8017484:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017488:	4649      	mov	r1, r9
 801748a:	4638      	mov	r0, r7
 801748c:	47c0      	blx	r8
 801748e:	3001      	adds	r0, #1
 8017490:	d01e      	beq.n	80174d0 <_printf_common+0xa4>
 8017492:	6823      	ldr	r3, [r4, #0]
 8017494:	6922      	ldr	r2, [r4, #16]
 8017496:	f003 0306 	and.w	r3, r3, #6
 801749a:	2b04      	cmp	r3, #4
 801749c:	bf02      	ittt	eq
 801749e:	68e5      	ldreq	r5, [r4, #12]
 80174a0:	6833      	ldreq	r3, [r6, #0]
 80174a2:	1aed      	subeq	r5, r5, r3
 80174a4:	68a3      	ldr	r3, [r4, #8]
 80174a6:	bf0c      	ite	eq
 80174a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80174ac:	2500      	movne	r5, #0
 80174ae:	4293      	cmp	r3, r2
 80174b0:	bfc4      	itt	gt
 80174b2:	1a9b      	subgt	r3, r3, r2
 80174b4:	18ed      	addgt	r5, r5, r3
 80174b6:	2600      	movs	r6, #0
 80174b8:	341a      	adds	r4, #26
 80174ba:	42b5      	cmp	r5, r6
 80174bc:	d11a      	bne.n	80174f4 <_printf_common+0xc8>
 80174be:	2000      	movs	r0, #0
 80174c0:	e008      	b.n	80174d4 <_printf_common+0xa8>
 80174c2:	2301      	movs	r3, #1
 80174c4:	4652      	mov	r2, sl
 80174c6:	4649      	mov	r1, r9
 80174c8:	4638      	mov	r0, r7
 80174ca:	47c0      	blx	r8
 80174cc:	3001      	adds	r0, #1
 80174ce:	d103      	bne.n	80174d8 <_printf_common+0xac>
 80174d0:	f04f 30ff 	mov.w	r0, #4294967295
 80174d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80174d8:	3501      	adds	r5, #1
 80174da:	e7c6      	b.n	801746a <_printf_common+0x3e>
 80174dc:	18e1      	adds	r1, r4, r3
 80174de:	1c5a      	adds	r2, r3, #1
 80174e0:	2030      	movs	r0, #48	; 0x30
 80174e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80174e6:	4422      	add	r2, r4
 80174e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80174ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80174f0:	3302      	adds	r3, #2
 80174f2:	e7c7      	b.n	8017484 <_printf_common+0x58>
 80174f4:	2301      	movs	r3, #1
 80174f6:	4622      	mov	r2, r4
 80174f8:	4649      	mov	r1, r9
 80174fa:	4638      	mov	r0, r7
 80174fc:	47c0      	blx	r8
 80174fe:	3001      	adds	r0, #1
 8017500:	d0e6      	beq.n	80174d0 <_printf_common+0xa4>
 8017502:	3601      	adds	r6, #1
 8017504:	e7d9      	b.n	80174ba <_printf_common+0x8e>
	...

08017508 <_printf_i>:
 8017508:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801750c:	7e0f      	ldrb	r7, [r1, #24]
 801750e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017510:	2f78      	cmp	r7, #120	; 0x78
 8017512:	4691      	mov	r9, r2
 8017514:	4680      	mov	r8, r0
 8017516:	460c      	mov	r4, r1
 8017518:	469a      	mov	sl, r3
 801751a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801751e:	d807      	bhi.n	8017530 <_printf_i+0x28>
 8017520:	2f62      	cmp	r7, #98	; 0x62
 8017522:	d80a      	bhi.n	801753a <_printf_i+0x32>
 8017524:	2f00      	cmp	r7, #0
 8017526:	f000 80d4 	beq.w	80176d2 <_printf_i+0x1ca>
 801752a:	2f58      	cmp	r7, #88	; 0x58
 801752c:	f000 80c0 	beq.w	80176b0 <_printf_i+0x1a8>
 8017530:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017534:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017538:	e03a      	b.n	80175b0 <_printf_i+0xa8>
 801753a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801753e:	2b15      	cmp	r3, #21
 8017540:	d8f6      	bhi.n	8017530 <_printf_i+0x28>
 8017542:	a101      	add	r1, pc, #4	; (adr r1, 8017548 <_printf_i+0x40>)
 8017544:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017548:	080175a1 	.word	0x080175a1
 801754c:	080175b5 	.word	0x080175b5
 8017550:	08017531 	.word	0x08017531
 8017554:	08017531 	.word	0x08017531
 8017558:	08017531 	.word	0x08017531
 801755c:	08017531 	.word	0x08017531
 8017560:	080175b5 	.word	0x080175b5
 8017564:	08017531 	.word	0x08017531
 8017568:	08017531 	.word	0x08017531
 801756c:	08017531 	.word	0x08017531
 8017570:	08017531 	.word	0x08017531
 8017574:	080176b9 	.word	0x080176b9
 8017578:	080175e1 	.word	0x080175e1
 801757c:	08017673 	.word	0x08017673
 8017580:	08017531 	.word	0x08017531
 8017584:	08017531 	.word	0x08017531
 8017588:	080176db 	.word	0x080176db
 801758c:	08017531 	.word	0x08017531
 8017590:	080175e1 	.word	0x080175e1
 8017594:	08017531 	.word	0x08017531
 8017598:	08017531 	.word	0x08017531
 801759c:	0801767b 	.word	0x0801767b
 80175a0:	682b      	ldr	r3, [r5, #0]
 80175a2:	1d1a      	adds	r2, r3, #4
 80175a4:	681b      	ldr	r3, [r3, #0]
 80175a6:	602a      	str	r2, [r5, #0]
 80175a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80175ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80175b0:	2301      	movs	r3, #1
 80175b2:	e09f      	b.n	80176f4 <_printf_i+0x1ec>
 80175b4:	6820      	ldr	r0, [r4, #0]
 80175b6:	682b      	ldr	r3, [r5, #0]
 80175b8:	0607      	lsls	r7, r0, #24
 80175ba:	f103 0104 	add.w	r1, r3, #4
 80175be:	6029      	str	r1, [r5, #0]
 80175c0:	d501      	bpl.n	80175c6 <_printf_i+0xbe>
 80175c2:	681e      	ldr	r6, [r3, #0]
 80175c4:	e003      	b.n	80175ce <_printf_i+0xc6>
 80175c6:	0646      	lsls	r6, r0, #25
 80175c8:	d5fb      	bpl.n	80175c2 <_printf_i+0xba>
 80175ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80175ce:	2e00      	cmp	r6, #0
 80175d0:	da03      	bge.n	80175da <_printf_i+0xd2>
 80175d2:	232d      	movs	r3, #45	; 0x2d
 80175d4:	4276      	negs	r6, r6
 80175d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80175da:	485a      	ldr	r0, [pc, #360]	; (8017744 <_printf_i+0x23c>)
 80175dc:	230a      	movs	r3, #10
 80175de:	e012      	b.n	8017606 <_printf_i+0xfe>
 80175e0:	682b      	ldr	r3, [r5, #0]
 80175e2:	6820      	ldr	r0, [r4, #0]
 80175e4:	1d19      	adds	r1, r3, #4
 80175e6:	6029      	str	r1, [r5, #0]
 80175e8:	0605      	lsls	r5, r0, #24
 80175ea:	d501      	bpl.n	80175f0 <_printf_i+0xe8>
 80175ec:	681e      	ldr	r6, [r3, #0]
 80175ee:	e002      	b.n	80175f6 <_printf_i+0xee>
 80175f0:	0641      	lsls	r1, r0, #25
 80175f2:	d5fb      	bpl.n	80175ec <_printf_i+0xe4>
 80175f4:	881e      	ldrh	r6, [r3, #0]
 80175f6:	4853      	ldr	r0, [pc, #332]	; (8017744 <_printf_i+0x23c>)
 80175f8:	2f6f      	cmp	r7, #111	; 0x6f
 80175fa:	bf0c      	ite	eq
 80175fc:	2308      	moveq	r3, #8
 80175fe:	230a      	movne	r3, #10
 8017600:	2100      	movs	r1, #0
 8017602:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017606:	6865      	ldr	r5, [r4, #4]
 8017608:	60a5      	str	r5, [r4, #8]
 801760a:	2d00      	cmp	r5, #0
 801760c:	bfa2      	ittt	ge
 801760e:	6821      	ldrge	r1, [r4, #0]
 8017610:	f021 0104 	bicge.w	r1, r1, #4
 8017614:	6021      	strge	r1, [r4, #0]
 8017616:	b90e      	cbnz	r6, 801761c <_printf_i+0x114>
 8017618:	2d00      	cmp	r5, #0
 801761a:	d04b      	beq.n	80176b4 <_printf_i+0x1ac>
 801761c:	4615      	mov	r5, r2
 801761e:	fbb6 f1f3 	udiv	r1, r6, r3
 8017622:	fb03 6711 	mls	r7, r3, r1, r6
 8017626:	5dc7      	ldrb	r7, [r0, r7]
 8017628:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801762c:	4637      	mov	r7, r6
 801762e:	42bb      	cmp	r3, r7
 8017630:	460e      	mov	r6, r1
 8017632:	d9f4      	bls.n	801761e <_printf_i+0x116>
 8017634:	2b08      	cmp	r3, #8
 8017636:	d10b      	bne.n	8017650 <_printf_i+0x148>
 8017638:	6823      	ldr	r3, [r4, #0]
 801763a:	07de      	lsls	r6, r3, #31
 801763c:	d508      	bpl.n	8017650 <_printf_i+0x148>
 801763e:	6923      	ldr	r3, [r4, #16]
 8017640:	6861      	ldr	r1, [r4, #4]
 8017642:	4299      	cmp	r1, r3
 8017644:	bfde      	ittt	le
 8017646:	2330      	movle	r3, #48	; 0x30
 8017648:	f805 3c01 	strble.w	r3, [r5, #-1]
 801764c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017650:	1b52      	subs	r2, r2, r5
 8017652:	6122      	str	r2, [r4, #16]
 8017654:	f8cd a000 	str.w	sl, [sp]
 8017658:	464b      	mov	r3, r9
 801765a:	aa03      	add	r2, sp, #12
 801765c:	4621      	mov	r1, r4
 801765e:	4640      	mov	r0, r8
 8017660:	f7ff fee4 	bl	801742c <_printf_common>
 8017664:	3001      	adds	r0, #1
 8017666:	d14a      	bne.n	80176fe <_printf_i+0x1f6>
 8017668:	f04f 30ff 	mov.w	r0, #4294967295
 801766c:	b004      	add	sp, #16
 801766e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017672:	6823      	ldr	r3, [r4, #0]
 8017674:	f043 0320 	orr.w	r3, r3, #32
 8017678:	6023      	str	r3, [r4, #0]
 801767a:	4833      	ldr	r0, [pc, #204]	; (8017748 <_printf_i+0x240>)
 801767c:	2778      	movs	r7, #120	; 0x78
 801767e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017682:	6823      	ldr	r3, [r4, #0]
 8017684:	6829      	ldr	r1, [r5, #0]
 8017686:	061f      	lsls	r7, r3, #24
 8017688:	f851 6b04 	ldr.w	r6, [r1], #4
 801768c:	d402      	bmi.n	8017694 <_printf_i+0x18c>
 801768e:	065f      	lsls	r7, r3, #25
 8017690:	bf48      	it	mi
 8017692:	b2b6      	uxthmi	r6, r6
 8017694:	07df      	lsls	r7, r3, #31
 8017696:	bf48      	it	mi
 8017698:	f043 0320 	orrmi.w	r3, r3, #32
 801769c:	6029      	str	r1, [r5, #0]
 801769e:	bf48      	it	mi
 80176a0:	6023      	strmi	r3, [r4, #0]
 80176a2:	b91e      	cbnz	r6, 80176ac <_printf_i+0x1a4>
 80176a4:	6823      	ldr	r3, [r4, #0]
 80176a6:	f023 0320 	bic.w	r3, r3, #32
 80176aa:	6023      	str	r3, [r4, #0]
 80176ac:	2310      	movs	r3, #16
 80176ae:	e7a7      	b.n	8017600 <_printf_i+0xf8>
 80176b0:	4824      	ldr	r0, [pc, #144]	; (8017744 <_printf_i+0x23c>)
 80176b2:	e7e4      	b.n	801767e <_printf_i+0x176>
 80176b4:	4615      	mov	r5, r2
 80176b6:	e7bd      	b.n	8017634 <_printf_i+0x12c>
 80176b8:	682b      	ldr	r3, [r5, #0]
 80176ba:	6826      	ldr	r6, [r4, #0]
 80176bc:	6961      	ldr	r1, [r4, #20]
 80176be:	1d18      	adds	r0, r3, #4
 80176c0:	6028      	str	r0, [r5, #0]
 80176c2:	0635      	lsls	r5, r6, #24
 80176c4:	681b      	ldr	r3, [r3, #0]
 80176c6:	d501      	bpl.n	80176cc <_printf_i+0x1c4>
 80176c8:	6019      	str	r1, [r3, #0]
 80176ca:	e002      	b.n	80176d2 <_printf_i+0x1ca>
 80176cc:	0670      	lsls	r0, r6, #25
 80176ce:	d5fb      	bpl.n	80176c8 <_printf_i+0x1c0>
 80176d0:	8019      	strh	r1, [r3, #0]
 80176d2:	2300      	movs	r3, #0
 80176d4:	6123      	str	r3, [r4, #16]
 80176d6:	4615      	mov	r5, r2
 80176d8:	e7bc      	b.n	8017654 <_printf_i+0x14c>
 80176da:	682b      	ldr	r3, [r5, #0]
 80176dc:	1d1a      	adds	r2, r3, #4
 80176de:	602a      	str	r2, [r5, #0]
 80176e0:	681d      	ldr	r5, [r3, #0]
 80176e2:	6862      	ldr	r2, [r4, #4]
 80176e4:	2100      	movs	r1, #0
 80176e6:	4628      	mov	r0, r5
 80176e8:	f7e8 fe2a 	bl	8000340 <memchr>
 80176ec:	b108      	cbz	r0, 80176f2 <_printf_i+0x1ea>
 80176ee:	1b40      	subs	r0, r0, r5
 80176f0:	6060      	str	r0, [r4, #4]
 80176f2:	6863      	ldr	r3, [r4, #4]
 80176f4:	6123      	str	r3, [r4, #16]
 80176f6:	2300      	movs	r3, #0
 80176f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80176fc:	e7aa      	b.n	8017654 <_printf_i+0x14c>
 80176fe:	6923      	ldr	r3, [r4, #16]
 8017700:	462a      	mov	r2, r5
 8017702:	4649      	mov	r1, r9
 8017704:	4640      	mov	r0, r8
 8017706:	47d0      	blx	sl
 8017708:	3001      	adds	r0, #1
 801770a:	d0ad      	beq.n	8017668 <_printf_i+0x160>
 801770c:	6823      	ldr	r3, [r4, #0]
 801770e:	079b      	lsls	r3, r3, #30
 8017710:	d413      	bmi.n	801773a <_printf_i+0x232>
 8017712:	68e0      	ldr	r0, [r4, #12]
 8017714:	9b03      	ldr	r3, [sp, #12]
 8017716:	4298      	cmp	r0, r3
 8017718:	bfb8      	it	lt
 801771a:	4618      	movlt	r0, r3
 801771c:	e7a6      	b.n	801766c <_printf_i+0x164>
 801771e:	2301      	movs	r3, #1
 8017720:	4632      	mov	r2, r6
 8017722:	4649      	mov	r1, r9
 8017724:	4640      	mov	r0, r8
 8017726:	47d0      	blx	sl
 8017728:	3001      	adds	r0, #1
 801772a:	d09d      	beq.n	8017668 <_printf_i+0x160>
 801772c:	3501      	adds	r5, #1
 801772e:	68e3      	ldr	r3, [r4, #12]
 8017730:	9903      	ldr	r1, [sp, #12]
 8017732:	1a5b      	subs	r3, r3, r1
 8017734:	42ab      	cmp	r3, r5
 8017736:	dcf2      	bgt.n	801771e <_printf_i+0x216>
 8017738:	e7eb      	b.n	8017712 <_printf_i+0x20a>
 801773a:	2500      	movs	r5, #0
 801773c:	f104 0619 	add.w	r6, r4, #25
 8017740:	e7f5      	b.n	801772e <_printf_i+0x226>
 8017742:	bf00      	nop
 8017744:	08017b05 	.word	0x08017b05
 8017748:	08017b16 	.word	0x08017b16

0801774c <memmove>:
 801774c:	4288      	cmp	r0, r1
 801774e:	b510      	push	{r4, lr}
 8017750:	eb01 0402 	add.w	r4, r1, r2
 8017754:	d902      	bls.n	801775c <memmove+0x10>
 8017756:	4284      	cmp	r4, r0
 8017758:	4623      	mov	r3, r4
 801775a:	d807      	bhi.n	801776c <memmove+0x20>
 801775c:	1e43      	subs	r3, r0, #1
 801775e:	42a1      	cmp	r1, r4
 8017760:	d008      	beq.n	8017774 <memmove+0x28>
 8017762:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017766:	f803 2f01 	strb.w	r2, [r3, #1]!
 801776a:	e7f8      	b.n	801775e <memmove+0x12>
 801776c:	4402      	add	r2, r0
 801776e:	4601      	mov	r1, r0
 8017770:	428a      	cmp	r2, r1
 8017772:	d100      	bne.n	8017776 <memmove+0x2a>
 8017774:	bd10      	pop	{r4, pc}
 8017776:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801777a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801777e:	e7f7      	b.n	8017770 <memmove+0x24>

08017780 <_sbrk_r>:
 8017780:	b538      	push	{r3, r4, r5, lr}
 8017782:	4d06      	ldr	r5, [pc, #24]	; (801779c <_sbrk_r+0x1c>)
 8017784:	2300      	movs	r3, #0
 8017786:	4604      	mov	r4, r0
 8017788:	4608      	mov	r0, r1
 801778a:	602b      	str	r3, [r5, #0]
 801778c:	f7eb ffb8 	bl	8003700 <_sbrk>
 8017790:	1c43      	adds	r3, r0, #1
 8017792:	d102      	bne.n	801779a <_sbrk_r+0x1a>
 8017794:	682b      	ldr	r3, [r5, #0]
 8017796:	b103      	cbz	r3, 801779a <_sbrk_r+0x1a>
 8017798:	6023      	str	r3, [r4, #0]
 801779a:	bd38      	pop	{r3, r4, r5, pc}
 801779c:	240031e4 	.word	0x240031e4

080177a0 <_realloc_r>:
 80177a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177a4:	4680      	mov	r8, r0
 80177a6:	4614      	mov	r4, r2
 80177a8:	460e      	mov	r6, r1
 80177aa:	b921      	cbnz	r1, 80177b6 <_realloc_r+0x16>
 80177ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80177b0:	4611      	mov	r1, r2
 80177b2:	f7ff bc57 	b.w	8017064 <_malloc_r>
 80177b6:	b92a      	cbnz	r2, 80177c4 <_realloc_r+0x24>
 80177b8:	f7ff fbe8 	bl	8016f8c <_free_r>
 80177bc:	4625      	mov	r5, r4
 80177be:	4628      	mov	r0, r5
 80177c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177c4:	f000 f81b 	bl	80177fe <_malloc_usable_size_r>
 80177c8:	4284      	cmp	r4, r0
 80177ca:	4607      	mov	r7, r0
 80177cc:	d802      	bhi.n	80177d4 <_realloc_r+0x34>
 80177ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80177d2:	d812      	bhi.n	80177fa <_realloc_r+0x5a>
 80177d4:	4621      	mov	r1, r4
 80177d6:	4640      	mov	r0, r8
 80177d8:	f7ff fc44 	bl	8017064 <_malloc_r>
 80177dc:	4605      	mov	r5, r0
 80177de:	2800      	cmp	r0, #0
 80177e0:	d0ed      	beq.n	80177be <_realloc_r+0x1e>
 80177e2:	42bc      	cmp	r4, r7
 80177e4:	4622      	mov	r2, r4
 80177e6:	4631      	mov	r1, r6
 80177e8:	bf28      	it	cs
 80177ea:	463a      	movcs	r2, r7
 80177ec:	f7ff fbc0 	bl	8016f70 <memcpy>
 80177f0:	4631      	mov	r1, r6
 80177f2:	4640      	mov	r0, r8
 80177f4:	f7ff fbca 	bl	8016f8c <_free_r>
 80177f8:	e7e1      	b.n	80177be <_realloc_r+0x1e>
 80177fa:	4635      	mov	r5, r6
 80177fc:	e7df      	b.n	80177be <_realloc_r+0x1e>

080177fe <_malloc_usable_size_r>:
 80177fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017802:	1f18      	subs	r0, r3, #4
 8017804:	2b00      	cmp	r3, #0
 8017806:	bfbc      	itt	lt
 8017808:	580b      	ldrlt	r3, [r1, r0]
 801780a:	18c0      	addlt	r0, r0, r3
 801780c:	4770      	bx	lr
	...

08017810 <_init>:
 8017810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017812:	bf00      	nop
 8017814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017816:	bc08      	pop	{r3}
 8017818:	469e      	mov	lr, r3
 801781a:	4770      	bx	lr

0801781c <_fini>:
 801781c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801781e:	bf00      	nop
 8017820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017822:	bc08      	pop	{r3}
 8017824:	469e      	mov	lr, r3
 8017826:	4770      	bx	lr
