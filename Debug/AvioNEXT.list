
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f9e8  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b94  0801fcb8  0801fcb8  0002fcb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0802084c  0802084c  0003084c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08020854  08020854  00030854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08020858  08020858  00030858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002c8  24000000  0802085c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003368  240002c8  08020b24  000402c8  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  24003630  08020b24  00043630  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000402c8  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000402f6  2**0
                  CONTENTS, READONLY
 11 .debug_info   00037ca5  00000000  00000000  00040339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000659b  00000000  00000000  00077fde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002db0  00000000  00000000  0007e580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000237c  00000000  00000000  00081330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0000b5c0  00000000  00000000  000836ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003f2d9  00000000  00000000  0008ec6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017fe57  00000000  00000000  000cdf45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000dc90  00000000  00000000  0024dd9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  0025ba2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002c8 	.word	0x240002c8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801fca0 	.word	0x0801fca0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002cc 	.word	0x240002cc
 800030c:	0801fca0 	.word	0x0801fca0

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	; 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295
 8000768:	f04f 30ff 	movne.w	r0, #4294967295
 800076c:	f000 b9a8 	b.w	8000ac0 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f83e 	bl	80007f8 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__aeabi_d2lz>:
 8000788:	b508      	push	{r3, lr}
 800078a:	4602      	mov	r2, r0
 800078c:	460b      	mov	r3, r1
 800078e:	ec43 2b17 	vmov	d7, r2, r3
 8000792:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079a:	d403      	bmi.n	80007a4 <__aeabi_d2lz+0x1c>
 800079c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007a0:	f000 b80a 	b.w	80007b8 <__aeabi_d2ulz>
 80007a4:	eeb1 7b47 	vneg.f64	d7, d7
 80007a8:	ec51 0b17 	vmov	r0, r1, d7
 80007ac:	f000 f804 	bl	80007b8 <__aeabi_d2ulz>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	bd08      	pop	{r3, pc}

080007b8 <__aeabi_d2ulz>:
 80007b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007e8 <__aeabi_d2ulz+0x30>
 80007bc:	ec41 0b17 	vmov	d7, r0, r1
 80007c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007f0 <__aeabi_d2ulz+0x38>
 80007c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007d8:	ee16 1a10 	vmov	r1, s12
 80007dc:	ee17 0a90 	vmov	r0, s15
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	f3af 8000 	nop.w
 80007e8:	00000000 	.word	0x00000000
 80007ec:	3df00000 	.word	0x3df00000
 80007f0:	00000000 	.word	0x00000000
 80007f4:	41f00000 	.word	0x41f00000

080007f8 <__udivmoddi4>:
 80007f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007fc:	9e08      	ldr	r6, [sp, #32]
 80007fe:	460d      	mov	r5, r1
 8000800:	4604      	mov	r4, r0
 8000802:	460f      	mov	r7, r1
 8000804:	2b00      	cmp	r3, #0
 8000806:	d14a      	bne.n	800089e <__udivmoddi4+0xa6>
 8000808:	428a      	cmp	r2, r1
 800080a:	4694      	mov	ip, r2
 800080c:	d965      	bls.n	80008da <__udivmoddi4+0xe2>
 800080e:	fab2 f382 	clz	r3, r2
 8000812:	b143      	cbz	r3, 8000826 <__udivmoddi4+0x2e>
 8000814:	fa02 fc03 	lsl.w	ip, r2, r3
 8000818:	f1c3 0220 	rsb	r2, r3, #32
 800081c:	409f      	lsls	r7, r3
 800081e:	fa20 f202 	lsr.w	r2, r0, r2
 8000822:	4317      	orrs	r7, r2
 8000824:	409c      	lsls	r4, r3
 8000826:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800082a:	fa1f f58c 	uxth.w	r5, ip
 800082e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000832:	0c22      	lsrs	r2, r4, #16
 8000834:	fb0e 7711 	mls	r7, lr, r1, r7
 8000838:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800083c:	fb01 f005 	mul.w	r0, r1, r5
 8000840:	4290      	cmp	r0, r2
 8000842:	d90a      	bls.n	800085a <__udivmoddi4+0x62>
 8000844:	eb1c 0202 	adds.w	r2, ip, r2
 8000848:	f101 37ff 	add.w	r7, r1, #4294967295
 800084c:	f080 811c 	bcs.w	8000a88 <__udivmoddi4+0x290>
 8000850:	4290      	cmp	r0, r2
 8000852:	f240 8119 	bls.w	8000a88 <__udivmoddi4+0x290>
 8000856:	3902      	subs	r1, #2
 8000858:	4462      	add	r2, ip
 800085a:	1a12      	subs	r2, r2, r0
 800085c:	b2a4      	uxth	r4, r4
 800085e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000862:	fb0e 2210 	mls	r2, lr, r0, r2
 8000866:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800086a:	fb00 f505 	mul.w	r5, r0, r5
 800086e:	42a5      	cmp	r5, r4
 8000870:	d90a      	bls.n	8000888 <__udivmoddi4+0x90>
 8000872:	eb1c 0404 	adds.w	r4, ip, r4
 8000876:	f100 32ff 	add.w	r2, r0, #4294967295
 800087a:	f080 8107 	bcs.w	8000a8c <__udivmoddi4+0x294>
 800087e:	42a5      	cmp	r5, r4
 8000880:	f240 8104 	bls.w	8000a8c <__udivmoddi4+0x294>
 8000884:	4464      	add	r4, ip
 8000886:	3802      	subs	r0, #2
 8000888:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800088c:	1b64      	subs	r4, r4, r5
 800088e:	2100      	movs	r1, #0
 8000890:	b11e      	cbz	r6, 800089a <__udivmoddi4+0xa2>
 8000892:	40dc      	lsrs	r4, r3
 8000894:	2300      	movs	r3, #0
 8000896:	e9c6 4300 	strd	r4, r3, [r6]
 800089a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800089e:	428b      	cmp	r3, r1
 80008a0:	d908      	bls.n	80008b4 <__udivmoddi4+0xbc>
 80008a2:	2e00      	cmp	r6, #0
 80008a4:	f000 80ed 	beq.w	8000a82 <__udivmoddi4+0x28a>
 80008a8:	2100      	movs	r1, #0
 80008aa:	e9c6 0500 	strd	r0, r5, [r6]
 80008ae:	4608      	mov	r0, r1
 80008b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008b4:	fab3 f183 	clz	r1, r3
 80008b8:	2900      	cmp	r1, #0
 80008ba:	d149      	bne.n	8000950 <__udivmoddi4+0x158>
 80008bc:	42ab      	cmp	r3, r5
 80008be:	d302      	bcc.n	80008c6 <__udivmoddi4+0xce>
 80008c0:	4282      	cmp	r2, r0
 80008c2:	f200 80f8 	bhi.w	8000ab6 <__udivmoddi4+0x2be>
 80008c6:	1a84      	subs	r4, r0, r2
 80008c8:	eb65 0203 	sbc.w	r2, r5, r3
 80008cc:	2001      	movs	r0, #1
 80008ce:	4617      	mov	r7, r2
 80008d0:	2e00      	cmp	r6, #0
 80008d2:	d0e2      	beq.n	800089a <__udivmoddi4+0xa2>
 80008d4:	e9c6 4700 	strd	r4, r7, [r6]
 80008d8:	e7df      	b.n	800089a <__udivmoddi4+0xa2>
 80008da:	b902      	cbnz	r2, 80008de <__udivmoddi4+0xe6>
 80008dc:	deff      	udf	#255	; 0xff
 80008de:	fab2 f382 	clz	r3, r2
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	f040 8090 	bne.w	8000a08 <__udivmoddi4+0x210>
 80008e8:	1a8a      	subs	r2, r1, r2
 80008ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008ee:	fa1f fe8c 	uxth.w	lr, ip
 80008f2:	2101      	movs	r1, #1
 80008f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008f8:	fb07 2015 	mls	r0, r7, r5, r2
 80008fc:	0c22      	lsrs	r2, r4, #16
 80008fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000902:	fb0e f005 	mul.w	r0, lr, r5
 8000906:	4290      	cmp	r0, r2
 8000908:	d908      	bls.n	800091c <__udivmoddi4+0x124>
 800090a:	eb1c 0202 	adds.w	r2, ip, r2
 800090e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000912:	d202      	bcs.n	800091a <__udivmoddi4+0x122>
 8000914:	4290      	cmp	r0, r2
 8000916:	f200 80cb 	bhi.w	8000ab0 <__udivmoddi4+0x2b8>
 800091a:	4645      	mov	r5, r8
 800091c:	1a12      	subs	r2, r2, r0
 800091e:	b2a4      	uxth	r4, r4
 8000920:	fbb2 f0f7 	udiv	r0, r2, r7
 8000924:	fb07 2210 	mls	r2, r7, r0, r2
 8000928:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800092c:	fb0e fe00 	mul.w	lr, lr, r0
 8000930:	45a6      	cmp	lr, r4
 8000932:	d908      	bls.n	8000946 <__udivmoddi4+0x14e>
 8000934:	eb1c 0404 	adds.w	r4, ip, r4
 8000938:	f100 32ff 	add.w	r2, r0, #4294967295
 800093c:	d202      	bcs.n	8000944 <__udivmoddi4+0x14c>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f200 80bb 	bhi.w	8000aba <__udivmoddi4+0x2c2>
 8000944:	4610      	mov	r0, r2
 8000946:	eba4 040e 	sub.w	r4, r4, lr
 800094a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800094e:	e79f      	b.n	8000890 <__udivmoddi4+0x98>
 8000950:	f1c1 0720 	rsb	r7, r1, #32
 8000954:	408b      	lsls	r3, r1
 8000956:	fa22 fc07 	lsr.w	ip, r2, r7
 800095a:	ea4c 0c03 	orr.w	ip, ip, r3
 800095e:	fa05 f401 	lsl.w	r4, r5, r1
 8000962:	fa20 f307 	lsr.w	r3, r0, r7
 8000966:	40fd      	lsrs	r5, r7
 8000968:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800096c:	4323      	orrs	r3, r4
 800096e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000972:	fa1f fe8c 	uxth.w	lr, ip
 8000976:	fb09 5518 	mls	r5, r9, r8, r5
 800097a:	0c1c      	lsrs	r4, r3, #16
 800097c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000980:	fb08 f50e 	mul.w	r5, r8, lr
 8000984:	42a5      	cmp	r5, r4
 8000986:	fa02 f201 	lsl.w	r2, r2, r1
 800098a:	fa00 f001 	lsl.w	r0, r0, r1
 800098e:	d90b      	bls.n	80009a8 <__udivmoddi4+0x1b0>
 8000990:	eb1c 0404 	adds.w	r4, ip, r4
 8000994:	f108 3aff 	add.w	sl, r8, #4294967295
 8000998:	f080 8088 	bcs.w	8000aac <__udivmoddi4+0x2b4>
 800099c:	42a5      	cmp	r5, r4
 800099e:	f240 8085 	bls.w	8000aac <__udivmoddi4+0x2b4>
 80009a2:	f1a8 0802 	sub.w	r8, r8, #2
 80009a6:	4464      	add	r4, ip
 80009a8:	1b64      	subs	r4, r4, r5
 80009aa:	b29d      	uxth	r5, r3
 80009ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80009b0:	fb09 4413 	mls	r4, r9, r3, r4
 80009b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80009bc:	45a6      	cmp	lr, r4
 80009be:	d908      	bls.n	80009d2 <__udivmoddi4+0x1da>
 80009c0:	eb1c 0404 	adds.w	r4, ip, r4
 80009c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80009c8:	d26c      	bcs.n	8000aa4 <__udivmoddi4+0x2ac>
 80009ca:	45a6      	cmp	lr, r4
 80009cc:	d96a      	bls.n	8000aa4 <__udivmoddi4+0x2ac>
 80009ce:	3b02      	subs	r3, #2
 80009d0:	4464      	add	r4, ip
 80009d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009d6:	fba3 9502 	umull	r9, r5, r3, r2
 80009da:	eba4 040e 	sub.w	r4, r4, lr
 80009de:	42ac      	cmp	r4, r5
 80009e0:	46c8      	mov	r8, r9
 80009e2:	46ae      	mov	lr, r5
 80009e4:	d356      	bcc.n	8000a94 <__udivmoddi4+0x29c>
 80009e6:	d053      	beq.n	8000a90 <__udivmoddi4+0x298>
 80009e8:	b156      	cbz	r6, 8000a00 <__udivmoddi4+0x208>
 80009ea:	ebb0 0208 	subs.w	r2, r0, r8
 80009ee:	eb64 040e 	sbc.w	r4, r4, lr
 80009f2:	fa04 f707 	lsl.w	r7, r4, r7
 80009f6:	40ca      	lsrs	r2, r1
 80009f8:	40cc      	lsrs	r4, r1
 80009fa:	4317      	orrs	r7, r2
 80009fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000a00:	4618      	mov	r0, r3
 8000a02:	2100      	movs	r1, #0
 8000a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a08:	f1c3 0120 	rsb	r1, r3, #32
 8000a0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a10:	fa20 f201 	lsr.w	r2, r0, r1
 8000a14:	fa25 f101 	lsr.w	r1, r5, r1
 8000a18:	409d      	lsls	r5, r3
 8000a1a:	432a      	orrs	r2, r5
 8000a1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a20:	fa1f fe8c 	uxth.w	lr, ip
 8000a24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a28:	fb07 1510 	mls	r5, r7, r0, r1
 8000a2c:	0c11      	lsrs	r1, r2, #16
 8000a2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a32:	fb00 f50e 	mul.w	r5, r0, lr
 8000a36:	428d      	cmp	r5, r1
 8000a38:	fa04 f403 	lsl.w	r4, r4, r3
 8000a3c:	d908      	bls.n	8000a50 <__udivmoddi4+0x258>
 8000a3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000a42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a46:	d22f      	bcs.n	8000aa8 <__udivmoddi4+0x2b0>
 8000a48:	428d      	cmp	r5, r1
 8000a4a:	d92d      	bls.n	8000aa8 <__udivmoddi4+0x2b0>
 8000a4c:	3802      	subs	r0, #2
 8000a4e:	4461      	add	r1, ip
 8000a50:	1b49      	subs	r1, r1, r5
 8000a52:	b292      	uxth	r2, r2
 8000a54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a58:	fb07 1115 	mls	r1, r7, r5, r1
 8000a5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a60:	fb05 f10e 	mul.w	r1, r5, lr
 8000a64:	4291      	cmp	r1, r2
 8000a66:	d908      	bls.n	8000a7a <__udivmoddi4+0x282>
 8000a68:	eb1c 0202 	adds.w	r2, ip, r2
 8000a6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a70:	d216      	bcs.n	8000aa0 <__udivmoddi4+0x2a8>
 8000a72:	4291      	cmp	r1, r2
 8000a74:	d914      	bls.n	8000aa0 <__udivmoddi4+0x2a8>
 8000a76:	3d02      	subs	r5, #2
 8000a78:	4462      	add	r2, ip
 8000a7a:	1a52      	subs	r2, r2, r1
 8000a7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a80:	e738      	b.n	80008f4 <__udivmoddi4+0xfc>
 8000a82:	4631      	mov	r1, r6
 8000a84:	4630      	mov	r0, r6
 8000a86:	e708      	b.n	800089a <__udivmoddi4+0xa2>
 8000a88:	4639      	mov	r1, r7
 8000a8a:	e6e6      	b.n	800085a <__udivmoddi4+0x62>
 8000a8c:	4610      	mov	r0, r2
 8000a8e:	e6fb      	b.n	8000888 <__udivmoddi4+0x90>
 8000a90:	4548      	cmp	r0, r9
 8000a92:	d2a9      	bcs.n	80009e8 <__udivmoddi4+0x1f0>
 8000a94:	ebb9 0802 	subs.w	r8, r9, r2
 8000a98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a9c:	3b01      	subs	r3, #1
 8000a9e:	e7a3      	b.n	80009e8 <__udivmoddi4+0x1f0>
 8000aa0:	4645      	mov	r5, r8
 8000aa2:	e7ea      	b.n	8000a7a <__udivmoddi4+0x282>
 8000aa4:	462b      	mov	r3, r5
 8000aa6:	e794      	b.n	80009d2 <__udivmoddi4+0x1da>
 8000aa8:	4640      	mov	r0, r8
 8000aaa:	e7d1      	b.n	8000a50 <__udivmoddi4+0x258>
 8000aac:	46d0      	mov	r8, sl
 8000aae:	e77b      	b.n	80009a8 <__udivmoddi4+0x1b0>
 8000ab0:	3d02      	subs	r5, #2
 8000ab2:	4462      	add	r2, ip
 8000ab4:	e732      	b.n	800091c <__udivmoddi4+0x124>
 8000ab6:	4608      	mov	r0, r1
 8000ab8:	e70a      	b.n	80008d0 <__udivmoddi4+0xd8>
 8000aba:	4464      	add	r4, ip
 8000abc:	3802      	subs	r0, #2
 8000abe:	e742      	b.n	8000946 <__udivmoddi4+0x14e>

08000ac0 <__aeabi_idiv0>:
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <setServo>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;

void setServo(int servoNum, float angle) {
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal = (int) (3000 + (4000 * (angle / 100)));
 8000ad0:	ed97 7a00 	vldr	s14, [r7]
 8000ad4:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000b44 <setServo+0x80>
 8000ad8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000adc:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000b48 <setServo+0x84>
 8000ae0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ae4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000b4c <setServo+0x88>
 8000ae8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000aec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000af0:	ee17 3a90 	vmov	r3, s15
 8000af4:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	3b01      	subs	r3, #1
 8000afa:	2b03      	cmp	r3, #3
 8000afc:	d81a      	bhi.n	8000b34 <setServo+0x70>
 8000afe:	a201      	add	r2, pc, #4	; (adr r2, 8000b04 <setServo+0x40>)
 8000b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b04:	08000b15 	.word	0x08000b15
 8000b08:	08000b1d 	.word	0x08000b1d
 8000b0c:	08000b25 	.word	0x08000b25
 8000b10:	08000b2d 	.word	0x08000b2d
	case 1:
		TIM4->CCR4 = timerVal;
 8000b14:	4a0e      	ldr	r2, [pc, #56]	; (8000b50 <setServo+0x8c>)
 8000b16:	89fb      	ldrh	r3, [r7, #14]
 8000b18:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8000b1a:	e00c      	b.n	8000b36 <setServo+0x72>
	case 2:
		TIM4->CCR3 = timerVal;
 8000b1c:	4a0c      	ldr	r2, [pc, #48]	; (8000b50 <setServo+0x8c>)
 8000b1e:	89fb      	ldrh	r3, [r7, #14]
 8000b20:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8000b22:	e008      	b.n	8000b36 <setServo+0x72>
	case 3:
		TIM4->CCR2 = timerVal;
 8000b24:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <setServo+0x8c>)
 8000b26:	89fb      	ldrh	r3, [r7, #14]
 8000b28:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8000b2a:	e004      	b.n	8000b36 <setServo+0x72>
	case 4:
		TIM4->CCR1 = timerVal;
 8000b2c:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <setServo+0x8c>)
 8000b2e:	89fb      	ldrh	r3, [r7, #14]
 8000b30:	6353      	str	r3, [r2, #52]	; 0x34
		break;
 8000b32:	e000      	b.n	8000b36 <setServo+0x72>

	default:
		break;
 8000b34:	bf00      	nop
	}
}
 8000b36:	bf00      	nop
 8000b38:	3714      	adds	r7, #20
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	42c80000 	.word	0x42c80000
 8000b48:	457a0000 	.word	0x457a0000
 8000b4c:	453b8000 	.word	0x453b8000
 8000b50:	40000800 	.word	0x40000800

08000b54 <setLEDs>:

void setLEDs(void) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08e      	sub	sp, #56	; 0x38
 8000b58:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	637b      	str	r3, [r7, #52]	; 0x34
 8000b5e:	e181      	b.n	8000e64 <setLEDs+0x310>
			i++) {
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 8000b60:	4aa1      	ldr	r2, [pc, #644]	; (8000de8 <setLEDs+0x294>)
 8000b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000b68:	2b03      	cmp	r3, #3
 8000b6a:	f200 8177 	bhi.w	8000e5c <setLEDs+0x308>
 8000b6e:	a201      	add	r2, pc, #4	; (adr r2, 8000b74 <setLEDs+0x20>)
 8000b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b74:	08000b85 	.word	0x08000b85
 8000b78:	08000c35 	.word	0x08000c35
 8000b7c:	08000ce5 	.word	0x08000ce5
 8000b80:	08000d95 	.word	0x08000d95
		case 0:
			for (int j = 0; j < 3; j++) {
 8000b84:	2300      	movs	r3, #0
 8000b86:	633b      	str	r3, [r7, #48]	; 0x30
 8000b88:	e042      	b.n	8000c10 <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b8e:	e039      	b.n	8000c04 <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000b90:	4996      	ldr	r1, [pc, #600]	; (8000dec <setLEDs+0x298>)
 8000b92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b94:	4613      	mov	r3, r2
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	4413      	add	r3, r2
 8000b9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b9c:	4413      	add	r3, r2
 8000b9e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ba2:	2180      	movs	r1, #128	; 0x80
 8000ba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ba6:	fa41 f202 	asr.w	r2, r1, r2
 8000baa:	4013      	ands	r3, r2
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d013      	beq.n	8000bd8 <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bb2:	00da      	lsls	r2, r3, #3
 8000bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bb6:	18d1      	adds	r1, r2, r3
 8000bb8:	4a8b      	ldr	r2, [pc, #556]	; (8000de8 <setLEDs+0x294>)
 8000bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bbc:	00db      	lsls	r3, r3, #3
 8000bbe:	4413      	add	r3, r2
 8000bc0:	685a      	ldr	r2, [r3, #4]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	4413      	add	r3, r2
 8000bc8:	00db      	lsls	r3, r3, #3
 8000bca:	440b      	add	r3, r1
								+ 8] = 60;
 8000bcc:	3308      	adds	r3, #8
 8000bce:	4a88      	ldr	r2, [pc, #544]	; (8000df0 <setLEDs+0x29c>)
 8000bd0:	213c      	movs	r1, #60	; 0x3c
 8000bd2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000bd6:	e012      	b.n	8000bfe <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bda:	00da      	lsls	r2, r3, #3
 8000bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bde:	18d1      	adds	r1, r2, r3
 8000be0:	4a81      	ldr	r2, [pc, #516]	; (8000de8 <setLEDs+0x294>)
 8000be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	4413      	add	r3, r2
 8000be8:	685a      	ldr	r2, [r3, #4]
 8000bea:	4613      	mov	r3, r2
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	4413      	add	r3, r2
 8000bf0:	00db      	lsls	r3, r3, #3
 8000bf2:	440b      	add	r3, r1
								+ 8] = 30;
 8000bf4:	3308      	adds	r3, #8
 8000bf6:	4a7e      	ldr	r2, [pc, #504]	; (8000df0 <setLEDs+0x29c>)
 8000bf8:	211e      	movs	r1, #30
 8000bfa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c00:	3301      	adds	r3, #1
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c06:	2b07      	cmp	r3, #7
 8000c08:	ddc2      	ble.n	8000b90 <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 8000c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	633b      	str	r3, [r7, #48]	; 0x30
 8000c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	ddb9      	ble.n	8000b8a <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58;
 8000c16:	2380      	movs	r3, #128	; 0x80
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c1a:	e007      	b.n	8000c2c <setLEDs+0xd8>
					i++) {
				LED_PWM_Data_0[i] = 0;
 8000c1c:	4a74      	ldr	r2, [pc, #464]	; (8000df0 <setLEDs+0x29c>)
 8000c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c20:	2100      	movs	r1, #0
 8000c22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c28:	3301      	adds	r3, #1
 8000c2a:	62bb      	str	r3, [r7, #40]	; 0x28
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58;
 8000c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c2e:	2bb1      	cmp	r3, #177	; 0xb1
 8000c30:	ddf4      	ble.n	8000c1c <setLEDs+0xc8>
			}
			break;
 8000c32:	e114      	b.n	8000e5e <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 8000c34:	2300      	movs	r3, #0
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
 8000c38:	e042      	b.n	8000cc0 <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	623b      	str	r3, [r7, #32]
 8000c3e:	e039      	b.n	8000cb4 <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000c40:	496a      	ldr	r1, [pc, #424]	; (8000dec <setLEDs+0x298>)
 8000c42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c44:	4613      	mov	r3, r2
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	4413      	add	r3, r2
 8000c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c4c:	4413      	add	r3, r2
 8000c4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c52:	2180      	movs	r1, #128	; 0x80
 8000c54:	6a3a      	ldr	r2, [r7, #32]
 8000c56:	fa41 f202 	asr.w	r2, r1, r2
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d013      	beq.n	8000c88 <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c62:	00da      	lsls	r2, r3, #3
 8000c64:	6a3b      	ldr	r3, [r7, #32]
 8000c66:	18d1      	adds	r1, r2, r3
 8000c68:	4a5f      	ldr	r2, [pc, #380]	; (8000de8 <setLEDs+0x294>)
 8000c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c6c:	00db      	lsls	r3, r3, #3
 8000c6e:	4413      	add	r3, r2
 8000c70:	685a      	ldr	r2, [r3, #4]
 8000c72:	4613      	mov	r3, r2
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	4413      	add	r3, r2
 8000c78:	00db      	lsls	r3, r3, #3
 8000c7a:	440b      	add	r3, r1
								+ 8] = 60;
 8000c7c:	3308      	adds	r3, #8
 8000c7e:	4a5d      	ldr	r2, [pc, #372]	; (8000df4 <setLEDs+0x2a0>)
 8000c80:	213c      	movs	r1, #60	; 0x3c
 8000c82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000c86:	e012      	b.n	8000cae <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8a:	00da      	lsls	r2, r3, #3
 8000c8c:	6a3b      	ldr	r3, [r7, #32]
 8000c8e:	18d1      	adds	r1, r2, r3
 8000c90:	4a55      	ldr	r2, [pc, #340]	; (8000de8 <setLEDs+0x294>)
 8000c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c94:	00db      	lsls	r3, r3, #3
 8000c96:	4413      	add	r3, r2
 8000c98:	685a      	ldr	r2, [r3, #4]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	4413      	add	r3, r2
 8000ca0:	00db      	lsls	r3, r3, #3
 8000ca2:	440b      	add	r3, r1
								+ 8] = 30;
 8000ca4:	3308      	adds	r3, #8
 8000ca6:	4a53      	ldr	r2, [pc, #332]	; (8000df4 <setLEDs+0x2a0>)
 8000ca8:	211e      	movs	r1, #30
 8000caa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000cae:	6a3b      	ldr	r3, [r7, #32]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	623b      	str	r3, [r7, #32]
 8000cb4:	6a3b      	ldr	r3, [r7, #32]
 8000cb6:	2b07      	cmp	r3, #7
 8000cb8:	ddc2      	ble.n	8000c40 <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 8000cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8000cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	ddb9      	ble.n	8000c3a <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58;
 8000cc6:	2380      	movs	r3, #128	; 0x80
 8000cc8:	61fb      	str	r3, [r7, #28]
 8000cca:	e007      	b.n	8000cdc <setLEDs+0x188>
					i++) {
				LED_PWM_Data_1[i] = 0;
 8000ccc:	4a49      	ldr	r2, [pc, #292]	; (8000df4 <setLEDs+0x2a0>)
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	61fb      	str	r3, [r7, #28]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58;
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	2bb1      	cmp	r3, #177	; 0xb1
 8000ce0:	ddf4      	ble.n	8000ccc <setLEDs+0x178>
			}
			break;
 8000ce2:	e0bc      	b.n	8000e5e <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61bb      	str	r3, [r7, #24]
 8000ce8:	e042      	b.n	8000d70 <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	e039      	b.n	8000d64 <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000cf0:	493e      	ldr	r1, [pc, #248]	; (8000dec <setLEDs+0x298>)
 8000cf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	4413      	add	r3, r2
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d02:	2180      	movs	r1, #128	; 0x80
 8000d04:	697a      	ldr	r2, [r7, #20]
 8000d06:	fa41 f202 	asr.w	r2, r1, r2
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d013      	beq.n	8000d38 <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	00da      	lsls	r2, r3, #3
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	18d1      	adds	r1, r2, r3
 8000d18:	4a33      	ldr	r2, [pc, #204]	; (8000de8 <setLEDs+0x294>)
 8000d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d1c:	00db      	lsls	r3, r3, #3
 8000d1e:	4413      	add	r3, r2
 8000d20:	685a      	ldr	r2, [r3, #4]
 8000d22:	4613      	mov	r3, r2
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	4413      	add	r3, r2
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	440b      	add	r3, r1
								+ 8] = 60;
 8000d2c:	3308      	adds	r3, #8
 8000d2e:	4a32      	ldr	r2, [pc, #200]	; (8000df8 <setLEDs+0x2a4>)
 8000d30:	213c      	movs	r1, #60	; 0x3c
 8000d32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000d36:	e012      	b.n	8000d5e <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	00da      	lsls	r2, r3, #3
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	18d1      	adds	r1, r2, r3
 8000d40:	4a29      	ldr	r2, [pc, #164]	; (8000de8 <setLEDs+0x294>)
 8000d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	4413      	add	r3, r2
 8000d48:	685a      	ldr	r2, [r3, #4]
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	4413      	add	r3, r2
 8000d50:	00db      	lsls	r3, r3, #3
 8000d52:	440b      	add	r3, r1
								+ 8] = 30;
 8000d54:	3308      	adds	r3, #8
 8000d56:	4a28      	ldr	r2, [pc, #160]	; (8000df8 <setLEDs+0x2a4>)
 8000d58:	211e      	movs	r1, #30
 8000d5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	3301      	adds	r3, #1
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	2b07      	cmp	r3, #7
 8000d68:	ddc2      	ble.n	8000cf0 <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	61bb      	str	r3, [r7, #24]
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	ddb9      	ble.n	8000cea <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58;
 8000d76:	2338      	movs	r3, #56	; 0x38
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	e007      	b.n	8000d8c <setLEDs+0x238>
					i++) {
				LED_PWM_Data_2[i] = 0;
 8000d7c:	4a1e      	ldr	r2, [pc, #120]	; (8000df8 <setLEDs+0x2a4>)
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	2100      	movs	r1, #0
 8000d82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	613b      	str	r3, [r7, #16]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58;
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	2b69      	cmp	r3, #105	; 0x69
 8000d90:	ddf4      	ble.n	8000d7c <setLEDs+0x228>
			}
			break;
 8000d92:	e064      	b.n	8000e5e <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 8000d94:	2300      	movs	r3, #0
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	e04e      	b.n	8000e38 <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	e045      	b.n	8000e2c <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000da0:	4912      	ldr	r1, [pc, #72]	; (8000dec <setLEDs+0x298>)
 8000da2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000da4:	4613      	mov	r3, r2
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	4413      	add	r3, r2
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	4413      	add	r3, r2
 8000dae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000db2:	2180      	movs	r1, #128	; 0x80
 8000db4:	68ba      	ldr	r2, [r7, #8]
 8000db6:	fa41 f202 	asr.w	r2, r1, r2
 8000dba:	4013      	ands	r3, r2
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d01f      	beq.n	8000e00 <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	00da      	lsls	r2, r3, #3
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	18d1      	adds	r1, r2, r3
 8000dc8:	4a07      	ldr	r2, [pc, #28]	; (8000de8 <setLEDs+0x294>)
 8000dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dcc:	00db      	lsls	r3, r3, #3
 8000dce:	4413      	add	r3, r2
 8000dd0:	685a      	ldr	r2, [r3, #4]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	4413      	add	r3, r2
 8000dd8:	00db      	lsls	r3, r3, #3
 8000dda:	440b      	add	r3, r1
								+ 8] = 60;
 8000ddc:	3308      	adds	r3, #8
 8000dde:	4a07      	ldr	r2, [pc, #28]	; (8000dfc <setLEDs+0x2a8>)
 8000de0:	213c      	movs	r1, #60	; 0x3c
 8000de2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000de6:	e01e      	b.n	8000e26 <setLEDs+0x2d2>
 8000de8:	0801ff04 	.word	0x0801ff04
 8000dec:	24000bc4 	.word	0x24000bc4
 8000df0:	240002e4 	.word	0x240002e4
 8000df4:	240005ac 	.word	0x240005ac
 8000df8:	24000874 	.word	0x24000874
 8000dfc:	24000a1c 	.word	0x24000a1c
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	00da      	lsls	r2, r3, #3
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	18d1      	adds	r1, r2, r3
 8000e08:	4a26      	ldr	r2, [pc, #152]	; (8000ea4 <setLEDs+0x350>)
 8000e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e0c:	00db      	lsls	r3, r3, #3
 8000e0e:	4413      	add	r3, r2
 8000e10:	685a      	ldr	r2, [r3, #4]
 8000e12:	4613      	mov	r3, r2
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	4413      	add	r3, r2
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	440b      	add	r3, r1
								+ 8] = 30;
 8000e1c:	3308      	adds	r3, #8
 8000e1e:	4a22      	ldr	r2, [pc, #136]	; (8000ea8 <setLEDs+0x354>)
 8000e20:	211e      	movs	r1, #30
 8000e22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	2b07      	cmp	r3, #7
 8000e30:	ddb6      	ble.n	8000da0 <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	3301      	adds	r3, #1
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	ddad      	ble.n	8000d9a <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58;
 8000e3e:	2338      	movs	r3, #56	; 0x38
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	e007      	b.n	8000e54 <setLEDs+0x300>
					i++) {
				LED_PWM_Data_3[i] = 0;
 8000e44:	4a18      	ldr	r2, [pc, #96]	; (8000ea8 <setLEDs+0x354>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	3301      	adds	r3, #1
 8000e52:	607b      	str	r3, [r7, #4]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2b69      	cmp	r3, #105	; 0x69
 8000e58:	ddf4      	ble.n	8000e44 <setLEDs+0x2f0>
			}
			break;
 8000e5a:	e000      	b.n	8000e5e <setLEDs+0x30a>
		default:
			break;
 8000e5c:	bf00      	nop
			i++) {
 8000e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e60:	3301      	adds	r3, #1
 8000e62:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3;
 8000e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e66:	2b0d      	cmp	r3, #13
 8000e68:	f77f ae7a 	ble.w	8000b60 <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0,
 8000e6c:	23b2      	movs	r3, #178	; 0xb2
 8000e6e:	4a0f      	ldr	r2, [pc, #60]	; (8000eac <setLEDs+0x358>)
 8000e70:	210c      	movs	r1, #12
 8000e72:	480f      	ldr	r0, [pc, #60]	; (8000eb0 <setLEDs+0x35c>)
 8000e74:	f00f fc34 	bl	80106e0 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1,
 8000e78:	23b2      	movs	r3, #178	; 0xb2
 8000e7a:	4a0e      	ldr	r2, [pc, #56]	; (8000eb4 <setLEDs+0x360>)
 8000e7c:	2108      	movs	r1, #8
 8000e7e:	480e      	ldr	r0, [pc, #56]	; (8000eb8 <setLEDs+0x364>)
 8000e80:	f00f fc2e 	bl	80106e0 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2,
 8000e84:	236a      	movs	r3, #106	; 0x6a
 8000e86:	4a0d      	ldr	r2, [pc, #52]	; (8000ebc <setLEDs+0x368>)
 8000e88:	2104      	movs	r1, #4
 8000e8a:	480d      	ldr	r0, [pc, #52]	; (8000ec0 <setLEDs+0x36c>)
 8000e8c:	f00f fc28 	bl	80106e0 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3,
 8000e90:	236a      	movs	r3, #106	; 0x6a
 8000e92:	4a05      	ldr	r2, [pc, #20]	; (8000ea8 <setLEDs+0x354>)
 8000e94:	2100      	movs	r1, #0
 8000e96:	480a      	ldr	r0, [pc, #40]	; (8000ec0 <setLEDs+0x36c>)
 8000e98:	f00f fc22 	bl	80106e0 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3

}
 8000e9c:	bf00      	nop
 8000e9e:	3738      	adds	r7, #56	; 0x38
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	0801ff04 	.word	0x0801ff04
 8000ea8:	24000a1c 	.word	0x24000a1c
 8000eac:	240002e4 	.word	0x240002e4
 8000eb0:	24001228 	.word	0x24001228
 8000eb4:	240005ac 	.word	0x240005ac
 8000eb8:	24001144 	.word	0x24001144
 8000ebc:	24000874 	.word	0x24000874
 8000ec0:	24001190 	.word	0x24001190

08000ec4 <LoRA_Read_Register>:
	} else {
		return normalized - LENGTH * 2 / 3;
	}
}

uint8_t LoRA_Read_Register(uint8_t addr) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ed4:	480d      	ldr	r0, [pc, #52]	; (8000f0c <LoRA_Read_Register+0x48>)
 8000ed6:	f008 f827 	bl	8008f28 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000eda:	1df9      	adds	r1, r7, #7
 8000edc:	2364      	movs	r3, #100	; 0x64
 8000ede:	2201      	movs	r2, #1
 8000ee0:	480b      	ldr	r0, [pc, #44]	; (8000f10 <LoRA_Read_Register+0x4c>)
 8000ee2:	f00e fdbd 	bl	800fa60 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 8000ee6:	f107 010f 	add.w	r1, r7, #15
 8000eea:	2364      	movs	r3, #100	; 0x64
 8000eec:	2201      	movs	r2, #1
 8000eee:	4808      	ldr	r0, [pc, #32]	; (8000f10 <LoRA_Read_Register+0x4c>)
 8000ef0:	f00e ffb2 	bl	800fe58 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000efa:	4804      	ldr	r0, [pc, #16]	; (8000f0c <LoRA_Read_Register+0x48>)
 8000efc:	f008 f814 	bl	8008f28 <HAL_GPIO_WritePin>

	return reg_value;
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	58020000 	.word	0x58020000
 8000f10:	240010bc 	.word	0x240010bc

08000f14 <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	460a      	mov	r2, r1
 8000f1e:	71fb      	strb	r3, [r7, #7]
 8000f20:	4613      	mov	r3, r2
 8000f22:	71bb      	strb	r3, [r7, #6]
	addr |= (1 << 7);
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f34:	480c      	ldr	r0, [pc, #48]	; (8000f68 <LoRA_Write_Register+0x54>)
 8000f36:	f007 fff7 	bl	8008f28 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000f3a:	1df9      	adds	r1, r7, #7
 8000f3c:	2364      	movs	r3, #100	; 0x64
 8000f3e:	2201      	movs	r2, #1
 8000f40:	480a      	ldr	r0, [pc, #40]	; (8000f6c <LoRA_Write_Register+0x58>)
 8000f42:	f00e fd8d 	bl	800fa60 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8000f46:	1db9      	adds	r1, r7, #6
 8000f48:	2364      	movs	r3, #100	; 0x64
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	4807      	ldr	r0, [pc, #28]	; (8000f6c <LoRA_Write_Register+0x58>)
 8000f4e:	f00e fd87 	bl	800fa60 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000f52:	2201      	movs	r2, #1
 8000f54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f58:	4803      	ldr	r0, [pc, #12]	; (8000f68 <LoRA_Write_Register+0x54>)
 8000f5a:	f007 ffe5 	bl	8008f28 <HAL_GPIO_WritePin>

}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	58020000 	.word	0x58020000
 8000f6c:	240010bc 	.word	0x240010bc

08000f70 <LoRA_sleep>:

void LoRA_sleep(void) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000f74:	2180      	movs	r1, #128	; 0x80
 8000f76:	2001      	movs	r0, #1
 8000f78:	f7ff ffcc 	bl	8000f14 <LoRA_Write_Register>
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency) {
 8000f80:	b5b0      	push	{r4, r5, r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t) frequency << 19) / 32000000;
 8000f88:	6879      	ldr	r1, [r7, #4]
 8000f8a:	17c8      	asrs	r0, r1, #31
 8000f8c:	460a      	mov	r2, r1
 8000f8e:	4603      	mov	r3, r0
 8000f90:	1355      	asrs	r5, r2, #13
 8000f92:	04d4      	lsls	r4, r2, #19
 8000f94:	4a18      	ldr	r2, [pc, #96]	; (8000ff8 <LoRA_set_frequency+0x78>)
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	4620      	mov	r0, r4
 8000f9c:	4629      	mov	r1, r5
 8000f9e:	f7ff fbdb 	bl	8000758 <__aeabi_uldivmod>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t) (frf >> 16));
 8000faa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	0c02      	lsrs	r2, r0, #16
 8000fb8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fbc:	0c0b      	lsrs	r3, r1, #16
 8000fbe:	b2d3      	uxtb	r3, r2
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	2006      	movs	r0, #6
 8000fc4:	f7ff ffa6 	bl	8000f14 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t) (frf >> 8));
 8000fc8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fcc:	f04f 0200 	mov.w	r2, #0
 8000fd0:	f04f 0300 	mov.w	r3, #0
 8000fd4:	0a02      	lsrs	r2, r0, #8
 8000fd6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000fda:	0a0b      	lsrs	r3, r1, #8
 8000fdc:	b2d3      	uxtb	r3, r2
 8000fde:	4619      	mov	r1, r3
 8000fe0:	2007      	movs	r0, #7
 8000fe2:	f7ff ff97 	bl	8000f14 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t) (frf >> 0));
 8000fe6:	7a3b      	ldrb	r3, [r7, #8]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	2008      	movs	r0, #8
 8000fec:	f7ff ff92 	bl	8000f14 <LoRA_Write_Register>
}
 8000ff0:	bf00      	nop
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bdb0      	pop	{r4, r5, r7, pc}
 8000ff8:	01e84800 	.word	0x01e84800

08000ffc <LoRA_setOCP>:

void LoRA_idle() {
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
}

void LoRA_setOCP(uint8_t mA) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
	uint8_t ocpTrim = 27;
 8001006:	231b      	movs	r3, #27
 8001008:	73fb      	strb	r3, [r7, #15]

	if (mA <= 120) {
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	2b78      	cmp	r3, #120	; 0x78
 800100e:	d809      	bhi.n	8001024 <LoRA_setOCP+0x28>
		ocpTrim = (mA - 45) / 5;
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	3b2d      	subs	r3, #45	; 0x2d
 8001014:	4a11      	ldr	r2, [pc, #68]	; (800105c <LoRA_setOCP+0x60>)
 8001016:	fb82 1203 	smull	r1, r2, r2, r3
 800101a:	1052      	asrs	r2, r2, #1
 800101c:	17db      	asrs	r3, r3, #31
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	73fb      	strb	r3, [r7, #15]
 8001022:	e00b      	b.n	800103c <LoRA_setOCP+0x40>
	} else if (mA <= 240) {
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	2bf0      	cmp	r3, #240	; 0xf0
 8001028:	d808      	bhi.n	800103c <LoRA_setOCP+0x40>
		ocpTrim = (mA + 30) / 10;
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	331e      	adds	r3, #30
 800102e:	4a0b      	ldr	r2, [pc, #44]	; (800105c <LoRA_setOCP+0x60>)
 8001030:	fb82 1203 	smull	r1, r2, r2, r3
 8001034:	1092      	asrs	r2, r2, #2
 8001036:	17db      	asrs	r3, r3, #31
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	73fb      	strb	r3, [r7, #15]
	}

	LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 800103c:	7bfb      	ldrb	r3, [r7, #15]
 800103e:	f003 031f 	and.w	r3, r3, #31
 8001042:	b2db      	uxtb	r3, r3
 8001044:	f043 0320 	orr.w	r3, r3, #32
 8001048:	b2db      	uxtb	r3, r3
 800104a:	4619      	mov	r1, r3
 800104c:	200b      	movs	r0, #11
 800104e:	f7ff ff61 	bl	8000f14 <LoRA_Write_Register>
}
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	66666667 	.word	0x66666667

08001060 <LoRA_setTxPower>:

void LoRA_setTxPower(int level) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	// PA BOOST
	if (level > 17) {
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b11      	cmp	r3, #17
 800106c:	dd0f      	ble.n	800108e <LoRA_setTxPower+0x2e>
		if (level > 20) {
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2b14      	cmp	r3, #20
 8001072:	dd01      	ble.n	8001078 <LoRA_setTxPower+0x18>
			level = 20;
 8001074:	2314      	movs	r3, #20
 8001076:	607b      	str	r3, [r7, #4]
		}

		// subtract 3 from level, so 18 - 20 maps to 15 - 17
		level -= 3;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b03      	subs	r3, #3
 800107c:	607b      	str	r3, [r7, #4]

		// High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
		LoRA_Write_Register(REG_PA_DAC, 0x87);
 800107e:	2187      	movs	r1, #135	; 0x87
 8001080:	204d      	movs	r0, #77	; 0x4d
 8001082:	f7ff ff47 	bl	8000f14 <LoRA_Write_Register>
		LoRA_setOCP(140);
 8001086:	208c      	movs	r0, #140	; 0x8c
 8001088:	f7ff ffb8 	bl	8000ffc <LoRA_setOCP>
 800108c:	e00b      	b.n	80010a6 <LoRA_setTxPower+0x46>
	} else {
		if (level < 2) {
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b01      	cmp	r3, #1
 8001092:	dc01      	bgt.n	8001098 <LoRA_setTxPower+0x38>
			level = 2;
 8001094:	2302      	movs	r3, #2
 8001096:	607b      	str	r3, [r7, #4]
		}
		//Default value PA_HF/LF or +17dBm
		LoRA_Write_Register(REG_PA_DAC, 0x84);
 8001098:	2184      	movs	r1, #132	; 0x84
 800109a:	204d      	movs	r0, #77	; 0x4d
 800109c:	f7ff ff3a 	bl	8000f14 <LoRA_Write_Register>
		LoRA_setOCP(100);
 80010a0:	2064      	movs	r0, #100	; 0x64
 80010a2:	f7ff ffab 	bl	8000ffc <LoRA_setOCP>
	}

	LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	3b02      	subs	r3, #2
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	b25b      	sxtb	r3, r3
 80010b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010b4:	b25b      	sxtb	r3, r3
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	4619      	mov	r1, r3
 80010ba:	2009      	movs	r0, #9
 80010bc:	f7ff ff2a 	bl	8000f14 <LoRA_Write_Register>
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <LoRA_explicit_header_mode>:

void LoRA_explicit_header_mode() {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_MODEM_CONFIG_1,
			LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
 80010cc:	201d      	movs	r0, #29
 80010ce:	f7ff fef9 	bl	8000ec4 <LoRA_Read_Register>
 80010d2:	4603      	mov	r3, r0
	LoRA_Write_Register(REG_MODEM_CONFIG_1,
 80010d4:	f023 0301 	bic.w	r3, r3, #1
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	4619      	mov	r1, r3
 80010dc:	201d      	movs	r0, #29
 80010de:	f7ff ff19 	bl	8000f14 <LoRA_Write_Register>
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <LoRA_begin>:

void LoRA_begin(long frequency) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 80010f0:	2201      	movs	r2, #1
 80010f2:	2101      	movs	r1, #1
 80010f4:	4818      	ldr	r0, [pc, #96]	; (8001158 <LoRA_begin+0x70>)
 80010f6:	f007 ff17 	bl	8008f28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 80010fa:	2201      	movs	r2, #1
 80010fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001100:	4816      	ldr	r0, [pc, #88]	; (800115c <LoRA_begin+0x74>)
 8001102:	f007 ff11 	bl	8008f28 <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 8001106:	2042      	movs	r0, #66	; 0x42
 8001108:	f7ff fedc 	bl	8000ec4 <LoRA_Read_Register>
 800110c:	4603      	mov	r3, r0
 800110e:	73fb      	strb	r3, [r7, #15]

	LoRA_sleep();
 8001110:	f7ff ff2e 	bl	8000f70 <LoRA_sleep>
	LoRA_set_frequency(868000000);
 8001114:	4812      	ldr	r0, [pc, #72]	; (8001160 <LoRA_begin+0x78>)
 8001116:	f7ff ff33 	bl	8000f80 <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 800111a:	2100      	movs	r1, #0
 800111c:	200f      	movs	r0, #15
 800111e:	f7ff fef9 	bl	8000f14 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 8001122:	2100      	movs	r1, #0
 8001124:	200e      	movs	r0, #14
 8001126:	f7ff fef5 	bl	8000f14 <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 800112a:	200c      	movs	r0, #12
 800112c:	f7ff feca 	bl	8000ec4 <LoRA_Read_Register>
 8001130:	4603      	mov	r3, r0
 8001132:	f043 0303 	orr.w	r3, r3, #3
 8001136:	b2db      	uxtb	r3, r3
 8001138:	4619      	mov	r1, r3
 800113a:	200c      	movs	r0, #12
 800113c:	f7ff feea 	bl	8000f14 <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 8001140:	2104      	movs	r1, #4
 8001142:	2026      	movs	r0, #38	; 0x26
 8001144:	f7ff fee6 	bl	8000f14 <LoRA_Write_Register>

	LoRA_setTxPower(17);
 8001148:	2011      	movs	r0, #17
 800114a:	f7ff ff89 	bl	8001060 <LoRA_setTxPower>

}
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	58020c00 	.word	0x58020c00
 800115c:	58020000 	.word	0x58020000
 8001160:	33bca100 	.word	0x33bca100

08001164 <LoRA_beginPacket>:

void LoRA_beginPacket() {
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
	LoRA_explicit_header_mode();
 8001168:	f7ff ffae 	bl	80010c8 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 800116c:	2100      	movs	r1, #0
 800116e:	200d      	movs	r0, #13
 8001170:	f7ff fed0 	bl	8000f14 <LoRA_Write_Register>
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, 0);
 8001174:	2100      	movs	r1, #0
 8001176:	2022      	movs	r0, #34	; 0x22
 8001178:	f7ff fecc 	bl	8000f14 <LoRA_Write_Register>
}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}

08001180 <LoRA_endPacket>:

void LoRA_endPacket(){
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8001184:	2183      	movs	r1, #131	; 0x83
 8001186:	2001      	movs	r0, #1
 8001188:	f7ff fec4 	bl	8000f14 <LoRA_Write_Register>

	while((LoRA_Read_Register(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0){
 800118c:	bf00      	nop
 800118e:	2012      	movs	r0, #18
 8001190:	f7ff fe98 	bl	8000ec4 <LoRA_Read_Register>
 8001194:	4603      	mov	r3, r0
 8001196:	f003 0308 	and.w	r3, r3, #8
 800119a:	2b00      	cmp	r3, #0
 800119c:	d0f7      	beq.n	800118e <LoRA_endPacket+0xe>

	}
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 800119e:	2185      	movs	r1, #133	; 0x85
 80011a0:	2001      	movs	r0, #1
 80011a2:	f7ff feb7 	bl	8000f14 <LoRA_Write_Register>

	LoRA_Write_Register(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 80011a6:	2108      	movs	r1, #8
 80011a8:	2012      	movs	r0, #18
 80011aa:	f7ff feb3 	bl	8000f14 <LoRA_Write_Register>

}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <LoRA_parsePacket>:


int LoRA_parsePacket(){
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
	int packetLenght = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	607b      	str	r3, [r7, #4]
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 80011bc:	2012      	movs	r0, #18
 80011be:	f7ff fe81 	bl	8000ec4 <LoRA_Read_Register>
 80011c2:	4603      	mov	r3, r0
 80011c4:	603b      	str	r3, [r7, #0]

	LoRA_explicit_header_mode();
 80011c6:	f7ff ff7f 	bl	80010c8 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	4619      	mov	r1, r3
 80011d0:	2012      	movs	r0, #18
 80011d2:	f7ff fe9f 	bl	8000f14 <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d016      	beq.n	800120e <LoRA_parsePacket+0x5c>
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	f003 0320 	and.w	r3, r3, #32
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d111      	bne.n	800120e <LoRA_parsePacket+0x5c>
		packetLenght = LoRA_Read_Register(REG_RX_NB_BYTES);
 80011ea:	2013      	movs	r0, #19
 80011ec:	f7ff fe6a 	bl	8000ec4 <LoRA_Read_Register>
 80011f0:	4603      	mov	r3, r0
 80011f2:	607b      	str	r3, [r7, #4]
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 80011f4:	2010      	movs	r0, #16
 80011f6:	f7ff fe65 	bl	8000ec4 <LoRA_Read_Register>
 80011fa:	4603      	mov	r3, r0
 80011fc:	4619      	mov	r1, r3
 80011fe:	200d      	movs	r0, #13
 8001200:	f7ff fe88 	bl	8000f14 <LoRA_Write_Register>
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8001204:	2185      	movs	r1, #133	; 0x85
 8001206:	2001      	movs	r0, #1
 8001208:	f7ff fe84 	bl	8000f14 <LoRA_Write_Register>
 800120c:	e00d      	b.n	800122a <LoRA_parsePacket+0x78>

		//LoRA_idle();
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS)){
 800120e:	2001      	movs	r0, #1
 8001210:	f7ff fe58 	bl	8000ec4 <LoRA_Read_Register>
 8001214:	4603      	mov	r3, r0
 8001216:	2b85      	cmp	r3, #133	; 0x85
 8001218:	d007      	beq.n	800122a <LoRA_parsePacket+0x78>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 800121a:	2100      	movs	r1, #0
 800121c:	200d      	movs	r0, #13
 800121e:	f7ff fe79 	bl	8000f14 <LoRA_Write_Register>

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8001222:	2185      	movs	r1, #133	; 0x85
 8001224:	2001      	movs	r0, #1
 8001226:	f7ff fe75 	bl	8000f14 <LoRA_Write_Register>
	}
	return packetLenght;
 800122a:	687b      	ldr	r3, [r7, #4]

}
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <LoRA_sendPacket>:

void LoRA_sendPacket(char *data) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 800123c:	2012      	movs	r0, #18
 800123e:	f7ff fe41 	bl	8000ec4 <LoRA_Read_Register>
 8001242:	4603      	mov	r3, r0
 8001244:	60bb      	str	r3, [r7, #8]
	/*char debug[250];
	sprintf(debug, "here: %d\n", (irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK));
	CDC_Transmit_HS(debug, strlen(debug));
	HAL_Delay(100);*/
	if(!((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0))
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800124c:	2b00      	cmp	r3, #0
 800124e:	d004      	beq.n	800125a <LoRA_sendPacket+0x26>
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	f003 0320 	and.w	r3, r3, #32
 8001256:	2b00      	cmp	r3, #0
 8001258:	d022      	beq.n	80012a0 <LoRA_sendPacket+0x6c>
	{
		//CDC_Transmit_HS("here1\n", strlen("here1\n"));
		LoRA_beginPacket();
 800125a:	f7ff ff83 	bl	8001164 <LoRA_beginPacket>
    	for(int i = 0; i < strlen(data); i++){
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	e00a      	b.n	800127a <LoRA_sendPacket+0x46>
    		LoRA_Write_Register(REG_FIFO, data[i]);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	4619      	mov	r1, r3
 800126e:	2000      	movs	r0, #0
 8001270:	f7ff fe50 	bl	8000f14 <LoRA_Write_Register>
    	for(int i = 0; i < strlen(data); i++){
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	3301      	adds	r3, #1
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff f8a8 	bl	80003d0 <strlen>
 8001280:	4602      	mov	r2, r0
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	429a      	cmp	r2, r3
 8001286:	d8ed      	bhi.n	8001264 <LoRA_sendPacket+0x30>
    	}
    	LoRA_Write_Register(REG_PAYLOAD_LENGTH, strlen(data));
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff f8a1 	bl	80003d0 <strlen>
 800128e:	4603      	mov	r3, r0
 8001290:	b2db      	uxtb	r3, r3
 8001292:	4619      	mov	r1, r3
 8001294:	2022      	movs	r0, #34	; 0x22
 8001296:	f7ff fe3d 	bl	8000f14 <LoRA_Write_Register>
    	LoRA_endPacket();
 800129a:	f7ff ff71 	bl	8001180 <LoRA_endPacket>
 800129e:	e004      	b.n	80012aa <LoRA_sendPacket+0x76>
	}
	else {
		//CDC_Transmit_HS("here2\n", strlen("here2\n"));
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 80012a0:	2185      	movs	r1, #133	; 0x85
 80012a2:	2001      	movs	r0, #1
 80012a4:	f7ff fe36 	bl	8000f14 <LoRA_Write_Register>
	}
	/*char sent[300];
	sprintf(sent, "\nsent: %s\n", data);
	HAL_Delay(100);
	CDC_Transmit_HS(sent, strlen(sent));*/
}
 80012a8:	bf00      	nop
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <disarm>:
int mount_SD() {
	int status = f_mount(&SDFatFS, (TCHAR const*) SDPath, 0);
	return status;
}

int disarm(char *state) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 80012bc:	2200      	movs	r2, #0
 80012be:	2102      	movs	r1, #2
 80012c0:	482d      	ldr	r0, [pc, #180]	; (8001378 <disarm+0xc4>)
 80012c2:	f007 fe31 	bl	8008f28 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);

	HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2102      	movs	r1, #2
 80012ca:	482c      	ldr	r0, [pc, #176]	; (800137c <disarm+0xc8>)
 80012cc:	f007 fe2c 	bl	8008f28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 80012d0:	2200      	movs	r2, #0
 80012d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012d6:	482a      	ldr	r0, [pc, #168]	; (8001380 <disarm+0xcc>)
 80012d8:	f007 fe26 	bl	8008f28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 80012dc:	2200      	movs	r2, #0
 80012de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012e2:	4827      	ldr	r0, [pc, #156]	; (8001380 <disarm+0xcc>)
 80012e4:	f007 fe20 	bl	8008f28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 80012e8:	2200      	movs	r2, #0
 80012ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012ee:	4824      	ldr	r0, [pc, #144]	; (8001380 <disarm+0xcc>)
 80012f0:	f007 fe1a 	bl	8008f28 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 80012f4:	2200      	movs	r2, #0
 80012f6:	2102      	movs	r1, #2
 80012f8:	4822      	ldr	r0, [pc, #136]	; (8001384 <disarm+0xd0>)
 80012fa:	f007 fe15 	bl	8008f28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001304:	4820      	ldr	r0, [pc, #128]	; (8001388 <disarm+0xd4>)
 8001306:	f007 fe0f 	bl	8008f28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 800130a:	2200      	movs	r2, #0
 800130c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001310:	481d      	ldr	r0, [pc, #116]	; (8001388 <disarm+0xd4>)
 8001312:	f007 fe09 	bl	8008f28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800131c:	481a      	ldr	r0, [pc, #104]	; (8001388 <disarm+0xd4>)
 800131e:	f007 fe03 	bl	8008f28 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001322:	210c      	movs	r1, #12
 8001324:	4819      	ldr	r0, [pc, #100]	; (800138c <disarm+0xd8>)
 8001326:	f00f f8bf 	bl	80104a8 <HAL_TIM_PWM_Start>
	setServo(1, 0);
 800132a:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8001390 <disarm+0xdc>
 800132e:	2001      	movs	r0, #1
 8001330:	f7ff fbc8 	bl	8000ac4 <setServo>

	LED_Color_Data[7][0] = 255;
 8001334:	4b17      	ldr	r3, [pc, #92]	; (8001394 <disarm+0xe0>)
 8001336:	22ff      	movs	r2, #255	; 0xff
 8001338:	655a      	str	r2, [r3, #84]	; 0x54
	LED_Color_Data[7][1] = 0;
 800133a:	4b16      	ldr	r3, [pc, #88]	; (8001394 <disarm+0xe0>)
 800133c:	2200      	movs	r2, #0
 800133e:	659a      	str	r2, [r3, #88]	; 0x58
	LED_Color_Data[7][2] = 0;
 8001340:	4b14      	ldr	r3, [pc, #80]	; (8001394 <disarm+0xe0>)
 8001342:	2200      	movs	r2, #0
 8001344:	65da      	str	r2, [r3, #92]	; 0x5c

	LED_Color_Data[2][0] = 255;
 8001346:	4b13      	ldr	r3, [pc, #76]	; (8001394 <disarm+0xe0>)
 8001348:	22ff      	movs	r2, #255	; 0xff
 800134a:	619a      	str	r2, [r3, #24]
	LED_Color_Data[2][1] = 0;
 800134c:	4b11      	ldr	r3, [pc, #68]	; (8001394 <disarm+0xe0>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
	LED_Color_Data[2][2] = 0;
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <disarm+0xe0>)
 8001354:	2200      	movs	r2, #0
 8001356:	621a      	str	r2, [r3, #32]
	setLEDs();
 8001358:	f7ff fbfc 	bl	8000b54 <setLEDs>

	strcpy(state, "DISARMED");
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	490e      	ldr	r1, [pc, #56]	; (8001398 <disarm+0xe4>)
 8001360:	461a      	mov	r2, r3
 8001362:	460b      	mov	r3, r1
 8001364:	cb03      	ldmia	r3!, {r0, r1}
 8001366:	6010      	str	r0, [r2, #0]
 8001368:	6051      	str	r1, [r2, #4]
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	7213      	strb	r3, [r2, #8]
	return 0;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	58020000 	.word	0x58020000
 800137c:	58020400 	.word	0x58020400
 8001380:	58021400 	.word	0x58021400
 8001384:	58021800 	.word	0x58021800
 8001388:	58021000 	.word	0x58021000
 800138c:	240011dc 	.word	0x240011dc
 8001390:	00000000 	.word	0x00000000
 8001394:	24000bc4 	.word	0x24000bc4
 8001398:	0801fcb8 	.word	0x0801fcb8

0800139c <arm>:

int arm(char *state) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 1);
 80013a4:	2201      	movs	r2, #1
 80013a6:	2102      	movs	r1, #2
 80013a8:	4810      	ldr	r0, [pc, #64]	; (80013ec <arm+0x50>)
 80013aa:	f007 fdbd 	bl	8008f28 <HAL_GPIO_WritePin>
//HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 1);

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80013ae:	210c      	movs	r1, #12
 80013b0:	480f      	ldr	r0, [pc, #60]	; (80013f0 <arm+0x54>)
 80013b2:	f00f f879 	bl	80104a8 <HAL_TIM_PWM_Start>
	setServo(1, 100);
 80013b6:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80013f4 <arm+0x58>
 80013ba:	2001      	movs	r0, #1
 80013bc:	f7ff fb82 	bl	8000ac4 <setServo>

	strcpy(state, "ARMED");
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a0d      	ldr	r2, [pc, #52]	; (80013f8 <arm+0x5c>)
 80013c4:	6810      	ldr	r0, [r2, #0]
 80013c6:	6018      	str	r0, [r3, #0]
 80013c8:	8892      	ldrh	r2, [r2, #4]
 80013ca:	809a      	strh	r2, [r3, #4]
	LED_Color_Data[7][0] = 0;
 80013cc:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <arm+0x60>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	655a      	str	r2, [r3, #84]	; 0x54
	LED_Color_Data[7][1] = 255;
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <arm+0x60>)
 80013d4:	22ff      	movs	r2, #255	; 0xff
 80013d6:	659a      	str	r2, [r3, #88]	; 0x58
	LED_Color_Data[7][2] = 0;
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <arm+0x60>)
 80013da:	2200      	movs	r2, #0
 80013dc:	65da      	str	r2, [r3, #92]	; 0x5c
	setLEDs();
 80013de:	f7ff fbb9 	bl	8000b54 <setLEDs>
	return 0;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	58020000 	.word	0x58020000
 80013f0:	240011dc 	.word	0x240011dc
 80013f4:	42c80000 	.word	0x42c80000
 80013f8:	0801fcc4 	.word	0x0801fcc4
 80013fc:	24000bc4 	.word	0x24000bc4

08001400 <recv_packet>:

int recv_packet(char *LoRA_data, int max_length) {
 8001400:	b590      	push	{r4, r7, lr}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
	int packet_length = LoRA_parsePacket();
 800140a:	f7ff fed2 	bl	80011b2 <LoRA_parsePacket>
 800140e:	60b8      	str	r0, [r7, #8]
	if (max_length - 1 < packet_length) //-1 for the null terminator
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	429a      	cmp	r2, r3
 8001416:	dc01      	bgt.n	800141c <recv_packet+0x1c>
			{
		return 0;
 8001418:	2300      	movs	r3, #0
 800141a:	e01c      	b.n	8001456 <recv_packet+0x56>
	}
	if (packet_length) {
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d018      	beq.n	8001454 <recv_packet+0x54>
		for (int i = 0; i < packet_length; i++) {
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	e00a      	b.n	800143e <recv_packet+0x3e>
			LoRA_data[i] = LoRA_Read_Register(0x00);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	18d4      	adds	r4, r2, r3
 800142e:	2000      	movs	r0, #0
 8001430:	f7ff fd48 	bl	8000ec4 <LoRA_Read_Register>
 8001434:	4603      	mov	r3, r0
 8001436:	7023      	strb	r3, [r4, #0]
		for (int i = 0; i < packet_length; i++) {
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	3301      	adds	r3, #1
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	429a      	cmp	r2, r3
 8001444:	dbf0      	blt.n	8001428 <recv_packet+0x28>
		}
		LoRA_data[packet_length] = '\0';
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	4413      	add	r3, r2
 800144c:	2200      	movs	r2, #0
 800144e:	701a      	strb	r2, [r3, #0]
	    /*char rec[300];
	    sprintf(rec, "received: %s\n", LoRA_data);
	    CDC_Transmit_HS(rec, strlen(rec));*/
		return packet_length;
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	e000      	b.n	8001456 <recv_packet+0x56>
	} else {
		return 0;
 8001454:	2300      	movs	r3, #0
	}
}
 8001456:	4618      	mov	r0, r3
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	bd90      	pop	{r4, r7, pc}

0800145e <reliable_send_packet>:

void reliable_send_packet(char *LoRA_data) {
 800145e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001462:	b087      	sub	sp, #28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	466b      	mov	r3, sp
 800146a:	461e      	mov	r6, r3
	/*char debug[300];
	sprintf(debug, "sending: %s", LoRA_data);
	CDC_Transmit_HS(debug, strlen(debug));*/

	uint16_t length = strlen(LoRA_data) + 1; //+1 for the \0
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7fe ffaf 	bl	80003d0 <strlen>
 8001472:	4603      	mov	r3, r0
 8001474:	b29b      	uxth	r3, r3
 8001476:	3301      	adds	r3, #1
 8001478:	827b      	strh	r3, [r7, #18]
	char acknowledge[length];
 800147a:	8a79      	ldrh	r1, [r7, #18]
 800147c:	460b      	mov	r3, r1
 800147e:	3b01      	subs	r3, #1
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	b28b      	uxth	r3, r1
 8001484:	2200      	movs	r2, #0
 8001486:	4698      	mov	r8, r3
 8001488:	4691      	mov	r9, r2
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	f04f 0300 	mov.w	r3, #0
 8001492:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001496:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800149a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800149e:	b28b      	uxth	r3, r1
 80014a0:	2200      	movs	r2, #0
 80014a2:	461c      	mov	r4, r3
 80014a4:	4615      	mov	r5, r2
 80014a6:	f04f 0200 	mov.w	r2, #0
 80014aa:	f04f 0300 	mov.w	r3, #0
 80014ae:	00eb      	lsls	r3, r5, #3
 80014b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80014b4:	00e2      	lsls	r2, r4, #3
 80014b6:	460b      	mov	r3, r1
 80014b8:	3307      	adds	r3, #7
 80014ba:	08db      	lsrs	r3, r3, #3
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	ebad 0d03 	sub.w	sp, sp, r3
 80014c2:	466b      	mov	r3, sp
 80014c4:	3300      	adds	r3, #0
 80014c6:	60bb      	str	r3, [r7, #8]
	uint32_t lastTime = HAL_GetTick();
 80014c8:	f002 fe24 	bl	8004114 <HAL_GetTick>
 80014cc:	6178      	str	r0, [r7, #20]
	LoRA_sendPacket(LoRA_data);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff feb0 	bl	8001234 <LoRA_sendPacket>
	while (1) {

		if (recv_packet(acknowledge, length)) {
 80014d4:	8a7b      	ldrh	r3, [r7, #18]
 80014d6:	4619      	mov	r1, r3
 80014d8:	68b8      	ldr	r0, [r7, #8]
 80014da:	f7ff ff91 	bl	8001400 <recv_packet>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d009      	beq.n	80014f8 <reliable_send_packet+0x9a>
			//cehck crc
			if (strcmp(acknowledge, LoRA_data) != 0) {
 80014e4:	6879      	ldr	r1, [r7, #4]
 80014e6:	68b8      	ldr	r0, [r7, #8]
 80014e8:	f7fe ff12 	bl	8000310 <strcmp>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d011      	beq.n	8001516 <reliable_send_packet+0xb8>
				LoRA_sendPacket(LoRA_data);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff fe9e 	bl	8001234 <LoRA_sendPacket>
			} else {
				break;
			}
		}

		if (HAL_GetTick() - lastTime > 2000) {
 80014f8:	f002 fe0c 	bl	8004114 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001506:	d9e5      	bls.n	80014d4 <reliable_send_packet+0x76>
			LoRA_sendPacket(LoRA_data);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff fe93 	bl	8001234 <LoRA_sendPacket>
			lastTime = HAL_GetTick();
 800150e:	f002 fe01 	bl	8004114 <HAL_GetTick>
 8001512:	6178      	str	r0, [r7, #20]
		if (recv_packet(acknowledge, length)) {
 8001514:	e7de      	b.n	80014d4 <reliable_send_packet+0x76>
				break;
 8001516:	bf00      	nop
 8001518:	46b5      	mov	sp, r6
		}
	}
}
 800151a:	bf00      	nop
 800151c:	371c      	adds	r7, #28
 800151e:	46bd      	mov	sp, r7
 8001520:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001524 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001524:	b5b0      	push	{r4, r5, r7, lr}
 8001526:	f5ad 5d20 	sub.w	sp, sp, #10240	; 0x2800
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800152e:	f002 fd6b 	bl	8004008 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001532:	f000 fd2b 	bl	8001f8c <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8001536:	f000 fda1 	bl	800207c <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800153a:	f001 fb4d 	bl	8002bd8 <MX_GPIO_Init>
	MX_DMA_Init();
 800153e:	f001 faeb 	bl	8002b18 <MX_DMA_Init>
	MX_SPI3_Init();
 8001542:	f001 f821 	bl	8002588 <MX_SPI3_Init>
	MX_FDCAN3_Init();
 8001546:	f000 feb1 	bl	80022ac <MX_FDCAN3_Init>
	MX_USART6_UART_Init();
 800154a:	f001 fa99 	bl	8002a80 <MX_USART6_UART_Init>
	MX_ADC1_Init();
 800154e:	f000 fdc7 	bl	80020e0 <MX_ADC1_Init>
	MX_TIM4_Init();
 8001552:	f001 f92b 	bl	80027ac <MX_TIM4_Init>
	MX_ADC3_Init();
 8001556:	f000 fe3b 	bl	80021d0 <MX_ADC3_Init>
	MX_SPI2_Init();
 800155a:	f000 ffbf 	bl	80024dc <MX_SPI2_Init>
	MX_I2C2_Init();
 800155e:	f000 ff09 	bl	8002374 <MX_I2C2_Init>
	MX_TIM2_Init();
 8001562:	f001 f867 	bl	8002634 <MX_TIM2_Init>
	MX_TIM5_Init();
 8001566:	f001 f99d 	bl	80028a4 <MX_TIM5_Init>
	MX_TIM3_Init();
 800156a:	f001 f8bb 	bl	80026e4 <MX_TIM3_Init>
	MX_USB_DEVICE_Init();
 800156e:	f018 ff6d 	bl	801a44c <MX_USB_DEVICE_Init>
	MX_SPI1_Init();
 8001572:	f000 ff5d 	bl	8002430 <MX_SPI1_Init>
	MX_UART4_Init();
 8001576:	f001 fa37 	bl	80029e8 <MX_UART4_Init>
	MX_FATFS_Init();
 800157a:	f013 fd87 	bl	801508c <MX_FATFS_Init>
	MX_SDMMC2_SD_Init();
 800157e:	f000 ff39 	bl	80023f4 <MX_SDMMC2_SD_Init>
	MX_TIM13_Init();
 8001582:	f001 f9e9 	bl	8002958 <MX_TIM13_Init>
	MX_TIM14_Init();
 8001586:	f001 fa0b 	bl	80029a0 <MX_TIM14_Init>
	/* USER CODE BEGIN 2 */
	char dummy[50];
	disarm(dummy);
 800158a:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fe90 	bl	80012b4 <disarm>

	FATFS FatFs;
	FIL Fil;
	FRESULT FR_Status;
	FR_Status = f_mount(&FatFs, SDPath, 1);
 8001594:	4bc1      	ldr	r3, [pc, #772]	; (800189c <main+0x378>)
 8001596:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800159a:	f103 0310 	add.w	r3, r3, #16
 800159e:	443b      	add	r3, r7
 80015a0:	2201      	movs	r2, #1
 80015a2:	49bf      	ldr	r1, [pc, #764]	; (80018a0 <main+0x37c>)
 80015a4:	4618      	mov	r0, r3
 80015a6:	f018 f945 	bl	8019834 <f_mount>
 80015aa:	4603      	mov	r3, r0
 80015ac:	f642 0207 	movw	r2, #10247	; 0x2807
 80015b0:	443a      	add	r2, r7
 80015b2:	7013      	strb	r3, [r2, #0]

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80015b4:	210c      	movs	r1, #12
 80015b6:	48bb      	ldr	r0, [pc, #748]	; (80018a4 <main+0x380>)
 80015b8:	f00e ff76 	bl	80104a8 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 80015bc:	2201      	movs	r2, #1
 80015be:	2104      	movs	r1, #4
 80015c0:	48b9      	ldr	r0, [pc, #740]	; (80018a8 <main+0x384>)
 80015c2:	f007 fcb1 	bl	8008f28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 80015c6:	2201      	movs	r2, #1
 80015c8:	2108      	movs	r1, #8
 80015ca:	48b7      	ldr	r0, [pc, #732]	; (80018a8 <main+0x384>)
 80015cc:	f007 fcac 	bl	8008f28 <HAL_GPIO_WritePin>

	FR_Status = f_open(&Fil, "MyTextFile.txt", FA_CREATE_NEW);
 80015d0:	4bb6      	ldr	r3, [pc, #728]	; (80018ac <main+0x388>)
 80015d2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80015d6:	f103 0310 	add.w	r3, r3, #16
 80015da:	443b      	add	r3, r7
 80015dc:	2204      	movs	r2, #4
 80015de:	49b4      	ldr	r1, [pc, #720]	; (80018b0 <main+0x38c>)
 80015e0:	4618      	mov	r0, r3
 80015e2:	f018 f96d 	bl	80198c0 <f_open>
 80015e6:	4603      	mov	r3, r0
 80015e8:	f642 0207 	movw	r2, #10247	; 0x2807
 80015ec:	443a      	add	r2, r7
 80015ee:	7013      	strb	r3, [r2, #0]
	f_close(&Fil);
 80015f0:	4bae      	ldr	r3, [pc, #696]	; (80018ac <main+0x388>)
 80015f2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80015f6:	f103 0310 	add.w	r3, r3, #16
 80015fa:	443b      	add	r3, r7
 80015fc:	4618      	mov	r0, r3
 80015fe:	f018 fd3d 	bl	801a07c <f_close>

	LoRA_begin(868000000);
 8001602:	48ac      	ldr	r0, [pc, #688]	; (80018b4 <main+0x390>)
 8001604:	f7ff fd70 	bl	80010e8 <LoRA_begin>
		}
		HAL_Delay(1000);
		LoRA_sendPacket("SENDIT");
	}*/

	int connected = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	f507 5220 	add.w	r2, r7, #10240	; 0x2800
 800160e:	6013      	str	r3, [r2, #0]
	long last_packet = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	f242 72fc 	movw	r2, #10236	; 0x27fc
 8001616:	443a      	add	r2, r7
 8001618:	6013      	str	r3, [r2, #0]
	int ARMED = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	f242 72f8 	movw	r2, #10232	; 0x27f8
 8001620:	443a      	add	r2, r7
 8001622:	6013      	str	r3, [r2, #0]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	//HAL_ADC_Start_DMA(&hadc3, &read_Data, 1);
	//char buffered_debug_data[MAX_PACKET_LENGTH];
	char state[MAX_PACKET_LENGTH] = "DISARMED";
 8001624:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001628:	f5a3 74da 	sub.w	r4, r3, #436	; 0x1b4
 800162c:	4aa2      	ldr	r2, [pc, #648]	; (80018b8 <main+0x394>)
 800162e:	4623      	mov	r3, r4
 8001630:	6810      	ldr	r0, [r2, #0]
 8001632:	6851      	ldr	r1, [r2, #4]
 8001634:	c303      	stmia	r3!, {r0, r1}
 8001636:	7a12      	ldrb	r2, [r2, #8]
 8001638:	701a      	strb	r2, [r3, #0]
 800163a:	f104 0309 	add.w	r3, r4, #9
 800163e:	22f1      	movs	r2, #241	; 0xf1
 8001640:	2100      	movs	r1, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f01a fba9 	bl	801bd9a <memset>
	char command[MAX_PACKET_LENGTH];
	char recieved_packet[MAX_PACKET_LENGTH] = "";
 8001648:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800164c:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	3304      	adds	r3, #4
 8001656:	22f6      	movs	r2, #246	; 0xf6
 8001658:	2100      	movs	r1, #0
 800165a:	4618      	mov	r0, r3
 800165c:	f01a fb9d 	bl	801bd9a <memset>
	char previous_packet[MAX_PACKET_LENGTH];
	char response_packet[MAX_PACKET_LENGTH];
	char packets_streamed[MAX_PACKET_LENGTH];
	int max_packet_count = 0;
 8001660:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001664:	f2a3 63a4 	subw	r3, r3, #1700	; 0x6a4
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
	int packetId;
	char communication_state[MAX_PACKET_LENGTH] = "TRANSITIONING";
 800166c:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001670:	f5a3 65f4 	sub.w	r5, r3, #1952	; 0x7a0
 8001674:	4a91      	ldr	r2, [pc, #580]	; (80018bc <main+0x398>)
 8001676:	462b      	mov	r3, r5
 8001678:	4614      	mov	r4, r2
 800167a:	6820      	ldr	r0, [r4, #0]
 800167c:	6861      	ldr	r1, [r4, #4]
 800167e:	68a2      	ldr	r2, [r4, #8]
 8001680:	c307      	stmia	r3!, {r0, r1, r2}
 8001682:	89a2      	ldrh	r2, [r4, #12]
 8001684:	801a      	strh	r2, [r3, #0]
 8001686:	f105 030e 	add.w	r3, r5, #14
 800168a:	22ec      	movs	r2, #236	; 0xec
 800168c:	2100      	movs	r1, #0
 800168e:	4618      	mov	r0, r3
 8001690:	f01a fb83 	bl	801bd9a <memset>
		//sprintf(data, "%x", version);
		//CDC_Transmit_HS(data, strlen(data));
		LoRA_sendPacket("hello\n");
		HAL_Delay(1000);
	}*/
	uint32_t previousTime = HAL_GetTick();
 8001694:	f002 fd3e 	bl	8004114 <HAL_GetTick>
 8001698:	f642 030c 	movw	r3, #10252	; 0x280c
 800169c:	443b      	add	r3, r7
 800169e:	6018      	str	r0, [r3, #0]
	uint32_t debugTime = HAL_GetTick();
 80016a0:	f002 fd38 	bl	8004114 <HAL_GetTick>
 80016a4:	f242 73f4 	movw	r3, #10228	; 0x27f4
 80016a8:	443b      	add	r3, r7
 80016aa:	6018      	str	r0, [r3, #0]
			debugTime = HAL_GetTick();
			sprintf(response_packet, "Lora: %d, Sate: %s, Comms: %s\n", LoRA_Read_Register(REG_MODEM_CONFIG_1), state, communication_state);
			CDC_Transmit_HS(response_packet, strlen(response_packet));
		}*/

		if (strcmp(communication_state, "RECEIVING RELIABLE") == 0) {
 80016ac:	4b84      	ldr	r3, [pc, #528]	; (80018c0 <main+0x39c>)
 80016ae:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80016b2:	f103 0310 	add.w	r3, r3, #16
 80016b6:	443b      	add	r3, r7
 80016b8:	4982      	ldr	r1, [pc, #520]	; (80018c4 <main+0x3a0>)
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe fe28 	bl	8000310 <strcmp>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f040 8094 	bne.w	80017f0 <main+0x2cc>


			//CDC_Transmit_HS("hi4\n", strlen("hi4\n"));
			if (recv_packet(recieved_packet, MAX_PACKET_LENGTH)) {
 80016c8:	4b7f      	ldr	r3, [pc, #508]	; (80018c8 <main+0x3a4>)
 80016ca:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80016ce:	f103 0310 	add.w	r3, r3, #16
 80016d2:	443b      	add	r3, r7
 80016d4:	21fa      	movs	r1, #250	; 0xfa
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fe92 	bl	8001400 <recv_packet>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0e4      	beq.n	80016ac <main+0x188>
				//CDC_Transmit_HS("hi3", strlen("hi3"));
				previousTime = HAL_GetTick();
 80016e2:	f002 fd17 	bl	8004114 <HAL_GetTick>
 80016e6:	f642 030c 	movw	r3, #10252	; 0x280c
 80016ea:	443b      	add	r3, r7
 80016ec:	6018      	str	r0, [r3, #0]
				if (strcmp(recieved_packet, "$") == 0) {
 80016ee:	4b76      	ldr	r3, [pc, #472]	; (80018c8 <main+0x3a4>)
 80016f0:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80016f4:	f103 0310 	add.w	r3, r3, #16
 80016f8:	443b      	add	r3, r7
 80016fa:	4974      	ldr	r1, [pc, #464]	; (80018cc <main+0x3a8>)
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe fe07 	bl	8000310 <strcmp>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d10d      	bne.n	8001724 <main+0x200>
					//CDC_Transmit_HS("hi2", strlen("hi2"));
					strcpy(communication_state, "SENDING RELIABLE");
 8001708:	4b6d      	ldr	r3, [pc, #436]	; (80018c0 <main+0x39c>)
 800170a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800170e:	f103 0310 	add.w	r3, r3, #16
 8001712:	443b      	add	r3, r7
 8001714:	4a6e      	ldr	r2, [pc, #440]	; (80018d0 <main+0x3ac>)
 8001716:	461c      	mov	r4, r3
 8001718:	4615      	mov	r5, r2
 800171a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800171c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800171e:	682b      	ldr	r3, [r5, #0]
 8001720:	7023      	strb	r3, [r4, #0]
 8001722:	e7c3      	b.n	80016ac <main+0x188>
				} else if(sscanf(recieved_packet, "! %d", &max_packet_count) == 1) {
 8001724:	4a6b      	ldr	r2, [pc, #428]	; (80018d4 <main+0x3b0>)
 8001726:	f642 0310 	movw	r3, #10256	; 0x2810
 800172a:	4413      	add	r3, r2
 800172c:	19da      	adds	r2, r3, r7
 800172e:	4b66      	ldr	r3, [pc, #408]	; (80018c8 <main+0x3a4>)
 8001730:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001734:	f103 0310 	add.w	r3, r3, #16
 8001738:	443b      	add	r3, r7
 800173a:	4967      	ldr	r1, [pc, #412]	; (80018d8 <main+0x3b4>)
 800173c:	4618      	mov	r0, r3
 800173e:	f01a fabb 	bl	801bcb8 <siscanf>
 8001742:	4603      	mov	r3, r0
 8001744:	2b01      	cmp	r3, #1
 8001746:	d10f      	bne.n	8001768 <main+0x244>
					strcpy(communication_state,"SENDING STREAM");
 8001748:	4b5d      	ldr	r3, [pc, #372]	; (80018c0 <main+0x39c>)
 800174a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800174e:	f103 0310 	add.w	r3, r3, #16
 8001752:	443b      	add	r3, r7
 8001754:	4a61      	ldr	r2, [pc, #388]	; (80018dc <main+0x3b8>)
 8001756:	461c      	mov	r4, r3
 8001758:	4613      	mov	r3, r2
 800175a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800175c:	c407      	stmia	r4!, {r0, r1, r2}
 800175e:	8023      	strh	r3, [r4, #0]
 8001760:	3402      	adds	r4, #2
 8001762:	0c1b      	lsrs	r3, r3, #16
 8001764:	7023      	strb	r3, [r4, #0]
 8001766:	e7a1      	b.n	80016ac <main+0x188>
				} else if (strcmp(recieved_packet, previous_packet) == 0) {
 8001768:	4a5d      	ldr	r2, [pc, #372]	; (80018e0 <main+0x3bc>)
 800176a:	f642 0310 	movw	r3, #10256	; 0x2810
 800176e:	4413      	add	r3, r2
 8001770:	19da      	adds	r2, r3, r7
 8001772:	4b55      	ldr	r3, [pc, #340]	; (80018c8 <main+0x3a4>)
 8001774:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001778:	f103 0310 	add.w	r3, r3, #16
 800177c:	443b      	add	r3, r7
 800177e:	4611      	mov	r1, r2
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe fdc5 	bl	8000310 <strcmp>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d109      	bne.n	80017a0 <main+0x27c>
					//send acknowledge again
					LoRA_sendPacket(recieved_packet);
 800178c:	4b4e      	ldr	r3, [pc, #312]	; (80018c8 <main+0x3a4>)
 800178e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001792:	f103 0310 	add.w	r3, r3, #16
 8001796:	443b      	add	r3, r7
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff fd4b 	bl	8001234 <LoRA_sendPacket>
 800179e:	e785      	b.n	80016ac <main+0x188>
				} else {
					//CDC_Transmit_HS("hi1", strlen("hi1"));
					strcpy(previous_packet, recieved_packet);
 80017a0:	4a49      	ldr	r2, [pc, #292]	; (80018c8 <main+0x3a4>)
 80017a2:	f642 0310 	movw	r3, #10256	; 0x2810
 80017a6:	4413      	add	r3, r2
 80017a8:	19da      	adds	r2, r3, r7
 80017aa:	4b4d      	ldr	r3, [pc, #308]	; (80018e0 <main+0x3bc>)
 80017ac:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80017b0:	f103 0310 	add.w	r3, r3, #16
 80017b4:	443b      	add	r3, r7
 80017b6:	4611      	mov	r1, r2
 80017b8:	4618      	mov	r0, r3
 80017ba:	f01a fb6e 	bl	801be9a <strcpy>
					LoRA_sendPacket(recieved_packet);
 80017be:	4b42      	ldr	r3, [pc, #264]	; (80018c8 <main+0x3a4>)
 80017c0:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80017c4:	f103 0310 	add.w	r3, r3, #16
 80017c8:	443b      	add	r3, r7
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff fd32 	bl	8001234 <LoRA_sendPacket>
					strcpy(command, recieved_packet);
 80017d0:	4a3d      	ldr	r2, [pc, #244]	; (80018c8 <main+0x3a4>)
 80017d2:	f642 0310 	movw	r3, #10256	; 0x2810
 80017d6:	4413      	add	r3, r2
 80017d8:	19da      	adds	r2, r3, r7
 80017da:	4b42      	ldr	r3, [pc, #264]	; (80018e4 <main+0x3c0>)
 80017dc:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80017e0:	f103 0310 	add.w	r3, r3, #16
 80017e4:	443b      	add	r3, r7
 80017e6:	4611      	mov	r1, r2
 80017e8:	4618      	mov	r0, r3
 80017ea:	f01a fb56 	bl	801be9a <strcpy>
 80017ee:	e75d      	b.n	80016ac <main+0x188>
					//CDC_Transmit_HS(command, strlen(command));
				}
			}
		} else if (strcmp(communication_state, "RECEIVING STREAM") == 0){
 80017f0:	4b33      	ldr	r3, [pc, #204]	; (80018c0 <main+0x39c>)
 80017f2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80017f6:	f103 0310 	add.w	r3, r3, #16
 80017fa:	443b      	add	r3, r7
 80017fc:	493a      	ldr	r1, [pc, #232]	; (80018e8 <main+0x3c4>)
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe fd86 	bl	8000310 <strcmp>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	f040 809f 	bne.w	800194a <main+0x426>
			if(recv_packet(recieved_packet, MAX_PACKET_LENGTH))
 800180c:	4b2e      	ldr	r3, [pc, #184]	; (80018c8 <main+0x3a4>)
 800180e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001812:	f103 0310 	add.w	r3, r3, #16
 8001816:	443b      	add	r3, r7
 8001818:	21fa      	movs	r1, #250	; 0xfa
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff fdf0 	bl	8001400 <recv_packet>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d066      	beq.n	80018f4 <main+0x3d0>
			{
				previousTime = HAL_GetTick();
 8001826:	f002 fc75 	bl	8004114 <HAL_GetTick>
 800182a:	f642 030c 	movw	r3, #10252	; 0x280c
 800182e:	443b      	add	r3, r7
 8001830:	6018      	str	r0, [r3, #0]
				if(sscanf(recieved_packet, "$ %s", state) == 1)
 8001832:	4a2e      	ldr	r2, [pc, #184]	; (80018ec <main+0x3c8>)
 8001834:	f642 0310 	movw	r3, #10256	; 0x2810
 8001838:	4413      	add	r3, r2
 800183a:	19da      	adds	r2, r3, r7
 800183c:	4b22      	ldr	r3, [pc, #136]	; (80018c8 <main+0x3a4>)
 800183e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001842:	f103 0310 	add.w	r3, r3, #16
 8001846:	443b      	add	r3, r7
 8001848:	4929      	ldr	r1, [pc, #164]	; (80018f0 <main+0x3cc>)
 800184a:	4618      	mov	r0, r3
 800184c:	f01a fa34 	bl	801bcb8 <siscanf>
 8001850:	4603      	mov	r3, r0
 8001852:	2b01      	cmp	r3, #1
 8001854:	d10d      	bne.n	8001872 <main+0x34e>
				{
					strcpy(communication_state,"SENDING RELIABLE");
 8001856:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <main+0x39c>)
 8001858:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800185c:	f103 0310 	add.w	r3, r3, #16
 8001860:	443b      	add	r3, r7
 8001862:	4a1b      	ldr	r2, [pc, #108]	; (80018d0 <main+0x3ac>)
 8001864:	461c      	mov	r4, r3
 8001866:	4615      	mov	r5, r2
 8001868:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800186a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800186c:	682b      	ldr	r3, [r5, #0]
 800186e:	7023      	strb	r3, [r4, #0]
 8001870:	e71c      	b.n	80016ac <main+0x188>
				}
				else
				{
					CDC_Transmit_HS(recieved_packet, strlen(recieved_packet));
 8001872:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <main+0x3a4>)
 8001874:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001878:	f103 0310 	add.w	r3, r3, #16
 800187c:	443b      	add	r3, r7
 800187e:	4618      	mov	r0, r3
 8001880:	f7fe fda6 	bl	80003d0 <strlen>
 8001884:	4602      	mov	r2, r0
 8001886:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <main+0x3a4>)
 8001888:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800188c:	f103 0310 	add.w	r3, r3, #16
 8001890:	443b      	add	r3, r7
 8001892:	4611      	mov	r1, r2
 8001894:	4618      	mov	r0, r3
 8001896:	f018 fe99 	bl	801a5cc <CDC_Transmit_HS>
 800189a:	e707      	b.n	80016ac <main+0x188>
 800189c:	ffffef78 	.word	0xffffef78
 80018a0:	24001698 	.word	0x24001698
 80018a4:	240011dc 	.word	0x240011dc
 80018a8:	58021800 	.word	0x58021800
 80018ac:	ffffdf48 	.word	0xffffdf48
 80018b0:	0801fccc 	.word	0x0801fccc
 80018b4:	33bca100 	.word	0x33bca100
 80018b8:	0801fcb8 	.word	0x0801fcb8
 80018bc:	0801fd3c 	.word	0x0801fd3c
 80018c0:	ffffd860 	.word	0xffffd860
 80018c4:	0801fcdc 	.word	0x0801fcdc
 80018c8:	ffffdc54 	.word	0xffffdc54
 80018cc:	0801fcf0 	.word	0x0801fcf0
 80018d0:	0801fcf4 	.word	0x0801fcf4
 80018d4:	ffffd95c 	.word	0xffffd95c
 80018d8:	0801fd08 	.word	0x0801fd08
 80018dc:	0801fd10 	.word	0x0801fd10
 80018e0:	ffffdb58 	.word	0xffffdb58
 80018e4:	ffffdd50 	.word	0xffffdd50
 80018e8:	0801fd20 	.word	0x0801fd20
 80018ec:	ffffde4c 	.word	0xffffde4c
 80018f0:	0801fd34 	.word	0x0801fd34
				}
			}
			else if(HAL_GetTick()-previousTime > 1000)
 80018f4:	f002 fc0e 	bl	8004114 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	f642 030c 	movw	r3, #10252	; 0x280c
 80018fe:	443b      	add	r3, r7
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001908:	f67f aed0 	bls.w	80016ac <main+0x188>
			{
			  previousTime = HAL_GetTick();
 800190c:	f002 fc02 	bl	8004114 <HAL_GetTick>
 8001910:	f642 030c 	movw	r3, #10252	; 0x280c
 8001914:	443b      	add	r3, r7
 8001916:	6018      	str	r0, [r3, #0]
			  //give up SENDING
			  sprintf(response_packet, "! %d", packets_streamed);
 8001918:	4ac6      	ldr	r2, [pc, #792]	; (8001c34 <main+0x710>)
 800191a:	f642 0310 	movw	r3, #10256	; 0x2810
 800191e:	4413      	add	r3, r2
 8001920:	19da      	adds	r2, r3, r7
 8001922:	4bc5      	ldr	r3, [pc, #788]	; (8001c38 <main+0x714>)
 8001924:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001928:	f103 0310 	add.w	r3, r3, #16
 800192c:	443b      	add	r3, r7
 800192e:	49c3      	ldr	r1, [pc, #780]	; (8001c3c <main+0x718>)
 8001930:	4618      	mov	r0, r3
 8001932:	f01a f9a1 	bl	801bc78 <siprintf>
			  LoRA_sendPacket(response_packet);
 8001936:	4bc0      	ldr	r3, [pc, #768]	; (8001c38 <main+0x714>)
 8001938:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800193c:	f103 0310 	add.w	r3, r3, #16
 8001940:	443b      	add	r3, r7
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff fc76 	bl	8001234 <LoRA_sendPacket>
 8001948:	e6b0      	b.n	80016ac <main+0x188>
			}
		} else if(strcmp(communication_state,"SENDING STREAM") == 0) {
 800194a:	4bbd      	ldr	r3, [pc, #756]	; (8001c40 <main+0x71c>)
 800194c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001950:	f103 0310 	add.w	r3, r3, #16
 8001954:	443b      	add	r3, r7
 8001956:	49bb      	ldr	r1, [pc, #748]	; (8001c44 <main+0x720>)
 8001958:	4618      	mov	r0, r3
 800195a:	f7fe fcd9 	bl	8000310 <strcmp>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	f040 80a4 	bne.w	8001aae <main+0x58a>
			if(max_packet_count == 0)
 8001966:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800196a:	f2a3 63a4 	subw	r3, r3, #1700	; 0x6a4
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d124      	bne.n	80019be <main+0x49a>
			{
				strcpy(communication_state,"TRANSITIONING");
 8001974:	4bb2      	ldr	r3, [pc, #712]	; (8001c40 <main+0x71c>)
 8001976:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800197a:	f103 0310 	add.w	r3, r3, #16
 800197e:	443b      	add	r3, r7
 8001980:	4ab1      	ldr	r2, [pc, #708]	; (8001c48 <main+0x724>)
 8001982:	461c      	mov	r4, r3
 8001984:	4613      	mov	r3, r2
 8001986:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001988:	c407      	stmia	r4!, {r0, r1, r2}
 800198a:	8023      	strh	r3, [r4, #0]
				sprintf(response_packet, "$ %s", state);
 800198c:	4aaf      	ldr	r2, [pc, #700]	; (8001c4c <main+0x728>)
 800198e:	f642 0310 	movw	r3, #10256	; 0x2810
 8001992:	4413      	add	r3, r2
 8001994:	19da      	adds	r2, r3, r7
 8001996:	4ba8      	ldr	r3, [pc, #672]	; (8001c38 <main+0x714>)
 8001998:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800199c:	f103 0310 	add.w	r3, r3, #16
 80019a0:	443b      	add	r3, r7
 80019a2:	49ab      	ldr	r1, [pc, #684]	; (8001c50 <main+0x72c>)
 80019a4:	4618      	mov	r0, r3
 80019a6:	f01a f967 	bl	801bc78 <siprintf>
				LoRA_sendPacket(response_packet);
 80019aa:	4ba3      	ldr	r3, [pc, #652]	; (8001c38 <main+0x714>)
 80019ac:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80019b0:	f103 0310 	add.w	r3, r3, #16
 80019b4:	443b      	add	r3, r7
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff fc3c 	bl	8001234 <LoRA_sendPacket>
 80019bc:	e676      	b.n	80016ac <main+0x188>
			}
			else
			{
				//send whatever
				if (strcmp(state, "ARMED") == 0) {
 80019be:	4ba3      	ldr	r3, [pc, #652]	; (8001c4c <main+0x728>)
 80019c0:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80019c4:	f103 0310 	add.w	r3, r3, #16
 80019c8:	443b      	add	r3, r7
 80019ca:	49a2      	ldr	r1, [pc, #648]	; (8001c54 <main+0x730>)
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7fe fc9f 	bl	8000310 <strcmp>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d15e      	bne.n	8001a96 <main+0x572>
					if (strcmp(command, "FIRE") == 0) {
 80019d8:	4b9f      	ldr	r3, [pc, #636]	; (8001c58 <main+0x734>)
 80019da:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80019de:	f103 0310 	add.w	r3, r3, #16
 80019e2:	443b      	add	r3, r7
 80019e4:	499d      	ldr	r1, [pc, #628]	; (8001c5c <main+0x738>)
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7fe fc92 	bl	8000310 <strcmp>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d151      	bne.n	8001a96 <main+0x572>
						HAL_ADC_Start(&hadc1); // start the adc
 80019f2:	489b      	ldr	r0, [pc, #620]	; (8001c60 <main+0x73c>)
 80019f4:	f003 f8c8 	bl	8004b88 <HAL_ADC_Start>
						HAL_ADC_PollForConversion(&hadc1, 100); // poll for conversion
 80019f8:	2164      	movs	r1, #100	; 0x64
 80019fa:	4899      	ldr	r0, [pc, #612]	; (8001c60 <main+0x73c>)
 80019fc:	f003 f9c2 	bl	8004d84 <HAL_ADC_PollForConversion>
						char debug_data[100];
						uint16_t adc_val = HAL_ADC_GetValue(&hadc1); // get the adc value
 8001a00:	4897      	ldr	r0, [pc, #604]	; (8001c60 <main+0x73c>)
 8001a02:	f003 fab3 	bl	8004f6c <HAL_ADC_GetValue>
 8001a06:	4603      	mov	r3, r0
 8001a08:	f242 72f2 	movw	r2, #10226	; 0x27f2
 8001a0c:	443a      	add	r2, r7
 8001a0e:	8013      	strh	r3, [r2, #0]
						sprintf(debug_data, "%d, %d\n", HAL_GetTick(), adc_val);
 8001a10:	f002 fb80 	bl	8004114 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	f242 73f2 	movw	r3, #10226	; 0x27f2
 8001a1a:	443b      	add	r3, r7
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	4891      	ldr	r0, [pc, #580]	; (8001c64 <main+0x740>)
 8001a20:	f642 0110 	movw	r1, #10256	; 0x2810
 8001a24:	4401      	add	r1, r0
 8001a26:	19c8      	adds	r0, r1, r7
 8001a28:	498f      	ldr	r1, [pc, #572]	; (8001c68 <main+0x744>)
 8001a2a:	f01a f925 	bl	801bc78 <siprintf>
						FR_Status = f_open(&Fil, "MyTextFile.txt",
 8001a2e:	4b8f      	ldr	r3, [pc, #572]	; (8001c6c <main+0x748>)
 8001a30:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001a34:	f103 0310 	add.w	r3, r3, #16
 8001a38:	443b      	add	r3, r7
 8001a3a:	2232      	movs	r2, #50	; 0x32
 8001a3c:	498c      	ldr	r1, [pc, #560]	; (8001c70 <main+0x74c>)
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f017 ff3e 	bl	80198c0 <f_open>
 8001a44:	4603      	mov	r3, r0
 8001a46:	f642 0207 	movw	r2, #10247	; 0x2807
 8001a4a:	443a      	add	r2, r7
 8001a4c:	7013      	strb	r3, [r2, #0]
								FA_OPEN_APPEND | FA_WRITE);
						f_puts(debug_data, &Fil);
 8001a4e:	4a87      	ldr	r2, [pc, #540]	; (8001c6c <main+0x748>)
 8001a50:	f642 0310 	movw	r3, #10256	; 0x2810
 8001a54:	4413      	add	r3, r2
 8001a56:	19da      	adds	r2, r3, r7
 8001a58:	4b82      	ldr	r3, [pc, #520]	; (8001c64 <main+0x740>)
 8001a5a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001a5e:	f103 0310 	add.w	r3, r3, #16
 8001a62:	443b      	add	r3, r7
 8001a64:	4611      	mov	r1, r2
 8001a66:	4618      	mov	r0, r3
 8001a68:	f018 fba9 	bl	801a1be <f_puts>
						f_close(&Fil);
 8001a6c:	4b7f      	ldr	r3, [pc, #508]	; (8001c6c <main+0x748>)
 8001a6e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001a72:	f103 0310 	add.w	r3, r3, #16
 8001a76:	443b      	add	r3, r7
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f018 faff 	bl	801a07c <f_close>
						HAL_ADC_Stop(&hadc1); // stop adc
 8001a7e:	4878      	ldr	r0, [pc, #480]	; (8001c60 <main+0x73c>)
 8001a80:	f003 f94c 	bl	8004d1c <HAL_ADC_Stop>
						LoRA_sendPacket(debug_data);
 8001a84:	4b77      	ldr	r3, [pc, #476]	; (8001c64 <main+0x740>)
 8001a86:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001a8a:	f103 0310 	add.w	r3, r3, #16
 8001a8e:	443b      	add	r3, r7
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff fbcf 	bl	8001234 <LoRA_sendPacket>
					}
				}
				max_packet_count--;
 8001a96:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001a9a:	f2a3 63a4 	subw	r3, r3, #1700	; 0x6a4
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	1e5a      	subs	r2, r3, #1
 8001aa2:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001aa6:	f2a3 63a4 	subw	r3, r3, #1700	; 0x6a4
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	e5fe      	b.n	80016ac <main+0x188>
			}
			
		}
		else if (strcmp(communication_state, "SENDING RELIABLE") == 0) {
 8001aae:	4b64      	ldr	r3, [pc, #400]	; (8001c40 <main+0x71c>)
 8001ab0:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001ab4:	f103 0310 	add.w	r3, r3, #16
 8001ab8:	443b      	add	r3, r7
 8001aba:	496e      	ldr	r1, [pc, #440]	; (8001c74 <main+0x750>)
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7fe fc27 	bl	8000310 <strcmp>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f040 81b1 	bne.w	8001e2c <main+0x908>
			reliable_send_packet("*");
 8001aca:	486b      	ldr	r0, [pc, #428]	; (8001c78 <main+0x754>)
 8001acc:	f7ff fcc7 	bl	800145e <reliable_send_packet>
			if (strcmp(state, "DISARMED") == 0) {
 8001ad0:	4b5e      	ldr	r3, [pc, #376]	; (8001c4c <main+0x728>)
 8001ad2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001ad6:	f103 0310 	add.w	r3, r3, #16
 8001ada:	443b      	add	r3, r7
 8001adc:	4967      	ldr	r1, [pc, #412]	; (8001c7c <main+0x758>)
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7fe fc16 	bl	8000310 <strcmp>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f040 8122 	bne.w	8001d30 <main+0x80c>
				if (strcmp(command, "ARM") == 0) {
 8001aec:	4b5a      	ldr	r3, [pc, #360]	; (8001c58 <main+0x734>)
 8001aee:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001af2:	f103 0310 	add.w	r3, r3, #16
 8001af6:	443b      	add	r3, r7
 8001af8:	4961      	ldr	r1, [pc, #388]	; (8001c80 <main+0x75c>)
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe fc08 	bl	8000310 <strcmp>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d113      	bne.n	8001b2e <main+0x60a>
					//CDC_Transmit_HS("HELLO 2", strlen("HELLO 2"));
					if (!arm(state)) {
 8001b06:	4b51      	ldr	r3, [pc, #324]	; (8001c4c <main+0x728>)
 8001b08:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001b0c:	f103 0310 	add.w	r3, r3, #16
 8001b10:	443b      	add	r3, r7
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fc42 	bl	800139c <arm>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d103      	bne.n	8001b26 <main+0x602>
						reliable_send_packet("ARM SUCCESS");
 8001b1e:	4859      	ldr	r0, [pc, #356]	; (8001c84 <main+0x760>)
 8001b20:	f7ff fc9d 	bl	800145e <reliable_send_packet>
 8001b24:	e15d      	b.n	8001de2 <main+0x8be>
					} else {
						reliable_send_packet("ARM UNSUCCESSFUL");
 8001b26:	4858      	ldr	r0, [pc, #352]	; (8001c88 <main+0x764>)
 8001b28:	f7ff fc99 	bl	800145e <reliable_send_packet>
 8001b2c:	e159      	b.n	8001de2 <main+0x8be>
					}
				} else if (strcmp(command, "DISARM") == 0) {
 8001b2e:	4b4a      	ldr	r3, [pc, #296]	; (8001c58 <main+0x734>)
 8001b30:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001b34:	f103 0310 	add.w	r3, r3, #16
 8001b38:	443b      	add	r3, r7
 8001b3a:	4954      	ldr	r1, [pc, #336]	; (8001c8c <main+0x768>)
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7fe fbe7 	bl	8000310 <strcmp>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d103      	bne.n	8001b50 <main+0x62c>
					reliable_send_packet("ALREADY DISARMED");
 8001b48:	4851      	ldr	r0, [pc, #324]	; (8001c90 <main+0x76c>)
 8001b4a:	f7ff fc88 	bl	800145e <reliable_send_packet>
 8001b4e:	e148      	b.n	8001de2 <main+0x8be>
				} else if (strcmp(command, "CONT") == 0) {
 8001b50:	4b41      	ldr	r3, [pc, #260]	; (8001c58 <main+0x734>)
 8001b52:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001b56:	f103 0310 	add.w	r3, r3, #16
 8001b5a:	443b      	add	r3, r7
 8001b5c:	494d      	ldr	r1, [pc, #308]	; (8001c94 <main+0x770>)
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7fe fbd6 	bl	8000310 <strcmp>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f040 813b 	bne.w	8001de2 <main+0x8be>
					uint8_t CONTS[8];
					CONTS[0] = HAL_GPIO_ReadPin(CONT1_GPIO_Port, CONT1_Pin);
 8001b6c:	2104      	movs	r1, #4
 8001b6e:	484a      	ldr	r0, [pc, #296]	; (8001c98 <main+0x774>)
 8001b70:	f007 f9c2 	bl	8008ef8 <HAL_GPIO_ReadPin>
 8001b74:	4603      	mov	r3, r0
 8001b76:	461a      	mov	r2, r3
 8001b78:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001b7c:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 8001b80:	701a      	strb	r2, [r3, #0]
					CONTS[1] = HAL_GPIO_ReadPin(CONT2_GPIO_Port, CONT2_Pin);
 8001b82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b86:	4845      	ldr	r0, [pc, #276]	; (8001c9c <main+0x778>)
 8001b88:	f007 f9b6 	bl	8008ef8 <HAL_GPIO_ReadPin>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	461a      	mov	r2, r3
 8001b90:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001b94:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 8001b98:	705a      	strb	r2, [r3, #1]
					CONTS[2] = HAL_GPIO_ReadPin(CONT3_GPIO_Port, CONT3_Pin);
 8001b9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b9e:	483f      	ldr	r0, [pc, #252]	; (8001c9c <main+0x778>)
 8001ba0:	f007 f9aa 	bl	8008ef8 <HAL_GPIO_ReadPin>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001bac:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 8001bb0:	709a      	strb	r2, [r3, #2]
					CONTS[3] = HAL_GPIO_ReadPin(CONT4_GPIO_Port, CONT4_Pin);
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	483a      	ldr	r0, [pc, #232]	; (8001ca0 <main+0x77c>)
 8001bb6:	f007 f99f 	bl	8008ef8 <HAL_GPIO_ReadPin>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001bc2:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 8001bc6:	70da      	strb	r2, [r3, #3]
					CONTS[4] = HAL_GPIO_ReadPin(CONT5_GPIO_Port, CONT5_Pin);
 8001bc8:	2180      	movs	r1, #128	; 0x80
 8001bca:	4836      	ldr	r0, [pc, #216]	; (8001ca4 <main+0x780>)
 8001bcc:	f007 f994 	bl	8008ef8 <HAL_GPIO_ReadPin>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001bd8:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 8001bdc:	711a      	strb	r2, [r3, #4]
					CONTS[5] = HAL_GPIO_ReadPin(CONT6_GPIO_Port, CONT6_Pin);
 8001bde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001be2:	4830      	ldr	r0, [pc, #192]	; (8001ca4 <main+0x780>)
 8001be4:	f007 f988 	bl	8008ef8 <HAL_GPIO_ReadPin>
 8001be8:	4603      	mov	r3, r0
 8001bea:	461a      	mov	r2, r3
 8001bec:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001bf0:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 8001bf4:	715a      	strb	r2, [r3, #5]
					CONTS[6] = HAL_GPIO_ReadPin(CONT7_GPIO_Port, CONT7_Pin);
 8001bf6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bfa:	482a      	ldr	r0, [pc, #168]	; (8001ca4 <main+0x780>)
 8001bfc:	f007 f97c 	bl	8008ef8 <HAL_GPIO_ReadPin>
 8001c00:	4603      	mov	r3, r0
 8001c02:	461a      	mov	r2, r3
 8001c04:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001c08:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 8001c0c:	719a      	strb	r2, [r3, #6]
					CONTS[7] = HAL_GPIO_ReadPin(CONT8_GPIO_Port, CONT8_Pin);
 8001c0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c12:	4824      	ldr	r0, [pc, #144]	; (8001ca4 <main+0x780>)
 8001c14:	f007 f970 	bl	8008ef8 <HAL_GPIO_ReadPin>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001c20:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 8001c24:	71da      	strb	r2, [r3, #7]

					char message[100];
					for (int i = 0; i < 8; i++) {
 8001c26:	2300      	movs	r3, #0
 8001c28:	f642 0208 	movw	r2, #10248	; 0x2808
 8001c2c:	443a      	add	r2, r7
 8001c2e:	6013      	str	r3, [r2, #0]
 8001c30:	e077      	b.n	8001d22 <main+0x7fe>
 8001c32:	bf00      	nop
 8001c34:	ffffd960 	.word	0xffffd960
 8001c38:	ffffda5c 	.word	0xffffda5c
 8001c3c:	0801fd08 	.word	0x0801fd08
 8001c40:	ffffd860 	.word	0xffffd860
 8001c44:	0801fd10 	.word	0x0801fd10
 8001c48:	0801fd3c 	.word	0x0801fd3c
 8001c4c:	ffffde4c 	.word	0xffffde4c
 8001c50:	0801fd34 	.word	0x0801fd34
 8001c54:	0801fcc4 	.word	0x0801fcc4
 8001c58:	ffffdd50 	.word	0xffffdd50
 8001c5c:	0801fd4c 	.word	0x0801fd4c
 8001c60:	24000c6c 	.word	0x24000c6c
 8001c64:	ffffd7f4 	.word	0xffffd7f4
 8001c68:	0801fd54 	.word	0x0801fd54
 8001c6c:	ffffdf48 	.word	0xffffdf48
 8001c70:	0801fccc 	.word	0x0801fccc
 8001c74:	0801fcf4 	.word	0x0801fcf4
 8001c78:	0801fd5c 	.word	0x0801fd5c
 8001c7c:	0801fcb8 	.word	0x0801fcb8
 8001c80:	0801fd60 	.word	0x0801fd60
 8001c84:	0801fd64 	.word	0x0801fd64
 8001c88:	0801fd70 	.word	0x0801fd70
 8001c8c:	0801fd84 	.word	0x0801fd84
 8001c90:	0801fd8c 	.word	0x0801fd8c
 8001c94:	0801fda0 	.word	0x0801fda0
 8001c98:	58020400 	.word	0x58020400
 8001c9c:	58021400 	.word	0x58021400
 8001ca0:	58021800 	.word	0x58021800
 8001ca4:	58021000 	.word	0x58021000
						if (CONTS[i]) {
 8001ca8:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001cac:	f5a3 62f5 	sub.w	r2, r3, #1960	; 0x7a8
 8001cb0:	f642 0308 	movw	r3, #10248	; 0x2808
 8001cb4:	443b      	add	r3, r7
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4413      	add	r3, r2
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00f      	beq.n	8001ce0 <main+0x7bc>
							sprintf(message, "PYRO %d DOESN'T HAVE CONTINUITY",
 8001cc0:	f642 0308 	movw	r3, #10248	; 0x2808
 8001cc4:	443b      	add	r3, r7
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	1c5a      	adds	r2, r3, #1
 8001cca:	4b9b      	ldr	r3, [pc, #620]	; (8001f38 <main+0xa14>)
 8001ccc:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001cd0:	f103 0310 	add.w	r3, r3, #16
 8001cd4:	443b      	add	r3, r7
 8001cd6:	4999      	ldr	r1, [pc, #612]	; (8001f3c <main+0xa18>)
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f019 ffcd 	bl	801bc78 <siprintf>
 8001cde:	e00e      	b.n	8001cfe <main+0x7da>
									i + 1);
						} else {
							sprintf(message, "PYRO %d HAS CONTINUITY", i + 1);
 8001ce0:	f642 0308 	movw	r3, #10248	; 0x2808
 8001ce4:	443b      	add	r3, r7
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	1c5a      	adds	r2, r3, #1
 8001cea:	4b93      	ldr	r3, [pc, #588]	; (8001f38 <main+0xa14>)
 8001cec:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001cf0:	f103 0310 	add.w	r3, r3, #16
 8001cf4:	443b      	add	r3, r7
 8001cf6:	4992      	ldr	r1, [pc, #584]	; (8001f40 <main+0xa1c>)
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f019 ffbd 	bl	801bc78 <siprintf>
						}

						reliable_send_packet(message);
 8001cfe:	4b8e      	ldr	r3, [pc, #568]	; (8001f38 <main+0xa14>)
 8001d00:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001d04:	f103 0310 	add.w	r3, r3, #16
 8001d08:	443b      	add	r3, r7
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff fba7 	bl	800145e <reliable_send_packet>
					for (int i = 0; i < 8; i++) {
 8001d10:	f642 0308 	movw	r3, #10248	; 0x2808
 8001d14:	443b      	add	r3, r7
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	f642 0208 	movw	r2, #10248	; 0x2808
 8001d1e:	443a      	add	r2, r7
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	f642 0308 	movw	r3, #10248	; 0x2808
 8001d26:	443b      	add	r3, r7
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2b07      	cmp	r3, #7
 8001d2c:	ddbc      	ble.n	8001ca8 <main+0x784>
 8001d2e:	e058      	b.n	8001de2 <main+0x8be>
					}
				}
			} else if (strcmp(state, "ARMED") == 0) {
 8001d30:	4b84      	ldr	r3, [pc, #528]	; (8001f44 <main+0xa20>)
 8001d32:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001d36:	f103 0310 	add.w	r3, r3, #16
 8001d3a:	443b      	add	r3, r7
 8001d3c:	4982      	ldr	r1, [pc, #520]	; (8001f48 <main+0xa24>)
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7fe fae6 	bl	8000310 <strcmp>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d13c      	bne.n	8001dc4 <main+0x8a0>
				if (strcmp(command, "DISARM") == 0) {
 8001d4a:	4b80      	ldr	r3, [pc, #512]	; (8001f4c <main+0xa28>)
 8001d4c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001d50:	f103 0310 	add.w	r3, r3, #16
 8001d54:	443b      	add	r3, r7
 8001d56:	497e      	ldr	r1, [pc, #504]	; (8001f50 <main+0xa2c>)
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7fe fad9 	bl	8000310 <strcmp>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d113      	bne.n	8001d8c <main+0x868>
					if (!disarm(state)) {
 8001d64:	4b77      	ldr	r3, [pc, #476]	; (8001f44 <main+0xa20>)
 8001d66:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001d6a:	f103 0310 	add.w	r3, r3, #16
 8001d6e:	443b      	add	r3, r7
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff fa9f 	bl	80012b4 <disarm>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d103      	bne.n	8001d84 <main+0x860>
						reliable_send_packet("DISARM SUCCESS");
 8001d7c:	4875      	ldr	r0, [pc, #468]	; (8001f54 <main+0xa30>)
 8001d7e:	f7ff fb6e 	bl	800145e <reliable_send_packet>
 8001d82:	e02e      	b.n	8001de2 <main+0x8be>
					} else {
						reliable_send_packet("DISARM UNSUCCESS");
 8001d84:	4874      	ldr	r0, [pc, #464]	; (8001f58 <main+0xa34>)
 8001d86:	f7ff fb6a 	bl	800145e <reliable_send_packet>
 8001d8a:	e02a      	b.n	8001de2 <main+0x8be>
					}
				} else if (strcmp(command, "ARM") == 0) {
 8001d8c:	4b6f      	ldr	r3, [pc, #444]	; (8001f4c <main+0xa28>)
 8001d8e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001d92:	f103 0310 	add.w	r3, r3, #16
 8001d96:	443b      	add	r3, r7
 8001d98:	4970      	ldr	r1, [pc, #448]	; (8001f5c <main+0xa38>)
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fab8 	bl	8000310 <strcmp>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d103      	bne.n	8001dae <main+0x88a>
					reliable_send_packet("ALREADY ARMED");
 8001da6:	486e      	ldr	r0, [pc, #440]	; (8001f60 <main+0xa3c>)
 8001da8:	f7ff fb59 	bl	800145e <reliable_send_packet>
 8001dac:	e019      	b.n	8001de2 <main+0x8be>
				} else if (strcmp(command, "FIRE") == 0) {
 8001dae:	4b67      	ldr	r3, [pc, #412]	; (8001f4c <main+0xa28>)
 8001db0:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001db4:	f103 0310 	add.w	r3, r3, #16
 8001db8:	443b      	add	r3, r7
 8001dba:	496a      	ldr	r1, [pc, #424]	; (8001f64 <main+0xa40>)
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7fe faa7 	bl	8000310 <strcmp>
 8001dc2:	e00e      	b.n	8001de2 <main+0x8be>
					//strcpy(state, "STATIC_FIRE_LOGGING");
				}
				//CDC_Transmit_HS("\nIamhere\n", strlen("\nIamhere\n"));
			} else {
				LoRA_sendPacket("state wrong!");
 8001dc4:	4868      	ldr	r0, [pc, #416]	; (8001f68 <main+0xa44>)
 8001dc6:	f7ff fa35 	bl	8001234 <LoRA_sendPacket>
				HAL_Delay(100);
 8001dca:	2064      	movs	r0, #100	; 0x64
 8001dcc:	f002 f9ae 	bl	800412c <HAL_Delay>
				LoRA_sendPacket(state);
 8001dd0:	4b5c      	ldr	r3, [pc, #368]	; (8001f44 <main+0xa20>)
 8001dd2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001dd6:	f103 0310 	add.w	r3, r3, #16
 8001dda:	443b      	add	r3, r7
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff fa29 	bl	8001234 <LoRA_sendPacket>
			}
			//HAL_Delay(100);
			sprintf(response_packet, "$ %s", state);
 8001de2:	4a58      	ldr	r2, [pc, #352]	; (8001f44 <main+0xa20>)
 8001de4:	f642 0310 	movw	r3, #10256	; 0x2810
 8001de8:	4413      	add	r3, r2
 8001dea:	19da      	adds	r2, r3, r7
 8001dec:	4b5f      	ldr	r3, [pc, #380]	; (8001f6c <main+0xa48>)
 8001dee:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001df2:	f103 0310 	add.w	r3, r3, #16
 8001df6:	443b      	add	r3, r7
 8001df8:	495d      	ldr	r1, [pc, #372]	; (8001f70 <main+0xa4c>)
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f019 ff3c 	bl	801bc78 <siprintf>
			LoRA_sendPacket(response_packet);
 8001e00:	4b5a      	ldr	r3, [pc, #360]	; (8001f6c <main+0xa48>)
 8001e02:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001e06:	f103 0310 	add.w	r3, r3, #16
 8001e0a:	443b      	add	r3, r7
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fa11 	bl	8001234 <LoRA_sendPacket>
			//CDC_Transmit_HS("\nIamhere2\n", strlen("\nIamhere2\n"));
			strcpy(communication_state, "TRANSITIONING");
 8001e12:	4b58      	ldr	r3, [pc, #352]	; (8001f74 <main+0xa50>)
 8001e14:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001e18:	f103 0310 	add.w	r3, r3, #16
 8001e1c:	443b      	add	r3, r7
 8001e1e:	4a56      	ldr	r2, [pc, #344]	; (8001f78 <main+0xa54>)
 8001e20:	461c      	mov	r4, r3
 8001e22:	4613      	mov	r3, r2
 8001e24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e26:	c407      	stmia	r4!, {r0, r1, r2}
 8001e28:	8023      	strh	r3, [r4, #0]
 8001e2a:	e43f      	b.n	80016ac <main+0x188>
		}
	    else if(strcmp(communication_state,"TRANSITIONING") == 0)
 8001e2c:	4b51      	ldr	r3, [pc, #324]	; (8001f74 <main+0xa50>)
 8001e2e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001e32:	f103 0310 	add.w	r3, r3, #16
 8001e36:	443b      	add	r3, r7
 8001e38:	494f      	ldr	r1, [pc, #316]	; (8001f78 <main+0xa54>)
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7fe fa68 	bl	8000310 <strcmp>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f47f ac32 	bne.w	80016ac <main+0x188>
	    {
	        if(recv_packet(recieved_packet, MAX_PACKET_LENGTH))
 8001e48:	4b4c      	ldr	r3, [pc, #304]	; (8001f7c <main+0xa58>)
 8001e4a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001e4e:	f103 0310 	add.w	r3, r3, #16
 8001e52:	443b      	add	r3, r7
 8001e54:	21fa      	movs	r1, #250	; 0xfa
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff fad2 	bl	8001400 <recv_packet>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d03e      	beq.n	8001ee0 <main+0x9bc>
	        {
	          previousTime = HAL_GetTick();
 8001e62:	f002 f957 	bl	8004114 <HAL_GetTick>
 8001e66:	f642 030c 	movw	r3, #10252	; 0x280c
 8001e6a:	443b      	add	r3, r7
 8001e6c:	6018      	str	r0, [r3, #0]
	          if(strcmp(recieved_packet, "*")==0)
 8001e6e:	4b43      	ldr	r3, [pc, #268]	; (8001f7c <main+0xa58>)
 8001e70:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001e74:	f103 0310 	add.w	r3, r3, #16
 8001e78:	443b      	add	r3, r7
 8001e7a:	4941      	ldr	r1, [pc, #260]	; (8001f80 <main+0xa5c>)
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe fa47 	bl	8000310 <strcmp>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f47f ac11 	bne.w	80016ac <main+0x188>
	          {
	        	strcpy(previous_packet, recieved_packet);
 8001e8a:	4a3c      	ldr	r2, [pc, #240]	; (8001f7c <main+0xa58>)
 8001e8c:	f642 0310 	movw	r3, #10256	; 0x2810
 8001e90:	4413      	add	r3, r2
 8001e92:	19da      	adds	r2, r3, r7
 8001e94:	4b3b      	ldr	r3, [pc, #236]	; (8001f84 <main+0xa60>)
 8001e96:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001e9a:	f103 0310 	add.w	r3, r3, #16
 8001e9e:	443b      	add	r3, r7
 8001ea0:	4611      	mov	r1, r2
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f019 fff9 	bl	801be9a <strcpy>
	        	strcpy(communication_state, "RECEIVING RELIABLE");
 8001ea8:	4b32      	ldr	r3, [pc, #200]	; (8001f74 <main+0xa50>)
 8001eaa:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001eae:	f103 0310 	add.w	r3, r3, #16
 8001eb2:	443b      	add	r3, r7
 8001eb4:	4a34      	ldr	r2, [pc, #208]	; (8001f88 <main+0xa64>)
 8001eb6:	461c      	mov	r4, r3
 8001eb8:	4615      	mov	r5, r2
 8001eba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ebc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ebe:	682b      	ldr	r3, [r5, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	8022      	strh	r2, [r4, #0]
 8001ec4:	3402      	adds	r4, #2
 8001ec6:	0c1b      	lsrs	r3, r3, #16
 8001ec8:	7023      	strb	r3, [r4, #0]
	            LoRA_sendPacket(recieved_packet);
 8001eca:	4b2c      	ldr	r3, [pc, #176]	; (8001f7c <main+0xa58>)
 8001ecc:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001ed0:	f103 0310 	add.w	r3, r3, #16
 8001ed4:	443b      	add	r3, r7
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff f9ac 	bl	8001234 <LoRA_sendPacket>
 8001edc:	f7ff bbe6 	b.w	80016ac <main+0x188>
	          }
	        }
	        else if (HAL_GetTick()-previousTime > 1000)
 8001ee0:	f002 f918 	bl	8004114 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	f642 030c 	movw	r3, #10252	; 0x280c
 8001eea:	443b      	add	r3, r7
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ef4:	f67f abda 	bls.w	80016ac <main+0x188>
	        {
	          previousTime = HAL_GetTick();
 8001ef8:	f002 f90c 	bl	8004114 <HAL_GetTick>
 8001efc:	f642 030c 	movw	r3, #10252	; 0x280c
 8001f00:	443b      	add	r3, r7
 8001f02:	6018      	str	r0, [r3, #0]
			  sprintf(response_packet, "$ %s", state);
 8001f04:	4a0f      	ldr	r2, [pc, #60]	; (8001f44 <main+0xa20>)
 8001f06:	f642 0310 	movw	r3, #10256	; 0x2810
 8001f0a:	4413      	add	r3, r2
 8001f0c:	19da      	adds	r2, r3, r7
 8001f0e:	4b17      	ldr	r3, [pc, #92]	; (8001f6c <main+0xa48>)
 8001f10:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001f14:	f103 0310 	add.w	r3, r3, #16
 8001f18:	443b      	add	r3, r7
 8001f1a:	4915      	ldr	r1, [pc, #84]	; (8001f70 <main+0xa4c>)
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f019 feab 	bl	801bc78 <siprintf>
			  LoRA_sendPacket(response_packet);
 8001f22:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <main+0xa48>)
 8001f24:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001f28:	f103 0310 	add.w	r3, r3, #16
 8001f2c:	443b      	add	r3, r7
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff f980 	bl	8001234 <LoRA_sendPacket>
		if (strcmp(communication_state, "RECEIVING RELIABLE") == 0) {
 8001f34:	f7ff bbba 	b.w	80016ac <main+0x188>
 8001f38:	ffffd7f4 	.word	0xffffd7f4
 8001f3c:	0801fda8 	.word	0x0801fda8
 8001f40:	0801fdc8 	.word	0x0801fdc8
 8001f44:	ffffde4c 	.word	0xffffde4c
 8001f48:	0801fcc4 	.word	0x0801fcc4
 8001f4c:	ffffdd50 	.word	0xffffdd50
 8001f50:	0801fd84 	.word	0x0801fd84
 8001f54:	0801fde0 	.word	0x0801fde0
 8001f58:	0801fdf0 	.word	0x0801fdf0
 8001f5c:	0801fd60 	.word	0x0801fd60
 8001f60:	0801fe04 	.word	0x0801fe04
 8001f64:	0801fd4c 	.word	0x0801fd4c
 8001f68:	0801fe14 	.word	0x0801fe14
 8001f6c:	ffffda5c 	.word	0xffffda5c
 8001f70:	0801fd34 	.word	0x0801fd34
 8001f74:	ffffd860 	.word	0xffffd860
 8001f78:	0801fd3c 	.word	0x0801fd3c
 8001f7c:	ffffdc54 	.word	0xffffdc54
 8001f80:	0801fd5c 	.word	0x0801fd5c
 8001f84:	ffffdb58 	.word	0xffffdb58
 8001f88:	0801fcdc 	.word	0x0801fcdc

08001f8c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b09c      	sub	sp, #112	; 0x70
 8001f90:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001f92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f96:	224c      	movs	r2, #76	; 0x4c
 8001f98:	2100      	movs	r1, #0
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f019 fefd 	bl	801bd9a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001fa0:	1d3b      	adds	r3, r7, #4
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f019 fef7 	bl	801bd9a <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001fac:	2002      	movs	r0, #2
 8001fae:	f008 fbcf 	bl	800a750 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	603b      	str	r3, [r7, #0]
 8001fb6:	4b30      	ldr	r3, [pc, #192]	; (8002078 <SystemClock_Config+0xec>)
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001fbe:	4a2e      	ldr	r2, [pc, #184]	; (8002078 <SystemClock_Config+0xec>)
 8001fc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fc4:	6193      	str	r3, [r2, #24]
 8001fc6:	4b2c      	ldr	r3, [pc, #176]	; (8002078 <SystemClock_Config+0xec>)
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001fce:	603b      	str	r3, [r7, #0]
 8001fd0:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8001fd2:	bf00      	nop
 8001fd4:	4b28      	ldr	r3, [pc, #160]	; (8002078 <SystemClock_Config+0xec>)
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fe0:	d1f8      	bne.n	8001fd4 <SystemClock_Config+0x48>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48
 8001fe2:	2322      	movs	r3, #34	; 0x22
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = 64;
 8001fea:	2340      	movs	r3, #64	; 0x40
 8001fec:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001ffa:	2304      	movs	r3, #4
 8001ffc:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 12;
 8001ffe:	230c      	movs	r3, #12
 8002000:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 8002002:	2301      	movs	r3, #1
 8002004:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8002006:	2303      	movs	r3, #3
 8002008:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 800200a:	2302      	movs	r3, #2
 800200c:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800200e:	230c      	movs	r3, #12
 8002010:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002012:	2300      	movs	r3, #0
 8002014:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002016:	2300      	movs	r3, #0
 8002018:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800201a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800201e:	4618      	mov	r0, r3
 8002020:	f008 fbe0 	bl	800a7e4 <HAL_RCC_OscConfig>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <SystemClock_Config+0xa2>
		Error_Handler();
 800202a:	f000 ff39 	bl	8002ea0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800202e:	233f      	movs	r3, #63	; 0x3f
 8002030:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002032:	2303      	movs	r3, #3
 8002034:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800203a:	2308      	movs	r3, #8
 800203c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800203e:	2340      	movs	r3, #64	; 0x40
 8002040:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002042:	2340      	movs	r3, #64	; 0x40
 8002044:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002046:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800204a:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800204c:	2340      	movs	r3, #64	; 0x40
 800204e:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8002050:	1d3b      	adds	r3, r7, #4
 8002052:	2101      	movs	r1, #1
 8002054:	4618      	mov	r0, r3
 8002056:	f008 ff9f 	bl	800af98 <HAL_RCC_ClockConfig>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <SystemClock_Config+0xd8>
		Error_Handler();
 8002060:	f000 ff1e 	bl	8002ea0 <Error_Handler>
	}
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8002064:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002068:	2100      	movs	r1, #0
 800206a:	2000      	movs	r0, #0
 800206c:	f009 f94a 	bl	800b304 <HAL_RCC_MCOConfig>
}
 8002070:	bf00      	nop
 8002072:	3770      	adds	r7, #112	; 0x70
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	58024800 	.word	0x58024800

0800207c <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 800207c:	b580      	push	{r7, lr}
 800207e:	b0ae      	sub	sp, #184	; 0xb8
 8002080:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8002082:	463b      	mov	r3, r7
 8002084:	22b8      	movs	r2, #184	; 0xb8
 8002086:	2100      	movs	r1, #0
 8002088:	4618      	mov	r0, r3
 800208a:	f019 fe86 	bl	801bd9a <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC
 800208e:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8002092:	f04f 0300 	mov.w	r3, #0
 8002096:	e9c7 2300 	strd	r2, r3, [r7]
			| RCC_PERIPHCLK_SPI3 | RCC_PERIPHCLK_SPI2 | RCC_PERIPHCLK_SPI1;
	PeriphClkInitStruct.PLL2.PLL2M = 4;
 800209a:	2304      	movs	r3, #4
 800209c:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2N = 12;
 800209e:	230c      	movs	r3, #12
 80020a0:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2P = 4;
 80020a2:	2304      	movs	r3, #4
 80020a4:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80020a6:	2302      	movs	r3, #2
 80020a8:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 80020aa:	2302      	movs	r3, #2
 80020ac:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80020ae:	23c0      	movs	r3, #192	; 0xc0
 80020b0:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80020b2:	2300      	movs	r3, #0
 80020b4:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80020ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020be:	65fb      	str	r3, [r7, #92]	; 0x5c
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80020c0:	2300      	movs	r3, #0
 80020c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80020c6:	463b      	mov	r3, r7
 80020c8:	4618      	mov	r0, r3
 80020ca:	f009 fb5b 	bl	800b784 <HAL_RCCEx_PeriphCLKConfig>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <PeriphCommonClock_Config+0x5c>
		Error_Handler();
 80020d4:	f000 fee4 	bl	8002ea0 <Error_Handler>
	}
}
 80020d8:	bf00      	nop
 80020da:	37b8      	adds	r7, #184	; 0xb8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08c      	sub	sp, #48	; 0x30
 80020e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 80020e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	605a      	str	r2, [r3, #4]
 80020f0:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80020f2:	463b      	mov	r3, r7
 80020f4:	2224      	movs	r2, #36	; 0x24
 80020f6:	2100      	movs	r1, #0
 80020f8:	4618      	mov	r0, r3
 80020fa:	f019 fe4e 	bl	801bd9a <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80020fe:	4b31      	ldr	r3, [pc, #196]	; (80021c4 <MX_ADC1_Init+0xe4>)
 8002100:	4a31      	ldr	r2, [pc, #196]	; (80021c8 <MX_ADC1_Init+0xe8>)
 8002102:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8002104:	4b2f      	ldr	r3, [pc, #188]	; (80021c4 <MX_ADC1_Init+0xe4>)
 8002106:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 800210a:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800210c:	4b2d      	ldr	r3, [pc, #180]	; (80021c4 <MX_ADC1_Init+0xe4>)
 800210e:	2200      	movs	r2, #0
 8002110:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002112:	4b2c      	ldr	r3, [pc, #176]	; (80021c4 <MX_ADC1_Init+0xe4>)
 8002114:	2200      	movs	r2, #0
 8002116:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002118:	4b2a      	ldr	r3, [pc, #168]	; (80021c4 <MX_ADC1_Init+0xe4>)
 800211a:	2204      	movs	r2, #4
 800211c:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800211e:	4b29      	ldr	r3, [pc, #164]	; (80021c4 <MX_ADC1_Init+0xe4>)
 8002120:	2200      	movs	r2, #0
 8002122:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8002124:	4b27      	ldr	r3, [pc, #156]	; (80021c4 <MX_ADC1_Init+0xe4>)
 8002126:	2200      	movs	r2, #0
 8002128:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 800212a:	4b26      	ldr	r3, [pc, #152]	; (80021c4 <MX_ADC1_Init+0xe4>)
 800212c:	2201      	movs	r2, #1
 800212e:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002130:	4b24      	ldr	r3, [pc, #144]	; (80021c4 <MX_ADC1_Init+0xe4>)
 8002132:	2200      	movs	r2, #0
 8002134:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002138:	4b22      	ldr	r3, [pc, #136]	; (80021c4 <MX_ADC1_Init+0xe4>)
 800213a:	2200      	movs	r2, #0
 800213c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800213e:	4b21      	ldr	r3, [pc, #132]	; (80021c4 <MX_ADC1_Init+0xe4>)
 8002140:	2200      	movs	r2, #0
 8002142:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8002144:	4b1f      	ldr	r3, [pc, #124]	; (80021c4 <MX_ADC1_Init+0xe4>)
 8002146:	2200      	movs	r2, #0
 8002148:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800214a:	4b1e      	ldr	r3, [pc, #120]	; (80021c4 <MX_ADC1_Init+0xe4>)
 800214c:	2200      	movs	r2, #0
 800214e:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002150:	4b1c      	ldr	r3, [pc, #112]	; (80021c4 <MX_ADC1_Init+0xe4>)
 8002152:	2200      	movs	r2, #0
 8002154:	641a      	str	r2, [r3, #64]	; 0x40
	hadc1.Init.OversamplingMode = DISABLE;
 8002156:	4b1b      	ldr	r3, [pc, #108]	; (80021c4 <MX_ADC1_Init+0xe4>)
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800215e:	4819      	ldr	r0, [pc, #100]	; (80021c4 <MX_ADC1_Init+0xe4>)
 8002160:	f002 fb0a 	bl	8004778 <HAL_ADC_Init>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_ADC1_Init+0x8e>
		Error_Handler();
 800216a:	f000 fe99 	bl	8002ea0 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 800216e:	2300      	movs	r3, #0
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8002172:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002176:	4619      	mov	r1, r3
 8002178:	4812      	ldr	r0, [pc, #72]	; (80021c4 <MX_ADC1_Init+0xe4>)
 800217a:	f003 feeb 	bl	8005f54 <HAL_ADCEx_MultiModeConfigChannel>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <MX_ADC1_Init+0xa8>
		Error_Handler();
 8002184:	f000 fe8c 	bl	8002ea0 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_14;
 8002188:	4b10      	ldr	r3, [pc, #64]	; (80021cc <MX_ADC1_Init+0xec>)
 800218a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800218c:	2306      	movs	r3, #6
 800218e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8002190:	2303      	movs	r3, #3
 8002192:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002194:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002198:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800219a:	2304      	movs	r3, #4
 800219c:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
	sConfig.OffsetSignedSaturation = DISABLE;
 80021a2:	2300      	movs	r3, #0
 80021a4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80021a8:	463b      	mov	r3, r7
 80021aa:	4619      	mov	r1, r3
 80021ac:	4805      	ldr	r0, [pc, #20]	; (80021c4 <MX_ADC1_Init+0xe4>)
 80021ae:	f002 feeb 	bl	8004f88 <HAL_ADC_ConfigChannel>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_ADC1_Init+0xdc>
		Error_Handler();
 80021b8:	f000 fe72 	bl	8002ea0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80021bc:	bf00      	nop
 80021be:	3730      	adds	r7, #48	; 0x30
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	24000c6c 	.word	0x24000c6c
 80021c8:	40022000 	.word	0x40022000
 80021cc:	3ac04000 	.word	0x3ac04000

080021d0 <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08a      	sub	sp, #40	; 0x28
 80021d4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80021d6:	1d3b      	adds	r3, r7, #4
 80021d8:	2224      	movs	r2, #36	; 0x24
 80021da:	2100      	movs	r1, #0
 80021dc:	4618      	mov	r0, r3
 80021de:	f019 fddc 	bl	801bd9a <memset>

	/* USER CODE END ADC3_Init 1 */

	/** Common config
	 */
	hadc3.Instance = ADC3;
 80021e2:	4b2f      	ldr	r3, [pc, #188]	; (80022a0 <MX_ADC3_Init+0xd0>)
 80021e4:	4a2f      	ldr	r2, [pc, #188]	; (80022a4 <MX_ADC3_Init+0xd4>)
 80021e6:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80021e8:	4b2d      	ldr	r3, [pc, #180]	; (80022a0 <MX_ADC3_Init+0xd0>)
 80021ea:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 80021ee:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80021f0:	4b2b      	ldr	r3, [pc, #172]	; (80022a0 <MX_ADC3_Init+0xd0>)
 80021f2:	2208      	movs	r2, #8
 80021f4:	609a      	str	r2, [r3, #8]
	hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80021f6:	4b2a      	ldr	r3, [pc, #168]	; (80022a0 <MX_ADC3_Init+0xd0>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	60da      	str	r2, [r3, #12]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80021fc:	4b28      	ldr	r3, [pc, #160]	; (80022a0 <MX_ADC3_Init+0xd0>)
 80021fe:	2200      	movs	r2, #0
 8002200:	611a      	str	r2, [r3, #16]
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002202:	4b27      	ldr	r3, [pc, #156]	; (80022a0 <MX_ADC3_Init+0xd0>)
 8002204:	2204      	movs	r2, #4
 8002206:	615a      	str	r2, [r3, #20]
	hadc3.Init.LowPowerAutoWait = DISABLE;
 8002208:	4b25      	ldr	r3, [pc, #148]	; (80022a0 <MX_ADC3_Init+0xd0>)
 800220a:	2200      	movs	r2, #0
 800220c:	761a      	strb	r2, [r3, #24]
	hadc3.Init.ContinuousConvMode = DISABLE;
 800220e:	4b24      	ldr	r3, [pc, #144]	; (80022a0 <MX_ADC3_Init+0xd0>)
 8002210:	2200      	movs	r2, #0
 8002212:	765a      	strb	r2, [r3, #25]
	hadc3.Init.NbrOfConversion = 1;
 8002214:	4b22      	ldr	r3, [pc, #136]	; (80022a0 <MX_ADC3_Init+0xd0>)
 8002216:	2201      	movs	r2, #1
 8002218:	61da      	str	r2, [r3, #28]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 800221a:	4b21      	ldr	r3, [pc, #132]	; (80022a0 <MX_ADC3_Init+0xd0>)
 800221c:	2200      	movs	r2, #0
 800221e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002222:	4b1f      	ldr	r3, [pc, #124]	; (80022a0 <MX_ADC3_Init+0xd0>)
 8002224:	2200      	movs	r2, #0
 8002226:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002228:	4b1d      	ldr	r3, [pc, #116]	; (80022a0 <MX_ADC3_Init+0xd0>)
 800222a:	2200      	movs	r2, #0
 800222c:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.DMAContinuousRequests = ENABLE;
 800222e:	4b1c      	ldr	r3, [pc, #112]	; (80022a0 <MX_ADC3_Init+0xd0>)
 8002230:	2201      	movs	r2, #1
 8002232:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8002236:	4b1a      	ldr	r3, [pc, #104]	; (80022a0 <MX_ADC3_Init+0xd0>)
 8002238:	2200      	movs	r2, #0
 800223a:	635a      	str	r2, [r3, #52]	; 0x34
	hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800223c:	4b18      	ldr	r3, [pc, #96]	; (80022a0 <MX_ADC3_Init+0xd0>)
 800223e:	2200      	movs	r2, #0
 8002240:	631a      	str	r2, [r3, #48]	; 0x30
	hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002242:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <MX_ADC3_Init+0xd0>)
 8002244:	2200      	movs	r2, #0
 8002246:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002248:	4b15      	ldr	r3, [pc, #84]	; (80022a0 <MX_ADC3_Init+0xd0>)
 800224a:	2200      	movs	r2, #0
 800224c:	641a      	str	r2, [r3, #64]	; 0x40
	hadc3.Init.OversamplingMode = DISABLE;
 800224e:	4b14      	ldr	r3, [pc, #80]	; (80022a0 <MX_ADC3_Init+0xd0>)
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8002256:	4812      	ldr	r0, [pc, #72]	; (80022a0 <MX_ADC3_Init+0xd0>)
 8002258:	f002 fa8e 	bl	8004778 <HAL_ADC_Init>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_ADC3_Init+0x96>
		Error_Handler();
 8002262:	f000 fe1d 	bl	8002ea0 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8002266:	4b10      	ldr	r3, [pc, #64]	; (80022a8 <MX_ADC3_Init+0xd8>)
 8002268:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800226a:	2306      	movs	r3, #6
 800226c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 800226e:	2300      	movs	r3, #0
 8002270:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002272:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002276:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002278:	2304      	movs	r3, #4
 800227a:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 800227c:	2300      	movs	r3, #0
 800227e:	61bb      	str	r3, [r7, #24]
	sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8002280:	2300      	movs	r3, #0
 8002282:	623b      	str	r3, [r7, #32]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8002284:	1d3b      	adds	r3, r7, #4
 8002286:	4619      	mov	r1, r3
 8002288:	4805      	ldr	r0, [pc, #20]	; (80022a0 <MX_ADC3_Init+0xd0>)
 800228a:	f002 fe7d 	bl	8004f88 <HAL_ADC_ConfigChannel>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_ADC3_Init+0xc8>
		Error_Handler();
 8002294:	f000 fe04 	bl	8002ea0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8002298:	bf00      	nop
 800229a:	3728      	adds	r7, #40	; 0x28
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	24000cdc 	.word	0x24000cdc
 80022a4:	58026000 	.word	0x58026000
 80022a8:	04300002 	.word	0x04300002

080022ac <MX_FDCAN3_Init>:
/**
 * @brief FDCAN3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN3_Init(void) {
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
	/* USER CODE END FDCAN3_Init 0 */

	/* USER CODE BEGIN FDCAN3_Init 1 */

	/* USER CODE END FDCAN3_Init 1 */
	hfdcan3.Instance = FDCAN3;
 80022b0:	4b2e      	ldr	r3, [pc, #184]	; (800236c <MX_FDCAN3_Init+0xc0>)
 80022b2:	4a2f      	ldr	r2, [pc, #188]	; (8002370 <MX_FDCAN3_Init+0xc4>)
 80022b4:	601a      	str	r2, [r3, #0]
	hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80022b6:	4b2d      	ldr	r3, [pc, #180]	; (800236c <MX_FDCAN3_Init+0xc0>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	609a      	str	r2, [r3, #8]
	hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 80022bc:	4b2b      	ldr	r3, [pc, #172]	; (800236c <MX_FDCAN3_Init+0xc0>)
 80022be:	2200      	movs	r2, #0
 80022c0:	60da      	str	r2, [r3, #12]
	hfdcan3.Init.AutoRetransmission = DISABLE;
 80022c2:	4b2a      	ldr	r3, [pc, #168]	; (800236c <MX_FDCAN3_Init+0xc0>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	741a      	strb	r2, [r3, #16]
	hfdcan3.Init.TransmitPause = DISABLE;
 80022c8:	4b28      	ldr	r3, [pc, #160]	; (800236c <MX_FDCAN3_Init+0xc0>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	745a      	strb	r2, [r3, #17]
	hfdcan3.Init.ProtocolException = DISABLE;
 80022ce:	4b27      	ldr	r3, [pc, #156]	; (800236c <MX_FDCAN3_Init+0xc0>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	749a      	strb	r2, [r3, #18]
	hfdcan3.Init.NominalPrescaler = 16;
 80022d4:	4b25      	ldr	r3, [pc, #148]	; (800236c <MX_FDCAN3_Init+0xc0>)
 80022d6:	2210      	movs	r2, #16
 80022d8:	615a      	str	r2, [r3, #20]
	hfdcan3.Init.NominalSyncJumpWidth = 1;
 80022da:	4b24      	ldr	r3, [pc, #144]	; (800236c <MX_FDCAN3_Init+0xc0>)
 80022dc:	2201      	movs	r2, #1
 80022de:	619a      	str	r2, [r3, #24]
	hfdcan3.Init.NominalTimeSeg1 = 2;
 80022e0:	4b22      	ldr	r3, [pc, #136]	; (800236c <MX_FDCAN3_Init+0xc0>)
 80022e2:	2202      	movs	r2, #2
 80022e4:	61da      	str	r2, [r3, #28]
	hfdcan3.Init.NominalTimeSeg2 = 2;
 80022e6:	4b21      	ldr	r3, [pc, #132]	; (800236c <MX_FDCAN3_Init+0xc0>)
 80022e8:	2202      	movs	r2, #2
 80022ea:	621a      	str	r2, [r3, #32]
	hfdcan3.Init.DataPrescaler = 1;
 80022ec:	4b1f      	ldr	r3, [pc, #124]	; (800236c <MX_FDCAN3_Init+0xc0>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	625a      	str	r2, [r3, #36]	; 0x24
	hfdcan3.Init.DataSyncJumpWidth = 1;
 80022f2:	4b1e      	ldr	r3, [pc, #120]	; (800236c <MX_FDCAN3_Init+0xc0>)
 80022f4:	2201      	movs	r2, #1
 80022f6:	629a      	str	r2, [r3, #40]	; 0x28
	hfdcan3.Init.DataTimeSeg1 = 1;
 80022f8:	4b1c      	ldr	r3, [pc, #112]	; (800236c <MX_FDCAN3_Init+0xc0>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	62da      	str	r2, [r3, #44]	; 0x2c
	hfdcan3.Init.DataTimeSeg2 = 1;
 80022fe:	4b1b      	ldr	r3, [pc, #108]	; (800236c <MX_FDCAN3_Init+0xc0>)
 8002300:	2201      	movs	r2, #1
 8002302:	631a      	str	r2, [r3, #48]	; 0x30
	hfdcan3.Init.MessageRAMOffset = 0;
 8002304:	4b19      	ldr	r3, [pc, #100]	; (800236c <MX_FDCAN3_Init+0xc0>)
 8002306:	2200      	movs	r2, #0
 8002308:	635a      	str	r2, [r3, #52]	; 0x34
	hfdcan3.Init.StdFiltersNbr = 0;
 800230a:	4b18      	ldr	r3, [pc, #96]	; (800236c <MX_FDCAN3_Init+0xc0>)
 800230c:	2200      	movs	r2, #0
 800230e:	639a      	str	r2, [r3, #56]	; 0x38
	hfdcan3.Init.ExtFiltersNbr = 0;
 8002310:	4b16      	ldr	r3, [pc, #88]	; (800236c <MX_FDCAN3_Init+0xc0>)
 8002312:	2200      	movs	r2, #0
 8002314:	63da      	str	r2, [r3, #60]	; 0x3c
	hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8002316:	4b15      	ldr	r3, [pc, #84]	; (800236c <MX_FDCAN3_Init+0xc0>)
 8002318:	2200      	movs	r2, #0
 800231a:	641a      	str	r2, [r3, #64]	; 0x40
	hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800231c:	4b13      	ldr	r3, [pc, #76]	; (800236c <MX_FDCAN3_Init+0xc0>)
 800231e:	2204      	movs	r2, #4
 8002320:	645a      	str	r2, [r3, #68]	; 0x44
	hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8002322:	4b12      	ldr	r3, [pc, #72]	; (800236c <MX_FDCAN3_Init+0xc0>)
 8002324:	2200      	movs	r2, #0
 8002326:	649a      	str	r2, [r3, #72]	; 0x48
	hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8002328:	4b10      	ldr	r3, [pc, #64]	; (800236c <MX_FDCAN3_Init+0xc0>)
 800232a:	2204      	movs	r2, #4
 800232c:	64da      	str	r2, [r3, #76]	; 0x4c
	hfdcan3.Init.RxBuffersNbr = 0;
 800232e:	4b0f      	ldr	r3, [pc, #60]	; (800236c <MX_FDCAN3_Init+0xc0>)
 8002330:	2200      	movs	r2, #0
 8002332:	651a      	str	r2, [r3, #80]	; 0x50
	hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8002334:	4b0d      	ldr	r3, [pc, #52]	; (800236c <MX_FDCAN3_Init+0xc0>)
 8002336:	2204      	movs	r2, #4
 8002338:	655a      	str	r2, [r3, #84]	; 0x54
	hfdcan3.Init.TxEventsNbr = 0;
 800233a:	4b0c      	ldr	r3, [pc, #48]	; (800236c <MX_FDCAN3_Init+0xc0>)
 800233c:	2200      	movs	r2, #0
 800233e:	659a      	str	r2, [r3, #88]	; 0x58
	hfdcan3.Init.TxBuffersNbr = 0;
 8002340:	4b0a      	ldr	r3, [pc, #40]	; (800236c <MX_FDCAN3_Init+0xc0>)
 8002342:	2200      	movs	r2, #0
 8002344:	65da      	str	r2, [r3, #92]	; 0x5c
	hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8002346:	4b09      	ldr	r3, [pc, #36]	; (800236c <MX_FDCAN3_Init+0xc0>)
 8002348:	2200      	movs	r2, #0
 800234a:	661a      	str	r2, [r3, #96]	; 0x60
	hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800234c:	4b07      	ldr	r3, [pc, #28]	; (800236c <MX_FDCAN3_Init+0xc0>)
 800234e:	2200      	movs	r2, #0
 8002350:	665a      	str	r2, [r3, #100]	; 0x64
	hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8002352:	4b06      	ldr	r3, [pc, #24]	; (800236c <MX_FDCAN3_Init+0xc0>)
 8002354:	2204      	movs	r2, #4
 8002356:	669a      	str	r2, [r3, #104]	; 0x68
	if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK) {
 8002358:	4804      	ldr	r0, [pc, #16]	; (800236c <MX_FDCAN3_Init+0xc0>)
 800235a:	f006 f8c1 	bl	80084e0 <HAL_FDCAN_Init>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <MX_FDCAN3_Init+0xbc>
		Error_Handler();
 8002364:	f000 fd9c 	bl	8002ea0 <Error_Handler>
	}
	/* USER CODE BEGIN FDCAN3_Init 2 */

	/* USER CODE END FDCAN3_Init 2 */

}
 8002368:	bf00      	nop
 800236a:	bd80      	pop	{r7, pc}
 800236c:	24000e3c 	.word	0x24000e3c
 8002370:	4000d400 	.word	0x4000d400

08002374 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8002378:	4b1b      	ldr	r3, [pc, #108]	; (80023e8 <MX_I2C2_Init+0x74>)
 800237a:	4a1c      	ldr	r2, [pc, #112]	; (80023ec <MX_I2C2_Init+0x78>)
 800237c:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x20303E5D;
 800237e:	4b1a      	ldr	r3, [pc, #104]	; (80023e8 <MX_I2C2_Init+0x74>)
 8002380:	4a1b      	ldr	r2, [pc, #108]	; (80023f0 <MX_I2C2_Init+0x7c>)
 8002382:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8002384:	4b18      	ldr	r3, [pc, #96]	; (80023e8 <MX_I2C2_Init+0x74>)
 8002386:	2200      	movs	r2, #0
 8002388:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800238a:	4b17      	ldr	r3, [pc, #92]	; (80023e8 <MX_I2C2_Init+0x74>)
 800238c:	2201      	movs	r2, #1
 800238e:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002390:	4b15      	ldr	r3, [pc, #84]	; (80023e8 <MX_I2C2_Init+0x74>)
 8002392:	2200      	movs	r2, #0
 8002394:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 8002396:	4b14      	ldr	r3, [pc, #80]	; (80023e8 <MX_I2C2_Init+0x74>)
 8002398:	2200      	movs	r2, #0
 800239a:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800239c:	4b12      	ldr	r3, [pc, #72]	; (80023e8 <MX_I2C2_Init+0x74>)
 800239e:	2200      	movs	r2, #0
 80023a0:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023a2:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <MX_I2C2_Init+0x74>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023a8:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <MX_I2C2_Init+0x74>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 80023ae:	480e      	ldr	r0, [pc, #56]	; (80023e8 <MX_I2C2_Init+0x74>)
 80023b0:	f006 fdd4 	bl	8008f5c <HAL_I2C_Init>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <MX_I2C2_Init+0x4a>
		Error_Handler();
 80023ba:	f000 fd71 	bl	8002ea0 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 80023be:	2100      	movs	r1, #0
 80023c0:	4809      	ldr	r0, [pc, #36]	; (80023e8 <MX_I2C2_Init+0x74>)
 80023c2:	f006 fe75 	bl	80090b0 <HAL_I2CEx_ConfigAnalogFilter>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <MX_I2C2_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80023cc:	f000 fd68 	bl	8002ea0 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 80023d0:	2100      	movs	r1, #0
 80023d2:	4805      	ldr	r0, [pc, #20]	; (80023e8 <MX_I2C2_Init+0x74>)
 80023d4:	f006 feb7 	bl	8009146 <HAL_I2CEx_ConfigDigitalFilter>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <MX_I2C2_Init+0x6e>
		Error_Handler();
 80023de:	f000 fd5f 	bl	8002ea0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	24000edc 	.word	0x24000edc
 80023ec:	40005800 	.word	0x40005800
 80023f0:	20303e5d 	.word	0x20303e5d

080023f4 <MX_SDMMC2_SD_Init>:
/**
 * @brief SDMMC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC2_SD_Init(void) {
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC2_Init 0 */

	/* USER CODE BEGIN SDMMC2_Init 1 */

	/* USER CODE END SDMMC2_Init 1 */
	hsd2.Instance = SDMMC2;
 80023f8:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <MX_SDMMC2_SD_Init+0x34>)
 80023fa:	4a0c      	ldr	r2, [pc, #48]	; (800242c <MX_SDMMC2_SD_Init+0x38>)
 80023fc:	601a      	str	r2, [r3, #0]
	hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80023fe:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <MX_SDMMC2_SD_Init+0x34>)
 8002400:	2200      	movs	r2, #0
 8002402:	605a      	str	r2, [r3, #4]
	hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002404:	4b08      	ldr	r3, [pc, #32]	; (8002428 <MX_SDMMC2_SD_Init+0x34>)
 8002406:	2200      	movs	r2, #0
 8002408:	609a      	str	r2, [r3, #8]
	hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800240a:	4b07      	ldr	r3, [pc, #28]	; (8002428 <MX_SDMMC2_SD_Init+0x34>)
 800240c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002410:	60da      	str	r2, [r3, #12]
	hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002412:	4b05      	ldr	r3, [pc, #20]	; (8002428 <MX_SDMMC2_SD_Init+0x34>)
 8002414:	2200      	movs	r2, #0
 8002416:	611a      	str	r2, [r3, #16]
	hsd2.Init.ClockDiv = 8;
 8002418:	4b03      	ldr	r3, [pc, #12]	; (8002428 <MX_SDMMC2_SD_Init+0x34>)
 800241a:	2208      	movs	r2, #8
 800241c:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN SDMMC2_Init 2 */

	/* USER CODE END SDMMC2_Init 2 */

}
 800241e:	bf00      	nop
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	24000f30 	.word	0x24000f30
 800242c:	48022400 	.word	0x48022400

08002430 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8002434:	4b27      	ldr	r3, [pc, #156]	; (80024d4 <MX_SPI1_Init+0xa4>)
 8002436:	4a28      	ldr	r2, [pc, #160]	; (80024d8 <MX_SPI1_Init+0xa8>)
 8002438:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800243a:	4b26      	ldr	r3, [pc, #152]	; (80024d4 <MX_SPI1_Init+0xa4>)
 800243c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002440:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002442:	4b24      	ldr	r3, [pc, #144]	; (80024d4 <MX_SPI1_Init+0xa4>)
 8002444:	2200      	movs	r2, #0
 8002446:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002448:	4b22      	ldr	r3, [pc, #136]	; (80024d4 <MX_SPI1_Init+0xa4>)
 800244a:	2207      	movs	r2, #7
 800244c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800244e:	4b21      	ldr	r3, [pc, #132]	; (80024d4 <MX_SPI1_Init+0xa4>)
 8002450:	2200      	movs	r2, #0
 8002452:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002454:	4b1f      	ldr	r3, [pc, #124]	; (80024d4 <MX_SPI1_Init+0xa4>)
 8002456:	2200      	movs	r2, #0
 8002458:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800245a:	4b1e      	ldr	r3, [pc, #120]	; (80024d4 <MX_SPI1_Init+0xa4>)
 800245c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002460:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002462:	4b1c      	ldr	r3, [pc, #112]	; (80024d4 <MX_SPI1_Init+0xa4>)
 8002464:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002468:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800246a:	4b1a      	ldr	r3, [pc, #104]	; (80024d4 <MX_SPI1_Init+0xa4>)
 800246c:	2200      	movs	r2, #0
 800246e:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002470:	4b18      	ldr	r3, [pc, #96]	; (80024d4 <MX_SPI1_Init+0xa4>)
 8002472:	2200      	movs	r2, #0
 8002474:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002476:	4b17      	ldr	r3, [pc, #92]	; (80024d4 <MX_SPI1_Init+0xa4>)
 8002478:	2200      	movs	r2, #0
 800247a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 0x0;
 800247c:	4b15      	ldr	r3, [pc, #84]	; (80024d4 <MX_SPI1_Init+0xa4>)
 800247e:	2200      	movs	r2, #0
 8002480:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002482:	4b14      	ldr	r3, [pc, #80]	; (80024d4 <MX_SPI1_Init+0xa4>)
 8002484:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002488:	635a      	str	r2, [r3, #52]	; 0x34
	hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800248a:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <MX_SPI1_Init+0xa4>)
 800248c:	2200      	movs	r2, #0
 800248e:	639a      	str	r2, [r3, #56]	; 0x38
	hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002490:	4b10      	ldr	r3, [pc, #64]	; (80024d4 <MX_SPI1_Init+0xa4>)
 8002492:	2200      	movs	r2, #0
 8002494:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi1.Init.TxCRCInitializationPattern =
 8002496:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <MX_SPI1_Init+0xa4>)
 8002498:	2200      	movs	r2, #0
 800249a:	641a      	str	r2, [r3, #64]	; 0x40
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.RxCRCInitializationPattern =
 800249c:	4b0d      	ldr	r3, [pc, #52]	; (80024d4 <MX_SPI1_Init+0xa4>)
 800249e:	2200      	movs	r2, #0
 80024a0:	645a      	str	r2, [r3, #68]	; 0x44
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80024a2:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <MX_SPI1_Init+0xa4>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	649a      	str	r2, [r3, #72]	; 0x48
	hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80024a8:	4b0a      	ldr	r3, [pc, #40]	; (80024d4 <MX_SPI1_Init+0xa4>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80024ae:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <MX_SPI1_Init+0xa4>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	651a      	str	r2, [r3, #80]	; 0x50
	hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80024b4:	4b07      	ldr	r3, [pc, #28]	; (80024d4 <MX_SPI1_Init+0xa4>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	655a      	str	r2, [r3, #84]	; 0x54
	hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80024ba:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <MX_SPI1_Init+0xa4>)
 80024bc:	2200      	movs	r2, #0
 80024be:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80024c0:	4804      	ldr	r0, [pc, #16]	; (80024d4 <MX_SPI1_Init+0xa4>)
 80024c2:	f00d f9a9 	bl	800f818 <HAL_SPI_Init>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <MX_SPI1_Init+0xa0>
		Error_Handler();
 80024cc:	f000 fce8 	bl	8002ea0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80024d0:	bf00      	nop
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	24000fac 	.word	0x24000fac
 80024d8:	40013000 	.word	0x40013000

080024dc <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 80024e0:	4b27      	ldr	r3, [pc, #156]	; (8002580 <MX_SPI2_Init+0xa4>)
 80024e2:	4a28      	ldr	r2, [pc, #160]	; (8002584 <MX_SPI2_Init+0xa8>)
 80024e4:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80024e6:	4b26      	ldr	r3, [pc, #152]	; (8002580 <MX_SPI2_Init+0xa4>)
 80024e8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80024ec:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80024ee:	4b24      	ldr	r3, [pc, #144]	; (8002580 <MX_SPI2_Init+0xa4>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80024f4:	4b22      	ldr	r3, [pc, #136]	; (8002580 <MX_SPI2_Init+0xa4>)
 80024f6:	2207      	movs	r2, #7
 80024f8:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024fa:	4b21      	ldr	r3, [pc, #132]	; (8002580 <MX_SPI2_Init+0xa4>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002500:	4b1f      	ldr	r3, [pc, #124]	; (8002580 <MX_SPI2_Init+0xa4>)
 8002502:	2200      	movs	r2, #0
 8002504:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8002506:	4b1e      	ldr	r3, [pc, #120]	; (8002580 <MX_SPI2_Init+0xa4>)
 8002508:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800250c:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800250e:	4b1c      	ldr	r3, [pc, #112]	; (8002580 <MX_SPI2_Init+0xa4>)
 8002510:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002514:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002516:	4b1a      	ldr	r3, [pc, #104]	; (8002580 <MX_SPI2_Init+0xa4>)
 8002518:	2200      	movs	r2, #0
 800251a:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800251c:	4b18      	ldr	r3, [pc, #96]	; (8002580 <MX_SPI2_Init+0xa4>)
 800251e:	2200      	movs	r2, #0
 8002520:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002522:	4b17      	ldr	r3, [pc, #92]	; (8002580 <MX_SPI2_Init+0xa4>)
 8002524:	2200      	movs	r2, #0
 8002526:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 0x0;
 8002528:	4b15      	ldr	r3, [pc, #84]	; (8002580 <MX_SPI2_Init+0xa4>)
 800252a:	2200      	movs	r2, #0
 800252c:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800252e:	4b14      	ldr	r3, [pc, #80]	; (8002580 <MX_SPI2_Init+0xa4>)
 8002530:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002534:	635a      	str	r2, [r3, #52]	; 0x34
	hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002536:	4b12      	ldr	r3, [pc, #72]	; (8002580 <MX_SPI2_Init+0xa4>)
 8002538:	2200      	movs	r2, #0
 800253a:	639a      	str	r2, [r3, #56]	; 0x38
	hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800253c:	4b10      	ldr	r3, [pc, #64]	; (8002580 <MX_SPI2_Init+0xa4>)
 800253e:	2200      	movs	r2, #0
 8002540:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi2.Init.TxCRCInitializationPattern =
 8002542:	4b0f      	ldr	r3, [pc, #60]	; (8002580 <MX_SPI2_Init+0xa4>)
 8002544:	2200      	movs	r2, #0
 8002546:	641a      	str	r2, [r3, #64]	; 0x40
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.RxCRCInitializationPattern =
 8002548:	4b0d      	ldr	r3, [pc, #52]	; (8002580 <MX_SPI2_Init+0xa4>)
 800254a:	2200      	movs	r2, #0
 800254c:	645a      	str	r2, [r3, #68]	; 0x44
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800254e:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <MX_SPI2_Init+0xa4>)
 8002550:	2200      	movs	r2, #0
 8002552:	649a      	str	r2, [r3, #72]	; 0x48
	hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002554:	4b0a      	ldr	r3, [pc, #40]	; (8002580 <MX_SPI2_Init+0xa4>)
 8002556:	2200      	movs	r2, #0
 8002558:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800255a:	4b09      	ldr	r3, [pc, #36]	; (8002580 <MX_SPI2_Init+0xa4>)
 800255c:	2200      	movs	r2, #0
 800255e:	651a      	str	r2, [r3, #80]	; 0x50
	hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002560:	4b07      	ldr	r3, [pc, #28]	; (8002580 <MX_SPI2_Init+0xa4>)
 8002562:	2200      	movs	r2, #0
 8002564:	655a      	str	r2, [r3, #84]	; 0x54
	hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002566:	4b06      	ldr	r3, [pc, #24]	; (8002580 <MX_SPI2_Init+0xa4>)
 8002568:	2200      	movs	r2, #0
 800256a:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 800256c:	4804      	ldr	r0, [pc, #16]	; (8002580 <MX_SPI2_Init+0xa4>)
 800256e:	f00d f953 	bl	800f818 <HAL_SPI_Init>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <MX_SPI2_Init+0xa0>
		Error_Handler();
 8002578:	f000 fc92 	bl	8002ea0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 800257c:	bf00      	nop
 800257e:	bd80      	pop	{r7, pc}
 8002580:	24001034 	.word	0x24001034
 8002584:	40003800 	.word	0x40003800

08002588 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 800258c:	4b27      	ldr	r3, [pc, #156]	; (800262c <MX_SPI3_Init+0xa4>)
 800258e:	4a28      	ldr	r2, [pc, #160]	; (8002630 <MX_SPI3_Init+0xa8>)
 8002590:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8002592:	4b26      	ldr	r3, [pc, #152]	; (800262c <MX_SPI3_Init+0xa4>)
 8002594:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002598:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800259a:	4b24      	ldr	r3, [pc, #144]	; (800262c <MX_SPI3_Init+0xa4>)
 800259c:	2200      	movs	r2, #0
 800259e:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80025a0:	4b22      	ldr	r3, [pc, #136]	; (800262c <MX_SPI3_Init+0xa4>)
 80025a2:	2207      	movs	r2, #7
 80025a4:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025a6:	4b21      	ldr	r3, [pc, #132]	; (800262c <MX_SPI3_Init+0xa4>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025ac:	4b1f      	ldr	r3, [pc, #124]	; (800262c <MX_SPI3_Init+0xa4>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 80025b2:	4b1e      	ldr	r3, [pc, #120]	; (800262c <MX_SPI3_Init+0xa4>)
 80025b4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80025b8:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80025ba:	4b1c      	ldr	r3, [pc, #112]	; (800262c <MX_SPI3_Init+0xa4>)
 80025bc:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80025c0:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025c2:	4b1a      	ldr	r3, [pc, #104]	; (800262c <MX_SPI3_Init+0xa4>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80025c8:	4b18      	ldr	r3, [pc, #96]	; (800262c <MX_SPI3_Init+0xa4>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025ce:	4b17      	ldr	r3, [pc, #92]	; (800262c <MX_SPI3_Init+0xa4>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 0x0;
 80025d4:	4b15      	ldr	r3, [pc, #84]	; (800262c <MX_SPI3_Init+0xa4>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80025da:	4b14      	ldr	r3, [pc, #80]	; (800262c <MX_SPI3_Init+0xa4>)
 80025dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025e0:	635a      	str	r2, [r3, #52]	; 0x34
	hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80025e2:	4b12      	ldr	r3, [pc, #72]	; (800262c <MX_SPI3_Init+0xa4>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	639a      	str	r2, [r3, #56]	; 0x38
	hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80025e8:	4b10      	ldr	r3, [pc, #64]	; (800262c <MX_SPI3_Init+0xa4>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi3.Init.TxCRCInitializationPattern =
 80025ee:	4b0f      	ldr	r3, [pc, #60]	; (800262c <MX_SPI3_Init+0xa4>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	641a      	str	r2, [r3, #64]	; 0x40
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi3.Init.RxCRCInitializationPattern =
 80025f4:	4b0d      	ldr	r3, [pc, #52]	; (800262c <MX_SPI3_Init+0xa4>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	645a      	str	r2, [r3, #68]	; 0x44
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80025fa:	4b0c      	ldr	r3, [pc, #48]	; (800262c <MX_SPI3_Init+0xa4>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	649a      	str	r2, [r3, #72]	; 0x48
	hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002600:	4b0a      	ldr	r3, [pc, #40]	; (800262c <MX_SPI3_Init+0xa4>)
 8002602:	2200      	movs	r2, #0
 8002604:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002606:	4b09      	ldr	r3, [pc, #36]	; (800262c <MX_SPI3_Init+0xa4>)
 8002608:	2200      	movs	r2, #0
 800260a:	651a      	str	r2, [r3, #80]	; 0x50
	hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800260c:	4b07      	ldr	r3, [pc, #28]	; (800262c <MX_SPI3_Init+0xa4>)
 800260e:	2200      	movs	r2, #0
 8002610:	655a      	str	r2, [r3, #84]	; 0x54
	hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002612:	4b06      	ldr	r3, [pc, #24]	; (800262c <MX_SPI3_Init+0xa4>)
 8002614:	2200      	movs	r2, #0
 8002616:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8002618:	4804      	ldr	r0, [pc, #16]	; (800262c <MX_SPI3_Init+0xa4>)
 800261a:	f00d f8fd 	bl	800f818 <HAL_SPI_Init>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <MX_SPI3_Init+0xa0>
		Error_Handler();
 8002624:	f000 fc3c 	bl	8002ea0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8002628:	bf00      	nop
 800262a:	bd80      	pop	{r7, pc}
 800262c:	240010bc 	.word	0x240010bc
 8002630:	40003c00 	.word	0x40003c00

08002634 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8002634:	b580      	push	{r7, lr}
 8002636:	b08a      	sub	sp, #40	; 0x28
 8002638:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800263a:	f107 031c 	add.w	r3, r7, #28
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	605a      	str	r2, [r3, #4]
 8002644:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002646:	463b      	mov	r3, r7
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	609a      	str	r2, [r3, #8]
 8002650:	60da      	str	r2, [r3, #12]
 8002652:	611a      	str	r2, [r3, #16]
 8002654:	615a      	str	r2, [r3, #20]
 8002656:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002658:	4b21      	ldr	r3, [pc, #132]	; (80026e0 <MX_TIM2_Init+0xac>)
 800265a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800265e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8002660:	4b1f      	ldr	r3, [pc, #124]	; (80026e0 <MX_TIM2_Init+0xac>)
 8002662:	2200      	movs	r2, #0
 8002664:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002666:	4b1e      	ldr	r3, [pc, #120]	; (80026e0 <MX_TIM2_Init+0xac>)
 8002668:	2200      	movs	r2, #0
 800266a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 90;
 800266c:	4b1c      	ldr	r3, [pc, #112]	; (80026e0 <MX_TIM2_Init+0xac>)
 800266e:	225a      	movs	r2, #90	; 0x5a
 8002670:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002672:	4b1b      	ldr	r3, [pc, #108]	; (80026e0 <MX_TIM2_Init+0xac>)
 8002674:	2200      	movs	r2, #0
 8002676:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002678:	4b19      	ldr	r3, [pc, #100]	; (80026e0 <MX_TIM2_Init+0xac>)
 800267a:	2200      	movs	r2, #0
 800267c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 800267e:	4818      	ldr	r0, [pc, #96]	; (80026e0 <MX_TIM2_Init+0xac>)
 8002680:	f00d feba 	bl	80103f8 <HAL_TIM_PWM_Init>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <MX_TIM2_Init+0x5a>
		Error_Handler();
 800268a:	f000 fc09 	bl	8002ea0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800268e:	2300      	movs	r3, #0
 8002690:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002692:	2300      	movs	r3, #0
 8002694:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002696:	f107 031c 	add.w	r3, r7, #28
 800269a:	4619      	mov	r1, r3
 800269c:	4810      	ldr	r0, [pc, #64]	; (80026e0 <MX_TIM2_Init+0xac>)
 800269e:	f00f f941 	bl	8011924 <HAL_TIMEx_MasterConfigSynchronization>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <MX_TIM2_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 80026a8:	f000 fbfa 	bl	8002ea0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026ac:	2360      	movs	r3, #96	; 0x60
 80026ae:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80026b0:	2300      	movs	r3, #0
 80026b2:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026b4:	2300      	movs	r3, #0
 80026b6:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026b8:	2300      	movs	r3, #0
 80026ba:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 80026bc:	463b      	mov	r3, r7
 80026be:	2208      	movs	r2, #8
 80026c0:	4619      	mov	r1, r3
 80026c2:	4807      	ldr	r0, [pc, #28]	; (80026e0 <MX_TIM2_Init+0xac>)
 80026c4:	f00e fb60 	bl	8010d88 <HAL_TIM_PWM_ConfigChannel>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <MX_TIM2_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 80026ce:	f000 fbe7 	bl	8002ea0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80026d2:	4803      	ldr	r0, [pc, #12]	; (80026e0 <MX_TIM2_Init+0xac>)
 80026d4:	f001 f91a 	bl	800390c <HAL_TIM_MspPostInit>

}
 80026d8:	bf00      	nop
 80026da:	3728      	adds	r7, #40	; 0x28
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	24001144 	.word	0x24001144

080026e4 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08a      	sub	sp, #40	; 0x28
 80026e8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80026ea:	f107 031c 	add.w	r3, r7, #28
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	605a      	str	r2, [r3, #4]
 80026f4:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80026f6:	463b      	mov	r3, r7
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	605a      	str	r2, [r3, #4]
 80026fe:	609a      	str	r2, [r3, #8]
 8002700:	60da      	str	r2, [r3, #12]
 8002702:	611a      	str	r2, [r3, #16]
 8002704:	615a      	str	r2, [r3, #20]
 8002706:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002708:	4b26      	ldr	r3, [pc, #152]	; (80027a4 <MX_TIM3_Init+0xc0>)
 800270a:	4a27      	ldr	r2, [pc, #156]	; (80027a8 <MX_TIM3_Init+0xc4>)
 800270c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800270e:	4b25      	ldr	r3, [pc, #148]	; (80027a4 <MX_TIM3_Init+0xc0>)
 8002710:	2200      	movs	r2, #0
 8002712:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002714:	4b23      	ldr	r3, [pc, #140]	; (80027a4 <MX_TIM3_Init+0xc0>)
 8002716:	2200      	movs	r2, #0
 8002718:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 90;
 800271a:	4b22      	ldr	r3, [pc, #136]	; (80027a4 <MX_TIM3_Init+0xc0>)
 800271c:	225a      	movs	r2, #90	; 0x5a
 800271e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002720:	4b20      	ldr	r3, [pc, #128]	; (80027a4 <MX_TIM3_Init+0xc0>)
 8002722:	2200      	movs	r2, #0
 8002724:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002726:	4b1f      	ldr	r3, [pc, #124]	; (80027a4 <MX_TIM3_Init+0xc0>)
 8002728:	2200      	movs	r2, #0
 800272a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 800272c:	481d      	ldr	r0, [pc, #116]	; (80027a4 <MX_TIM3_Init+0xc0>)
 800272e:	f00d fe63 	bl	80103f8 <HAL_TIM_PWM_Init>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <MX_TIM3_Init+0x58>
		Error_Handler();
 8002738:	f000 fbb2 	bl	8002ea0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800273c:	2300      	movs	r3, #0
 800273e:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002740:	2300      	movs	r3, #0
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8002744:	f107 031c 	add.w	r3, r7, #28
 8002748:	4619      	mov	r1, r3
 800274a:	4816      	ldr	r0, [pc, #88]	; (80027a4 <MX_TIM3_Init+0xc0>)
 800274c:	f00f f8ea 	bl	8011924 <HAL_TIMEx_MasterConfigSynchronization>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_TIM3_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 8002756:	f000 fba3 	bl	8002ea0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800275a:	2360      	movs	r3, #96	; 0x60
 800275c:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 800275e:	2300      	movs	r3, #0
 8002760:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002762:	2300      	movs	r3, #0
 8002764:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002766:	2300      	movs	r3, #0
 8002768:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 800276a:	463b      	mov	r3, r7
 800276c:	2200      	movs	r2, #0
 800276e:	4619      	mov	r1, r3
 8002770:	480c      	ldr	r0, [pc, #48]	; (80027a4 <MX_TIM3_Init+0xc0>)
 8002772:	f00e fb09 	bl	8010d88 <HAL_TIM_PWM_ConfigChannel>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <MX_TIM3_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 800277c:	f000 fb90 	bl	8002ea0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8002780:	463b      	mov	r3, r7
 8002782:	2204      	movs	r2, #4
 8002784:	4619      	mov	r1, r3
 8002786:	4807      	ldr	r0, [pc, #28]	; (80027a4 <MX_TIM3_Init+0xc0>)
 8002788:	f00e fafe 	bl	8010d88 <HAL_TIM_PWM_ConfigChannel>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <MX_TIM3_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 8002792:	f000 fb85 	bl	8002ea0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8002796:	4803      	ldr	r0, [pc, #12]	; (80027a4 <MX_TIM3_Init+0xc0>)
 8002798:	f001 f8b8 	bl	800390c <HAL_TIM_MspPostInit>

}
 800279c:	bf00      	nop
 800279e:	3728      	adds	r7, #40	; 0x28
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	24001190 	.word	0x24001190
 80027a8:	40000400 	.word	0x40000400

080027ac <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b08a      	sub	sp, #40	; 0x28
 80027b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80027b2:	f107 031c 	add.w	r3, r7, #28
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	605a      	str	r2, [r3, #4]
 80027bc:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80027be:	463b      	mov	r3, r7
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	605a      	str	r2, [r3, #4]
 80027c6:	609a      	str	r2, [r3, #8]
 80027c8:	60da      	str	r2, [r3, #12]
 80027ca:	611a      	str	r2, [r3, #16]
 80027cc:	615a      	str	r2, [r3, #20]
 80027ce:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80027d0:	4b32      	ldr	r3, [pc, #200]	; (800289c <MX_TIM4_Init+0xf0>)
 80027d2:	4a33      	ldr	r2, [pc, #204]	; (80028a0 <MX_TIM4_Init+0xf4>)
 80027d4:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 29;
 80027d6:	4b31      	ldr	r3, [pc, #196]	; (800289c <MX_TIM4_Init+0xf0>)
 80027d8:	221d      	movs	r2, #29
 80027da:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027dc:	4b2f      	ldr	r3, [pc, #188]	; (800289c <MX_TIM4_Init+0xf0>)
 80027de:	2200      	movs	r2, #0
 80027e0:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 9999;
 80027e2:	4b2e      	ldr	r3, [pc, #184]	; (800289c <MX_TIM4_Init+0xf0>)
 80027e4:	f242 720f 	movw	r2, #9999	; 0x270f
 80027e8:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027ea:	4b2c      	ldr	r3, [pc, #176]	; (800289c <MX_TIM4_Init+0xf0>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027f0:	4b2a      	ldr	r3, [pc, #168]	; (800289c <MX_TIM4_Init+0xf0>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 80027f6:	4829      	ldr	r0, [pc, #164]	; (800289c <MX_TIM4_Init+0xf0>)
 80027f8:	f00d fdfe 	bl	80103f8 <HAL_TIM_PWM_Init>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <MX_TIM4_Init+0x5a>
		Error_Handler();
 8002802:	f000 fb4d 	bl	8002ea0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002806:	2300      	movs	r3, #0
 8002808:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800280a:	2300      	movs	r3, #0
 800280c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 800280e:	f107 031c 	add.w	r3, r7, #28
 8002812:	4619      	mov	r1, r3
 8002814:	4821      	ldr	r0, [pc, #132]	; (800289c <MX_TIM4_Init+0xf0>)
 8002816:	f00f f885 	bl	8011924 <HAL_TIMEx_MasterConfigSynchronization>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <MX_TIM4_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 8002820:	f000 fb3e 	bl	8002ea0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002824:	2360      	movs	r3, #96	; 0x60
 8002826:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8002828:	2300      	movs	r3, #0
 800282a:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800282c:	2300      	movs	r3, #0
 800282e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002830:	2300      	movs	r3, #0
 8002832:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 8002834:	463b      	mov	r3, r7
 8002836:	2200      	movs	r2, #0
 8002838:	4619      	mov	r1, r3
 800283a:	4818      	ldr	r0, [pc, #96]	; (800289c <MX_TIM4_Init+0xf0>)
 800283c:	f00e faa4 	bl	8010d88 <HAL_TIM_PWM_ConfigChannel>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MX_TIM4_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 8002846:	f000 fb2b 	bl	8002ea0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 800284a:	463b      	mov	r3, r7
 800284c:	2204      	movs	r2, #4
 800284e:	4619      	mov	r1, r3
 8002850:	4812      	ldr	r0, [pc, #72]	; (800289c <MX_TIM4_Init+0xf0>)
 8002852:	f00e fa99 	bl	8010d88 <HAL_TIM_PWM_ConfigChannel>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <MX_TIM4_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 800285c:	f000 fb20 	bl	8002ea0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 8002860:	463b      	mov	r3, r7
 8002862:	2208      	movs	r2, #8
 8002864:	4619      	mov	r1, r3
 8002866:	480d      	ldr	r0, [pc, #52]	; (800289c <MX_TIM4_Init+0xf0>)
 8002868:	f00e fa8e 	bl	8010d88 <HAL_TIM_PWM_ConfigChannel>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <MX_TIM4_Init+0xca>
			!= HAL_OK) {
		Error_Handler();
 8002872:	f000 fb15 	bl	8002ea0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 8002876:	463b      	mov	r3, r7
 8002878:	220c      	movs	r2, #12
 800287a:	4619      	mov	r1, r3
 800287c:	4807      	ldr	r0, [pc, #28]	; (800289c <MX_TIM4_Init+0xf0>)
 800287e:	f00e fa83 	bl	8010d88 <HAL_TIM_PWM_ConfigChannel>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <MX_TIM4_Init+0xe0>
			!= HAL_OK) {
		Error_Handler();
 8002888:	f000 fb0a 	bl	8002ea0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 800288c:	4803      	ldr	r0, [pc, #12]	; (800289c <MX_TIM4_Init+0xf0>)
 800288e:	f001 f83d 	bl	800390c <HAL_TIM_MspPostInit>

}
 8002892:	bf00      	nop
 8002894:	3728      	adds	r7, #40	; 0x28
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	240011dc 	.word	0x240011dc
 80028a0:	40000800 	.word	0x40000800

080028a4 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b08a      	sub	sp, #40	; 0x28
 80028a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80028aa:	f107 031c 	add.w	r3, r7, #28
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	605a      	str	r2, [r3, #4]
 80028b4:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80028b6:	463b      	mov	r3, r7
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	60da      	str	r2, [r3, #12]
 80028c2:	611a      	str	r2, [r3, #16]
 80028c4:	615a      	str	r2, [r3, #20]
 80028c6:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 80028c8:	4b21      	ldr	r3, [pc, #132]	; (8002950 <MX_TIM5_Init+0xac>)
 80028ca:	4a22      	ldr	r2, [pc, #136]	; (8002954 <MX_TIM5_Init+0xb0>)
 80028cc:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 80028ce:	4b20      	ldr	r3, [pc, #128]	; (8002950 <MX_TIM5_Init+0xac>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028d4:	4b1e      	ldr	r3, [pc, #120]	; (8002950 <MX_TIM5_Init+0xac>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 90;
 80028da:	4b1d      	ldr	r3, [pc, #116]	; (8002950 <MX_TIM5_Init+0xac>)
 80028dc:	225a      	movs	r2, #90	; 0x5a
 80028de:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028e0:	4b1b      	ldr	r3, [pc, #108]	; (8002950 <MX_TIM5_Init+0xac>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028e6:	4b1a      	ldr	r3, [pc, #104]	; (8002950 <MX_TIM5_Init+0xac>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK) {
 80028ec:	4818      	ldr	r0, [pc, #96]	; (8002950 <MX_TIM5_Init+0xac>)
 80028ee:	f00d fd83 	bl	80103f8 <HAL_TIM_PWM_Init>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <MX_TIM5_Init+0x58>
		Error_Handler();
 80028f8:	f000 fad2 	bl	8002ea0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028fc:	2300      	movs	r3, #0
 80028fe:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002900:	2300      	movs	r3, #0
 8002902:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8002904:	f107 031c 	add.w	r3, r7, #28
 8002908:	4619      	mov	r1, r3
 800290a:	4811      	ldr	r0, [pc, #68]	; (8002950 <MX_TIM5_Init+0xac>)
 800290c:	f00f f80a 	bl	8011924 <HAL_TIMEx_MasterConfigSynchronization>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <MX_TIM5_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 8002916:	f000 fac3 	bl	8002ea0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800291a:	2360      	movs	r3, #96	; 0x60
 800291c:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 800291e:	2300      	movs	r3, #0
 8002920:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002922:	2300      	movs	r3, #0
 8002924:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002926:	2300      	movs	r3, #0
 8002928:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4)
 800292a:	463b      	mov	r3, r7
 800292c:	220c      	movs	r2, #12
 800292e:	4619      	mov	r1, r3
 8002930:	4807      	ldr	r0, [pc, #28]	; (8002950 <MX_TIM5_Init+0xac>)
 8002932:	f00e fa29 	bl	8010d88 <HAL_TIM_PWM_ConfigChannel>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <MX_TIM5_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 800293c:	f000 fab0 	bl	8002ea0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
	HAL_TIM_MspPostInit(&htim5);
 8002940:	4803      	ldr	r0, [pc, #12]	; (8002950 <MX_TIM5_Init+0xac>)
 8002942:	f000 ffe3 	bl	800390c <HAL_TIM_MspPostInit>

}
 8002946:	bf00      	nop
 8002948:	3728      	adds	r7, #40	; 0x28
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	24001228 	.word	0x24001228
 8002954:	40000c00 	.word	0x40000c00

08002958 <MX_TIM13_Init>:
/**
 * @brief TIM13 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM13_Init(void) {
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
	/* USER CODE END TIM13_Init 0 */

	/* USER CODE BEGIN TIM13_Init 1 */

	/* USER CODE END TIM13_Init 1 */
	htim13.Instance = TIM13;
 800295c:	4b0e      	ldr	r3, [pc, #56]	; (8002998 <MX_TIM13_Init+0x40>)
 800295e:	4a0f      	ldr	r2, [pc, #60]	; (800299c <MX_TIM13_Init+0x44>)
 8002960:	601a      	str	r2, [r3, #0]
	htim13.Init.Prescaler = 99;
 8002962:	4b0d      	ldr	r3, [pc, #52]	; (8002998 <MX_TIM13_Init+0x40>)
 8002964:	2263      	movs	r2, #99	; 0x63
 8002966:	605a      	str	r2, [r3, #4]
	htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002968:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <MX_TIM13_Init+0x40>)
 800296a:	2200      	movs	r2, #0
 800296c:	609a      	str	r2, [r3, #8]
	htim13.Init.Period = 65535;
 800296e:	4b0a      	ldr	r3, [pc, #40]	; (8002998 <MX_TIM13_Init+0x40>)
 8002970:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002974:	60da      	str	r2, [r3, #12]
	htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002976:	4b08      	ldr	r3, [pc, #32]	; (8002998 <MX_TIM13_Init+0x40>)
 8002978:	2200      	movs	r2, #0
 800297a:	611a      	str	r2, [r3, #16]
	htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800297c:	4b06      	ldr	r3, [pc, #24]	; (8002998 <MX_TIM13_Init+0x40>)
 800297e:	2200      	movs	r2, #0
 8002980:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim13) != HAL_OK) {
 8002982:	4805      	ldr	r0, [pc, #20]	; (8002998 <MX_TIM13_Init+0x40>)
 8002984:	f00d fce1 	bl	801034a <HAL_TIM_Base_Init>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <MX_TIM13_Init+0x3a>
		Error_Handler();
 800298e:	f000 fa87 	bl	8002ea0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM13_Init 2 */

	/* USER CODE END TIM13_Init 2 */

}
 8002992:	bf00      	nop
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	24001274 	.word	0x24001274
 800299c:	40001c00 	.word	0x40001c00

080029a0 <MX_TIM14_Init>:
/**
 * @brief TIM14 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM14_Init(void) {
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
	/* USER CODE END TIM14_Init 0 */

	/* USER CODE BEGIN TIM14_Init 1 */

	/* USER CODE END TIM14_Init 1 */
	htim14.Instance = TIM14;
 80029a4:	4b0e      	ldr	r3, [pc, #56]	; (80029e0 <MX_TIM14_Init+0x40>)
 80029a6:	4a0f      	ldr	r2, [pc, #60]	; (80029e4 <MX_TIM14_Init+0x44>)
 80029a8:	601a      	str	r2, [r3, #0]
	htim14.Init.Prescaler = 99;
 80029aa:	4b0d      	ldr	r3, [pc, #52]	; (80029e0 <MX_TIM14_Init+0x40>)
 80029ac:	2263      	movs	r2, #99	; 0x63
 80029ae:	605a      	str	r2, [r3, #4]
	htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029b0:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <MX_TIM14_Init+0x40>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	609a      	str	r2, [r3, #8]
	htim14.Init.Period = 65535;
 80029b6:	4b0a      	ldr	r3, [pc, #40]	; (80029e0 <MX_TIM14_Init+0x40>)
 80029b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029bc:	60da      	str	r2, [r3, #12]
	htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029be:	4b08      	ldr	r3, [pc, #32]	; (80029e0 <MX_TIM14_Init+0x40>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	611a      	str	r2, [r3, #16]
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029c4:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <MX_TIM14_Init+0x40>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim14) != HAL_OK) {
 80029ca:	4805      	ldr	r0, [pc, #20]	; (80029e0 <MX_TIM14_Init+0x40>)
 80029cc:	f00d fcbd 	bl	801034a <HAL_TIM_Base_Init>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <MX_TIM14_Init+0x3a>
		Error_Handler();
 80029d6:	f000 fa63 	bl	8002ea0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM14_Init 2 */

	/* USER CODE END TIM14_Init 2 */

}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	240012c0 	.word	0x240012c0
 80029e4:	40002000 	.word	0x40002000

080029e8 <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 80029ec:	4b22      	ldr	r3, [pc, #136]	; (8002a78 <MX_UART4_Init+0x90>)
 80029ee:	4a23      	ldr	r2, [pc, #140]	; (8002a7c <MX_UART4_Init+0x94>)
 80029f0:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 80029f2:	4b21      	ldr	r3, [pc, #132]	; (8002a78 <MX_UART4_Init+0x90>)
 80029f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029f8:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80029fa:	4b1f      	ldr	r3, [pc, #124]	; (8002a78 <MX_UART4_Init+0x90>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8002a00:	4b1d      	ldr	r3, [pc, #116]	; (8002a78 <MX_UART4_Init+0x90>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8002a06:	4b1c      	ldr	r3, [pc, #112]	; (8002a78 <MX_UART4_Init+0x90>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8002a0c:	4b1a      	ldr	r3, [pc, #104]	; (8002a78 <MX_UART4_Init+0x90>)
 8002a0e:	220c      	movs	r2, #12
 8002a10:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a12:	4b19      	ldr	r3, [pc, #100]	; (8002a78 <MX_UART4_Init+0x90>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a18:	4b17      	ldr	r3, [pc, #92]	; (8002a78 <MX_UART4_Init+0x90>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a1e:	4b16      	ldr	r3, [pc, #88]	; (8002a78 <MX_UART4_Init+0x90>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	621a      	str	r2, [r3, #32]
	huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a24:	4b14      	ldr	r3, [pc, #80]	; (8002a78 <MX_UART4_Init+0x90>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	625a      	str	r2, [r3, #36]	; 0x24
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a2a:	4b13      	ldr	r3, [pc, #76]	; (8002a78 <MX_UART4_Init+0x90>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8002a30:	4811      	ldr	r0, [pc, #68]	; (8002a78 <MX_UART4_Init+0x90>)
 8002a32:	f00f f831 	bl	8011a98 <HAL_UART_Init>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <MX_UART4_Init+0x58>
		Error_Handler();
 8002a3c:	f000 fa30 	bl	8002ea0 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8)
 8002a40:	2100      	movs	r1, #0
 8002a42:	480d      	ldr	r0, [pc, #52]	; (8002a78 <MX_UART4_Init+0x90>)
 8002a44:	f010 f937 	bl	8012cb6 <HAL_UARTEx_SetTxFifoThreshold>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <MX_UART4_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8002a4e:	f000 fa27 	bl	8002ea0 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8)
 8002a52:	2100      	movs	r1, #0
 8002a54:	4808      	ldr	r0, [pc, #32]	; (8002a78 <MX_UART4_Init+0x90>)
 8002a56:	f010 f96c 	bl	8012d32 <HAL_UARTEx_SetRxFifoThreshold>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <MX_UART4_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8002a60:	f000 fa1e 	bl	8002ea0 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK) {
 8002a64:	4804      	ldr	r0, [pc, #16]	; (8002a78 <MX_UART4_Init+0x90>)
 8002a66:	f010 f8ed 	bl	8012c44 <HAL_UARTEx_DisableFifoMode>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <MX_UART4_Init+0x8c>
		Error_Handler();
 8002a70:	f000 fa16 	bl	8002ea0 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8002a74:	bf00      	nop
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	24001564 	.word	0x24001564
 8002a7c:	40004c00 	.word	0x40004c00

08002a80 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8002a84:	4b22      	ldr	r3, [pc, #136]	; (8002b10 <MX_USART6_UART_Init+0x90>)
 8002a86:	4a23      	ldr	r2, [pc, #140]	; (8002b14 <MX_USART6_UART_Init+0x94>)
 8002a88:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 8002a8a:	4b21      	ldr	r3, [pc, #132]	; (8002b10 <MX_USART6_UART_Init+0x90>)
 8002a8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a90:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002a92:	4b1f      	ldr	r3, [pc, #124]	; (8002b10 <MX_USART6_UART_Init+0x90>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8002a98:	4b1d      	ldr	r3, [pc, #116]	; (8002b10 <MX_USART6_UART_Init+0x90>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8002a9e:	4b1c      	ldr	r3, [pc, #112]	; (8002b10 <MX_USART6_UART_Init+0x90>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8002aa4:	4b1a      	ldr	r3, [pc, #104]	; (8002b10 <MX_USART6_UART_Init+0x90>)
 8002aa6:	220c      	movs	r2, #12
 8002aa8:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aaa:	4b19      	ldr	r3, [pc, #100]	; (8002b10 <MX_USART6_UART_Init+0x90>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ab0:	4b17      	ldr	r3, [pc, #92]	; (8002b10 <MX_USART6_UART_Init+0x90>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	61da      	str	r2, [r3, #28]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ab6:	4b16      	ldr	r3, [pc, #88]	; (8002b10 <MX_USART6_UART_Init+0x90>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	621a      	str	r2, [r3, #32]
	huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002abc:	4b14      	ldr	r3, [pc, #80]	; (8002b10 <MX_USART6_UART_Init+0x90>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	625a      	str	r2, [r3, #36]	; 0x24
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ac2:	4b13      	ldr	r3, [pc, #76]	; (8002b10 <MX_USART6_UART_Init+0x90>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8002ac8:	4811      	ldr	r0, [pc, #68]	; (8002b10 <MX_USART6_UART_Init+0x90>)
 8002aca:	f00e ffe5 	bl	8011a98 <HAL_UART_Init>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <MX_USART6_UART_Init+0x58>
		Error_Handler();
 8002ad4:	f000 f9e4 	bl	8002ea0 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8)
 8002ad8:	2100      	movs	r1, #0
 8002ada:	480d      	ldr	r0, [pc, #52]	; (8002b10 <MX_USART6_UART_Init+0x90>)
 8002adc:	f010 f8eb 	bl	8012cb6 <HAL_UARTEx_SetTxFifoThreshold>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <MX_USART6_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8002ae6:	f000 f9db 	bl	8002ea0 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8)
 8002aea:	2100      	movs	r1, #0
 8002aec:	4808      	ldr	r0, [pc, #32]	; (8002b10 <MX_USART6_UART_Init+0x90>)
 8002aee:	f010 f920 	bl	8012d32 <HAL_UARTEx_SetRxFifoThreshold>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <MX_USART6_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8002af8:	f000 f9d2 	bl	8002ea0 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK) {
 8002afc:	4804      	ldr	r0, [pc, #16]	; (8002b10 <MX_USART6_UART_Init+0x90>)
 8002afe:	f010 f8a1 	bl	8012c44 <HAL_UARTEx_DisableFifoMode>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <MX_USART6_UART_Init+0x8c>
		Error_Handler();
 8002b08:	f000 f9ca 	bl	8002ea0 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8002b0c:	bf00      	nop
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	240015f8 	.word	0x240015f8
 8002b14:	40011400 	.word	0x40011400

08002b18 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002b1e:	4b2d      	ldr	r3, [pc, #180]	; (8002bd4 <MX_DMA_Init+0xbc>)
 8002b20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002b24:	4a2b      	ldr	r2, [pc, #172]	; (8002bd4 <MX_DMA_Init+0xbc>)
 8002b26:	f043 0301 	orr.w	r3, r3, #1
 8002b2a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002b2e:	4b29      	ldr	r3, [pc, #164]	; (8002bd4 <MX_DMA_Init+0xbc>)
 8002b30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	607b      	str	r3, [r7, #4]
 8002b3a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8002b3c:	4b25      	ldr	r3, [pc, #148]	; (8002bd4 <MX_DMA_Init+0xbc>)
 8002b3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002b42:	4a24      	ldr	r2, [pc, #144]	; (8002bd4 <MX_DMA_Init+0xbc>)
 8002b44:	f043 0302 	orr.w	r3, r3, #2
 8002b48:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002b4c:	4b21      	ldr	r3, [pc, #132]	; (8002bd4 <MX_DMA_Init+0xbc>)
 8002b4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	603b      	str	r3, [r7, #0]
 8002b58:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	200b      	movs	r0, #11
 8002b60:	f003 fbb5 	bl	80062ce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002b64:	200b      	movs	r0, #11
 8002b66:	f003 fbcc 	bl	8006302 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	200c      	movs	r0, #12
 8002b70:	f003 fbad 	bl	80062ce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002b74:	200c      	movs	r0, #12
 8002b76:	f003 fbc4 	bl	8006302 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	200d      	movs	r0, #13
 8002b80:	f003 fba5 	bl	80062ce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002b84:	200d      	movs	r0, #13
 8002b86:	f003 fbbc 	bl	8006302 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	200e      	movs	r0, #14
 8002b90:	f003 fb9d 	bl	80062ce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002b94:	200e      	movs	r0, #14
 8002b96:	f003 fbb4 	bl	8006302 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	200f      	movs	r0, #15
 8002ba0:	f003 fb95 	bl	80062ce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002ba4:	200f      	movs	r0, #15
 8002ba6:	f003 fbac 	bl	8006302 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002baa:	2200      	movs	r2, #0
 8002bac:	2100      	movs	r1, #0
 8002bae:	2010      	movs	r0, #16
 8002bb0:	f003 fb8d 	bl	80062ce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002bb4:	2010      	movs	r0, #16
 8002bb6:	f003 fba4 	bl	8006302 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002bba:	2200      	movs	r2, #0
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	2046      	movs	r0, #70	; 0x46
 8002bc0:	f003 fb85 	bl	80062ce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002bc4:	2046      	movs	r0, #70	; 0x46
 8002bc6:	f003 fb9c 	bl	8006302 <HAL_NVIC_EnableIRQ>

}
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	58024400 	.word	0x58024400

08002bd8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b08c      	sub	sp, #48	; 0x30
 8002bdc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002bde:	f107 031c 	add.w	r3, r7, #28
 8002be2:	2200      	movs	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	605a      	str	r2, [r3, #4]
 8002be8:	609a      	str	r2, [r3, #8]
 8002bea:	60da      	str	r2, [r3, #12]
 8002bec:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002bee:	4ba4      	ldr	r3, [pc, #656]	; (8002e80 <MX_GPIO_Init+0x2a8>)
 8002bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bf4:	4aa2      	ldr	r2, [pc, #648]	; (8002e80 <MX_GPIO_Init+0x2a8>)
 8002bf6:	f043 0310 	orr.w	r3, r3, #16
 8002bfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bfe:	4ba0      	ldr	r3, [pc, #640]	; (8002e80 <MX_GPIO_Init+0x2a8>)
 8002c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c04:	f003 0310 	and.w	r3, r3, #16
 8002c08:	61bb      	str	r3, [r7, #24]
 8002c0a:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8002c0c:	4b9c      	ldr	r3, [pc, #624]	; (8002e80 <MX_GPIO_Init+0x2a8>)
 8002c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c12:	4a9b      	ldr	r2, [pc, #620]	; (8002e80 <MX_GPIO_Init+0x2a8>)
 8002c14:	f043 0320 	orr.w	r3, r3, #32
 8002c18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c1c:	4b98      	ldr	r3, [pc, #608]	; (8002e80 <MX_GPIO_Init+0x2a8>)
 8002c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c22:	f003 0320 	and.w	r3, r3, #32
 8002c26:	617b      	str	r3, [r7, #20]
 8002c28:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002c2a:	4b95      	ldr	r3, [pc, #596]	; (8002e80 <MX_GPIO_Init+0x2a8>)
 8002c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c30:	4a93      	ldr	r2, [pc, #588]	; (8002e80 <MX_GPIO_Init+0x2a8>)
 8002c32:	f043 0304 	orr.w	r3, r3, #4
 8002c36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c3a:	4b91      	ldr	r3, [pc, #580]	; (8002e80 <MX_GPIO_Init+0x2a8>)
 8002c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	613b      	str	r3, [r7, #16]
 8002c46:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002c48:	4b8d      	ldr	r3, [pc, #564]	; (8002e80 <MX_GPIO_Init+0x2a8>)
 8002c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c4e:	4a8c      	ldr	r2, [pc, #560]	; (8002e80 <MX_GPIO_Init+0x2a8>)
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c58:	4b89      	ldr	r3, [pc, #548]	; (8002e80 <MX_GPIO_Init+0x2a8>)
 8002c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002c66:	4b86      	ldr	r3, [pc, #536]	; (8002e80 <MX_GPIO_Init+0x2a8>)
 8002c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c6c:	4a84      	ldr	r2, [pc, #528]	; (8002e80 <MX_GPIO_Init+0x2a8>)
 8002c6e:	f043 0302 	orr.w	r3, r3, #2
 8002c72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c76:	4b82      	ldr	r3, [pc, #520]	; (8002e80 <MX_GPIO_Init+0x2a8>)
 8002c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	60bb      	str	r3, [r7, #8]
 8002c82:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8002c84:	4b7e      	ldr	r3, [pc, #504]	; (8002e80 <MX_GPIO_Init+0x2a8>)
 8002c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c8a:	4a7d      	ldr	r2, [pc, #500]	; (8002e80 <MX_GPIO_Init+0x2a8>)
 8002c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c94:	4b7a      	ldr	r3, [pc, #488]	; (8002e80 <MX_GPIO_Init+0x2a8>)
 8002c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9e:	607b      	str	r3, [r7, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002ca2:	4b77      	ldr	r3, [pc, #476]	; (8002e80 <MX_GPIO_Init+0x2a8>)
 8002ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ca8:	4a75      	ldr	r2, [pc, #468]	; (8002e80 <MX_GPIO_Init+0x2a8>)
 8002caa:	f043 0308 	orr.w	r3, r3, #8
 8002cae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cb2:	4b73      	ldr	r3, [pc, #460]	; (8002e80 <MX_GPIO_Init+0x2a8>)
 8002cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cb8:	f003 0308 	and.w	r3, r3, #8
 8002cbc:	603b      	str	r3, [r7, #0]
 8002cbe:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2 | PYRO6_Pin | PYRO7_Pin | PYRO8_Pin,
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f241 5104 	movw	r1, #5380	; 0x1504
 8002cc6:	486f      	ldr	r0, [pc, #444]	; (8002e84 <MX_GPIO_Init+0x2ac>)
 8002cc8:	f006 f92e 	bl	8008f28 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, ARM1_Pin | GPIO_PIN_15, GPIO_PIN_RESET);
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f248 0102 	movw	r1, #32770	; 0x8002
 8002cd2:	486d      	ldr	r0, [pc, #436]	; (8002e88 <MX_GPIO_Init+0x2b0>)
 8002cd4:	f006 f928 	bl	8008f28 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2130      	movs	r1, #48	; 0x30
 8002cdc:	486b      	ldr	r0, [pc, #428]	; (8002e8c <MX_GPIO_Init+0x2b4>)
 8002cde:	f006 f923 	bl	8008f28 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, GPIO_PIN_RESET);
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	2102      	movs	r1, #2
 8002ce6:	486a      	ldr	r0, [pc, #424]	; (8002e90 <MX_GPIO_Init+0x2b8>)
 8002ce8:	f006 f91e 	bl	8008f28 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, PYRO2_Pin | PYRO3_Pin | PYRO4_Pin, GPIO_PIN_RESET);
 8002cec:	2200      	movs	r2, #0
 8002cee:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8002cf2:	4868      	ldr	r0, [pc, #416]	; (8002e94 <MX_GPIO_Init+0x2bc>)
 8002cf4:	f006 f918 	bl	8008f28 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, PYRO5_Pin | GPIO_PIN_2 | GPIO_PIN_3,
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	210e      	movs	r1, #14
 8002cfc:	4866      	ldr	r0, [pc, #408]	; (8002e98 <MX_GPIO_Init+0x2c0>)
 8002cfe:	f006 f913 	bl	8008f28 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_0,
 8002d02:	2200      	movs	r2, #0
 8002d04:	f240 3101 	movw	r1, #769	; 0x301
 8002d08:	4864      	ldr	r0, [pc, #400]	; (8002e9c <MX_GPIO_Init+0x2c4>)
 8002d0a:	f006 f90d 	bl	8008f28 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | PYRO6_Pin | PYRO7_Pin | PYRO8_Pin;
 8002d0e:	f241 5304 	movw	r3, #5380	; 0x1504
 8002d12:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d14:	2301      	movs	r3, #1
 8002d16:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d20:	f107 031c 	add.w	r3, r7, #28
 8002d24:	4619      	mov	r1, r3
 8002d26:	4857      	ldr	r0, [pc, #348]	; (8002e84 <MX_GPIO_Init+0x2ac>)
 8002d28:	f005 ff3e 	bl	8008ba8 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARM1_Pin PA15 */
	GPIO_InitStruct.Pin = ARM1_Pin | GPIO_PIN_15;
 8002d2c:	f248 0302 	movw	r3, #32770	; 0x8002
 8002d30:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d32:	2301      	movs	r3, #1
 8002d34:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d36:	2300      	movs	r3, #0
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d3e:	f107 031c 	add.w	r3, r7, #28
 8002d42:	4619      	mov	r1, r3
 8002d44:	4850      	ldr	r0, [pc, #320]	; (8002e88 <MX_GPIO_Init+0x2b0>)
 8002d46:	f005 ff2f 	bl	8008ba8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC4 PC5 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 8002d4a:	2330      	movs	r3, #48	; 0x30
 8002d4c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d52:	2300      	movs	r3, #0
 8002d54:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d56:	2300      	movs	r3, #0
 8002d58:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d5a:	f107 031c 	add.w	r3, r7, #28
 8002d5e:	4619      	mov	r1, r3
 8002d60:	484a      	ldr	r0, [pc, #296]	; (8002e8c <MX_GPIO_Init+0x2b4>)
 8002d62:	f005 ff21 	bl	8008ba8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PYRO1_Pin */
	GPIO_InitStruct.Pin = PYRO1_Pin;
 8002d66:	2302      	movs	r3, #2
 8002d68:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d72:	2300      	movs	r3, #0
 8002d74:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(PYRO1_GPIO_Port, &GPIO_InitStruct);
 8002d76:	f107 031c 	add.w	r3, r7, #28
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4844      	ldr	r0, [pc, #272]	; (8002e90 <MX_GPIO_Init+0x2b8>)
 8002d7e:	f005 ff13 	bl	8008ba8 <HAL_GPIO_Init>

	/*Configure GPIO pin : CONT1_Pin */
	GPIO_InitStruct.Pin = CONT1_Pin;
 8002d82:	2304      	movs	r3, #4
 8002d84:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d86:	2300      	movs	r3, #0
 8002d88:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 8002d8e:	f107 031c 	add.w	r3, r7, #28
 8002d92:	4619      	mov	r1, r3
 8002d94:	483e      	ldr	r0, [pc, #248]	; (8002e90 <MX_GPIO_Init+0x2b8>)
 8002d96:	f005 ff07 	bl	8008ba8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
	GPIO_InitStruct.Pin = PYRO2_Pin | PYRO3_Pin | PYRO4_Pin;
 8002d9a:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8002d9e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002da0:	2301      	movs	r3, #1
 8002da2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da4:	2300      	movs	r3, #0
 8002da6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da8:	2300      	movs	r3, #0
 8002daa:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002dac:	f107 031c 	add.w	r3, r7, #28
 8002db0:	4619      	mov	r1, r3
 8002db2:	4838      	ldr	r0, [pc, #224]	; (8002e94 <MX_GPIO_Init+0x2bc>)
 8002db4:	f005 fef8 	bl	8008ba8 <HAL_GPIO_Init>

	/*Configure GPIO pins : CONT2_Pin CONT3_Pin */
	GPIO_InitStruct.Pin = CONT2_Pin | CONT3_Pin;
 8002db8:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002dbc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002dc6:	f107 031c 	add.w	r3, r7, #28
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4831      	ldr	r0, [pc, #196]	; (8002e94 <MX_GPIO_Init+0x2bc>)
 8002dce:	f005 feeb 	bl	8008ba8 <HAL_GPIO_Init>

	/*Configure GPIO pin : CONT4_Pin */
	GPIO_InitStruct.Pin = CONT4_Pin;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 8002dde:	f107 031c 	add.w	r3, r7, #28
 8002de2:	4619      	mov	r1, r3
 8002de4:	482c      	ldr	r0, [pc, #176]	; (8002e98 <MX_GPIO_Init+0x2c0>)
 8002de6:	f005 fedf 	bl	8008ba8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
	GPIO_InitStruct.Pin = PYRO5_Pin | GPIO_PIN_2 | GPIO_PIN_3;
 8002dea:	230e      	movs	r3, #14
 8002dec:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dee:	2301      	movs	r3, #1
 8002df0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df6:	2300      	movs	r3, #0
 8002df8:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002dfa:	f107 031c 	add.w	r3, r7, #28
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4825      	ldr	r0, [pc, #148]	; (8002e98 <MX_GPIO_Init+0x2c0>)
 8002e02:	f005 fed1 	bl	8008ba8 <HAL_GPIO_Init>

	/*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
	GPIO_InitStruct.Pin = CONT5_Pin | CONT6_Pin | CONT7_Pin | CONT8_Pin;
 8002e06:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 8002e0a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e10:	2301      	movs	r3, #1
 8002e12:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e14:	f107 031c 	add.w	r3, r7, #28
 8002e18:	4619      	mov	r1, r3
 8002e1a:	481a      	ldr	r0, [pc, #104]	; (8002e84 <MX_GPIO_Init+0x2ac>)
 8002e1c:	f005 fec4 	bl	8008ba8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD8 PD9 PD0 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_0;
 8002e20:	f240 3301 	movw	r3, #769	; 0x301
 8002e24:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e26:	2301      	movs	r3, #1
 8002e28:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e32:	f107 031c 	add.w	r3, r7, #28
 8002e36:	4619      	mov	r1, r3
 8002e38:	4818      	ldr	r0, [pc, #96]	; (8002e9c <MX_GPIO_Init+0x2c4>)
 8002e3a:	f005 feb5 	bl	8008ba8 <HAL_GPIO_Init>

	/*Configure GPIO pin : Servo_ARM_CHECK_Pin */
	GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 8002e3e:	2310      	movs	r3, #16
 8002e40:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e42:	2300      	movs	r3, #0
 8002e44:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002e4a:	f107 031c 	add.w	r3, r7, #28
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4811      	ldr	r0, [pc, #68]	; (8002e98 <MX_GPIO_Init+0x2c0>)
 8002e52:	f005 fea9 	bl	8008ba8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002e56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e5a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e60:	2300      	movs	r3, #0
 8002e62:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e64:	2300      	movs	r3, #0
 8002e66:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e6c:	f107 031c 	add.w	r3, r7, #28
 8002e70:	4619      	mov	r1, r3
 8002e72:	4805      	ldr	r0, [pc, #20]	; (8002e88 <MX_GPIO_Init+0x2b0>)
 8002e74:	f005 fe98 	bl	8008ba8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002e78:	bf00      	nop
 8002e7a:	3730      	adds	r7, #48	; 0x30
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	58024400 	.word	0x58024400
 8002e84:	58021000 	.word	0x58021000
 8002e88:	58020000 	.word	0x58020000
 8002e8c:	58020800 	.word	0x58020800
 8002e90:	58020400 	.word	0x58020400
 8002e94:	58021400 	.word	0x58021400
 8002e98:	58021800 	.word	0x58021800
 8002e9c:	58020c00 	.word	0x58020c00

08002ea0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ea4:	b672      	cpsid	i
}
 8002ea6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002ea8:	e7fe      	b.n	8002ea8 <Error_Handler+0x8>
	...

08002eac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eb2:	4b0a      	ldr	r3, [pc, #40]	; (8002edc <HAL_MspInit+0x30>)
 8002eb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002eb8:	4a08      	ldr	r2, [pc, #32]	; (8002edc <HAL_MspInit+0x30>)
 8002eba:	f043 0302 	orr.w	r3, r3, #2
 8002ebe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002ec2:	4b06      	ldr	r3, [pc, #24]	; (8002edc <HAL_MspInit+0x30>)
 8002ec4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	607b      	str	r3, [r7, #4]
 8002ece:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	58024400 	.word	0x58024400

08002ee0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b08c      	sub	sp, #48	; 0x30
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee8:	f107 031c 	add.w	r3, r7, #28
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	605a      	str	r2, [r3, #4]
 8002ef2:	609a      	str	r2, [r3, #8]
 8002ef4:	60da      	str	r2, [r3, #12]
 8002ef6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a5d      	ldr	r2, [pc, #372]	; (8003074 <HAL_ADC_MspInit+0x194>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d159      	bne.n	8002fb6 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002f02:	4b5d      	ldr	r3, [pc, #372]	; (8003078 <HAL_ADC_MspInit+0x198>)
 8002f04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002f08:	4a5b      	ldr	r2, [pc, #364]	; (8003078 <HAL_ADC_MspInit+0x198>)
 8002f0a:	f043 0320 	orr.w	r3, r3, #32
 8002f0e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002f12:	4b59      	ldr	r3, [pc, #356]	; (8003078 <HAL_ADC_MspInit+0x198>)
 8002f14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002f18:	f003 0320 	and.w	r3, r3, #32
 8002f1c:	61bb      	str	r3, [r7, #24]
 8002f1e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f20:	4b55      	ldr	r3, [pc, #340]	; (8003078 <HAL_ADC_MspInit+0x198>)
 8002f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f26:	4a54      	ldr	r2, [pc, #336]	; (8003078 <HAL_ADC_MspInit+0x198>)
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f30:	4b51      	ldr	r3, [pc, #324]	; (8003078 <HAL_ADC_MspInit+0x198>)
 8002f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	617b      	str	r3, [r7, #20]
 8002f3c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_INP14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f3e:	2304      	movs	r3, #4
 8002f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f42:	2303      	movs	r3, #3
 8002f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f46:	2300      	movs	r3, #0
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f4a:	f107 031c 	add.w	r3, r7, #28
 8002f4e:	4619      	mov	r1, r3
 8002f50:	484a      	ldr	r0, [pc, #296]	; (800307c <HAL_ADC_MspInit+0x19c>)
 8002f52:	f005 fe29 	bl	8008ba8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 8002f56:	4b4a      	ldr	r3, [pc, #296]	; (8003080 <HAL_ADC_MspInit+0x1a0>)
 8002f58:	4a4a      	ldr	r2, [pc, #296]	; (8003084 <HAL_ADC_MspInit+0x1a4>)
 8002f5a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002f5c:	4b48      	ldr	r3, [pc, #288]	; (8003080 <HAL_ADC_MspInit+0x1a0>)
 8002f5e:	2209      	movs	r2, #9
 8002f60:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f62:	4b47      	ldr	r3, [pc, #284]	; (8003080 <HAL_ADC_MspInit+0x1a0>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f68:	4b45      	ldr	r3, [pc, #276]	; (8003080 <HAL_ADC_MspInit+0x1a0>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002f6e:	4b44      	ldr	r3, [pc, #272]	; (8003080 <HAL_ADC_MspInit+0x1a0>)
 8002f70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f74:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f76:	4b42      	ldr	r3, [pc, #264]	; (8003080 <HAL_ADC_MspInit+0x1a0>)
 8002f78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f7c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f7e:	4b40      	ldr	r3, [pc, #256]	; (8003080 <HAL_ADC_MspInit+0x1a0>)
 8002f80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f84:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002f86:	4b3e      	ldr	r3, [pc, #248]	; (8003080 <HAL_ADC_MspInit+0x1a0>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002f8c:	4b3c      	ldr	r3, [pc, #240]	; (8003080 <HAL_ADC_MspInit+0x1a0>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f92:	4b3b      	ldr	r3, [pc, #236]	; (8003080 <HAL_ADC_MspInit+0x1a0>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002f98:	4839      	ldr	r0, [pc, #228]	; (8003080 <HAL_ADC_MspInit+0x1a0>)
 8002f9a:	f003 f9cd 	bl	8006338 <HAL_DMA_Init>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002fa4:	f7ff ff7c 	bl	8002ea0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a35      	ldr	r2, [pc, #212]	; (8003080 <HAL_ADC_MspInit+0x1a0>)
 8002fac:	659a      	str	r2, [r3, #88]	; 0x58
 8002fae:	4a34      	ldr	r2, [pc, #208]	; (8003080 <HAL_ADC_MspInit+0x1a0>)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002fb4:	e059      	b.n	800306a <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a33      	ldr	r2, [pc, #204]	; (8003088 <HAL_ADC_MspInit+0x1a8>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d154      	bne.n	800306a <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002fc0:	4b2d      	ldr	r3, [pc, #180]	; (8003078 <HAL_ADC_MspInit+0x198>)
 8002fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fc6:	4a2c      	ldr	r2, [pc, #176]	; (8003078 <HAL_ADC_MspInit+0x198>)
 8002fc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fd0:	4b29      	ldr	r3, [pc, #164]	; (8003078 <HAL_ADC_MspInit+0x198>)
 8002fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fda:	613b      	str	r3, [r7, #16]
 8002fdc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fde:	4b26      	ldr	r3, [pc, #152]	; (8003078 <HAL_ADC_MspInit+0x198>)
 8002fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fe4:	4a24      	ldr	r2, [pc, #144]	; (8003078 <HAL_ADC_MspInit+0x198>)
 8002fe6:	f043 0304 	orr.w	r3, r3, #4
 8002fea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fee:	4b22      	ldr	r3, [pc, #136]	; (8003078 <HAL_ADC_MspInit+0x198>)
 8002ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002ffc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8003000:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8003004:	f001 f8b6 	bl	8004174 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8003008:	4b20      	ldr	r3, [pc, #128]	; (800308c <HAL_ADC_MspInit+0x1ac>)
 800300a:	4a21      	ldr	r2, [pc, #132]	; (8003090 <HAL_ADC_MspInit+0x1b0>)
 800300c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800300e:	4b1f      	ldr	r3, [pc, #124]	; (800308c <HAL_ADC_MspInit+0x1ac>)
 8003010:	2273      	movs	r2, #115	; 0x73
 8003012:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003014:	4b1d      	ldr	r3, [pc, #116]	; (800308c <HAL_ADC_MspInit+0x1ac>)
 8003016:	2200      	movs	r2, #0
 8003018:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800301a:	4b1c      	ldr	r3, [pc, #112]	; (800308c <HAL_ADC_MspInit+0x1ac>)
 800301c:	2200      	movs	r2, #0
 800301e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003020:	4b1a      	ldr	r3, [pc, #104]	; (800308c <HAL_ADC_MspInit+0x1ac>)
 8003022:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003026:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003028:	4b18      	ldr	r3, [pc, #96]	; (800308c <HAL_ADC_MspInit+0x1ac>)
 800302a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800302e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003030:	4b16      	ldr	r3, [pc, #88]	; (800308c <HAL_ADC_MspInit+0x1ac>)
 8003032:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003036:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8003038:	4b14      	ldr	r3, [pc, #80]	; (800308c <HAL_ADC_MspInit+0x1ac>)
 800303a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800303e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003040:	4b12      	ldr	r3, [pc, #72]	; (800308c <HAL_ADC_MspInit+0x1ac>)
 8003042:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003046:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003048:	4b10      	ldr	r3, [pc, #64]	; (800308c <HAL_ADC_MspInit+0x1ac>)
 800304a:	2200      	movs	r2, #0
 800304c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800304e:	480f      	ldr	r0, [pc, #60]	; (800308c <HAL_ADC_MspInit+0x1ac>)
 8003050:	f003 f972 	bl	8006338 <HAL_DMA_Init>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 800305a:	f7ff ff21 	bl	8002ea0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a0a      	ldr	r2, [pc, #40]	; (800308c <HAL_ADC_MspInit+0x1ac>)
 8003062:	659a      	str	r2, [r3, #88]	; 0x58
 8003064:	4a09      	ldr	r2, [pc, #36]	; (800308c <HAL_ADC_MspInit+0x1ac>)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6393      	str	r3, [r2, #56]	; 0x38
}
 800306a:	bf00      	nop
 800306c:	3730      	adds	r7, #48	; 0x30
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40022000 	.word	0x40022000
 8003078:	58024400 	.word	0x58024400
 800307c:	58020000 	.word	0x58020000
 8003080:	24000d4c 	.word	0x24000d4c
 8003084:	40020088 	.word	0x40020088
 8003088:	58026000 	.word	0x58026000
 800308c:	24000dc4 	.word	0x24000dc4
 8003090:	400204b8 	.word	0x400204b8

08003094 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b0b8      	sub	sp, #224	; 0xe0
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800309c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	605a      	str	r2, [r3, #4]
 80030a6:	609a      	str	r2, [r3, #8]
 80030a8:	60da      	str	r2, [r3, #12]
 80030aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030ac:	f107 0310 	add.w	r3, r7, #16
 80030b0:	22b8      	movs	r2, #184	; 0xb8
 80030b2:	2100      	movs	r1, #0
 80030b4:	4618      	mov	r0, r3
 80030b6:	f018 fe70 	bl	801bd9a <memset>
  if(hfdcan->Instance==FDCAN3)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a26      	ldr	r2, [pc, #152]	; (8003158 <HAL_FDCAN_MspInit+0xc4>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d145      	bne.n	8003150 <HAL_FDCAN_MspInit+0xbc>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80030c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80030c8:	f04f 0300 	mov.w	r3, #0
 80030cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80030d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80030d4:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030d6:	f107 0310 	add.w	r3, r7, #16
 80030da:	4618      	mov	r0, r3
 80030dc:	f008 fb52 	bl	800b784 <HAL_RCCEx_PeriphCLKConfig>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 80030e6:	f7ff fedb 	bl	8002ea0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80030ea:	4b1c      	ldr	r3, [pc, #112]	; (800315c <HAL_FDCAN_MspInit+0xc8>)
 80030ec:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80030f0:	4a1a      	ldr	r2, [pc, #104]	; (800315c <HAL_FDCAN_MspInit+0xc8>)
 80030f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80030fa:	4b18      	ldr	r3, [pc, #96]	; (800315c <HAL_FDCAN_MspInit+0xc8>)
 80030fc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003108:	4b14      	ldr	r3, [pc, #80]	; (800315c <HAL_FDCAN_MspInit+0xc8>)
 800310a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800310e:	4a13      	ldr	r2, [pc, #76]	; (800315c <HAL_FDCAN_MspInit+0xc8>)
 8003110:	f043 0320 	orr.w	r3, r3, #32
 8003114:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003118:	4b10      	ldr	r3, [pc, #64]	; (800315c <HAL_FDCAN_MspInit+0xc8>)
 800311a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800311e:	f003 0320 	and.w	r3, r3, #32
 8003122:	60bb      	str	r3, [r7, #8]
 8003124:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003126:	23c0      	movs	r3, #192	; 0xc0
 8003128:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312c:	2302      	movs	r3, #2
 800312e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003132:	2300      	movs	r3, #0
 8003134:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003138:	2300      	movs	r3, #0
 800313a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 800313e:	2302      	movs	r3, #2
 8003140:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003144:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003148:	4619      	mov	r1, r3
 800314a:	4805      	ldr	r0, [pc, #20]	; (8003160 <HAL_FDCAN_MspInit+0xcc>)
 800314c:	f005 fd2c 	bl	8008ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8003150:	bf00      	nop
 8003152:	37e0      	adds	r7, #224	; 0xe0
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	4000d400 	.word	0x4000d400
 800315c:	58024400 	.word	0x58024400
 8003160:	58021400 	.word	0x58021400

08003164 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b0b8      	sub	sp, #224	; 0xe0
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800316c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	605a      	str	r2, [r3, #4]
 8003176:	609a      	str	r2, [r3, #8]
 8003178:	60da      	str	r2, [r3, #12]
 800317a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800317c:	f107 0310 	add.w	r3, r7, #16
 8003180:	22b8      	movs	r2, #184	; 0xb8
 8003182:	2100      	movs	r1, #0
 8003184:	4618      	mov	r0, r3
 8003186:	f018 fe08 	bl	801bd9a <memset>
  if(hi2c->Instance==I2C2)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a2a      	ldr	r2, [pc, #168]	; (8003238 <HAL_I2C_MspInit+0xd4>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d14d      	bne.n	8003230 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003194:	f04f 0208 	mov.w	r2, #8
 8003198:	f04f 0300 	mov.w	r3, #0
 800319c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80031a0:	2300      	movs	r3, #0
 80031a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031a6:	f107 0310 	add.w	r3, r7, #16
 80031aa:	4618      	mov	r0, r3
 80031ac:	f008 faea 	bl	800b784 <HAL_RCCEx_PeriphCLKConfig>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80031b6:	f7ff fe73 	bl	8002ea0 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80031ba:	4b20      	ldr	r3, [pc, #128]	; (800323c <HAL_I2C_MspInit+0xd8>)
 80031bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031c0:	4a1e      	ldr	r2, [pc, #120]	; (800323c <HAL_I2C_MspInit+0xd8>)
 80031c2:	f043 0320 	orr.w	r3, r3, #32
 80031c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031ca:	4b1c      	ldr	r3, [pc, #112]	; (800323c <HAL_I2C_MspInit+0xd8>)
 80031cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031d0:	f003 0320 	and.w	r3, r3, #32
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80031d8:	2303      	movs	r3, #3
 80031da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031de:	2312      	movs	r3, #18
 80031e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e4:	2300      	movs	r3, #0
 80031e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ea:	2300      	movs	r3, #0
 80031ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80031f0:	2304      	movs	r3, #4
 80031f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80031f6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80031fa:	4619      	mov	r1, r3
 80031fc:	4810      	ldr	r0, [pc, #64]	; (8003240 <HAL_I2C_MspInit+0xdc>)
 80031fe:	f005 fcd3 	bl	8008ba8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003202:	4b0e      	ldr	r3, [pc, #56]	; (800323c <HAL_I2C_MspInit+0xd8>)
 8003204:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003208:	4a0c      	ldr	r2, [pc, #48]	; (800323c <HAL_I2C_MspInit+0xd8>)
 800320a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800320e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003212:	4b0a      	ldr	r3, [pc, #40]	; (800323c <HAL_I2C_MspInit+0xd8>)
 8003214:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003218:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800321c:	60bb      	str	r3, [r7, #8]
 800321e:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8003220:	2200      	movs	r2, #0
 8003222:	2101      	movs	r1, #1
 8003224:	2021      	movs	r0, #33	; 0x21
 8003226:	f003 f852 	bl	80062ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800322a:	2021      	movs	r0, #33	; 0x21
 800322c:	f003 f869 	bl	8006302 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003230:	bf00      	nop
 8003232:	37e0      	adds	r7, #224	; 0xe0
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40005800 	.word	0x40005800
 800323c:	58024400 	.word	0x58024400
 8003240:	58021400 	.word	0x58021400

08003244 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b0ba      	sub	sp, #232	; 0xe8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800324c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	605a      	str	r2, [r3, #4]
 8003256:	609a      	str	r2, [r3, #8]
 8003258:	60da      	str	r2, [r3, #12]
 800325a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800325c:	f107 0318 	add.w	r3, r7, #24
 8003260:	22b8      	movs	r2, #184	; 0xb8
 8003262:	2100      	movs	r1, #0
 8003264:	4618      	mov	r0, r3
 8003266:	f018 fd98 	bl	801bd9a <memset>
  if(hsd->Instance==SDMMC2)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a5d      	ldr	r2, [pc, #372]	; (80033e4 <HAL_SD_MspInit+0x1a0>)
 8003270:	4293      	cmp	r3, r2
 8003272:	f040 80b3 	bne.w	80033dc <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8003276:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800327a:	f04f 0300 	mov.w	r3, #0
 800327e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8003282:	2300      	movs	r3, #0
 8003284:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003286:	f107 0318 	add.w	r3, r7, #24
 800328a:	4618      	mov	r0, r3
 800328c:	f008 fa7a 	bl	800b784 <HAL_RCCEx_PeriphCLKConfig>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8003296:	f7ff fe03 	bl	8002ea0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 800329a:	4b53      	ldr	r3, [pc, #332]	; (80033e8 <HAL_SD_MspInit+0x1a4>)
 800329c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80032a0:	4a51      	ldr	r2, [pc, #324]	; (80033e8 <HAL_SD_MspInit+0x1a4>)
 80032a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032a6:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80032aa:	4b4f      	ldr	r3, [pc, #316]	; (80033e8 <HAL_SD_MspInit+0x1a4>)
 80032ac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80032b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032b4:	617b      	str	r3, [r7, #20]
 80032b6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032b8:	4b4b      	ldr	r3, [pc, #300]	; (80033e8 <HAL_SD_MspInit+0x1a4>)
 80032ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032be:	4a4a      	ldr	r2, [pc, #296]	; (80033e8 <HAL_SD_MspInit+0x1a4>)
 80032c0:	f043 0308 	orr.w	r3, r3, #8
 80032c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032c8:	4b47      	ldr	r3, [pc, #284]	; (80033e8 <HAL_SD_MspInit+0x1a4>)
 80032ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032ce:	f003 0308 	and.w	r3, r3, #8
 80032d2:	613b      	str	r3, [r7, #16]
 80032d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80032d6:	4b44      	ldr	r3, [pc, #272]	; (80033e8 <HAL_SD_MspInit+0x1a4>)
 80032d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032dc:	4a42      	ldr	r2, [pc, #264]	; (80033e8 <HAL_SD_MspInit+0x1a4>)
 80032de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032e6:	4b40      	ldr	r3, [pc, #256]	; (80033e8 <HAL_SD_MspInit+0x1a4>)
 80032e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80032f4:	2340      	movs	r3, #64	; 0x40
 80032f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fa:	2302      	movs	r3, #2
 80032fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003300:	2300      	movs	r3, #0
 8003302:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003306:	2303      	movs	r3, #3
 8003308:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800330c:	230b      	movs	r3, #11
 800330e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003312:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003316:	4619      	mov	r1, r3
 8003318:	4834      	ldr	r0, [pc, #208]	; (80033ec <HAL_SD_MspInit+0x1a8>)
 800331a:	f005 fc45 	bl	8008ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800331e:	2380      	movs	r3, #128	; 0x80
 8003320:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003324:	2302      	movs	r3, #2
 8003326:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800332a:	2301      	movs	r3, #1
 800332c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003330:	2303      	movs	r3, #3
 8003332:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003336:	230b      	movs	r3, #11
 8003338:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800333c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003340:	4619      	mov	r1, r3
 8003342:	482a      	ldr	r0, [pc, #168]	; (80033ec <HAL_SD_MspInit+0x1a8>)
 8003344:	f005 fc30 	bl	8008ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003348:	f44f 7300 	mov.w	r3, #512	; 0x200
 800334c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003350:	2302      	movs	r3, #2
 8003352:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003356:	2301      	movs	r3, #1
 8003358:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800335c:	2303      	movs	r3, #3
 800335e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003362:	230b      	movs	r3, #11
 8003364:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003368:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800336c:	4619      	mov	r1, r3
 800336e:	4820      	ldr	r0, [pc, #128]	; (80033f0 <HAL_SD_MspInit+0x1ac>)
 8003370:	f005 fc1a 	bl	8008ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003374:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003378:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337c:	2302      	movs	r3, #2
 800337e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003382:	2300      	movs	r3, #0
 8003384:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003388:	2303      	movs	r3, #3
 800338a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800338e:	230b      	movs	r3, #11
 8003390:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003394:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003398:	4619      	mov	r1, r3
 800339a:	4815      	ldr	r0, [pc, #84]	; (80033f0 <HAL_SD_MspInit+0x1ac>)
 800339c:	f005 fc04 	bl	8008ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80033a0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80033a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a8:	2302      	movs	r3, #2
 80033aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ae:	2300      	movs	r3, #0
 80033b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033b4:	2303      	movs	r3, #3
 80033b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 80033ba:	230a      	movs	r3, #10
 80033bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80033c4:	4619      	mov	r1, r3
 80033c6:	480a      	ldr	r0, [pc, #40]	; (80033f0 <HAL_SD_MspInit+0x1ac>)
 80033c8:	f005 fbee 	bl	8008ba8 <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 80033cc:	2200      	movs	r2, #0
 80033ce:	2100      	movs	r1, #0
 80033d0:	207c      	movs	r0, #124	; 0x7c
 80033d2:	f002 ff7c 	bl	80062ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 80033d6:	207c      	movs	r0, #124	; 0x7c
 80033d8:	f002 ff93 	bl	8006302 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 80033dc:	bf00      	nop
 80033de:	37e8      	adds	r7, #232	; 0xe8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	48022400 	.word	0x48022400
 80033e8:	58024400 	.word	0x58024400
 80033ec:	58020c00 	.word	0x58020c00
 80033f0:	58021800 	.word	0x58021800

080033f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08e      	sub	sp, #56	; 0x38
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	605a      	str	r2, [r3, #4]
 8003406:	609a      	str	r2, [r3, #8]
 8003408:	60da      	str	r2, [r3, #12]
 800340a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a4f      	ldr	r2, [pc, #316]	; (8003550 <HAL_SPI_MspInit+0x15c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d12e      	bne.n	8003474 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003416:	4b4f      	ldr	r3, [pc, #316]	; (8003554 <HAL_SPI_MspInit+0x160>)
 8003418:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800341c:	4a4d      	ldr	r2, [pc, #308]	; (8003554 <HAL_SPI_MspInit+0x160>)
 800341e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003422:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003426:	4b4b      	ldr	r3, [pc, #300]	; (8003554 <HAL_SPI_MspInit+0x160>)
 8003428:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800342c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003430:	623b      	str	r3, [r7, #32]
 8003432:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003434:	4b47      	ldr	r3, [pc, #284]	; (8003554 <HAL_SPI_MspInit+0x160>)
 8003436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800343a:	4a46      	ldr	r2, [pc, #280]	; (8003554 <HAL_SPI_MspInit+0x160>)
 800343c:	f043 0301 	orr.w	r3, r3, #1
 8003440:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003444:	4b43      	ldr	r3, [pc, #268]	; (8003554 <HAL_SPI_MspInit+0x160>)
 8003446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	61fb      	str	r3, [r7, #28]
 8003450:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003452:	23e0      	movs	r3, #224	; 0xe0
 8003454:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003456:	2302      	movs	r3, #2
 8003458:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345a:	2300      	movs	r3, #0
 800345c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800345e:	2300      	movs	r3, #0
 8003460:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003462:	2305      	movs	r3, #5
 8003464:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800346a:	4619      	mov	r1, r3
 800346c:	483a      	ldr	r0, [pc, #232]	; (8003558 <HAL_SPI_MspInit+0x164>)
 800346e:	f005 fb9b 	bl	8008ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003472:	e068      	b.n	8003546 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a38      	ldr	r2, [pc, #224]	; (800355c <HAL_SPI_MspInit+0x168>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d12f      	bne.n	80034de <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800347e:	4b35      	ldr	r3, [pc, #212]	; (8003554 <HAL_SPI_MspInit+0x160>)
 8003480:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003484:	4a33      	ldr	r2, [pc, #204]	; (8003554 <HAL_SPI_MspInit+0x160>)
 8003486:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800348a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800348e:	4b31      	ldr	r3, [pc, #196]	; (8003554 <HAL_SPI_MspInit+0x160>)
 8003490:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003494:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003498:	61bb      	str	r3, [r7, #24]
 800349a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800349c:	4b2d      	ldr	r3, [pc, #180]	; (8003554 <HAL_SPI_MspInit+0x160>)
 800349e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034a2:	4a2c      	ldr	r2, [pc, #176]	; (8003554 <HAL_SPI_MspInit+0x160>)
 80034a4:	f043 0302 	orr.w	r3, r3, #2
 80034a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034ac:	4b29      	ldr	r3, [pc, #164]	; (8003554 <HAL_SPI_MspInit+0x160>)
 80034ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	617b      	str	r3, [r7, #20]
 80034b8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80034ba:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80034be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c0:	2302      	movs	r3, #2
 80034c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c4:	2300      	movs	r3, #0
 80034c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c8:	2300      	movs	r3, #0
 80034ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80034cc:	2305      	movs	r3, #5
 80034ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034d4:	4619      	mov	r1, r3
 80034d6:	4822      	ldr	r0, [pc, #136]	; (8003560 <HAL_SPI_MspInit+0x16c>)
 80034d8:	f005 fb66 	bl	8008ba8 <HAL_GPIO_Init>
}
 80034dc:	e033      	b.n	8003546 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a20      	ldr	r2, [pc, #128]	; (8003564 <HAL_SPI_MspInit+0x170>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d12e      	bne.n	8003546 <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80034e8:	4b1a      	ldr	r3, [pc, #104]	; (8003554 <HAL_SPI_MspInit+0x160>)
 80034ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034ee:	4a19      	ldr	r2, [pc, #100]	; (8003554 <HAL_SPI_MspInit+0x160>)
 80034f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034f4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80034f8:	4b16      	ldr	r3, [pc, #88]	; (8003554 <HAL_SPI_MspInit+0x160>)
 80034fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003502:	613b      	str	r3, [r7, #16]
 8003504:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003506:	4b13      	ldr	r3, [pc, #76]	; (8003554 <HAL_SPI_MspInit+0x160>)
 8003508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800350c:	4a11      	ldr	r2, [pc, #68]	; (8003554 <HAL_SPI_MspInit+0x160>)
 800350e:	f043 0304 	orr.w	r3, r3, #4
 8003512:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003516:	4b0f      	ldr	r3, [pc, #60]	; (8003554 <HAL_SPI_MspInit+0x160>)
 8003518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003524:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003528:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352a:	2302      	movs	r3, #2
 800352c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352e:	2300      	movs	r3, #0
 8003530:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003532:	2300      	movs	r3, #0
 8003534:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003536:	2306      	movs	r3, #6
 8003538:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800353a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800353e:	4619      	mov	r1, r3
 8003540:	4809      	ldr	r0, [pc, #36]	; (8003568 <HAL_SPI_MspInit+0x174>)
 8003542:	f005 fb31 	bl	8008ba8 <HAL_GPIO_Init>
}
 8003546:	bf00      	nop
 8003548:	3738      	adds	r7, #56	; 0x38
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	40013000 	.word	0x40013000
 8003554:	58024400 	.word	0x58024400
 8003558:	58020000 	.word	0x58020000
 800355c:	40003800 	.word	0x40003800
 8003560:	58020400 	.word	0x58020400
 8003564:	40003c00 	.word	0x40003c00
 8003568:	58020800 	.word	0x58020800

0800356c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b08c      	sub	sp, #48	; 0x30
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003574:	f107 031c 	add.w	r3, r7, #28
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	605a      	str	r2, [r3, #4]
 800357e:	609a      	str	r2, [r3, #8]
 8003580:	60da      	str	r2, [r3, #12]
 8003582:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800358c:	d15d      	bne.n	800364a <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800358e:	4b8e      	ldr	r3, [pc, #568]	; (80037c8 <HAL_TIM_PWM_MspInit+0x25c>)
 8003590:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003594:	4a8c      	ldr	r2, [pc, #560]	; (80037c8 <HAL_TIM_PWM_MspInit+0x25c>)
 8003596:	f043 0301 	orr.w	r3, r3, #1
 800359a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800359e:	4b8a      	ldr	r3, [pc, #552]	; (80037c8 <HAL_TIM_PWM_MspInit+0x25c>)
 80035a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	61bb      	str	r3, [r7, #24]
 80035aa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ac:	4b86      	ldr	r3, [pc, #536]	; (80037c8 <HAL_TIM_PWM_MspInit+0x25c>)
 80035ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035b2:	4a85      	ldr	r2, [pc, #532]	; (80037c8 <HAL_TIM_PWM_MspInit+0x25c>)
 80035b4:	f043 0301 	orr.w	r3, r3, #1
 80035b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035bc:	4b82      	ldr	r3, [pc, #520]	; (80037c8 <HAL_TIM_PWM_MspInit+0x25c>)
 80035be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	617b      	str	r3, [r7, #20]
 80035c8:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80035ca:	2301      	movs	r3, #1
 80035cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ce:	2302      	movs	r3, #2
 80035d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d2:	2300      	movs	r3, #0
 80035d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d6:	2300      	movs	r3, #0
 80035d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80035da:	2301      	movs	r3, #1
 80035dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035de:	f107 031c 	add.w	r3, r7, #28
 80035e2:	4619      	mov	r1, r3
 80035e4:	4879      	ldr	r0, [pc, #484]	; (80037cc <HAL_TIM_PWM_MspInit+0x260>)
 80035e6:	f005 fadf 	bl	8008ba8 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 80035ea:	4b79      	ldr	r3, [pc, #484]	; (80037d0 <HAL_TIM_PWM_MspInit+0x264>)
 80035ec:	4a79      	ldr	r2, [pc, #484]	; (80037d4 <HAL_TIM_PWM_MspInit+0x268>)
 80035ee:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 80035f0:	4b77      	ldr	r3, [pc, #476]	; (80037d0 <HAL_TIM_PWM_MspInit+0x264>)
 80035f2:	2214      	movs	r2, #20
 80035f4:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035f6:	4b76      	ldr	r3, [pc, #472]	; (80037d0 <HAL_TIM_PWM_MspInit+0x264>)
 80035f8:	2240      	movs	r2, #64	; 0x40
 80035fa:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80035fc:	4b74      	ldr	r3, [pc, #464]	; (80037d0 <HAL_TIM_PWM_MspInit+0x264>)
 80035fe:	2200      	movs	r2, #0
 8003600:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003602:	4b73      	ldr	r3, [pc, #460]	; (80037d0 <HAL_TIM_PWM_MspInit+0x264>)
 8003604:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003608:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800360a:	4b71      	ldr	r3, [pc, #452]	; (80037d0 <HAL_TIM_PWM_MspInit+0x264>)
 800360c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003610:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003612:	4b6f      	ldr	r3, [pc, #444]	; (80037d0 <HAL_TIM_PWM_MspInit+0x264>)
 8003614:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003618:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 800361a:	4b6d      	ldr	r3, [pc, #436]	; (80037d0 <HAL_TIM_PWM_MspInit+0x264>)
 800361c:	2200      	movs	r2, #0
 800361e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003620:	4b6b      	ldr	r3, [pc, #428]	; (80037d0 <HAL_TIM_PWM_MspInit+0x264>)
 8003622:	2200      	movs	r2, #0
 8003624:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003626:	4b6a      	ldr	r3, [pc, #424]	; (80037d0 <HAL_TIM_PWM_MspInit+0x264>)
 8003628:	2200      	movs	r2, #0
 800362a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 800362c:	4868      	ldr	r0, [pc, #416]	; (80037d0 <HAL_TIM_PWM_MspInit+0x264>)
 800362e:	f002 fe83 	bl	8006338 <HAL_DMA_Init>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 8003638:	f7ff fc32 	bl	8002ea0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a64      	ldr	r2, [pc, #400]	; (80037d0 <HAL_TIM_PWM_MspInit+0x264>)
 8003640:	62da      	str	r2, [r3, #44]	; 0x2c
 8003642:	4a63      	ldr	r2, [pc, #396]	; (80037d0 <HAL_TIM_PWM_MspInit+0x264>)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003648:	e119      	b.n	800387e <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a62      	ldr	r2, [pc, #392]	; (80037d8 <HAL_TIM_PWM_MspInit+0x26c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d16d      	bne.n	8003730 <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003654:	4b5c      	ldr	r3, [pc, #368]	; (80037c8 <HAL_TIM_PWM_MspInit+0x25c>)
 8003656:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800365a:	4a5b      	ldr	r2, [pc, #364]	; (80037c8 <HAL_TIM_PWM_MspInit+0x25c>)
 800365c:	f043 0302 	orr.w	r3, r3, #2
 8003660:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003664:	4b58      	ldr	r3, [pc, #352]	; (80037c8 <HAL_TIM_PWM_MspInit+0x25c>)
 8003666:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	613b      	str	r3, [r7, #16]
 8003670:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 8003672:	4b5a      	ldr	r3, [pc, #360]	; (80037dc <HAL_TIM_PWM_MspInit+0x270>)
 8003674:	4a5a      	ldr	r2, [pc, #360]	; (80037e0 <HAL_TIM_PWM_MspInit+0x274>)
 8003676:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8003678:	4b58      	ldr	r3, [pc, #352]	; (80037dc <HAL_TIM_PWM_MspInit+0x270>)
 800367a:	2218      	movs	r2, #24
 800367c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800367e:	4b57      	ldr	r3, [pc, #348]	; (80037dc <HAL_TIM_PWM_MspInit+0x270>)
 8003680:	2240      	movs	r2, #64	; 0x40
 8003682:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003684:	4b55      	ldr	r3, [pc, #340]	; (80037dc <HAL_TIM_PWM_MspInit+0x270>)
 8003686:	2200      	movs	r2, #0
 8003688:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800368a:	4b54      	ldr	r3, [pc, #336]	; (80037dc <HAL_TIM_PWM_MspInit+0x270>)
 800368c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003690:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003692:	4b52      	ldr	r3, [pc, #328]	; (80037dc <HAL_TIM_PWM_MspInit+0x270>)
 8003694:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003698:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800369a:	4b50      	ldr	r3, [pc, #320]	; (80037dc <HAL_TIM_PWM_MspInit+0x270>)
 800369c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036a0:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 80036a2:	4b4e      	ldr	r3, [pc, #312]	; (80037dc <HAL_TIM_PWM_MspInit+0x270>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80036a8:	4b4c      	ldr	r3, [pc, #304]	; (80037dc <HAL_TIM_PWM_MspInit+0x270>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036ae:	4b4b      	ldr	r3, [pc, #300]	; (80037dc <HAL_TIM_PWM_MspInit+0x270>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 80036b4:	4849      	ldr	r0, [pc, #292]	; (80037dc <HAL_TIM_PWM_MspInit+0x270>)
 80036b6:	f002 fe3f 	bl	8006338 <HAL_DMA_Init>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 80036c0:	f7ff fbee 	bl	8002ea0 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a45      	ldr	r2, [pc, #276]	; (80037dc <HAL_TIM_PWM_MspInit+0x270>)
 80036c8:	629a      	str	r2, [r3, #40]	; 0x28
 80036ca:	4a44      	ldr	r2, [pc, #272]	; (80037dc <HAL_TIM_PWM_MspInit+0x270>)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 80036d0:	4b44      	ldr	r3, [pc, #272]	; (80037e4 <HAL_TIM_PWM_MspInit+0x278>)
 80036d2:	4a45      	ldr	r2, [pc, #276]	; (80037e8 <HAL_TIM_PWM_MspInit+0x27c>)
 80036d4:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 80036d6:	4b43      	ldr	r3, [pc, #268]	; (80037e4 <HAL_TIM_PWM_MspInit+0x278>)
 80036d8:	2217      	movs	r2, #23
 80036da:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036dc:	4b41      	ldr	r3, [pc, #260]	; (80037e4 <HAL_TIM_PWM_MspInit+0x278>)
 80036de:	2240      	movs	r2, #64	; 0x40
 80036e0:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80036e2:	4b40      	ldr	r3, [pc, #256]	; (80037e4 <HAL_TIM_PWM_MspInit+0x278>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80036e8:	4b3e      	ldr	r3, [pc, #248]	; (80037e4 <HAL_TIM_PWM_MspInit+0x278>)
 80036ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036ee:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80036f0:	4b3c      	ldr	r3, [pc, #240]	; (80037e4 <HAL_TIM_PWM_MspInit+0x278>)
 80036f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036f6:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80036f8:	4b3a      	ldr	r3, [pc, #232]	; (80037e4 <HAL_TIM_PWM_MspInit+0x278>)
 80036fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036fe:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8003700:	4b38      	ldr	r3, [pc, #224]	; (80037e4 <HAL_TIM_PWM_MspInit+0x278>)
 8003702:	2200      	movs	r2, #0
 8003704:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003706:	4b37      	ldr	r3, [pc, #220]	; (80037e4 <HAL_TIM_PWM_MspInit+0x278>)
 8003708:	2200      	movs	r2, #0
 800370a:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800370c:	4b35      	ldr	r3, [pc, #212]	; (80037e4 <HAL_TIM_PWM_MspInit+0x278>)
 800370e:	2200      	movs	r2, #0
 8003710:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8003712:	4834      	ldr	r0, [pc, #208]	; (80037e4 <HAL_TIM_PWM_MspInit+0x278>)
 8003714:	f002 fe10 	bl	8006338 <HAL_DMA_Init>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 800371e:	f7ff fbbf 	bl	8002ea0 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a2f      	ldr	r2, [pc, #188]	; (80037e4 <HAL_TIM_PWM_MspInit+0x278>)
 8003726:	625a      	str	r2, [r3, #36]	; 0x24
 8003728:	4a2e      	ldr	r2, [pc, #184]	; (80037e4 <HAL_TIM_PWM_MspInit+0x278>)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800372e:	e0a6      	b.n	800387e <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a2d      	ldr	r2, [pc, #180]	; (80037ec <HAL_TIM_PWM_MspInit+0x280>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d15e      	bne.n	80037f8 <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800373a:	4b23      	ldr	r3, [pc, #140]	; (80037c8 <HAL_TIM_PWM_MspInit+0x25c>)
 800373c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003740:	4a21      	ldr	r2, [pc, #132]	; (80037c8 <HAL_TIM_PWM_MspInit+0x25c>)
 8003742:	f043 0304 	orr.w	r3, r3, #4
 8003746:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800374a:	4b1f      	ldr	r3, [pc, #124]	; (80037c8 <HAL_TIM_PWM_MspInit+0x25c>)
 800374c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	60fb      	str	r3, [r7, #12]
 8003756:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 8003758:	4b25      	ldr	r3, [pc, #148]	; (80037f0 <HAL_TIM_PWM_MspInit+0x284>)
 800375a:	4a26      	ldr	r2, [pc, #152]	; (80037f4 <HAL_TIM_PWM_MspInit+0x288>)
 800375c:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 800375e:	4b24      	ldr	r3, [pc, #144]	; (80037f0 <HAL_TIM_PWM_MspInit+0x284>)
 8003760:	221f      	movs	r2, #31
 8003762:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003764:	4b22      	ldr	r3, [pc, #136]	; (80037f0 <HAL_TIM_PWM_MspInit+0x284>)
 8003766:	2240      	movs	r2, #64	; 0x40
 8003768:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800376a:	4b21      	ldr	r3, [pc, #132]	; (80037f0 <HAL_TIM_PWM_MspInit+0x284>)
 800376c:	2200      	movs	r2, #0
 800376e:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003770:	4b1f      	ldr	r3, [pc, #124]	; (80037f0 <HAL_TIM_PWM_MspInit+0x284>)
 8003772:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003776:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003778:	4b1d      	ldr	r3, [pc, #116]	; (80037f0 <HAL_TIM_PWM_MspInit+0x284>)
 800377a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800377e:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003780:	4b1b      	ldr	r3, [pc, #108]	; (80037f0 <HAL_TIM_PWM_MspInit+0x284>)
 8003782:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003786:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8003788:	4b19      	ldr	r3, [pc, #100]	; (80037f0 <HAL_TIM_PWM_MspInit+0x284>)
 800378a:	2200      	movs	r2, #0
 800378c:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800378e:	4b18      	ldr	r3, [pc, #96]	; (80037f0 <HAL_TIM_PWM_MspInit+0x284>)
 8003790:	2200      	movs	r2, #0
 8003792:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003794:	4b16      	ldr	r3, [pc, #88]	; (80037f0 <HAL_TIM_PWM_MspInit+0x284>)
 8003796:	2200      	movs	r2, #0
 8003798:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 800379a:	4815      	ldr	r0, [pc, #84]	; (80037f0 <HAL_TIM_PWM_MspInit+0x284>)
 800379c:	f002 fdcc 	bl	8006338 <HAL_DMA_Init>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 80037a6:	f7ff fb7b 	bl	8002ea0 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a10      	ldr	r2, [pc, #64]	; (80037f0 <HAL_TIM_PWM_MspInit+0x284>)
 80037ae:	62da      	str	r2, [r3, #44]	; 0x2c
 80037b0:	4a0f      	ldr	r2, [pc, #60]	; (80037f0 <HAL_TIM_PWM_MspInit+0x284>)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80037b6:	2200      	movs	r2, #0
 80037b8:	2100      	movs	r1, #0
 80037ba:	201e      	movs	r0, #30
 80037bc:	f002 fd87 	bl	80062ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80037c0:	201e      	movs	r0, #30
 80037c2:	f002 fd9e 	bl	8006302 <HAL_NVIC_EnableIRQ>
}
 80037c6:	e05a      	b.n	800387e <HAL_TIM_PWM_MspInit+0x312>
 80037c8:	58024400 	.word	0x58024400
 80037cc:	58020000 	.word	0x58020000
 80037d0:	2400130c 	.word	0x2400130c
 80037d4:	40020028 	.word	0x40020028
 80037d8:	40000400 	.word	0x40000400
 80037dc:	24001384 	.word	0x24001384
 80037e0:	40020058 	.word	0x40020058
 80037e4:	240013fc 	.word	0x240013fc
 80037e8:	40020070 	.word	0x40020070
 80037ec:	40000800 	.word	0x40000800
 80037f0:	24001474 	.word	0x24001474
 80037f4:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a22      	ldr	r2, [pc, #136]	; (8003888 <HAL_TIM_PWM_MspInit+0x31c>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d13d      	bne.n	800387e <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003802:	4b22      	ldr	r3, [pc, #136]	; (800388c <HAL_TIM_PWM_MspInit+0x320>)
 8003804:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003808:	4a20      	ldr	r2, [pc, #128]	; (800388c <HAL_TIM_PWM_MspInit+0x320>)
 800380a:	f043 0308 	orr.w	r3, r3, #8
 800380e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003812:	4b1e      	ldr	r3, [pc, #120]	; (800388c <HAL_TIM_PWM_MspInit+0x320>)
 8003814:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003818:	f003 0308 	and.w	r3, r3, #8
 800381c:	60bb      	str	r3, [r7, #8]
 800381e:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 8003820:	4b1b      	ldr	r3, [pc, #108]	; (8003890 <HAL_TIM_PWM_MspInit+0x324>)
 8003822:	4a1c      	ldr	r2, [pc, #112]	; (8003894 <HAL_TIM_PWM_MspInit+0x328>)
 8003824:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 8003826:	4b1a      	ldr	r3, [pc, #104]	; (8003890 <HAL_TIM_PWM_MspInit+0x324>)
 8003828:	223a      	movs	r2, #58	; 0x3a
 800382a:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800382c:	4b18      	ldr	r3, [pc, #96]	; (8003890 <HAL_TIM_PWM_MspInit+0x324>)
 800382e:	2240      	movs	r2, #64	; 0x40
 8003830:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8003832:	4b17      	ldr	r3, [pc, #92]	; (8003890 <HAL_TIM_PWM_MspInit+0x324>)
 8003834:	2200      	movs	r2, #0
 8003836:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8003838:	4b15      	ldr	r3, [pc, #84]	; (8003890 <HAL_TIM_PWM_MspInit+0x324>)
 800383a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800383e:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003840:	4b13      	ldr	r3, [pc, #76]	; (8003890 <HAL_TIM_PWM_MspInit+0x324>)
 8003842:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003846:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003848:	4b11      	ldr	r3, [pc, #68]	; (8003890 <HAL_TIM_PWM_MspInit+0x324>)
 800384a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800384e:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 8003850:	4b0f      	ldr	r3, [pc, #60]	; (8003890 <HAL_TIM_PWM_MspInit+0x324>)
 8003852:	2200      	movs	r2, #0
 8003854:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8003856:	4b0e      	ldr	r3, [pc, #56]	; (8003890 <HAL_TIM_PWM_MspInit+0x324>)
 8003858:	2200      	movs	r2, #0
 800385a:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800385c:	4b0c      	ldr	r3, [pc, #48]	; (8003890 <HAL_TIM_PWM_MspInit+0x324>)
 800385e:	2200      	movs	r2, #0
 8003860:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 8003862:	480b      	ldr	r0, [pc, #44]	; (8003890 <HAL_TIM_PWM_MspInit+0x324>)
 8003864:	f002 fd68 	bl	8006338 <HAL_DMA_Init>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 800386e:	f7ff fb17 	bl	8002ea0 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a06      	ldr	r2, [pc, #24]	; (8003890 <HAL_TIM_PWM_MspInit+0x324>)
 8003876:	631a      	str	r2, [r3, #48]	; 0x30
 8003878:	4a05      	ldr	r2, [pc, #20]	; (8003890 <HAL_TIM_PWM_MspInit+0x324>)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800387e:	bf00      	nop
 8003880:	3730      	adds	r7, #48	; 0x30
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	40000c00 	.word	0x40000c00
 800388c:	58024400 	.word	0x58024400
 8003890:	240014ec 	.word	0x240014ec
 8003894:	40020040 	.word	0x40020040

08003898 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a16      	ldr	r2, [pc, #88]	; (8003900 <HAL_TIM_Base_MspInit+0x68>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d10f      	bne.n	80038ca <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80038aa:	4b16      	ldr	r3, [pc, #88]	; (8003904 <HAL_TIM_Base_MspInit+0x6c>)
 80038ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038b0:	4a14      	ldr	r2, [pc, #80]	; (8003904 <HAL_TIM_Base_MspInit+0x6c>)
 80038b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80038ba:	4b12      	ldr	r3, [pc, #72]	; (8003904 <HAL_TIM_Base_MspInit+0x6c>)
 80038bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80038c8:	e013      	b.n	80038f2 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM14)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a0e      	ldr	r2, [pc, #56]	; (8003908 <HAL_TIM_Base_MspInit+0x70>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d10e      	bne.n	80038f2 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80038d4:	4b0b      	ldr	r3, [pc, #44]	; (8003904 <HAL_TIM_Base_MspInit+0x6c>)
 80038d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038da:	4a0a      	ldr	r2, [pc, #40]	; (8003904 <HAL_TIM_Base_MspInit+0x6c>)
 80038dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80038e4:	4b07      	ldr	r3, [pc, #28]	; (8003904 <HAL_TIM_Base_MspInit+0x6c>)
 80038e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ee:	60bb      	str	r3, [r7, #8]
 80038f0:	68bb      	ldr	r3, [r7, #8]
}
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	40001c00 	.word	0x40001c00
 8003904:	58024400 	.word	0x58024400
 8003908:	40002000 	.word	0x40002000

0800390c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b08c      	sub	sp, #48	; 0x30
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003914:	f107 031c 	add.w	r3, r7, #28
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	605a      	str	r2, [r3, #4]
 800391e:	609a      	str	r2, [r3, #8]
 8003920:	60da      	str	r2, [r3, #12]
 8003922:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800392c:	d120      	bne.n	8003970 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800392e:	4b52      	ldr	r3, [pc, #328]	; (8003a78 <HAL_TIM_MspPostInit+0x16c>)
 8003930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003934:	4a50      	ldr	r2, [pc, #320]	; (8003a78 <HAL_TIM_MspPostInit+0x16c>)
 8003936:	f043 0302 	orr.w	r3, r3, #2
 800393a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800393e:	4b4e      	ldr	r3, [pc, #312]	; (8003a78 <HAL_TIM_MspPostInit+0x16c>)
 8003940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	61bb      	str	r3, [r7, #24]
 800394a:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800394c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003952:	2302      	movs	r3, #2
 8003954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003956:	2302      	movs	r3, #2
 8003958:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800395a:	2300      	movs	r3, #0
 800395c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800395e:	2301      	movs	r3, #1
 8003960:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003962:	f107 031c 	add.w	r3, r7, #28
 8003966:	4619      	mov	r1, r3
 8003968:	4844      	ldr	r0, [pc, #272]	; (8003a7c <HAL_TIM_MspPostInit+0x170>)
 800396a:	f005 f91d 	bl	8008ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800396e:	e07f      	b.n	8003a70 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a42      	ldr	r2, [pc, #264]	; (8003a80 <HAL_TIM_MspPostInit+0x174>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d11f      	bne.n	80039ba <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800397a:	4b3f      	ldr	r3, [pc, #252]	; (8003a78 <HAL_TIM_MspPostInit+0x16c>)
 800397c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003980:	4a3d      	ldr	r2, [pc, #244]	; (8003a78 <HAL_TIM_MspPostInit+0x16c>)
 8003982:	f043 0302 	orr.w	r3, r3, #2
 8003986:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800398a:	4b3b      	ldr	r3, [pc, #236]	; (8003a78 <HAL_TIM_MspPostInit+0x16c>)
 800398c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	617b      	str	r3, [r7, #20]
 8003996:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003998:	2330      	movs	r3, #48	; 0x30
 800399a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800399c:	2302      	movs	r3, #2
 800399e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80039a0:	2302      	movs	r3, #2
 80039a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039a4:	2300      	movs	r3, #0
 80039a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80039a8:	2302      	movs	r3, #2
 80039aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039ac:	f107 031c 	add.w	r3, r7, #28
 80039b0:	4619      	mov	r1, r3
 80039b2:	4832      	ldr	r0, [pc, #200]	; (8003a7c <HAL_TIM_MspPostInit+0x170>)
 80039b4:	f005 f8f8 	bl	8008ba8 <HAL_GPIO_Init>
}
 80039b8:	e05a      	b.n	8003a70 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a31      	ldr	r2, [pc, #196]	; (8003a84 <HAL_TIM_MspPostInit+0x178>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d131      	bne.n	8003a28 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80039c4:	4b2c      	ldr	r3, [pc, #176]	; (8003a78 <HAL_TIM_MspPostInit+0x16c>)
 80039c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039ca:	4a2b      	ldr	r2, [pc, #172]	; (8003a78 <HAL_TIM_MspPostInit+0x16c>)
 80039cc:	f043 0308 	orr.w	r3, r3, #8
 80039d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039d4:	4b28      	ldr	r3, [pc, #160]	; (8003a78 <HAL_TIM_MspPostInit+0x16c>)
 80039d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	613b      	str	r3, [r7, #16]
 80039e0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80039e2:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80039e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e8:	2302      	movs	r3, #2
 80039ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ec:	2300      	movs	r3, #0
 80039ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039f0:	2300      	movs	r3, #0
 80039f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80039f4:	2302      	movs	r3, #2
 80039f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039f8:	f107 031c 	add.w	r3, r7, #28
 80039fc:	4619      	mov	r1, r3
 80039fe:	4822      	ldr	r0, [pc, #136]	; (8003a88 <HAL_TIM_MspPostInit+0x17c>)
 8003a00:	f005 f8d2 	bl	8008ba8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003a04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a0e:	2302      	movs	r3, #2
 8003a10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a12:	2300      	movs	r3, #0
 8003a14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003a16:	2302      	movs	r3, #2
 8003a18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a1a:	f107 031c 	add.w	r3, r7, #28
 8003a1e:	4619      	mov	r1, r3
 8003a20:	4819      	ldr	r0, [pc, #100]	; (8003a88 <HAL_TIM_MspPostInit+0x17c>)
 8003a22:	f005 f8c1 	bl	8008ba8 <HAL_GPIO_Init>
}
 8003a26:	e023      	b.n	8003a70 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a17      	ldr	r2, [pc, #92]	; (8003a8c <HAL_TIM_MspPostInit+0x180>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d11e      	bne.n	8003a70 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a32:	4b11      	ldr	r3, [pc, #68]	; (8003a78 <HAL_TIM_MspPostInit+0x16c>)
 8003a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a38:	4a0f      	ldr	r2, [pc, #60]	; (8003a78 <HAL_TIM_MspPostInit+0x16c>)
 8003a3a:	f043 0301 	orr.w	r3, r3, #1
 8003a3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a42:	4b0d      	ldr	r3, [pc, #52]	; (8003a78 <HAL_TIM_MspPostInit+0x16c>)
 8003a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	60fb      	str	r3, [r7, #12]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003a50:	2308      	movs	r3, #8
 8003a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a54:	2302      	movs	r3, #2
 8003a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a58:	2302      	movs	r3, #2
 8003a5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003a60:	2302      	movs	r3, #2
 8003a62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a64:	f107 031c 	add.w	r3, r7, #28
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4809      	ldr	r0, [pc, #36]	; (8003a90 <HAL_TIM_MspPostInit+0x184>)
 8003a6c:	f005 f89c 	bl	8008ba8 <HAL_GPIO_Init>
}
 8003a70:	bf00      	nop
 8003a72:	3730      	adds	r7, #48	; 0x30
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	58024400 	.word	0x58024400
 8003a7c:	58020400 	.word	0x58020400
 8003a80:	40000400 	.word	0x40000400
 8003a84:	40000800 	.word	0x40000800
 8003a88:	58020c00 	.word	0x58020c00
 8003a8c:	40000c00 	.word	0x40000c00
 8003a90:	58020000 	.word	0x58020000

08003a94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b0ba      	sub	sp, #232	; 0xe8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a9c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	605a      	str	r2, [r3, #4]
 8003aa6:	609a      	str	r2, [r3, #8]
 8003aa8:	60da      	str	r2, [r3, #12]
 8003aaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003aac:	f107 0318 	add.w	r3, r7, #24
 8003ab0:	22b8      	movs	r2, #184	; 0xb8
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f018 f970 	bl	801bd9a <memset>
  if(huart->Instance==UART4)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a4d      	ldr	r2, [pc, #308]	; (8003bf4 <HAL_UART_MspInit+0x160>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d147      	bne.n	8003b54 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003ac4:	f04f 0202 	mov.w	r2, #2
 8003ac8:	f04f 0300 	mov.w	r3, #0
 8003acc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ad6:	f107 0318 	add.w	r3, r7, #24
 8003ada:	4618      	mov	r0, r3
 8003adc:	f007 fe52 	bl	800b784 <HAL_RCCEx_PeriphCLKConfig>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003ae6:	f7ff f9db 	bl	8002ea0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003aea:	4b43      	ldr	r3, [pc, #268]	; (8003bf8 <HAL_UART_MspInit+0x164>)
 8003aec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003af0:	4a41      	ldr	r2, [pc, #260]	; (8003bf8 <HAL_UART_MspInit+0x164>)
 8003af2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003af6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003afa:	4b3f      	ldr	r3, [pc, #252]	; (8003bf8 <HAL_UART_MspInit+0x164>)
 8003afc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b04:	617b      	str	r3, [r7, #20]
 8003b06:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b08:	4b3b      	ldr	r3, [pc, #236]	; (8003bf8 <HAL_UART_MspInit+0x164>)
 8003b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b0e:	4a3a      	ldr	r2, [pc, #232]	; (8003bf8 <HAL_UART_MspInit+0x164>)
 8003b10:	f043 0302 	orr.w	r3, r3, #2
 8003b14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b18:	4b37      	ldr	r3, [pc, #220]	; (8003bf8 <HAL_UART_MspInit+0x164>)
 8003b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	613b      	str	r3, [r7, #16]
 8003b24:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003b26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003b2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b2e:	2302      	movs	r3, #2
 8003b30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b34:	2300      	movs	r3, #0
 8003b36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003b40:	2308      	movs	r3, #8
 8003b42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b46:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	482b      	ldr	r0, [pc, #172]	; (8003bfc <HAL_UART_MspInit+0x168>)
 8003b4e:	f005 f82b 	bl	8008ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003b52:	e04a      	b.n	8003bea <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a29      	ldr	r2, [pc, #164]	; (8003c00 <HAL_UART_MspInit+0x16c>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d145      	bne.n	8003bea <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003b5e:	f04f 0201 	mov.w	r2, #1
 8003b62:	f04f 0300 	mov.w	r3, #0
 8003b66:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b70:	f107 0318 	add.w	r3, r7, #24
 8003b74:	4618      	mov	r0, r3
 8003b76:	f007 fe05 	bl	800b784 <HAL_RCCEx_PeriphCLKConfig>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8003b80:	f7ff f98e 	bl	8002ea0 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003b84:	4b1c      	ldr	r3, [pc, #112]	; (8003bf8 <HAL_UART_MspInit+0x164>)
 8003b86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b8a:	4a1b      	ldr	r2, [pc, #108]	; (8003bf8 <HAL_UART_MspInit+0x164>)
 8003b8c:	f043 0320 	orr.w	r3, r3, #32
 8003b90:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003b94:	4b18      	ldr	r3, [pc, #96]	; (8003bf8 <HAL_UART_MspInit+0x164>)
 8003b96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b9a:	f003 0320 	and.w	r3, r3, #32
 8003b9e:	60fb      	str	r3, [r7, #12]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ba2:	4b15      	ldr	r3, [pc, #84]	; (8003bf8 <HAL_UART_MspInit+0x164>)
 8003ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ba8:	4a13      	ldr	r2, [pc, #76]	; (8003bf8 <HAL_UART_MspInit+0x164>)
 8003baa:	f043 0304 	orr.w	r3, r3, #4
 8003bae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003bb2:	4b11      	ldr	r3, [pc, #68]	; (8003bf8 <HAL_UART_MspInit+0x164>)
 8003bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	60bb      	str	r3, [r7, #8]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003bc0:	23c0      	movs	r3, #192	; 0xc0
 8003bc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8003bd8:	2307      	movs	r3, #7
 8003bda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bde:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003be2:	4619      	mov	r1, r3
 8003be4:	4807      	ldr	r0, [pc, #28]	; (8003c04 <HAL_UART_MspInit+0x170>)
 8003be6:	f004 ffdf 	bl	8008ba8 <HAL_GPIO_Init>
}
 8003bea:	bf00      	nop
 8003bec:	37e8      	adds	r7, #232	; 0xe8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40004c00 	.word	0x40004c00
 8003bf8:	58024400 	.word	0x58024400
 8003bfc:	58020400 	.word	0x58020400
 8003c00:	40011400 	.word	0x40011400
 8003c04:	58020800 	.word	0x58020800

08003c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c0c:	e7fe      	b.n	8003c0c <NMI_Handler+0x4>

08003c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c12:	e7fe      	b.n	8003c12 <HardFault_Handler+0x4>

08003c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c18:	e7fe      	b.n	8003c18 <MemManage_Handler+0x4>

08003c1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c1e:	e7fe      	b.n	8003c1e <BusFault_Handler+0x4>

08003c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c24:	e7fe      	b.n	8003c24 <UsageFault_Handler+0x4>

08003c26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c26:	b480      	push	{r7}
 8003c28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c2a:	bf00      	nop
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c38:	bf00      	nop
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c42:	b480      	push	{r7}
 8003c44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c46:	bf00      	nop
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c54:	f000 fa4a 	bl	80040ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c58:	bf00      	nop
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8003c60:	4802      	ldr	r0, [pc, #8]	; (8003c6c <DMA1_Stream0_IRQHandler+0x10>)
 8003c62:	f003 f92b 	bl	8006ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003c66:	bf00      	nop
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	24001474 	.word	0x24001474

08003c70 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8003c74:	4802      	ldr	r0, [pc, #8]	; (8003c80 <DMA1_Stream1_IRQHandler+0x10>)
 8003c76:	f003 f921 	bl	8006ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003c7a:	bf00      	nop
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	2400130c 	.word	0x2400130c

08003c84 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8003c88:	4802      	ldr	r0, [pc, #8]	; (8003c94 <DMA1_Stream2_IRQHandler+0x10>)
 8003c8a:	f003 f917 	bl	8006ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003c8e:	bf00      	nop
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	240014ec 	.word	0x240014ec

08003c98 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003c9c:	4802      	ldr	r0, [pc, #8]	; (8003ca8 <DMA1_Stream3_IRQHandler+0x10>)
 8003c9e:	f003 f90d 	bl	8006ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003ca2:	bf00      	nop
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	24001384 	.word	0x24001384

08003cac <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8003cb0:	4802      	ldr	r0, [pc, #8]	; (8003cbc <DMA1_Stream4_IRQHandler+0x10>)
 8003cb2:	f003 f903 	bl	8006ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003cb6:	bf00      	nop
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	240013fc 	.word	0x240013fc

08003cc0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003cc4:	4802      	ldr	r0, [pc, #8]	; (8003cd0 <DMA1_Stream5_IRQHandler+0x10>)
 8003cc6:	f003 f8f9 	bl	8006ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003cca:	bf00      	nop
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	24000d4c 	.word	0x24000d4c

08003cd4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003cd8:	4802      	ldr	r0, [pc, #8]	; (8003ce4 <TIM4_IRQHandler+0x10>)
 8003cda:	f00c ff35 	bl	8010b48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003cde:	bf00      	nop
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	240011dc 	.word	0x240011dc

08003ce8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003cec:	4802      	ldr	r0, [pc, #8]	; (8003cf8 <I2C2_EV_IRQHandler+0x10>)
 8003cee:	f005 f9c5 	bl	800907c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003cf2:	bf00      	nop
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	24000edc 	.word	0x24000edc

08003cfc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003d00:	4802      	ldr	r0, [pc, #8]	; (8003d0c <DMA2_Stream7_IRQHandler+0x10>)
 8003d02:	f003 f8db 	bl	8006ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003d06:	bf00      	nop
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	24000dc4 	.word	0x24000dc4

08003d10 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003d14:	4802      	ldr	r0, [pc, #8]	; (8003d20 <OTG_HS_IRQHandler+0x10>)
 8003d16:	f005 fbbb 	bl	8009490 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8003d1a:	bf00      	nop
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	24002db8 	.word	0x24002db8

08003d24 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8003d28:	4802      	ldr	r0, [pc, #8]	; (8003d34 <SDMMC2_IRQHandler+0x10>)
 8003d2a:	f00a fb81 	bl	800e430 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 8003d2e:	bf00      	nop
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	24000f30 	.word	0x24000f30

08003d38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  return 1;
 8003d3c:	2301      	movs	r3, #1
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <_kill>:

int _kill(int pid, int sig)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003d52:	f018 f875 	bl	801be40 <__errno>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2216      	movs	r2, #22
 8003d5a:	601a      	str	r2, [r3, #0]
  return -1;
 8003d5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3708      	adds	r7, #8
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <_exit>:

void _exit (int status)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003d70:	f04f 31ff 	mov.w	r1, #4294967295
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f7ff ffe7 	bl	8003d48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003d7a:	e7fe      	b.n	8003d7a <_exit+0x12>

08003d7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d88:	2300      	movs	r3, #0
 8003d8a:	617b      	str	r3, [r7, #20]
 8003d8c:	e00a      	b.n	8003da4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003d8e:	f3af 8000 	nop.w
 8003d92:	4601      	mov	r1, r0
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	60ba      	str	r2, [r7, #8]
 8003d9a:	b2ca      	uxtb	r2, r1
 8003d9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	3301      	adds	r3, #1
 8003da2:	617b      	str	r3, [r7, #20]
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	dbf0      	blt.n	8003d8e <_read+0x12>
  }

  return len;
 8003dac:	687b      	ldr	r3, [r7, #4]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3718      	adds	r7, #24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b086      	sub	sp, #24
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	60f8      	str	r0, [r7, #12]
 8003dbe:	60b9      	str	r1, [r7, #8]
 8003dc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	617b      	str	r3, [r7, #20]
 8003dc6:	e009      	b.n	8003ddc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	1c5a      	adds	r2, r3, #1
 8003dcc:	60ba      	str	r2, [r7, #8]
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	dbf1      	blt.n	8003dc8 <_write+0x12>
  }
  return len;
 8003de4:	687b      	ldr	r3, [r7, #4]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <_close>:

int _close(int file)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003df6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
 8003e0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e16:	605a      	str	r2, [r3, #4]
  return 0;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <_isatty>:

int _isatty(int file)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003e2e:	2301      	movs	r3, #1
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
	...

08003e58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e60:	4a14      	ldr	r2, [pc, #80]	; (8003eb4 <_sbrk+0x5c>)
 8003e62:	4b15      	ldr	r3, [pc, #84]	; (8003eb8 <_sbrk+0x60>)
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e6c:	4b13      	ldr	r3, [pc, #76]	; (8003ebc <_sbrk+0x64>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d102      	bne.n	8003e7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e74:	4b11      	ldr	r3, [pc, #68]	; (8003ebc <_sbrk+0x64>)
 8003e76:	4a12      	ldr	r2, [pc, #72]	; (8003ec0 <_sbrk+0x68>)
 8003e78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e7a:	4b10      	ldr	r3, [pc, #64]	; (8003ebc <_sbrk+0x64>)
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4413      	add	r3, r2
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d207      	bcs.n	8003e98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e88:	f017 ffda 	bl	801be40 <__errno>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	220c      	movs	r2, #12
 8003e90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e92:	f04f 33ff 	mov.w	r3, #4294967295
 8003e96:	e009      	b.n	8003eac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e98:	4b08      	ldr	r3, [pc, #32]	; (8003ebc <_sbrk+0x64>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e9e:	4b07      	ldr	r3, [pc, #28]	; (8003ebc <_sbrk+0x64>)
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	4a05      	ldr	r2, [pc, #20]	; (8003ebc <_sbrk+0x64>)
 8003ea8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	24050000 	.word	0x24050000
 8003eb8:	00000800 	.word	0x00000800
 8003ebc:	2400168c 	.word	0x2400168c
 8003ec0:	24003630 	.word	0x24003630

08003ec4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003ec8:	4b32      	ldr	r3, [pc, #200]	; (8003f94 <SystemInit+0xd0>)
 8003eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ece:	4a31      	ldr	r2, [pc, #196]	; (8003f94 <SystemInit+0xd0>)
 8003ed0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ed4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003ed8:	4b2f      	ldr	r3, [pc, #188]	; (8003f98 <SystemInit+0xd4>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 030f 	and.w	r3, r3, #15
 8003ee0:	2b06      	cmp	r3, #6
 8003ee2:	d807      	bhi.n	8003ef4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003ee4:	4b2c      	ldr	r3, [pc, #176]	; (8003f98 <SystemInit+0xd4>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f023 030f 	bic.w	r3, r3, #15
 8003eec:	4a2a      	ldr	r2, [pc, #168]	; (8003f98 <SystemInit+0xd4>)
 8003eee:	f043 0307 	orr.w	r3, r3, #7
 8003ef2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003ef4:	4b29      	ldr	r3, [pc, #164]	; (8003f9c <SystemInit+0xd8>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a28      	ldr	r2, [pc, #160]	; (8003f9c <SystemInit+0xd8>)
 8003efa:	f043 0301 	orr.w	r3, r3, #1
 8003efe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003f00:	4b26      	ldr	r3, [pc, #152]	; (8003f9c <SystemInit+0xd8>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003f06:	4b25      	ldr	r3, [pc, #148]	; (8003f9c <SystemInit+0xd8>)
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	4924      	ldr	r1, [pc, #144]	; (8003f9c <SystemInit+0xd8>)
 8003f0c:	4b24      	ldr	r3, [pc, #144]	; (8003fa0 <SystemInit+0xdc>)
 8003f0e:	4013      	ands	r3, r2
 8003f10:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003f12:	4b21      	ldr	r3, [pc, #132]	; (8003f98 <SystemInit+0xd4>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0308 	and.w	r3, r3, #8
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d007      	beq.n	8003f2e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003f1e:	4b1e      	ldr	r3, [pc, #120]	; (8003f98 <SystemInit+0xd4>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f023 030f 	bic.w	r3, r3, #15
 8003f26:	4a1c      	ldr	r2, [pc, #112]	; (8003f98 <SystemInit+0xd4>)
 8003f28:	f043 0307 	orr.w	r3, r3, #7
 8003f2c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003f2e:	4b1b      	ldr	r3, [pc, #108]	; (8003f9c <SystemInit+0xd8>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003f34:	4b19      	ldr	r3, [pc, #100]	; (8003f9c <SystemInit+0xd8>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003f3a:	4b18      	ldr	r3, [pc, #96]	; (8003f9c <SystemInit+0xd8>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003f40:	4b16      	ldr	r3, [pc, #88]	; (8003f9c <SystemInit+0xd8>)
 8003f42:	4a18      	ldr	r2, [pc, #96]	; (8003fa4 <SystemInit+0xe0>)
 8003f44:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003f46:	4b15      	ldr	r3, [pc, #84]	; (8003f9c <SystemInit+0xd8>)
 8003f48:	4a17      	ldr	r2, [pc, #92]	; (8003fa8 <SystemInit+0xe4>)
 8003f4a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003f4c:	4b13      	ldr	r3, [pc, #76]	; (8003f9c <SystemInit+0xd8>)
 8003f4e:	4a17      	ldr	r2, [pc, #92]	; (8003fac <SystemInit+0xe8>)
 8003f50:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003f52:	4b12      	ldr	r3, [pc, #72]	; (8003f9c <SystemInit+0xd8>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003f58:	4b10      	ldr	r3, [pc, #64]	; (8003f9c <SystemInit+0xd8>)
 8003f5a:	4a14      	ldr	r2, [pc, #80]	; (8003fac <SystemInit+0xe8>)
 8003f5c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003f5e:	4b0f      	ldr	r3, [pc, #60]	; (8003f9c <SystemInit+0xd8>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003f64:	4b0d      	ldr	r3, [pc, #52]	; (8003f9c <SystemInit+0xd8>)
 8003f66:	4a11      	ldr	r2, [pc, #68]	; (8003fac <SystemInit+0xe8>)
 8003f68:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003f6a:	4b0c      	ldr	r3, [pc, #48]	; (8003f9c <SystemInit+0xd8>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003f70:	4b0a      	ldr	r3, [pc, #40]	; (8003f9c <SystemInit+0xd8>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a09      	ldr	r2, [pc, #36]	; (8003f9c <SystemInit+0xd8>)
 8003f76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f7a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003f7c:	4b07      	ldr	r3, [pc, #28]	; (8003f9c <SystemInit+0xd8>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003f82:	4b0b      	ldr	r3, [pc, #44]	; (8003fb0 <SystemInit+0xec>)
 8003f84:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003f88:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003f8a:	bf00      	nop
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	e000ed00 	.word	0xe000ed00
 8003f98:	52002000 	.word	0x52002000
 8003f9c:	58024400 	.word	0x58024400
 8003fa0:	eaf6ed7f 	.word	0xeaf6ed7f
 8003fa4:	02020200 	.word	0x02020200
 8003fa8:	01ff0000 	.word	0x01ff0000
 8003fac:	01010280 	.word	0x01010280
 8003fb0:	52004000 	.word	0x52004000

08003fb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003fb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003fec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003fb8:	f7ff ff84 	bl	8003ec4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003fbc:	480c      	ldr	r0, [pc, #48]	; (8003ff0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003fbe:	490d      	ldr	r1, [pc, #52]	; (8003ff4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003fc0:	4a0d      	ldr	r2, [pc, #52]	; (8003ff8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fc4:	e002      	b.n	8003fcc <LoopCopyDataInit>

08003fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fca:	3304      	adds	r3, #4

08003fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fd0:	d3f9      	bcc.n	8003fc6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fd2:	4a0a      	ldr	r2, [pc, #40]	; (8003ffc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003fd4:	4c0a      	ldr	r4, [pc, #40]	; (8004000 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fd8:	e001      	b.n	8003fde <LoopFillZerobss>

08003fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fdc:	3204      	adds	r2, #4

08003fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fe0:	d3fb      	bcc.n	8003fda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003fe2:	f017 ff33 	bl	801be4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003fe6:	f7fd fa9d 	bl	8001524 <main>
  bx  lr
 8003fea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003fec:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003ff0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003ff4:	240002c8 	.word	0x240002c8
  ldr r2, =_sidata
 8003ff8:	0802085c 	.word	0x0802085c
  ldr r2, =_sbss
 8003ffc:	240002c8 	.word	0x240002c8
  ldr r4, =_ebss
 8004000:	24003630 	.word	0x24003630

08004004 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004004:	e7fe      	b.n	8004004 <ADC3_IRQHandler>
	...

08004008 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800400e:	2003      	movs	r0, #3
 8004010:	f002 f952 	bl	80062b8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004014:	f007 f9e0 	bl	800b3d8 <HAL_RCC_GetSysClockFreq>
 8004018:	4602      	mov	r2, r0
 800401a:	4b15      	ldr	r3, [pc, #84]	; (8004070 <HAL_Init+0x68>)
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	0a1b      	lsrs	r3, r3, #8
 8004020:	f003 030f 	and.w	r3, r3, #15
 8004024:	4913      	ldr	r1, [pc, #76]	; (8004074 <HAL_Init+0x6c>)
 8004026:	5ccb      	ldrb	r3, [r1, r3]
 8004028:	f003 031f 	and.w	r3, r3, #31
 800402c:	fa22 f303 	lsr.w	r3, r2, r3
 8004030:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004032:	4b0f      	ldr	r3, [pc, #60]	; (8004070 <HAL_Init+0x68>)
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	4a0e      	ldr	r2, [pc, #56]	; (8004074 <HAL_Init+0x6c>)
 800403c:	5cd3      	ldrb	r3, [r2, r3]
 800403e:	f003 031f 	and.w	r3, r3, #31
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	fa22 f303 	lsr.w	r3, r2, r3
 8004048:	4a0b      	ldr	r2, [pc, #44]	; (8004078 <HAL_Init+0x70>)
 800404a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800404c:	4a0b      	ldr	r2, [pc, #44]	; (800407c <HAL_Init+0x74>)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004052:	200f      	movs	r0, #15
 8004054:	f000 f814 	bl	8004080 <HAL_InitTick>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e002      	b.n	8004068 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004062:	f7fe ff23 	bl	8002eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	58024400 	.word	0x58024400
 8004074:	0801ff74 	.word	0x0801ff74
 8004078:	24000004 	.word	0x24000004
 800407c:	24000000 	.word	0x24000000

08004080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004088:	4b15      	ldr	r3, [pc, #84]	; (80040e0 <HAL_InitTick+0x60>)
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e021      	b.n	80040d8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004094:	4b13      	ldr	r3, [pc, #76]	; (80040e4 <HAL_InitTick+0x64>)
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	4b11      	ldr	r3, [pc, #68]	; (80040e0 <HAL_InitTick+0x60>)
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	4619      	mov	r1, r3
 800409e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80040a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040aa:	4618      	mov	r0, r3
 80040ac:	f002 f937 	bl	800631e <HAL_SYSTICK_Config>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e00e      	b.n	80040d8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b0f      	cmp	r3, #15
 80040be:	d80a      	bhi.n	80040d6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040c0:	2200      	movs	r2, #0
 80040c2:	6879      	ldr	r1, [r7, #4]
 80040c4:	f04f 30ff 	mov.w	r0, #4294967295
 80040c8:	f002 f901 	bl	80062ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040cc:	4a06      	ldr	r2, [pc, #24]	; (80040e8 <HAL_InitTick+0x68>)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
 80040d4:	e000      	b.n	80040d8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3708      	adds	r7, #8
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	2400000c 	.word	0x2400000c
 80040e4:	24000000 	.word	0x24000000
 80040e8:	24000008 	.word	0x24000008

080040ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80040f0:	4b06      	ldr	r3, [pc, #24]	; (800410c <HAL_IncTick+0x20>)
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	461a      	mov	r2, r3
 80040f6:	4b06      	ldr	r3, [pc, #24]	; (8004110 <HAL_IncTick+0x24>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4413      	add	r3, r2
 80040fc:	4a04      	ldr	r2, [pc, #16]	; (8004110 <HAL_IncTick+0x24>)
 80040fe:	6013      	str	r3, [r2, #0]
}
 8004100:	bf00      	nop
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	2400000c 	.word	0x2400000c
 8004110:	24001690 	.word	0x24001690

08004114 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
  return uwTick;
 8004118:	4b03      	ldr	r3, [pc, #12]	; (8004128 <HAL_GetTick+0x14>)
 800411a:	681b      	ldr	r3, [r3, #0]
}
 800411c:	4618      	mov	r0, r3
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	24001690 	.word	0x24001690

0800412c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004134:	f7ff ffee 	bl	8004114 <HAL_GetTick>
 8004138:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004144:	d005      	beq.n	8004152 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004146:	4b0a      	ldr	r3, [pc, #40]	; (8004170 <HAL_Delay+0x44>)
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	461a      	mov	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	4413      	add	r3, r2
 8004150:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004152:	bf00      	nop
 8004154:	f7ff ffde 	bl	8004114 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	429a      	cmp	r2, r3
 8004162:	d8f7      	bhi.n	8004154 <HAL_Delay+0x28>
  {
  }
}
 8004164:	bf00      	nop
 8004166:	bf00      	nop
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	2400000c 	.word	0x2400000c

08004174 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800417e:	4b07      	ldr	r3, [pc, #28]	; (800419c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	43db      	mvns	r3, r3
 8004186:	401a      	ands	r2, r3
 8004188:	4904      	ldr	r1, [pc, #16]	; (800419c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	4313      	orrs	r3, r2
 800418e:	604b      	str	r3, [r1, #4]
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	58000400 	.word	0x58000400

080041a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	431a      	orrs	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	609a      	str	r2, [r3, #8]
}
 80041ba:	bf00      	nop
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b083      	sub	sp, #12
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
 80041ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	609a      	str	r2, [r3, #8]
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004208:	b480      	push	{r7}
 800420a:	b087      	sub	sp, #28
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
 8004214:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	3360      	adds	r3, #96	; 0x60
 800421a:	461a      	mov	r2, r3
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4413      	add	r3, r2
 8004222:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	4a10      	ldr	r2, [pc, #64]	; (8004268 <LL_ADC_SetOffset+0x60>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d10b      	bne.n	8004244 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	4313      	orrs	r3, r2
 800423a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004242:	e00b      	b.n	800425c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	430b      	orrs	r3, r1
 8004256:	431a      	orrs	r2, r3
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	601a      	str	r2, [r3, #0]
}
 800425c:	bf00      	nop
 800425e:	371c      	adds	r7, #28
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr
 8004268:	58026000 	.word	0x58026000

0800426c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	3360      	adds	r3, #96	; 0x60
 800427a:	461a      	mov	r2, r3
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4413      	add	r3, r2
 8004282:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800428c:	4618      	mov	r0, r3
 800428e:	3714      	adds	r7, #20
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	f003 031f 	and.w	r3, r3, #31
 80042b2:	6879      	ldr	r1, [r7, #4]
 80042b4:	fa01 f303 	lsl.w	r3, r1, r3
 80042b8:	431a      	orrs	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	611a      	str	r2, [r3, #16]
}
 80042be:	bf00      	nop
 80042c0:	3714      	adds	r7, #20
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
	...

080042cc <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b087      	sub	sp, #28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	4a0c      	ldr	r2, [pc, #48]	; (800430c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d00e      	beq.n	80042fe <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	3360      	adds	r3, #96	; 0x60
 80042e4:	461a      	mov	r2, r3
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	4413      	add	r3, r2
 80042ec:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	431a      	orrs	r2, r3
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	601a      	str	r2, [r3, #0]
  }
}
 80042fe:	bf00      	nop
 8004300:	371c      	adds	r7, #28
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	58026000 	.word	0x58026000

08004310 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004310:	b480      	push	{r7}
 8004312:	b087      	sub	sp, #28
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4a0c      	ldr	r2, [pc, #48]	; (8004350 <LL_ADC_SetOffsetSaturation+0x40>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d10e      	bne.n	8004342 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	3360      	adds	r3, #96	; 0x60
 8004328:	461a      	mov	r2, r3
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4413      	add	r3, r2
 8004330:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	431a      	orrs	r2, r3
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8004342:	bf00      	nop
 8004344:	371c      	adds	r7, #28
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	58026000 	.word	0x58026000

08004354 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004354:	b480      	push	{r7}
 8004356:	b087      	sub	sp, #28
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4a0c      	ldr	r2, [pc, #48]	; (8004394 <LL_ADC_SetOffsetSign+0x40>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d10e      	bne.n	8004386 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	3360      	adds	r3, #96	; 0x60
 800436c:	461a      	mov	r2, r3
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	4413      	add	r3, r2
 8004374:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	431a      	orrs	r2, r3
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8004386:	bf00      	nop
 8004388:	371c      	adds	r7, #28
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	58026000 	.word	0x58026000

08004398 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004398:	b480      	push	{r7}
 800439a:	b087      	sub	sp, #28
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	3360      	adds	r3, #96	; 0x60
 80043a8:	461a      	mov	r2, r3
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4413      	add	r3, r2
 80043b0:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	4a0c      	ldr	r2, [pc, #48]	; (80043e8 <LL_ADC_SetOffsetState+0x50>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d108      	bne.n	80043cc <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	431a      	orrs	r2, r3
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80043ca:	e007      	b.n	80043dc <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	431a      	orrs	r2, r3
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	601a      	str	r2, [r3, #0]
}
 80043dc:	bf00      	nop
 80043de:	371c      	adds	r7, #28
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	58026000 	.word	0x58026000

080043ec <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004400:	2301      	movs	r3, #1
 8004402:	e000      	b.n	8004406 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004412:	b480      	push	{r7}
 8004414:	b087      	sub	sp, #28
 8004416:	af00      	add	r7, sp, #0
 8004418:	60f8      	str	r0, [r7, #12]
 800441a:	60b9      	str	r1, [r7, #8]
 800441c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	3330      	adds	r3, #48	; 0x30
 8004422:	461a      	mov	r2, r3
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	0a1b      	lsrs	r3, r3, #8
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	f003 030c 	and.w	r3, r3, #12
 800442e:	4413      	add	r3, r2
 8004430:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	f003 031f 	and.w	r3, r3, #31
 800443c:	211f      	movs	r1, #31
 800443e:	fa01 f303 	lsl.w	r3, r1, r3
 8004442:	43db      	mvns	r3, r3
 8004444:	401a      	ands	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	0e9b      	lsrs	r3, r3, #26
 800444a:	f003 011f 	and.w	r1, r3, #31
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	f003 031f 	and.w	r3, r3, #31
 8004454:	fa01 f303 	lsl.w	r3, r1, r3
 8004458:	431a      	orrs	r2, r3
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800445e:	bf00      	nop
 8004460:	371c      	adds	r7, #28
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800446a:	b480      	push	{r7}
 800446c:	b087      	sub	sp, #28
 800446e:	af00      	add	r7, sp, #0
 8004470:	60f8      	str	r0, [r7, #12]
 8004472:	60b9      	str	r1, [r7, #8]
 8004474:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	3314      	adds	r3, #20
 800447a:	461a      	mov	r2, r3
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	0e5b      	lsrs	r3, r3, #25
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	f003 0304 	and.w	r3, r3, #4
 8004486:	4413      	add	r3, r2
 8004488:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	0d1b      	lsrs	r3, r3, #20
 8004492:	f003 031f 	and.w	r3, r3, #31
 8004496:	2107      	movs	r1, #7
 8004498:	fa01 f303 	lsl.w	r3, r1, r3
 800449c:	43db      	mvns	r3, r3
 800449e:	401a      	ands	r2, r3
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	0d1b      	lsrs	r3, r3, #20
 80044a4:	f003 031f 	and.w	r3, r3, #31
 80044a8:	6879      	ldr	r1, [r7, #4]
 80044aa:	fa01 f303 	lsl.w	r3, r1, r3
 80044ae:	431a      	orrs	r2, r3
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80044b4:	bf00      	nop
 80044b6:	371c      	adds	r7, #28
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	4a1a      	ldr	r2, [pc, #104]	; (8004538 <LL_ADC_SetChannelSingleDiff+0x78>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d115      	bne.n	8004500 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044e0:	43db      	mvns	r3, r3
 80044e2:	401a      	ands	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f003 0318 	and.w	r3, r3, #24
 80044ea:	4914      	ldr	r1, [pc, #80]	; (800453c <LL_ADC_SetChannelSingleDiff+0x7c>)
 80044ec:	40d9      	lsrs	r1, r3
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	400b      	ands	r3, r1
 80044f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044f6:	431a      	orrs	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80044fe:	e014      	b.n	800452a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800450c:	43db      	mvns	r3, r3
 800450e:	401a      	ands	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f003 0318 	and.w	r3, r3, #24
 8004516:	4909      	ldr	r1, [pc, #36]	; (800453c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004518:	40d9      	lsrs	r1, r3
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	400b      	ands	r3, r1
 800451e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004522:	431a      	orrs	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 800452a:	bf00      	nop
 800452c:	3714      	adds	r7, #20
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	58026000 	.word	0x58026000
 800453c:	000fffff 	.word	0x000fffff

08004540 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f003 031f 	and.w	r3, r3, #31
}
 8004550:	4618      	mov	r0, r3
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 800456c:	4618      	mov	r0, r3
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689a      	ldr	r2, [r3, #8]
 8004584:	4b04      	ldr	r3, [pc, #16]	; (8004598 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004586:	4013      	ands	r3, r2
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	6093      	str	r3, [r2, #8]
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	5fffffc0 	.word	0x5fffffc0

0800459c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045b0:	d101      	bne.n	80045b6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80045b2:	2301      	movs	r3, #1
 80045b4:	e000      	b.n	80045b8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	4b05      	ldr	r3, [pc, #20]	; (80045e8 <LL_ADC_EnableInternalRegulator+0x24>)
 80045d2:	4013      	ands	r3, r2
 80045d4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr
 80045e8:	6fffffc0 	.word	0x6fffffc0

080045ec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004600:	d101      	bne.n	8004606 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004602:	2301      	movs	r3, #1
 8004604:	e000      	b.n	8004608 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689a      	ldr	r2, [r3, #8]
 8004620:	4b05      	ldr	r3, [pc, #20]	; (8004638 <LL_ADC_Enable+0x24>)
 8004622:	4013      	ands	r3, r2
 8004624:	f043 0201 	orr.w	r2, r3, #1
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr
 8004638:	7fffffc0 	.word	0x7fffffc0

0800463c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689a      	ldr	r2, [r3, #8]
 8004648:	4b05      	ldr	r3, [pc, #20]	; (8004660 <LL_ADC_Disable+0x24>)
 800464a:	4013      	ands	r3, r2
 800464c:	f043 0202 	orr.w	r2, r3, #2
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	7fffffc0 	.word	0x7fffffc0

08004664 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b01      	cmp	r3, #1
 8004676:	d101      	bne.n	800467c <LL_ADC_IsEnabled+0x18>
 8004678:	2301      	movs	r3, #1
 800467a:	e000      	b.n	800467e <LL_ADC_IsEnabled+0x1a>
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800468a:	b480      	push	{r7}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b02      	cmp	r3, #2
 800469c:	d101      	bne.n	80046a2 <LL_ADC_IsDisableOngoing+0x18>
 800469e:	2301      	movs	r3, #1
 80046a0:	e000      	b.n	80046a4 <LL_ADC_IsDisableOngoing+0x1a>
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689a      	ldr	r2, [r3, #8]
 80046bc:	4b05      	ldr	r3, [pc, #20]	; (80046d4 <LL_ADC_REG_StartConversion+0x24>)
 80046be:	4013      	ands	r3, r2
 80046c0:	f043 0204 	orr.w	r2, r3, #4
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr
 80046d4:	7fffffc0 	.word	0x7fffffc0

080046d8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689a      	ldr	r2, [r3, #8]
 80046e4:	4b05      	ldr	r3, [pc, #20]	; (80046fc <LL_ADC_REG_StopConversion+0x24>)
 80046e6:	4013      	ands	r3, r2
 80046e8:	f043 0210 	orr.w	r2, r3, #16
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr
 80046fc:	7fffffc0 	.word	0x7fffffc0

08004700 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b04      	cmp	r3, #4
 8004712:	d101      	bne.n	8004718 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004714:	2301      	movs	r3, #1
 8004716:	e000      	b.n	800471a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
	...

08004728 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689a      	ldr	r2, [r3, #8]
 8004734:	4b05      	ldr	r3, [pc, #20]	; (800474c <LL_ADC_INJ_StopConversion+0x24>)
 8004736:	4013      	ands	r3, r2
 8004738:	f043 0220 	orr.w	r2, r3, #32
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	7fffffc0 	.word	0x7fffffc0

08004750 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f003 0308 	and.w	r3, r3, #8
 8004760:	2b08      	cmp	r3, #8
 8004762:	d101      	bne.n	8004768 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004764:	2301      	movs	r3, #1
 8004766:	e000      	b.n	800476a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
	...

08004778 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004778:	b590      	push	{r4, r7, lr}
 800477a:	b089      	sub	sp, #36	; 0x24
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004780:	2300      	movs	r3, #0
 8004782:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004784:	2300      	movs	r3, #0
 8004786:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e1ee      	b.n	8004b70 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800479c:	2b00      	cmp	r3, #0
 800479e:	d109      	bne.n	80047b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f7fe fb9d 	bl	8002ee0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7ff feef 	bl	800459c <LL_ADC_IsDeepPowerDownEnabled>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d004      	beq.n	80047ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7ff fed5 	bl	8004578 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7ff ff0a 	bl	80045ec <LL_ADC_IsInternalRegulatorEnabled>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d114      	bne.n	8004808 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7ff feee 	bl	80045c4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80047e8:	4b8e      	ldr	r3, [pc, #568]	; (8004a24 <HAL_ADC_Init+0x2ac>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	099b      	lsrs	r3, r3, #6
 80047ee:	4a8e      	ldr	r2, [pc, #568]	; (8004a28 <HAL_ADC_Init+0x2b0>)
 80047f0:	fba2 2303 	umull	r2, r3, r2, r3
 80047f4:	099b      	lsrs	r3, r3, #6
 80047f6:	3301      	adds	r3, #1
 80047f8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80047fa:	e002      	b.n	8004802 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	3b01      	subs	r3, #1
 8004800:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1f9      	bne.n	80047fc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff feed 	bl	80045ec <LL_ADC_IsInternalRegulatorEnabled>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d10d      	bne.n	8004834 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800481c:	f043 0210 	orr.w	r2, r3, #16
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004828:	f043 0201 	orr.w	r2, r3, #1
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4618      	mov	r0, r3
 800483a:	f7ff ff61 	bl	8004700 <LL_ADC_REG_IsConversionOngoing>
 800483e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004844:	f003 0310 	and.w	r3, r3, #16
 8004848:	2b00      	cmp	r3, #0
 800484a:	f040 8188 	bne.w	8004b5e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	2b00      	cmp	r3, #0
 8004852:	f040 8184 	bne.w	8004b5e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800485a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800485e:	f043 0202 	orr.w	r2, r3, #2
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4618      	mov	r0, r3
 800486c:	f7ff fefa 	bl	8004664 <LL_ADC_IsEnabled>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d136      	bne.n	80048e4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a6c      	ldr	r2, [pc, #432]	; (8004a2c <HAL_ADC_Init+0x2b4>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d004      	beq.n	800488a <HAL_ADC_Init+0x112>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a6a      	ldr	r2, [pc, #424]	; (8004a30 <HAL_ADC_Init+0x2b8>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d10e      	bne.n	80048a8 <HAL_ADC_Init+0x130>
 800488a:	4868      	ldr	r0, [pc, #416]	; (8004a2c <HAL_ADC_Init+0x2b4>)
 800488c:	f7ff feea 	bl	8004664 <LL_ADC_IsEnabled>
 8004890:	4604      	mov	r4, r0
 8004892:	4867      	ldr	r0, [pc, #412]	; (8004a30 <HAL_ADC_Init+0x2b8>)
 8004894:	f7ff fee6 	bl	8004664 <LL_ADC_IsEnabled>
 8004898:	4603      	mov	r3, r0
 800489a:	4323      	orrs	r3, r4
 800489c:	2b00      	cmp	r3, #0
 800489e:	bf0c      	ite	eq
 80048a0:	2301      	moveq	r3, #1
 80048a2:	2300      	movne	r3, #0
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	e008      	b.n	80048ba <HAL_ADC_Init+0x142>
 80048a8:	4862      	ldr	r0, [pc, #392]	; (8004a34 <HAL_ADC_Init+0x2bc>)
 80048aa:	f7ff fedb 	bl	8004664 <LL_ADC_IsEnabled>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	bf0c      	ite	eq
 80048b4:	2301      	moveq	r3, #1
 80048b6:	2300      	movne	r3, #0
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d012      	beq.n	80048e4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a5a      	ldr	r2, [pc, #360]	; (8004a2c <HAL_ADC_Init+0x2b4>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d004      	beq.n	80048d2 <HAL_ADC_Init+0x15a>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a58      	ldr	r2, [pc, #352]	; (8004a30 <HAL_ADC_Init+0x2b8>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d101      	bne.n	80048d6 <HAL_ADC_Init+0x15e>
 80048d2:	4a59      	ldr	r2, [pc, #356]	; (8004a38 <HAL_ADC_Init+0x2c0>)
 80048d4:	e000      	b.n	80048d8 <HAL_ADC_Init+0x160>
 80048d6:	4a59      	ldr	r2, [pc, #356]	; (8004a3c <HAL_ADC_Init+0x2c4>)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	4619      	mov	r1, r3
 80048de:	4610      	mov	r0, r2
 80048e0:	f7ff fc5e 	bl	80041a0 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a52      	ldr	r2, [pc, #328]	; (8004a34 <HAL_ADC_Init+0x2bc>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d129      	bne.n	8004942 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	7e5b      	ldrb	r3, [r3, #25]
 80048f2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80048f8:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80048fe:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	2b08      	cmp	r3, #8
 8004906:	d013      	beq.n	8004930 <HAL_ADC_Init+0x1b8>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	2b0c      	cmp	r3, #12
 800490e:	d00d      	beq.n	800492c <HAL_ADC_Init+0x1b4>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	2b1c      	cmp	r3, #28
 8004916:	d007      	beq.n	8004928 <HAL_ADC_Init+0x1b0>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	2b18      	cmp	r3, #24
 800491e:	d101      	bne.n	8004924 <HAL_ADC_Init+0x1ac>
 8004920:	2318      	movs	r3, #24
 8004922:	e006      	b.n	8004932 <HAL_ADC_Init+0x1ba>
 8004924:	2300      	movs	r3, #0
 8004926:	e004      	b.n	8004932 <HAL_ADC_Init+0x1ba>
 8004928:	2310      	movs	r3, #16
 800492a:	e002      	b.n	8004932 <HAL_ADC_Init+0x1ba>
 800492c:	2308      	movs	r3, #8
 800492e:	e000      	b.n	8004932 <HAL_ADC_Init+0x1ba>
 8004930:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8004932:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 3020 	ldrb.w	r3, [r3, #32]
 800493a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800493c:	4313      	orrs	r3, r2
 800493e:	61bb      	str	r3, [r7, #24]
 8004940:	e00e      	b.n	8004960 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	7e5b      	ldrb	r3, [r3, #25]
 8004946:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800494c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004952:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f893 3020 	ldrb.w	r3, [r3, #32]
 800495a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800495c:	4313      	orrs	r3, r2
 800495e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d106      	bne.n	8004978 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496e:	3b01      	subs	r3, #1
 8004970:	045b      	lsls	r3, r3, #17
 8004972:	69ba      	ldr	r2, [r7, #24]
 8004974:	4313      	orrs	r3, r2
 8004976:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497c:	2b00      	cmp	r3, #0
 800497e:	d009      	beq.n	8004994 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004984:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	4313      	orrs	r3, r2
 8004992:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a26      	ldr	r2, [pc, #152]	; (8004a34 <HAL_ADC_Init+0x2bc>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d115      	bne.n	80049ca <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68da      	ldr	r2, [r3, #12]
 80049a4:	4b26      	ldr	r3, [pc, #152]	; (8004a40 <HAL_ADC_Init+0x2c8>)
 80049a6:	4013      	ands	r3, r2
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	6812      	ldr	r2, [r2, #0]
 80049ac:	69b9      	ldr	r1, [r7, #24]
 80049ae:	430b      	orrs	r3, r1
 80049b0:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	430a      	orrs	r2, r1
 80049c6:	611a      	str	r2, [r3, #16]
 80049c8:	e009      	b.n	80049de <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68da      	ldr	r2, [r3, #12]
 80049d0:	4b1c      	ldr	r3, [pc, #112]	; (8004a44 <HAL_ADC_Init+0x2cc>)
 80049d2:	4013      	ands	r3, r2
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	6812      	ldr	r2, [r2, #0]
 80049d8:	69b9      	ldr	r1, [r7, #24]
 80049da:	430b      	orrs	r3, r1
 80049dc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7ff fe8c 	bl	8004700 <LL_ADC_REG_IsConversionOngoing>
 80049e8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7ff feae 	bl	8004750 <LL_ADC_INJ_IsConversionOngoing>
 80049f4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f040 808e 	bne.w	8004b1a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f040 808a 	bne.w	8004b1a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a0a      	ldr	r2, [pc, #40]	; (8004a34 <HAL_ADC_Init+0x2bc>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d11b      	bne.n	8004a48 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	7e1b      	ldrb	r3, [r3, #24]
 8004a14:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a1c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	61bb      	str	r3, [r7, #24]
 8004a22:	e018      	b.n	8004a56 <HAL_ADC_Init+0x2de>
 8004a24:	24000000 	.word	0x24000000
 8004a28:	053e2d63 	.word	0x053e2d63
 8004a2c:	40022000 	.word	0x40022000
 8004a30:	40022100 	.word	0x40022100
 8004a34:	58026000 	.word	0x58026000
 8004a38:	40022300 	.word	0x40022300
 8004a3c:	58026300 	.word	0x58026300
 8004a40:	fff04007 	.word	0xfff04007
 8004a44:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	7e1b      	ldrb	r3, [r3, #24]
 8004a4c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8004a52:	4313      	orrs	r3, r2
 8004a54:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68da      	ldr	r2, [r3, #12]
 8004a5c:	4b46      	ldr	r3, [pc, #280]	; (8004b78 <HAL_ADC_Init+0x400>)
 8004a5e:	4013      	ands	r3, r2
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6812      	ldr	r2, [r2, #0]
 8004a64:	69b9      	ldr	r1, [r7, #24]
 8004a66:	430b      	orrs	r3, r1
 8004a68:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d137      	bne.n	8004ae4 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a78:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a3f      	ldr	r2, [pc, #252]	; (8004b7c <HAL_ADC_Init+0x404>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d116      	bne.n	8004ab2 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	691a      	ldr	r2, [r3, #16]
 8004a8a:	4b3d      	ldr	r3, [pc, #244]	; (8004b80 <HAL_ADC_Init+0x408>)
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004a96:	4311      	orrs	r1, r2
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004a9c:	4311      	orrs	r1, r2
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f042 0201 	orr.w	r2, r2, #1
 8004aae:	611a      	str	r2, [r3, #16]
 8004ab0:	e020      	b.n	8004af4 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	691a      	ldr	r2, [r3, #16]
 8004ab8:	4b32      	ldr	r3, [pc, #200]	; (8004b84 <HAL_ADC_Init+0x40c>)
 8004aba:	4013      	ands	r3, r2
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004ac0:	3a01      	subs	r2, #1
 8004ac2:	0411      	lsls	r1, r2, #16
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004ac8:	4311      	orrs	r1, r2
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004ace:	4311      	orrs	r1, r2
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f042 0201 	orr.w	r2, r2, #1
 8004ae0:	611a      	str	r2, [r3, #16]
 8004ae2:	e007      	b.n	8004af4 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	691a      	ldr	r2, [r3, #16]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f022 0201 	bic.w	r2, r2, #1
 8004af2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a1b      	ldr	r2, [pc, #108]	; (8004b7c <HAL_ADC_Init+0x404>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d002      	beq.n	8004b1a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f001 f909 	bl	8005d2c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d10c      	bne.n	8004b3c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b28:	f023 010f 	bic.w	r1, r3, #15
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	69db      	ldr	r3, [r3, #28]
 8004b30:	1e5a      	subs	r2, r3, #1
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	631a      	str	r2, [r3, #48]	; 0x30
 8004b3a:	e007      	b.n	8004b4c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f022 020f 	bic.w	r2, r2, #15
 8004b4a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b50:	f023 0303 	bic.w	r3, r3, #3
 8004b54:	f043 0201 	orr.w	r2, r3, #1
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	661a      	str	r2, [r3, #96]	; 0x60
 8004b5c:	e007      	b.n	8004b6e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b62:	f043 0210 	orr.w	r2, r3, #16
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004b6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3724      	adds	r7, #36	; 0x24
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd90      	pop	{r4, r7, pc}
 8004b78:	ffffbffc 	.word	0xffffbffc
 8004b7c:	58026000 	.word	0x58026000
 8004b80:	fc00f81f 	.word	0xfc00f81f
 8004b84:	fc00f81e 	.word	0xfc00f81e

08004b88 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a5c      	ldr	r2, [pc, #368]	; (8004d08 <HAL_ADC_Start+0x180>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d004      	beq.n	8004ba4 <HAL_ADC_Start+0x1c>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a5b      	ldr	r2, [pc, #364]	; (8004d0c <HAL_ADC_Start+0x184>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d101      	bne.n	8004ba8 <HAL_ADC_Start+0x20>
 8004ba4:	4b5a      	ldr	r3, [pc, #360]	; (8004d10 <HAL_ADC_Start+0x188>)
 8004ba6:	e000      	b.n	8004baa <HAL_ADC_Start+0x22>
 8004ba8:	4b5a      	ldr	r3, [pc, #360]	; (8004d14 <HAL_ADC_Start+0x18c>)
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7ff fcc8 	bl	8004540 <LL_ADC_GetMultimode>
 8004bb0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7ff fda2 	bl	8004700 <LL_ADC_REG_IsConversionOngoing>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f040 809a 	bne.w	8004cf8 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d101      	bne.n	8004bd2 <HAL_ADC_Start+0x4a>
 8004bce:	2302      	movs	r3, #2
 8004bd0:	e095      	b.n	8004cfe <HAL_ADC_Start+0x176>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 ffbc 	bl	8005b58 <ADC_Enable>
 8004be0:	4603      	mov	r3, r0
 8004be2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004be4:	7dfb      	ldrb	r3, [r7, #23]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	f040 8081 	bne.w	8004cee <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004bf0:	4b49      	ldr	r3, [pc, #292]	; (8004d18 <HAL_ADC_Start+0x190>)
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a42      	ldr	r2, [pc, #264]	; (8004d0c <HAL_ADC_Start+0x184>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d002      	beq.n	8004c0c <HAL_ADC_Start+0x84>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	e000      	b.n	8004c0e <HAL_ADC_Start+0x86>
 8004c0c:	4b3e      	ldr	r3, [pc, #248]	; (8004d08 <HAL_ADC_Start+0x180>)
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	6812      	ldr	r2, [r2, #0]
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d002      	beq.n	8004c1c <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d105      	bne.n	8004c28 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c20:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c34:	d106      	bne.n	8004c44 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c3a:	f023 0206 	bic.w	r2, r3, #6
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	665a      	str	r2, [r3, #100]	; 0x64
 8004c42:	e002      	b.n	8004c4a <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	221c      	movs	r2, #28
 8004c50:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a2b      	ldr	r2, [pc, #172]	; (8004d0c <HAL_ADC_Start+0x184>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d002      	beq.n	8004c6a <HAL_ADC_Start+0xe2>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	e000      	b.n	8004c6c <HAL_ADC_Start+0xe4>
 8004c6a:	4b27      	ldr	r3, [pc, #156]	; (8004d08 <HAL_ADC_Start+0x180>)
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	6812      	ldr	r2, [r2, #0]
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d008      	beq.n	8004c86 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d005      	beq.n	8004c86 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	2b05      	cmp	r3, #5
 8004c7e:	d002      	beq.n	8004c86 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	2b09      	cmp	r3, #9
 8004c84:	d114      	bne.n	8004cb0 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d007      	beq.n	8004ca4 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c98:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004c9c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7ff fd01 	bl	80046b0 <LL_ADC_REG_StartConversion>
 8004cae:	e025      	b.n	8004cfc <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cb4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a12      	ldr	r2, [pc, #72]	; (8004d0c <HAL_ADC_Start+0x184>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d002      	beq.n	8004ccc <HAL_ADC_Start+0x144>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	e000      	b.n	8004cce <HAL_ADC_Start+0x146>
 8004ccc:	4b0e      	ldr	r3, [pc, #56]	; (8004d08 <HAL_ADC_Start+0x180>)
 8004cce:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00f      	beq.n	8004cfc <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ce0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004ce4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	661a      	str	r2, [r3, #96]	; 0x60
 8004cec:	e006      	b.n	8004cfc <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8004cf6:	e001      	b.n	8004cfc <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3718      	adds	r7, #24
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	40022000 	.word	0x40022000
 8004d0c:	40022100 	.word	0x40022100
 8004d10:	40022300 	.word	0x40022300
 8004d14:	58026300 	.word	0x58026300
 8004d18:	fffff0fe 	.word	0xfffff0fe

08004d1c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d101      	bne.n	8004d32 <HAL_ADC_Stop+0x16>
 8004d2e:	2302      	movs	r3, #2
 8004d30:	e021      	b.n	8004d76 <HAL_ADC_Stop+0x5a>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004d3a:	2103      	movs	r1, #3
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 fe4f 	bl	80059e0 <ADC_ConversionStop>
 8004d42:	4603      	mov	r3, r0
 8004d44:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004d46:	7bfb      	ldrb	r3, [r7, #15]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10f      	bne.n	8004d6c <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 ff8d 	bl	8005c6c <ADC_Disable>
 8004d52:	4603      	mov	r3, r0
 8004d54:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004d56:	7bfb      	ldrb	r3, [r7, #15]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d107      	bne.n	8004d6c <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004d60:	4b07      	ldr	r3, [pc, #28]	; (8004d80 <HAL_ADC_Stop+0x64>)
 8004d62:	4013      	ands	r3, r2
 8004d64:	f043 0201 	orr.w	r2, r3, #1
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	ffffeefe 	.word	0xffffeefe

08004d84 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b088      	sub	sp, #32
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a72      	ldr	r2, [pc, #456]	; (8004f5c <HAL_ADC_PollForConversion+0x1d8>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d004      	beq.n	8004da2 <HAL_ADC_PollForConversion+0x1e>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a70      	ldr	r2, [pc, #448]	; (8004f60 <HAL_ADC_PollForConversion+0x1dc>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d101      	bne.n	8004da6 <HAL_ADC_PollForConversion+0x22>
 8004da2:	4b70      	ldr	r3, [pc, #448]	; (8004f64 <HAL_ADC_PollForConversion+0x1e0>)
 8004da4:	e000      	b.n	8004da8 <HAL_ADC_PollForConversion+0x24>
 8004da6:	4b70      	ldr	r3, [pc, #448]	; (8004f68 <HAL_ADC_PollForConversion+0x1e4>)
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7ff fbc9 	bl	8004540 <LL_ADC_GetMultimode>
 8004dae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	2b08      	cmp	r3, #8
 8004db6:	d102      	bne.n	8004dbe <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8004db8:	2308      	movs	r3, #8
 8004dba:	61fb      	str	r3, [r7, #28]
 8004dbc:	e037      	b.n	8004e2e <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d005      	beq.n	8004dd0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	2b05      	cmp	r3, #5
 8004dc8:	d002      	beq.n	8004dd0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	2b09      	cmp	r3, #9
 8004dce:	d111      	bne.n	8004df4 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d007      	beq.n	8004dee <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004de2:	f043 0220 	orr.w	r2, r3, #32
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e0b1      	b.n	8004f52 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004dee:	2304      	movs	r3, #4
 8004df0:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8004df2:	e01c      	b.n	8004e2e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a58      	ldr	r2, [pc, #352]	; (8004f5c <HAL_ADC_PollForConversion+0x1d8>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d004      	beq.n	8004e08 <HAL_ADC_PollForConversion+0x84>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a57      	ldr	r2, [pc, #348]	; (8004f60 <HAL_ADC_PollForConversion+0x1dc>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d101      	bne.n	8004e0c <HAL_ADC_PollForConversion+0x88>
 8004e08:	4b56      	ldr	r3, [pc, #344]	; (8004f64 <HAL_ADC_PollForConversion+0x1e0>)
 8004e0a:	e000      	b.n	8004e0e <HAL_ADC_PollForConversion+0x8a>
 8004e0c:	4b56      	ldr	r3, [pc, #344]	; (8004f68 <HAL_ADC_PollForConversion+0x1e4>)
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7ff fba4 	bl	800455c <LL_ADC_GetMultiDMATransfer>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d007      	beq.n	8004e2a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e1e:	f043 0220 	orr.w	r2, r3, #32
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e093      	b.n	8004f52 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004e2a:	2304      	movs	r3, #4
 8004e2c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004e2e:	f7ff f971 	bl	8004114 <HAL_GetTick>
 8004e32:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004e34:	e021      	b.n	8004e7a <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e3c:	d01d      	beq.n	8004e7a <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004e3e:	f7ff f969 	bl	8004114 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	683a      	ldr	r2, [r7, #0]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d302      	bcc.n	8004e54 <HAL_ADC_PollForConversion+0xd0>
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d112      	bne.n	8004e7a <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10b      	bne.n	8004e7a <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e66:	f043 0204 	orr.w	r2, r3, #4
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	661a      	str	r2, [r3, #96]	; 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

          return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e06b      	b.n	8004f52 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	4013      	ands	r3, r2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d0d6      	beq.n	8004e36 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e8c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	661a      	str	r2, [r3, #96]	; 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7ff faa7 	bl	80043ec <LL_ADC_REG_IsTriggerSourceSWStart>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d01c      	beq.n	8004ede <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	7e5b      	ldrb	r3, [r3, #25]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d118      	bne.n	8004ede <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0308 	and.w	r3, r3, #8
 8004eb6:	2b08      	cmp	r3, #8
 8004eb8:	d111      	bne.n	8004ede <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ebe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	661a      	str	r2, [r3, #96]	; 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d105      	bne.n	8004ede <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ed6:	f043 0201 	orr.w	r2, r3, #1
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a1f      	ldr	r2, [pc, #124]	; (8004f60 <HAL_ADC_PollForConversion+0x1dc>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d002      	beq.n	8004eee <HAL_ADC_PollForConversion+0x16a>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	e000      	b.n	8004ef0 <HAL_ADC_PollForConversion+0x16c>
 8004eee:	4b1b      	ldr	r3, [pc, #108]	; (8004f5c <HAL_ADC_PollForConversion+0x1d8>)
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	6812      	ldr	r2, [r2, #0]
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d008      	beq.n	8004f0a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d005      	beq.n	8004f0a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	2b05      	cmp	r3, #5
 8004f02:	d002      	beq.n	8004f0a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	2b09      	cmp	r3, #9
 8004f08:	d104      	bne.n	8004f14 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	61bb      	str	r3, [r7, #24]
 8004f12:	e00c      	b.n	8004f2e <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a11      	ldr	r2, [pc, #68]	; (8004f60 <HAL_ADC_PollForConversion+0x1dc>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d002      	beq.n	8004f24 <HAL_ADC_PollForConversion+0x1a0>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	e000      	b.n	8004f26 <HAL_ADC_PollForConversion+0x1a2>
 8004f24:	4b0d      	ldr	r3, [pc, #52]	; (8004f5c <HAL_ADC_PollForConversion+0x1d8>)
 8004f26:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	2b08      	cmp	r3, #8
 8004f32:	d104      	bne.n	8004f3e <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2208      	movs	r2, #8
 8004f3a:	601a      	str	r2, [r3, #0]
 8004f3c:	e008      	b.n	8004f50 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d103      	bne.n	8004f50 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	220c      	movs	r2, #12
 8004f4e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3720      	adds	r7, #32
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	40022000 	.word	0x40022000
 8004f60:	40022100 	.word	0x40022100
 8004f64:	40022300 	.word	0x40022300
 8004f68:	58026300 	.word	0x58026300

08004f6c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
	...

08004f88 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004f88:	b590      	push	{r4, r7, lr}
 8004f8a:	b0b9      	sub	sp, #228	; 0xe4
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f92:	2300      	movs	r3, #0
 8004f94:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fa2:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	4aa9      	ldr	r2, [pc, #676]	; (8005250 <HAL_ADC_ConfigChannel+0x2c8>)
 8004faa:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d102      	bne.n	8004fbc <HAL_ADC_ConfigChannel+0x34>
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	f000 bcfa 	b.w	80059b0 <HAL_ADC_ConfigChannel+0xa28>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7ff fb99 	bl	8004700 <LL_ADC_REG_IsConversionOngoing>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f040 84de 	bne.w	8005992 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a9e      	ldr	r2, [pc, #632]	; (8005254 <HAL_ADC_ConfigChannel+0x2cc>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d033      	beq.n	8005048 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d108      	bne.n	8004ffe <HAL_ADC_ConfigChannel+0x76>
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	0e9b      	lsrs	r3, r3, #26
 8004ff2:	f003 031f 	and.w	r3, r3, #31
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffc:	e01d      	b.n	800503a <HAL_ADC_ConfigChannel+0xb2>
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005006:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800500a:	fa93 f3a3 	rbit	r3, r3
 800500e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005012:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005016:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800501a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8005022:	2320      	movs	r3, #32
 8005024:	e004      	b.n	8005030 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8005026:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800502a:	fab3 f383 	clz	r3, r3
 800502e:	b2db      	uxtb	r3, r3
 8005030:	f003 031f 	and.w	r3, r3, #31
 8005034:	2201      	movs	r2, #1
 8005036:	fa02 f303 	lsl.w	r3, r2, r3
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	6812      	ldr	r2, [r2, #0]
 800503e:	69d1      	ldr	r1, [r2, #28]
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	6812      	ldr	r2, [r2, #0]
 8005044:	430b      	orrs	r3, r1
 8005046:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6818      	ldr	r0, [r3, #0]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	6859      	ldr	r1, [r3, #4]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	461a      	mov	r2, r3
 8005056:	f7ff f9dc 	bl	8004412 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4618      	mov	r0, r3
 8005060:	f7ff fb4e 	bl	8004700 <LL_ADC_REG_IsConversionOngoing>
 8005064:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4618      	mov	r0, r3
 800506e:	f7ff fb6f 	bl	8004750 <LL_ADC_INJ_IsConversionOngoing>
 8005072:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005076:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800507a:	2b00      	cmp	r3, #0
 800507c:	f040 8270 	bne.w	8005560 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005080:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005084:	2b00      	cmp	r3, #0
 8005086:	f040 826b 	bne.w	8005560 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6818      	ldr	r0, [r3, #0]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	6819      	ldr	r1, [r3, #0]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	461a      	mov	r2, r3
 8005098:	f7ff f9e7 	bl	800446a <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a6c      	ldr	r2, [pc, #432]	; (8005254 <HAL_ADC_ConfigChannel+0x2cc>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d10d      	bne.n	80050c2 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	695a      	ldr	r2, [r3, #20]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	08db      	lsrs	r3, r3, #3
 80050b2:	f003 0303 	and.w	r3, r3, #3
 80050b6:	005b      	lsls	r3, r3, #1
 80050b8:	fa02 f303 	lsl.w	r3, r2, r3
 80050bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80050c0:	e032      	b.n	8005128 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80050c2:	4b65      	ldr	r3, [pc, #404]	; (8005258 <HAL_ADC_ConfigChannel+0x2d0>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80050ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050ce:	d10b      	bne.n	80050e8 <HAL_ADC_ConfigChannel+0x160>
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	695a      	ldr	r2, [r3, #20]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	089b      	lsrs	r3, r3, #2
 80050dc:	f003 0307 	and.w	r3, r3, #7
 80050e0:	005b      	lsls	r3, r3, #1
 80050e2:	fa02 f303 	lsl.w	r3, r2, r3
 80050e6:	e01d      	b.n	8005124 <HAL_ADC_ConfigChannel+0x19c>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	f003 0310 	and.w	r3, r3, #16
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10b      	bne.n	800510e <HAL_ADC_ConfigChannel+0x186>
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	695a      	ldr	r2, [r3, #20]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	089b      	lsrs	r3, r3, #2
 8005102:	f003 0307 	and.w	r3, r3, #7
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	fa02 f303 	lsl.w	r3, r2, r3
 800510c:	e00a      	b.n	8005124 <HAL_ADC_ConfigChannel+0x19c>
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	695a      	ldr	r2, [r3, #20]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	089b      	lsrs	r3, r3, #2
 800511a:	f003 0304 	and.w	r3, r3, #4
 800511e:	005b      	lsls	r3, r3, #1
 8005120:	fa02 f303 	lsl.w	r3, r2, r3
 8005124:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	2b04      	cmp	r3, #4
 800512e:	d048      	beq.n	80051c2 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6818      	ldr	r0, [r3, #0]
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	6919      	ldr	r1, [r3, #16]
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005140:	f7ff f862 	bl	8004208 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a42      	ldr	r2, [pc, #264]	; (8005254 <HAL_ADC_ConfigChannel+0x2cc>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d119      	bne.n	8005182 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6818      	ldr	r0, [r3, #0]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	6919      	ldr	r1, [r3, #16]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	69db      	ldr	r3, [r3, #28]
 800515a:	461a      	mov	r2, r3
 800515c:	f7ff f8fa 	bl	8004354 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6818      	ldr	r0, [r3, #0]
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	6919      	ldr	r1, [r3, #16]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d102      	bne.n	8005178 <HAL_ADC_ConfigChannel+0x1f0>
 8005172:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005176:	e000      	b.n	800517a <HAL_ADC_ConfigChannel+0x1f2>
 8005178:	2300      	movs	r3, #0
 800517a:	461a      	mov	r2, r3
 800517c:	f7ff f8c8 	bl	8004310 <LL_ADC_SetOffsetSaturation>
 8005180:	e1ee      	b.n	8005560 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6818      	ldr	r0, [r3, #0]
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	6919      	ldr	r1, [r3, #16]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005190:	2b01      	cmp	r3, #1
 8005192:	d102      	bne.n	800519a <HAL_ADC_ConfigChannel+0x212>
 8005194:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005198:	e000      	b.n	800519c <HAL_ADC_ConfigChannel+0x214>
 800519a:	2300      	movs	r3, #0
 800519c:	461a      	mov	r2, r3
 800519e:	f7ff f895 	bl	80042cc <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6818      	ldr	r0, [r3, #0]
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	6919      	ldr	r1, [r3, #16]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	7e1b      	ldrb	r3, [r3, #24]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d102      	bne.n	80051b8 <HAL_ADC_ConfigChannel+0x230>
 80051b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80051b6:	e000      	b.n	80051ba <HAL_ADC_ConfigChannel+0x232>
 80051b8:	2300      	movs	r3, #0
 80051ba:	461a      	mov	r2, r3
 80051bc:	f7ff f86c 	bl	8004298 <LL_ADC_SetDataRightShift>
 80051c0:	e1ce      	b.n	8005560 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a23      	ldr	r2, [pc, #140]	; (8005254 <HAL_ADC_ConfigChannel+0x2cc>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	f040 8181 	bne.w	80054d0 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2100      	movs	r1, #0
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7ff f849 	bl	800426c <LL_ADC_GetOffsetChannel>
 80051da:	4603      	mov	r3, r0
 80051dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d10a      	bne.n	80051fa <HAL_ADC_ConfigChannel+0x272>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2100      	movs	r1, #0
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7ff f83e 	bl	800426c <LL_ADC_GetOffsetChannel>
 80051f0:	4603      	mov	r3, r0
 80051f2:	0e9b      	lsrs	r3, r3, #26
 80051f4:	f003 021f 	and.w	r2, r3, #31
 80051f8:	e01e      	b.n	8005238 <HAL_ADC_ConfigChannel+0x2b0>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2100      	movs	r1, #0
 8005200:	4618      	mov	r0, r3
 8005202:	f7ff f833 	bl	800426c <LL_ADC_GetOffsetChannel>
 8005206:	4603      	mov	r3, r0
 8005208:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800520c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005210:	fa93 f3a3 	rbit	r3, r3
 8005214:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8005218:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800521c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8005220:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005224:	2b00      	cmp	r3, #0
 8005226:	d101      	bne.n	800522c <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8005228:	2320      	movs	r3, #32
 800522a:	e004      	b.n	8005236 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 800522c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005230:	fab3 f383 	clz	r3, r3
 8005234:	b2db      	uxtb	r3, r3
 8005236:	461a      	mov	r2, r3
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10b      	bne.n	800525c <HAL_ADC_ConfigChannel+0x2d4>
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	0e9b      	lsrs	r3, r3, #26
 800524a:	f003 031f 	and.w	r3, r3, #31
 800524e:	e01e      	b.n	800528e <HAL_ADC_ConfigChannel+0x306>
 8005250:	47ff0000 	.word	0x47ff0000
 8005254:	58026000 	.word	0x58026000
 8005258:	5c001000 	.word	0x5c001000
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005264:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005268:	fa93 f3a3 	rbit	r3, r3
 800526c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8005270:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005274:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8005278:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d101      	bne.n	8005284 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8005280:	2320      	movs	r3, #32
 8005282:	e004      	b.n	800528e <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8005284:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005288:	fab3 f383 	clz	r3, r3
 800528c:	b2db      	uxtb	r3, r3
 800528e:	429a      	cmp	r2, r3
 8005290:	d106      	bne.n	80052a0 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2200      	movs	r2, #0
 8005298:	2100      	movs	r1, #0
 800529a:	4618      	mov	r0, r3
 800529c:	f7ff f87c 	bl	8004398 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2101      	movs	r1, #1
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7fe ffe0 	bl	800426c <LL_ADC_GetOffsetChannel>
 80052ac:	4603      	mov	r3, r0
 80052ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10a      	bne.n	80052cc <HAL_ADC_ConfigChannel+0x344>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2101      	movs	r1, #1
 80052bc:	4618      	mov	r0, r3
 80052be:	f7fe ffd5 	bl	800426c <LL_ADC_GetOffsetChannel>
 80052c2:	4603      	mov	r3, r0
 80052c4:	0e9b      	lsrs	r3, r3, #26
 80052c6:	f003 021f 	and.w	r2, r3, #31
 80052ca:	e01e      	b.n	800530a <HAL_ADC_ConfigChannel+0x382>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2101      	movs	r1, #1
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7fe ffca 	bl	800426c <LL_ADC_GetOffsetChannel>
 80052d8:	4603      	mov	r3, r0
 80052da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80052e2:	fa93 f3a3 	rbit	r3, r3
 80052e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80052ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80052f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 80052fa:	2320      	movs	r3, #32
 80052fc:	e004      	b.n	8005308 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 80052fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005302:	fab3 f383 	clz	r3, r3
 8005306:	b2db      	uxtb	r3, r3
 8005308:	461a      	mov	r2, r3
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005312:	2b00      	cmp	r3, #0
 8005314:	d105      	bne.n	8005322 <HAL_ADC_ConfigChannel+0x39a>
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	0e9b      	lsrs	r3, r3, #26
 800531c:	f003 031f 	and.w	r3, r3, #31
 8005320:	e018      	b.n	8005354 <HAL_ADC_ConfigChannel+0x3cc>
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800532a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800532e:	fa93 f3a3 	rbit	r3, r3
 8005332:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8005336:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800533a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800533e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005342:	2b00      	cmp	r3, #0
 8005344:	d101      	bne.n	800534a <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8005346:	2320      	movs	r3, #32
 8005348:	e004      	b.n	8005354 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 800534a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800534e:	fab3 f383 	clz	r3, r3
 8005352:	b2db      	uxtb	r3, r3
 8005354:	429a      	cmp	r2, r3
 8005356:	d106      	bne.n	8005366 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2200      	movs	r2, #0
 800535e:	2101      	movs	r1, #1
 8005360:	4618      	mov	r0, r3
 8005362:	f7ff f819 	bl	8004398 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2102      	movs	r1, #2
 800536c:	4618      	mov	r0, r3
 800536e:	f7fe ff7d 	bl	800426c <LL_ADC_GetOffsetChannel>
 8005372:	4603      	mov	r3, r0
 8005374:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005378:	2b00      	cmp	r3, #0
 800537a:	d10a      	bne.n	8005392 <HAL_ADC_ConfigChannel+0x40a>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2102      	movs	r1, #2
 8005382:	4618      	mov	r0, r3
 8005384:	f7fe ff72 	bl	800426c <LL_ADC_GetOffsetChannel>
 8005388:	4603      	mov	r3, r0
 800538a:	0e9b      	lsrs	r3, r3, #26
 800538c:	f003 021f 	and.w	r2, r3, #31
 8005390:	e01e      	b.n	80053d0 <HAL_ADC_ConfigChannel+0x448>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2102      	movs	r1, #2
 8005398:	4618      	mov	r0, r3
 800539a:	f7fe ff67 	bl	800426c <LL_ADC_GetOffsetChannel>
 800539e:	4603      	mov	r3, r0
 80053a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053a8:	fa93 f3a3 	rbit	r3, r3
 80053ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80053b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80053b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d101      	bne.n	80053c4 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 80053c0:	2320      	movs	r3, #32
 80053c2:	e004      	b.n	80053ce <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 80053c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053c8:	fab3 f383 	clz	r3, r3
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	461a      	mov	r2, r3
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d105      	bne.n	80053e8 <HAL_ADC_ConfigChannel+0x460>
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	0e9b      	lsrs	r3, r3, #26
 80053e2:	f003 031f 	and.w	r3, r3, #31
 80053e6:	e014      	b.n	8005412 <HAL_ADC_ConfigChannel+0x48a>
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053f0:	fa93 f3a3 	rbit	r3, r3
 80053f4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80053f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80053fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005400:	2b00      	cmp	r3, #0
 8005402:	d101      	bne.n	8005408 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8005404:	2320      	movs	r3, #32
 8005406:	e004      	b.n	8005412 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8005408:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800540c:	fab3 f383 	clz	r3, r3
 8005410:	b2db      	uxtb	r3, r3
 8005412:	429a      	cmp	r2, r3
 8005414:	d106      	bne.n	8005424 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2200      	movs	r2, #0
 800541c:	2102      	movs	r1, #2
 800541e:	4618      	mov	r0, r3
 8005420:	f7fe ffba 	bl	8004398 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2103      	movs	r1, #3
 800542a:	4618      	mov	r0, r3
 800542c:	f7fe ff1e 	bl	800426c <LL_ADC_GetOffsetChannel>
 8005430:	4603      	mov	r3, r0
 8005432:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10a      	bne.n	8005450 <HAL_ADC_ConfigChannel+0x4c8>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2103      	movs	r1, #3
 8005440:	4618      	mov	r0, r3
 8005442:	f7fe ff13 	bl	800426c <LL_ADC_GetOffsetChannel>
 8005446:	4603      	mov	r3, r0
 8005448:	0e9b      	lsrs	r3, r3, #26
 800544a:	f003 021f 	and.w	r2, r3, #31
 800544e:	e017      	b.n	8005480 <HAL_ADC_ConfigChannel+0x4f8>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2103      	movs	r1, #3
 8005456:	4618      	mov	r0, r3
 8005458:	f7fe ff08 	bl	800426c <LL_ADC_GetOffsetChannel>
 800545c:	4603      	mov	r3, r0
 800545e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005460:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005462:	fa93 f3a3 	rbit	r3, r3
 8005466:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800546a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800546c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800546e:	2b00      	cmp	r3, #0
 8005470:	d101      	bne.n	8005476 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8005472:	2320      	movs	r3, #32
 8005474:	e003      	b.n	800547e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8005476:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005478:	fab3 f383 	clz	r3, r3
 800547c:	b2db      	uxtb	r3, r3
 800547e:	461a      	mov	r2, r3
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005488:	2b00      	cmp	r3, #0
 800548a:	d105      	bne.n	8005498 <HAL_ADC_ConfigChannel+0x510>
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	0e9b      	lsrs	r3, r3, #26
 8005492:	f003 031f 	and.w	r3, r3, #31
 8005496:	e011      	b.n	80054bc <HAL_ADC_ConfigChannel+0x534>
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800549e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054a0:	fa93 f3a3 	rbit	r3, r3
 80054a4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80054a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054a8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80054aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d101      	bne.n	80054b4 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 80054b0:	2320      	movs	r3, #32
 80054b2:	e003      	b.n	80054bc <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 80054b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054b6:	fab3 f383 	clz	r3, r3
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	429a      	cmp	r2, r3
 80054be:	d14f      	bne.n	8005560 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2200      	movs	r2, #0
 80054c6:	2103      	movs	r1, #3
 80054c8:	4618      	mov	r0, r3
 80054ca:	f7fe ff65 	bl	8004398 <LL_ADC_SetOffsetState>
 80054ce:	e047      	b.n	8005560 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	069b      	lsls	r3, r3, #26
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d107      	bne.n	80054f4 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80054f2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	069b      	lsls	r3, r3, #26
 8005504:	429a      	cmp	r2, r3
 8005506:	d107      	bne.n	8005518 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005516:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800551e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	069b      	lsls	r3, r3, #26
 8005528:	429a      	cmp	r2, r3
 800552a:	d107      	bne.n	800553c <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800553a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005542:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	069b      	lsls	r3, r3, #26
 800554c:	429a      	cmp	r2, r3
 800554e:	d107      	bne.n	8005560 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800555e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4618      	mov	r0, r3
 8005566:	f7ff f87d 	bl	8004664 <LL_ADC_IsEnabled>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	f040 8219 	bne.w	80059a4 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6818      	ldr	r0, [r3, #0]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	6819      	ldr	r1, [r3, #0]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	461a      	mov	r2, r3
 8005580:	f7fe ff9e 	bl	80044c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	4aa1      	ldr	r2, [pc, #644]	; (8005810 <HAL_ADC_ConfigChannel+0x888>)
 800558a:	4293      	cmp	r3, r2
 800558c:	f040 812e 	bne.w	80057ec <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800559c:	2b00      	cmp	r3, #0
 800559e:	d10b      	bne.n	80055b8 <HAL_ADC_ConfigChannel+0x630>
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	0e9b      	lsrs	r3, r3, #26
 80055a6:	3301      	adds	r3, #1
 80055a8:	f003 031f 	and.w	r3, r3, #31
 80055ac:	2b09      	cmp	r3, #9
 80055ae:	bf94      	ite	ls
 80055b0:	2301      	movls	r3, #1
 80055b2:	2300      	movhi	r3, #0
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	e019      	b.n	80055ec <HAL_ADC_ConfigChannel+0x664>
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055c0:	fa93 f3a3 	rbit	r3, r3
 80055c4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80055c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80055ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d101      	bne.n	80055d4 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80055d0:	2320      	movs	r3, #32
 80055d2:	e003      	b.n	80055dc <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80055d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055d6:	fab3 f383 	clz	r3, r3
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	3301      	adds	r3, #1
 80055de:	f003 031f 	and.w	r3, r3, #31
 80055e2:	2b09      	cmp	r3, #9
 80055e4:	bf94      	ite	ls
 80055e6:	2301      	movls	r3, #1
 80055e8:	2300      	movhi	r3, #0
 80055ea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d079      	beq.n	80056e4 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d107      	bne.n	800560c <HAL_ADC_ConfigChannel+0x684>
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	0e9b      	lsrs	r3, r3, #26
 8005602:	3301      	adds	r3, #1
 8005604:	069b      	lsls	r3, r3, #26
 8005606:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800560a:	e015      	b.n	8005638 <HAL_ADC_ConfigChannel+0x6b0>
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005614:	fa93 f3a3 	rbit	r3, r3
 8005618:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800561a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800561c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800561e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005620:	2b00      	cmp	r3, #0
 8005622:	d101      	bne.n	8005628 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8005624:	2320      	movs	r3, #32
 8005626:	e003      	b.n	8005630 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8005628:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800562a:	fab3 f383 	clz	r3, r3
 800562e:	b2db      	uxtb	r3, r3
 8005630:	3301      	adds	r3, #1
 8005632:	069b      	lsls	r3, r3, #26
 8005634:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005640:	2b00      	cmp	r3, #0
 8005642:	d109      	bne.n	8005658 <HAL_ADC_ConfigChannel+0x6d0>
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	0e9b      	lsrs	r3, r3, #26
 800564a:	3301      	adds	r3, #1
 800564c:	f003 031f 	and.w	r3, r3, #31
 8005650:	2101      	movs	r1, #1
 8005652:	fa01 f303 	lsl.w	r3, r1, r3
 8005656:	e017      	b.n	8005688 <HAL_ADC_ConfigChannel+0x700>
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800565e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005660:	fa93 f3a3 	rbit	r3, r3
 8005664:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8005666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005668:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800566a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8005670:	2320      	movs	r3, #32
 8005672:	e003      	b.n	800567c <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8005674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005676:	fab3 f383 	clz	r3, r3
 800567a:	b2db      	uxtb	r3, r3
 800567c:	3301      	adds	r3, #1
 800567e:	f003 031f 	and.w	r3, r3, #31
 8005682:	2101      	movs	r1, #1
 8005684:	fa01 f303 	lsl.w	r3, r1, r3
 8005688:	ea42 0103 	orr.w	r1, r2, r3
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10a      	bne.n	80056ae <HAL_ADC_ConfigChannel+0x726>
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	0e9b      	lsrs	r3, r3, #26
 800569e:	3301      	adds	r3, #1
 80056a0:	f003 021f 	and.w	r2, r3, #31
 80056a4:	4613      	mov	r3, r2
 80056a6:	005b      	lsls	r3, r3, #1
 80056a8:	4413      	add	r3, r2
 80056aa:	051b      	lsls	r3, r3, #20
 80056ac:	e018      	b.n	80056e0 <HAL_ADC_ConfigChannel+0x758>
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b6:	fa93 f3a3 	rbit	r3, r3
 80056ba:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80056bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056be:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80056c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 80056c6:	2320      	movs	r3, #32
 80056c8:	e003      	b.n	80056d2 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 80056ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056cc:	fab3 f383 	clz	r3, r3
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	3301      	adds	r3, #1
 80056d4:	f003 021f 	and.w	r2, r3, #31
 80056d8:	4613      	mov	r3, r2
 80056da:	005b      	lsls	r3, r3, #1
 80056dc:	4413      	add	r3, r2
 80056de:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80056e0:	430b      	orrs	r3, r1
 80056e2:	e07e      	b.n	80057e2 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d107      	bne.n	8005700 <HAL_ADC_ConfigChannel+0x778>
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	0e9b      	lsrs	r3, r3, #26
 80056f6:	3301      	adds	r3, #1
 80056f8:	069b      	lsls	r3, r3, #26
 80056fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80056fe:	e015      	b.n	800572c <HAL_ADC_ConfigChannel+0x7a4>
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005708:	fa93 f3a3 	rbit	r3, r3
 800570c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800570e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005710:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8005718:	2320      	movs	r3, #32
 800571a:	e003      	b.n	8005724 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 800571c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571e:	fab3 f383 	clz	r3, r3
 8005722:	b2db      	uxtb	r3, r3
 8005724:	3301      	adds	r3, #1
 8005726:	069b      	lsls	r3, r3, #26
 8005728:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005734:	2b00      	cmp	r3, #0
 8005736:	d109      	bne.n	800574c <HAL_ADC_ConfigChannel+0x7c4>
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	0e9b      	lsrs	r3, r3, #26
 800573e:	3301      	adds	r3, #1
 8005740:	f003 031f 	and.w	r3, r3, #31
 8005744:	2101      	movs	r1, #1
 8005746:	fa01 f303 	lsl.w	r3, r1, r3
 800574a:	e017      	b.n	800577c <HAL_ADC_ConfigChannel+0x7f4>
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	fa93 f3a3 	rbit	r3, r3
 8005758:	61bb      	str	r3, [r7, #24]
  return result;
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800575e:	6a3b      	ldr	r3, [r7, #32]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8005764:	2320      	movs	r3, #32
 8005766:	e003      	b.n	8005770 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8005768:	6a3b      	ldr	r3, [r7, #32]
 800576a:	fab3 f383 	clz	r3, r3
 800576e:	b2db      	uxtb	r3, r3
 8005770:	3301      	adds	r3, #1
 8005772:	f003 031f 	and.w	r3, r3, #31
 8005776:	2101      	movs	r1, #1
 8005778:	fa01 f303 	lsl.w	r3, r1, r3
 800577c:	ea42 0103 	orr.w	r1, r2, r3
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005788:	2b00      	cmp	r3, #0
 800578a:	d10d      	bne.n	80057a8 <HAL_ADC_ConfigChannel+0x820>
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	0e9b      	lsrs	r3, r3, #26
 8005792:	3301      	adds	r3, #1
 8005794:	f003 021f 	and.w	r2, r3, #31
 8005798:	4613      	mov	r3, r2
 800579a:	005b      	lsls	r3, r3, #1
 800579c:	4413      	add	r3, r2
 800579e:	3b1e      	subs	r3, #30
 80057a0:	051b      	lsls	r3, r3, #20
 80057a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80057a6:	e01b      	b.n	80057e0 <HAL_ADC_ConfigChannel+0x858>
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	fa93 f3a3 	rbit	r3, r3
 80057b4:	60fb      	str	r3, [r7, #12]
  return result;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d101      	bne.n	80057c4 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 80057c0:	2320      	movs	r3, #32
 80057c2:	e003      	b.n	80057cc <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	fab3 f383 	clz	r3, r3
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	3301      	adds	r3, #1
 80057ce:	f003 021f 	and.w	r2, r3, #31
 80057d2:	4613      	mov	r3, r2
 80057d4:	005b      	lsls	r3, r3, #1
 80057d6:	4413      	add	r3, r2
 80057d8:	3b1e      	subs	r3, #30
 80057da:	051b      	lsls	r3, r3, #20
 80057dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057e0:	430b      	orrs	r3, r1
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	6892      	ldr	r2, [r2, #8]
 80057e6:	4619      	mov	r1, r3
 80057e8:	f7fe fe3f 	bl	800446a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f280 80d7 	bge.w	80059a4 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a06      	ldr	r2, [pc, #24]	; (8005814 <HAL_ADC_ConfigChannel+0x88c>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d004      	beq.n	800580a <HAL_ADC_ConfigChannel+0x882>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a04      	ldr	r2, [pc, #16]	; (8005818 <HAL_ADC_ConfigChannel+0x890>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d10a      	bne.n	8005820 <HAL_ADC_ConfigChannel+0x898>
 800580a:	4b04      	ldr	r3, [pc, #16]	; (800581c <HAL_ADC_ConfigChannel+0x894>)
 800580c:	e009      	b.n	8005822 <HAL_ADC_ConfigChannel+0x89a>
 800580e:	bf00      	nop
 8005810:	47ff0000 	.word	0x47ff0000
 8005814:	40022000 	.word	0x40022000
 8005818:	40022100 	.word	0x40022100
 800581c:	40022300 	.word	0x40022300
 8005820:	4b65      	ldr	r3, [pc, #404]	; (80059b8 <HAL_ADC_ConfigChannel+0xa30>)
 8005822:	4618      	mov	r0, r3
 8005824:	f7fe fce2 	bl	80041ec <LL_ADC_GetCommonPathInternalCh>
 8005828:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a62      	ldr	r2, [pc, #392]	; (80059bc <HAL_ADC_ConfigChannel+0xa34>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d004      	beq.n	8005840 <HAL_ADC_ConfigChannel+0x8b8>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a61      	ldr	r2, [pc, #388]	; (80059c0 <HAL_ADC_ConfigChannel+0xa38>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d10e      	bne.n	800585e <HAL_ADC_ConfigChannel+0x8d6>
 8005840:	485e      	ldr	r0, [pc, #376]	; (80059bc <HAL_ADC_ConfigChannel+0xa34>)
 8005842:	f7fe ff0f 	bl	8004664 <LL_ADC_IsEnabled>
 8005846:	4604      	mov	r4, r0
 8005848:	485d      	ldr	r0, [pc, #372]	; (80059c0 <HAL_ADC_ConfigChannel+0xa38>)
 800584a:	f7fe ff0b 	bl	8004664 <LL_ADC_IsEnabled>
 800584e:	4603      	mov	r3, r0
 8005850:	4323      	orrs	r3, r4
 8005852:	2b00      	cmp	r3, #0
 8005854:	bf0c      	ite	eq
 8005856:	2301      	moveq	r3, #1
 8005858:	2300      	movne	r3, #0
 800585a:	b2db      	uxtb	r3, r3
 800585c:	e008      	b.n	8005870 <HAL_ADC_ConfigChannel+0x8e8>
 800585e:	4859      	ldr	r0, [pc, #356]	; (80059c4 <HAL_ADC_ConfigChannel+0xa3c>)
 8005860:	f7fe ff00 	bl	8004664 <LL_ADC_IsEnabled>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	bf0c      	ite	eq
 800586a:	2301      	moveq	r3, #1
 800586c:	2300      	movne	r3, #0
 800586e:	b2db      	uxtb	r3, r3
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 8084 	beq.w	800597e <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a53      	ldr	r2, [pc, #332]	; (80059c8 <HAL_ADC_ConfigChannel+0xa40>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d132      	bne.n	80058e6 <HAL_ADC_ConfigChannel+0x95e>
 8005880:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005884:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d12c      	bne.n	80058e6 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a4c      	ldr	r2, [pc, #304]	; (80059c4 <HAL_ADC_ConfigChannel+0xa3c>)
 8005892:	4293      	cmp	r3, r2
 8005894:	f040 8086 	bne.w	80059a4 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a47      	ldr	r2, [pc, #284]	; (80059bc <HAL_ADC_ConfigChannel+0xa34>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d004      	beq.n	80058ac <HAL_ADC_ConfigChannel+0x924>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a46      	ldr	r2, [pc, #280]	; (80059c0 <HAL_ADC_ConfigChannel+0xa38>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d101      	bne.n	80058b0 <HAL_ADC_ConfigChannel+0x928>
 80058ac:	4a47      	ldr	r2, [pc, #284]	; (80059cc <HAL_ADC_ConfigChannel+0xa44>)
 80058ae:	e000      	b.n	80058b2 <HAL_ADC_ConfigChannel+0x92a>
 80058b0:	4a41      	ldr	r2, [pc, #260]	; (80059b8 <HAL_ADC_ConfigChannel+0xa30>)
 80058b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80058b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80058ba:	4619      	mov	r1, r3
 80058bc:	4610      	mov	r0, r2
 80058be:	f7fe fc82 	bl	80041c6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80058c2:	4b43      	ldr	r3, [pc, #268]	; (80059d0 <HAL_ADC_ConfigChannel+0xa48>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	099b      	lsrs	r3, r3, #6
 80058c8:	4a42      	ldr	r2, [pc, #264]	; (80059d4 <HAL_ADC_ConfigChannel+0xa4c>)
 80058ca:	fba2 2303 	umull	r2, r3, r2, r3
 80058ce:	099b      	lsrs	r3, r3, #6
 80058d0:	3301      	adds	r3, #1
 80058d2:	005b      	lsls	r3, r3, #1
 80058d4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80058d6:	e002      	b.n	80058de <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	3b01      	subs	r3, #1
 80058dc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1f9      	bne.n	80058d8 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80058e4:	e05e      	b.n	80059a4 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a3b      	ldr	r2, [pc, #236]	; (80059d8 <HAL_ADC_ConfigChannel+0xa50>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d120      	bne.n	8005932 <HAL_ADC_ConfigChannel+0x9aa>
 80058f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80058f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d11a      	bne.n	8005932 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a30      	ldr	r2, [pc, #192]	; (80059c4 <HAL_ADC_ConfigChannel+0xa3c>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d14e      	bne.n	80059a4 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a2c      	ldr	r2, [pc, #176]	; (80059bc <HAL_ADC_ConfigChannel+0xa34>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d004      	beq.n	800591a <HAL_ADC_ConfigChannel+0x992>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a2a      	ldr	r2, [pc, #168]	; (80059c0 <HAL_ADC_ConfigChannel+0xa38>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d101      	bne.n	800591e <HAL_ADC_ConfigChannel+0x996>
 800591a:	4a2c      	ldr	r2, [pc, #176]	; (80059cc <HAL_ADC_ConfigChannel+0xa44>)
 800591c:	e000      	b.n	8005920 <HAL_ADC_ConfigChannel+0x998>
 800591e:	4a26      	ldr	r2, [pc, #152]	; (80059b8 <HAL_ADC_ConfigChannel+0xa30>)
 8005920:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005924:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005928:	4619      	mov	r1, r3
 800592a:	4610      	mov	r0, r2
 800592c:	f7fe fc4b 	bl	80041c6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005930:	e038      	b.n	80059a4 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a29      	ldr	r2, [pc, #164]	; (80059dc <HAL_ADC_ConfigChannel+0xa54>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d133      	bne.n	80059a4 <HAL_ADC_ConfigChannel+0xa1c>
 800593c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005940:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d12d      	bne.n	80059a4 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a1d      	ldr	r2, [pc, #116]	; (80059c4 <HAL_ADC_ConfigChannel+0xa3c>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d128      	bne.n	80059a4 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a19      	ldr	r2, [pc, #100]	; (80059bc <HAL_ADC_ConfigChannel+0xa34>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d004      	beq.n	8005966 <HAL_ADC_ConfigChannel+0x9de>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a17      	ldr	r2, [pc, #92]	; (80059c0 <HAL_ADC_ConfigChannel+0xa38>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d101      	bne.n	800596a <HAL_ADC_ConfigChannel+0x9e2>
 8005966:	4a19      	ldr	r2, [pc, #100]	; (80059cc <HAL_ADC_ConfigChannel+0xa44>)
 8005968:	e000      	b.n	800596c <HAL_ADC_ConfigChannel+0x9e4>
 800596a:	4a13      	ldr	r2, [pc, #76]	; (80059b8 <HAL_ADC_ConfigChannel+0xa30>)
 800596c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005970:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005974:	4619      	mov	r1, r3
 8005976:	4610      	mov	r0, r2
 8005978:	f7fe fc25 	bl	80041c6 <LL_ADC_SetCommonPathInternalCh>
 800597c:	e012      	b.n	80059a4 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005982:	f043 0220 	orr.w	r2, r3, #32
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8005990:	e008      	b.n	80059a4 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005996:	f043 0220 	orr.w	r2, r3, #32
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80059ac:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	37e4      	adds	r7, #228	; 0xe4
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd90      	pop	{r4, r7, pc}
 80059b8:	58026300 	.word	0x58026300
 80059bc:	40022000 	.word	0x40022000
 80059c0:	40022100 	.word	0x40022100
 80059c4:	58026000 	.word	0x58026000
 80059c8:	c7520000 	.word	0xc7520000
 80059cc:	40022300 	.word	0x40022300
 80059d0:	24000000 	.word	0x24000000
 80059d4:	053e2d63 	.word	0x053e2d63
 80059d8:	c3210000 	.word	0xc3210000
 80059dc:	cb840000 	.word	0xcb840000

080059e0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b088      	sub	sp, #32
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80059ea:	2300      	movs	r3, #0
 80059ec:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7fe fe82 	bl	8004700 <LL_ADC_REG_IsConversionOngoing>
 80059fc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7fe fea4 	bl	8004750 <LL_ADC_INJ_IsConversionOngoing>
 8005a08:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d103      	bne.n	8005a18 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f000 8098 	beq.w	8005b48 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d02a      	beq.n	8005a7c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	7e5b      	ldrb	r3, [r3, #25]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d126      	bne.n	8005a7c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	7e1b      	ldrb	r3, [r3, #24]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d122      	bne.n	8005a7c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8005a36:	2301      	movs	r3, #1
 8005a38:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005a3a:	e014      	b.n	8005a66 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	4a45      	ldr	r2, [pc, #276]	; (8005b54 <ADC_ConversionStop+0x174>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d90d      	bls.n	8005a60 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a48:	f043 0210 	orr.w	r2, r3, #16
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a54:	f043 0201 	orr.w	r2, r3, #1
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e074      	b.n	8005b4a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	3301      	adds	r3, #1
 8005a64:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a70:	2b40      	cmp	r3, #64	; 0x40
 8005a72:	d1e3      	bne.n	8005a3c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2240      	movs	r2, #64	; 0x40
 8005a7a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d014      	beq.n	8005aac <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7fe fe3a 	bl	8004700 <LL_ADC_REG_IsConversionOngoing>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00c      	beq.n	8005aac <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7fe fdf7 	bl	800468a <LL_ADC_IsDisableOngoing>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d104      	bne.n	8005aac <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7fe fe16 	bl	80046d8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d014      	beq.n	8005adc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7fe fe4a 	bl	8004750 <LL_ADC_INJ_IsConversionOngoing>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00c      	beq.n	8005adc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7fe fddf 	bl	800468a <LL_ADC_IsDisableOngoing>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d104      	bne.n	8005adc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7fe fe26 	bl	8004728 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d005      	beq.n	8005aee <ADC_ConversionStop+0x10e>
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	2b03      	cmp	r3, #3
 8005ae6:	d105      	bne.n	8005af4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005ae8:	230c      	movs	r3, #12
 8005aea:	617b      	str	r3, [r7, #20]
        break;
 8005aec:	e005      	b.n	8005afa <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005aee:	2308      	movs	r3, #8
 8005af0:	617b      	str	r3, [r7, #20]
        break;
 8005af2:	e002      	b.n	8005afa <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005af4:	2304      	movs	r3, #4
 8005af6:	617b      	str	r3, [r7, #20]
        break;
 8005af8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8005afa:	f7fe fb0b 	bl	8004114 <HAL_GetTick>
 8005afe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005b00:	e01b      	b.n	8005b3a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005b02:	f7fe fb07 	bl	8004114 <HAL_GetTick>
 8005b06:	4602      	mov	r2, r0
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	2b05      	cmp	r3, #5
 8005b0e:	d914      	bls.n	8005b3a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	689a      	ldr	r2, [r3, #8]
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	4013      	ands	r3, r2
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00d      	beq.n	8005b3a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b22:	f043 0210 	orr.w	r2, r3, #16
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b2e:	f043 0201 	orr.w	r2, r3, #1
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e007      	b.n	8005b4a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	689a      	ldr	r2, [r3, #8]
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	4013      	ands	r3, r2
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1dc      	bne.n	8005b02 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3720      	adds	r7, #32
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	000cdbff 	.word	0x000cdbff

08005b58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4618      	mov	r0, r3
 8005b66:	f7fe fd7d 	bl	8004664 <LL_ADC_IsEnabled>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d16e      	bne.n	8005c4e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	689a      	ldr	r2, [r3, #8]
 8005b76:	4b38      	ldr	r3, [pc, #224]	; (8005c58 <ADC_Enable+0x100>)
 8005b78:	4013      	ands	r3, r2
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00d      	beq.n	8005b9a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b82:	f043 0210 	orr.w	r2, r3, #16
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b8e:	f043 0201 	orr.w	r2, r3, #1
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e05a      	b.n	8005c50 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7fe fd38 	bl	8004614 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005ba4:	f7fe fab6 	bl	8004114 <HAL_GetTick>
 8005ba8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a2b      	ldr	r2, [pc, #172]	; (8005c5c <ADC_Enable+0x104>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d004      	beq.n	8005bbe <ADC_Enable+0x66>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a29      	ldr	r2, [pc, #164]	; (8005c60 <ADC_Enable+0x108>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d101      	bne.n	8005bc2 <ADC_Enable+0x6a>
 8005bbe:	4b29      	ldr	r3, [pc, #164]	; (8005c64 <ADC_Enable+0x10c>)
 8005bc0:	e000      	b.n	8005bc4 <ADC_Enable+0x6c>
 8005bc2:	4b29      	ldr	r3, [pc, #164]	; (8005c68 <ADC_Enable+0x110>)
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7fe fcbb 	bl	8004540 <LL_ADC_GetMultimode>
 8005bca:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a23      	ldr	r2, [pc, #140]	; (8005c60 <ADC_Enable+0x108>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d002      	beq.n	8005bdc <ADC_Enable+0x84>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	e000      	b.n	8005bde <ADC_Enable+0x86>
 8005bdc:	4b1f      	ldr	r3, [pc, #124]	; (8005c5c <ADC_Enable+0x104>)
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	6812      	ldr	r2, [r2, #0]
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d02c      	beq.n	8005c40 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d130      	bne.n	8005c4e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005bec:	e028      	b.n	8005c40 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7fe fd36 	bl	8004664 <LL_ADC_IsEnabled>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d104      	bne.n	8005c08 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7fe fd06 	bl	8004614 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005c08:	f7fe fa84 	bl	8004114 <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d914      	bls.n	8005c40 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0301 	and.w	r3, r3, #1
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d00d      	beq.n	8005c40 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c28:	f043 0210 	orr.w	r2, r3, #16
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c34:	f043 0201 	orr.w	r2, r3, #1
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e007      	b.n	8005c50 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0301 	and.w	r3, r3, #1
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d1cf      	bne.n	8005bee <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	8000003f 	.word	0x8000003f
 8005c5c:	40022000 	.word	0x40022000
 8005c60:	40022100 	.word	0x40022100
 8005c64:	40022300 	.word	0x40022300
 8005c68:	58026300 	.word	0x58026300

08005c6c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f7fe fd06 	bl	800468a <LL_ADC_IsDisableOngoing>
 8005c7e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4618      	mov	r0, r3
 8005c86:	f7fe fced 	bl	8004664 <LL_ADC_IsEnabled>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d047      	beq.n	8005d20 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d144      	bne.n	8005d20 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	f003 030d 	and.w	r3, r3, #13
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d10c      	bne.n	8005cbe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f7fe fcc7 	bl	800463c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2203      	movs	r2, #3
 8005cb4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005cb6:	f7fe fa2d 	bl	8004114 <HAL_GetTick>
 8005cba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005cbc:	e029      	b.n	8005d12 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cc2:	f043 0210 	orr.w	r2, r3, #16
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cce:	f043 0201 	orr.w	r2, r3, #1
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e023      	b.n	8005d22 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005cda:	f7fe fa1b 	bl	8004114 <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d914      	bls.n	8005d12 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f003 0301 	and.w	r3, r3, #1
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00d      	beq.n	8005d12 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cfa:	f043 0210 	orr.w	r2, r3, #16
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d06:	f043 0201 	orr.w	r2, r3, #1
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e007      	b.n	8005d22 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d1dc      	bne.n	8005cda <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
	...

08005d2c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a6c      	ldr	r2, [pc, #432]	; (8005eec <ADC_ConfigureBoostMode+0x1c0>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d004      	beq.n	8005d48 <ADC_ConfigureBoostMode+0x1c>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a6b      	ldr	r2, [pc, #428]	; (8005ef0 <ADC_ConfigureBoostMode+0x1c4>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d109      	bne.n	8005d5c <ADC_ConfigureBoostMode+0x30>
 8005d48:	4b6a      	ldr	r3, [pc, #424]	; (8005ef4 <ADC_ConfigureBoostMode+0x1c8>)
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	bf14      	ite	ne
 8005d54:	2301      	movne	r3, #1
 8005d56:	2300      	moveq	r3, #0
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	e008      	b.n	8005d6e <ADC_ConfigureBoostMode+0x42>
 8005d5c:	4b66      	ldr	r3, [pc, #408]	; (8005ef8 <ADC_ConfigureBoostMode+0x1cc>)
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	bf14      	ite	ne
 8005d68:	2301      	movne	r3, #1
 8005d6a:	2300      	moveq	r3, #0
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d01c      	beq.n	8005dac <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005d72:	f005 fcab 	bl	800b6cc <HAL_RCC_GetHCLKFreq>
 8005d76:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d80:	d010      	beq.n	8005da4 <ADC_ConfigureBoostMode+0x78>
 8005d82:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d86:	d873      	bhi.n	8005e70 <ADC_ConfigureBoostMode+0x144>
 8005d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d8c:	d002      	beq.n	8005d94 <ADC_ConfigureBoostMode+0x68>
 8005d8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d92:	d16d      	bne.n	8005e70 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	0c1b      	lsrs	r3, r3, #16
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da0:	60fb      	str	r3, [r7, #12]
        break;
 8005da2:	e068      	b.n	8005e76 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	089b      	lsrs	r3, r3, #2
 8005da8:	60fb      	str	r3, [r7, #12]
        break;
 8005daa:	e064      	b.n	8005e76 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005dac:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005db0:	f04f 0100 	mov.w	r1, #0
 8005db4:	f006 fe86 	bl	800cac4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005db8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005dc2:	d051      	beq.n	8005e68 <ADC_ConfigureBoostMode+0x13c>
 8005dc4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005dc8:	d854      	bhi.n	8005e74 <ADC_ConfigureBoostMode+0x148>
 8005dca:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005dce:	d047      	beq.n	8005e60 <ADC_ConfigureBoostMode+0x134>
 8005dd0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005dd4:	d84e      	bhi.n	8005e74 <ADC_ConfigureBoostMode+0x148>
 8005dd6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005dda:	d03d      	beq.n	8005e58 <ADC_ConfigureBoostMode+0x12c>
 8005ddc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005de0:	d848      	bhi.n	8005e74 <ADC_ConfigureBoostMode+0x148>
 8005de2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005de6:	d033      	beq.n	8005e50 <ADC_ConfigureBoostMode+0x124>
 8005de8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dec:	d842      	bhi.n	8005e74 <ADC_ConfigureBoostMode+0x148>
 8005dee:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005df2:	d029      	beq.n	8005e48 <ADC_ConfigureBoostMode+0x11c>
 8005df4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005df8:	d83c      	bhi.n	8005e74 <ADC_ConfigureBoostMode+0x148>
 8005dfa:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005dfe:	d01a      	beq.n	8005e36 <ADC_ConfigureBoostMode+0x10a>
 8005e00:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005e04:	d836      	bhi.n	8005e74 <ADC_ConfigureBoostMode+0x148>
 8005e06:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005e0a:	d014      	beq.n	8005e36 <ADC_ConfigureBoostMode+0x10a>
 8005e0c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005e10:	d830      	bhi.n	8005e74 <ADC_ConfigureBoostMode+0x148>
 8005e12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e16:	d00e      	beq.n	8005e36 <ADC_ConfigureBoostMode+0x10a>
 8005e18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e1c:	d82a      	bhi.n	8005e74 <ADC_ConfigureBoostMode+0x148>
 8005e1e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005e22:	d008      	beq.n	8005e36 <ADC_ConfigureBoostMode+0x10a>
 8005e24:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005e28:	d824      	bhi.n	8005e74 <ADC_ConfigureBoostMode+0x148>
 8005e2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e2e:	d002      	beq.n	8005e36 <ADC_ConfigureBoostMode+0x10a>
 8005e30:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e34:	d11e      	bne.n	8005e74 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	0c9b      	lsrs	r3, r3, #18
 8005e3c:	005b      	lsls	r3, r3, #1
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e44:	60fb      	str	r3, [r7, #12]
        break;
 8005e46:	e016      	b.n	8005e76 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	091b      	lsrs	r3, r3, #4
 8005e4c:	60fb      	str	r3, [r7, #12]
        break;
 8005e4e:	e012      	b.n	8005e76 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	095b      	lsrs	r3, r3, #5
 8005e54:	60fb      	str	r3, [r7, #12]
        break;
 8005e56:	e00e      	b.n	8005e76 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	099b      	lsrs	r3, r3, #6
 8005e5c:	60fb      	str	r3, [r7, #12]
        break;
 8005e5e:	e00a      	b.n	8005e76 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	09db      	lsrs	r3, r3, #7
 8005e64:	60fb      	str	r3, [r7, #12]
        break;
 8005e66:	e006      	b.n	8005e76 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	0a1b      	lsrs	r3, r3, #8
 8005e6c:	60fb      	str	r3, [r7, #12]
        break;
 8005e6e:	e002      	b.n	8005e76 <ADC_ConfigureBoostMode+0x14a>
        break;
 8005e70:	bf00      	nop
 8005e72:	e000      	b.n	8005e76 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005e74:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	085b      	lsrs	r3, r3, #1
 8005e7a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	4a1f      	ldr	r2, [pc, #124]	; (8005efc <ADC_ConfigureBoostMode+0x1d0>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d808      	bhi.n	8005e96 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689a      	ldr	r2, [r3, #8]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005e92:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005e94:	e025      	b.n	8005ee2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	4a19      	ldr	r2, [pc, #100]	; (8005f00 <ADC_ConfigureBoostMode+0x1d4>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d80a      	bhi.n	8005eb4 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005eb0:	609a      	str	r2, [r3, #8]
}
 8005eb2:	e016      	b.n	8005ee2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	4a13      	ldr	r2, [pc, #76]	; (8005f04 <ADC_ConfigureBoostMode+0x1d8>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d80a      	bhi.n	8005ed2 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ece:	609a      	str	r2, [r3, #8]
}
 8005ed0:	e007      	b.n	8005ee2 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	689a      	ldr	r2, [r3, #8]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005ee0:	609a      	str	r2, [r3, #8]
}
 8005ee2:	bf00      	nop
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	40022000 	.word	0x40022000
 8005ef0:	40022100 	.word	0x40022100
 8005ef4:	40022300 	.word	0x40022300
 8005ef8:	58026300 	.word	0x58026300
 8005efc:	005f5e10 	.word	0x005f5e10
 8005f00:	00bebc20 	.word	0x00bebc20
 8005f04:	017d7840 	.word	0x017d7840

08005f08 <LL_ADC_IsEnabled>:
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d101      	bne.n	8005f20 <LL_ADC_IsEnabled+0x18>
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e000      	b.n	8005f22 <LL_ADC_IsEnabled+0x1a>
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <LL_ADC_REG_IsConversionOngoing>:
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b083      	sub	sp, #12
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f003 0304 	and.w	r3, r3, #4
 8005f3e:	2b04      	cmp	r3, #4
 8005f40:	d101      	bne.n	8005f46 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005f42:	2301      	movs	r3, #1
 8005f44:	e000      	b.n	8005f48 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005f54:	b590      	push	{r4, r7, lr}
 8005f56:	b0a3      	sub	sp, #140	; 0x8c
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d101      	bne.n	8005f72 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005f6e:	2302      	movs	r3, #2
 8005f70:	e0c1      	b.n	80060f6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a5e      	ldr	r2, [pc, #376]	; (8006100 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d102      	bne.n	8005f92 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005f8c:	4b5d      	ldr	r3, [pc, #372]	; (8006104 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005f8e:	60fb      	str	r3, [r7, #12]
 8005f90:	e001      	b.n	8005f96 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005f92:	2300      	movs	r3, #0
 8005f94:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d10b      	bne.n	8005fb4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fa0:	f043 0220 	orr.w	r2, r3, #32
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e0a0      	b.n	80060f6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7ff ffb9 	bl	8005f2e <LL_ADC_REG_IsConversionOngoing>
 8005fbc:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f7ff ffb2 	bl	8005f2e <LL_ADC_REG_IsConversionOngoing>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f040 8081 	bne.w	80060d4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005fd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d17c      	bne.n	80060d4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a48      	ldr	r2, [pc, #288]	; (8006100 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d004      	beq.n	8005fee <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a46      	ldr	r2, [pc, #280]	; (8006104 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d101      	bne.n	8005ff2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8005fee:	4b46      	ldr	r3, [pc, #280]	; (8006108 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005ff0:	e000      	b.n	8005ff4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8005ff2:	4b46      	ldr	r3, [pc, #280]	; (800610c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005ff4:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d039      	beq.n	8006072 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005ffe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	431a      	orrs	r2, r3
 800600c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800600e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a3a      	ldr	r2, [pc, #232]	; (8006100 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d004      	beq.n	8006024 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a39      	ldr	r2, [pc, #228]	; (8006104 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d10e      	bne.n	8006042 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8006024:	4836      	ldr	r0, [pc, #216]	; (8006100 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006026:	f7ff ff6f 	bl	8005f08 <LL_ADC_IsEnabled>
 800602a:	4604      	mov	r4, r0
 800602c:	4835      	ldr	r0, [pc, #212]	; (8006104 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800602e:	f7ff ff6b 	bl	8005f08 <LL_ADC_IsEnabled>
 8006032:	4603      	mov	r3, r0
 8006034:	4323      	orrs	r3, r4
 8006036:	2b00      	cmp	r3, #0
 8006038:	bf0c      	ite	eq
 800603a:	2301      	moveq	r3, #1
 800603c:	2300      	movne	r3, #0
 800603e:	b2db      	uxtb	r3, r3
 8006040:	e008      	b.n	8006054 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8006042:	4833      	ldr	r0, [pc, #204]	; (8006110 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8006044:	f7ff ff60 	bl	8005f08 <LL_ADC_IsEnabled>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	bf0c      	ite	eq
 800604e:	2301      	moveq	r3, #1
 8006050:	2300      	movne	r3, #0
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2b00      	cmp	r3, #0
 8006056:	d047      	beq.n	80060e8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006058:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800605a:	689a      	ldr	r2, [r3, #8]
 800605c:	4b2d      	ldr	r3, [pc, #180]	; (8006114 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800605e:	4013      	ands	r3, r2
 8006060:	683a      	ldr	r2, [r7, #0]
 8006062:	6811      	ldr	r1, [r2, #0]
 8006064:	683a      	ldr	r2, [r7, #0]
 8006066:	6892      	ldr	r2, [r2, #8]
 8006068:	430a      	orrs	r2, r1
 800606a:	431a      	orrs	r2, r3
 800606c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800606e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006070:	e03a      	b.n	80060e8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006072:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800607a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800607c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a1f      	ldr	r2, [pc, #124]	; (8006100 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d004      	beq.n	8006092 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a1d      	ldr	r2, [pc, #116]	; (8006104 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d10e      	bne.n	80060b0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8006092:	481b      	ldr	r0, [pc, #108]	; (8006100 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006094:	f7ff ff38 	bl	8005f08 <LL_ADC_IsEnabled>
 8006098:	4604      	mov	r4, r0
 800609a:	481a      	ldr	r0, [pc, #104]	; (8006104 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800609c:	f7ff ff34 	bl	8005f08 <LL_ADC_IsEnabled>
 80060a0:	4603      	mov	r3, r0
 80060a2:	4323      	orrs	r3, r4
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	bf0c      	ite	eq
 80060a8:	2301      	moveq	r3, #1
 80060aa:	2300      	movne	r3, #0
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	e008      	b.n	80060c2 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80060b0:	4817      	ldr	r0, [pc, #92]	; (8006110 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80060b2:	f7ff ff29 	bl	8005f08 <LL_ADC_IsEnabled>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	bf0c      	ite	eq
 80060bc:	2301      	moveq	r3, #1
 80060be:	2300      	movne	r3, #0
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d010      	beq.n	80060e8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80060c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80060c8:	689a      	ldr	r2, [r3, #8]
 80060ca:	4b12      	ldr	r3, [pc, #72]	; (8006114 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80060cc:	4013      	ands	r3, r2
 80060ce:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80060d0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80060d2:	e009      	b.n	80060e8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060d8:	f043 0220 	orr.w	r2, r3, #32
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80060e6:	e000      	b.n	80060ea <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80060e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80060f2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	378c      	adds	r7, #140	; 0x8c
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd90      	pop	{r4, r7, pc}
 80060fe:	bf00      	nop
 8006100:	40022000 	.word	0x40022000
 8006104:	40022100 	.word	0x40022100
 8006108:	40022300 	.word	0x40022300
 800610c:	58026300 	.word	0x58026300
 8006110:	58026000 	.word	0x58026000
 8006114:	fffff0e0 	.word	0xfffff0e0

08006118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f003 0307 	and.w	r3, r3, #7
 8006126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006128:	4b0b      	ldr	r3, [pc, #44]	; (8006158 <__NVIC_SetPriorityGrouping+0x40>)
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006134:	4013      	ands	r3, r2
 8006136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006140:	4b06      	ldr	r3, [pc, #24]	; (800615c <__NVIC_SetPriorityGrouping+0x44>)
 8006142:	4313      	orrs	r3, r2
 8006144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006146:	4a04      	ldr	r2, [pc, #16]	; (8006158 <__NVIC_SetPriorityGrouping+0x40>)
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	60d3      	str	r3, [r2, #12]
}
 800614c:	bf00      	nop
 800614e:	3714      	adds	r7, #20
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr
 8006158:	e000ed00 	.word	0xe000ed00
 800615c:	05fa0000 	.word	0x05fa0000

08006160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006160:	b480      	push	{r7}
 8006162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006164:	4b04      	ldr	r3, [pc, #16]	; (8006178 <__NVIC_GetPriorityGrouping+0x18>)
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	0a1b      	lsrs	r3, r3, #8
 800616a:	f003 0307 	and.w	r3, r3, #7
}
 800616e:	4618      	mov	r0, r3
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr
 8006178:	e000ed00 	.word	0xe000ed00

0800617c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	4603      	mov	r3, r0
 8006184:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006186:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800618a:	2b00      	cmp	r3, #0
 800618c:	db0b      	blt.n	80061a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800618e:	88fb      	ldrh	r3, [r7, #6]
 8006190:	f003 021f 	and.w	r2, r3, #31
 8006194:	4907      	ldr	r1, [pc, #28]	; (80061b4 <__NVIC_EnableIRQ+0x38>)
 8006196:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800619a:	095b      	lsrs	r3, r3, #5
 800619c:	2001      	movs	r0, #1
 800619e:	fa00 f202 	lsl.w	r2, r0, r2
 80061a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80061a6:	bf00      	nop
 80061a8:	370c      	adds	r7, #12
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	e000e100 	.word	0xe000e100

080061b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	4603      	mov	r3, r0
 80061c0:	6039      	str	r1, [r7, #0]
 80061c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80061c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	db0a      	blt.n	80061e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	b2da      	uxtb	r2, r3
 80061d0:	490c      	ldr	r1, [pc, #48]	; (8006204 <__NVIC_SetPriority+0x4c>)
 80061d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80061d6:	0112      	lsls	r2, r2, #4
 80061d8:	b2d2      	uxtb	r2, r2
 80061da:	440b      	add	r3, r1
 80061dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80061e0:	e00a      	b.n	80061f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	b2da      	uxtb	r2, r3
 80061e6:	4908      	ldr	r1, [pc, #32]	; (8006208 <__NVIC_SetPriority+0x50>)
 80061e8:	88fb      	ldrh	r3, [r7, #6]
 80061ea:	f003 030f 	and.w	r3, r3, #15
 80061ee:	3b04      	subs	r3, #4
 80061f0:	0112      	lsls	r2, r2, #4
 80061f2:	b2d2      	uxtb	r2, r2
 80061f4:	440b      	add	r3, r1
 80061f6:	761a      	strb	r2, [r3, #24]
}
 80061f8:	bf00      	nop
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr
 8006204:	e000e100 	.word	0xe000e100
 8006208:	e000ed00 	.word	0xe000ed00

0800620c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800620c:	b480      	push	{r7}
 800620e:	b089      	sub	sp, #36	; 0x24
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f003 0307 	and.w	r3, r3, #7
 800621e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	f1c3 0307 	rsb	r3, r3, #7
 8006226:	2b04      	cmp	r3, #4
 8006228:	bf28      	it	cs
 800622a:	2304      	movcs	r3, #4
 800622c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	3304      	adds	r3, #4
 8006232:	2b06      	cmp	r3, #6
 8006234:	d902      	bls.n	800623c <NVIC_EncodePriority+0x30>
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	3b03      	subs	r3, #3
 800623a:	e000      	b.n	800623e <NVIC_EncodePriority+0x32>
 800623c:	2300      	movs	r3, #0
 800623e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006240:	f04f 32ff 	mov.w	r2, #4294967295
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	fa02 f303 	lsl.w	r3, r2, r3
 800624a:	43da      	mvns	r2, r3
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	401a      	ands	r2, r3
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006254:	f04f 31ff 	mov.w	r1, #4294967295
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	fa01 f303 	lsl.w	r3, r1, r3
 800625e:	43d9      	mvns	r1, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006264:	4313      	orrs	r3, r2
         );
}
 8006266:	4618      	mov	r0, r3
 8006268:	3724      	adds	r7, #36	; 0x24
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
	...

08006274 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	3b01      	subs	r3, #1
 8006280:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006284:	d301      	bcc.n	800628a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006286:	2301      	movs	r3, #1
 8006288:	e00f      	b.n	80062aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800628a:	4a0a      	ldr	r2, [pc, #40]	; (80062b4 <SysTick_Config+0x40>)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	3b01      	subs	r3, #1
 8006290:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006292:	210f      	movs	r1, #15
 8006294:	f04f 30ff 	mov.w	r0, #4294967295
 8006298:	f7ff ff8e 	bl	80061b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800629c:	4b05      	ldr	r3, [pc, #20]	; (80062b4 <SysTick_Config+0x40>)
 800629e:	2200      	movs	r2, #0
 80062a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80062a2:	4b04      	ldr	r3, [pc, #16]	; (80062b4 <SysTick_Config+0x40>)
 80062a4:	2207      	movs	r2, #7
 80062a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3708      	adds	r7, #8
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	e000e010 	.word	0xe000e010

080062b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f7ff ff29 	bl	8006118 <__NVIC_SetPriorityGrouping>
}
 80062c6:	bf00      	nop
 80062c8:	3708      	adds	r7, #8
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b086      	sub	sp, #24
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	4603      	mov	r3, r0
 80062d6:	60b9      	str	r1, [r7, #8]
 80062d8:	607a      	str	r2, [r7, #4]
 80062da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80062dc:	f7ff ff40 	bl	8006160 <__NVIC_GetPriorityGrouping>
 80062e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	68b9      	ldr	r1, [r7, #8]
 80062e6:	6978      	ldr	r0, [r7, #20]
 80062e8:	f7ff ff90 	bl	800620c <NVIC_EncodePriority>
 80062ec:	4602      	mov	r2, r0
 80062ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80062f2:	4611      	mov	r1, r2
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7ff ff5f 	bl	80061b8 <__NVIC_SetPriority>
}
 80062fa:	bf00      	nop
 80062fc:	3718      	adds	r7, #24
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b082      	sub	sp, #8
 8006306:	af00      	add	r7, sp, #0
 8006308:	4603      	mov	r3, r0
 800630a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800630c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006310:	4618      	mov	r0, r3
 8006312:	f7ff ff33 	bl	800617c <__NVIC_EnableIRQ>
}
 8006316:	bf00      	nop
 8006318:	3708      	adds	r7, #8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b082      	sub	sp, #8
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f7ff ffa4 	bl	8006274 <SysTick_Config>
 800632c:	4603      	mov	r3, r0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
	...

08006338 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b086      	sub	sp, #24
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006340:	f7fd fee8 	bl	8004114 <HAL_GetTick>
 8006344:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d101      	bne.n	8006350 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e312      	b.n	8006976 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a66      	ldr	r2, [pc, #408]	; (80064f0 <HAL_DMA_Init+0x1b8>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d04a      	beq.n	80063f0 <HAL_DMA_Init+0xb8>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a65      	ldr	r2, [pc, #404]	; (80064f4 <HAL_DMA_Init+0x1bc>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d045      	beq.n	80063f0 <HAL_DMA_Init+0xb8>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a63      	ldr	r2, [pc, #396]	; (80064f8 <HAL_DMA_Init+0x1c0>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d040      	beq.n	80063f0 <HAL_DMA_Init+0xb8>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a62      	ldr	r2, [pc, #392]	; (80064fc <HAL_DMA_Init+0x1c4>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d03b      	beq.n	80063f0 <HAL_DMA_Init+0xb8>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a60      	ldr	r2, [pc, #384]	; (8006500 <HAL_DMA_Init+0x1c8>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d036      	beq.n	80063f0 <HAL_DMA_Init+0xb8>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a5f      	ldr	r2, [pc, #380]	; (8006504 <HAL_DMA_Init+0x1cc>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d031      	beq.n	80063f0 <HAL_DMA_Init+0xb8>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a5d      	ldr	r2, [pc, #372]	; (8006508 <HAL_DMA_Init+0x1d0>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d02c      	beq.n	80063f0 <HAL_DMA_Init+0xb8>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a5c      	ldr	r2, [pc, #368]	; (800650c <HAL_DMA_Init+0x1d4>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d027      	beq.n	80063f0 <HAL_DMA_Init+0xb8>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a5a      	ldr	r2, [pc, #360]	; (8006510 <HAL_DMA_Init+0x1d8>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d022      	beq.n	80063f0 <HAL_DMA_Init+0xb8>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a59      	ldr	r2, [pc, #356]	; (8006514 <HAL_DMA_Init+0x1dc>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d01d      	beq.n	80063f0 <HAL_DMA_Init+0xb8>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a57      	ldr	r2, [pc, #348]	; (8006518 <HAL_DMA_Init+0x1e0>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d018      	beq.n	80063f0 <HAL_DMA_Init+0xb8>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a56      	ldr	r2, [pc, #344]	; (800651c <HAL_DMA_Init+0x1e4>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d013      	beq.n	80063f0 <HAL_DMA_Init+0xb8>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a54      	ldr	r2, [pc, #336]	; (8006520 <HAL_DMA_Init+0x1e8>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d00e      	beq.n	80063f0 <HAL_DMA_Init+0xb8>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a53      	ldr	r2, [pc, #332]	; (8006524 <HAL_DMA_Init+0x1ec>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d009      	beq.n	80063f0 <HAL_DMA_Init+0xb8>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a51      	ldr	r2, [pc, #324]	; (8006528 <HAL_DMA_Init+0x1f0>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d004      	beq.n	80063f0 <HAL_DMA_Init+0xb8>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a50      	ldr	r2, [pc, #320]	; (800652c <HAL_DMA_Init+0x1f4>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d101      	bne.n	80063f4 <HAL_DMA_Init+0xbc>
 80063f0:	2301      	movs	r3, #1
 80063f2:	e000      	b.n	80063f6 <HAL_DMA_Init+0xbe>
 80063f4:	2300      	movs	r3, #0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	f000 813c 	beq.w	8006674 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2202      	movs	r2, #2
 8006400:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a37      	ldr	r2, [pc, #220]	; (80064f0 <HAL_DMA_Init+0x1b8>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d04a      	beq.n	80064ac <HAL_DMA_Init+0x174>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a36      	ldr	r2, [pc, #216]	; (80064f4 <HAL_DMA_Init+0x1bc>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d045      	beq.n	80064ac <HAL_DMA_Init+0x174>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a34      	ldr	r2, [pc, #208]	; (80064f8 <HAL_DMA_Init+0x1c0>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d040      	beq.n	80064ac <HAL_DMA_Init+0x174>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a33      	ldr	r2, [pc, #204]	; (80064fc <HAL_DMA_Init+0x1c4>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d03b      	beq.n	80064ac <HAL_DMA_Init+0x174>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a31      	ldr	r2, [pc, #196]	; (8006500 <HAL_DMA_Init+0x1c8>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d036      	beq.n	80064ac <HAL_DMA_Init+0x174>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a30      	ldr	r2, [pc, #192]	; (8006504 <HAL_DMA_Init+0x1cc>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d031      	beq.n	80064ac <HAL_DMA_Init+0x174>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a2e      	ldr	r2, [pc, #184]	; (8006508 <HAL_DMA_Init+0x1d0>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d02c      	beq.n	80064ac <HAL_DMA_Init+0x174>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a2d      	ldr	r2, [pc, #180]	; (800650c <HAL_DMA_Init+0x1d4>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d027      	beq.n	80064ac <HAL_DMA_Init+0x174>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a2b      	ldr	r2, [pc, #172]	; (8006510 <HAL_DMA_Init+0x1d8>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d022      	beq.n	80064ac <HAL_DMA_Init+0x174>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a2a      	ldr	r2, [pc, #168]	; (8006514 <HAL_DMA_Init+0x1dc>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d01d      	beq.n	80064ac <HAL_DMA_Init+0x174>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a28      	ldr	r2, [pc, #160]	; (8006518 <HAL_DMA_Init+0x1e0>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d018      	beq.n	80064ac <HAL_DMA_Init+0x174>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a27      	ldr	r2, [pc, #156]	; (800651c <HAL_DMA_Init+0x1e4>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d013      	beq.n	80064ac <HAL_DMA_Init+0x174>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a25      	ldr	r2, [pc, #148]	; (8006520 <HAL_DMA_Init+0x1e8>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d00e      	beq.n	80064ac <HAL_DMA_Init+0x174>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a24      	ldr	r2, [pc, #144]	; (8006524 <HAL_DMA_Init+0x1ec>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d009      	beq.n	80064ac <HAL_DMA_Init+0x174>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a22      	ldr	r2, [pc, #136]	; (8006528 <HAL_DMA_Init+0x1f0>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d004      	beq.n	80064ac <HAL_DMA_Init+0x174>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a21      	ldr	r2, [pc, #132]	; (800652c <HAL_DMA_Init+0x1f4>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d108      	bne.n	80064be <HAL_DMA_Init+0x186>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f022 0201 	bic.w	r2, r2, #1
 80064ba:	601a      	str	r2, [r3, #0]
 80064bc:	e007      	b.n	80064ce <HAL_DMA_Init+0x196>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f022 0201 	bic.w	r2, r2, #1
 80064cc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80064ce:	e02f      	b.n	8006530 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80064d0:	f7fd fe20 	bl	8004114 <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	2b05      	cmp	r3, #5
 80064dc:	d928      	bls.n	8006530 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2220      	movs	r2, #32
 80064e2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2203      	movs	r2, #3
 80064e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e242      	b.n	8006976 <HAL_DMA_Init+0x63e>
 80064f0:	40020010 	.word	0x40020010
 80064f4:	40020028 	.word	0x40020028
 80064f8:	40020040 	.word	0x40020040
 80064fc:	40020058 	.word	0x40020058
 8006500:	40020070 	.word	0x40020070
 8006504:	40020088 	.word	0x40020088
 8006508:	400200a0 	.word	0x400200a0
 800650c:	400200b8 	.word	0x400200b8
 8006510:	40020410 	.word	0x40020410
 8006514:	40020428 	.word	0x40020428
 8006518:	40020440 	.word	0x40020440
 800651c:	40020458 	.word	0x40020458
 8006520:	40020470 	.word	0x40020470
 8006524:	40020488 	.word	0x40020488
 8006528:	400204a0 	.word	0x400204a0
 800652c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1c8      	bne.n	80064d0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006546:	697a      	ldr	r2, [r7, #20]
 8006548:	4b83      	ldr	r3, [pc, #524]	; (8006758 <HAL_DMA_Init+0x420>)
 800654a:	4013      	ands	r3, r2
 800654c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006556:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006562:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800656e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a1b      	ldr	r3, [r3, #32]
 8006574:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	4313      	orrs	r3, r2
 800657a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006580:	2b04      	cmp	r3, #4
 8006582:	d107      	bne.n	8006594 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658c:	4313      	orrs	r3, r2
 800658e:	697a      	ldr	r2, [r7, #20]
 8006590:	4313      	orrs	r3, r2
 8006592:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	2b28      	cmp	r3, #40	; 0x28
 800659a:	d903      	bls.n	80065a4 <HAL_DMA_Init+0x26c>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	2b2e      	cmp	r3, #46	; 0x2e
 80065a2:	d91f      	bls.n	80065e4 <HAL_DMA_Init+0x2ac>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	2b3e      	cmp	r3, #62	; 0x3e
 80065aa:	d903      	bls.n	80065b4 <HAL_DMA_Init+0x27c>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	2b42      	cmp	r3, #66	; 0x42
 80065b2:	d917      	bls.n	80065e4 <HAL_DMA_Init+0x2ac>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	2b46      	cmp	r3, #70	; 0x46
 80065ba:	d903      	bls.n	80065c4 <HAL_DMA_Init+0x28c>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	2b48      	cmp	r3, #72	; 0x48
 80065c2:	d90f      	bls.n	80065e4 <HAL_DMA_Init+0x2ac>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	2b4e      	cmp	r3, #78	; 0x4e
 80065ca:	d903      	bls.n	80065d4 <HAL_DMA_Init+0x29c>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	2b52      	cmp	r3, #82	; 0x52
 80065d2:	d907      	bls.n	80065e4 <HAL_DMA_Init+0x2ac>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	2b73      	cmp	r3, #115	; 0x73
 80065da:	d905      	bls.n	80065e8 <HAL_DMA_Init+0x2b0>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	2b77      	cmp	r3, #119	; 0x77
 80065e2:	d801      	bhi.n	80065e8 <HAL_DMA_Init+0x2b0>
 80065e4:	2301      	movs	r3, #1
 80065e6:	e000      	b.n	80065ea <HAL_DMA_Init+0x2b2>
 80065e8:	2300      	movs	r3, #0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d003      	beq.n	80065f6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065f4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	695b      	ldr	r3, [r3, #20]
 8006604:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	f023 0307 	bic.w	r3, r3, #7
 800660c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	4313      	orrs	r3, r2
 8006616:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661c:	2b04      	cmp	r3, #4
 800661e:	d117      	bne.n	8006650 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006624:	697a      	ldr	r2, [r7, #20]
 8006626:	4313      	orrs	r3, r2
 8006628:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00e      	beq.n	8006650 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f001 fdca 	bl	80081cc <DMA_CheckFifoParam>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d008      	beq.n	8006650 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2240      	movs	r2, #64	; 0x40
 8006642:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e192      	b.n	8006976 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f001 fd05 	bl	8008068 <DMA_CalcBaseAndBitshift>
 800665e:	4603      	mov	r3, r0
 8006660:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006666:	f003 031f 	and.w	r3, r3, #31
 800666a:	223f      	movs	r2, #63	; 0x3f
 800666c:	409a      	lsls	r2, r3
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	609a      	str	r2, [r3, #8]
 8006672:	e0c8      	b.n	8006806 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a38      	ldr	r2, [pc, #224]	; (800675c <HAL_DMA_Init+0x424>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d022      	beq.n	80066c4 <HAL_DMA_Init+0x38c>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a37      	ldr	r2, [pc, #220]	; (8006760 <HAL_DMA_Init+0x428>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d01d      	beq.n	80066c4 <HAL_DMA_Init+0x38c>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a35      	ldr	r2, [pc, #212]	; (8006764 <HAL_DMA_Init+0x42c>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d018      	beq.n	80066c4 <HAL_DMA_Init+0x38c>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a34      	ldr	r2, [pc, #208]	; (8006768 <HAL_DMA_Init+0x430>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d013      	beq.n	80066c4 <HAL_DMA_Init+0x38c>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a32      	ldr	r2, [pc, #200]	; (800676c <HAL_DMA_Init+0x434>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d00e      	beq.n	80066c4 <HAL_DMA_Init+0x38c>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a31      	ldr	r2, [pc, #196]	; (8006770 <HAL_DMA_Init+0x438>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d009      	beq.n	80066c4 <HAL_DMA_Init+0x38c>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a2f      	ldr	r2, [pc, #188]	; (8006774 <HAL_DMA_Init+0x43c>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d004      	beq.n	80066c4 <HAL_DMA_Init+0x38c>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a2e      	ldr	r2, [pc, #184]	; (8006778 <HAL_DMA_Init+0x440>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d101      	bne.n	80066c8 <HAL_DMA_Init+0x390>
 80066c4:	2301      	movs	r3, #1
 80066c6:	e000      	b.n	80066ca <HAL_DMA_Init+0x392>
 80066c8:	2300      	movs	r3, #0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f000 8092 	beq.w	80067f4 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a21      	ldr	r2, [pc, #132]	; (800675c <HAL_DMA_Init+0x424>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d021      	beq.n	800671e <HAL_DMA_Init+0x3e6>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a20      	ldr	r2, [pc, #128]	; (8006760 <HAL_DMA_Init+0x428>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d01c      	beq.n	800671e <HAL_DMA_Init+0x3e6>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a1e      	ldr	r2, [pc, #120]	; (8006764 <HAL_DMA_Init+0x42c>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d017      	beq.n	800671e <HAL_DMA_Init+0x3e6>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a1d      	ldr	r2, [pc, #116]	; (8006768 <HAL_DMA_Init+0x430>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d012      	beq.n	800671e <HAL_DMA_Init+0x3e6>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a1b      	ldr	r2, [pc, #108]	; (800676c <HAL_DMA_Init+0x434>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d00d      	beq.n	800671e <HAL_DMA_Init+0x3e6>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a1a      	ldr	r2, [pc, #104]	; (8006770 <HAL_DMA_Init+0x438>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d008      	beq.n	800671e <HAL_DMA_Init+0x3e6>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a18      	ldr	r2, [pc, #96]	; (8006774 <HAL_DMA_Init+0x43c>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d003      	beq.n	800671e <HAL_DMA_Init+0x3e6>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a17      	ldr	r2, [pc, #92]	; (8006778 <HAL_DMA_Init+0x440>)
 800671c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2202      	movs	r2, #2
 8006722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	4b10      	ldr	r3, [pc, #64]	; (800677c <HAL_DMA_Init+0x444>)
 800673a:	4013      	ands	r3, r2
 800673c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	2b40      	cmp	r3, #64	; 0x40
 8006744:	d01c      	beq.n	8006780 <HAL_DMA_Init+0x448>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	2b80      	cmp	r3, #128	; 0x80
 800674c:	d102      	bne.n	8006754 <HAL_DMA_Init+0x41c>
 800674e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006752:	e016      	b.n	8006782 <HAL_DMA_Init+0x44a>
 8006754:	2300      	movs	r3, #0
 8006756:	e014      	b.n	8006782 <HAL_DMA_Init+0x44a>
 8006758:	fe10803f 	.word	0xfe10803f
 800675c:	58025408 	.word	0x58025408
 8006760:	5802541c 	.word	0x5802541c
 8006764:	58025430 	.word	0x58025430
 8006768:	58025444 	.word	0x58025444
 800676c:	58025458 	.word	0x58025458
 8006770:	5802546c 	.word	0x5802546c
 8006774:	58025480 	.word	0x58025480
 8006778:	58025494 	.word	0x58025494
 800677c:	fffe000f 	.word	0xfffe000f
 8006780:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	68d2      	ldr	r2, [r2, #12]
 8006786:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006788:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006790:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006798:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80067a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	69db      	ldr	r3, [r3, #28]
 80067a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80067a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80067b0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80067b2:	697a      	ldr	r2, [r7, #20]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	461a      	mov	r2, r3
 80067c6:	4b6e      	ldr	r3, [pc, #440]	; (8006980 <HAL_DMA_Init+0x648>)
 80067c8:	4413      	add	r3, r2
 80067ca:	4a6e      	ldr	r2, [pc, #440]	; (8006984 <HAL_DMA_Init+0x64c>)
 80067cc:	fba2 2303 	umull	r2, r3, r2, r3
 80067d0:	091b      	lsrs	r3, r3, #4
 80067d2:	009a      	lsls	r2, r3, #2
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f001 fc45 	bl	8008068 <DMA_CalcBaseAndBitshift>
 80067de:	4603      	mov	r3, r0
 80067e0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067e6:	f003 031f 	and.w	r3, r3, #31
 80067ea:	2201      	movs	r2, #1
 80067ec:	409a      	lsls	r2, r3
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	605a      	str	r2, [r3, #4]
 80067f2:	e008      	b.n	8006806 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2240      	movs	r2, #64	; 0x40
 80067f8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2203      	movs	r2, #3
 80067fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e0b7      	b.n	8006976 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a5f      	ldr	r2, [pc, #380]	; (8006988 <HAL_DMA_Init+0x650>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d072      	beq.n	80068f6 <HAL_DMA_Init+0x5be>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a5d      	ldr	r2, [pc, #372]	; (800698c <HAL_DMA_Init+0x654>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d06d      	beq.n	80068f6 <HAL_DMA_Init+0x5be>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a5c      	ldr	r2, [pc, #368]	; (8006990 <HAL_DMA_Init+0x658>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d068      	beq.n	80068f6 <HAL_DMA_Init+0x5be>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a5a      	ldr	r2, [pc, #360]	; (8006994 <HAL_DMA_Init+0x65c>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d063      	beq.n	80068f6 <HAL_DMA_Init+0x5be>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a59      	ldr	r2, [pc, #356]	; (8006998 <HAL_DMA_Init+0x660>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d05e      	beq.n	80068f6 <HAL_DMA_Init+0x5be>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a57      	ldr	r2, [pc, #348]	; (800699c <HAL_DMA_Init+0x664>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d059      	beq.n	80068f6 <HAL_DMA_Init+0x5be>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a56      	ldr	r2, [pc, #344]	; (80069a0 <HAL_DMA_Init+0x668>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d054      	beq.n	80068f6 <HAL_DMA_Init+0x5be>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a54      	ldr	r2, [pc, #336]	; (80069a4 <HAL_DMA_Init+0x66c>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d04f      	beq.n	80068f6 <HAL_DMA_Init+0x5be>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a53      	ldr	r2, [pc, #332]	; (80069a8 <HAL_DMA_Init+0x670>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d04a      	beq.n	80068f6 <HAL_DMA_Init+0x5be>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a51      	ldr	r2, [pc, #324]	; (80069ac <HAL_DMA_Init+0x674>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d045      	beq.n	80068f6 <HAL_DMA_Init+0x5be>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a50      	ldr	r2, [pc, #320]	; (80069b0 <HAL_DMA_Init+0x678>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d040      	beq.n	80068f6 <HAL_DMA_Init+0x5be>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a4e      	ldr	r2, [pc, #312]	; (80069b4 <HAL_DMA_Init+0x67c>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d03b      	beq.n	80068f6 <HAL_DMA_Init+0x5be>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a4d      	ldr	r2, [pc, #308]	; (80069b8 <HAL_DMA_Init+0x680>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d036      	beq.n	80068f6 <HAL_DMA_Init+0x5be>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a4b      	ldr	r2, [pc, #300]	; (80069bc <HAL_DMA_Init+0x684>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d031      	beq.n	80068f6 <HAL_DMA_Init+0x5be>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a4a      	ldr	r2, [pc, #296]	; (80069c0 <HAL_DMA_Init+0x688>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d02c      	beq.n	80068f6 <HAL_DMA_Init+0x5be>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a48      	ldr	r2, [pc, #288]	; (80069c4 <HAL_DMA_Init+0x68c>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d027      	beq.n	80068f6 <HAL_DMA_Init+0x5be>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a47      	ldr	r2, [pc, #284]	; (80069c8 <HAL_DMA_Init+0x690>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d022      	beq.n	80068f6 <HAL_DMA_Init+0x5be>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a45      	ldr	r2, [pc, #276]	; (80069cc <HAL_DMA_Init+0x694>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d01d      	beq.n	80068f6 <HAL_DMA_Init+0x5be>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a44      	ldr	r2, [pc, #272]	; (80069d0 <HAL_DMA_Init+0x698>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d018      	beq.n	80068f6 <HAL_DMA_Init+0x5be>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a42      	ldr	r2, [pc, #264]	; (80069d4 <HAL_DMA_Init+0x69c>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d013      	beq.n	80068f6 <HAL_DMA_Init+0x5be>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a41      	ldr	r2, [pc, #260]	; (80069d8 <HAL_DMA_Init+0x6a0>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d00e      	beq.n	80068f6 <HAL_DMA_Init+0x5be>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a3f      	ldr	r2, [pc, #252]	; (80069dc <HAL_DMA_Init+0x6a4>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d009      	beq.n	80068f6 <HAL_DMA_Init+0x5be>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a3e      	ldr	r2, [pc, #248]	; (80069e0 <HAL_DMA_Init+0x6a8>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d004      	beq.n	80068f6 <HAL_DMA_Init+0x5be>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a3c      	ldr	r2, [pc, #240]	; (80069e4 <HAL_DMA_Init+0x6ac>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d101      	bne.n	80068fa <HAL_DMA_Init+0x5c2>
 80068f6:	2301      	movs	r3, #1
 80068f8:	e000      	b.n	80068fc <HAL_DMA_Init+0x5c4>
 80068fa:	2300      	movs	r3, #0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d032      	beq.n	8006966 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f001 fcdf 	bl	80082c4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	2b80      	cmp	r3, #128	; 0x80
 800690c:	d102      	bne.n	8006914 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	685a      	ldr	r2, [r3, #4]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800691c:	b2d2      	uxtb	r2, r2
 800691e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006928:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d010      	beq.n	8006954 <HAL_DMA_Init+0x61c>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	2b08      	cmp	r3, #8
 8006938:	d80c      	bhi.n	8006954 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f001 fd5c 	bl	80083f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006944:	2200      	movs	r2, #0
 8006946:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006950:	605a      	str	r2, [r3, #4]
 8006952:	e008      	b.n	8006966 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3718      	adds	r7, #24
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	a7fdabf8 	.word	0xa7fdabf8
 8006984:	cccccccd 	.word	0xcccccccd
 8006988:	40020010 	.word	0x40020010
 800698c:	40020028 	.word	0x40020028
 8006990:	40020040 	.word	0x40020040
 8006994:	40020058 	.word	0x40020058
 8006998:	40020070 	.word	0x40020070
 800699c:	40020088 	.word	0x40020088
 80069a0:	400200a0 	.word	0x400200a0
 80069a4:	400200b8 	.word	0x400200b8
 80069a8:	40020410 	.word	0x40020410
 80069ac:	40020428 	.word	0x40020428
 80069b0:	40020440 	.word	0x40020440
 80069b4:	40020458 	.word	0x40020458
 80069b8:	40020470 	.word	0x40020470
 80069bc:	40020488 	.word	0x40020488
 80069c0:	400204a0 	.word	0x400204a0
 80069c4:	400204b8 	.word	0x400204b8
 80069c8:	58025408 	.word	0x58025408
 80069cc:	5802541c 	.word	0x5802541c
 80069d0:	58025430 	.word	0x58025430
 80069d4:	58025444 	.word	0x58025444
 80069d8:	58025458 	.word	0x58025458
 80069dc:	5802546c 	.word	0x5802546c
 80069e0:	58025480 	.word	0x58025480
 80069e4:	58025494 	.word	0x58025494

080069e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b086      	sub	sp, #24
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
 80069f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069f6:	2300      	movs	r3, #0
 80069f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d101      	bne.n	8006a04 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e226      	b.n	8006e52 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d101      	bne.n	8006a12 <HAL_DMA_Start_IT+0x2a>
 8006a0e:	2302      	movs	r3, #2
 8006a10:	e21f      	b.n	8006e52 <HAL_DMA_Start_IT+0x46a>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	f040 820a 	bne.w	8006e3c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2202      	movs	r2, #2
 8006a2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2200      	movs	r2, #0
 8006a34:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a68      	ldr	r2, [pc, #416]	; (8006bdc <HAL_DMA_Start_IT+0x1f4>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d04a      	beq.n	8006ad6 <HAL_DMA_Start_IT+0xee>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a66      	ldr	r2, [pc, #408]	; (8006be0 <HAL_DMA_Start_IT+0x1f8>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d045      	beq.n	8006ad6 <HAL_DMA_Start_IT+0xee>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a65      	ldr	r2, [pc, #404]	; (8006be4 <HAL_DMA_Start_IT+0x1fc>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d040      	beq.n	8006ad6 <HAL_DMA_Start_IT+0xee>
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a63      	ldr	r2, [pc, #396]	; (8006be8 <HAL_DMA_Start_IT+0x200>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d03b      	beq.n	8006ad6 <HAL_DMA_Start_IT+0xee>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a62      	ldr	r2, [pc, #392]	; (8006bec <HAL_DMA_Start_IT+0x204>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d036      	beq.n	8006ad6 <HAL_DMA_Start_IT+0xee>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a60      	ldr	r2, [pc, #384]	; (8006bf0 <HAL_DMA_Start_IT+0x208>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d031      	beq.n	8006ad6 <HAL_DMA_Start_IT+0xee>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a5f      	ldr	r2, [pc, #380]	; (8006bf4 <HAL_DMA_Start_IT+0x20c>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d02c      	beq.n	8006ad6 <HAL_DMA_Start_IT+0xee>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a5d      	ldr	r2, [pc, #372]	; (8006bf8 <HAL_DMA_Start_IT+0x210>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d027      	beq.n	8006ad6 <HAL_DMA_Start_IT+0xee>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a5c      	ldr	r2, [pc, #368]	; (8006bfc <HAL_DMA_Start_IT+0x214>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d022      	beq.n	8006ad6 <HAL_DMA_Start_IT+0xee>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a5a      	ldr	r2, [pc, #360]	; (8006c00 <HAL_DMA_Start_IT+0x218>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d01d      	beq.n	8006ad6 <HAL_DMA_Start_IT+0xee>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a59      	ldr	r2, [pc, #356]	; (8006c04 <HAL_DMA_Start_IT+0x21c>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d018      	beq.n	8006ad6 <HAL_DMA_Start_IT+0xee>
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a57      	ldr	r2, [pc, #348]	; (8006c08 <HAL_DMA_Start_IT+0x220>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d013      	beq.n	8006ad6 <HAL_DMA_Start_IT+0xee>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a56      	ldr	r2, [pc, #344]	; (8006c0c <HAL_DMA_Start_IT+0x224>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d00e      	beq.n	8006ad6 <HAL_DMA_Start_IT+0xee>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a54      	ldr	r2, [pc, #336]	; (8006c10 <HAL_DMA_Start_IT+0x228>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d009      	beq.n	8006ad6 <HAL_DMA_Start_IT+0xee>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a53      	ldr	r2, [pc, #332]	; (8006c14 <HAL_DMA_Start_IT+0x22c>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d004      	beq.n	8006ad6 <HAL_DMA_Start_IT+0xee>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a51      	ldr	r2, [pc, #324]	; (8006c18 <HAL_DMA_Start_IT+0x230>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d108      	bne.n	8006ae8 <HAL_DMA_Start_IT+0x100>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f022 0201 	bic.w	r2, r2, #1
 8006ae4:	601a      	str	r2, [r3, #0]
 8006ae6:	e007      	b.n	8006af8 <HAL_DMA_Start_IT+0x110>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f022 0201 	bic.w	r2, r2, #1
 8006af6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	68b9      	ldr	r1, [r7, #8]
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	f001 f906 	bl	8007d10 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a34      	ldr	r2, [pc, #208]	; (8006bdc <HAL_DMA_Start_IT+0x1f4>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d04a      	beq.n	8006ba4 <HAL_DMA_Start_IT+0x1bc>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a33      	ldr	r2, [pc, #204]	; (8006be0 <HAL_DMA_Start_IT+0x1f8>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d045      	beq.n	8006ba4 <HAL_DMA_Start_IT+0x1bc>
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a31      	ldr	r2, [pc, #196]	; (8006be4 <HAL_DMA_Start_IT+0x1fc>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d040      	beq.n	8006ba4 <HAL_DMA_Start_IT+0x1bc>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a30      	ldr	r2, [pc, #192]	; (8006be8 <HAL_DMA_Start_IT+0x200>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d03b      	beq.n	8006ba4 <HAL_DMA_Start_IT+0x1bc>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a2e      	ldr	r2, [pc, #184]	; (8006bec <HAL_DMA_Start_IT+0x204>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d036      	beq.n	8006ba4 <HAL_DMA_Start_IT+0x1bc>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a2d      	ldr	r2, [pc, #180]	; (8006bf0 <HAL_DMA_Start_IT+0x208>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d031      	beq.n	8006ba4 <HAL_DMA_Start_IT+0x1bc>
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a2b      	ldr	r2, [pc, #172]	; (8006bf4 <HAL_DMA_Start_IT+0x20c>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d02c      	beq.n	8006ba4 <HAL_DMA_Start_IT+0x1bc>
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a2a      	ldr	r2, [pc, #168]	; (8006bf8 <HAL_DMA_Start_IT+0x210>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d027      	beq.n	8006ba4 <HAL_DMA_Start_IT+0x1bc>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a28      	ldr	r2, [pc, #160]	; (8006bfc <HAL_DMA_Start_IT+0x214>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d022      	beq.n	8006ba4 <HAL_DMA_Start_IT+0x1bc>
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a27      	ldr	r2, [pc, #156]	; (8006c00 <HAL_DMA_Start_IT+0x218>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d01d      	beq.n	8006ba4 <HAL_DMA_Start_IT+0x1bc>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a25      	ldr	r2, [pc, #148]	; (8006c04 <HAL_DMA_Start_IT+0x21c>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d018      	beq.n	8006ba4 <HAL_DMA_Start_IT+0x1bc>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a24      	ldr	r2, [pc, #144]	; (8006c08 <HAL_DMA_Start_IT+0x220>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d013      	beq.n	8006ba4 <HAL_DMA_Start_IT+0x1bc>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a22      	ldr	r2, [pc, #136]	; (8006c0c <HAL_DMA_Start_IT+0x224>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d00e      	beq.n	8006ba4 <HAL_DMA_Start_IT+0x1bc>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a21      	ldr	r2, [pc, #132]	; (8006c10 <HAL_DMA_Start_IT+0x228>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d009      	beq.n	8006ba4 <HAL_DMA_Start_IT+0x1bc>
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a1f      	ldr	r2, [pc, #124]	; (8006c14 <HAL_DMA_Start_IT+0x22c>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d004      	beq.n	8006ba4 <HAL_DMA_Start_IT+0x1bc>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a1e      	ldr	r2, [pc, #120]	; (8006c18 <HAL_DMA_Start_IT+0x230>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d101      	bne.n	8006ba8 <HAL_DMA_Start_IT+0x1c0>
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e000      	b.n	8006baa <HAL_DMA_Start_IT+0x1c2>
 8006ba8:	2300      	movs	r3, #0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d036      	beq.n	8006c1c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f023 021e 	bic.w	r2, r3, #30
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f042 0216 	orr.w	r2, r2, #22
 8006bc0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d03e      	beq.n	8006c48 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f042 0208 	orr.w	r2, r2, #8
 8006bd8:	601a      	str	r2, [r3, #0]
 8006bda:	e035      	b.n	8006c48 <HAL_DMA_Start_IT+0x260>
 8006bdc:	40020010 	.word	0x40020010
 8006be0:	40020028 	.word	0x40020028
 8006be4:	40020040 	.word	0x40020040
 8006be8:	40020058 	.word	0x40020058
 8006bec:	40020070 	.word	0x40020070
 8006bf0:	40020088 	.word	0x40020088
 8006bf4:	400200a0 	.word	0x400200a0
 8006bf8:	400200b8 	.word	0x400200b8
 8006bfc:	40020410 	.word	0x40020410
 8006c00:	40020428 	.word	0x40020428
 8006c04:	40020440 	.word	0x40020440
 8006c08:	40020458 	.word	0x40020458
 8006c0c:	40020470 	.word	0x40020470
 8006c10:	40020488 	.word	0x40020488
 8006c14:	400204a0 	.word	0x400204a0
 8006c18:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f023 020e 	bic.w	r2, r3, #14
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f042 020a 	orr.w	r2, r2, #10
 8006c2e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d007      	beq.n	8006c48 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f042 0204 	orr.w	r2, r2, #4
 8006c46:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a83      	ldr	r2, [pc, #524]	; (8006e5c <HAL_DMA_Start_IT+0x474>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d072      	beq.n	8006d38 <HAL_DMA_Start_IT+0x350>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a82      	ldr	r2, [pc, #520]	; (8006e60 <HAL_DMA_Start_IT+0x478>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d06d      	beq.n	8006d38 <HAL_DMA_Start_IT+0x350>
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a80      	ldr	r2, [pc, #512]	; (8006e64 <HAL_DMA_Start_IT+0x47c>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d068      	beq.n	8006d38 <HAL_DMA_Start_IT+0x350>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a7f      	ldr	r2, [pc, #508]	; (8006e68 <HAL_DMA_Start_IT+0x480>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d063      	beq.n	8006d38 <HAL_DMA_Start_IT+0x350>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a7d      	ldr	r2, [pc, #500]	; (8006e6c <HAL_DMA_Start_IT+0x484>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d05e      	beq.n	8006d38 <HAL_DMA_Start_IT+0x350>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a7c      	ldr	r2, [pc, #496]	; (8006e70 <HAL_DMA_Start_IT+0x488>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d059      	beq.n	8006d38 <HAL_DMA_Start_IT+0x350>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a7a      	ldr	r2, [pc, #488]	; (8006e74 <HAL_DMA_Start_IT+0x48c>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d054      	beq.n	8006d38 <HAL_DMA_Start_IT+0x350>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a79      	ldr	r2, [pc, #484]	; (8006e78 <HAL_DMA_Start_IT+0x490>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d04f      	beq.n	8006d38 <HAL_DMA_Start_IT+0x350>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a77      	ldr	r2, [pc, #476]	; (8006e7c <HAL_DMA_Start_IT+0x494>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d04a      	beq.n	8006d38 <HAL_DMA_Start_IT+0x350>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a76      	ldr	r2, [pc, #472]	; (8006e80 <HAL_DMA_Start_IT+0x498>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d045      	beq.n	8006d38 <HAL_DMA_Start_IT+0x350>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a74      	ldr	r2, [pc, #464]	; (8006e84 <HAL_DMA_Start_IT+0x49c>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d040      	beq.n	8006d38 <HAL_DMA_Start_IT+0x350>
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a73      	ldr	r2, [pc, #460]	; (8006e88 <HAL_DMA_Start_IT+0x4a0>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d03b      	beq.n	8006d38 <HAL_DMA_Start_IT+0x350>
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a71      	ldr	r2, [pc, #452]	; (8006e8c <HAL_DMA_Start_IT+0x4a4>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d036      	beq.n	8006d38 <HAL_DMA_Start_IT+0x350>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a70      	ldr	r2, [pc, #448]	; (8006e90 <HAL_DMA_Start_IT+0x4a8>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d031      	beq.n	8006d38 <HAL_DMA_Start_IT+0x350>
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a6e      	ldr	r2, [pc, #440]	; (8006e94 <HAL_DMA_Start_IT+0x4ac>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d02c      	beq.n	8006d38 <HAL_DMA_Start_IT+0x350>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a6d      	ldr	r2, [pc, #436]	; (8006e98 <HAL_DMA_Start_IT+0x4b0>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d027      	beq.n	8006d38 <HAL_DMA_Start_IT+0x350>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a6b      	ldr	r2, [pc, #428]	; (8006e9c <HAL_DMA_Start_IT+0x4b4>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d022      	beq.n	8006d38 <HAL_DMA_Start_IT+0x350>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a6a      	ldr	r2, [pc, #424]	; (8006ea0 <HAL_DMA_Start_IT+0x4b8>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d01d      	beq.n	8006d38 <HAL_DMA_Start_IT+0x350>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a68      	ldr	r2, [pc, #416]	; (8006ea4 <HAL_DMA_Start_IT+0x4bc>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d018      	beq.n	8006d38 <HAL_DMA_Start_IT+0x350>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a67      	ldr	r2, [pc, #412]	; (8006ea8 <HAL_DMA_Start_IT+0x4c0>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d013      	beq.n	8006d38 <HAL_DMA_Start_IT+0x350>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a65      	ldr	r2, [pc, #404]	; (8006eac <HAL_DMA_Start_IT+0x4c4>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d00e      	beq.n	8006d38 <HAL_DMA_Start_IT+0x350>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a64      	ldr	r2, [pc, #400]	; (8006eb0 <HAL_DMA_Start_IT+0x4c8>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d009      	beq.n	8006d38 <HAL_DMA_Start_IT+0x350>
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a62      	ldr	r2, [pc, #392]	; (8006eb4 <HAL_DMA_Start_IT+0x4cc>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d004      	beq.n	8006d38 <HAL_DMA_Start_IT+0x350>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a61      	ldr	r2, [pc, #388]	; (8006eb8 <HAL_DMA_Start_IT+0x4d0>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d101      	bne.n	8006d3c <HAL_DMA_Start_IT+0x354>
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e000      	b.n	8006d3e <HAL_DMA_Start_IT+0x356>
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d01a      	beq.n	8006d78 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d007      	beq.n	8006d60 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d5e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d007      	beq.n	8006d78 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d76:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a37      	ldr	r2, [pc, #220]	; (8006e5c <HAL_DMA_Start_IT+0x474>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d04a      	beq.n	8006e18 <HAL_DMA_Start_IT+0x430>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a36      	ldr	r2, [pc, #216]	; (8006e60 <HAL_DMA_Start_IT+0x478>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d045      	beq.n	8006e18 <HAL_DMA_Start_IT+0x430>
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a34      	ldr	r2, [pc, #208]	; (8006e64 <HAL_DMA_Start_IT+0x47c>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d040      	beq.n	8006e18 <HAL_DMA_Start_IT+0x430>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a33      	ldr	r2, [pc, #204]	; (8006e68 <HAL_DMA_Start_IT+0x480>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d03b      	beq.n	8006e18 <HAL_DMA_Start_IT+0x430>
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a31      	ldr	r2, [pc, #196]	; (8006e6c <HAL_DMA_Start_IT+0x484>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d036      	beq.n	8006e18 <HAL_DMA_Start_IT+0x430>
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a30      	ldr	r2, [pc, #192]	; (8006e70 <HAL_DMA_Start_IT+0x488>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d031      	beq.n	8006e18 <HAL_DMA_Start_IT+0x430>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a2e      	ldr	r2, [pc, #184]	; (8006e74 <HAL_DMA_Start_IT+0x48c>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d02c      	beq.n	8006e18 <HAL_DMA_Start_IT+0x430>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a2d      	ldr	r2, [pc, #180]	; (8006e78 <HAL_DMA_Start_IT+0x490>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d027      	beq.n	8006e18 <HAL_DMA_Start_IT+0x430>
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a2b      	ldr	r2, [pc, #172]	; (8006e7c <HAL_DMA_Start_IT+0x494>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d022      	beq.n	8006e18 <HAL_DMA_Start_IT+0x430>
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a2a      	ldr	r2, [pc, #168]	; (8006e80 <HAL_DMA_Start_IT+0x498>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d01d      	beq.n	8006e18 <HAL_DMA_Start_IT+0x430>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a28      	ldr	r2, [pc, #160]	; (8006e84 <HAL_DMA_Start_IT+0x49c>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d018      	beq.n	8006e18 <HAL_DMA_Start_IT+0x430>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a27      	ldr	r2, [pc, #156]	; (8006e88 <HAL_DMA_Start_IT+0x4a0>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d013      	beq.n	8006e18 <HAL_DMA_Start_IT+0x430>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a25      	ldr	r2, [pc, #148]	; (8006e8c <HAL_DMA_Start_IT+0x4a4>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d00e      	beq.n	8006e18 <HAL_DMA_Start_IT+0x430>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a24      	ldr	r2, [pc, #144]	; (8006e90 <HAL_DMA_Start_IT+0x4a8>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d009      	beq.n	8006e18 <HAL_DMA_Start_IT+0x430>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a22      	ldr	r2, [pc, #136]	; (8006e94 <HAL_DMA_Start_IT+0x4ac>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d004      	beq.n	8006e18 <HAL_DMA_Start_IT+0x430>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a21      	ldr	r2, [pc, #132]	; (8006e98 <HAL_DMA_Start_IT+0x4b0>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d108      	bne.n	8006e2a <HAL_DMA_Start_IT+0x442>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f042 0201 	orr.w	r2, r2, #1
 8006e26:	601a      	str	r2, [r3, #0]
 8006e28:	e012      	b.n	8006e50 <HAL_DMA_Start_IT+0x468>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f042 0201 	orr.w	r2, r2, #1
 8006e38:	601a      	str	r2, [r3, #0]
 8006e3a:	e009      	b.n	8006e50 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e42:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006e50:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3718      	adds	r7, #24
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	40020010 	.word	0x40020010
 8006e60:	40020028 	.word	0x40020028
 8006e64:	40020040 	.word	0x40020040
 8006e68:	40020058 	.word	0x40020058
 8006e6c:	40020070 	.word	0x40020070
 8006e70:	40020088 	.word	0x40020088
 8006e74:	400200a0 	.word	0x400200a0
 8006e78:	400200b8 	.word	0x400200b8
 8006e7c:	40020410 	.word	0x40020410
 8006e80:	40020428 	.word	0x40020428
 8006e84:	40020440 	.word	0x40020440
 8006e88:	40020458 	.word	0x40020458
 8006e8c:	40020470 	.word	0x40020470
 8006e90:	40020488 	.word	0x40020488
 8006e94:	400204a0 	.word	0x400204a0
 8006e98:	400204b8 	.word	0x400204b8
 8006e9c:	58025408 	.word	0x58025408
 8006ea0:	5802541c 	.word	0x5802541c
 8006ea4:	58025430 	.word	0x58025430
 8006ea8:	58025444 	.word	0x58025444
 8006eac:	58025458 	.word	0x58025458
 8006eb0:	5802546c 	.word	0x5802546c
 8006eb4:	58025480 	.word	0x58025480
 8006eb8:	58025494 	.word	0x58025494

08006ebc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b08a      	sub	sp, #40	; 0x28
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006ec8:	4b67      	ldr	r3, [pc, #412]	; (8007068 <HAL_DMA_IRQHandler+0x1ac>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a67      	ldr	r2, [pc, #412]	; (800706c <HAL_DMA_IRQHandler+0x1b0>)
 8006ece:	fba2 2303 	umull	r2, r3, r2, r3
 8006ed2:	0a9b      	lsrs	r3, r3, #10
 8006ed4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eda:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ee0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006ee2:	6a3b      	ldr	r3, [r7, #32]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a5f      	ldr	r2, [pc, #380]	; (8007070 <HAL_DMA_IRQHandler+0x1b4>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d04a      	beq.n	8006f8e <HAL_DMA_IRQHandler+0xd2>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a5d      	ldr	r2, [pc, #372]	; (8007074 <HAL_DMA_IRQHandler+0x1b8>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d045      	beq.n	8006f8e <HAL_DMA_IRQHandler+0xd2>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a5c      	ldr	r2, [pc, #368]	; (8007078 <HAL_DMA_IRQHandler+0x1bc>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d040      	beq.n	8006f8e <HAL_DMA_IRQHandler+0xd2>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a5a      	ldr	r2, [pc, #360]	; (800707c <HAL_DMA_IRQHandler+0x1c0>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d03b      	beq.n	8006f8e <HAL_DMA_IRQHandler+0xd2>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a59      	ldr	r2, [pc, #356]	; (8007080 <HAL_DMA_IRQHandler+0x1c4>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d036      	beq.n	8006f8e <HAL_DMA_IRQHandler+0xd2>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a57      	ldr	r2, [pc, #348]	; (8007084 <HAL_DMA_IRQHandler+0x1c8>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d031      	beq.n	8006f8e <HAL_DMA_IRQHandler+0xd2>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a56      	ldr	r2, [pc, #344]	; (8007088 <HAL_DMA_IRQHandler+0x1cc>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d02c      	beq.n	8006f8e <HAL_DMA_IRQHandler+0xd2>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a54      	ldr	r2, [pc, #336]	; (800708c <HAL_DMA_IRQHandler+0x1d0>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d027      	beq.n	8006f8e <HAL_DMA_IRQHandler+0xd2>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a53      	ldr	r2, [pc, #332]	; (8007090 <HAL_DMA_IRQHandler+0x1d4>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d022      	beq.n	8006f8e <HAL_DMA_IRQHandler+0xd2>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a51      	ldr	r2, [pc, #324]	; (8007094 <HAL_DMA_IRQHandler+0x1d8>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d01d      	beq.n	8006f8e <HAL_DMA_IRQHandler+0xd2>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a50      	ldr	r2, [pc, #320]	; (8007098 <HAL_DMA_IRQHandler+0x1dc>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d018      	beq.n	8006f8e <HAL_DMA_IRQHandler+0xd2>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a4e      	ldr	r2, [pc, #312]	; (800709c <HAL_DMA_IRQHandler+0x1e0>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d013      	beq.n	8006f8e <HAL_DMA_IRQHandler+0xd2>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a4d      	ldr	r2, [pc, #308]	; (80070a0 <HAL_DMA_IRQHandler+0x1e4>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d00e      	beq.n	8006f8e <HAL_DMA_IRQHandler+0xd2>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a4b      	ldr	r2, [pc, #300]	; (80070a4 <HAL_DMA_IRQHandler+0x1e8>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d009      	beq.n	8006f8e <HAL_DMA_IRQHandler+0xd2>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a4a      	ldr	r2, [pc, #296]	; (80070a8 <HAL_DMA_IRQHandler+0x1ec>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d004      	beq.n	8006f8e <HAL_DMA_IRQHandler+0xd2>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a48      	ldr	r2, [pc, #288]	; (80070ac <HAL_DMA_IRQHandler+0x1f0>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d101      	bne.n	8006f92 <HAL_DMA_IRQHandler+0xd6>
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e000      	b.n	8006f94 <HAL_DMA_IRQHandler+0xd8>
 8006f92:	2300      	movs	r3, #0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f000 842b 	beq.w	80077f0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f9e:	f003 031f 	and.w	r3, r3, #31
 8006fa2:	2208      	movs	r2, #8
 8006fa4:	409a      	lsls	r2, r3
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	4013      	ands	r3, r2
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	f000 80a2 	beq.w	80070f4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a2e      	ldr	r2, [pc, #184]	; (8007070 <HAL_DMA_IRQHandler+0x1b4>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d04a      	beq.n	8007050 <HAL_DMA_IRQHandler+0x194>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a2d      	ldr	r2, [pc, #180]	; (8007074 <HAL_DMA_IRQHandler+0x1b8>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d045      	beq.n	8007050 <HAL_DMA_IRQHandler+0x194>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a2b      	ldr	r2, [pc, #172]	; (8007078 <HAL_DMA_IRQHandler+0x1bc>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d040      	beq.n	8007050 <HAL_DMA_IRQHandler+0x194>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a2a      	ldr	r2, [pc, #168]	; (800707c <HAL_DMA_IRQHandler+0x1c0>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d03b      	beq.n	8007050 <HAL_DMA_IRQHandler+0x194>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a28      	ldr	r2, [pc, #160]	; (8007080 <HAL_DMA_IRQHandler+0x1c4>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d036      	beq.n	8007050 <HAL_DMA_IRQHandler+0x194>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a27      	ldr	r2, [pc, #156]	; (8007084 <HAL_DMA_IRQHandler+0x1c8>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d031      	beq.n	8007050 <HAL_DMA_IRQHandler+0x194>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a25      	ldr	r2, [pc, #148]	; (8007088 <HAL_DMA_IRQHandler+0x1cc>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d02c      	beq.n	8007050 <HAL_DMA_IRQHandler+0x194>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a24      	ldr	r2, [pc, #144]	; (800708c <HAL_DMA_IRQHandler+0x1d0>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d027      	beq.n	8007050 <HAL_DMA_IRQHandler+0x194>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a22      	ldr	r2, [pc, #136]	; (8007090 <HAL_DMA_IRQHandler+0x1d4>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d022      	beq.n	8007050 <HAL_DMA_IRQHandler+0x194>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a21      	ldr	r2, [pc, #132]	; (8007094 <HAL_DMA_IRQHandler+0x1d8>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d01d      	beq.n	8007050 <HAL_DMA_IRQHandler+0x194>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a1f      	ldr	r2, [pc, #124]	; (8007098 <HAL_DMA_IRQHandler+0x1dc>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d018      	beq.n	8007050 <HAL_DMA_IRQHandler+0x194>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a1e      	ldr	r2, [pc, #120]	; (800709c <HAL_DMA_IRQHandler+0x1e0>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d013      	beq.n	8007050 <HAL_DMA_IRQHandler+0x194>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a1c      	ldr	r2, [pc, #112]	; (80070a0 <HAL_DMA_IRQHandler+0x1e4>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d00e      	beq.n	8007050 <HAL_DMA_IRQHandler+0x194>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a1b      	ldr	r2, [pc, #108]	; (80070a4 <HAL_DMA_IRQHandler+0x1e8>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d009      	beq.n	8007050 <HAL_DMA_IRQHandler+0x194>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a19      	ldr	r2, [pc, #100]	; (80070a8 <HAL_DMA_IRQHandler+0x1ec>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d004      	beq.n	8007050 <HAL_DMA_IRQHandler+0x194>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a18      	ldr	r2, [pc, #96]	; (80070ac <HAL_DMA_IRQHandler+0x1f0>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d12f      	bne.n	80070b0 <HAL_DMA_IRQHandler+0x1f4>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0304 	and.w	r3, r3, #4
 800705a:	2b00      	cmp	r3, #0
 800705c:	bf14      	ite	ne
 800705e:	2301      	movne	r3, #1
 8007060:	2300      	moveq	r3, #0
 8007062:	b2db      	uxtb	r3, r3
 8007064:	e02e      	b.n	80070c4 <HAL_DMA_IRQHandler+0x208>
 8007066:	bf00      	nop
 8007068:	24000000 	.word	0x24000000
 800706c:	1b4e81b5 	.word	0x1b4e81b5
 8007070:	40020010 	.word	0x40020010
 8007074:	40020028 	.word	0x40020028
 8007078:	40020040 	.word	0x40020040
 800707c:	40020058 	.word	0x40020058
 8007080:	40020070 	.word	0x40020070
 8007084:	40020088 	.word	0x40020088
 8007088:	400200a0 	.word	0x400200a0
 800708c:	400200b8 	.word	0x400200b8
 8007090:	40020410 	.word	0x40020410
 8007094:	40020428 	.word	0x40020428
 8007098:	40020440 	.word	0x40020440
 800709c:	40020458 	.word	0x40020458
 80070a0:	40020470 	.word	0x40020470
 80070a4:	40020488 	.word	0x40020488
 80070a8:	400204a0 	.word	0x400204a0
 80070ac:	400204b8 	.word	0x400204b8
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 0308 	and.w	r3, r3, #8
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	bf14      	ite	ne
 80070be:	2301      	movne	r3, #1
 80070c0:	2300      	moveq	r3, #0
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d015      	beq.n	80070f4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f022 0204 	bic.w	r2, r2, #4
 80070d6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070dc:	f003 031f 	and.w	r3, r3, #31
 80070e0:	2208      	movs	r2, #8
 80070e2:	409a      	lsls	r2, r3
 80070e4:	6a3b      	ldr	r3, [r7, #32]
 80070e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ec:	f043 0201 	orr.w	r2, r3, #1
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070f8:	f003 031f 	and.w	r3, r3, #31
 80070fc:	69ba      	ldr	r2, [r7, #24]
 80070fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007102:	f003 0301 	and.w	r3, r3, #1
 8007106:	2b00      	cmp	r3, #0
 8007108:	d06e      	beq.n	80071e8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a69      	ldr	r2, [pc, #420]	; (80072b4 <HAL_DMA_IRQHandler+0x3f8>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d04a      	beq.n	80071aa <HAL_DMA_IRQHandler+0x2ee>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a67      	ldr	r2, [pc, #412]	; (80072b8 <HAL_DMA_IRQHandler+0x3fc>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d045      	beq.n	80071aa <HAL_DMA_IRQHandler+0x2ee>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a66      	ldr	r2, [pc, #408]	; (80072bc <HAL_DMA_IRQHandler+0x400>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d040      	beq.n	80071aa <HAL_DMA_IRQHandler+0x2ee>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a64      	ldr	r2, [pc, #400]	; (80072c0 <HAL_DMA_IRQHandler+0x404>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d03b      	beq.n	80071aa <HAL_DMA_IRQHandler+0x2ee>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a63      	ldr	r2, [pc, #396]	; (80072c4 <HAL_DMA_IRQHandler+0x408>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d036      	beq.n	80071aa <HAL_DMA_IRQHandler+0x2ee>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a61      	ldr	r2, [pc, #388]	; (80072c8 <HAL_DMA_IRQHandler+0x40c>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d031      	beq.n	80071aa <HAL_DMA_IRQHandler+0x2ee>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a60      	ldr	r2, [pc, #384]	; (80072cc <HAL_DMA_IRQHandler+0x410>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d02c      	beq.n	80071aa <HAL_DMA_IRQHandler+0x2ee>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a5e      	ldr	r2, [pc, #376]	; (80072d0 <HAL_DMA_IRQHandler+0x414>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d027      	beq.n	80071aa <HAL_DMA_IRQHandler+0x2ee>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a5d      	ldr	r2, [pc, #372]	; (80072d4 <HAL_DMA_IRQHandler+0x418>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d022      	beq.n	80071aa <HAL_DMA_IRQHandler+0x2ee>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a5b      	ldr	r2, [pc, #364]	; (80072d8 <HAL_DMA_IRQHandler+0x41c>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d01d      	beq.n	80071aa <HAL_DMA_IRQHandler+0x2ee>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a5a      	ldr	r2, [pc, #360]	; (80072dc <HAL_DMA_IRQHandler+0x420>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d018      	beq.n	80071aa <HAL_DMA_IRQHandler+0x2ee>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a58      	ldr	r2, [pc, #352]	; (80072e0 <HAL_DMA_IRQHandler+0x424>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d013      	beq.n	80071aa <HAL_DMA_IRQHandler+0x2ee>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a57      	ldr	r2, [pc, #348]	; (80072e4 <HAL_DMA_IRQHandler+0x428>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d00e      	beq.n	80071aa <HAL_DMA_IRQHandler+0x2ee>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a55      	ldr	r2, [pc, #340]	; (80072e8 <HAL_DMA_IRQHandler+0x42c>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d009      	beq.n	80071aa <HAL_DMA_IRQHandler+0x2ee>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a54      	ldr	r2, [pc, #336]	; (80072ec <HAL_DMA_IRQHandler+0x430>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d004      	beq.n	80071aa <HAL_DMA_IRQHandler+0x2ee>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a52      	ldr	r2, [pc, #328]	; (80072f0 <HAL_DMA_IRQHandler+0x434>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d10a      	bne.n	80071c0 <HAL_DMA_IRQHandler+0x304>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	695b      	ldr	r3, [r3, #20]
 80071b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	bf14      	ite	ne
 80071b8:	2301      	movne	r3, #1
 80071ba:	2300      	moveq	r3, #0
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	e003      	b.n	80071c8 <HAL_DMA_IRQHandler+0x30c>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2300      	movs	r3, #0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d00d      	beq.n	80071e8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071d0:	f003 031f 	and.w	r3, r3, #31
 80071d4:	2201      	movs	r2, #1
 80071d6:	409a      	lsls	r2, r3
 80071d8:	6a3b      	ldr	r3, [r7, #32]
 80071da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071e0:	f043 0202 	orr.w	r2, r3, #2
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071ec:	f003 031f 	and.w	r3, r3, #31
 80071f0:	2204      	movs	r2, #4
 80071f2:	409a      	lsls	r2, r3
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	4013      	ands	r3, r2
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f000 808f 	beq.w	800731c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a2c      	ldr	r2, [pc, #176]	; (80072b4 <HAL_DMA_IRQHandler+0x3f8>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d04a      	beq.n	800729e <HAL_DMA_IRQHandler+0x3e2>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a2a      	ldr	r2, [pc, #168]	; (80072b8 <HAL_DMA_IRQHandler+0x3fc>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d045      	beq.n	800729e <HAL_DMA_IRQHandler+0x3e2>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a29      	ldr	r2, [pc, #164]	; (80072bc <HAL_DMA_IRQHandler+0x400>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d040      	beq.n	800729e <HAL_DMA_IRQHandler+0x3e2>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a27      	ldr	r2, [pc, #156]	; (80072c0 <HAL_DMA_IRQHandler+0x404>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d03b      	beq.n	800729e <HAL_DMA_IRQHandler+0x3e2>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a26      	ldr	r2, [pc, #152]	; (80072c4 <HAL_DMA_IRQHandler+0x408>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d036      	beq.n	800729e <HAL_DMA_IRQHandler+0x3e2>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a24      	ldr	r2, [pc, #144]	; (80072c8 <HAL_DMA_IRQHandler+0x40c>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d031      	beq.n	800729e <HAL_DMA_IRQHandler+0x3e2>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a23      	ldr	r2, [pc, #140]	; (80072cc <HAL_DMA_IRQHandler+0x410>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d02c      	beq.n	800729e <HAL_DMA_IRQHandler+0x3e2>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a21      	ldr	r2, [pc, #132]	; (80072d0 <HAL_DMA_IRQHandler+0x414>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d027      	beq.n	800729e <HAL_DMA_IRQHandler+0x3e2>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a20      	ldr	r2, [pc, #128]	; (80072d4 <HAL_DMA_IRQHandler+0x418>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d022      	beq.n	800729e <HAL_DMA_IRQHandler+0x3e2>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a1e      	ldr	r2, [pc, #120]	; (80072d8 <HAL_DMA_IRQHandler+0x41c>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d01d      	beq.n	800729e <HAL_DMA_IRQHandler+0x3e2>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a1d      	ldr	r2, [pc, #116]	; (80072dc <HAL_DMA_IRQHandler+0x420>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d018      	beq.n	800729e <HAL_DMA_IRQHandler+0x3e2>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a1b      	ldr	r2, [pc, #108]	; (80072e0 <HAL_DMA_IRQHandler+0x424>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d013      	beq.n	800729e <HAL_DMA_IRQHandler+0x3e2>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a1a      	ldr	r2, [pc, #104]	; (80072e4 <HAL_DMA_IRQHandler+0x428>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d00e      	beq.n	800729e <HAL_DMA_IRQHandler+0x3e2>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a18      	ldr	r2, [pc, #96]	; (80072e8 <HAL_DMA_IRQHandler+0x42c>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d009      	beq.n	800729e <HAL_DMA_IRQHandler+0x3e2>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a17      	ldr	r2, [pc, #92]	; (80072ec <HAL_DMA_IRQHandler+0x430>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d004      	beq.n	800729e <HAL_DMA_IRQHandler+0x3e2>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a15      	ldr	r2, [pc, #84]	; (80072f0 <HAL_DMA_IRQHandler+0x434>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d12a      	bne.n	80072f4 <HAL_DMA_IRQHandler+0x438>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 0302 	and.w	r3, r3, #2
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	bf14      	ite	ne
 80072ac:	2301      	movne	r3, #1
 80072ae:	2300      	moveq	r3, #0
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	e023      	b.n	80072fc <HAL_DMA_IRQHandler+0x440>
 80072b4:	40020010 	.word	0x40020010
 80072b8:	40020028 	.word	0x40020028
 80072bc:	40020040 	.word	0x40020040
 80072c0:	40020058 	.word	0x40020058
 80072c4:	40020070 	.word	0x40020070
 80072c8:	40020088 	.word	0x40020088
 80072cc:	400200a0 	.word	0x400200a0
 80072d0:	400200b8 	.word	0x400200b8
 80072d4:	40020410 	.word	0x40020410
 80072d8:	40020428 	.word	0x40020428
 80072dc:	40020440 	.word	0x40020440
 80072e0:	40020458 	.word	0x40020458
 80072e4:	40020470 	.word	0x40020470
 80072e8:	40020488 	.word	0x40020488
 80072ec:	400204a0 	.word	0x400204a0
 80072f0:	400204b8 	.word	0x400204b8
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2300      	movs	r3, #0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d00d      	beq.n	800731c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007304:	f003 031f 	and.w	r3, r3, #31
 8007308:	2204      	movs	r2, #4
 800730a:	409a      	lsls	r2, r3
 800730c:	6a3b      	ldr	r3, [r7, #32]
 800730e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007314:	f043 0204 	orr.w	r2, r3, #4
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007320:	f003 031f 	and.w	r3, r3, #31
 8007324:	2210      	movs	r2, #16
 8007326:	409a      	lsls	r2, r3
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	4013      	ands	r3, r2
 800732c:	2b00      	cmp	r3, #0
 800732e:	f000 80a6 	beq.w	800747e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a85      	ldr	r2, [pc, #532]	; (800754c <HAL_DMA_IRQHandler+0x690>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d04a      	beq.n	80073d2 <HAL_DMA_IRQHandler+0x516>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a83      	ldr	r2, [pc, #524]	; (8007550 <HAL_DMA_IRQHandler+0x694>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d045      	beq.n	80073d2 <HAL_DMA_IRQHandler+0x516>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a82      	ldr	r2, [pc, #520]	; (8007554 <HAL_DMA_IRQHandler+0x698>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d040      	beq.n	80073d2 <HAL_DMA_IRQHandler+0x516>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a80      	ldr	r2, [pc, #512]	; (8007558 <HAL_DMA_IRQHandler+0x69c>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d03b      	beq.n	80073d2 <HAL_DMA_IRQHandler+0x516>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a7f      	ldr	r2, [pc, #508]	; (800755c <HAL_DMA_IRQHandler+0x6a0>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d036      	beq.n	80073d2 <HAL_DMA_IRQHandler+0x516>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a7d      	ldr	r2, [pc, #500]	; (8007560 <HAL_DMA_IRQHandler+0x6a4>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d031      	beq.n	80073d2 <HAL_DMA_IRQHandler+0x516>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a7c      	ldr	r2, [pc, #496]	; (8007564 <HAL_DMA_IRQHandler+0x6a8>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d02c      	beq.n	80073d2 <HAL_DMA_IRQHandler+0x516>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a7a      	ldr	r2, [pc, #488]	; (8007568 <HAL_DMA_IRQHandler+0x6ac>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d027      	beq.n	80073d2 <HAL_DMA_IRQHandler+0x516>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a79      	ldr	r2, [pc, #484]	; (800756c <HAL_DMA_IRQHandler+0x6b0>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d022      	beq.n	80073d2 <HAL_DMA_IRQHandler+0x516>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a77      	ldr	r2, [pc, #476]	; (8007570 <HAL_DMA_IRQHandler+0x6b4>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d01d      	beq.n	80073d2 <HAL_DMA_IRQHandler+0x516>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a76      	ldr	r2, [pc, #472]	; (8007574 <HAL_DMA_IRQHandler+0x6b8>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d018      	beq.n	80073d2 <HAL_DMA_IRQHandler+0x516>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a74      	ldr	r2, [pc, #464]	; (8007578 <HAL_DMA_IRQHandler+0x6bc>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d013      	beq.n	80073d2 <HAL_DMA_IRQHandler+0x516>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a73      	ldr	r2, [pc, #460]	; (800757c <HAL_DMA_IRQHandler+0x6c0>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d00e      	beq.n	80073d2 <HAL_DMA_IRQHandler+0x516>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a71      	ldr	r2, [pc, #452]	; (8007580 <HAL_DMA_IRQHandler+0x6c4>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d009      	beq.n	80073d2 <HAL_DMA_IRQHandler+0x516>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a70      	ldr	r2, [pc, #448]	; (8007584 <HAL_DMA_IRQHandler+0x6c8>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d004      	beq.n	80073d2 <HAL_DMA_IRQHandler+0x516>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a6e      	ldr	r2, [pc, #440]	; (8007588 <HAL_DMA_IRQHandler+0x6cc>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d10a      	bne.n	80073e8 <HAL_DMA_IRQHandler+0x52c>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0308 	and.w	r3, r3, #8
 80073dc:	2b00      	cmp	r3, #0
 80073de:	bf14      	ite	ne
 80073e0:	2301      	movne	r3, #1
 80073e2:	2300      	moveq	r3, #0
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	e009      	b.n	80073fc <HAL_DMA_IRQHandler+0x540>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 0304 	and.w	r3, r3, #4
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	bf14      	ite	ne
 80073f6:	2301      	movne	r3, #1
 80073f8:	2300      	moveq	r3, #0
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d03e      	beq.n	800747e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007404:	f003 031f 	and.w	r3, r3, #31
 8007408:	2210      	movs	r2, #16
 800740a:	409a      	lsls	r2, r3
 800740c:	6a3b      	ldr	r3, [r7, #32]
 800740e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800741a:	2b00      	cmp	r3, #0
 800741c:	d018      	beq.n	8007450 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007428:	2b00      	cmp	r3, #0
 800742a:	d108      	bne.n	800743e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007430:	2b00      	cmp	r3, #0
 8007432:	d024      	beq.n	800747e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	4798      	blx	r3
 800743c:	e01f      	b.n	800747e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007442:	2b00      	cmp	r3, #0
 8007444:	d01b      	beq.n	800747e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	4798      	blx	r3
 800744e:	e016      	b.n	800747e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800745a:	2b00      	cmp	r3, #0
 800745c:	d107      	bne.n	800746e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f022 0208 	bic.w	r2, r2, #8
 800746c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007472:	2b00      	cmp	r3, #0
 8007474:	d003      	beq.n	800747e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007482:	f003 031f 	and.w	r3, r3, #31
 8007486:	2220      	movs	r2, #32
 8007488:	409a      	lsls	r2, r3
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	4013      	ands	r3, r2
 800748e:	2b00      	cmp	r3, #0
 8007490:	f000 8110 	beq.w	80076b4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a2c      	ldr	r2, [pc, #176]	; (800754c <HAL_DMA_IRQHandler+0x690>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d04a      	beq.n	8007534 <HAL_DMA_IRQHandler+0x678>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a2b      	ldr	r2, [pc, #172]	; (8007550 <HAL_DMA_IRQHandler+0x694>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d045      	beq.n	8007534 <HAL_DMA_IRQHandler+0x678>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a29      	ldr	r2, [pc, #164]	; (8007554 <HAL_DMA_IRQHandler+0x698>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d040      	beq.n	8007534 <HAL_DMA_IRQHandler+0x678>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a28      	ldr	r2, [pc, #160]	; (8007558 <HAL_DMA_IRQHandler+0x69c>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d03b      	beq.n	8007534 <HAL_DMA_IRQHandler+0x678>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a26      	ldr	r2, [pc, #152]	; (800755c <HAL_DMA_IRQHandler+0x6a0>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d036      	beq.n	8007534 <HAL_DMA_IRQHandler+0x678>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a25      	ldr	r2, [pc, #148]	; (8007560 <HAL_DMA_IRQHandler+0x6a4>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d031      	beq.n	8007534 <HAL_DMA_IRQHandler+0x678>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a23      	ldr	r2, [pc, #140]	; (8007564 <HAL_DMA_IRQHandler+0x6a8>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d02c      	beq.n	8007534 <HAL_DMA_IRQHandler+0x678>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a22      	ldr	r2, [pc, #136]	; (8007568 <HAL_DMA_IRQHandler+0x6ac>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d027      	beq.n	8007534 <HAL_DMA_IRQHandler+0x678>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a20      	ldr	r2, [pc, #128]	; (800756c <HAL_DMA_IRQHandler+0x6b0>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d022      	beq.n	8007534 <HAL_DMA_IRQHandler+0x678>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a1f      	ldr	r2, [pc, #124]	; (8007570 <HAL_DMA_IRQHandler+0x6b4>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d01d      	beq.n	8007534 <HAL_DMA_IRQHandler+0x678>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a1d      	ldr	r2, [pc, #116]	; (8007574 <HAL_DMA_IRQHandler+0x6b8>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d018      	beq.n	8007534 <HAL_DMA_IRQHandler+0x678>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a1c      	ldr	r2, [pc, #112]	; (8007578 <HAL_DMA_IRQHandler+0x6bc>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d013      	beq.n	8007534 <HAL_DMA_IRQHandler+0x678>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a1a      	ldr	r2, [pc, #104]	; (800757c <HAL_DMA_IRQHandler+0x6c0>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d00e      	beq.n	8007534 <HAL_DMA_IRQHandler+0x678>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a19      	ldr	r2, [pc, #100]	; (8007580 <HAL_DMA_IRQHandler+0x6c4>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d009      	beq.n	8007534 <HAL_DMA_IRQHandler+0x678>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a17      	ldr	r2, [pc, #92]	; (8007584 <HAL_DMA_IRQHandler+0x6c8>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d004      	beq.n	8007534 <HAL_DMA_IRQHandler+0x678>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a16      	ldr	r2, [pc, #88]	; (8007588 <HAL_DMA_IRQHandler+0x6cc>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d12b      	bne.n	800758c <HAL_DMA_IRQHandler+0x6d0>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 0310 	and.w	r3, r3, #16
 800753e:	2b00      	cmp	r3, #0
 8007540:	bf14      	ite	ne
 8007542:	2301      	movne	r3, #1
 8007544:	2300      	moveq	r3, #0
 8007546:	b2db      	uxtb	r3, r3
 8007548:	e02a      	b.n	80075a0 <HAL_DMA_IRQHandler+0x6e4>
 800754a:	bf00      	nop
 800754c:	40020010 	.word	0x40020010
 8007550:	40020028 	.word	0x40020028
 8007554:	40020040 	.word	0x40020040
 8007558:	40020058 	.word	0x40020058
 800755c:	40020070 	.word	0x40020070
 8007560:	40020088 	.word	0x40020088
 8007564:	400200a0 	.word	0x400200a0
 8007568:	400200b8 	.word	0x400200b8
 800756c:	40020410 	.word	0x40020410
 8007570:	40020428 	.word	0x40020428
 8007574:	40020440 	.word	0x40020440
 8007578:	40020458 	.word	0x40020458
 800757c:	40020470 	.word	0x40020470
 8007580:	40020488 	.word	0x40020488
 8007584:	400204a0 	.word	0x400204a0
 8007588:	400204b8 	.word	0x400204b8
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 0302 	and.w	r3, r3, #2
 8007596:	2b00      	cmp	r3, #0
 8007598:	bf14      	ite	ne
 800759a:	2301      	movne	r3, #1
 800759c:	2300      	moveq	r3, #0
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	f000 8087 	beq.w	80076b4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075aa:	f003 031f 	and.w	r3, r3, #31
 80075ae:	2220      	movs	r2, #32
 80075b0:	409a      	lsls	r2, r3
 80075b2:	6a3b      	ldr	r3, [r7, #32]
 80075b4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	2b04      	cmp	r3, #4
 80075c0:	d139      	bne.n	8007636 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f022 0216 	bic.w	r2, r2, #22
 80075d0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	695a      	ldr	r2, [r3, #20]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80075e0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d103      	bne.n	80075f2 <HAL_DMA_IRQHandler+0x736>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d007      	beq.n	8007602 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f022 0208 	bic.w	r2, r2, #8
 8007600:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007606:	f003 031f 	and.w	r3, r3, #31
 800760a:	223f      	movs	r2, #63	; 0x3f
 800760c:	409a      	lsls	r2, r3
 800760e:	6a3b      	ldr	r3, [r7, #32]
 8007610:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2201      	movs	r2, #1
 8007616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007626:	2b00      	cmp	r3, #0
 8007628:	f000 834a 	beq.w	8007cc0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	4798      	blx	r3
          }
          return;
 8007634:	e344      	b.n	8007cc0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007640:	2b00      	cmp	r3, #0
 8007642:	d018      	beq.n	8007676 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800764e:	2b00      	cmp	r3, #0
 8007650:	d108      	bne.n	8007664 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007656:	2b00      	cmp	r3, #0
 8007658:	d02c      	beq.n	80076b4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	4798      	blx	r3
 8007662:	e027      	b.n	80076b4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007668:	2b00      	cmp	r3, #0
 800766a:	d023      	beq.n	80076b4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	4798      	blx	r3
 8007674:	e01e      	b.n	80076b4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007680:	2b00      	cmp	r3, #0
 8007682:	d10f      	bne.n	80076a4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f022 0210 	bic.w	r2, r2, #16
 8007692:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d003      	beq.n	80076b4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f000 8306 	beq.w	8007cca <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076c2:	f003 0301 	and.w	r3, r3, #1
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	f000 8088 	beq.w	80077dc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2204      	movs	r2, #4
 80076d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a7a      	ldr	r2, [pc, #488]	; (80078c4 <HAL_DMA_IRQHandler+0xa08>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d04a      	beq.n	8007774 <HAL_DMA_IRQHandler+0x8b8>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a79      	ldr	r2, [pc, #484]	; (80078c8 <HAL_DMA_IRQHandler+0xa0c>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d045      	beq.n	8007774 <HAL_DMA_IRQHandler+0x8b8>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a77      	ldr	r2, [pc, #476]	; (80078cc <HAL_DMA_IRQHandler+0xa10>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d040      	beq.n	8007774 <HAL_DMA_IRQHandler+0x8b8>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a76      	ldr	r2, [pc, #472]	; (80078d0 <HAL_DMA_IRQHandler+0xa14>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d03b      	beq.n	8007774 <HAL_DMA_IRQHandler+0x8b8>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a74      	ldr	r2, [pc, #464]	; (80078d4 <HAL_DMA_IRQHandler+0xa18>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d036      	beq.n	8007774 <HAL_DMA_IRQHandler+0x8b8>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a73      	ldr	r2, [pc, #460]	; (80078d8 <HAL_DMA_IRQHandler+0xa1c>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d031      	beq.n	8007774 <HAL_DMA_IRQHandler+0x8b8>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a71      	ldr	r2, [pc, #452]	; (80078dc <HAL_DMA_IRQHandler+0xa20>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d02c      	beq.n	8007774 <HAL_DMA_IRQHandler+0x8b8>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a70      	ldr	r2, [pc, #448]	; (80078e0 <HAL_DMA_IRQHandler+0xa24>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d027      	beq.n	8007774 <HAL_DMA_IRQHandler+0x8b8>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a6e      	ldr	r2, [pc, #440]	; (80078e4 <HAL_DMA_IRQHandler+0xa28>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d022      	beq.n	8007774 <HAL_DMA_IRQHandler+0x8b8>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a6d      	ldr	r2, [pc, #436]	; (80078e8 <HAL_DMA_IRQHandler+0xa2c>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d01d      	beq.n	8007774 <HAL_DMA_IRQHandler+0x8b8>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a6b      	ldr	r2, [pc, #428]	; (80078ec <HAL_DMA_IRQHandler+0xa30>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d018      	beq.n	8007774 <HAL_DMA_IRQHandler+0x8b8>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a6a      	ldr	r2, [pc, #424]	; (80078f0 <HAL_DMA_IRQHandler+0xa34>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d013      	beq.n	8007774 <HAL_DMA_IRQHandler+0x8b8>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a68      	ldr	r2, [pc, #416]	; (80078f4 <HAL_DMA_IRQHandler+0xa38>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d00e      	beq.n	8007774 <HAL_DMA_IRQHandler+0x8b8>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a67      	ldr	r2, [pc, #412]	; (80078f8 <HAL_DMA_IRQHandler+0xa3c>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d009      	beq.n	8007774 <HAL_DMA_IRQHandler+0x8b8>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a65      	ldr	r2, [pc, #404]	; (80078fc <HAL_DMA_IRQHandler+0xa40>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d004      	beq.n	8007774 <HAL_DMA_IRQHandler+0x8b8>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a64      	ldr	r2, [pc, #400]	; (8007900 <HAL_DMA_IRQHandler+0xa44>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d108      	bne.n	8007786 <HAL_DMA_IRQHandler+0x8ca>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f022 0201 	bic.w	r2, r2, #1
 8007782:	601a      	str	r2, [r3, #0]
 8007784:	e007      	b.n	8007796 <HAL_DMA_IRQHandler+0x8da>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f022 0201 	bic.w	r2, r2, #1
 8007794:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	3301      	adds	r3, #1
 800779a:	60fb      	str	r3, [r7, #12]
 800779c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800779e:	429a      	cmp	r2, r3
 80077a0:	d307      	bcc.n	80077b2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 0301 	and.w	r3, r3, #1
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1f2      	bne.n	8007796 <HAL_DMA_IRQHandler+0x8da>
 80077b0:	e000      	b.n	80077b4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80077b2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 0301 	and.w	r3, r3, #1
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d004      	beq.n	80077cc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2203      	movs	r2, #3
 80077c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80077ca:	e003      	b.n	80077d4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f000 8272 	beq.w	8007cca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	4798      	blx	r3
 80077ee:	e26c      	b.n	8007cca <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a43      	ldr	r2, [pc, #268]	; (8007904 <HAL_DMA_IRQHandler+0xa48>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d022      	beq.n	8007840 <HAL_DMA_IRQHandler+0x984>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a42      	ldr	r2, [pc, #264]	; (8007908 <HAL_DMA_IRQHandler+0xa4c>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d01d      	beq.n	8007840 <HAL_DMA_IRQHandler+0x984>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a40      	ldr	r2, [pc, #256]	; (800790c <HAL_DMA_IRQHandler+0xa50>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d018      	beq.n	8007840 <HAL_DMA_IRQHandler+0x984>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a3f      	ldr	r2, [pc, #252]	; (8007910 <HAL_DMA_IRQHandler+0xa54>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d013      	beq.n	8007840 <HAL_DMA_IRQHandler+0x984>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a3d      	ldr	r2, [pc, #244]	; (8007914 <HAL_DMA_IRQHandler+0xa58>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d00e      	beq.n	8007840 <HAL_DMA_IRQHandler+0x984>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a3c      	ldr	r2, [pc, #240]	; (8007918 <HAL_DMA_IRQHandler+0xa5c>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d009      	beq.n	8007840 <HAL_DMA_IRQHandler+0x984>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a3a      	ldr	r2, [pc, #232]	; (800791c <HAL_DMA_IRQHandler+0xa60>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d004      	beq.n	8007840 <HAL_DMA_IRQHandler+0x984>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a39      	ldr	r2, [pc, #228]	; (8007920 <HAL_DMA_IRQHandler+0xa64>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d101      	bne.n	8007844 <HAL_DMA_IRQHandler+0x988>
 8007840:	2301      	movs	r3, #1
 8007842:	e000      	b.n	8007846 <HAL_DMA_IRQHandler+0x98a>
 8007844:	2300      	movs	r3, #0
 8007846:	2b00      	cmp	r3, #0
 8007848:	f000 823f 	beq.w	8007cca <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007858:	f003 031f 	and.w	r3, r3, #31
 800785c:	2204      	movs	r2, #4
 800785e:	409a      	lsls	r2, r3
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	4013      	ands	r3, r2
 8007864:	2b00      	cmp	r3, #0
 8007866:	f000 80cd 	beq.w	8007a04 <HAL_DMA_IRQHandler+0xb48>
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	f003 0304 	and.w	r3, r3, #4
 8007870:	2b00      	cmp	r3, #0
 8007872:	f000 80c7 	beq.w	8007a04 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800787a:	f003 031f 	and.w	r3, r3, #31
 800787e:	2204      	movs	r2, #4
 8007880:	409a      	lsls	r2, r3
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800788c:	2b00      	cmp	r3, #0
 800788e:	d049      	beq.n	8007924 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007896:	2b00      	cmp	r3, #0
 8007898:	d109      	bne.n	80078ae <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800789e:	2b00      	cmp	r3, #0
 80078a0:	f000 8210 	beq.w	8007cc4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80078ac:	e20a      	b.n	8007cc4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	f000 8206 	beq.w	8007cc4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80078c0:	e200      	b.n	8007cc4 <HAL_DMA_IRQHandler+0xe08>
 80078c2:	bf00      	nop
 80078c4:	40020010 	.word	0x40020010
 80078c8:	40020028 	.word	0x40020028
 80078cc:	40020040 	.word	0x40020040
 80078d0:	40020058 	.word	0x40020058
 80078d4:	40020070 	.word	0x40020070
 80078d8:	40020088 	.word	0x40020088
 80078dc:	400200a0 	.word	0x400200a0
 80078e0:	400200b8 	.word	0x400200b8
 80078e4:	40020410 	.word	0x40020410
 80078e8:	40020428 	.word	0x40020428
 80078ec:	40020440 	.word	0x40020440
 80078f0:	40020458 	.word	0x40020458
 80078f4:	40020470 	.word	0x40020470
 80078f8:	40020488 	.word	0x40020488
 80078fc:	400204a0 	.word	0x400204a0
 8007900:	400204b8 	.word	0x400204b8
 8007904:	58025408 	.word	0x58025408
 8007908:	5802541c 	.word	0x5802541c
 800790c:	58025430 	.word	0x58025430
 8007910:	58025444 	.word	0x58025444
 8007914:	58025458 	.word	0x58025458
 8007918:	5802546c 	.word	0x5802546c
 800791c:	58025480 	.word	0x58025480
 8007920:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	f003 0320 	and.w	r3, r3, #32
 800792a:	2b00      	cmp	r3, #0
 800792c:	d160      	bne.n	80079f0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a7f      	ldr	r2, [pc, #508]	; (8007b30 <HAL_DMA_IRQHandler+0xc74>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d04a      	beq.n	80079ce <HAL_DMA_IRQHandler+0xb12>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a7d      	ldr	r2, [pc, #500]	; (8007b34 <HAL_DMA_IRQHandler+0xc78>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d045      	beq.n	80079ce <HAL_DMA_IRQHandler+0xb12>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a7c      	ldr	r2, [pc, #496]	; (8007b38 <HAL_DMA_IRQHandler+0xc7c>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d040      	beq.n	80079ce <HAL_DMA_IRQHandler+0xb12>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a7a      	ldr	r2, [pc, #488]	; (8007b3c <HAL_DMA_IRQHandler+0xc80>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d03b      	beq.n	80079ce <HAL_DMA_IRQHandler+0xb12>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a79      	ldr	r2, [pc, #484]	; (8007b40 <HAL_DMA_IRQHandler+0xc84>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d036      	beq.n	80079ce <HAL_DMA_IRQHandler+0xb12>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a77      	ldr	r2, [pc, #476]	; (8007b44 <HAL_DMA_IRQHandler+0xc88>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d031      	beq.n	80079ce <HAL_DMA_IRQHandler+0xb12>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a76      	ldr	r2, [pc, #472]	; (8007b48 <HAL_DMA_IRQHandler+0xc8c>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d02c      	beq.n	80079ce <HAL_DMA_IRQHandler+0xb12>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a74      	ldr	r2, [pc, #464]	; (8007b4c <HAL_DMA_IRQHandler+0xc90>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d027      	beq.n	80079ce <HAL_DMA_IRQHandler+0xb12>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a73      	ldr	r2, [pc, #460]	; (8007b50 <HAL_DMA_IRQHandler+0xc94>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d022      	beq.n	80079ce <HAL_DMA_IRQHandler+0xb12>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a71      	ldr	r2, [pc, #452]	; (8007b54 <HAL_DMA_IRQHandler+0xc98>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d01d      	beq.n	80079ce <HAL_DMA_IRQHandler+0xb12>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a70      	ldr	r2, [pc, #448]	; (8007b58 <HAL_DMA_IRQHandler+0xc9c>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d018      	beq.n	80079ce <HAL_DMA_IRQHandler+0xb12>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a6e      	ldr	r2, [pc, #440]	; (8007b5c <HAL_DMA_IRQHandler+0xca0>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d013      	beq.n	80079ce <HAL_DMA_IRQHandler+0xb12>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a6d      	ldr	r2, [pc, #436]	; (8007b60 <HAL_DMA_IRQHandler+0xca4>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d00e      	beq.n	80079ce <HAL_DMA_IRQHandler+0xb12>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a6b      	ldr	r2, [pc, #428]	; (8007b64 <HAL_DMA_IRQHandler+0xca8>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d009      	beq.n	80079ce <HAL_DMA_IRQHandler+0xb12>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a6a      	ldr	r2, [pc, #424]	; (8007b68 <HAL_DMA_IRQHandler+0xcac>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d004      	beq.n	80079ce <HAL_DMA_IRQHandler+0xb12>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a68      	ldr	r2, [pc, #416]	; (8007b6c <HAL_DMA_IRQHandler+0xcb0>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d108      	bne.n	80079e0 <HAL_DMA_IRQHandler+0xb24>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f022 0208 	bic.w	r2, r2, #8
 80079dc:	601a      	str	r2, [r3, #0]
 80079de:	e007      	b.n	80079f0 <HAL_DMA_IRQHandler+0xb34>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f022 0204 	bic.w	r2, r2, #4
 80079ee:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	f000 8165 	beq.w	8007cc4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a02:	e15f      	b.n	8007cc4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a08:	f003 031f 	and.w	r3, r3, #31
 8007a0c:	2202      	movs	r2, #2
 8007a0e:	409a      	lsls	r2, r3
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	4013      	ands	r3, r2
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f000 80c5 	beq.w	8007ba4 <HAL_DMA_IRQHandler+0xce8>
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	f003 0302 	and.w	r3, r3, #2
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 80bf 	beq.w	8007ba4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a2a:	f003 031f 	and.w	r3, r3, #31
 8007a2e:	2202      	movs	r2, #2
 8007a30:	409a      	lsls	r2, r3
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d018      	beq.n	8007a72 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d109      	bne.n	8007a5e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	f000 813a 	beq.w	8007cc8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a5c:	e134      	b.n	8007cc8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f000 8130 	beq.w	8007cc8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a70:	e12a      	b.n	8007cc8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	f003 0320 	and.w	r3, r3, #32
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f040 8089 	bne.w	8007b90 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a2b      	ldr	r2, [pc, #172]	; (8007b30 <HAL_DMA_IRQHandler+0xc74>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d04a      	beq.n	8007b1e <HAL_DMA_IRQHandler+0xc62>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a29      	ldr	r2, [pc, #164]	; (8007b34 <HAL_DMA_IRQHandler+0xc78>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d045      	beq.n	8007b1e <HAL_DMA_IRQHandler+0xc62>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a28      	ldr	r2, [pc, #160]	; (8007b38 <HAL_DMA_IRQHandler+0xc7c>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d040      	beq.n	8007b1e <HAL_DMA_IRQHandler+0xc62>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a26      	ldr	r2, [pc, #152]	; (8007b3c <HAL_DMA_IRQHandler+0xc80>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d03b      	beq.n	8007b1e <HAL_DMA_IRQHandler+0xc62>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a25      	ldr	r2, [pc, #148]	; (8007b40 <HAL_DMA_IRQHandler+0xc84>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d036      	beq.n	8007b1e <HAL_DMA_IRQHandler+0xc62>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a23      	ldr	r2, [pc, #140]	; (8007b44 <HAL_DMA_IRQHandler+0xc88>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d031      	beq.n	8007b1e <HAL_DMA_IRQHandler+0xc62>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a22      	ldr	r2, [pc, #136]	; (8007b48 <HAL_DMA_IRQHandler+0xc8c>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d02c      	beq.n	8007b1e <HAL_DMA_IRQHandler+0xc62>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a20      	ldr	r2, [pc, #128]	; (8007b4c <HAL_DMA_IRQHandler+0xc90>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d027      	beq.n	8007b1e <HAL_DMA_IRQHandler+0xc62>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a1f      	ldr	r2, [pc, #124]	; (8007b50 <HAL_DMA_IRQHandler+0xc94>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d022      	beq.n	8007b1e <HAL_DMA_IRQHandler+0xc62>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a1d      	ldr	r2, [pc, #116]	; (8007b54 <HAL_DMA_IRQHandler+0xc98>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d01d      	beq.n	8007b1e <HAL_DMA_IRQHandler+0xc62>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a1c      	ldr	r2, [pc, #112]	; (8007b58 <HAL_DMA_IRQHandler+0xc9c>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d018      	beq.n	8007b1e <HAL_DMA_IRQHandler+0xc62>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a1a      	ldr	r2, [pc, #104]	; (8007b5c <HAL_DMA_IRQHandler+0xca0>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d013      	beq.n	8007b1e <HAL_DMA_IRQHandler+0xc62>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a19      	ldr	r2, [pc, #100]	; (8007b60 <HAL_DMA_IRQHandler+0xca4>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d00e      	beq.n	8007b1e <HAL_DMA_IRQHandler+0xc62>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a17      	ldr	r2, [pc, #92]	; (8007b64 <HAL_DMA_IRQHandler+0xca8>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d009      	beq.n	8007b1e <HAL_DMA_IRQHandler+0xc62>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a16      	ldr	r2, [pc, #88]	; (8007b68 <HAL_DMA_IRQHandler+0xcac>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d004      	beq.n	8007b1e <HAL_DMA_IRQHandler+0xc62>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a14      	ldr	r2, [pc, #80]	; (8007b6c <HAL_DMA_IRQHandler+0xcb0>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d128      	bne.n	8007b70 <HAL_DMA_IRQHandler+0xcb4>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f022 0214 	bic.w	r2, r2, #20
 8007b2c:	601a      	str	r2, [r3, #0]
 8007b2e:	e027      	b.n	8007b80 <HAL_DMA_IRQHandler+0xcc4>
 8007b30:	40020010 	.word	0x40020010
 8007b34:	40020028 	.word	0x40020028
 8007b38:	40020040 	.word	0x40020040
 8007b3c:	40020058 	.word	0x40020058
 8007b40:	40020070 	.word	0x40020070
 8007b44:	40020088 	.word	0x40020088
 8007b48:	400200a0 	.word	0x400200a0
 8007b4c:	400200b8 	.word	0x400200b8
 8007b50:	40020410 	.word	0x40020410
 8007b54:	40020428 	.word	0x40020428
 8007b58:	40020440 	.word	0x40020440
 8007b5c:	40020458 	.word	0x40020458
 8007b60:	40020470 	.word	0x40020470
 8007b64:	40020488 	.word	0x40020488
 8007b68:	400204a0 	.word	0x400204a0
 8007b6c:	400204b8 	.word	0x400204b8
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f022 020a 	bic.w	r2, r2, #10
 8007b7e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f000 8097 	beq.w	8007cc8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ba2:	e091      	b.n	8007cc8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ba8:	f003 031f 	and.w	r3, r3, #31
 8007bac:	2208      	movs	r2, #8
 8007bae:	409a      	lsls	r2, r3
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	4013      	ands	r3, r2
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	f000 8088 	beq.w	8007cca <HAL_DMA_IRQHandler+0xe0e>
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	f003 0308 	and.w	r3, r3, #8
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	f000 8082 	beq.w	8007cca <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a41      	ldr	r2, [pc, #260]	; (8007cd0 <HAL_DMA_IRQHandler+0xe14>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d04a      	beq.n	8007c66 <HAL_DMA_IRQHandler+0xdaa>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a3f      	ldr	r2, [pc, #252]	; (8007cd4 <HAL_DMA_IRQHandler+0xe18>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d045      	beq.n	8007c66 <HAL_DMA_IRQHandler+0xdaa>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a3e      	ldr	r2, [pc, #248]	; (8007cd8 <HAL_DMA_IRQHandler+0xe1c>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d040      	beq.n	8007c66 <HAL_DMA_IRQHandler+0xdaa>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a3c      	ldr	r2, [pc, #240]	; (8007cdc <HAL_DMA_IRQHandler+0xe20>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d03b      	beq.n	8007c66 <HAL_DMA_IRQHandler+0xdaa>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a3b      	ldr	r2, [pc, #236]	; (8007ce0 <HAL_DMA_IRQHandler+0xe24>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d036      	beq.n	8007c66 <HAL_DMA_IRQHandler+0xdaa>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a39      	ldr	r2, [pc, #228]	; (8007ce4 <HAL_DMA_IRQHandler+0xe28>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d031      	beq.n	8007c66 <HAL_DMA_IRQHandler+0xdaa>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a38      	ldr	r2, [pc, #224]	; (8007ce8 <HAL_DMA_IRQHandler+0xe2c>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d02c      	beq.n	8007c66 <HAL_DMA_IRQHandler+0xdaa>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a36      	ldr	r2, [pc, #216]	; (8007cec <HAL_DMA_IRQHandler+0xe30>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d027      	beq.n	8007c66 <HAL_DMA_IRQHandler+0xdaa>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a35      	ldr	r2, [pc, #212]	; (8007cf0 <HAL_DMA_IRQHandler+0xe34>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d022      	beq.n	8007c66 <HAL_DMA_IRQHandler+0xdaa>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a33      	ldr	r2, [pc, #204]	; (8007cf4 <HAL_DMA_IRQHandler+0xe38>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d01d      	beq.n	8007c66 <HAL_DMA_IRQHandler+0xdaa>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a32      	ldr	r2, [pc, #200]	; (8007cf8 <HAL_DMA_IRQHandler+0xe3c>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d018      	beq.n	8007c66 <HAL_DMA_IRQHandler+0xdaa>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a30      	ldr	r2, [pc, #192]	; (8007cfc <HAL_DMA_IRQHandler+0xe40>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d013      	beq.n	8007c66 <HAL_DMA_IRQHandler+0xdaa>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a2f      	ldr	r2, [pc, #188]	; (8007d00 <HAL_DMA_IRQHandler+0xe44>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d00e      	beq.n	8007c66 <HAL_DMA_IRQHandler+0xdaa>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a2d      	ldr	r2, [pc, #180]	; (8007d04 <HAL_DMA_IRQHandler+0xe48>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d009      	beq.n	8007c66 <HAL_DMA_IRQHandler+0xdaa>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a2c      	ldr	r2, [pc, #176]	; (8007d08 <HAL_DMA_IRQHandler+0xe4c>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d004      	beq.n	8007c66 <HAL_DMA_IRQHandler+0xdaa>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a2a      	ldr	r2, [pc, #168]	; (8007d0c <HAL_DMA_IRQHandler+0xe50>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d108      	bne.n	8007c78 <HAL_DMA_IRQHandler+0xdbc>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f022 021c 	bic.w	r2, r2, #28
 8007c74:	601a      	str	r2, [r3, #0]
 8007c76:	e007      	b.n	8007c88 <HAL_DMA_IRQHandler+0xdcc>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f022 020e 	bic.w	r2, r2, #14
 8007c86:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c8c:	f003 031f 	and.w	r3, r3, #31
 8007c90:	2201      	movs	r2, #1
 8007c92:	409a      	lsls	r2, r3
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d009      	beq.n	8007cca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	4798      	blx	r3
 8007cbe:	e004      	b.n	8007cca <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007cc0:	bf00      	nop
 8007cc2:	e002      	b.n	8007cca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007cc4:	bf00      	nop
 8007cc6:	e000      	b.n	8007cca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007cc8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007cca:	3728      	adds	r7, #40	; 0x28
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	40020010 	.word	0x40020010
 8007cd4:	40020028 	.word	0x40020028
 8007cd8:	40020040 	.word	0x40020040
 8007cdc:	40020058 	.word	0x40020058
 8007ce0:	40020070 	.word	0x40020070
 8007ce4:	40020088 	.word	0x40020088
 8007ce8:	400200a0 	.word	0x400200a0
 8007cec:	400200b8 	.word	0x400200b8
 8007cf0:	40020410 	.word	0x40020410
 8007cf4:	40020428 	.word	0x40020428
 8007cf8:	40020440 	.word	0x40020440
 8007cfc:	40020458 	.word	0x40020458
 8007d00:	40020470 	.word	0x40020470
 8007d04:	40020488 	.word	0x40020488
 8007d08:	400204a0 	.word	0x400204a0
 8007d0c:	400204b8 	.word	0x400204b8

08007d10 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b087      	sub	sp, #28
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	607a      	str	r2, [r7, #4]
 8007d1c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d22:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d28:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a7f      	ldr	r2, [pc, #508]	; (8007f2c <DMA_SetConfig+0x21c>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d072      	beq.n	8007e1a <DMA_SetConfig+0x10a>
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a7d      	ldr	r2, [pc, #500]	; (8007f30 <DMA_SetConfig+0x220>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d06d      	beq.n	8007e1a <DMA_SetConfig+0x10a>
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a7c      	ldr	r2, [pc, #496]	; (8007f34 <DMA_SetConfig+0x224>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d068      	beq.n	8007e1a <DMA_SetConfig+0x10a>
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a7a      	ldr	r2, [pc, #488]	; (8007f38 <DMA_SetConfig+0x228>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d063      	beq.n	8007e1a <DMA_SetConfig+0x10a>
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a79      	ldr	r2, [pc, #484]	; (8007f3c <DMA_SetConfig+0x22c>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d05e      	beq.n	8007e1a <DMA_SetConfig+0x10a>
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a77      	ldr	r2, [pc, #476]	; (8007f40 <DMA_SetConfig+0x230>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d059      	beq.n	8007e1a <DMA_SetConfig+0x10a>
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a76      	ldr	r2, [pc, #472]	; (8007f44 <DMA_SetConfig+0x234>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d054      	beq.n	8007e1a <DMA_SetConfig+0x10a>
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a74      	ldr	r2, [pc, #464]	; (8007f48 <DMA_SetConfig+0x238>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d04f      	beq.n	8007e1a <DMA_SetConfig+0x10a>
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a73      	ldr	r2, [pc, #460]	; (8007f4c <DMA_SetConfig+0x23c>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d04a      	beq.n	8007e1a <DMA_SetConfig+0x10a>
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a71      	ldr	r2, [pc, #452]	; (8007f50 <DMA_SetConfig+0x240>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d045      	beq.n	8007e1a <DMA_SetConfig+0x10a>
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a70      	ldr	r2, [pc, #448]	; (8007f54 <DMA_SetConfig+0x244>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d040      	beq.n	8007e1a <DMA_SetConfig+0x10a>
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a6e      	ldr	r2, [pc, #440]	; (8007f58 <DMA_SetConfig+0x248>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d03b      	beq.n	8007e1a <DMA_SetConfig+0x10a>
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a6d      	ldr	r2, [pc, #436]	; (8007f5c <DMA_SetConfig+0x24c>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d036      	beq.n	8007e1a <DMA_SetConfig+0x10a>
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a6b      	ldr	r2, [pc, #428]	; (8007f60 <DMA_SetConfig+0x250>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d031      	beq.n	8007e1a <DMA_SetConfig+0x10a>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a6a      	ldr	r2, [pc, #424]	; (8007f64 <DMA_SetConfig+0x254>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d02c      	beq.n	8007e1a <DMA_SetConfig+0x10a>
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a68      	ldr	r2, [pc, #416]	; (8007f68 <DMA_SetConfig+0x258>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d027      	beq.n	8007e1a <DMA_SetConfig+0x10a>
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a67      	ldr	r2, [pc, #412]	; (8007f6c <DMA_SetConfig+0x25c>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d022      	beq.n	8007e1a <DMA_SetConfig+0x10a>
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a65      	ldr	r2, [pc, #404]	; (8007f70 <DMA_SetConfig+0x260>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d01d      	beq.n	8007e1a <DMA_SetConfig+0x10a>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a64      	ldr	r2, [pc, #400]	; (8007f74 <DMA_SetConfig+0x264>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d018      	beq.n	8007e1a <DMA_SetConfig+0x10a>
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a62      	ldr	r2, [pc, #392]	; (8007f78 <DMA_SetConfig+0x268>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d013      	beq.n	8007e1a <DMA_SetConfig+0x10a>
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a61      	ldr	r2, [pc, #388]	; (8007f7c <DMA_SetConfig+0x26c>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d00e      	beq.n	8007e1a <DMA_SetConfig+0x10a>
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a5f      	ldr	r2, [pc, #380]	; (8007f80 <DMA_SetConfig+0x270>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d009      	beq.n	8007e1a <DMA_SetConfig+0x10a>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a5e      	ldr	r2, [pc, #376]	; (8007f84 <DMA_SetConfig+0x274>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d004      	beq.n	8007e1a <DMA_SetConfig+0x10a>
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a5c      	ldr	r2, [pc, #368]	; (8007f88 <DMA_SetConfig+0x278>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d101      	bne.n	8007e1e <DMA_SetConfig+0x10e>
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e000      	b.n	8007e20 <DMA_SetConfig+0x110>
 8007e1e:	2300      	movs	r3, #0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d00d      	beq.n	8007e40 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e28:	68fa      	ldr	r2, [r7, #12]
 8007e2a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007e2c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d004      	beq.n	8007e40 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007e3e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a39      	ldr	r2, [pc, #228]	; (8007f2c <DMA_SetConfig+0x21c>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d04a      	beq.n	8007ee0 <DMA_SetConfig+0x1d0>
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a38      	ldr	r2, [pc, #224]	; (8007f30 <DMA_SetConfig+0x220>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d045      	beq.n	8007ee0 <DMA_SetConfig+0x1d0>
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a36      	ldr	r2, [pc, #216]	; (8007f34 <DMA_SetConfig+0x224>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d040      	beq.n	8007ee0 <DMA_SetConfig+0x1d0>
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a35      	ldr	r2, [pc, #212]	; (8007f38 <DMA_SetConfig+0x228>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d03b      	beq.n	8007ee0 <DMA_SetConfig+0x1d0>
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a33      	ldr	r2, [pc, #204]	; (8007f3c <DMA_SetConfig+0x22c>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d036      	beq.n	8007ee0 <DMA_SetConfig+0x1d0>
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a32      	ldr	r2, [pc, #200]	; (8007f40 <DMA_SetConfig+0x230>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d031      	beq.n	8007ee0 <DMA_SetConfig+0x1d0>
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a30      	ldr	r2, [pc, #192]	; (8007f44 <DMA_SetConfig+0x234>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d02c      	beq.n	8007ee0 <DMA_SetConfig+0x1d0>
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a2f      	ldr	r2, [pc, #188]	; (8007f48 <DMA_SetConfig+0x238>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d027      	beq.n	8007ee0 <DMA_SetConfig+0x1d0>
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a2d      	ldr	r2, [pc, #180]	; (8007f4c <DMA_SetConfig+0x23c>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d022      	beq.n	8007ee0 <DMA_SetConfig+0x1d0>
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a2c      	ldr	r2, [pc, #176]	; (8007f50 <DMA_SetConfig+0x240>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d01d      	beq.n	8007ee0 <DMA_SetConfig+0x1d0>
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a2a      	ldr	r2, [pc, #168]	; (8007f54 <DMA_SetConfig+0x244>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d018      	beq.n	8007ee0 <DMA_SetConfig+0x1d0>
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a29      	ldr	r2, [pc, #164]	; (8007f58 <DMA_SetConfig+0x248>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d013      	beq.n	8007ee0 <DMA_SetConfig+0x1d0>
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a27      	ldr	r2, [pc, #156]	; (8007f5c <DMA_SetConfig+0x24c>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d00e      	beq.n	8007ee0 <DMA_SetConfig+0x1d0>
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a26      	ldr	r2, [pc, #152]	; (8007f60 <DMA_SetConfig+0x250>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d009      	beq.n	8007ee0 <DMA_SetConfig+0x1d0>
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a24      	ldr	r2, [pc, #144]	; (8007f64 <DMA_SetConfig+0x254>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d004      	beq.n	8007ee0 <DMA_SetConfig+0x1d0>
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a23      	ldr	r2, [pc, #140]	; (8007f68 <DMA_SetConfig+0x258>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d101      	bne.n	8007ee4 <DMA_SetConfig+0x1d4>
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e000      	b.n	8007ee6 <DMA_SetConfig+0x1d6>
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d059      	beq.n	8007f9e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eee:	f003 031f 	and.w	r3, r3, #31
 8007ef2:	223f      	movs	r2, #63	; 0x3f
 8007ef4:	409a      	lsls	r2, r3
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007f08:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	683a      	ldr	r2, [r7, #0]
 8007f10:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	2b40      	cmp	r3, #64	; 0x40
 8007f18:	d138      	bne.n	8007f8c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	68ba      	ldr	r2, [r7, #8]
 8007f28:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007f2a:	e086      	b.n	800803a <DMA_SetConfig+0x32a>
 8007f2c:	40020010 	.word	0x40020010
 8007f30:	40020028 	.word	0x40020028
 8007f34:	40020040 	.word	0x40020040
 8007f38:	40020058 	.word	0x40020058
 8007f3c:	40020070 	.word	0x40020070
 8007f40:	40020088 	.word	0x40020088
 8007f44:	400200a0 	.word	0x400200a0
 8007f48:	400200b8 	.word	0x400200b8
 8007f4c:	40020410 	.word	0x40020410
 8007f50:	40020428 	.word	0x40020428
 8007f54:	40020440 	.word	0x40020440
 8007f58:	40020458 	.word	0x40020458
 8007f5c:	40020470 	.word	0x40020470
 8007f60:	40020488 	.word	0x40020488
 8007f64:	400204a0 	.word	0x400204a0
 8007f68:	400204b8 	.word	0x400204b8
 8007f6c:	58025408 	.word	0x58025408
 8007f70:	5802541c 	.word	0x5802541c
 8007f74:	58025430 	.word	0x58025430
 8007f78:	58025444 	.word	0x58025444
 8007f7c:	58025458 	.word	0x58025458
 8007f80:	5802546c 	.word	0x5802546c
 8007f84:	58025480 	.word	0x58025480
 8007f88:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	68ba      	ldr	r2, [r7, #8]
 8007f92:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	60da      	str	r2, [r3, #12]
}
 8007f9c:	e04d      	b.n	800803a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a29      	ldr	r2, [pc, #164]	; (8008048 <DMA_SetConfig+0x338>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d022      	beq.n	8007fee <DMA_SetConfig+0x2de>
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a27      	ldr	r2, [pc, #156]	; (800804c <DMA_SetConfig+0x33c>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d01d      	beq.n	8007fee <DMA_SetConfig+0x2de>
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a26      	ldr	r2, [pc, #152]	; (8008050 <DMA_SetConfig+0x340>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d018      	beq.n	8007fee <DMA_SetConfig+0x2de>
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a24      	ldr	r2, [pc, #144]	; (8008054 <DMA_SetConfig+0x344>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d013      	beq.n	8007fee <DMA_SetConfig+0x2de>
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a23      	ldr	r2, [pc, #140]	; (8008058 <DMA_SetConfig+0x348>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d00e      	beq.n	8007fee <DMA_SetConfig+0x2de>
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a21      	ldr	r2, [pc, #132]	; (800805c <DMA_SetConfig+0x34c>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d009      	beq.n	8007fee <DMA_SetConfig+0x2de>
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a20      	ldr	r2, [pc, #128]	; (8008060 <DMA_SetConfig+0x350>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d004      	beq.n	8007fee <DMA_SetConfig+0x2de>
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a1e      	ldr	r2, [pc, #120]	; (8008064 <DMA_SetConfig+0x354>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d101      	bne.n	8007ff2 <DMA_SetConfig+0x2e2>
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e000      	b.n	8007ff4 <DMA_SetConfig+0x2e4>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d020      	beq.n	800803a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ffc:	f003 031f 	and.w	r3, r3, #31
 8008000:	2201      	movs	r2, #1
 8008002:	409a      	lsls	r2, r3
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	683a      	ldr	r2, [r7, #0]
 800800e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	2b40      	cmp	r3, #64	; 0x40
 8008016:	d108      	bne.n	800802a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68ba      	ldr	r2, [r7, #8]
 8008026:	60da      	str	r2, [r3, #12]
}
 8008028:	e007      	b.n	800803a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	68ba      	ldr	r2, [r7, #8]
 8008030:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	687a      	ldr	r2, [r7, #4]
 8008038:	60da      	str	r2, [r3, #12]
}
 800803a:	bf00      	nop
 800803c:	371c      	adds	r7, #28
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop
 8008048:	58025408 	.word	0x58025408
 800804c:	5802541c 	.word	0x5802541c
 8008050:	58025430 	.word	0x58025430
 8008054:	58025444 	.word	0x58025444
 8008058:	58025458 	.word	0x58025458
 800805c:	5802546c 	.word	0x5802546c
 8008060:	58025480 	.word	0x58025480
 8008064:	58025494 	.word	0x58025494

08008068 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008068:	b480      	push	{r7}
 800806a:	b085      	sub	sp, #20
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a42      	ldr	r2, [pc, #264]	; (8008180 <DMA_CalcBaseAndBitshift+0x118>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d04a      	beq.n	8008110 <DMA_CalcBaseAndBitshift+0xa8>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a41      	ldr	r2, [pc, #260]	; (8008184 <DMA_CalcBaseAndBitshift+0x11c>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d045      	beq.n	8008110 <DMA_CalcBaseAndBitshift+0xa8>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a3f      	ldr	r2, [pc, #252]	; (8008188 <DMA_CalcBaseAndBitshift+0x120>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d040      	beq.n	8008110 <DMA_CalcBaseAndBitshift+0xa8>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a3e      	ldr	r2, [pc, #248]	; (800818c <DMA_CalcBaseAndBitshift+0x124>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d03b      	beq.n	8008110 <DMA_CalcBaseAndBitshift+0xa8>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a3c      	ldr	r2, [pc, #240]	; (8008190 <DMA_CalcBaseAndBitshift+0x128>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d036      	beq.n	8008110 <DMA_CalcBaseAndBitshift+0xa8>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a3b      	ldr	r2, [pc, #236]	; (8008194 <DMA_CalcBaseAndBitshift+0x12c>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d031      	beq.n	8008110 <DMA_CalcBaseAndBitshift+0xa8>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a39      	ldr	r2, [pc, #228]	; (8008198 <DMA_CalcBaseAndBitshift+0x130>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d02c      	beq.n	8008110 <DMA_CalcBaseAndBitshift+0xa8>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a38      	ldr	r2, [pc, #224]	; (800819c <DMA_CalcBaseAndBitshift+0x134>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d027      	beq.n	8008110 <DMA_CalcBaseAndBitshift+0xa8>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a36      	ldr	r2, [pc, #216]	; (80081a0 <DMA_CalcBaseAndBitshift+0x138>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d022      	beq.n	8008110 <DMA_CalcBaseAndBitshift+0xa8>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a35      	ldr	r2, [pc, #212]	; (80081a4 <DMA_CalcBaseAndBitshift+0x13c>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d01d      	beq.n	8008110 <DMA_CalcBaseAndBitshift+0xa8>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a33      	ldr	r2, [pc, #204]	; (80081a8 <DMA_CalcBaseAndBitshift+0x140>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d018      	beq.n	8008110 <DMA_CalcBaseAndBitshift+0xa8>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a32      	ldr	r2, [pc, #200]	; (80081ac <DMA_CalcBaseAndBitshift+0x144>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d013      	beq.n	8008110 <DMA_CalcBaseAndBitshift+0xa8>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a30      	ldr	r2, [pc, #192]	; (80081b0 <DMA_CalcBaseAndBitshift+0x148>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d00e      	beq.n	8008110 <DMA_CalcBaseAndBitshift+0xa8>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a2f      	ldr	r2, [pc, #188]	; (80081b4 <DMA_CalcBaseAndBitshift+0x14c>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d009      	beq.n	8008110 <DMA_CalcBaseAndBitshift+0xa8>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a2d      	ldr	r2, [pc, #180]	; (80081b8 <DMA_CalcBaseAndBitshift+0x150>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d004      	beq.n	8008110 <DMA_CalcBaseAndBitshift+0xa8>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a2c      	ldr	r2, [pc, #176]	; (80081bc <DMA_CalcBaseAndBitshift+0x154>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d101      	bne.n	8008114 <DMA_CalcBaseAndBitshift+0xac>
 8008110:	2301      	movs	r3, #1
 8008112:	e000      	b.n	8008116 <DMA_CalcBaseAndBitshift+0xae>
 8008114:	2300      	movs	r3, #0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d024      	beq.n	8008164 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	b2db      	uxtb	r3, r3
 8008120:	3b10      	subs	r3, #16
 8008122:	4a27      	ldr	r2, [pc, #156]	; (80081c0 <DMA_CalcBaseAndBitshift+0x158>)
 8008124:	fba2 2303 	umull	r2, r3, r2, r3
 8008128:	091b      	lsrs	r3, r3, #4
 800812a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f003 0307 	and.w	r3, r3, #7
 8008132:	4a24      	ldr	r2, [pc, #144]	; (80081c4 <DMA_CalcBaseAndBitshift+0x15c>)
 8008134:	5cd3      	ldrb	r3, [r2, r3]
 8008136:	461a      	mov	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2b03      	cmp	r3, #3
 8008140:	d908      	bls.n	8008154 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	461a      	mov	r2, r3
 8008148:	4b1f      	ldr	r3, [pc, #124]	; (80081c8 <DMA_CalcBaseAndBitshift+0x160>)
 800814a:	4013      	ands	r3, r2
 800814c:	1d1a      	adds	r2, r3, #4
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	659a      	str	r2, [r3, #88]	; 0x58
 8008152:	e00d      	b.n	8008170 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	461a      	mov	r2, r3
 800815a:	4b1b      	ldr	r3, [pc, #108]	; (80081c8 <DMA_CalcBaseAndBitshift+0x160>)
 800815c:	4013      	ands	r3, r2
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	6593      	str	r3, [r2, #88]	; 0x58
 8008162:	e005      	b.n	8008170 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008174:	4618      	mov	r0, r3
 8008176:	3714      	adds	r7, #20
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr
 8008180:	40020010 	.word	0x40020010
 8008184:	40020028 	.word	0x40020028
 8008188:	40020040 	.word	0x40020040
 800818c:	40020058 	.word	0x40020058
 8008190:	40020070 	.word	0x40020070
 8008194:	40020088 	.word	0x40020088
 8008198:	400200a0 	.word	0x400200a0
 800819c:	400200b8 	.word	0x400200b8
 80081a0:	40020410 	.word	0x40020410
 80081a4:	40020428 	.word	0x40020428
 80081a8:	40020440 	.word	0x40020440
 80081ac:	40020458 	.word	0x40020458
 80081b0:	40020470 	.word	0x40020470
 80081b4:	40020488 	.word	0x40020488
 80081b8:	400204a0 	.word	0x400204a0
 80081bc:	400204b8 	.word	0x400204b8
 80081c0:	aaaaaaab 	.word	0xaaaaaaab
 80081c4:	0801ff84 	.word	0x0801ff84
 80081c8:	fffffc00 	.word	0xfffffc00

080081cc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b085      	sub	sp, #20
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081d4:	2300      	movs	r3, #0
 80081d6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	699b      	ldr	r3, [r3, #24]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d120      	bne.n	8008222 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e4:	2b03      	cmp	r3, #3
 80081e6:	d858      	bhi.n	800829a <DMA_CheckFifoParam+0xce>
 80081e8:	a201      	add	r2, pc, #4	; (adr r2, 80081f0 <DMA_CheckFifoParam+0x24>)
 80081ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ee:	bf00      	nop
 80081f0:	08008201 	.word	0x08008201
 80081f4:	08008213 	.word	0x08008213
 80081f8:	08008201 	.word	0x08008201
 80081fc:	0800829b 	.word	0x0800829b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008204:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008208:	2b00      	cmp	r3, #0
 800820a:	d048      	beq.n	800829e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008210:	e045      	b.n	800829e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008216:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800821a:	d142      	bne.n	80082a2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800821c:	2301      	movs	r3, #1
 800821e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008220:	e03f      	b.n	80082a2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	699b      	ldr	r3, [r3, #24]
 8008226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800822a:	d123      	bne.n	8008274 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008230:	2b03      	cmp	r3, #3
 8008232:	d838      	bhi.n	80082a6 <DMA_CheckFifoParam+0xda>
 8008234:	a201      	add	r2, pc, #4	; (adr r2, 800823c <DMA_CheckFifoParam+0x70>)
 8008236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800823a:	bf00      	nop
 800823c:	0800824d 	.word	0x0800824d
 8008240:	08008253 	.word	0x08008253
 8008244:	0800824d 	.word	0x0800824d
 8008248:	08008265 	.word	0x08008265
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800824c:	2301      	movs	r3, #1
 800824e:	73fb      	strb	r3, [r7, #15]
        break;
 8008250:	e030      	b.n	80082b4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008256:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800825a:	2b00      	cmp	r3, #0
 800825c:	d025      	beq.n	80082aa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008262:	e022      	b.n	80082aa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008268:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800826c:	d11f      	bne.n	80082ae <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008272:	e01c      	b.n	80082ae <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008278:	2b02      	cmp	r3, #2
 800827a:	d902      	bls.n	8008282 <DMA_CheckFifoParam+0xb6>
 800827c:	2b03      	cmp	r3, #3
 800827e:	d003      	beq.n	8008288 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008280:	e018      	b.n	80082b4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	73fb      	strb	r3, [r7, #15]
        break;
 8008286:	e015      	b.n	80082b4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800828c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008290:	2b00      	cmp	r3, #0
 8008292:	d00e      	beq.n	80082b2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008294:	2301      	movs	r3, #1
 8008296:	73fb      	strb	r3, [r7, #15]
    break;
 8008298:	e00b      	b.n	80082b2 <DMA_CheckFifoParam+0xe6>
        break;
 800829a:	bf00      	nop
 800829c:	e00a      	b.n	80082b4 <DMA_CheckFifoParam+0xe8>
        break;
 800829e:	bf00      	nop
 80082a0:	e008      	b.n	80082b4 <DMA_CheckFifoParam+0xe8>
        break;
 80082a2:	bf00      	nop
 80082a4:	e006      	b.n	80082b4 <DMA_CheckFifoParam+0xe8>
        break;
 80082a6:	bf00      	nop
 80082a8:	e004      	b.n	80082b4 <DMA_CheckFifoParam+0xe8>
        break;
 80082aa:	bf00      	nop
 80082ac:	e002      	b.n	80082b4 <DMA_CheckFifoParam+0xe8>
        break;
 80082ae:	bf00      	nop
 80082b0:	e000      	b.n	80082b4 <DMA_CheckFifoParam+0xe8>
    break;
 80082b2:	bf00      	nop
    }
  }

  return status;
 80082b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3714      	adds	r7, #20
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop

080082c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b085      	sub	sp, #20
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a38      	ldr	r2, [pc, #224]	; (80083b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d022      	beq.n	8008322 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a36      	ldr	r2, [pc, #216]	; (80083bc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d01d      	beq.n	8008322 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a35      	ldr	r2, [pc, #212]	; (80083c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d018      	beq.n	8008322 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a33      	ldr	r2, [pc, #204]	; (80083c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d013      	beq.n	8008322 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a32      	ldr	r2, [pc, #200]	; (80083c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d00e      	beq.n	8008322 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a30      	ldr	r2, [pc, #192]	; (80083cc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d009      	beq.n	8008322 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a2f      	ldr	r2, [pc, #188]	; (80083d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d004      	beq.n	8008322 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a2d      	ldr	r2, [pc, #180]	; (80083d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d101      	bne.n	8008326 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008322:	2301      	movs	r3, #1
 8008324:	e000      	b.n	8008328 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008326:	2300      	movs	r3, #0
 8008328:	2b00      	cmp	r3, #0
 800832a:	d01a      	beq.n	8008362 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	b2db      	uxtb	r3, r3
 8008332:	3b08      	subs	r3, #8
 8008334:	4a28      	ldr	r2, [pc, #160]	; (80083d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008336:	fba2 2303 	umull	r2, r3, r2, r3
 800833a:	091b      	lsrs	r3, r3, #4
 800833c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800833e:	68fa      	ldr	r2, [r7, #12]
 8008340:	4b26      	ldr	r3, [pc, #152]	; (80083dc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008342:	4413      	add	r3, r2
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	461a      	mov	r2, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	4a24      	ldr	r2, [pc, #144]	; (80083e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008350:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f003 031f 	and.w	r3, r3, #31
 8008358:	2201      	movs	r2, #1
 800835a:	409a      	lsls	r2, r3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008360:	e024      	b.n	80083ac <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	b2db      	uxtb	r3, r3
 8008368:	3b10      	subs	r3, #16
 800836a:	4a1e      	ldr	r2, [pc, #120]	; (80083e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800836c:	fba2 2303 	umull	r2, r3, r2, r3
 8008370:	091b      	lsrs	r3, r3, #4
 8008372:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	4a1c      	ldr	r2, [pc, #112]	; (80083e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d806      	bhi.n	800838a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	4a1b      	ldr	r2, [pc, #108]	; (80083ec <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d902      	bls.n	800838a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	3308      	adds	r3, #8
 8008388:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800838a:	68fa      	ldr	r2, [r7, #12]
 800838c:	4b18      	ldr	r3, [pc, #96]	; (80083f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800838e:	4413      	add	r3, r2
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	461a      	mov	r2, r3
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a16      	ldr	r2, [pc, #88]	; (80083f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800839c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f003 031f 	and.w	r3, r3, #31
 80083a4:	2201      	movs	r2, #1
 80083a6:	409a      	lsls	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	669a      	str	r2, [r3, #104]	; 0x68
}
 80083ac:	bf00      	nop
 80083ae:	3714      	adds	r7, #20
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr
 80083b8:	58025408 	.word	0x58025408
 80083bc:	5802541c 	.word	0x5802541c
 80083c0:	58025430 	.word	0x58025430
 80083c4:	58025444 	.word	0x58025444
 80083c8:	58025458 	.word	0x58025458
 80083cc:	5802546c 	.word	0x5802546c
 80083d0:	58025480 	.word	0x58025480
 80083d4:	58025494 	.word	0x58025494
 80083d8:	cccccccd 	.word	0xcccccccd
 80083dc:	16009600 	.word	0x16009600
 80083e0:	58025880 	.word	0x58025880
 80083e4:	aaaaaaab 	.word	0xaaaaaaab
 80083e8:	400204b8 	.word	0x400204b8
 80083ec:	4002040f 	.word	0x4002040f
 80083f0:	10008200 	.word	0x10008200
 80083f4:	40020880 	.word	0x40020880

080083f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	b2db      	uxtb	r3, r3
 8008406:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d04a      	beq.n	80084a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2b08      	cmp	r3, #8
 8008412:	d847      	bhi.n	80084a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a25      	ldr	r2, [pc, #148]	; (80084b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d022      	beq.n	8008464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a24      	ldr	r2, [pc, #144]	; (80084b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d01d      	beq.n	8008464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a22      	ldr	r2, [pc, #136]	; (80084b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d018      	beq.n	8008464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a21      	ldr	r2, [pc, #132]	; (80084bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d013      	beq.n	8008464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a1f      	ldr	r2, [pc, #124]	; (80084c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d00e      	beq.n	8008464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a1e      	ldr	r2, [pc, #120]	; (80084c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d009      	beq.n	8008464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a1c      	ldr	r2, [pc, #112]	; (80084c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d004      	beq.n	8008464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a1b      	ldr	r2, [pc, #108]	; (80084cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d101      	bne.n	8008468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008464:	2301      	movs	r3, #1
 8008466:	e000      	b.n	800846a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008468:	2300      	movs	r3, #0
 800846a:	2b00      	cmp	r3, #0
 800846c:	d00a      	beq.n	8008484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800846e:	68fa      	ldr	r2, [r7, #12]
 8008470:	4b17      	ldr	r3, [pc, #92]	; (80084d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008472:	4413      	add	r3, r2
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	461a      	mov	r2, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4a15      	ldr	r2, [pc, #84]	; (80084d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008480:	671a      	str	r2, [r3, #112]	; 0x70
 8008482:	e009      	b.n	8008498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008484:	68fa      	ldr	r2, [r7, #12]
 8008486:	4b14      	ldr	r3, [pc, #80]	; (80084d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008488:	4413      	add	r3, r2
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	461a      	mov	r2, r3
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	4a11      	ldr	r2, [pc, #68]	; (80084dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008496:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	3b01      	subs	r3, #1
 800849c:	2201      	movs	r2, #1
 800849e:	409a      	lsls	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80084a4:	bf00      	nop
 80084a6:	3714      	adds	r7, #20
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr
 80084b0:	58025408 	.word	0x58025408
 80084b4:	5802541c 	.word	0x5802541c
 80084b8:	58025430 	.word	0x58025430
 80084bc:	58025444 	.word	0x58025444
 80084c0:	58025458 	.word	0x58025458
 80084c4:	5802546c 	.word	0x5802546c
 80084c8:	58025480 	.word	0x58025480
 80084cc:	58025494 	.word	0x58025494
 80084d0:	1600963f 	.word	0x1600963f
 80084d4:	58025940 	.word	0x58025940
 80084d8:	1000823f 	.word	0x1000823f
 80084dc:	40020940 	.word	0x40020940

080084e0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b098      	sub	sp, #96	; 0x60
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80084e8:	4a84      	ldr	r2, [pc, #528]	; (80086fc <HAL_FDCAN_Init+0x21c>)
 80084ea:	f107 030c 	add.w	r3, r7, #12
 80084ee:	4611      	mov	r1, r2
 80084f0:	224c      	movs	r2, #76	; 0x4c
 80084f2:	4618      	mov	r0, r3
 80084f4:	f013 fcd9 	bl	801beaa <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d101      	bne.n	8008502 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	e1c6      	b.n	8008890 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a7e      	ldr	r2, [pc, #504]	; (8008700 <HAL_FDCAN_Init+0x220>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d106      	bne.n	800851a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008514:	461a      	mov	r2, r3
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008520:	b2db      	uxtb	r3, r3
 8008522:	2b00      	cmp	r3, #0
 8008524:	d106      	bne.n	8008534 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f7fa fdb0 	bl	8003094 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	699a      	ldr	r2, [r3, #24]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f022 0210 	bic.w	r2, r2, #16
 8008542:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008544:	f7fb fde6 	bl	8004114 <HAL_GetTick>
 8008548:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800854a:	e014      	b.n	8008576 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800854c:	f7fb fde2 	bl	8004114 <HAL_GetTick>
 8008550:	4602      	mov	r2, r0
 8008552:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008554:	1ad3      	subs	r3, r2, r3
 8008556:	2b0a      	cmp	r3, #10
 8008558:	d90d      	bls.n	8008576 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008560:	f043 0201 	orr.w	r2, r3, #1
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2203      	movs	r2, #3
 800856e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	e18c      	b.n	8008890 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	699b      	ldr	r3, [r3, #24]
 800857c:	f003 0308 	and.w	r3, r3, #8
 8008580:	2b08      	cmp	r3, #8
 8008582:	d0e3      	beq.n	800854c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	699a      	ldr	r2, [r3, #24]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f042 0201 	orr.w	r2, r2, #1
 8008592:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008594:	f7fb fdbe 	bl	8004114 <HAL_GetTick>
 8008598:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800859a:	e014      	b.n	80085c6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800859c:	f7fb fdba 	bl	8004114 <HAL_GetTick>
 80085a0:	4602      	mov	r2, r0
 80085a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085a4:	1ad3      	subs	r3, r2, r3
 80085a6:	2b0a      	cmp	r3, #10
 80085a8:	d90d      	bls.n	80085c6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80085b0:	f043 0201 	orr.w	r2, r3, #1
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2203      	movs	r2, #3
 80085be:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e164      	b.n	8008890 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	699b      	ldr	r3, [r3, #24]
 80085cc:	f003 0301 	and.w	r3, r3, #1
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d0e3      	beq.n	800859c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	699a      	ldr	r2, [r3, #24]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f042 0202 	orr.w	r2, r2, #2
 80085e2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	7c1b      	ldrb	r3, [r3, #16]
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d108      	bne.n	80085fe <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	699a      	ldr	r2, [r3, #24]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085fa:	619a      	str	r2, [r3, #24]
 80085fc:	e007      	b.n	800860e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	699a      	ldr	r2, [r3, #24]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800860c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	7c5b      	ldrb	r3, [r3, #17]
 8008612:	2b01      	cmp	r3, #1
 8008614:	d108      	bne.n	8008628 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	699a      	ldr	r2, [r3, #24]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008624:	619a      	str	r2, [r3, #24]
 8008626:	e007      	b.n	8008638 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	699a      	ldr	r2, [r3, #24]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008636:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	7c9b      	ldrb	r3, [r3, #18]
 800863c:	2b01      	cmp	r3, #1
 800863e:	d108      	bne.n	8008652 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	699a      	ldr	r2, [r3, #24]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800864e:	619a      	str	r2, [r3, #24]
 8008650:	e007      	b.n	8008662 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	699a      	ldr	r2, [r3, #24]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008660:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	699b      	ldr	r3, [r3, #24]
 8008668:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	689a      	ldr	r2, [r3, #8]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	430a      	orrs	r2, r1
 8008676:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	699a      	ldr	r2, [r3, #24]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8008686:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	691a      	ldr	r2, [r3, #16]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f022 0210 	bic.w	r2, r2, #16
 8008696:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	2b01      	cmp	r3, #1
 800869e:	d108      	bne.n	80086b2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	699a      	ldr	r2, [r3, #24]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f042 0204 	orr.w	r2, r2, #4
 80086ae:	619a      	str	r2, [r3, #24]
 80086b0:	e030      	b.n	8008714 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	68db      	ldr	r3, [r3, #12]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d02c      	beq.n	8008714 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	2b02      	cmp	r3, #2
 80086c0:	d020      	beq.n	8008704 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	699a      	ldr	r2, [r3, #24]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80086d0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	691a      	ldr	r2, [r3, #16]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f042 0210 	orr.w	r2, r2, #16
 80086e0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	2b03      	cmp	r3, #3
 80086e8:	d114      	bne.n	8008714 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	699a      	ldr	r2, [r3, #24]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f042 0220 	orr.w	r2, r2, #32
 80086f8:	619a      	str	r2, [r3, #24]
 80086fa:	e00b      	b.n	8008714 <HAL_FDCAN_Init+0x234>
 80086fc:	0801fe28 	.word	0x0801fe28
 8008700:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	699a      	ldr	r2, [r3, #24]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f042 0220 	orr.w	r2, r2, #32
 8008712:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	699b      	ldr	r3, [r3, #24]
 8008718:	3b01      	subs	r3, #1
 800871a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	69db      	ldr	r3, [r3, #28]
 8008720:	3b01      	subs	r3, #1
 8008722:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008724:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6a1b      	ldr	r3, [r3, #32]
 800872a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800872c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	695b      	ldr	r3, [r3, #20]
 8008734:	3b01      	subs	r3, #1
 8008736:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800873c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800873e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008748:	d115      	bne.n	8008776 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800874e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008754:	3b01      	subs	r3, #1
 8008756:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8008758:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800875e:	3b01      	subs	r3, #1
 8008760:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8008762:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876a:	3b01      	subs	r3, #1
 800876c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8008772:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8008774:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00a      	beq.n	8008794 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	430a      	orrs	r2, r1
 8008790:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800879c:	4413      	add	r3, r2
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d011      	beq.n	80087c6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80087aa:	f023 0107 	bic.w	r1, r3, #7
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	3360      	adds	r3, #96	; 0x60
 80087b6:	443b      	add	r3, r7
 80087b8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	430a      	orrs	r2, r1
 80087c2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d011      	beq.n	80087f2 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80087d6:	f023 0107 	bic.w	r1, r3, #7
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	3360      	adds	r3, #96	; 0x60
 80087e2:	443b      	add	r3, r7
 80087e4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	430a      	orrs	r2, r1
 80087ee:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d012      	beq.n	8008820 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008802:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	3360      	adds	r3, #96	; 0x60
 800880e:	443b      	add	r3, r7
 8008810:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8008814:	011a      	lsls	r2, r3, #4
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	430a      	orrs	r2, r1
 800881c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008824:	2b00      	cmp	r3, #0
 8008826:	d012      	beq.n	800884e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008830:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	3360      	adds	r3, #96	; 0x60
 800883c:	443b      	add	r3, r7
 800883e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8008842:	021a      	lsls	r2, r3, #8
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	430a      	orrs	r2, r1
 800884a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a11      	ldr	r2, [pc, #68]	; (8008898 <HAL_FDCAN_Init+0x3b8>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d107      	bne.n	8008868 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	689a      	ldr	r2, [r3, #8]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	f022 0203 	bic.w	r2, r2, #3
 8008866:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 f80b 	bl	800889c <FDCAN_CalcultateRamBlockAddresses>
 8008886:	4603      	mov	r3, r0
 8008888:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 800888c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8008890:	4618      	mov	r0, r3
 8008892:	3760      	adds	r7, #96	; 0x60
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	4000a000 	.word	0x4000a000

0800889c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800889c:	b480      	push	{r7}
 800889e:	b085      	sub	sp, #20
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088a8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80088b2:	4ba7      	ldr	r3, [pc, #668]	; (8008b50 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80088b4:	4013      	ands	r3, r2
 80088b6:	68ba      	ldr	r2, [r7, #8]
 80088b8:	0091      	lsls	r1, r2, #2
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	6812      	ldr	r2, [r2, #0]
 80088be:	430b      	orrs	r3, r1
 80088c0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088cc:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088d4:	041a      	lsls	r2, r3, #16
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	430a      	orrs	r2, r1
 80088dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e4:	68ba      	ldr	r2, [r7, #8]
 80088e6:	4413      	add	r3, r2
 80088e8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80088f2:	4b97      	ldr	r3, [pc, #604]	; (8008b50 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80088f4:	4013      	ands	r3, r2
 80088f6:	68ba      	ldr	r2, [r7, #8]
 80088f8:	0091      	lsls	r1, r2, #2
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	6812      	ldr	r2, [r2, #0]
 80088fe:	430b      	orrs	r3, r1
 8008900:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800890c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008914:	041a      	lsls	r2, r3, #16
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	430a      	orrs	r2, r1
 800891c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008924:	005b      	lsls	r3, r3, #1
 8008926:	68ba      	ldr	r2, [r7, #8]
 8008928:	4413      	add	r3, r2
 800892a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8008934:	4b86      	ldr	r3, [pc, #536]	; (8008b50 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008936:	4013      	ands	r3, r2
 8008938:	68ba      	ldr	r2, [r7, #8]
 800893a:	0091      	lsls	r1, r2, #2
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	6812      	ldr	r2, [r2, #0]
 8008940:	430b      	orrs	r3, r1
 8008942:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800894e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008956:	041a      	lsls	r2, r3, #16
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	430a      	orrs	r2, r1
 800895e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800896a:	fb02 f303 	mul.w	r3, r2, r3
 800896e:	68ba      	ldr	r2, [r7, #8]
 8008970:	4413      	add	r3, r2
 8008972:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800897c:	4b74      	ldr	r3, [pc, #464]	; (8008b50 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800897e:	4013      	ands	r3, r2
 8008980:	68ba      	ldr	r2, [r7, #8]
 8008982:	0091      	lsls	r1, r2, #2
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	6812      	ldr	r2, [r2, #0]
 8008988:	430b      	orrs	r3, r1
 800898a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008996:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800899e:	041a      	lsls	r2, r3, #16
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	430a      	orrs	r2, r1
 80089a6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80089b2:	fb02 f303 	mul.w	r3, r2, r3
 80089b6:	68ba      	ldr	r2, [r7, #8]
 80089b8:	4413      	add	r3, r2
 80089ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80089c4:	4b62      	ldr	r3, [pc, #392]	; (8008b50 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80089c6:	4013      	ands	r3, r2
 80089c8:	68ba      	ldr	r2, [r7, #8]
 80089ca:	0091      	lsls	r1, r2, #2
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	6812      	ldr	r2, [r2, #0]
 80089d0:	430b      	orrs	r3, r1
 80089d2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80089de:	fb02 f303 	mul.w	r3, r2, r3
 80089e2:	68ba      	ldr	r2, [r7, #8]
 80089e4:	4413      	add	r3, r2
 80089e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80089f0:	4b57      	ldr	r3, [pc, #348]	; (8008b50 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80089f2:	4013      	ands	r3, r2
 80089f4:	68ba      	ldr	r2, [r7, #8]
 80089f6:	0091      	lsls	r1, r2, #2
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	6812      	ldr	r2, [r2, #0]
 80089fc:	430b      	orrs	r3, r1
 80089fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008a0a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a12:	041a      	lsls	r2, r3, #16
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	430a      	orrs	r2, r1
 8008a1a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a22:	005b      	lsls	r3, r3, #1
 8008a24:	68ba      	ldr	r2, [r7, #8]
 8008a26:	4413      	add	r3, r2
 8008a28:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8008a32:	4b47      	ldr	r3, [pc, #284]	; (8008b50 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008a34:	4013      	ands	r3, r2
 8008a36:	68ba      	ldr	r2, [r7, #8]
 8008a38:	0091      	lsls	r1, r2, #2
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	6812      	ldr	r2, [r2, #0]
 8008a3e:	430b      	orrs	r3, r1
 8008a40:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008a4c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a54:	041a      	lsls	r2, r3, #16
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	430a      	orrs	r2, r1
 8008a5c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008a68:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a70:	061a      	lsls	r2, r3, #24
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	430a      	orrs	r2, r1
 8008a78:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a80:	4b34      	ldr	r3, [pc, #208]	; (8008b54 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8008a82:	4413      	add	r3, r2
 8008a84:	009a      	lsls	r2, r3, #2
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	441a      	add	r2, r3
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aa2:	00db      	lsls	r3, r3, #3
 8008aa4:	441a      	add	r2, r3
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab2:	6879      	ldr	r1, [r7, #4]
 8008ab4:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8008ab6:	fb01 f303 	mul.w	r3, r1, r3
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	441a      	add	r2, r3
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008aca:	6879      	ldr	r1, [r7, #4]
 8008acc:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8008ace:	fb01 f303 	mul.w	r3, r1, r3
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	441a      	add	r2, r3
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ae2:	6879      	ldr	r1, [r7, #4]
 8008ae4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8008ae6:	fb01 f303 	mul.w	r3, r1, r3
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	441a      	add	r2, r3
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008afe:	00db      	lsls	r3, r3, #3
 8008b00:	441a      	add	r2, r3
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b12:	6879      	ldr	r1, [r7, #4]
 8008b14:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8008b16:	fb01 f303 	mul.w	r3, r1, r3
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	441a      	add	r2, r3
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b2e:	6879      	ldr	r1, [r7, #4]
 8008b30:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8008b32:	fb01 f303 	mul.w	r3, r1, r3
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	441a      	add	r2, r3
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b46:	4a04      	ldr	r2, [pc, #16]	; (8008b58 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d915      	bls.n	8008b78 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8008b4c:	e006      	b.n	8008b5c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8008b4e:	bf00      	nop
 8008b50:	ffff0003 	.word	0xffff0003
 8008b54:	10002b00 	.word	0x10002b00
 8008b58:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008b62:	f043 0220 	orr.w	r2, r3, #32
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2203      	movs	r2, #3
 8008b70:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8008b74:	2301      	movs	r3, #1
 8008b76:	e010      	b.n	8008b9a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b7c:	60fb      	str	r3, [r7, #12]
 8008b7e:	e005      	b.n	8008b8c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2200      	movs	r2, #0
 8008b84:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	3304      	adds	r3, #4
 8008b8a:	60fb      	str	r3, [r7, #12]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b92:	68fa      	ldr	r2, [r7, #12]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d3f3      	bcc.n	8008b80 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3714      	adds	r7, #20
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr
 8008ba6:	bf00      	nop

08008ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b089      	sub	sp, #36	; 0x24
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008bb6:	4b86      	ldr	r3, [pc, #536]	; (8008dd0 <HAL_GPIO_Init+0x228>)
 8008bb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008bba:	e18c      	b.n	8008ed6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	2101      	movs	r1, #1
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8008bc8:	4013      	ands	r3, r2
 8008bca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	f000 817e 	beq.w	8008ed0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	f003 0303 	and.w	r3, r3, #3
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d005      	beq.n	8008bec <HAL_GPIO_Init+0x44>
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	f003 0303 	and.w	r3, r3, #3
 8008be8:	2b02      	cmp	r3, #2
 8008bea:	d130      	bne.n	8008c4e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	689b      	ldr	r3, [r3, #8]
 8008bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008bf2:	69fb      	ldr	r3, [r7, #28]
 8008bf4:	005b      	lsls	r3, r3, #1
 8008bf6:	2203      	movs	r2, #3
 8008bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8008bfc:	43db      	mvns	r3, r3
 8008bfe:	69ba      	ldr	r2, [r7, #24]
 8008c00:	4013      	ands	r3, r2
 8008c02:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	68da      	ldr	r2, [r3, #12]
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	005b      	lsls	r3, r3, #1
 8008c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c10:	69ba      	ldr	r2, [r7, #24]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	69ba      	ldr	r2, [r7, #24]
 8008c1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008c22:	2201      	movs	r2, #1
 8008c24:	69fb      	ldr	r3, [r7, #28]
 8008c26:	fa02 f303 	lsl.w	r3, r2, r3
 8008c2a:	43db      	mvns	r3, r3
 8008c2c:	69ba      	ldr	r2, [r7, #24]
 8008c2e:	4013      	ands	r3, r2
 8008c30:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	091b      	lsrs	r3, r3, #4
 8008c38:	f003 0201 	and.w	r2, r3, #1
 8008c3c:	69fb      	ldr	r3, [r7, #28]
 8008c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c42:	69ba      	ldr	r2, [r7, #24]
 8008c44:	4313      	orrs	r3, r2
 8008c46:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	69ba      	ldr	r2, [r7, #24]
 8008c4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	f003 0303 	and.w	r3, r3, #3
 8008c56:	2b03      	cmp	r3, #3
 8008c58:	d017      	beq.n	8008c8a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	005b      	lsls	r3, r3, #1
 8008c64:	2203      	movs	r2, #3
 8008c66:	fa02 f303 	lsl.w	r3, r2, r3
 8008c6a:	43db      	mvns	r3, r3
 8008c6c:	69ba      	ldr	r2, [r7, #24]
 8008c6e:	4013      	ands	r3, r2
 8008c70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	689a      	ldr	r2, [r3, #8]
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	005b      	lsls	r3, r3, #1
 8008c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c7e:	69ba      	ldr	r2, [r7, #24]
 8008c80:	4313      	orrs	r3, r2
 8008c82:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	69ba      	ldr	r2, [r7, #24]
 8008c88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	f003 0303 	and.w	r3, r3, #3
 8008c92:	2b02      	cmp	r3, #2
 8008c94:	d123      	bne.n	8008cde <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	08da      	lsrs	r2, r3, #3
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	3208      	adds	r2, #8
 8008c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008ca4:	69fb      	ldr	r3, [r7, #28]
 8008ca6:	f003 0307 	and.w	r3, r3, #7
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	220f      	movs	r2, #15
 8008cae:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb2:	43db      	mvns	r3, r3
 8008cb4:	69ba      	ldr	r2, [r7, #24]
 8008cb6:	4013      	ands	r3, r2
 8008cb8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	691a      	ldr	r2, [r3, #16]
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	f003 0307 	and.w	r3, r3, #7
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8008cca:	69ba      	ldr	r2, [r7, #24]
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	08da      	lsrs	r2, r3, #3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	3208      	adds	r2, #8
 8008cd8:	69b9      	ldr	r1, [r7, #24]
 8008cda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	005b      	lsls	r3, r3, #1
 8008ce8:	2203      	movs	r2, #3
 8008cea:	fa02 f303 	lsl.w	r3, r2, r3
 8008cee:	43db      	mvns	r3, r3
 8008cf0:	69ba      	ldr	r2, [r7, #24]
 8008cf2:	4013      	ands	r3, r2
 8008cf4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	f003 0203 	and.w	r2, r3, #3
 8008cfe:	69fb      	ldr	r3, [r7, #28]
 8008d00:	005b      	lsls	r3, r3, #1
 8008d02:	fa02 f303 	lsl.w	r3, r2, r3
 8008d06:	69ba      	ldr	r2, [r7, #24]
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	69ba      	ldr	r2, [r7, #24]
 8008d10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	f000 80d8 	beq.w	8008ed0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d20:	4b2c      	ldr	r3, [pc, #176]	; (8008dd4 <HAL_GPIO_Init+0x22c>)
 8008d22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008d26:	4a2b      	ldr	r2, [pc, #172]	; (8008dd4 <HAL_GPIO_Init+0x22c>)
 8008d28:	f043 0302 	orr.w	r3, r3, #2
 8008d2c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008d30:	4b28      	ldr	r3, [pc, #160]	; (8008dd4 <HAL_GPIO_Init+0x22c>)
 8008d32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008d36:	f003 0302 	and.w	r3, r3, #2
 8008d3a:	60fb      	str	r3, [r7, #12]
 8008d3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008d3e:	4a26      	ldr	r2, [pc, #152]	; (8008dd8 <HAL_GPIO_Init+0x230>)
 8008d40:	69fb      	ldr	r3, [r7, #28]
 8008d42:	089b      	lsrs	r3, r3, #2
 8008d44:	3302      	adds	r3, #2
 8008d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	f003 0303 	and.w	r3, r3, #3
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	220f      	movs	r2, #15
 8008d56:	fa02 f303 	lsl.w	r3, r2, r3
 8008d5a:	43db      	mvns	r3, r3
 8008d5c:	69ba      	ldr	r2, [r7, #24]
 8008d5e:	4013      	ands	r3, r2
 8008d60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4a1d      	ldr	r2, [pc, #116]	; (8008ddc <HAL_GPIO_Init+0x234>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d04a      	beq.n	8008e00 <HAL_GPIO_Init+0x258>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4a1c      	ldr	r2, [pc, #112]	; (8008de0 <HAL_GPIO_Init+0x238>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d02b      	beq.n	8008dca <HAL_GPIO_Init+0x222>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	4a1b      	ldr	r2, [pc, #108]	; (8008de4 <HAL_GPIO_Init+0x23c>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d025      	beq.n	8008dc6 <HAL_GPIO_Init+0x21e>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	4a1a      	ldr	r2, [pc, #104]	; (8008de8 <HAL_GPIO_Init+0x240>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d01f      	beq.n	8008dc2 <HAL_GPIO_Init+0x21a>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	4a19      	ldr	r2, [pc, #100]	; (8008dec <HAL_GPIO_Init+0x244>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d019      	beq.n	8008dbe <HAL_GPIO_Init+0x216>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	4a18      	ldr	r2, [pc, #96]	; (8008df0 <HAL_GPIO_Init+0x248>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d013      	beq.n	8008dba <HAL_GPIO_Init+0x212>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	4a17      	ldr	r2, [pc, #92]	; (8008df4 <HAL_GPIO_Init+0x24c>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d00d      	beq.n	8008db6 <HAL_GPIO_Init+0x20e>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4a16      	ldr	r2, [pc, #88]	; (8008df8 <HAL_GPIO_Init+0x250>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d007      	beq.n	8008db2 <HAL_GPIO_Init+0x20a>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4a15      	ldr	r2, [pc, #84]	; (8008dfc <HAL_GPIO_Init+0x254>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d101      	bne.n	8008dae <HAL_GPIO_Init+0x206>
 8008daa:	2309      	movs	r3, #9
 8008dac:	e029      	b.n	8008e02 <HAL_GPIO_Init+0x25a>
 8008dae:	230a      	movs	r3, #10
 8008db0:	e027      	b.n	8008e02 <HAL_GPIO_Init+0x25a>
 8008db2:	2307      	movs	r3, #7
 8008db4:	e025      	b.n	8008e02 <HAL_GPIO_Init+0x25a>
 8008db6:	2306      	movs	r3, #6
 8008db8:	e023      	b.n	8008e02 <HAL_GPIO_Init+0x25a>
 8008dba:	2305      	movs	r3, #5
 8008dbc:	e021      	b.n	8008e02 <HAL_GPIO_Init+0x25a>
 8008dbe:	2304      	movs	r3, #4
 8008dc0:	e01f      	b.n	8008e02 <HAL_GPIO_Init+0x25a>
 8008dc2:	2303      	movs	r3, #3
 8008dc4:	e01d      	b.n	8008e02 <HAL_GPIO_Init+0x25a>
 8008dc6:	2302      	movs	r3, #2
 8008dc8:	e01b      	b.n	8008e02 <HAL_GPIO_Init+0x25a>
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e019      	b.n	8008e02 <HAL_GPIO_Init+0x25a>
 8008dce:	bf00      	nop
 8008dd0:	58000080 	.word	0x58000080
 8008dd4:	58024400 	.word	0x58024400
 8008dd8:	58000400 	.word	0x58000400
 8008ddc:	58020000 	.word	0x58020000
 8008de0:	58020400 	.word	0x58020400
 8008de4:	58020800 	.word	0x58020800
 8008de8:	58020c00 	.word	0x58020c00
 8008dec:	58021000 	.word	0x58021000
 8008df0:	58021400 	.word	0x58021400
 8008df4:	58021800 	.word	0x58021800
 8008df8:	58021c00 	.word	0x58021c00
 8008dfc:	58022400 	.word	0x58022400
 8008e00:	2300      	movs	r3, #0
 8008e02:	69fa      	ldr	r2, [r7, #28]
 8008e04:	f002 0203 	and.w	r2, r2, #3
 8008e08:	0092      	lsls	r2, r2, #2
 8008e0a:	4093      	lsls	r3, r2
 8008e0c:	69ba      	ldr	r2, [r7, #24]
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008e12:	4938      	ldr	r1, [pc, #224]	; (8008ef4 <HAL_GPIO_Init+0x34c>)
 8008e14:	69fb      	ldr	r3, [r7, #28]
 8008e16:	089b      	lsrs	r3, r3, #2
 8008e18:	3302      	adds	r3, #2
 8008e1a:	69ba      	ldr	r2, [r7, #24]
 8008e1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	43db      	mvns	r3, r3
 8008e2c:	69ba      	ldr	r2, [r7, #24]
 8008e2e:	4013      	ands	r3, r2
 8008e30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d003      	beq.n	8008e46 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008e3e:	69ba      	ldr	r2, [r7, #24]
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	4313      	orrs	r3, r2
 8008e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008e46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	43db      	mvns	r3, r3
 8008e5a:	69ba      	ldr	r2, [r7, #24]
 8008e5c:	4013      	ands	r3, r2
 8008e5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d003      	beq.n	8008e74 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008e6c:	69ba      	ldr	r2, [r7, #24]
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	4313      	orrs	r3, r2
 8008e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008e74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	43db      	mvns	r3, r3
 8008e86:	69ba      	ldr	r2, [r7, #24]
 8008e88:	4013      	ands	r3, r2
 8008e8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d003      	beq.n	8008ea0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008e98:	69ba      	ldr	r2, [r7, #24]
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	69ba      	ldr	r2, [r7, #24]
 8008ea4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	43db      	mvns	r3, r3
 8008eb0:	69ba      	ldr	r2, [r7, #24]
 8008eb2:	4013      	ands	r3, r2
 8008eb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d003      	beq.n	8008eca <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008ec2:	69ba      	ldr	r2, [r7, #24]
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	69ba      	ldr	r2, [r7, #24]
 8008ece:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	69fb      	ldr	r3, [r7, #28]
 8008edc:	fa22 f303 	lsr.w	r3, r2, r3
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	f47f ae6b 	bne.w	8008bbc <HAL_GPIO_Init+0x14>
  }
}
 8008ee6:	bf00      	nop
 8008ee8:	bf00      	nop
 8008eea:	3724      	adds	r7, #36	; 0x24
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr
 8008ef4:	58000400 	.word	0x58000400

08008ef8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b085      	sub	sp, #20
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	460b      	mov	r3, r1
 8008f02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	691a      	ldr	r2, [r3, #16]
 8008f08:	887b      	ldrh	r3, [r7, #2]
 8008f0a:	4013      	ands	r3, r2
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d002      	beq.n	8008f16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008f10:	2301      	movs	r3, #1
 8008f12:	73fb      	strb	r3, [r7, #15]
 8008f14:	e001      	b.n	8008f1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008f16:	2300      	movs	r3, #0
 8008f18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3714      	adds	r7, #20
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	460b      	mov	r3, r1
 8008f32:	807b      	strh	r3, [r7, #2]
 8008f34:	4613      	mov	r3, r2
 8008f36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008f38:	787b      	ldrb	r3, [r7, #1]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d003      	beq.n	8008f46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008f3e:	887a      	ldrh	r2, [r7, #2]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008f44:	e003      	b.n	8008f4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008f46:	887b      	ldrh	r3, [r7, #2]
 8008f48:	041a      	lsls	r2, r3, #16
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	619a      	str	r2, [r3, #24]
}
 8008f4e:	bf00      	nop
 8008f50:	370c      	adds	r7, #12
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr
	...

08008f5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d101      	bne.n	8008f6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e07f      	b.n	800906e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d106      	bne.n	8008f88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f7fa f8ee 	bl	8003164 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2224      	movs	r2, #36	; 0x24
 8008f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f022 0201 	bic.w	r2, r2, #1
 8008f9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	685a      	ldr	r2, [r3, #4]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008fac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	689a      	ldr	r2, [r3, #8]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008fbc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d107      	bne.n	8008fd6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	689a      	ldr	r2, [r3, #8]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008fd2:	609a      	str	r2, [r3, #8]
 8008fd4:	e006      	b.n	8008fe4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	689a      	ldr	r2, [r3, #8]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008fe2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	68db      	ldr	r3, [r3, #12]
 8008fe8:	2b02      	cmp	r3, #2
 8008fea:	d104      	bne.n	8008ff6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ff4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	6859      	ldr	r1, [r3, #4]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681a      	ldr	r2, [r3, #0]
 8009000:	4b1d      	ldr	r3, [pc, #116]	; (8009078 <HAL_I2C_Init+0x11c>)
 8009002:	430b      	orrs	r3, r1
 8009004:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	68da      	ldr	r2, [r3, #12]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009014:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	691a      	ldr	r2, [r3, #16]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	695b      	ldr	r3, [r3, #20]
 800901e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	699b      	ldr	r3, [r3, #24]
 8009026:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	430a      	orrs	r2, r1
 800902e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	69d9      	ldr	r1, [r3, #28]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6a1a      	ldr	r2, [r3, #32]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	430a      	orrs	r2, r1
 800903e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f042 0201 	orr.w	r2, r2, #1
 800904e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2220      	movs	r2, #32
 800905a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2200      	movs	r2, #0
 8009062:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3708      	adds	r7, #8
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	02008000 	.word	0x02008000

0800907c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	699b      	ldr	r3, [r3, #24]
 800908a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009098:	2b00      	cmp	r3, #0
 800909a:	d005      	beq.n	80090a8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090a0:	68ba      	ldr	r2, [r7, #8]
 80090a2:	68f9      	ldr	r1, [r7, #12]
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	4798      	blx	r3
  }
}
 80090a8:	bf00      	nop
 80090aa:	3710      	adds	r7, #16
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	2b20      	cmp	r3, #32
 80090c4:	d138      	bne.n	8009138 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d101      	bne.n	80090d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80090d0:	2302      	movs	r3, #2
 80090d2:	e032      	b.n	800913a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2201      	movs	r2, #1
 80090d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2224      	movs	r2, #36	; 0x24
 80090e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f022 0201 	bic.w	r2, r2, #1
 80090f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009102:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	6819      	ldr	r1, [r3, #0]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	683a      	ldr	r2, [r7, #0]
 8009110:	430a      	orrs	r2, r1
 8009112:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f042 0201 	orr.w	r2, r2, #1
 8009122:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2220      	movs	r2, #32
 8009128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009134:	2300      	movs	r3, #0
 8009136:	e000      	b.n	800913a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009138:	2302      	movs	r3, #2
  }
}
 800913a:	4618      	mov	r0, r3
 800913c:	370c      	adds	r7, #12
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr

08009146 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009146:	b480      	push	{r7}
 8009148:	b085      	sub	sp, #20
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
 800914e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009156:	b2db      	uxtb	r3, r3
 8009158:	2b20      	cmp	r3, #32
 800915a:	d139      	bne.n	80091d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009162:	2b01      	cmp	r3, #1
 8009164:	d101      	bne.n	800916a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009166:	2302      	movs	r3, #2
 8009168:	e033      	b.n	80091d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2201      	movs	r2, #1
 800916e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2224      	movs	r2, #36	; 0x24
 8009176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f022 0201 	bic.w	r2, r2, #1
 8009188:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009198:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	021b      	lsls	r3, r3, #8
 800919e:	68fa      	ldr	r2, [r7, #12]
 80091a0:	4313      	orrs	r3, r2
 80091a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	68fa      	ldr	r2, [r7, #12]
 80091aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f042 0201 	orr.w	r2, r2, #1
 80091ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2220      	movs	r2, #32
 80091c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80091cc:	2300      	movs	r3, #0
 80091ce:	e000      	b.n	80091d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80091d0:	2302      	movs	r3, #2
  }
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3714      	adds	r7, #20
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr

080091de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80091de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091e0:	b08f      	sub	sp, #60	; 0x3c
 80091e2:	af0a      	add	r7, sp, #40	; 0x28
 80091e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d101      	bne.n	80091f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80091ec:	2301      	movs	r3, #1
 80091ee:	e116      	b.n	800941e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d106      	bne.n	8009210 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f011 fb26 	bl	801a85c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2203      	movs	r2, #3
 8009214:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800921c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009220:	2b00      	cmp	r3, #0
 8009222:	d102      	bne.n	800922a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2200      	movs	r2, #0
 8009228:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4618      	mov	r0, r3
 8009230:	f00a fcf7 	bl	8013c22 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	603b      	str	r3, [r7, #0]
 800923a:	687e      	ldr	r6, [r7, #4]
 800923c:	466d      	mov	r5, sp
 800923e:	f106 0410 	add.w	r4, r6, #16
 8009242:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009244:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009246:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009248:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800924a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800924e:	e885 0003 	stmia.w	r5, {r0, r1}
 8009252:	1d33      	adds	r3, r6, #4
 8009254:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009256:	6838      	ldr	r0, [r7, #0]
 8009258:	f00a fbc2 	bl	80139e0 <USB_CoreInit>
 800925c:	4603      	mov	r3, r0
 800925e:	2b00      	cmp	r3, #0
 8009260:	d005      	beq.n	800926e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2202      	movs	r2, #2
 8009266:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800926a:	2301      	movs	r3, #1
 800926c:	e0d7      	b.n	800941e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	2100      	movs	r1, #0
 8009274:	4618      	mov	r0, r3
 8009276:	f00a fce5 	bl	8013c44 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800927a:	2300      	movs	r3, #0
 800927c:	73fb      	strb	r3, [r7, #15]
 800927e:	e04a      	b.n	8009316 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009280:	7bfa      	ldrb	r2, [r7, #15]
 8009282:	6879      	ldr	r1, [r7, #4]
 8009284:	4613      	mov	r3, r2
 8009286:	00db      	lsls	r3, r3, #3
 8009288:	4413      	add	r3, r2
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	440b      	add	r3, r1
 800928e:	333d      	adds	r3, #61	; 0x3d
 8009290:	2201      	movs	r2, #1
 8009292:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009294:	7bfa      	ldrb	r2, [r7, #15]
 8009296:	6879      	ldr	r1, [r7, #4]
 8009298:	4613      	mov	r3, r2
 800929a:	00db      	lsls	r3, r3, #3
 800929c:	4413      	add	r3, r2
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	440b      	add	r3, r1
 80092a2:	333c      	adds	r3, #60	; 0x3c
 80092a4:	7bfa      	ldrb	r2, [r7, #15]
 80092a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80092a8:	7bfa      	ldrb	r2, [r7, #15]
 80092aa:	7bfb      	ldrb	r3, [r7, #15]
 80092ac:	b298      	uxth	r0, r3
 80092ae:	6879      	ldr	r1, [r7, #4]
 80092b0:	4613      	mov	r3, r2
 80092b2:	00db      	lsls	r3, r3, #3
 80092b4:	4413      	add	r3, r2
 80092b6:	009b      	lsls	r3, r3, #2
 80092b8:	440b      	add	r3, r1
 80092ba:	3356      	adds	r3, #86	; 0x56
 80092bc:	4602      	mov	r2, r0
 80092be:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80092c0:	7bfa      	ldrb	r2, [r7, #15]
 80092c2:	6879      	ldr	r1, [r7, #4]
 80092c4:	4613      	mov	r3, r2
 80092c6:	00db      	lsls	r3, r3, #3
 80092c8:	4413      	add	r3, r2
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	440b      	add	r3, r1
 80092ce:	3340      	adds	r3, #64	; 0x40
 80092d0:	2200      	movs	r2, #0
 80092d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80092d4:	7bfa      	ldrb	r2, [r7, #15]
 80092d6:	6879      	ldr	r1, [r7, #4]
 80092d8:	4613      	mov	r3, r2
 80092da:	00db      	lsls	r3, r3, #3
 80092dc:	4413      	add	r3, r2
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	440b      	add	r3, r1
 80092e2:	3344      	adds	r3, #68	; 0x44
 80092e4:	2200      	movs	r2, #0
 80092e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80092e8:	7bfa      	ldrb	r2, [r7, #15]
 80092ea:	6879      	ldr	r1, [r7, #4]
 80092ec:	4613      	mov	r3, r2
 80092ee:	00db      	lsls	r3, r3, #3
 80092f0:	4413      	add	r3, r2
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	440b      	add	r3, r1
 80092f6:	3348      	adds	r3, #72	; 0x48
 80092f8:	2200      	movs	r2, #0
 80092fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80092fc:	7bfa      	ldrb	r2, [r7, #15]
 80092fe:	6879      	ldr	r1, [r7, #4]
 8009300:	4613      	mov	r3, r2
 8009302:	00db      	lsls	r3, r3, #3
 8009304:	4413      	add	r3, r2
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	440b      	add	r3, r1
 800930a:	334c      	adds	r3, #76	; 0x4c
 800930c:	2200      	movs	r2, #0
 800930e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009310:	7bfb      	ldrb	r3, [r7, #15]
 8009312:	3301      	adds	r3, #1
 8009314:	73fb      	strb	r3, [r7, #15]
 8009316:	7bfa      	ldrb	r2, [r7, #15]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	429a      	cmp	r2, r3
 800931e:	d3af      	bcc.n	8009280 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009320:	2300      	movs	r3, #0
 8009322:	73fb      	strb	r3, [r7, #15]
 8009324:	e044      	b.n	80093b0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009326:	7bfa      	ldrb	r2, [r7, #15]
 8009328:	6879      	ldr	r1, [r7, #4]
 800932a:	4613      	mov	r3, r2
 800932c:	00db      	lsls	r3, r3, #3
 800932e:	4413      	add	r3, r2
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	440b      	add	r3, r1
 8009334:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8009338:	2200      	movs	r2, #0
 800933a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800933c:	7bfa      	ldrb	r2, [r7, #15]
 800933e:	6879      	ldr	r1, [r7, #4]
 8009340:	4613      	mov	r3, r2
 8009342:	00db      	lsls	r3, r3, #3
 8009344:	4413      	add	r3, r2
 8009346:	009b      	lsls	r3, r3, #2
 8009348:	440b      	add	r3, r1
 800934a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800934e:	7bfa      	ldrb	r2, [r7, #15]
 8009350:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009352:	7bfa      	ldrb	r2, [r7, #15]
 8009354:	6879      	ldr	r1, [r7, #4]
 8009356:	4613      	mov	r3, r2
 8009358:	00db      	lsls	r3, r3, #3
 800935a:	4413      	add	r3, r2
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	440b      	add	r3, r1
 8009360:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009364:	2200      	movs	r2, #0
 8009366:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009368:	7bfa      	ldrb	r2, [r7, #15]
 800936a:	6879      	ldr	r1, [r7, #4]
 800936c:	4613      	mov	r3, r2
 800936e:	00db      	lsls	r3, r3, #3
 8009370:	4413      	add	r3, r2
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	440b      	add	r3, r1
 8009376:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800937a:	2200      	movs	r2, #0
 800937c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800937e:	7bfa      	ldrb	r2, [r7, #15]
 8009380:	6879      	ldr	r1, [r7, #4]
 8009382:	4613      	mov	r3, r2
 8009384:	00db      	lsls	r3, r3, #3
 8009386:	4413      	add	r3, r2
 8009388:	009b      	lsls	r3, r3, #2
 800938a:	440b      	add	r3, r1
 800938c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8009390:	2200      	movs	r2, #0
 8009392:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009394:	7bfa      	ldrb	r2, [r7, #15]
 8009396:	6879      	ldr	r1, [r7, #4]
 8009398:	4613      	mov	r3, r2
 800939a:	00db      	lsls	r3, r3, #3
 800939c:	4413      	add	r3, r2
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	440b      	add	r3, r1
 80093a2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80093a6:	2200      	movs	r2, #0
 80093a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80093aa:	7bfb      	ldrb	r3, [r7, #15]
 80093ac:	3301      	adds	r3, #1
 80093ae:	73fb      	strb	r3, [r7, #15]
 80093b0:	7bfa      	ldrb	r2, [r7, #15]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d3b5      	bcc.n	8009326 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	603b      	str	r3, [r7, #0]
 80093c0:	687e      	ldr	r6, [r7, #4]
 80093c2:	466d      	mov	r5, sp
 80093c4:	f106 0410 	add.w	r4, r6, #16
 80093c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80093ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80093cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80093ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80093d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80093d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80093d8:	1d33      	adds	r3, r6, #4
 80093da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80093dc:	6838      	ldr	r0, [r7, #0]
 80093de:	f00a fc7d 	bl	8013cdc <USB_DevInit>
 80093e2:	4603      	mov	r3, r0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d005      	beq.n	80093f4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2202      	movs	r2, #2
 80093ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80093f0:	2301      	movs	r3, #1
 80093f2:	e014      	b.n	800941e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2201      	movs	r2, #1
 8009400:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009408:	2b01      	cmp	r3, #1
 800940a:	d102      	bne.n	8009412 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f001 f96f 	bl	800a6f0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4618      	mov	r0, r3
 8009418:	f00b fcbf 	bl	8014d9a <USB_DevDisconnect>

  return HAL_OK;
 800941c:	2300      	movs	r3, #0
}
 800941e:	4618      	mov	r0, r3
 8009420:	3714      	adds	r7, #20
 8009422:	46bd      	mov	sp, r7
 8009424:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009426 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009426:	b580      	push	{r7, lr}
 8009428:	b084      	sub	sp, #16
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800943a:	2b01      	cmp	r3, #1
 800943c:	d101      	bne.n	8009442 <HAL_PCD_Start+0x1c>
 800943e:	2302      	movs	r3, #2
 8009440:	e022      	b.n	8009488 <HAL_PCD_Start+0x62>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2201      	movs	r2, #1
 8009446:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800944e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009452:	2b00      	cmp	r3, #0
 8009454:	d109      	bne.n	800946a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800945a:	2b01      	cmp	r3, #1
 800945c:	d105      	bne.n	800946a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009462:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4618      	mov	r0, r3
 8009470:	f00a fbc6 	bl	8013c00 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4618      	mov	r0, r3
 800947a:	f00b fc6d 	bl	8014d58 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2200      	movs	r2, #0
 8009482:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009486:	2300      	movs	r3, #0
}
 8009488:	4618      	mov	r0, r3
 800948a:	3710      	adds	r7, #16
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009490:	b590      	push	{r4, r7, lr}
 8009492:	b08d      	sub	sp, #52	; 0x34
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800949e:	6a3b      	ldr	r3, [r7, #32]
 80094a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4618      	mov	r0, r3
 80094a8:	f00b fd2b 	bl	8014f02 <USB_GetMode>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	f040 84b7 	bne.w	8009e22 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4618      	mov	r0, r3
 80094ba:	f00b fc8f 	bl	8014ddc <USB_ReadInterrupts>
 80094be:	4603      	mov	r3, r0
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	f000 84ad 	beq.w	8009e20 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80094c6:	69fb      	ldr	r3, [r7, #28]
 80094c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094cc:	689b      	ldr	r3, [r3, #8]
 80094ce:	0a1b      	lsrs	r3, r3, #8
 80094d0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4618      	mov	r0, r3
 80094e0:	f00b fc7c 	bl	8014ddc <USB_ReadInterrupts>
 80094e4:	4603      	mov	r3, r0
 80094e6:	f003 0302 	and.w	r3, r3, #2
 80094ea:	2b02      	cmp	r3, #2
 80094ec:	d107      	bne.n	80094fe <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	695a      	ldr	r2, [r3, #20]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f002 0202 	and.w	r2, r2, #2
 80094fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4618      	mov	r0, r3
 8009504:	f00b fc6a 	bl	8014ddc <USB_ReadInterrupts>
 8009508:	4603      	mov	r3, r0
 800950a:	f003 0310 	and.w	r3, r3, #16
 800950e:	2b10      	cmp	r3, #16
 8009510:	d161      	bne.n	80095d6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	699a      	ldr	r2, [r3, #24]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f022 0210 	bic.w	r2, r2, #16
 8009520:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8009522:	6a3b      	ldr	r3, [r7, #32]
 8009524:	6a1b      	ldr	r3, [r3, #32]
 8009526:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8009528:	69bb      	ldr	r3, [r7, #24]
 800952a:	f003 020f 	and.w	r2, r3, #15
 800952e:	4613      	mov	r3, r2
 8009530:	00db      	lsls	r3, r3, #3
 8009532:	4413      	add	r3, r2
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	4413      	add	r3, r2
 800953e:	3304      	adds	r3, #4
 8009540:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009542:	69bb      	ldr	r3, [r7, #24]
 8009544:	0c5b      	lsrs	r3, r3, #17
 8009546:	f003 030f 	and.w	r3, r3, #15
 800954a:	2b02      	cmp	r3, #2
 800954c:	d124      	bne.n	8009598 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800954e:	69ba      	ldr	r2, [r7, #24]
 8009550:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009554:	4013      	ands	r3, r2
 8009556:	2b00      	cmp	r3, #0
 8009558:	d035      	beq.n	80095c6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800955e:	69bb      	ldr	r3, [r7, #24]
 8009560:	091b      	lsrs	r3, r3, #4
 8009562:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009564:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009568:	b29b      	uxth	r3, r3
 800956a:	461a      	mov	r2, r3
 800956c:	6a38      	ldr	r0, [r7, #32]
 800956e:	f00b faa1 	bl	8014ab4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	68da      	ldr	r2, [r3, #12]
 8009576:	69bb      	ldr	r3, [r7, #24]
 8009578:	091b      	lsrs	r3, r3, #4
 800957a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800957e:	441a      	add	r2, r3
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	695a      	ldr	r2, [r3, #20]
 8009588:	69bb      	ldr	r3, [r7, #24]
 800958a:	091b      	lsrs	r3, r3, #4
 800958c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009590:	441a      	add	r2, r3
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	615a      	str	r2, [r3, #20]
 8009596:	e016      	b.n	80095c6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8009598:	69bb      	ldr	r3, [r7, #24]
 800959a:	0c5b      	lsrs	r3, r3, #17
 800959c:	f003 030f 	and.w	r3, r3, #15
 80095a0:	2b06      	cmp	r3, #6
 80095a2:	d110      	bne.n	80095c6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80095aa:	2208      	movs	r2, #8
 80095ac:	4619      	mov	r1, r3
 80095ae:	6a38      	ldr	r0, [r7, #32]
 80095b0:	f00b fa80 	bl	8014ab4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	695a      	ldr	r2, [r3, #20]
 80095b8:	69bb      	ldr	r3, [r7, #24]
 80095ba:	091b      	lsrs	r3, r3, #4
 80095bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80095c0:	441a      	add	r2, r3
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	699a      	ldr	r2, [r3, #24]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f042 0210 	orr.w	r2, r2, #16
 80095d4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4618      	mov	r0, r3
 80095dc:	f00b fbfe 	bl	8014ddc <USB_ReadInterrupts>
 80095e0:	4603      	mov	r3, r0
 80095e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80095e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80095ea:	f040 80a7 	bne.w	800973c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80095ee:	2300      	movs	r3, #0
 80095f0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4618      	mov	r0, r3
 80095f8:	f00b fc03 	bl	8014e02 <USB_ReadDevAllOutEpInterrupt>
 80095fc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80095fe:	e099      	b.n	8009734 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009602:	f003 0301 	and.w	r3, r3, #1
 8009606:	2b00      	cmp	r3, #0
 8009608:	f000 808e 	beq.w	8009728 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009612:	b2d2      	uxtb	r2, r2
 8009614:	4611      	mov	r1, r2
 8009616:	4618      	mov	r0, r3
 8009618:	f00b fc27 	bl	8014e6a <USB_ReadDevOutEPInterrupt>
 800961c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	f003 0301 	and.w	r3, r3, #1
 8009624:	2b00      	cmp	r3, #0
 8009626:	d00c      	beq.n	8009642 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962a:	015a      	lsls	r2, r3, #5
 800962c:	69fb      	ldr	r3, [r7, #28]
 800962e:	4413      	add	r3, r2
 8009630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009634:	461a      	mov	r2, r3
 8009636:	2301      	movs	r3, #1
 8009638:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800963a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f000 fed1 	bl	800a3e4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	f003 0308 	and.w	r3, r3, #8
 8009648:	2b00      	cmp	r3, #0
 800964a:	d00c      	beq.n	8009666 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800964c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964e:	015a      	lsls	r2, r3, #5
 8009650:	69fb      	ldr	r3, [r7, #28]
 8009652:	4413      	add	r3, r2
 8009654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009658:	461a      	mov	r2, r3
 800965a:	2308      	movs	r3, #8
 800965c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800965e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 ffa7 	bl	800a5b4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	f003 0310 	and.w	r3, r3, #16
 800966c:	2b00      	cmp	r3, #0
 800966e:	d008      	beq.n	8009682 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009672:	015a      	lsls	r2, r3, #5
 8009674:	69fb      	ldr	r3, [r7, #28]
 8009676:	4413      	add	r3, r2
 8009678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800967c:	461a      	mov	r2, r3
 800967e:	2310      	movs	r3, #16
 8009680:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	f003 0302 	and.w	r3, r3, #2
 8009688:	2b00      	cmp	r3, #0
 800968a:	d030      	beq.n	80096ee <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800968c:	6a3b      	ldr	r3, [r7, #32]
 800968e:	695b      	ldr	r3, [r3, #20]
 8009690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009694:	2b80      	cmp	r3, #128	; 0x80
 8009696:	d109      	bne.n	80096ac <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8009698:	69fb      	ldr	r3, [r7, #28]
 800969a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	69fa      	ldr	r2, [r7, #28]
 80096a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80096a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80096aa:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80096ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096ae:	4613      	mov	r3, r2
 80096b0:	00db      	lsls	r3, r3, #3
 80096b2:	4413      	add	r3, r2
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80096ba:	687a      	ldr	r2, [r7, #4]
 80096bc:	4413      	add	r3, r2
 80096be:	3304      	adds	r3, #4
 80096c0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	78db      	ldrb	r3, [r3, #3]
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d108      	bne.n	80096dc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	2200      	movs	r2, #0
 80096ce:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80096d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d2:	b2db      	uxtb	r3, r3
 80096d4:	4619      	mov	r1, r3
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f011 f9b8 	bl	801aa4c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80096dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096de:	015a      	lsls	r2, r3, #5
 80096e0:	69fb      	ldr	r3, [r7, #28]
 80096e2:	4413      	add	r3, r2
 80096e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096e8:	461a      	mov	r2, r3
 80096ea:	2302      	movs	r3, #2
 80096ec:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	f003 0320 	and.w	r3, r3, #32
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d008      	beq.n	800970a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80096f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fa:	015a      	lsls	r2, r3, #5
 80096fc:	69fb      	ldr	r3, [r7, #28]
 80096fe:	4413      	add	r3, r2
 8009700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009704:	461a      	mov	r2, r3
 8009706:	2320      	movs	r3, #32
 8009708:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009710:	2b00      	cmp	r3, #0
 8009712:	d009      	beq.n	8009728 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009716:	015a      	lsls	r2, r3, #5
 8009718:	69fb      	ldr	r3, [r7, #28]
 800971a:	4413      	add	r3, r2
 800971c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009720:	461a      	mov	r2, r3
 8009722:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009726:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972a:	3301      	adds	r3, #1
 800972c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800972e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009730:	085b      	lsrs	r3, r3, #1
 8009732:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009736:	2b00      	cmp	r3, #0
 8009738:	f47f af62 	bne.w	8009600 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4618      	mov	r0, r3
 8009742:	f00b fb4b 	bl	8014ddc <USB_ReadInterrupts>
 8009746:	4603      	mov	r3, r0
 8009748:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800974c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009750:	f040 80db 	bne.w	800990a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4618      	mov	r0, r3
 800975a:	f00b fb6c 	bl	8014e36 <USB_ReadDevAllInEpInterrupt>
 800975e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009760:	2300      	movs	r3, #0
 8009762:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009764:	e0cd      	b.n	8009902 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009768:	f003 0301 	and.w	r3, r3, #1
 800976c:	2b00      	cmp	r3, #0
 800976e:	f000 80c2 	beq.w	80098f6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009778:	b2d2      	uxtb	r2, r2
 800977a:	4611      	mov	r1, r2
 800977c:	4618      	mov	r0, r3
 800977e:	f00b fb92 	bl	8014ea6 <USB_ReadDevInEPInterrupt>
 8009782:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	f003 0301 	and.w	r3, r3, #1
 800978a:	2b00      	cmp	r3, #0
 800978c:	d057      	beq.n	800983e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800978e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009790:	f003 030f 	and.w	r3, r3, #15
 8009794:	2201      	movs	r2, #1
 8009796:	fa02 f303 	lsl.w	r3, r2, r3
 800979a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800979c:	69fb      	ldr	r3, [r7, #28]
 800979e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	43db      	mvns	r3, r3
 80097a8:	69f9      	ldr	r1, [r7, #28]
 80097aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097ae:	4013      	ands	r3, r2
 80097b0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80097b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b4:	015a      	lsls	r2, r3, #5
 80097b6:	69fb      	ldr	r3, [r7, #28]
 80097b8:	4413      	add	r3, r2
 80097ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097be:	461a      	mov	r2, r3
 80097c0:	2301      	movs	r3, #1
 80097c2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	68db      	ldr	r3, [r3, #12]
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d132      	bne.n	8009832 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80097cc:	6879      	ldr	r1, [r7, #4]
 80097ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097d0:	4613      	mov	r3, r2
 80097d2:	00db      	lsls	r3, r3, #3
 80097d4:	4413      	add	r3, r2
 80097d6:	009b      	lsls	r3, r3, #2
 80097d8:	440b      	add	r3, r1
 80097da:	3348      	adds	r3, #72	; 0x48
 80097dc:	6819      	ldr	r1, [r3, #0]
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097e2:	4613      	mov	r3, r2
 80097e4:	00db      	lsls	r3, r3, #3
 80097e6:	4413      	add	r3, r2
 80097e8:	009b      	lsls	r3, r3, #2
 80097ea:	4403      	add	r3, r0
 80097ec:	3344      	adds	r3, #68	; 0x44
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4419      	add	r1, r3
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097f6:	4613      	mov	r3, r2
 80097f8:	00db      	lsls	r3, r3, #3
 80097fa:	4413      	add	r3, r2
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	4403      	add	r3, r0
 8009800:	3348      	adds	r3, #72	; 0x48
 8009802:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009806:	2b00      	cmp	r3, #0
 8009808:	d113      	bne.n	8009832 <HAL_PCD_IRQHandler+0x3a2>
 800980a:	6879      	ldr	r1, [r7, #4]
 800980c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800980e:	4613      	mov	r3, r2
 8009810:	00db      	lsls	r3, r3, #3
 8009812:	4413      	add	r3, r2
 8009814:	009b      	lsls	r3, r3, #2
 8009816:	440b      	add	r3, r1
 8009818:	334c      	adds	r3, #76	; 0x4c
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d108      	bne.n	8009832 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6818      	ldr	r0, [r3, #0]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800982a:	461a      	mov	r2, r3
 800982c:	2101      	movs	r1, #1
 800982e:	f00b fb9b 	bl	8014f68 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009834:	b2db      	uxtb	r3, r3
 8009836:	4619      	mov	r1, r3
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f011 f882 	bl	801a942 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	f003 0308 	and.w	r3, r3, #8
 8009844:	2b00      	cmp	r3, #0
 8009846:	d008      	beq.n	800985a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984a:	015a      	lsls	r2, r3, #5
 800984c:	69fb      	ldr	r3, [r7, #28]
 800984e:	4413      	add	r3, r2
 8009850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009854:	461a      	mov	r2, r3
 8009856:	2308      	movs	r3, #8
 8009858:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	f003 0310 	and.w	r3, r3, #16
 8009860:	2b00      	cmp	r3, #0
 8009862:	d008      	beq.n	8009876 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009866:	015a      	lsls	r2, r3, #5
 8009868:	69fb      	ldr	r3, [r7, #28]
 800986a:	4413      	add	r3, r2
 800986c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009870:	461a      	mov	r2, r3
 8009872:	2310      	movs	r3, #16
 8009874:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800987c:	2b00      	cmp	r3, #0
 800987e:	d008      	beq.n	8009892 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009882:	015a      	lsls	r2, r3, #5
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	4413      	add	r3, r2
 8009888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800988c:	461a      	mov	r2, r3
 800988e:	2340      	movs	r3, #64	; 0x40
 8009890:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	f003 0302 	and.w	r3, r3, #2
 8009898:	2b00      	cmp	r3, #0
 800989a:	d023      	beq.n	80098e4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800989c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800989e:	6a38      	ldr	r0, [r7, #32]
 80098a0:	f00a fb7a 	bl	8013f98 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80098a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098a6:	4613      	mov	r3, r2
 80098a8:	00db      	lsls	r3, r3, #3
 80098aa:	4413      	add	r3, r2
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	3338      	adds	r3, #56	; 0x38
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	4413      	add	r3, r2
 80098b4:	3304      	adds	r3, #4
 80098b6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	78db      	ldrb	r3, [r3, #3]
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d108      	bne.n	80098d2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	2200      	movs	r2, #0
 80098c4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80098c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c8:	b2db      	uxtb	r3, r3
 80098ca:	4619      	mov	r1, r3
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f011 f8cf 	bl	801aa70 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80098d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d4:	015a      	lsls	r2, r3, #5
 80098d6:	69fb      	ldr	r3, [r7, #28]
 80098d8:	4413      	add	r3, r2
 80098da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098de:	461a      	mov	r2, r3
 80098e0:	2302      	movs	r3, #2
 80098e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d003      	beq.n	80098f6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80098ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 fcea 	bl	800a2ca <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80098f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f8:	3301      	adds	r3, #1
 80098fa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80098fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098fe:	085b      	lsrs	r3, r3, #1
 8009900:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009904:	2b00      	cmp	r3, #0
 8009906:	f47f af2e 	bne.w	8009766 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4618      	mov	r0, r3
 8009910:	f00b fa64 	bl	8014ddc <USB_ReadInterrupts>
 8009914:	4603      	mov	r3, r0
 8009916:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800991a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800991e:	d122      	bne.n	8009966 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009920:	69fb      	ldr	r3, [r7, #28]
 8009922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	69fa      	ldr	r2, [r7, #28]
 800992a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800992e:	f023 0301 	bic.w	r3, r3, #1
 8009932:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800993a:	2b01      	cmp	r3, #1
 800993c:	d108      	bne.n	8009950 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2200      	movs	r2, #0
 8009942:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009946:	2100      	movs	r1, #0
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f000 fef5 	bl	800a738 <HAL_PCDEx_LPM_Callback>
 800994e:	e002      	b.n	8009956 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f011 f86d 	bl	801aa30 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	695a      	ldr	r2, [r3, #20]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009964:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4618      	mov	r0, r3
 800996c:	f00b fa36 	bl	8014ddc <USB_ReadInterrupts>
 8009970:	4603      	mov	r3, r0
 8009972:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009976:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800997a:	d112      	bne.n	80099a2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800997c:	69fb      	ldr	r3, [r7, #28]
 800997e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009982:	689b      	ldr	r3, [r3, #8]
 8009984:	f003 0301 	and.w	r3, r3, #1
 8009988:	2b01      	cmp	r3, #1
 800998a:	d102      	bne.n	8009992 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f011 f829 	bl	801a9e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	695a      	ldr	r2, [r3, #20]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80099a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4618      	mov	r0, r3
 80099a8:	f00b fa18 	bl	8014ddc <USB_ReadInterrupts>
 80099ac:	4603      	mov	r3, r0
 80099ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80099b6:	d121      	bne.n	80099fc <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	695a      	ldr	r2, [r3, #20]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80099c6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d111      	bne.n	80099f6 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2201      	movs	r2, #1
 80099d6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099e0:	089b      	lsrs	r3, r3, #2
 80099e2:	f003 020f 	and.w	r2, r3, #15
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80099ec:	2101      	movs	r1, #1
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 fea2 	bl	800a738 <HAL_PCDEx_LPM_Callback>
 80099f4:	e002      	b.n	80099fc <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f010 fff4 	bl	801a9e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4618      	mov	r0, r3
 8009a02:	f00b f9eb 	bl	8014ddc <USB_ReadInterrupts>
 8009a06:	4603      	mov	r3, r0
 8009a08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009a0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a10:	f040 80b7 	bne.w	8009b82 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009a14:	69fb      	ldr	r3, [r7, #28]
 8009a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	69fa      	ldr	r2, [r7, #28]
 8009a1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a22:	f023 0301 	bic.w	r3, r3, #1
 8009a26:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	2110      	movs	r1, #16
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f00a fab2 	bl	8013f98 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009a34:	2300      	movs	r3, #0
 8009a36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a38:	e046      	b.n	8009ac8 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a3c:	015a      	lsls	r2, r3, #5
 8009a3e:	69fb      	ldr	r3, [r7, #28]
 8009a40:	4413      	add	r3, r2
 8009a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a46:	461a      	mov	r2, r3
 8009a48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009a4c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a50:	015a      	lsls	r2, r3, #5
 8009a52:	69fb      	ldr	r3, [r7, #28]
 8009a54:	4413      	add	r3, r2
 8009a56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a5e:	0151      	lsls	r1, r2, #5
 8009a60:	69fa      	ldr	r2, [r7, #28]
 8009a62:	440a      	add	r2, r1
 8009a64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a68:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009a6c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a70:	015a      	lsls	r2, r3, #5
 8009a72:	69fb      	ldr	r3, [r7, #28]
 8009a74:	4413      	add	r3, r2
 8009a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009a80:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a84:	015a      	lsls	r2, r3, #5
 8009a86:	69fb      	ldr	r3, [r7, #28]
 8009a88:	4413      	add	r3, r2
 8009a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a92:	0151      	lsls	r1, r2, #5
 8009a94:	69fa      	ldr	r2, [r7, #28]
 8009a96:	440a      	add	r2, r1
 8009a98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009aa0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa4:	015a      	lsls	r2, r3, #5
 8009aa6:	69fb      	ldr	r3, [r7, #28]
 8009aa8:	4413      	add	r3, r2
 8009aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ab2:	0151      	lsls	r1, r2, #5
 8009ab4:	69fa      	ldr	r2, [r7, #28]
 8009ab6:	440a      	add	r2, r1
 8009ab8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009abc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009ac0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d3b3      	bcc.n	8009a3a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009ad2:	69fb      	ldr	r3, [r7, #28]
 8009ad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ad8:	69db      	ldr	r3, [r3, #28]
 8009ada:	69fa      	ldr	r2, [r7, #28]
 8009adc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ae0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009ae4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d016      	beq.n	8009b1c <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009aee:	69fb      	ldr	r3, [r7, #28]
 8009af0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009af8:	69fa      	ldr	r2, [r7, #28]
 8009afa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009afe:	f043 030b 	orr.w	r3, r3, #11
 8009b02:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009b06:	69fb      	ldr	r3, [r7, #28]
 8009b08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b0e:	69fa      	ldr	r2, [r7, #28]
 8009b10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b14:	f043 030b 	orr.w	r3, r3, #11
 8009b18:	6453      	str	r3, [r2, #68]	; 0x44
 8009b1a:	e015      	b.n	8009b48 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009b1c:	69fb      	ldr	r3, [r7, #28]
 8009b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b22:	695a      	ldr	r2, [r3, #20]
 8009b24:	69fb      	ldr	r3, [r7, #28]
 8009b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	f242 032b 	movw	r3, #8235	; 0x202b
 8009b30:	4313      	orrs	r3, r2
 8009b32:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009b34:	69fb      	ldr	r3, [r7, #28]
 8009b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b3a:	691b      	ldr	r3, [r3, #16]
 8009b3c:	69fa      	ldr	r2, [r7, #28]
 8009b3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b42:	f043 030b 	orr.w	r3, r3, #11
 8009b46:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009b48:	69fb      	ldr	r3, [r7, #28]
 8009b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	69fa      	ldr	r2, [r7, #28]
 8009b52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b56:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009b5a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6818      	ldr	r0, [r3, #0]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	68db      	ldr	r3, [r3, #12]
 8009b64:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	f00b f9fb 	bl	8014f68 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	695a      	ldr	r2, [r3, #20]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009b80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4618      	mov	r0, r3
 8009b88:	f00b f928 	bl	8014ddc <USB_ReadInterrupts>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b96:	d124      	bne.n	8009be2 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f00b f9bf 	bl	8014f20 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f00a fa73 	bl	8014092 <USB_GetDevSpeed>
 8009bac:	4603      	mov	r3, r0
 8009bae:	461a      	mov	r2, r3
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681c      	ldr	r4, [r3, #0]
 8009bb8:	f001 fd88 	bl	800b6cc <HAL_RCC_GetHCLKFreq>
 8009bbc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	4620      	mov	r0, r4
 8009bc8:	f009 ff78 	bl	8013abc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f010 fee0 	bl	801a992 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	695a      	ldr	r2, [r3, #20]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009be0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4618      	mov	r0, r3
 8009be8:	f00b f8f8 	bl	8014ddc <USB_ReadInterrupts>
 8009bec:	4603      	mov	r3, r0
 8009bee:	f003 0308 	and.w	r3, r3, #8
 8009bf2:	2b08      	cmp	r3, #8
 8009bf4:	d10a      	bne.n	8009c0c <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f010 febd 	bl	801a976 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	695a      	ldr	r2, [r3, #20]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f002 0208 	and.w	r2, r2, #8
 8009c0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4618      	mov	r0, r3
 8009c12:	f00b f8e3 	bl	8014ddc <USB_ReadInterrupts>
 8009c16:	4603      	mov	r3, r0
 8009c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c1c:	2b80      	cmp	r3, #128	; 0x80
 8009c1e:	d122      	bne.n	8009c66 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8009c20:	6a3b      	ldr	r3, [r7, #32]
 8009c22:	699b      	ldr	r3, [r3, #24]
 8009c24:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009c28:	6a3b      	ldr	r3, [r7, #32]
 8009c2a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8009c30:	e014      	b.n	8009c5c <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009c32:	6879      	ldr	r1, [r7, #4]
 8009c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c36:	4613      	mov	r3, r2
 8009c38:	00db      	lsls	r3, r3, #3
 8009c3a:	4413      	add	r3, r2
 8009c3c:	009b      	lsls	r3, r3, #2
 8009c3e:	440b      	add	r3, r1
 8009c40:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d105      	bne.n	8009c56 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4c:	b2db      	uxtb	r3, r3
 8009c4e:	4619      	mov	r1, r3
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 fb09 	bl	800a268 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c58:	3301      	adds	r3, #1
 8009c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d3e5      	bcc.n	8009c32 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f00b f8b6 	bl	8014ddc <USB_ReadInterrupts>
 8009c70:	4603      	mov	r3, r0
 8009c72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c7a:	d13b      	bne.n	8009cf4 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8009c80:	e02b      	b.n	8009cda <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c84:	015a      	lsls	r2, r3, #5
 8009c86:	69fb      	ldr	r3, [r7, #28]
 8009c88:	4413      	add	r3, r2
 8009c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009c92:	6879      	ldr	r1, [r7, #4]
 8009c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c96:	4613      	mov	r3, r2
 8009c98:	00db      	lsls	r3, r3, #3
 8009c9a:	4413      	add	r3, r2
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	440b      	add	r3, r1
 8009ca0:	3340      	adds	r3, #64	; 0x40
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	d115      	bne.n	8009cd4 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8009ca8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	da12      	bge.n	8009cd4 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009cae:	6879      	ldr	r1, [r7, #4]
 8009cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cb2:	4613      	mov	r3, r2
 8009cb4:	00db      	lsls	r3, r3, #3
 8009cb6:	4413      	add	r3, r2
 8009cb8:	009b      	lsls	r3, r3, #2
 8009cba:	440b      	add	r3, r1
 8009cbc:	333f      	adds	r3, #63	; 0x3f
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8009cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	4619      	mov	r1, r3
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 faca 	bl	800a268 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd6:	3301      	adds	r3, #1
 8009cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d3ce      	bcc.n	8009c82 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	695a      	ldr	r2, [r3, #20]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8009cf2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f00b f86f 	bl	8014ddc <USB_ReadInterrupts>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d08:	d155      	bne.n	8009db6 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8009d0e:	e045      	b.n	8009d9c <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8009d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d12:	015a      	lsls	r2, r3, #5
 8009d14:	69fb      	ldr	r3, [r7, #28]
 8009d16:	4413      	add	r3, r2
 8009d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009d20:	6879      	ldr	r1, [r7, #4]
 8009d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d24:	4613      	mov	r3, r2
 8009d26:	00db      	lsls	r3, r3, #3
 8009d28:	4413      	add	r3, r2
 8009d2a:	009b      	lsls	r3, r3, #2
 8009d2c:	440b      	add	r3, r1
 8009d2e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009d32:	781b      	ldrb	r3, [r3, #0]
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d12e      	bne.n	8009d96 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009d38:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	da2b      	bge.n	8009d96 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8009d3e:	69bb      	ldr	r3, [r7, #24]
 8009d40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8009d4a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d121      	bne.n	8009d96 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8009d52:	6879      	ldr	r1, [r7, #4]
 8009d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d56:	4613      	mov	r3, r2
 8009d58:	00db      	lsls	r3, r3, #3
 8009d5a:	4413      	add	r3, r2
 8009d5c:	009b      	lsls	r3, r3, #2
 8009d5e:	440b      	add	r3, r1
 8009d60:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009d64:	2201      	movs	r2, #1
 8009d66:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009d68:	6a3b      	ldr	r3, [r7, #32]
 8009d6a:	699b      	ldr	r3, [r3, #24]
 8009d6c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009d70:	6a3b      	ldr	r3, [r7, #32]
 8009d72:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8009d74:	6a3b      	ldr	r3, [r7, #32]
 8009d76:	695b      	ldr	r3, [r3, #20]
 8009d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d10a      	bne.n	8009d96 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	69fa      	ldr	r2, [r7, #28]
 8009d8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009d92:	6053      	str	r3, [r2, #4]
            break;
 8009d94:	e007      	b.n	8009da6 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d98:	3301      	adds	r3, #1
 8009d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d3b4      	bcc.n	8009d10 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	695a      	ldr	r2, [r3, #20]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8009db4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f00b f80e 	bl	8014ddc <USB_ReadInterrupts>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dca:	d10a      	bne.n	8009de2 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f010 fe61 	bl	801aa94 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	695a      	ldr	r2, [r3, #20]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009de0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4618      	mov	r0, r3
 8009de8:	f00a fff8 	bl	8014ddc <USB_ReadInterrupts>
 8009dec:	4603      	mov	r3, r0
 8009dee:	f003 0304 	and.w	r3, r3, #4
 8009df2:	2b04      	cmp	r3, #4
 8009df4:	d115      	bne.n	8009e22 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009dfe:	69bb      	ldr	r3, [r7, #24]
 8009e00:	f003 0304 	and.w	r3, r3, #4
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d002      	beq.n	8009e0e <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f010 fe51 	bl	801aab0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	6859      	ldr	r1, [r3, #4]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	69ba      	ldr	r2, [r7, #24]
 8009e1a:	430a      	orrs	r2, r1
 8009e1c:	605a      	str	r2, [r3, #4]
 8009e1e:	e000      	b.n	8009e22 <HAL_PCD_IRQHandler+0x992>
      return;
 8009e20:	bf00      	nop
    }
  }
}
 8009e22:	3734      	adds	r7, #52	; 0x34
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd90      	pop	{r4, r7, pc}

08009e28 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	460b      	mov	r3, r1
 8009e32:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009e3a:	2b01      	cmp	r3, #1
 8009e3c:	d101      	bne.n	8009e42 <HAL_PCD_SetAddress+0x1a>
 8009e3e:	2302      	movs	r3, #2
 8009e40:	e013      	b.n	8009e6a <HAL_PCD_SetAddress+0x42>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2201      	movs	r2, #1
 8009e46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	78fa      	ldrb	r2, [r7, #3]
 8009e4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	78fa      	ldrb	r2, [r7, #3]
 8009e58:	4611      	mov	r1, r2
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f00a ff56 	bl	8014d0c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009e68:	2300      	movs	r3, #0
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3708      	adds	r7, #8
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}

08009e72 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009e72:	b580      	push	{r7, lr}
 8009e74:	b084      	sub	sp, #16
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	6078      	str	r0, [r7, #4]
 8009e7a:	4608      	mov	r0, r1
 8009e7c:	4611      	mov	r1, r2
 8009e7e:	461a      	mov	r2, r3
 8009e80:	4603      	mov	r3, r0
 8009e82:	70fb      	strb	r3, [r7, #3]
 8009e84:	460b      	mov	r3, r1
 8009e86:	803b      	strh	r3, [r7, #0]
 8009e88:	4613      	mov	r3, r2
 8009e8a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009e90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	da0f      	bge.n	8009eb8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009e98:	78fb      	ldrb	r3, [r7, #3]
 8009e9a:	f003 020f 	and.w	r2, r3, #15
 8009e9e:	4613      	mov	r3, r2
 8009ea0:	00db      	lsls	r3, r3, #3
 8009ea2:	4413      	add	r3, r2
 8009ea4:	009b      	lsls	r3, r3, #2
 8009ea6:	3338      	adds	r3, #56	; 0x38
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	4413      	add	r3, r2
 8009eac:	3304      	adds	r3, #4
 8009eae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	705a      	strb	r2, [r3, #1]
 8009eb6:	e00f      	b.n	8009ed8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009eb8:	78fb      	ldrb	r3, [r7, #3]
 8009eba:	f003 020f 	and.w	r2, r3, #15
 8009ebe:	4613      	mov	r3, r2
 8009ec0:	00db      	lsls	r3, r3, #3
 8009ec2:	4413      	add	r3, r2
 8009ec4:	009b      	lsls	r3, r3, #2
 8009ec6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	4413      	add	r3, r2
 8009ece:	3304      	adds	r3, #4
 8009ed0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009ed8:	78fb      	ldrb	r3, [r7, #3]
 8009eda:	f003 030f 	and.w	r3, r3, #15
 8009ede:	b2da      	uxtb	r2, r3
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009ee4:	883a      	ldrh	r2, [r7, #0]
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	78ba      	ldrb	r2, [r7, #2]
 8009eee:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	785b      	ldrb	r3, [r3, #1]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d004      	beq.n	8009f02 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	b29a      	uxth	r2, r3
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009f02:	78bb      	ldrb	r3, [r7, #2]
 8009f04:	2b02      	cmp	r3, #2
 8009f06:	d102      	bne.n	8009f0e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d101      	bne.n	8009f1c <HAL_PCD_EP_Open+0xaa>
 8009f18:	2302      	movs	r3, #2
 8009f1a:	e00e      	b.n	8009f3a <HAL_PCD_EP_Open+0xc8>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2201      	movs	r2, #1
 8009f20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	68f9      	ldr	r1, [r7, #12]
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f00a f8d6 	bl	80140dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8009f38:	7afb      	ldrb	r3, [r7, #11]
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3710      	adds	r7, #16
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}

08009f42 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009f42:	b580      	push	{r7, lr}
 8009f44:	b084      	sub	sp, #16
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
 8009f4a:	460b      	mov	r3, r1
 8009f4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009f4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	da0f      	bge.n	8009f76 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009f56:	78fb      	ldrb	r3, [r7, #3]
 8009f58:	f003 020f 	and.w	r2, r3, #15
 8009f5c:	4613      	mov	r3, r2
 8009f5e:	00db      	lsls	r3, r3, #3
 8009f60:	4413      	add	r3, r2
 8009f62:	009b      	lsls	r3, r3, #2
 8009f64:	3338      	adds	r3, #56	; 0x38
 8009f66:	687a      	ldr	r2, [r7, #4]
 8009f68:	4413      	add	r3, r2
 8009f6a:	3304      	adds	r3, #4
 8009f6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2201      	movs	r2, #1
 8009f72:	705a      	strb	r2, [r3, #1]
 8009f74:	e00f      	b.n	8009f96 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009f76:	78fb      	ldrb	r3, [r7, #3]
 8009f78:	f003 020f 	and.w	r2, r3, #15
 8009f7c:	4613      	mov	r3, r2
 8009f7e:	00db      	lsls	r3, r3, #3
 8009f80:	4413      	add	r3, r2
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009f88:	687a      	ldr	r2, [r7, #4]
 8009f8a:	4413      	add	r3, r2
 8009f8c:	3304      	adds	r3, #4
 8009f8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2200      	movs	r2, #0
 8009f94:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009f96:	78fb      	ldrb	r3, [r7, #3]
 8009f98:	f003 030f 	and.w	r3, r3, #15
 8009f9c:	b2da      	uxtb	r2, r3
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	d101      	bne.n	8009fb0 <HAL_PCD_EP_Close+0x6e>
 8009fac:	2302      	movs	r3, #2
 8009fae:	e00e      	b.n	8009fce <HAL_PCD_EP_Close+0x8c>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	68f9      	ldr	r1, [r7, #12]
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f00a f914 	bl	80141ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8009fcc:	2300      	movs	r3, #0
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3710      	adds	r7, #16
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}

08009fd6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009fd6:	b580      	push	{r7, lr}
 8009fd8:	b086      	sub	sp, #24
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	60f8      	str	r0, [r7, #12]
 8009fde:	607a      	str	r2, [r7, #4]
 8009fe0:	603b      	str	r3, [r7, #0]
 8009fe2:	460b      	mov	r3, r1
 8009fe4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009fe6:	7afb      	ldrb	r3, [r7, #11]
 8009fe8:	f003 020f 	and.w	r2, r3, #15
 8009fec:	4613      	mov	r3, r2
 8009fee:	00db      	lsls	r3, r3, #3
 8009ff0:	4413      	add	r3, r2
 8009ff2:	009b      	lsls	r3, r3, #2
 8009ff4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009ff8:	68fa      	ldr	r2, [r7, #12]
 8009ffa:	4413      	add	r3, r2
 8009ffc:	3304      	adds	r3, #4
 8009ffe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	687a      	ldr	r2, [r7, #4]
 800a004:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	683a      	ldr	r2, [r7, #0]
 800a00a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	2200      	movs	r2, #0
 800a010:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	2200      	movs	r2, #0
 800a016:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a018:	7afb      	ldrb	r3, [r7, #11]
 800a01a:	f003 030f 	and.w	r3, r3, #15
 800a01e:	b2da      	uxtb	r2, r3
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	68db      	ldr	r3, [r3, #12]
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d102      	bne.n	800a032 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a02c:	687a      	ldr	r2, [r7, #4]
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	6818      	ldr	r0, [r3, #0]
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	68db      	ldr	r3, [r3, #12]
 800a03a:	b2db      	uxtb	r3, r3
 800a03c:	461a      	mov	r2, r3
 800a03e:	6979      	ldr	r1, [r7, #20]
 800a040:	f00a f9b0 	bl	80143a4 <USB_EPStartXfer>

  return HAL_OK;
 800a044:	2300      	movs	r3, #0
}
 800a046:	4618      	mov	r0, r3
 800a048:	3718      	adds	r7, #24
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}

0800a04e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a04e:	b480      	push	{r7}
 800a050:	b083      	sub	sp, #12
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
 800a056:	460b      	mov	r3, r1
 800a058:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a05a:	78fb      	ldrb	r3, [r7, #3]
 800a05c:	f003 020f 	and.w	r2, r3, #15
 800a060:	6879      	ldr	r1, [r7, #4]
 800a062:	4613      	mov	r3, r2
 800a064:	00db      	lsls	r3, r3, #3
 800a066:	4413      	add	r3, r2
 800a068:	009b      	lsls	r3, r3, #2
 800a06a:	440b      	add	r3, r1
 800a06c:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800a070:	681b      	ldr	r3, [r3, #0]
}
 800a072:	4618      	mov	r0, r3
 800a074:	370c      	adds	r7, #12
 800a076:	46bd      	mov	sp, r7
 800a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07c:	4770      	bx	lr

0800a07e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a07e:	b580      	push	{r7, lr}
 800a080:	b086      	sub	sp, #24
 800a082:	af00      	add	r7, sp, #0
 800a084:	60f8      	str	r0, [r7, #12]
 800a086:	607a      	str	r2, [r7, #4]
 800a088:	603b      	str	r3, [r7, #0]
 800a08a:	460b      	mov	r3, r1
 800a08c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a08e:	7afb      	ldrb	r3, [r7, #11]
 800a090:	f003 020f 	and.w	r2, r3, #15
 800a094:	4613      	mov	r3, r2
 800a096:	00db      	lsls	r3, r3, #3
 800a098:	4413      	add	r3, r2
 800a09a:	009b      	lsls	r3, r3, #2
 800a09c:	3338      	adds	r3, #56	; 0x38
 800a09e:	68fa      	ldr	r2, [r7, #12]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	3304      	adds	r3, #4
 800a0a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	683a      	ldr	r2, [r7, #0]
 800a0b0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a0be:	7afb      	ldrb	r3, [r7, #11]
 800a0c0:	f003 030f 	and.w	r3, r3, #15
 800a0c4:	b2da      	uxtb	r2, r3
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	68db      	ldr	r3, [r3, #12]
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d102      	bne.n	800a0d8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	6818      	ldr	r0, [r3, #0]
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	68db      	ldr	r3, [r3, #12]
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	6979      	ldr	r1, [r7, #20]
 800a0e6:	f00a f95d 	bl	80143a4 <USB_EPStartXfer>

  return HAL_OK;
 800a0ea:	2300      	movs	r3, #0
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3718      	adds	r7, #24
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b084      	sub	sp, #16
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a100:	78fb      	ldrb	r3, [r7, #3]
 800a102:	f003 020f 	and.w	r2, r3, #15
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d901      	bls.n	800a112 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a10e:	2301      	movs	r3, #1
 800a110:	e050      	b.n	800a1b4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a112:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a116:	2b00      	cmp	r3, #0
 800a118:	da0f      	bge.n	800a13a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a11a:	78fb      	ldrb	r3, [r7, #3]
 800a11c:	f003 020f 	and.w	r2, r3, #15
 800a120:	4613      	mov	r3, r2
 800a122:	00db      	lsls	r3, r3, #3
 800a124:	4413      	add	r3, r2
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	3338      	adds	r3, #56	; 0x38
 800a12a:	687a      	ldr	r2, [r7, #4]
 800a12c:	4413      	add	r3, r2
 800a12e:	3304      	adds	r3, #4
 800a130:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2201      	movs	r2, #1
 800a136:	705a      	strb	r2, [r3, #1]
 800a138:	e00d      	b.n	800a156 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a13a:	78fa      	ldrb	r2, [r7, #3]
 800a13c:	4613      	mov	r3, r2
 800a13e:	00db      	lsls	r3, r3, #3
 800a140:	4413      	add	r3, r2
 800a142:	009b      	lsls	r3, r3, #2
 800a144:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	4413      	add	r3, r2
 800a14c:	3304      	adds	r3, #4
 800a14e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2200      	movs	r2, #0
 800a154:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2201      	movs	r2, #1
 800a15a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a15c:	78fb      	ldrb	r3, [r7, #3]
 800a15e:	f003 030f 	and.w	r3, r3, #15
 800a162:	b2da      	uxtb	r2, r3
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a16e:	2b01      	cmp	r3, #1
 800a170:	d101      	bne.n	800a176 <HAL_PCD_EP_SetStall+0x82>
 800a172:	2302      	movs	r3, #2
 800a174:	e01e      	b.n	800a1b4 <HAL_PCD_EP_SetStall+0xc0>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2201      	movs	r2, #1
 800a17a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	68f9      	ldr	r1, [r7, #12]
 800a184:	4618      	mov	r0, r3
 800a186:	f00a fced 	bl	8014b64 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a18a:	78fb      	ldrb	r3, [r7, #3]
 800a18c:	f003 030f 	and.w	r3, r3, #15
 800a190:	2b00      	cmp	r3, #0
 800a192:	d10a      	bne.n	800a1aa <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6818      	ldr	r0, [r3, #0]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	68db      	ldr	r3, [r3, #12]
 800a19c:	b2d9      	uxtb	r1, r3
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	f00a fedf 	bl	8014f68 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a1b2:	2300      	movs	r3, #0
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3710      	adds	r7, #16
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	460b      	mov	r3, r1
 800a1c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a1c8:	78fb      	ldrb	r3, [r7, #3]
 800a1ca:	f003 020f 	and.w	r2, r3, #15
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d901      	bls.n	800a1da <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	e042      	b.n	800a260 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a1da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	da0f      	bge.n	800a202 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a1e2:	78fb      	ldrb	r3, [r7, #3]
 800a1e4:	f003 020f 	and.w	r2, r3, #15
 800a1e8:	4613      	mov	r3, r2
 800a1ea:	00db      	lsls	r3, r3, #3
 800a1ec:	4413      	add	r3, r2
 800a1ee:	009b      	lsls	r3, r3, #2
 800a1f0:	3338      	adds	r3, #56	; 0x38
 800a1f2:	687a      	ldr	r2, [r7, #4]
 800a1f4:	4413      	add	r3, r2
 800a1f6:	3304      	adds	r3, #4
 800a1f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	705a      	strb	r2, [r3, #1]
 800a200:	e00f      	b.n	800a222 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a202:	78fb      	ldrb	r3, [r7, #3]
 800a204:	f003 020f 	and.w	r2, r3, #15
 800a208:	4613      	mov	r3, r2
 800a20a:	00db      	lsls	r3, r3, #3
 800a20c:	4413      	add	r3, r2
 800a20e:	009b      	lsls	r3, r3, #2
 800a210:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	4413      	add	r3, r2
 800a218:	3304      	adds	r3, #4
 800a21a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2200      	movs	r2, #0
 800a220:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2200      	movs	r2, #0
 800a226:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a228:	78fb      	ldrb	r3, [r7, #3]
 800a22a:	f003 030f 	and.w	r3, r3, #15
 800a22e:	b2da      	uxtb	r2, r3
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d101      	bne.n	800a242 <HAL_PCD_EP_ClrStall+0x86>
 800a23e:	2302      	movs	r3, #2
 800a240:	e00e      	b.n	800a260 <HAL_PCD_EP_ClrStall+0xa4>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2201      	movs	r2, #1
 800a246:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	68f9      	ldr	r1, [r7, #12]
 800a250:	4618      	mov	r0, r3
 800a252:	f00a fcf5 	bl	8014c40 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2200      	movs	r2, #0
 800a25a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a25e:	2300      	movs	r3, #0
}
 800a260:	4618      	mov	r0, r3
 800a262:	3710      	adds	r7, #16
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b084      	sub	sp, #16
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	460b      	mov	r3, r1
 800a272:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800a274:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	da0c      	bge.n	800a296 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a27c:	78fb      	ldrb	r3, [r7, #3]
 800a27e:	f003 020f 	and.w	r2, r3, #15
 800a282:	4613      	mov	r3, r2
 800a284:	00db      	lsls	r3, r3, #3
 800a286:	4413      	add	r3, r2
 800a288:	009b      	lsls	r3, r3, #2
 800a28a:	3338      	adds	r3, #56	; 0x38
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	4413      	add	r3, r2
 800a290:	3304      	adds	r3, #4
 800a292:	60fb      	str	r3, [r7, #12]
 800a294:	e00c      	b.n	800a2b0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a296:	78fb      	ldrb	r3, [r7, #3]
 800a298:	f003 020f 	and.w	r2, r3, #15
 800a29c:	4613      	mov	r3, r2
 800a29e:	00db      	lsls	r3, r3, #3
 800a2a0:	4413      	add	r3, r2
 800a2a2:	009b      	lsls	r3, r3, #2
 800a2a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a2a8:	687a      	ldr	r2, [r7, #4]
 800a2aa:	4413      	add	r3, r2
 800a2ac:	3304      	adds	r3, #4
 800a2ae:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	68f9      	ldr	r1, [r7, #12]
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f00a fb14 	bl	80148e4 <USB_EPStopXfer>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	72fb      	strb	r3, [r7, #11]

  return ret;
 800a2c0:	7afb      	ldrb	r3, [r7, #11]
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3710      	adds	r7, #16
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}

0800a2ca <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a2ca:	b580      	push	{r7, lr}
 800a2cc:	b08a      	sub	sp, #40	; 0x28
 800a2ce:	af02      	add	r7, sp, #8
 800a2d0:	6078      	str	r0, [r7, #4]
 800a2d2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a2de:	683a      	ldr	r2, [r7, #0]
 800a2e0:	4613      	mov	r3, r2
 800a2e2:	00db      	lsls	r3, r3, #3
 800a2e4:	4413      	add	r3, r2
 800a2e6:	009b      	lsls	r3, r3, #2
 800a2e8:	3338      	adds	r3, #56	; 0x38
 800a2ea:	687a      	ldr	r2, [r7, #4]
 800a2ec:	4413      	add	r3, r2
 800a2ee:	3304      	adds	r3, #4
 800a2f0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	695a      	ldr	r2, [r3, #20]
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	691b      	ldr	r3, [r3, #16]
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d901      	bls.n	800a302 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a2fe:	2301      	movs	r3, #1
 800a300:	e06c      	b.n	800a3dc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	691a      	ldr	r2, [r3, #16]
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	695b      	ldr	r3, [r3, #20]
 800a30a:	1ad3      	subs	r3, r2, r3
 800a30c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	689b      	ldr	r3, [r3, #8]
 800a312:	69fa      	ldr	r2, [r7, #28]
 800a314:	429a      	cmp	r2, r3
 800a316:	d902      	bls.n	800a31e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	689b      	ldr	r3, [r3, #8]
 800a31c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a31e:	69fb      	ldr	r3, [r7, #28]
 800a320:	3303      	adds	r3, #3
 800a322:	089b      	lsrs	r3, r3, #2
 800a324:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a326:	e02b      	b.n	800a380 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	691a      	ldr	r2, [r3, #16]
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	695b      	ldr	r3, [r3, #20]
 800a330:	1ad3      	subs	r3, r2, r3
 800a332:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	689b      	ldr	r3, [r3, #8]
 800a338:	69fa      	ldr	r2, [r7, #28]
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d902      	bls.n	800a344 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	689b      	ldr	r3, [r3, #8]
 800a342:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a344:	69fb      	ldr	r3, [r7, #28]
 800a346:	3303      	adds	r3, #3
 800a348:	089b      	lsrs	r3, r3, #2
 800a34a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	68d9      	ldr	r1, [r3, #12]
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	b2da      	uxtb	r2, r3
 800a354:	69fb      	ldr	r3, [r7, #28]
 800a356:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	9300      	str	r3, [sp, #0]
 800a360:	4603      	mov	r3, r0
 800a362:	6978      	ldr	r0, [r7, #20]
 800a364:	f00a fb68 	bl	8014a38 <USB_WritePacket>

    ep->xfer_buff  += len;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	68da      	ldr	r2, [r3, #12]
 800a36c:	69fb      	ldr	r3, [r7, #28]
 800a36e:	441a      	add	r2, r3
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	695a      	ldr	r2, [r3, #20]
 800a378:	69fb      	ldr	r3, [r7, #28]
 800a37a:	441a      	add	r2, r3
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	015a      	lsls	r2, r3, #5
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	4413      	add	r3, r2
 800a388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a38c:	699b      	ldr	r3, [r3, #24]
 800a38e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a390:	69ba      	ldr	r2, [r7, #24]
 800a392:	429a      	cmp	r2, r3
 800a394:	d809      	bhi.n	800a3aa <PCD_WriteEmptyTxFifo+0xe0>
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	695a      	ldr	r2, [r3, #20]
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a39e:	429a      	cmp	r2, r3
 800a3a0:	d203      	bcs.n	800a3aa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	691b      	ldr	r3, [r3, #16]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d1be      	bne.n	800a328 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	691a      	ldr	r2, [r3, #16]
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	695b      	ldr	r3, [r3, #20]
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d811      	bhi.n	800a3da <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	f003 030f 	and.w	r3, r3, #15
 800a3bc:	2201      	movs	r2, #1
 800a3be:	fa02 f303 	lsl.w	r3, r2, r3
 800a3c2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	43db      	mvns	r3, r3
 800a3d0:	6939      	ldr	r1, [r7, #16]
 800a3d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a3d6:	4013      	ands	r3, r2
 800a3d8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a3da:	2300      	movs	r3, #0
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3720      	adds	r7, #32
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b088      	sub	sp, #32
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3f4:	69fb      	ldr	r3, [r7, #28]
 800a3f6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a3f8:	69fb      	ldr	r3, [r7, #28]
 800a3fa:	333c      	adds	r3, #60	; 0x3c
 800a3fc:	3304      	adds	r3, #4
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	015a      	lsls	r2, r3, #5
 800a406:	69bb      	ldr	r3, [r7, #24]
 800a408:	4413      	add	r3, r2
 800a40a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	68db      	ldr	r3, [r3, #12]
 800a416:	2b01      	cmp	r3, #1
 800a418:	d17b      	bne.n	800a512 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	f003 0308 	and.w	r3, r3, #8
 800a420:	2b00      	cmp	r3, #0
 800a422:	d015      	beq.n	800a450 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	4a61      	ldr	r2, [pc, #388]	; (800a5ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	f240 80b9 	bls.w	800a5a0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a434:	2b00      	cmp	r3, #0
 800a436:	f000 80b3 	beq.w	800a5a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	015a      	lsls	r2, r3, #5
 800a43e:	69bb      	ldr	r3, [r7, #24]
 800a440:	4413      	add	r3, r2
 800a442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a446:	461a      	mov	r2, r3
 800a448:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a44c:	6093      	str	r3, [r2, #8]
 800a44e:	e0a7      	b.n	800a5a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	f003 0320 	and.w	r3, r3, #32
 800a456:	2b00      	cmp	r3, #0
 800a458:	d009      	beq.n	800a46e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	015a      	lsls	r2, r3, #5
 800a45e:	69bb      	ldr	r3, [r7, #24]
 800a460:	4413      	add	r3, r2
 800a462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a466:	461a      	mov	r2, r3
 800a468:	2320      	movs	r3, #32
 800a46a:	6093      	str	r3, [r2, #8]
 800a46c:	e098      	b.n	800a5a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a474:	2b00      	cmp	r3, #0
 800a476:	f040 8093 	bne.w	800a5a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	4a4b      	ldr	r2, [pc, #300]	; (800a5ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d90f      	bls.n	800a4a2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d00a      	beq.n	800a4a2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	015a      	lsls	r2, r3, #5
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	4413      	add	r3, r2
 800a494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a498:	461a      	mov	r2, r3
 800a49a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a49e:	6093      	str	r3, [r2, #8]
 800a4a0:	e07e      	b.n	800a5a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800a4a2:	683a      	ldr	r2, [r7, #0]
 800a4a4:	4613      	mov	r3, r2
 800a4a6:	00db      	lsls	r3, r3, #3
 800a4a8:	4413      	add	r3, r2
 800a4aa:	009b      	lsls	r3, r3, #2
 800a4ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	4413      	add	r3, r2
 800a4b4:	3304      	adds	r3, #4
 800a4b6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	6a1a      	ldr	r2, [r3, #32]
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	0159      	lsls	r1, r3, #5
 800a4c0:	69bb      	ldr	r3, [r7, #24]
 800a4c2:	440b      	add	r3, r1
 800a4c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4c8:	691b      	ldr	r3, [r3, #16]
 800a4ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a4ce:	1ad2      	subs	r2, r2, r3
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d114      	bne.n	800a504 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	691b      	ldr	r3, [r3, #16]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d109      	bne.n	800a4f6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6818      	ldr	r0, [r3, #0]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a4ec:	461a      	mov	r2, r3
 800a4ee:	2101      	movs	r1, #1
 800a4f0:	f00a fd3a 	bl	8014f68 <USB_EP0_OutStart>
 800a4f4:	e006      	b.n	800a504 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	68da      	ldr	r2, [r3, #12]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	695b      	ldr	r3, [r3, #20]
 800a4fe:	441a      	add	r2, r3
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	b2db      	uxtb	r3, r3
 800a508:	4619      	mov	r1, r3
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f010 f9fe 	bl	801a90c <HAL_PCD_DataOutStageCallback>
 800a510:	e046      	b.n	800a5a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	4a26      	ldr	r2, [pc, #152]	; (800a5b0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d124      	bne.n	800a564 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a520:	2b00      	cmp	r3, #0
 800a522:	d00a      	beq.n	800a53a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	015a      	lsls	r2, r3, #5
 800a528:	69bb      	ldr	r3, [r7, #24]
 800a52a:	4413      	add	r3, r2
 800a52c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a530:	461a      	mov	r2, r3
 800a532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a536:	6093      	str	r3, [r2, #8]
 800a538:	e032      	b.n	800a5a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	f003 0320 	and.w	r3, r3, #32
 800a540:	2b00      	cmp	r3, #0
 800a542:	d008      	beq.n	800a556 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	015a      	lsls	r2, r3, #5
 800a548:	69bb      	ldr	r3, [r7, #24]
 800a54a:	4413      	add	r3, r2
 800a54c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a550:	461a      	mov	r2, r3
 800a552:	2320      	movs	r3, #32
 800a554:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	b2db      	uxtb	r3, r3
 800a55a:	4619      	mov	r1, r3
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f010 f9d5 	bl	801a90c <HAL_PCD_DataOutStageCallback>
 800a562:	e01d      	b.n	800a5a0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d114      	bne.n	800a594 <PCD_EP_OutXfrComplete_int+0x1b0>
 800a56a:	6879      	ldr	r1, [r7, #4]
 800a56c:	683a      	ldr	r2, [r7, #0]
 800a56e:	4613      	mov	r3, r2
 800a570:	00db      	lsls	r3, r3, #3
 800a572:	4413      	add	r3, r2
 800a574:	009b      	lsls	r3, r3, #2
 800a576:	440b      	add	r3, r1
 800a578:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d108      	bne.n	800a594 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6818      	ldr	r0, [r3, #0]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a58c:	461a      	mov	r2, r3
 800a58e:	2100      	movs	r1, #0
 800a590:	f00a fcea 	bl	8014f68 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	b2db      	uxtb	r3, r3
 800a598:	4619      	mov	r1, r3
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f010 f9b6 	bl	801a90c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a5a0:	2300      	movs	r3, #0
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3720      	adds	r7, #32
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}
 800a5aa:	bf00      	nop
 800a5ac:	4f54300a 	.word	0x4f54300a
 800a5b0:	4f54310a 	.word	0x4f54310a

0800a5b4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b086      	sub	sp, #24
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	333c      	adds	r3, #60	; 0x3c
 800a5cc:	3304      	adds	r3, #4
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	015a      	lsls	r2, r3, #5
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	4413      	add	r3, r2
 800a5da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5de:	689b      	ldr	r3, [r3, #8]
 800a5e0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	4a15      	ldr	r2, [pc, #84]	; (800a63c <PCD_EP_OutSetupPacket_int+0x88>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d90e      	bls.n	800a608 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d009      	beq.n	800a608 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	015a      	lsls	r2, r3, #5
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	4413      	add	r3, r2
 800a5fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a600:	461a      	mov	r2, r3
 800a602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a606:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f010 f96d 	bl	801a8e8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	4a0a      	ldr	r2, [pc, #40]	; (800a63c <PCD_EP_OutSetupPacket_int+0x88>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d90c      	bls.n	800a630 <PCD_EP_OutSetupPacket_int+0x7c>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	68db      	ldr	r3, [r3, #12]
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d108      	bne.n	800a630 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6818      	ldr	r0, [r3, #0]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a628:	461a      	mov	r2, r3
 800a62a:	2101      	movs	r1, #1
 800a62c:	f00a fc9c 	bl	8014f68 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a630:	2300      	movs	r3, #0
}
 800a632:	4618      	mov	r0, r3
 800a634:	3718      	adds	r7, #24
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	4f54300a 	.word	0x4f54300a

0800a640 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a640:	b480      	push	{r7}
 800a642:	b085      	sub	sp, #20
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
 800a648:	460b      	mov	r3, r1
 800a64a:	70fb      	strb	r3, [r7, #3]
 800a64c:	4613      	mov	r3, r2
 800a64e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a656:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a658:	78fb      	ldrb	r3, [r7, #3]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d107      	bne.n	800a66e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a65e:	883b      	ldrh	r3, [r7, #0]
 800a660:	0419      	lsls	r1, r3, #16
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	68ba      	ldr	r2, [r7, #8]
 800a668:	430a      	orrs	r2, r1
 800a66a:	629a      	str	r2, [r3, #40]	; 0x28
 800a66c:	e028      	b.n	800a6c0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a674:	0c1b      	lsrs	r3, r3, #16
 800a676:	68ba      	ldr	r2, [r7, #8]
 800a678:	4413      	add	r3, r2
 800a67a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a67c:	2300      	movs	r3, #0
 800a67e:	73fb      	strb	r3, [r7, #15]
 800a680:	e00d      	b.n	800a69e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681a      	ldr	r2, [r3, #0]
 800a686:	7bfb      	ldrb	r3, [r7, #15]
 800a688:	3340      	adds	r3, #64	; 0x40
 800a68a:	009b      	lsls	r3, r3, #2
 800a68c:	4413      	add	r3, r2
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	0c1b      	lsrs	r3, r3, #16
 800a692:	68ba      	ldr	r2, [r7, #8]
 800a694:	4413      	add	r3, r2
 800a696:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a698:	7bfb      	ldrb	r3, [r7, #15]
 800a69a:	3301      	adds	r3, #1
 800a69c:	73fb      	strb	r3, [r7, #15]
 800a69e:	7bfa      	ldrb	r2, [r7, #15]
 800a6a0:	78fb      	ldrb	r3, [r7, #3]
 800a6a2:	3b01      	subs	r3, #1
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d3ec      	bcc.n	800a682 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a6a8:	883b      	ldrh	r3, [r7, #0]
 800a6aa:	0418      	lsls	r0, r3, #16
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6819      	ldr	r1, [r3, #0]
 800a6b0:	78fb      	ldrb	r3, [r7, #3]
 800a6b2:	3b01      	subs	r3, #1
 800a6b4:	68ba      	ldr	r2, [r7, #8]
 800a6b6:	4302      	orrs	r2, r0
 800a6b8:	3340      	adds	r3, #64	; 0x40
 800a6ba:	009b      	lsls	r3, r3, #2
 800a6bc:	440b      	add	r3, r1
 800a6be:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a6c0:	2300      	movs	r3, #0
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3714      	adds	r7, #20
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6cc:	4770      	bx	lr

0800a6ce <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a6ce:	b480      	push	{r7}
 800a6d0:	b083      	sub	sp, #12
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	6078      	str	r0, [r7, #4]
 800a6d6:	460b      	mov	r3, r1
 800a6d8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	887a      	ldrh	r2, [r7, #2]
 800a6e0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a6e2:	2300      	movs	r3, #0
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	370c      	adds	r7, #12
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b085      	sub	sp, #20
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2201      	movs	r2, #1
 800a702:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2200      	movs	r2, #0
 800a70a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	699b      	ldr	r3, [r3, #24]
 800a712:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a71e:	4b05      	ldr	r3, [pc, #20]	; (800a734 <HAL_PCDEx_ActivateLPM+0x44>)
 800a720:	4313      	orrs	r3, r2
 800a722:	68fa      	ldr	r2, [r7, #12]
 800a724:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800a726:	2300      	movs	r3, #0
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3714      	adds	r7, #20
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr
 800a734:	10000003 	.word	0x10000003

0800a738 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a738:	b480      	push	{r7}
 800a73a:	b083      	sub	sp, #12
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	460b      	mov	r3, r1
 800a742:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800a744:	bf00      	nop
 800a746:	370c      	adds	r7, #12
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr

0800a750 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b084      	sub	sp, #16
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a758:	4b19      	ldr	r3, [pc, #100]	; (800a7c0 <HAL_PWREx_ConfigSupply+0x70>)
 800a75a:	68db      	ldr	r3, [r3, #12]
 800a75c:	f003 0304 	and.w	r3, r3, #4
 800a760:	2b04      	cmp	r3, #4
 800a762:	d00a      	beq.n	800a77a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a764:	4b16      	ldr	r3, [pc, #88]	; (800a7c0 <HAL_PWREx_ConfigSupply+0x70>)
 800a766:	68db      	ldr	r3, [r3, #12]
 800a768:	f003 0307 	and.w	r3, r3, #7
 800a76c:	687a      	ldr	r2, [r7, #4]
 800a76e:	429a      	cmp	r2, r3
 800a770:	d001      	beq.n	800a776 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a772:	2301      	movs	r3, #1
 800a774:	e01f      	b.n	800a7b6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a776:	2300      	movs	r3, #0
 800a778:	e01d      	b.n	800a7b6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a77a:	4b11      	ldr	r3, [pc, #68]	; (800a7c0 <HAL_PWREx_ConfigSupply+0x70>)
 800a77c:	68db      	ldr	r3, [r3, #12]
 800a77e:	f023 0207 	bic.w	r2, r3, #7
 800a782:	490f      	ldr	r1, [pc, #60]	; (800a7c0 <HAL_PWREx_ConfigSupply+0x70>)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	4313      	orrs	r3, r2
 800a788:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a78a:	f7f9 fcc3 	bl	8004114 <HAL_GetTick>
 800a78e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a790:	e009      	b.n	800a7a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a792:	f7f9 fcbf 	bl	8004114 <HAL_GetTick>
 800a796:	4602      	mov	r2, r0
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	1ad3      	subs	r3, r2, r3
 800a79c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a7a0:	d901      	bls.n	800a7a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	e007      	b.n	800a7b6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a7a6:	4b06      	ldr	r3, [pc, #24]	; (800a7c0 <HAL_PWREx_ConfigSupply+0x70>)
 800a7a8:	685b      	ldr	r3, [r3, #4]
 800a7aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a7ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7b2:	d1ee      	bne.n	800a792 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a7b4:	2300      	movs	r3, #0
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3710      	adds	r7, #16
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
 800a7be:	bf00      	nop
 800a7c0:	58024800 	.word	0x58024800

0800a7c4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800a7c8:	4b05      	ldr	r3, [pc, #20]	; (800a7e0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a7ca:	68db      	ldr	r3, [r3, #12]
 800a7cc:	4a04      	ldr	r2, [pc, #16]	; (800a7e0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a7ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a7d2:	60d3      	str	r3, [r2, #12]
}
 800a7d4:	bf00      	nop
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr
 800a7de:	bf00      	nop
 800a7e0:	58024800 	.word	0x58024800

0800a7e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b08c      	sub	sp, #48	; 0x30
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d101      	bne.n	800a7f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	e3c8      	b.n	800af88 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f003 0301 	and.w	r3, r3, #1
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	f000 8087 	beq.w	800a912 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a804:	4b88      	ldr	r3, [pc, #544]	; (800aa28 <HAL_RCC_OscConfig+0x244>)
 800a806:	691b      	ldr	r3, [r3, #16]
 800a808:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a80c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a80e:	4b86      	ldr	r3, [pc, #536]	; (800aa28 <HAL_RCC_OscConfig+0x244>)
 800a810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a812:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a816:	2b10      	cmp	r3, #16
 800a818:	d007      	beq.n	800a82a <HAL_RCC_OscConfig+0x46>
 800a81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a81c:	2b18      	cmp	r3, #24
 800a81e:	d110      	bne.n	800a842 <HAL_RCC_OscConfig+0x5e>
 800a820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a822:	f003 0303 	and.w	r3, r3, #3
 800a826:	2b02      	cmp	r3, #2
 800a828:	d10b      	bne.n	800a842 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a82a:	4b7f      	ldr	r3, [pc, #508]	; (800aa28 <HAL_RCC_OscConfig+0x244>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a832:	2b00      	cmp	r3, #0
 800a834:	d06c      	beq.n	800a910 <HAL_RCC_OscConfig+0x12c>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d168      	bne.n	800a910 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a83e:	2301      	movs	r3, #1
 800a840:	e3a2      	b.n	800af88 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a84a:	d106      	bne.n	800a85a <HAL_RCC_OscConfig+0x76>
 800a84c:	4b76      	ldr	r3, [pc, #472]	; (800aa28 <HAL_RCC_OscConfig+0x244>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4a75      	ldr	r2, [pc, #468]	; (800aa28 <HAL_RCC_OscConfig+0x244>)
 800a852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a856:	6013      	str	r3, [r2, #0]
 800a858:	e02e      	b.n	800a8b8 <HAL_RCC_OscConfig+0xd4>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	685b      	ldr	r3, [r3, #4]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d10c      	bne.n	800a87c <HAL_RCC_OscConfig+0x98>
 800a862:	4b71      	ldr	r3, [pc, #452]	; (800aa28 <HAL_RCC_OscConfig+0x244>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4a70      	ldr	r2, [pc, #448]	; (800aa28 <HAL_RCC_OscConfig+0x244>)
 800a868:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a86c:	6013      	str	r3, [r2, #0]
 800a86e:	4b6e      	ldr	r3, [pc, #440]	; (800aa28 <HAL_RCC_OscConfig+0x244>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	4a6d      	ldr	r2, [pc, #436]	; (800aa28 <HAL_RCC_OscConfig+0x244>)
 800a874:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a878:	6013      	str	r3, [r2, #0]
 800a87a:	e01d      	b.n	800a8b8 <HAL_RCC_OscConfig+0xd4>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	685b      	ldr	r3, [r3, #4]
 800a880:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a884:	d10c      	bne.n	800a8a0 <HAL_RCC_OscConfig+0xbc>
 800a886:	4b68      	ldr	r3, [pc, #416]	; (800aa28 <HAL_RCC_OscConfig+0x244>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4a67      	ldr	r2, [pc, #412]	; (800aa28 <HAL_RCC_OscConfig+0x244>)
 800a88c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a890:	6013      	str	r3, [r2, #0]
 800a892:	4b65      	ldr	r3, [pc, #404]	; (800aa28 <HAL_RCC_OscConfig+0x244>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a64      	ldr	r2, [pc, #400]	; (800aa28 <HAL_RCC_OscConfig+0x244>)
 800a898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a89c:	6013      	str	r3, [r2, #0]
 800a89e:	e00b      	b.n	800a8b8 <HAL_RCC_OscConfig+0xd4>
 800a8a0:	4b61      	ldr	r3, [pc, #388]	; (800aa28 <HAL_RCC_OscConfig+0x244>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	4a60      	ldr	r2, [pc, #384]	; (800aa28 <HAL_RCC_OscConfig+0x244>)
 800a8a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8aa:	6013      	str	r3, [r2, #0]
 800a8ac:	4b5e      	ldr	r3, [pc, #376]	; (800aa28 <HAL_RCC_OscConfig+0x244>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	4a5d      	ldr	r2, [pc, #372]	; (800aa28 <HAL_RCC_OscConfig+0x244>)
 800a8b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a8b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	685b      	ldr	r3, [r3, #4]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d013      	beq.n	800a8e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8c0:	f7f9 fc28 	bl	8004114 <HAL_GetTick>
 800a8c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a8c6:	e008      	b.n	800a8da <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a8c8:	f7f9 fc24 	bl	8004114 <HAL_GetTick>
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d0:	1ad3      	subs	r3, r2, r3
 800a8d2:	2b64      	cmp	r3, #100	; 0x64
 800a8d4:	d901      	bls.n	800a8da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a8d6:	2303      	movs	r3, #3
 800a8d8:	e356      	b.n	800af88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a8da:	4b53      	ldr	r3, [pc, #332]	; (800aa28 <HAL_RCC_OscConfig+0x244>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d0f0      	beq.n	800a8c8 <HAL_RCC_OscConfig+0xe4>
 800a8e6:	e014      	b.n	800a912 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8e8:	f7f9 fc14 	bl	8004114 <HAL_GetTick>
 800a8ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a8ee:	e008      	b.n	800a902 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a8f0:	f7f9 fc10 	bl	8004114 <HAL_GetTick>
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f8:	1ad3      	subs	r3, r2, r3
 800a8fa:	2b64      	cmp	r3, #100	; 0x64
 800a8fc:	d901      	bls.n	800a902 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a8fe:	2303      	movs	r3, #3
 800a900:	e342      	b.n	800af88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a902:	4b49      	ldr	r3, [pc, #292]	; (800aa28 <HAL_RCC_OscConfig+0x244>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d1f0      	bne.n	800a8f0 <HAL_RCC_OscConfig+0x10c>
 800a90e:	e000      	b.n	800a912 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f003 0302 	and.w	r3, r3, #2
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	f000 808c 	beq.w	800aa38 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a920:	4b41      	ldr	r3, [pc, #260]	; (800aa28 <HAL_RCC_OscConfig+0x244>)
 800a922:	691b      	ldr	r3, [r3, #16]
 800a924:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a928:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a92a:	4b3f      	ldr	r3, [pc, #252]	; (800aa28 <HAL_RCC_OscConfig+0x244>)
 800a92c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a92e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a930:	6a3b      	ldr	r3, [r7, #32]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d007      	beq.n	800a946 <HAL_RCC_OscConfig+0x162>
 800a936:	6a3b      	ldr	r3, [r7, #32]
 800a938:	2b18      	cmp	r3, #24
 800a93a:	d137      	bne.n	800a9ac <HAL_RCC_OscConfig+0x1c8>
 800a93c:	69fb      	ldr	r3, [r7, #28]
 800a93e:	f003 0303 	and.w	r3, r3, #3
 800a942:	2b00      	cmp	r3, #0
 800a944:	d132      	bne.n	800a9ac <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a946:	4b38      	ldr	r3, [pc, #224]	; (800aa28 <HAL_RCC_OscConfig+0x244>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f003 0304 	and.w	r3, r3, #4
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d005      	beq.n	800a95e <HAL_RCC_OscConfig+0x17a>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	68db      	ldr	r3, [r3, #12]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d101      	bne.n	800a95e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a95a:	2301      	movs	r3, #1
 800a95c:	e314      	b.n	800af88 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a95e:	4b32      	ldr	r3, [pc, #200]	; (800aa28 <HAL_RCC_OscConfig+0x244>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f023 0219 	bic.w	r2, r3, #25
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	68db      	ldr	r3, [r3, #12]
 800a96a:	492f      	ldr	r1, [pc, #188]	; (800aa28 <HAL_RCC_OscConfig+0x244>)
 800a96c:	4313      	orrs	r3, r2
 800a96e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a970:	f7f9 fbd0 	bl	8004114 <HAL_GetTick>
 800a974:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a976:	e008      	b.n	800a98a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a978:	f7f9 fbcc 	bl	8004114 <HAL_GetTick>
 800a97c:	4602      	mov	r2, r0
 800a97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a980:	1ad3      	subs	r3, r2, r3
 800a982:	2b02      	cmp	r3, #2
 800a984:	d901      	bls.n	800a98a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800a986:	2303      	movs	r3, #3
 800a988:	e2fe      	b.n	800af88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a98a:	4b27      	ldr	r3, [pc, #156]	; (800aa28 <HAL_RCC_OscConfig+0x244>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f003 0304 	and.w	r3, r3, #4
 800a992:	2b00      	cmp	r3, #0
 800a994:	d0f0      	beq.n	800a978 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a996:	4b24      	ldr	r3, [pc, #144]	; (800aa28 <HAL_RCC_OscConfig+0x244>)
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	691b      	ldr	r3, [r3, #16]
 800a9a2:	061b      	lsls	r3, r3, #24
 800a9a4:	4920      	ldr	r1, [pc, #128]	; (800aa28 <HAL_RCC_OscConfig+0x244>)
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a9aa:	e045      	b.n	800aa38 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	68db      	ldr	r3, [r3, #12]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d026      	beq.n	800aa02 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a9b4:	4b1c      	ldr	r3, [pc, #112]	; (800aa28 <HAL_RCC_OscConfig+0x244>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f023 0219 	bic.w	r2, r3, #25
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	68db      	ldr	r3, [r3, #12]
 800a9c0:	4919      	ldr	r1, [pc, #100]	; (800aa28 <HAL_RCC_OscConfig+0x244>)
 800a9c2:	4313      	orrs	r3, r2
 800a9c4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9c6:	f7f9 fba5 	bl	8004114 <HAL_GetTick>
 800a9ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a9cc:	e008      	b.n	800a9e0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a9ce:	f7f9 fba1 	bl	8004114 <HAL_GetTick>
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d6:	1ad3      	subs	r3, r2, r3
 800a9d8:	2b02      	cmp	r3, #2
 800a9da:	d901      	bls.n	800a9e0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800a9dc:	2303      	movs	r3, #3
 800a9de:	e2d3      	b.n	800af88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a9e0:	4b11      	ldr	r3, [pc, #68]	; (800aa28 <HAL_RCC_OscConfig+0x244>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f003 0304 	and.w	r3, r3, #4
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d0f0      	beq.n	800a9ce <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9ec:	4b0e      	ldr	r3, [pc, #56]	; (800aa28 <HAL_RCC_OscConfig+0x244>)
 800a9ee:	685b      	ldr	r3, [r3, #4]
 800a9f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	691b      	ldr	r3, [r3, #16]
 800a9f8:	061b      	lsls	r3, r3, #24
 800a9fa:	490b      	ldr	r1, [pc, #44]	; (800aa28 <HAL_RCC_OscConfig+0x244>)
 800a9fc:	4313      	orrs	r3, r2
 800a9fe:	604b      	str	r3, [r1, #4]
 800aa00:	e01a      	b.n	800aa38 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aa02:	4b09      	ldr	r3, [pc, #36]	; (800aa28 <HAL_RCC_OscConfig+0x244>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	4a08      	ldr	r2, [pc, #32]	; (800aa28 <HAL_RCC_OscConfig+0x244>)
 800aa08:	f023 0301 	bic.w	r3, r3, #1
 800aa0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa0e:	f7f9 fb81 	bl	8004114 <HAL_GetTick>
 800aa12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800aa14:	e00a      	b.n	800aa2c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa16:	f7f9 fb7d 	bl	8004114 <HAL_GetTick>
 800aa1a:	4602      	mov	r2, r0
 800aa1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1e:	1ad3      	subs	r3, r2, r3
 800aa20:	2b02      	cmp	r3, #2
 800aa22:	d903      	bls.n	800aa2c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800aa24:	2303      	movs	r3, #3
 800aa26:	e2af      	b.n	800af88 <HAL_RCC_OscConfig+0x7a4>
 800aa28:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800aa2c:	4b96      	ldr	r3, [pc, #600]	; (800ac88 <HAL_RCC_OscConfig+0x4a4>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f003 0304 	and.w	r3, r3, #4
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d1ee      	bne.n	800aa16 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f003 0310 	and.w	r3, r3, #16
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d06a      	beq.n	800ab1a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aa44:	4b90      	ldr	r3, [pc, #576]	; (800ac88 <HAL_RCC_OscConfig+0x4a4>)
 800aa46:	691b      	ldr	r3, [r3, #16]
 800aa48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aa4c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aa4e:	4b8e      	ldr	r3, [pc, #568]	; (800ac88 <HAL_RCC_OscConfig+0x4a4>)
 800aa50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa52:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800aa54:	69bb      	ldr	r3, [r7, #24]
 800aa56:	2b08      	cmp	r3, #8
 800aa58:	d007      	beq.n	800aa6a <HAL_RCC_OscConfig+0x286>
 800aa5a:	69bb      	ldr	r3, [r7, #24]
 800aa5c:	2b18      	cmp	r3, #24
 800aa5e:	d11b      	bne.n	800aa98 <HAL_RCC_OscConfig+0x2b4>
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	f003 0303 	and.w	r3, r3, #3
 800aa66:	2b01      	cmp	r3, #1
 800aa68:	d116      	bne.n	800aa98 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800aa6a:	4b87      	ldr	r3, [pc, #540]	; (800ac88 <HAL_RCC_OscConfig+0x4a4>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d005      	beq.n	800aa82 <HAL_RCC_OscConfig+0x29e>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	69db      	ldr	r3, [r3, #28]
 800aa7a:	2b80      	cmp	r3, #128	; 0x80
 800aa7c:	d001      	beq.n	800aa82 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800aa7e:	2301      	movs	r3, #1
 800aa80:	e282      	b.n	800af88 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aa82:	4b81      	ldr	r3, [pc, #516]	; (800ac88 <HAL_RCC_OscConfig+0x4a4>)
 800aa84:	68db      	ldr	r3, [r3, #12]
 800aa86:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6a1b      	ldr	r3, [r3, #32]
 800aa8e:	061b      	lsls	r3, r3, #24
 800aa90:	497d      	ldr	r1, [pc, #500]	; (800ac88 <HAL_RCC_OscConfig+0x4a4>)
 800aa92:	4313      	orrs	r3, r2
 800aa94:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800aa96:	e040      	b.n	800ab1a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	69db      	ldr	r3, [r3, #28]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d023      	beq.n	800aae8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800aaa0:	4b79      	ldr	r3, [pc, #484]	; (800ac88 <HAL_RCC_OscConfig+0x4a4>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a78      	ldr	r2, [pc, #480]	; (800ac88 <HAL_RCC_OscConfig+0x4a4>)
 800aaa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aaac:	f7f9 fb32 	bl	8004114 <HAL_GetTick>
 800aab0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aab2:	e008      	b.n	800aac6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800aab4:	f7f9 fb2e 	bl	8004114 <HAL_GetTick>
 800aab8:	4602      	mov	r2, r0
 800aaba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aabc:	1ad3      	subs	r3, r2, r3
 800aabe:	2b02      	cmp	r3, #2
 800aac0:	d901      	bls.n	800aac6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800aac2:	2303      	movs	r3, #3
 800aac4:	e260      	b.n	800af88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aac6:	4b70      	ldr	r3, [pc, #448]	; (800ac88 <HAL_RCC_OscConfig+0x4a4>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d0f0      	beq.n	800aab4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aad2:	4b6d      	ldr	r3, [pc, #436]	; (800ac88 <HAL_RCC_OscConfig+0x4a4>)
 800aad4:	68db      	ldr	r3, [r3, #12]
 800aad6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6a1b      	ldr	r3, [r3, #32]
 800aade:	061b      	lsls	r3, r3, #24
 800aae0:	4969      	ldr	r1, [pc, #420]	; (800ac88 <HAL_RCC_OscConfig+0x4a4>)
 800aae2:	4313      	orrs	r3, r2
 800aae4:	60cb      	str	r3, [r1, #12]
 800aae6:	e018      	b.n	800ab1a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800aae8:	4b67      	ldr	r3, [pc, #412]	; (800ac88 <HAL_RCC_OscConfig+0x4a4>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	4a66      	ldr	r2, [pc, #408]	; (800ac88 <HAL_RCC_OscConfig+0x4a4>)
 800aaee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aaf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aaf4:	f7f9 fb0e 	bl	8004114 <HAL_GetTick>
 800aaf8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800aafa:	e008      	b.n	800ab0e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800aafc:	f7f9 fb0a 	bl	8004114 <HAL_GetTick>
 800ab00:	4602      	mov	r2, r0
 800ab02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab04:	1ad3      	subs	r3, r2, r3
 800ab06:	2b02      	cmp	r3, #2
 800ab08:	d901      	bls.n	800ab0e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800ab0a:	2303      	movs	r3, #3
 800ab0c:	e23c      	b.n	800af88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ab0e:	4b5e      	ldr	r3, [pc, #376]	; (800ac88 <HAL_RCC_OscConfig+0x4a4>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d1f0      	bne.n	800aafc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f003 0308 	and.w	r3, r3, #8
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d036      	beq.n	800ab94 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	695b      	ldr	r3, [r3, #20]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d019      	beq.n	800ab62 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ab2e:	4b56      	ldr	r3, [pc, #344]	; (800ac88 <HAL_RCC_OscConfig+0x4a4>)
 800ab30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab32:	4a55      	ldr	r2, [pc, #340]	; (800ac88 <HAL_RCC_OscConfig+0x4a4>)
 800ab34:	f043 0301 	orr.w	r3, r3, #1
 800ab38:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab3a:	f7f9 faeb 	bl	8004114 <HAL_GetTick>
 800ab3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ab40:	e008      	b.n	800ab54 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ab42:	f7f9 fae7 	bl	8004114 <HAL_GetTick>
 800ab46:	4602      	mov	r2, r0
 800ab48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab4a:	1ad3      	subs	r3, r2, r3
 800ab4c:	2b02      	cmp	r3, #2
 800ab4e:	d901      	bls.n	800ab54 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800ab50:	2303      	movs	r3, #3
 800ab52:	e219      	b.n	800af88 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ab54:	4b4c      	ldr	r3, [pc, #304]	; (800ac88 <HAL_RCC_OscConfig+0x4a4>)
 800ab56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab58:	f003 0302 	and.w	r3, r3, #2
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d0f0      	beq.n	800ab42 <HAL_RCC_OscConfig+0x35e>
 800ab60:	e018      	b.n	800ab94 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ab62:	4b49      	ldr	r3, [pc, #292]	; (800ac88 <HAL_RCC_OscConfig+0x4a4>)
 800ab64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab66:	4a48      	ldr	r2, [pc, #288]	; (800ac88 <HAL_RCC_OscConfig+0x4a4>)
 800ab68:	f023 0301 	bic.w	r3, r3, #1
 800ab6c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab6e:	f7f9 fad1 	bl	8004114 <HAL_GetTick>
 800ab72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ab74:	e008      	b.n	800ab88 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ab76:	f7f9 facd 	bl	8004114 <HAL_GetTick>
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab7e:	1ad3      	subs	r3, r2, r3
 800ab80:	2b02      	cmp	r3, #2
 800ab82:	d901      	bls.n	800ab88 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800ab84:	2303      	movs	r3, #3
 800ab86:	e1ff      	b.n	800af88 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ab88:	4b3f      	ldr	r3, [pc, #252]	; (800ac88 <HAL_RCC_OscConfig+0x4a4>)
 800ab8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab8c:	f003 0302 	and.w	r3, r3, #2
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d1f0      	bne.n	800ab76 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f003 0320 	and.w	r3, r3, #32
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d036      	beq.n	800ac0e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	699b      	ldr	r3, [r3, #24]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d019      	beq.n	800abdc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800aba8:	4b37      	ldr	r3, [pc, #220]	; (800ac88 <HAL_RCC_OscConfig+0x4a4>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4a36      	ldr	r2, [pc, #216]	; (800ac88 <HAL_RCC_OscConfig+0x4a4>)
 800abae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800abb2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800abb4:	f7f9 faae 	bl	8004114 <HAL_GetTick>
 800abb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800abba:	e008      	b.n	800abce <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800abbc:	f7f9 faaa 	bl	8004114 <HAL_GetTick>
 800abc0:	4602      	mov	r2, r0
 800abc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc4:	1ad3      	subs	r3, r2, r3
 800abc6:	2b02      	cmp	r3, #2
 800abc8:	d901      	bls.n	800abce <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800abca:	2303      	movs	r3, #3
 800abcc:	e1dc      	b.n	800af88 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800abce:	4b2e      	ldr	r3, [pc, #184]	; (800ac88 <HAL_RCC_OscConfig+0x4a4>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d0f0      	beq.n	800abbc <HAL_RCC_OscConfig+0x3d8>
 800abda:	e018      	b.n	800ac0e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800abdc:	4b2a      	ldr	r3, [pc, #168]	; (800ac88 <HAL_RCC_OscConfig+0x4a4>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4a29      	ldr	r2, [pc, #164]	; (800ac88 <HAL_RCC_OscConfig+0x4a4>)
 800abe2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800abe6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800abe8:	f7f9 fa94 	bl	8004114 <HAL_GetTick>
 800abec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800abee:	e008      	b.n	800ac02 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800abf0:	f7f9 fa90 	bl	8004114 <HAL_GetTick>
 800abf4:	4602      	mov	r2, r0
 800abf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf8:	1ad3      	subs	r3, r2, r3
 800abfa:	2b02      	cmp	r3, #2
 800abfc:	d901      	bls.n	800ac02 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800abfe:	2303      	movs	r3, #3
 800ac00:	e1c2      	b.n	800af88 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ac02:	4b21      	ldr	r3, [pc, #132]	; (800ac88 <HAL_RCC_OscConfig+0x4a4>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d1f0      	bne.n	800abf0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f003 0304 	and.w	r3, r3, #4
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	f000 8086 	beq.w	800ad28 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ac1c:	4b1b      	ldr	r3, [pc, #108]	; (800ac8c <HAL_RCC_OscConfig+0x4a8>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4a1a      	ldr	r2, [pc, #104]	; (800ac8c <HAL_RCC_OscConfig+0x4a8>)
 800ac22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ac28:	f7f9 fa74 	bl	8004114 <HAL_GetTick>
 800ac2c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ac2e:	e008      	b.n	800ac42 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ac30:	f7f9 fa70 	bl	8004114 <HAL_GetTick>
 800ac34:	4602      	mov	r2, r0
 800ac36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac38:	1ad3      	subs	r3, r2, r3
 800ac3a:	2b64      	cmp	r3, #100	; 0x64
 800ac3c:	d901      	bls.n	800ac42 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800ac3e:	2303      	movs	r3, #3
 800ac40:	e1a2      	b.n	800af88 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ac42:	4b12      	ldr	r3, [pc, #72]	; (800ac8c <HAL_RCC_OscConfig+0x4a8>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d0f0      	beq.n	800ac30 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	689b      	ldr	r3, [r3, #8]
 800ac52:	2b01      	cmp	r3, #1
 800ac54:	d106      	bne.n	800ac64 <HAL_RCC_OscConfig+0x480>
 800ac56:	4b0c      	ldr	r3, [pc, #48]	; (800ac88 <HAL_RCC_OscConfig+0x4a4>)
 800ac58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac5a:	4a0b      	ldr	r2, [pc, #44]	; (800ac88 <HAL_RCC_OscConfig+0x4a4>)
 800ac5c:	f043 0301 	orr.w	r3, r3, #1
 800ac60:	6713      	str	r3, [r2, #112]	; 0x70
 800ac62:	e032      	b.n	800acca <HAL_RCC_OscConfig+0x4e6>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	689b      	ldr	r3, [r3, #8]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d111      	bne.n	800ac90 <HAL_RCC_OscConfig+0x4ac>
 800ac6c:	4b06      	ldr	r3, [pc, #24]	; (800ac88 <HAL_RCC_OscConfig+0x4a4>)
 800ac6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac70:	4a05      	ldr	r2, [pc, #20]	; (800ac88 <HAL_RCC_OscConfig+0x4a4>)
 800ac72:	f023 0301 	bic.w	r3, r3, #1
 800ac76:	6713      	str	r3, [r2, #112]	; 0x70
 800ac78:	4b03      	ldr	r3, [pc, #12]	; (800ac88 <HAL_RCC_OscConfig+0x4a4>)
 800ac7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac7c:	4a02      	ldr	r2, [pc, #8]	; (800ac88 <HAL_RCC_OscConfig+0x4a4>)
 800ac7e:	f023 0304 	bic.w	r3, r3, #4
 800ac82:	6713      	str	r3, [r2, #112]	; 0x70
 800ac84:	e021      	b.n	800acca <HAL_RCC_OscConfig+0x4e6>
 800ac86:	bf00      	nop
 800ac88:	58024400 	.word	0x58024400
 800ac8c:	58024800 	.word	0x58024800
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	689b      	ldr	r3, [r3, #8]
 800ac94:	2b05      	cmp	r3, #5
 800ac96:	d10c      	bne.n	800acb2 <HAL_RCC_OscConfig+0x4ce>
 800ac98:	4b83      	ldr	r3, [pc, #524]	; (800aea8 <HAL_RCC_OscConfig+0x6c4>)
 800ac9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac9c:	4a82      	ldr	r2, [pc, #520]	; (800aea8 <HAL_RCC_OscConfig+0x6c4>)
 800ac9e:	f043 0304 	orr.w	r3, r3, #4
 800aca2:	6713      	str	r3, [r2, #112]	; 0x70
 800aca4:	4b80      	ldr	r3, [pc, #512]	; (800aea8 <HAL_RCC_OscConfig+0x6c4>)
 800aca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aca8:	4a7f      	ldr	r2, [pc, #508]	; (800aea8 <HAL_RCC_OscConfig+0x6c4>)
 800acaa:	f043 0301 	orr.w	r3, r3, #1
 800acae:	6713      	str	r3, [r2, #112]	; 0x70
 800acb0:	e00b      	b.n	800acca <HAL_RCC_OscConfig+0x4e6>
 800acb2:	4b7d      	ldr	r3, [pc, #500]	; (800aea8 <HAL_RCC_OscConfig+0x6c4>)
 800acb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acb6:	4a7c      	ldr	r2, [pc, #496]	; (800aea8 <HAL_RCC_OscConfig+0x6c4>)
 800acb8:	f023 0301 	bic.w	r3, r3, #1
 800acbc:	6713      	str	r3, [r2, #112]	; 0x70
 800acbe:	4b7a      	ldr	r3, [pc, #488]	; (800aea8 <HAL_RCC_OscConfig+0x6c4>)
 800acc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acc2:	4a79      	ldr	r2, [pc, #484]	; (800aea8 <HAL_RCC_OscConfig+0x6c4>)
 800acc4:	f023 0304 	bic.w	r3, r3, #4
 800acc8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	689b      	ldr	r3, [r3, #8]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d015      	beq.n	800acfe <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800acd2:	f7f9 fa1f 	bl	8004114 <HAL_GetTick>
 800acd6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800acd8:	e00a      	b.n	800acf0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800acda:	f7f9 fa1b 	bl	8004114 <HAL_GetTick>
 800acde:	4602      	mov	r2, r0
 800ace0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace2:	1ad3      	subs	r3, r2, r3
 800ace4:	f241 3288 	movw	r2, #5000	; 0x1388
 800ace8:	4293      	cmp	r3, r2
 800acea:	d901      	bls.n	800acf0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800acec:	2303      	movs	r3, #3
 800acee:	e14b      	b.n	800af88 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800acf0:	4b6d      	ldr	r3, [pc, #436]	; (800aea8 <HAL_RCC_OscConfig+0x6c4>)
 800acf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acf4:	f003 0302 	and.w	r3, r3, #2
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d0ee      	beq.n	800acda <HAL_RCC_OscConfig+0x4f6>
 800acfc:	e014      	b.n	800ad28 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800acfe:	f7f9 fa09 	bl	8004114 <HAL_GetTick>
 800ad02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ad04:	e00a      	b.n	800ad1c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad06:	f7f9 fa05 	bl	8004114 <HAL_GetTick>
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad0e:	1ad3      	subs	r3, r2, r3
 800ad10:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d901      	bls.n	800ad1c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800ad18:	2303      	movs	r3, #3
 800ad1a:	e135      	b.n	800af88 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ad1c:	4b62      	ldr	r3, [pc, #392]	; (800aea8 <HAL_RCC_OscConfig+0x6c4>)
 800ad1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad20:	f003 0302 	and.w	r3, r3, #2
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d1ee      	bne.n	800ad06 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	f000 812a 	beq.w	800af86 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ad32:	4b5d      	ldr	r3, [pc, #372]	; (800aea8 <HAL_RCC_OscConfig+0x6c4>)
 800ad34:	691b      	ldr	r3, [r3, #16]
 800ad36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ad3a:	2b18      	cmp	r3, #24
 800ad3c:	f000 80ba 	beq.w	800aeb4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad44:	2b02      	cmp	r3, #2
 800ad46:	f040 8095 	bne.w	800ae74 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ad4a:	4b57      	ldr	r3, [pc, #348]	; (800aea8 <HAL_RCC_OscConfig+0x6c4>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4a56      	ldr	r2, [pc, #344]	; (800aea8 <HAL_RCC_OscConfig+0x6c4>)
 800ad50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ad54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad56:	f7f9 f9dd 	bl	8004114 <HAL_GetTick>
 800ad5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ad5c:	e008      	b.n	800ad70 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad5e:	f7f9 f9d9 	bl	8004114 <HAL_GetTick>
 800ad62:	4602      	mov	r2, r0
 800ad64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad66:	1ad3      	subs	r3, r2, r3
 800ad68:	2b02      	cmp	r3, #2
 800ad6a:	d901      	bls.n	800ad70 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800ad6c:	2303      	movs	r3, #3
 800ad6e:	e10b      	b.n	800af88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ad70:	4b4d      	ldr	r3, [pc, #308]	; (800aea8 <HAL_RCC_OscConfig+0x6c4>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d1f0      	bne.n	800ad5e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ad7c:	4b4a      	ldr	r3, [pc, #296]	; (800aea8 <HAL_RCC_OscConfig+0x6c4>)
 800ad7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ad80:	4b4a      	ldr	r3, [pc, #296]	; (800aeac <HAL_RCC_OscConfig+0x6c8>)
 800ad82:	4013      	ands	r3, r2
 800ad84:	687a      	ldr	r2, [r7, #4]
 800ad86:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800ad88:	687a      	ldr	r2, [r7, #4]
 800ad8a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ad8c:	0112      	lsls	r2, r2, #4
 800ad8e:	430a      	orrs	r2, r1
 800ad90:	4945      	ldr	r1, [pc, #276]	; (800aea8 <HAL_RCC_OscConfig+0x6c4>)
 800ad92:	4313      	orrs	r3, r2
 800ad94:	628b      	str	r3, [r1, #40]	; 0x28
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad9a:	3b01      	subs	r3, #1
 800ad9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ada4:	3b01      	subs	r3, #1
 800ada6:	025b      	lsls	r3, r3, #9
 800ada8:	b29b      	uxth	r3, r3
 800adaa:	431a      	orrs	r2, r3
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adb0:	3b01      	subs	r3, #1
 800adb2:	041b      	lsls	r3, r3, #16
 800adb4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800adb8:	431a      	orrs	r2, r3
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adbe:	3b01      	subs	r3, #1
 800adc0:	061b      	lsls	r3, r3, #24
 800adc2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800adc6:	4938      	ldr	r1, [pc, #224]	; (800aea8 <HAL_RCC_OscConfig+0x6c4>)
 800adc8:	4313      	orrs	r3, r2
 800adca:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800adcc:	4b36      	ldr	r3, [pc, #216]	; (800aea8 <HAL_RCC_OscConfig+0x6c4>)
 800adce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add0:	4a35      	ldr	r2, [pc, #212]	; (800aea8 <HAL_RCC_OscConfig+0x6c4>)
 800add2:	f023 0301 	bic.w	r3, r3, #1
 800add6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800add8:	4b33      	ldr	r3, [pc, #204]	; (800aea8 <HAL_RCC_OscConfig+0x6c4>)
 800adda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800addc:	4b34      	ldr	r3, [pc, #208]	; (800aeb0 <HAL_RCC_OscConfig+0x6cc>)
 800adde:	4013      	ands	r3, r2
 800ade0:	687a      	ldr	r2, [r7, #4]
 800ade2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ade4:	00d2      	lsls	r2, r2, #3
 800ade6:	4930      	ldr	r1, [pc, #192]	; (800aea8 <HAL_RCC_OscConfig+0x6c4>)
 800ade8:	4313      	orrs	r3, r2
 800adea:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800adec:	4b2e      	ldr	r3, [pc, #184]	; (800aea8 <HAL_RCC_OscConfig+0x6c4>)
 800adee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adf0:	f023 020c 	bic.w	r2, r3, #12
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adf8:	492b      	ldr	r1, [pc, #172]	; (800aea8 <HAL_RCC_OscConfig+0x6c4>)
 800adfa:	4313      	orrs	r3, r2
 800adfc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800adfe:	4b2a      	ldr	r3, [pc, #168]	; (800aea8 <HAL_RCC_OscConfig+0x6c4>)
 800ae00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae02:	f023 0202 	bic.w	r2, r3, #2
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae0a:	4927      	ldr	r1, [pc, #156]	; (800aea8 <HAL_RCC_OscConfig+0x6c4>)
 800ae0c:	4313      	orrs	r3, r2
 800ae0e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ae10:	4b25      	ldr	r3, [pc, #148]	; (800aea8 <HAL_RCC_OscConfig+0x6c4>)
 800ae12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae14:	4a24      	ldr	r2, [pc, #144]	; (800aea8 <HAL_RCC_OscConfig+0x6c4>)
 800ae16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae1c:	4b22      	ldr	r3, [pc, #136]	; (800aea8 <HAL_RCC_OscConfig+0x6c4>)
 800ae1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae20:	4a21      	ldr	r2, [pc, #132]	; (800aea8 <HAL_RCC_OscConfig+0x6c4>)
 800ae22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ae28:	4b1f      	ldr	r3, [pc, #124]	; (800aea8 <HAL_RCC_OscConfig+0x6c4>)
 800ae2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae2c:	4a1e      	ldr	r2, [pc, #120]	; (800aea8 <HAL_RCC_OscConfig+0x6c4>)
 800ae2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ae32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800ae34:	4b1c      	ldr	r3, [pc, #112]	; (800aea8 <HAL_RCC_OscConfig+0x6c4>)
 800ae36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae38:	4a1b      	ldr	r2, [pc, #108]	; (800aea8 <HAL_RCC_OscConfig+0x6c4>)
 800ae3a:	f043 0301 	orr.w	r3, r3, #1
 800ae3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ae40:	4b19      	ldr	r3, [pc, #100]	; (800aea8 <HAL_RCC_OscConfig+0x6c4>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	4a18      	ldr	r2, [pc, #96]	; (800aea8 <HAL_RCC_OscConfig+0x6c4>)
 800ae46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ae4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae4c:	f7f9 f962 	bl	8004114 <HAL_GetTick>
 800ae50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ae52:	e008      	b.n	800ae66 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae54:	f7f9 f95e 	bl	8004114 <HAL_GetTick>
 800ae58:	4602      	mov	r2, r0
 800ae5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae5c:	1ad3      	subs	r3, r2, r3
 800ae5e:	2b02      	cmp	r3, #2
 800ae60:	d901      	bls.n	800ae66 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800ae62:	2303      	movs	r3, #3
 800ae64:	e090      	b.n	800af88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ae66:	4b10      	ldr	r3, [pc, #64]	; (800aea8 <HAL_RCC_OscConfig+0x6c4>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d0f0      	beq.n	800ae54 <HAL_RCC_OscConfig+0x670>
 800ae72:	e088      	b.n	800af86 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ae74:	4b0c      	ldr	r3, [pc, #48]	; (800aea8 <HAL_RCC_OscConfig+0x6c4>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	4a0b      	ldr	r2, [pc, #44]	; (800aea8 <HAL_RCC_OscConfig+0x6c4>)
 800ae7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ae7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae80:	f7f9 f948 	bl	8004114 <HAL_GetTick>
 800ae84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ae86:	e008      	b.n	800ae9a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae88:	f7f9 f944 	bl	8004114 <HAL_GetTick>
 800ae8c:	4602      	mov	r2, r0
 800ae8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae90:	1ad3      	subs	r3, r2, r3
 800ae92:	2b02      	cmp	r3, #2
 800ae94:	d901      	bls.n	800ae9a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800ae96:	2303      	movs	r3, #3
 800ae98:	e076      	b.n	800af88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ae9a:	4b03      	ldr	r3, [pc, #12]	; (800aea8 <HAL_RCC_OscConfig+0x6c4>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d1f0      	bne.n	800ae88 <HAL_RCC_OscConfig+0x6a4>
 800aea6:	e06e      	b.n	800af86 <HAL_RCC_OscConfig+0x7a2>
 800aea8:	58024400 	.word	0x58024400
 800aeac:	fffffc0c 	.word	0xfffffc0c
 800aeb0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800aeb4:	4b36      	ldr	r3, [pc, #216]	; (800af90 <HAL_RCC_OscConfig+0x7ac>)
 800aeb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeb8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800aeba:	4b35      	ldr	r3, [pc, #212]	; (800af90 <HAL_RCC_OscConfig+0x7ac>)
 800aebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aebe:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d031      	beq.n	800af2c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	f003 0203 	and.w	r2, r3, #3
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aed2:	429a      	cmp	r2, r3
 800aed4:	d12a      	bne.n	800af2c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	091b      	lsrs	r3, r3, #4
 800aeda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aee2:	429a      	cmp	r2, r3
 800aee4:	d122      	bne.n	800af2c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aef0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d11a      	bne.n	800af2c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	0a5b      	lsrs	r3, r3, #9
 800aefa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af02:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800af04:	429a      	cmp	r2, r3
 800af06:	d111      	bne.n	800af2c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	0c1b      	lsrs	r3, r3, #16
 800af0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af14:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800af16:	429a      	cmp	r2, r3
 800af18:	d108      	bne.n	800af2c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	0e1b      	lsrs	r3, r3, #24
 800af1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af26:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800af28:	429a      	cmp	r2, r3
 800af2a:	d001      	beq.n	800af30 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800af2c:	2301      	movs	r3, #1
 800af2e:	e02b      	b.n	800af88 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800af30:	4b17      	ldr	r3, [pc, #92]	; (800af90 <HAL_RCC_OscConfig+0x7ac>)
 800af32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af34:	08db      	lsrs	r3, r3, #3
 800af36:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af3a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af40:	693a      	ldr	r2, [r7, #16]
 800af42:	429a      	cmp	r2, r3
 800af44:	d01f      	beq.n	800af86 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800af46:	4b12      	ldr	r3, [pc, #72]	; (800af90 <HAL_RCC_OscConfig+0x7ac>)
 800af48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af4a:	4a11      	ldr	r2, [pc, #68]	; (800af90 <HAL_RCC_OscConfig+0x7ac>)
 800af4c:	f023 0301 	bic.w	r3, r3, #1
 800af50:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800af52:	f7f9 f8df 	bl	8004114 <HAL_GetTick>
 800af56:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800af58:	bf00      	nop
 800af5a:	f7f9 f8db 	bl	8004114 <HAL_GetTick>
 800af5e:	4602      	mov	r2, r0
 800af60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af62:	4293      	cmp	r3, r2
 800af64:	d0f9      	beq.n	800af5a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800af66:	4b0a      	ldr	r3, [pc, #40]	; (800af90 <HAL_RCC_OscConfig+0x7ac>)
 800af68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af6a:	4b0a      	ldr	r3, [pc, #40]	; (800af94 <HAL_RCC_OscConfig+0x7b0>)
 800af6c:	4013      	ands	r3, r2
 800af6e:	687a      	ldr	r2, [r7, #4]
 800af70:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800af72:	00d2      	lsls	r2, r2, #3
 800af74:	4906      	ldr	r1, [pc, #24]	; (800af90 <HAL_RCC_OscConfig+0x7ac>)
 800af76:	4313      	orrs	r3, r2
 800af78:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800af7a:	4b05      	ldr	r3, [pc, #20]	; (800af90 <HAL_RCC_OscConfig+0x7ac>)
 800af7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af7e:	4a04      	ldr	r2, [pc, #16]	; (800af90 <HAL_RCC_OscConfig+0x7ac>)
 800af80:	f043 0301 	orr.w	r3, r3, #1
 800af84:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800af86:	2300      	movs	r3, #0
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3730      	adds	r7, #48	; 0x30
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}
 800af90:	58024400 	.word	0x58024400
 800af94:	ffff0007 	.word	0xffff0007

0800af98 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b086      	sub	sp, #24
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d101      	bne.n	800afac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800afa8:	2301      	movs	r3, #1
 800afaa:	e19c      	b.n	800b2e6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800afac:	4b8a      	ldr	r3, [pc, #552]	; (800b1d8 <HAL_RCC_ClockConfig+0x240>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f003 030f 	and.w	r3, r3, #15
 800afb4:	683a      	ldr	r2, [r7, #0]
 800afb6:	429a      	cmp	r2, r3
 800afb8:	d910      	bls.n	800afdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800afba:	4b87      	ldr	r3, [pc, #540]	; (800b1d8 <HAL_RCC_ClockConfig+0x240>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f023 020f 	bic.w	r2, r3, #15
 800afc2:	4985      	ldr	r1, [pc, #532]	; (800b1d8 <HAL_RCC_ClockConfig+0x240>)
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	4313      	orrs	r3, r2
 800afc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800afca:	4b83      	ldr	r3, [pc, #524]	; (800b1d8 <HAL_RCC_ClockConfig+0x240>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f003 030f 	and.w	r3, r3, #15
 800afd2:	683a      	ldr	r2, [r7, #0]
 800afd4:	429a      	cmp	r2, r3
 800afd6:	d001      	beq.n	800afdc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800afd8:	2301      	movs	r3, #1
 800afda:	e184      	b.n	800b2e6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f003 0304 	and.w	r3, r3, #4
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d010      	beq.n	800b00a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	691a      	ldr	r2, [r3, #16]
 800afec:	4b7b      	ldr	r3, [pc, #492]	; (800b1dc <HAL_RCC_ClockConfig+0x244>)
 800afee:	699b      	ldr	r3, [r3, #24]
 800aff0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d908      	bls.n	800b00a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800aff8:	4b78      	ldr	r3, [pc, #480]	; (800b1dc <HAL_RCC_ClockConfig+0x244>)
 800affa:	699b      	ldr	r3, [r3, #24]
 800affc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	691b      	ldr	r3, [r3, #16]
 800b004:	4975      	ldr	r1, [pc, #468]	; (800b1dc <HAL_RCC_ClockConfig+0x244>)
 800b006:	4313      	orrs	r3, r2
 800b008:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f003 0308 	and.w	r3, r3, #8
 800b012:	2b00      	cmp	r3, #0
 800b014:	d010      	beq.n	800b038 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	695a      	ldr	r2, [r3, #20]
 800b01a:	4b70      	ldr	r3, [pc, #448]	; (800b1dc <HAL_RCC_ClockConfig+0x244>)
 800b01c:	69db      	ldr	r3, [r3, #28]
 800b01e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b022:	429a      	cmp	r2, r3
 800b024:	d908      	bls.n	800b038 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b026:	4b6d      	ldr	r3, [pc, #436]	; (800b1dc <HAL_RCC_ClockConfig+0x244>)
 800b028:	69db      	ldr	r3, [r3, #28]
 800b02a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	695b      	ldr	r3, [r3, #20]
 800b032:	496a      	ldr	r1, [pc, #424]	; (800b1dc <HAL_RCC_ClockConfig+0x244>)
 800b034:	4313      	orrs	r3, r2
 800b036:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f003 0310 	and.w	r3, r3, #16
 800b040:	2b00      	cmp	r3, #0
 800b042:	d010      	beq.n	800b066 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	699a      	ldr	r2, [r3, #24]
 800b048:	4b64      	ldr	r3, [pc, #400]	; (800b1dc <HAL_RCC_ClockConfig+0x244>)
 800b04a:	69db      	ldr	r3, [r3, #28]
 800b04c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b050:	429a      	cmp	r2, r3
 800b052:	d908      	bls.n	800b066 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b054:	4b61      	ldr	r3, [pc, #388]	; (800b1dc <HAL_RCC_ClockConfig+0x244>)
 800b056:	69db      	ldr	r3, [r3, #28]
 800b058:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	699b      	ldr	r3, [r3, #24]
 800b060:	495e      	ldr	r1, [pc, #376]	; (800b1dc <HAL_RCC_ClockConfig+0x244>)
 800b062:	4313      	orrs	r3, r2
 800b064:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f003 0320 	and.w	r3, r3, #32
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d010      	beq.n	800b094 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	69da      	ldr	r2, [r3, #28]
 800b076:	4b59      	ldr	r3, [pc, #356]	; (800b1dc <HAL_RCC_ClockConfig+0x244>)
 800b078:	6a1b      	ldr	r3, [r3, #32]
 800b07a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b07e:	429a      	cmp	r2, r3
 800b080:	d908      	bls.n	800b094 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b082:	4b56      	ldr	r3, [pc, #344]	; (800b1dc <HAL_RCC_ClockConfig+0x244>)
 800b084:	6a1b      	ldr	r3, [r3, #32]
 800b086:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	69db      	ldr	r3, [r3, #28]
 800b08e:	4953      	ldr	r1, [pc, #332]	; (800b1dc <HAL_RCC_ClockConfig+0x244>)
 800b090:	4313      	orrs	r3, r2
 800b092:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f003 0302 	and.w	r3, r3, #2
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d010      	beq.n	800b0c2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	68da      	ldr	r2, [r3, #12]
 800b0a4:	4b4d      	ldr	r3, [pc, #308]	; (800b1dc <HAL_RCC_ClockConfig+0x244>)
 800b0a6:	699b      	ldr	r3, [r3, #24]
 800b0a8:	f003 030f 	and.w	r3, r3, #15
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	d908      	bls.n	800b0c2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b0b0:	4b4a      	ldr	r3, [pc, #296]	; (800b1dc <HAL_RCC_ClockConfig+0x244>)
 800b0b2:	699b      	ldr	r3, [r3, #24]
 800b0b4:	f023 020f 	bic.w	r2, r3, #15
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	68db      	ldr	r3, [r3, #12]
 800b0bc:	4947      	ldr	r1, [pc, #284]	; (800b1dc <HAL_RCC_ClockConfig+0x244>)
 800b0be:	4313      	orrs	r3, r2
 800b0c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f003 0301 	and.w	r3, r3, #1
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d055      	beq.n	800b17a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b0ce:	4b43      	ldr	r3, [pc, #268]	; (800b1dc <HAL_RCC_ClockConfig+0x244>)
 800b0d0:	699b      	ldr	r3, [r3, #24]
 800b0d2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	689b      	ldr	r3, [r3, #8]
 800b0da:	4940      	ldr	r1, [pc, #256]	; (800b1dc <HAL_RCC_ClockConfig+0x244>)
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	685b      	ldr	r3, [r3, #4]
 800b0e4:	2b02      	cmp	r3, #2
 800b0e6:	d107      	bne.n	800b0f8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b0e8:	4b3c      	ldr	r3, [pc, #240]	; (800b1dc <HAL_RCC_ClockConfig+0x244>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d121      	bne.n	800b138 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	e0f6      	b.n	800b2e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	685b      	ldr	r3, [r3, #4]
 800b0fc:	2b03      	cmp	r3, #3
 800b0fe:	d107      	bne.n	800b110 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b100:	4b36      	ldr	r3, [pc, #216]	; (800b1dc <HAL_RCC_ClockConfig+0x244>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d115      	bne.n	800b138 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b10c:	2301      	movs	r3, #1
 800b10e:	e0ea      	b.n	800b2e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	685b      	ldr	r3, [r3, #4]
 800b114:	2b01      	cmp	r3, #1
 800b116:	d107      	bne.n	800b128 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b118:	4b30      	ldr	r3, [pc, #192]	; (800b1dc <HAL_RCC_ClockConfig+0x244>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b120:	2b00      	cmp	r3, #0
 800b122:	d109      	bne.n	800b138 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b124:	2301      	movs	r3, #1
 800b126:	e0de      	b.n	800b2e6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b128:	4b2c      	ldr	r3, [pc, #176]	; (800b1dc <HAL_RCC_ClockConfig+0x244>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f003 0304 	and.w	r3, r3, #4
 800b130:	2b00      	cmp	r3, #0
 800b132:	d101      	bne.n	800b138 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b134:	2301      	movs	r3, #1
 800b136:	e0d6      	b.n	800b2e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b138:	4b28      	ldr	r3, [pc, #160]	; (800b1dc <HAL_RCC_ClockConfig+0x244>)
 800b13a:	691b      	ldr	r3, [r3, #16]
 800b13c:	f023 0207 	bic.w	r2, r3, #7
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	685b      	ldr	r3, [r3, #4]
 800b144:	4925      	ldr	r1, [pc, #148]	; (800b1dc <HAL_RCC_ClockConfig+0x244>)
 800b146:	4313      	orrs	r3, r2
 800b148:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b14a:	f7f8 ffe3 	bl	8004114 <HAL_GetTick>
 800b14e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b150:	e00a      	b.n	800b168 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b152:	f7f8 ffdf 	bl	8004114 <HAL_GetTick>
 800b156:	4602      	mov	r2, r0
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	1ad3      	subs	r3, r2, r3
 800b15c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b160:	4293      	cmp	r3, r2
 800b162:	d901      	bls.n	800b168 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b164:	2303      	movs	r3, #3
 800b166:	e0be      	b.n	800b2e6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b168:	4b1c      	ldr	r3, [pc, #112]	; (800b1dc <HAL_RCC_ClockConfig+0x244>)
 800b16a:	691b      	ldr	r3, [r3, #16]
 800b16c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	00db      	lsls	r3, r3, #3
 800b176:	429a      	cmp	r2, r3
 800b178:	d1eb      	bne.n	800b152 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f003 0302 	and.w	r3, r3, #2
 800b182:	2b00      	cmp	r3, #0
 800b184:	d010      	beq.n	800b1a8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	68da      	ldr	r2, [r3, #12]
 800b18a:	4b14      	ldr	r3, [pc, #80]	; (800b1dc <HAL_RCC_ClockConfig+0x244>)
 800b18c:	699b      	ldr	r3, [r3, #24]
 800b18e:	f003 030f 	and.w	r3, r3, #15
 800b192:	429a      	cmp	r2, r3
 800b194:	d208      	bcs.n	800b1a8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b196:	4b11      	ldr	r3, [pc, #68]	; (800b1dc <HAL_RCC_ClockConfig+0x244>)
 800b198:	699b      	ldr	r3, [r3, #24]
 800b19a:	f023 020f 	bic.w	r2, r3, #15
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	68db      	ldr	r3, [r3, #12]
 800b1a2:	490e      	ldr	r1, [pc, #56]	; (800b1dc <HAL_RCC_ClockConfig+0x244>)
 800b1a4:	4313      	orrs	r3, r2
 800b1a6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b1a8:	4b0b      	ldr	r3, [pc, #44]	; (800b1d8 <HAL_RCC_ClockConfig+0x240>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f003 030f 	and.w	r3, r3, #15
 800b1b0:	683a      	ldr	r2, [r7, #0]
 800b1b2:	429a      	cmp	r2, r3
 800b1b4:	d214      	bcs.n	800b1e0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b1b6:	4b08      	ldr	r3, [pc, #32]	; (800b1d8 <HAL_RCC_ClockConfig+0x240>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f023 020f 	bic.w	r2, r3, #15
 800b1be:	4906      	ldr	r1, [pc, #24]	; (800b1d8 <HAL_RCC_ClockConfig+0x240>)
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	4313      	orrs	r3, r2
 800b1c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b1c6:	4b04      	ldr	r3, [pc, #16]	; (800b1d8 <HAL_RCC_ClockConfig+0x240>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f003 030f 	and.w	r3, r3, #15
 800b1ce:	683a      	ldr	r2, [r7, #0]
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d005      	beq.n	800b1e0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	e086      	b.n	800b2e6 <HAL_RCC_ClockConfig+0x34e>
 800b1d8:	52002000 	.word	0x52002000
 800b1dc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f003 0304 	and.w	r3, r3, #4
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d010      	beq.n	800b20e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	691a      	ldr	r2, [r3, #16]
 800b1f0:	4b3f      	ldr	r3, [pc, #252]	; (800b2f0 <HAL_RCC_ClockConfig+0x358>)
 800b1f2:	699b      	ldr	r3, [r3, #24]
 800b1f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	d208      	bcs.n	800b20e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b1fc:	4b3c      	ldr	r3, [pc, #240]	; (800b2f0 <HAL_RCC_ClockConfig+0x358>)
 800b1fe:	699b      	ldr	r3, [r3, #24]
 800b200:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	691b      	ldr	r3, [r3, #16]
 800b208:	4939      	ldr	r1, [pc, #228]	; (800b2f0 <HAL_RCC_ClockConfig+0x358>)
 800b20a:	4313      	orrs	r3, r2
 800b20c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f003 0308 	and.w	r3, r3, #8
 800b216:	2b00      	cmp	r3, #0
 800b218:	d010      	beq.n	800b23c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	695a      	ldr	r2, [r3, #20]
 800b21e:	4b34      	ldr	r3, [pc, #208]	; (800b2f0 <HAL_RCC_ClockConfig+0x358>)
 800b220:	69db      	ldr	r3, [r3, #28]
 800b222:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b226:	429a      	cmp	r2, r3
 800b228:	d208      	bcs.n	800b23c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b22a:	4b31      	ldr	r3, [pc, #196]	; (800b2f0 <HAL_RCC_ClockConfig+0x358>)
 800b22c:	69db      	ldr	r3, [r3, #28]
 800b22e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	695b      	ldr	r3, [r3, #20]
 800b236:	492e      	ldr	r1, [pc, #184]	; (800b2f0 <HAL_RCC_ClockConfig+0x358>)
 800b238:	4313      	orrs	r3, r2
 800b23a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f003 0310 	and.w	r3, r3, #16
 800b244:	2b00      	cmp	r3, #0
 800b246:	d010      	beq.n	800b26a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	699a      	ldr	r2, [r3, #24]
 800b24c:	4b28      	ldr	r3, [pc, #160]	; (800b2f0 <HAL_RCC_ClockConfig+0x358>)
 800b24e:	69db      	ldr	r3, [r3, #28]
 800b250:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b254:	429a      	cmp	r2, r3
 800b256:	d208      	bcs.n	800b26a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b258:	4b25      	ldr	r3, [pc, #148]	; (800b2f0 <HAL_RCC_ClockConfig+0x358>)
 800b25a:	69db      	ldr	r3, [r3, #28]
 800b25c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	699b      	ldr	r3, [r3, #24]
 800b264:	4922      	ldr	r1, [pc, #136]	; (800b2f0 <HAL_RCC_ClockConfig+0x358>)
 800b266:	4313      	orrs	r3, r2
 800b268:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f003 0320 	and.w	r3, r3, #32
 800b272:	2b00      	cmp	r3, #0
 800b274:	d010      	beq.n	800b298 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	69da      	ldr	r2, [r3, #28]
 800b27a:	4b1d      	ldr	r3, [pc, #116]	; (800b2f0 <HAL_RCC_ClockConfig+0x358>)
 800b27c:	6a1b      	ldr	r3, [r3, #32]
 800b27e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b282:	429a      	cmp	r2, r3
 800b284:	d208      	bcs.n	800b298 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b286:	4b1a      	ldr	r3, [pc, #104]	; (800b2f0 <HAL_RCC_ClockConfig+0x358>)
 800b288:	6a1b      	ldr	r3, [r3, #32]
 800b28a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	69db      	ldr	r3, [r3, #28]
 800b292:	4917      	ldr	r1, [pc, #92]	; (800b2f0 <HAL_RCC_ClockConfig+0x358>)
 800b294:	4313      	orrs	r3, r2
 800b296:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b298:	f000 f89e 	bl	800b3d8 <HAL_RCC_GetSysClockFreq>
 800b29c:	4602      	mov	r2, r0
 800b29e:	4b14      	ldr	r3, [pc, #80]	; (800b2f0 <HAL_RCC_ClockConfig+0x358>)
 800b2a0:	699b      	ldr	r3, [r3, #24]
 800b2a2:	0a1b      	lsrs	r3, r3, #8
 800b2a4:	f003 030f 	and.w	r3, r3, #15
 800b2a8:	4912      	ldr	r1, [pc, #72]	; (800b2f4 <HAL_RCC_ClockConfig+0x35c>)
 800b2aa:	5ccb      	ldrb	r3, [r1, r3]
 800b2ac:	f003 031f 	and.w	r3, r3, #31
 800b2b0:	fa22 f303 	lsr.w	r3, r2, r3
 800b2b4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b2b6:	4b0e      	ldr	r3, [pc, #56]	; (800b2f0 <HAL_RCC_ClockConfig+0x358>)
 800b2b8:	699b      	ldr	r3, [r3, #24]
 800b2ba:	f003 030f 	and.w	r3, r3, #15
 800b2be:	4a0d      	ldr	r2, [pc, #52]	; (800b2f4 <HAL_RCC_ClockConfig+0x35c>)
 800b2c0:	5cd3      	ldrb	r3, [r2, r3]
 800b2c2:	f003 031f 	and.w	r3, r3, #31
 800b2c6:	693a      	ldr	r2, [r7, #16]
 800b2c8:	fa22 f303 	lsr.w	r3, r2, r3
 800b2cc:	4a0a      	ldr	r2, [pc, #40]	; (800b2f8 <HAL_RCC_ClockConfig+0x360>)
 800b2ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b2d0:	4a0a      	ldr	r2, [pc, #40]	; (800b2fc <HAL_RCC_ClockConfig+0x364>)
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b2d6:	4b0a      	ldr	r3, [pc, #40]	; (800b300 <HAL_RCC_ClockConfig+0x368>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f7f8 fed0 	bl	8004080 <HAL_InitTick>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b2e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3718      	adds	r7, #24
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	58024400 	.word	0x58024400
 800b2f4:	0801ff74 	.word	0x0801ff74
 800b2f8:	24000004 	.word	0x24000004
 800b2fc:	24000000 	.word	0x24000000
 800b300:	24000008 	.word	0x24000008

0800b304 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b08c      	sub	sp, #48	; 0x30
 800b308:	af00      	add	r7, sp, #0
 800b30a:	60f8      	str	r0, [r7, #12]
 800b30c:	60b9      	str	r1, [r7, #8]
 800b30e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d12a      	bne.n	800b36c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800b316:	4b2d      	ldr	r3, [pc, #180]	; (800b3cc <HAL_RCC_MCOConfig+0xc8>)
 800b318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b31c:	4a2b      	ldr	r2, [pc, #172]	; (800b3cc <HAL_RCC_MCOConfig+0xc8>)
 800b31e:	f043 0301 	orr.w	r3, r3, #1
 800b322:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b326:	4b29      	ldr	r3, [pc, #164]	; (800b3cc <HAL_RCC_MCOConfig+0xc8>)
 800b328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b32c:	f003 0301 	and.w	r3, r3, #1
 800b330:	61bb      	str	r3, [r7, #24]
 800b332:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800b334:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b338:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b33a:	2302      	movs	r3, #2
 800b33c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b33e:	2303      	movs	r3, #3
 800b340:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b342:	2300      	movs	r3, #0
 800b344:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b346:	2300      	movs	r3, #0
 800b348:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b34a:	f107 031c 	add.w	r3, r7, #28
 800b34e:	4619      	mov	r1, r3
 800b350:	481f      	ldr	r0, [pc, #124]	; (800b3d0 <HAL_RCC_MCOConfig+0xcc>)
 800b352:	f7fd fc29 	bl	8008ba8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800b356:	4b1d      	ldr	r3, [pc, #116]	; (800b3cc <HAL_RCC_MCOConfig+0xc8>)
 800b358:	691b      	ldr	r3, [r3, #16]
 800b35a:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800b35e:	68b9      	ldr	r1, [r7, #8]
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	430b      	orrs	r3, r1
 800b364:	4919      	ldr	r1, [pc, #100]	; (800b3cc <HAL_RCC_MCOConfig+0xc8>)
 800b366:	4313      	orrs	r3, r2
 800b368:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800b36a:	e02a      	b.n	800b3c2 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800b36c:	4b17      	ldr	r3, [pc, #92]	; (800b3cc <HAL_RCC_MCOConfig+0xc8>)
 800b36e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b372:	4a16      	ldr	r2, [pc, #88]	; (800b3cc <HAL_RCC_MCOConfig+0xc8>)
 800b374:	f043 0304 	orr.w	r3, r3, #4
 800b378:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b37c:	4b13      	ldr	r3, [pc, #76]	; (800b3cc <HAL_RCC_MCOConfig+0xc8>)
 800b37e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b382:	f003 0304 	and.w	r3, r3, #4
 800b386:	617b      	str	r3, [r7, #20]
 800b388:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b38a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b38e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b390:	2302      	movs	r3, #2
 800b392:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b394:	2303      	movs	r3, #3
 800b396:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b398:	2300      	movs	r3, #0
 800b39a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b39c:	2300      	movs	r3, #0
 800b39e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b3a0:	f107 031c 	add.w	r3, r7, #28
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	480b      	ldr	r0, [pc, #44]	; (800b3d4 <HAL_RCC_MCOConfig+0xd0>)
 800b3a8:	f7fd fbfe 	bl	8008ba8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800b3ac:	4b07      	ldr	r3, [pc, #28]	; (800b3cc <HAL_RCC_MCOConfig+0xc8>)
 800b3ae:	691b      	ldr	r3, [r3, #16]
 800b3b0:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	01d9      	lsls	r1, r3, #7
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	430b      	orrs	r3, r1
 800b3bc:	4903      	ldr	r1, [pc, #12]	; (800b3cc <HAL_RCC_MCOConfig+0xc8>)
 800b3be:	4313      	orrs	r3, r2
 800b3c0:	610b      	str	r3, [r1, #16]
}
 800b3c2:	bf00      	nop
 800b3c4:	3730      	adds	r7, #48	; 0x30
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}
 800b3ca:	bf00      	nop
 800b3cc:	58024400 	.word	0x58024400
 800b3d0:	58020000 	.word	0x58020000
 800b3d4:	58020800 	.word	0x58020800

0800b3d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b089      	sub	sp, #36	; 0x24
 800b3dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b3de:	4bb3      	ldr	r3, [pc, #716]	; (800b6ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3e0:	691b      	ldr	r3, [r3, #16]
 800b3e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b3e6:	2b18      	cmp	r3, #24
 800b3e8:	f200 8155 	bhi.w	800b696 <HAL_RCC_GetSysClockFreq+0x2be>
 800b3ec:	a201      	add	r2, pc, #4	; (adr r2, 800b3f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b3ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3f2:	bf00      	nop
 800b3f4:	0800b459 	.word	0x0800b459
 800b3f8:	0800b697 	.word	0x0800b697
 800b3fc:	0800b697 	.word	0x0800b697
 800b400:	0800b697 	.word	0x0800b697
 800b404:	0800b697 	.word	0x0800b697
 800b408:	0800b697 	.word	0x0800b697
 800b40c:	0800b697 	.word	0x0800b697
 800b410:	0800b697 	.word	0x0800b697
 800b414:	0800b47f 	.word	0x0800b47f
 800b418:	0800b697 	.word	0x0800b697
 800b41c:	0800b697 	.word	0x0800b697
 800b420:	0800b697 	.word	0x0800b697
 800b424:	0800b697 	.word	0x0800b697
 800b428:	0800b697 	.word	0x0800b697
 800b42c:	0800b697 	.word	0x0800b697
 800b430:	0800b697 	.word	0x0800b697
 800b434:	0800b485 	.word	0x0800b485
 800b438:	0800b697 	.word	0x0800b697
 800b43c:	0800b697 	.word	0x0800b697
 800b440:	0800b697 	.word	0x0800b697
 800b444:	0800b697 	.word	0x0800b697
 800b448:	0800b697 	.word	0x0800b697
 800b44c:	0800b697 	.word	0x0800b697
 800b450:	0800b697 	.word	0x0800b697
 800b454:	0800b48b 	.word	0x0800b48b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b458:	4b94      	ldr	r3, [pc, #592]	; (800b6ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f003 0320 	and.w	r3, r3, #32
 800b460:	2b00      	cmp	r3, #0
 800b462:	d009      	beq.n	800b478 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b464:	4b91      	ldr	r3, [pc, #580]	; (800b6ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	08db      	lsrs	r3, r3, #3
 800b46a:	f003 0303 	and.w	r3, r3, #3
 800b46e:	4a90      	ldr	r2, [pc, #576]	; (800b6b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b470:	fa22 f303 	lsr.w	r3, r2, r3
 800b474:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b476:	e111      	b.n	800b69c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b478:	4b8d      	ldr	r3, [pc, #564]	; (800b6b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b47a:	61bb      	str	r3, [r7, #24]
      break;
 800b47c:	e10e      	b.n	800b69c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b47e:	4b8d      	ldr	r3, [pc, #564]	; (800b6b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b480:	61bb      	str	r3, [r7, #24]
      break;
 800b482:	e10b      	b.n	800b69c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b484:	4b8c      	ldr	r3, [pc, #560]	; (800b6b8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b486:	61bb      	str	r3, [r7, #24]
      break;
 800b488:	e108      	b.n	800b69c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b48a:	4b88      	ldr	r3, [pc, #544]	; (800b6ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b48c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b48e:	f003 0303 	and.w	r3, r3, #3
 800b492:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b494:	4b85      	ldr	r3, [pc, #532]	; (800b6ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b498:	091b      	lsrs	r3, r3, #4
 800b49a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b49e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b4a0:	4b82      	ldr	r3, [pc, #520]	; (800b6ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4a4:	f003 0301 	and.w	r3, r3, #1
 800b4a8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b4aa:	4b80      	ldr	r3, [pc, #512]	; (800b6ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4ae:	08db      	lsrs	r3, r3, #3
 800b4b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b4b4:	68fa      	ldr	r2, [r7, #12]
 800b4b6:	fb02 f303 	mul.w	r3, r2, r3
 800b4ba:	ee07 3a90 	vmov	s15, r3
 800b4be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4c2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b4c6:	693b      	ldr	r3, [r7, #16]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	f000 80e1 	beq.w	800b690 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b4ce:	697b      	ldr	r3, [r7, #20]
 800b4d0:	2b02      	cmp	r3, #2
 800b4d2:	f000 8083 	beq.w	800b5dc <HAL_RCC_GetSysClockFreq+0x204>
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	2b02      	cmp	r3, #2
 800b4da:	f200 80a1 	bhi.w	800b620 <HAL_RCC_GetSysClockFreq+0x248>
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d003      	beq.n	800b4ec <HAL_RCC_GetSysClockFreq+0x114>
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	2b01      	cmp	r3, #1
 800b4e8:	d056      	beq.n	800b598 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b4ea:	e099      	b.n	800b620 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4ec:	4b6f      	ldr	r3, [pc, #444]	; (800b6ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	f003 0320 	and.w	r3, r3, #32
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d02d      	beq.n	800b554 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4f8:	4b6c      	ldr	r3, [pc, #432]	; (800b6ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	08db      	lsrs	r3, r3, #3
 800b4fe:	f003 0303 	and.w	r3, r3, #3
 800b502:	4a6b      	ldr	r2, [pc, #428]	; (800b6b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b504:	fa22 f303 	lsr.w	r3, r2, r3
 800b508:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	ee07 3a90 	vmov	s15, r3
 800b510:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b514:	693b      	ldr	r3, [r7, #16]
 800b516:	ee07 3a90 	vmov	s15, r3
 800b51a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b51e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b522:	4b62      	ldr	r3, [pc, #392]	; (800b6ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b52a:	ee07 3a90 	vmov	s15, r3
 800b52e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b532:	ed97 6a02 	vldr	s12, [r7, #8]
 800b536:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b6bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b53a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b53e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b542:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b54a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b54e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b552:	e087      	b.n	800b664 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	ee07 3a90 	vmov	s15, r3
 800b55a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b55e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b6c0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b566:	4b51      	ldr	r3, [pc, #324]	; (800b6ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b56a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b56e:	ee07 3a90 	vmov	s15, r3
 800b572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b576:	ed97 6a02 	vldr	s12, [r7, #8]
 800b57a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b6bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b57e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b586:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b58a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b58e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b592:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b596:	e065      	b.n	800b664 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b598:	693b      	ldr	r3, [r7, #16]
 800b59a:	ee07 3a90 	vmov	s15, r3
 800b59e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5a2:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b6c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b5a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5aa:	4b40      	ldr	r3, [pc, #256]	; (800b6ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5b2:	ee07 3a90 	vmov	s15, r3
 800b5b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5ba:	ed97 6a02 	vldr	s12, [r7, #8]
 800b5be:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b6bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b5c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b5da:	e043      	b.n	800b664 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	ee07 3a90 	vmov	s15, r3
 800b5e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5e6:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b6c8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b5ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5ee:	4b2f      	ldr	r3, [pc, #188]	; (800b6ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5f6:	ee07 3a90 	vmov	s15, r3
 800b5fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5fe:	ed97 6a02 	vldr	s12, [r7, #8]
 800b602:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b6bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b60a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b60e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b61a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b61e:	e021      	b.n	800b664 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	ee07 3a90 	vmov	s15, r3
 800b626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b62a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b6c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b62e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b632:	4b1e      	ldr	r3, [pc, #120]	; (800b6ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b63a:	ee07 3a90 	vmov	s15, r3
 800b63e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b642:	ed97 6a02 	vldr	s12, [r7, #8]
 800b646:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b6bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b64a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b64e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b65a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b65e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b662:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b664:	4b11      	ldr	r3, [pc, #68]	; (800b6ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b668:	0a5b      	lsrs	r3, r3, #9
 800b66a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b66e:	3301      	adds	r3, #1
 800b670:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	ee07 3a90 	vmov	s15, r3
 800b678:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b67c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b680:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b684:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b688:	ee17 3a90 	vmov	r3, s15
 800b68c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b68e:	e005      	b.n	800b69c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b690:	2300      	movs	r3, #0
 800b692:	61bb      	str	r3, [r7, #24]
      break;
 800b694:	e002      	b.n	800b69c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b696:	4b07      	ldr	r3, [pc, #28]	; (800b6b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b698:	61bb      	str	r3, [r7, #24]
      break;
 800b69a:	bf00      	nop
  }

  return sysclockfreq;
 800b69c:	69bb      	ldr	r3, [r7, #24]
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3724      	adds	r7, #36	; 0x24
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a8:	4770      	bx	lr
 800b6aa:	bf00      	nop
 800b6ac:	58024400 	.word	0x58024400
 800b6b0:	03d09000 	.word	0x03d09000
 800b6b4:	003d0900 	.word	0x003d0900
 800b6b8:	02faf080 	.word	0x02faf080
 800b6bc:	46000000 	.word	0x46000000
 800b6c0:	4c742400 	.word	0x4c742400
 800b6c4:	4a742400 	.word	0x4a742400
 800b6c8:	4c3ebc20 	.word	0x4c3ebc20

0800b6cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b082      	sub	sp, #8
 800b6d0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b6d2:	f7ff fe81 	bl	800b3d8 <HAL_RCC_GetSysClockFreq>
 800b6d6:	4602      	mov	r2, r0
 800b6d8:	4b10      	ldr	r3, [pc, #64]	; (800b71c <HAL_RCC_GetHCLKFreq+0x50>)
 800b6da:	699b      	ldr	r3, [r3, #24]
 800b6dc:	0a1b      	lsrs	r3, r3, #8
 800b6de:	f003 030f 	and.w	r3, r3, #15
 800b6e2:	490f      	ldr	r1, [pc, #60]	; (800b720 <HAL_RCC_GetHCLKFreq+0x54>)
 800b6e4:	5ccb      	ldrb	r3, [r1, r3]
 800b6e6:	f003 031f 	and.w	r3, r3, #31
 800b6ea:	fa22 f303 	lsr.w	r3, r2, r3
 800b6ee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b6f0:	4b0a      	ldr	r3, [pc, #40]	; (800b71c <HAL_RCC_GetHCLKFreq+0x50>)
 800b6f2:	699b      	ldr	r3, [r3, #24]
 800b6f4:	f003 030f 	and.w	r3, r3, #15
 800b6f8:	4a09      	ldr	r2, [pc, #36]	; (800b720 <HAL_RCC_GetHCLKFreq+0x54>)
 800b6fa:	5cd3      	ldrb	r3, [r2, r3]
 800b6fc:	f003 031f 	and.w	r3, r3, #31
 800b700:	687a      	ldr	r2, [r7, #4]
 800b702:	fa22 f303 	lsr.w	r3, r2, r3
 800b706:	4a07      	ldr	r2, [pc, #28]	; (800b724 <HAL_RCC_GetHCLKFreq+0x58>)
 800b708:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b70a:	4a07      	ldr	r2, [pc, #28]	; (800b728 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b710:	4b04      	ldr	r3, [pc, #16]	; (800b724 <HAL_RCC_GetHCLKFreq+0x58>)
 800b712:	681b      	ldr	r3, [r3, #0]
}
 800b714:	4618      	mov	r0, r3
 800b716:	3708      	adds	r7, #8
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}
 800b71c:	58024400 	.word	0x58024400
 800b720:	0801ff74 	.word	0x0801ff74
 800b724:	24000004 	.word	0x24000004
 800b728:	24000000 	.word	0x24000000

0800b72c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b730:	f7ff ffcc 	bl	800b6cc <HAL_RCC_GetHCLKFreq>
 800b734:	4602      	mov	r2, r0
 800b736:	4b06      	ldr	r3, [pc, #24]	; (800b750 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b738:	69db      	ldr	r3, [r3, #28]
 800b73a:	091b      	lsrs	r3, r3, #4
 800b73c:	f003 0307 	and.w	r3, r3, #7
 800b740:	4904      	ldr	r1, [pc, #16]	; (800b754 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b742:	5ccb      	ldrb	r3, [r1, r3]
 800b744:	f003 031f 	and.w	r3, r3, #31
 800b748:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	bd80      	pop	{r7, pc}
 800b750:	58024400 	.word	0x58024400
 800b754:	0801ff74 	.word	0x0801ff74

0800b758 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b75c:	f7ff ffb6 	bl	800b6cc <HAL_RCC_GetHCLKFreq>
 800b760:	4602      	mov	r2, r0
 800b762:	4b06      	ldr	r3, [pc, #24]	; (800b77c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b764:	69db      	ldr	r3, [r3, #28]
 800b766:	0a1b      	lsrs	r3, r3, #8
 800b768:	f003 0307 	and.w	r3, r3, #7
 800b76c:	4904      	ldr	r1, [pc, #16]	; (800b780 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b76e:	5ccb      	ldrb	r3, [r1, r3]
 800b770:	f003 031f 	and.w	r3, r3, #31
 800b774:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b778:	4618      	mov	r0, r3
 800b77a:	bd80      	pop	{r7, pc}
 800b77c:	58024400 	.word	0x58024400
 800b780:	0801ff74 	.word	0x0801ff74

0800b784 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b788:	b0c6      	sub	sp, #280	; 0x118
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b790:	2300      	movs	r3, #0
 800b792:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b796:	2300      	movs	r3, #0
 800b798:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b79c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b7a8:	2500      	movs	r5, #0
 800b7aa:	ea54 0305 	orrs.w	r3, r4, r5
 800b7ae:	d049      	beq.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b7b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b7ba:	d02f      	beq.n	800b81c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b7bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b7c0:	d828      	bhi.n	800b814 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b7c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b7c6:	d01a      	beq.n	800b7fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b7c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b7cc:	d822      	bhi.n	800b814 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d003      	beq.n	800b7da <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b7d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b7d6:	d007      	beq.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b7d8:	e01c      	b.n	800b814 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7da:	4bab      	ldr	r3, [pc, #684]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b7dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7de:	4aaa      	ldr	r2, [pc, #680]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b7e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b7e6:	e01a      	b.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b7e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7ec:	3308      	adds	r3, #8
 800b7ee:	2102      	movs	r1, #2
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	f002 fa49 	bl	800dc88 <RCCEx_PLL2_Config>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b7fc:	e00f      	b.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b7fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b802:	3328      	adds	r3, #40	; 0x28
 800b804:	2102      	movs	r1, #2
 800b806:	4618      	mov	r0, r3
 800b808:	f002 faf0 	bl	800ddec <RCCEx_PLL3_Config>
 800b80c:	4603      	mov	r3, r0
 800b80e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b812:	e004      	b.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b814:	2301      	movs	r3, #1
 800b816:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b81a:	e000      	b.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b81c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b81e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b822:	2b00      	cmp	r3, #0
 800b824:	d10a      	bne.n	800b83c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b826:	4b98      	ldr	r3, [pc, #608]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b82a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b82e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b832:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b834:	4a94      	ldr	r2, [pc, #592]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b836:	430b      	orrs	r3, r1
 800b838:	6513      	str	r3, [r2, #80]	; 0x50
 800b83a:	e003      	b.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b83c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b840:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b844:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b850:	f04f 0900 	mov.w	r9, #0
 800b854:	ea58 0309 	orrs.w	r3, r8, r9
 800b858:	d047      	beq.n	800b8ea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b85a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b85e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b860:	2b04      	cmp	r3, #4
 800b862:	d82a      	bhi.n	800b8ba <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b864:	a201      	add	r2, pc, #4	; (adr r2, 800b86c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b86a:	bf00      	nop
 800b86c:	0800b881 	.word	0x0800b881
 800b870:	0800b88f 	.word	0x0800b88f
 800b874:	0800b8a5 	.word	0x0800b8a5
 800b878:	0800b8c3 	.word	0x0800b8c3
 800b87c:	0800b8c3 	.word	0x0800b8c3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b880:	4b81      	ldr	r3, [pc, #516]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b884:	4a80      	ldr	r2, [pc, #512]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b88a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b88c:	e01a      	b.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b88e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b892:	3308      	adds	r3, #8
 800b894:	2100      	movs	r1, #0
 800b896:	4618      	mov	r0, r3
 800b898:	f002 f9f6 	bl	800dc88 <RCCEx_PLL2_Config>
 800b89c:	4603      	mov	r3, r0
 800b89e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b8a2:	e00f      	b.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b8a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8a8:	3328      	adds	r3, #40	; 0x28
 800b8aa:	2100      	movs	r1, #0
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f002 fa9d 	bl	800ddec <RCCEx_PLL3_Config>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b8b8:	e004      	b.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b8c0:	e000      	b.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b8c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d10a      	bne.n	800b8e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b8cc:	4b6e      	ldr	r3, [pc, #440]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b8ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8d0:	f023 0107 	bic.w	r1, r3, #7
 800b8d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8da:	4a6b      	ldr	r2, [pc, #428]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b8dc:	430b      	orrs	r3, r1
 800b8de:	6513      	str	r3, [r2, #80]	; 0x50
 800b8e0:	e003      	b.n	800b8ea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8e2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8e6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b8ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f2:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800b8f6:	f04f 0b00 	mov.w	fp, #0
 800b8fa:	ea5a 030b 	orrs.w	r3, sl, fp
 800b8fe:	d05b      	beq.n	800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b900:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b904:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b908:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800b90c:	d03b      	beq.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800b90e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800b912:	d834      	bhi.n	800b97e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b914:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b918:	d037      	beq.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b91a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b91e:	d82e      	bhi.n	800b97e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b920:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b924:	d033      	beq.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800b926:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b92a:	d828      	bhi.n	800b97e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b92c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b930:	d01a      	beq.n	800b968 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800b932:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b936:	d822      	bhi.n	800b97e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d003      	beq.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800b93c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b940:	d007      	beq.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800b942:	e01c      	b.n	800b97e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b944:	4b50      	ldr	r3, [pc, #320]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b948:	4a4f      	ldr	r2, [pc, #316]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b94a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b94e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b950:	e01e      	b.n	800b990 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b952:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b956:	3308      	adds	r3, #8
 800b958:	2100      	movs	r1, #0
 800b95a:	4618      	mov	r0, r3
 800b95c:	f002 f994 	bl	800dc88 <RCCEx_PLL2_Config>
 800b960:	4603      	mov	r3, r0
 800b962:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b966:	e013      	b.n	800b990 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b96c:	3328      	adds	r3, #40	; 0x28
 800b96e:	2100      	movs	r1, #0
 800b970:	4618      	mov	r0, r3
 800b972:	f002 fa3b 	bl	800ddec <RCCEx_PLL3_Config>
 800b976:	4603      	mov	r3, r0
 800b978:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b97c:	e008      	b.n	800b990 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b97e:	2301      	movs	r3, #1
 800b980:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b984:	e004      	b.n	800b990 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b986:	bf00      	nop
 800b988:	e002      	b.n	800b990 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b98a:	bf00      	nop
 800b98c:	e000      	b.n	800b990 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b98e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b990:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b994:	2b00      	cmp	r3, #0
 800b996:	d10b      	bne.n	800b9b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b998:	4b3b      	ldr	r3, [pc, #236]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b99a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b99c:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b9a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b9a8:	4a37      	ldr	r2, [pc, #220]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b9aa:	430b      	orrs	r3, r1
 800b9ac:	6593      	str	r3, [r2, #88]	; 0x58
 800b9ae:	e003      	b.n	800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9b4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b9b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b9c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b9ce:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b9d2:	460b      	mov	r3, r1
 800b9d4:	4313      	orrs	r3, r2
 800b9d6:	d05d      	beq.n	800ba94 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b9d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b9e0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800b9e4:	d03b      	beq.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800b9e6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800b9ea:	d834      	bhi.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b9ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b9f0:	d037      	beq.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800b9f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b9f6:	d82e      	bhi.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b9f8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b9fc:	d033      	beq.n	800ba66 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800b9fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ba02:	d828      	bhi.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ba04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba08:	d01a      	beq.n	800ba40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800ba0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba0e:	d822      	bhi.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d003      	beq.n	800ba1c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800ba14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ba18:	d007      	beq.n	800ba2a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800ba1a:	e01c      	b.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba1c:	4b1a      	ldr	r3, [pc, #104]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba20:	4a19      	ldr	r2, [pc, #100]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ba28:	e01e      	b.n	800ba68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba2e:	3308      	adds	r3, #8
 800ba30:	2100      	movs	r1, #0
 800ba32:	4618      	mov	r0, r3
 800ba34:	f002 f928 	bl	800dc88 <RCCEx_PLL2_Config>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ba3e:	e013      	b.n	800ba68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ba40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba44:	3328      	adds	r3, #40	; 0x28
 800ba46:	2100      	movs	r1, #0
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f002 f9cf 	bl	800ddec <RCCEx_PLL3_Config>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ba54:	e008      	b.n	800ba68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ba56:	2301      	movs	r3, #1
 800ba58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ba5c:	e004      	b.n	800ba68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ba5e:	bf00      	nop
 800ba60:	e002      	b.n	800ba68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ba62:	bf00      	nop
 800ba64:	e000      	b.n	800ba68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ba66:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d10d      	bne.n	800ba8c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ba70:	4b05      	ldr	r3, [pc, #20]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba74:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800ba78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba7c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ba80:	4a01      	ldr	r2, [pc, #4]	; (800ba88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba82:	430b      	orrs	r3, r1
 800ba84:	6593      	str	r3, [r2, #88]	; 0x58
 800ba86:	e005      	b.n	800ba94 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800ba88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba8c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba90:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800ba94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba9c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800baa0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800baa4:	2300      	movs	r3, #0
 800baa6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800baaa:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800baae:	460b      	mov	r3, r1
 800bab0:	4313      	orrs	r3, r2
 800bab2:	d03a      	beq.n	800bb2a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800bab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800baba:	2b30      	cmp	r3, #48	; 0x30
 800babc:	d01f      	beq.n	800bafe <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800babe:	2b30      	cmp	r3, #48	; 0x30
 800bac0:	d819      	bhi.n	800baf6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800bac2:	2b20      	cmp	r3, #32
 800bac4:	d00c      	beq.n	800bae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800bac6:	2b20      	cmp	r3, #32
 800bac8:	d815      	bhi.n	800baf6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d019      	beq.n	800bb02 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800bace:	2b10      	cmp	r3, #16
 800bad0:	d111      	bne.n	800baf6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bad2:	4baa      	ldr	r3, [pc, #680]	; (800bd7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bad6:	4aa9      	ldr	r2, [pc, #676]	; (800bd7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800badc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800bade:	e011      	b.n	800bb04 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bae4:	3308      	adds	r3, #8
 800bae6:	2102      	movs	r1, #2
 800bae8:	4618      	mov	r0, r3
 800baea:	f002 f8cd 	bl	800dc88 <RCCEx_PLL2_Config>
 800baee:	4603      	mov	r3, r0
 800baf0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800baf4:	e006      	b.n	800bb04 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800baf6:	2301      	movs	r3, #1
 800baf8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bafc:	e002      	b.n	800bb04 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800bafe:	bf00      	nop
 800bb00:	e000      	b.n	800bb04 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800bb02:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d10a      	bne.n	800bb22 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800bb0c:	4b9b      	ldr	r3, [pc, #620]	; (800bd7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb10:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800bb14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb1a:	4a98      	ldr	r2, [pc, #608]	; (800bd7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb1c:	430b      	orrs	r3, r1
 800bb1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bb20:	e003      	b.n	800bb2a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb22:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb26:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bb2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb32:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800bb36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bb40:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800bb44:	460b      	mov	r3, r1
 800bb46:	4313      	orrs	r3, r2
 800bb48:	d051      	beq.n	800bbee <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800bb4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bb54:	d035      	beq.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800bb56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bb5a:	d82e      	bhi.n	800bbba <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bb5c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bb60:	d031      	beq.n	800bbc6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800bb62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bb66:	d828      	bhi.n	800bbba <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bb68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb6c:	d01a      	beq.n	800bba4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800bb6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb72:	d822      	bhi.n	800bbba <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d003      	beq.n	800bb80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800bb78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb7c:	d007      	beq.n	800bb8e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800bb7e:	e01c      	b.n	800bbba <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb80:	4b7e      	ldr	r3, [pc, #504]	; (800bd7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb84:	4a7d      	ldr	r2, [pc, #500]	; (800bd7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bb8c:	e01c      	b.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb92:	3308      	adds	r3, #8
 800bb94:	2100      	movs	r1, #0
 800bb96:	4618      	mov	r0, r3
 800bb98:	f002 f876 	bl	800dc88 <RCCEx_PLL2_Config>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bba2:	e011      	b.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bba8:	3328      	adds	r3, #40	; 0x28
 800bbaa:	2100      	movs	r1, #0
 800bbac:	4618      	mov	r0, r3
 800bbae:	f002 f91d 	bl	800ddec <RCCEx_PLL3_Config>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bbb8:	e006      	b.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bbba:	2301      	movs	r3, #1
 800bbbc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bbc0:	e002      	b.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800bbc2:	bf00      	nop
 800bbc4:	e000      	b.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800bbc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbc8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d10a      	bne.n	800bbe6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bbd0:	4b6a      	ldr	r3, [pc, #424]	; (800bd7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bbd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbd4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800bbd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbde:	4a67      	ldr	r2, [pc, #412]	; (800bd7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bbe0:	430b      	orrs	r3, r1
 800bbe2:	6513      	str	r3, [r2, #80]	; 0x50
 800bbe4:	e003      	b.n	800bbee <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbe6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbea:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bbee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800bbfa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bbfe:	2300      	movs	r3, #0
 800bc00:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bc04:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800bc08:	460b      	mov	r3, r1
 800bc0a:	4313      	orrs	r3, r2
 800bc0c:	d053      	beq.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800bc0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bc18:	d033      	beq.n	800bc82 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800bc1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bc1e:	d82c      	bhi.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bc20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bc24:	d02f      	beq.n	800bc86 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800bc26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bc2a:	d826      	bhi.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bc2c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bc30:	d02b      	beq.n	800bc8a <HAL_RCCEx_PeriphCLKConfig+0x506>
 800bc32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bc36:	d820      	bhi.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bc38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc3c:	d012      	beq.n	800bc64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800bc3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc42:	d81a      	bhi.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d022      	beq.n	800bc8e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800bc48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc4c:	d115      	bne.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc52:	3308      	adds	r3, #8
 800bc54:	2101      	movs	r1, #1
 800bc56:	4618      	mov	r0, r3
 800bc58:	f002 f816 	bl	800dc88 <RCCEx_PLL2_Config>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bc62:	e015      	b.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bc64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc68:	3328      	adds	r3, #40	; 0x28
 800bc6a:	2101      	movs	r1, #1
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f002 f8bd 	bl	800ddec <RCCEx_PLL3_Config>
 800bc72:	4603      	mov	r3, r0
 800bc74:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bc78:	e00a      	b.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bc80:	e006      	b.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bc82:	bf00      	nop
 800bc84:	e004      	b.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bc86:	bf00      	nop
 800bc88:	e002      	b.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bc8a:	bf00      	nop
 800bc8c:	e000      	b.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bc8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d10a      	bne.n	800bcae <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bc98:	4b38      	ldr	r3, [pc, #224]	; (800bd7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc9c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800bca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bca6:	4a35      	ldr	r2, [pc, #212]	; (800bd7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bca8:	430b      	orrs	r3, r1
 800bcaa:	6513      	str	r3, [r2, #80]	; 0x50
 800bcac:	e003      	b.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bcb2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bcb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcbe:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800bcc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bccc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bcd0:	460b      	mov	r3, r1
 800bcd2:	4313      	orrs	r3, r2
 800bcd4:	d058      	beq.n	800bd88 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800bcd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcda:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bcde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bce2:	d033      	beq.n	800bd4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800bce4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bce8:	d82c      	bhi.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bcea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcee:	d02f      	beq.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800bcf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcf4:	d826      	bhi.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bcf6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bcfa:	d02b      	beq.n	800bd54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800bcfc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bd00:	d820      	bhi.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bd02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd06:	d012      	beq.n	800bd2e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800bd08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd0c:	d81a      	bhi.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d022      	beq.n	800bd58 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800bd12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd16:	d115      	bne.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bd18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd1c:	3308      	adds	r3, #8
 800bd1e:	2101      	movs	r1, #1
 800bd20:	4618      	mov	r0, r3
 800bd22:	f001 ffb1 	bl	800dc88 <RCCEx_PLL2_Config>
 800bd26:	4603      	mov	r3, r0
 800bd28:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bd2c:	e015      	b.n	800bd5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bd2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd32:	3328      	adds	r3, #40	; 0x28
 800bd34:	2101      	movs	r1, #1
 800bd36:	4618      	mov	r0, r3
 800bd38:	f002 f858 	bl	800ddec <RCCEx_PLL3_Config>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bd42:	e00a      	b.n	800bd5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800bd44:	2301      	movs	r3, #1
 800bd46:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bd4a:	e006      	b.n	800bd5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bd4c:	bf00      	nop
 800bd4e:	e004      	b.n	800bd5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bd50:	bf00      	nop
 800bd52:	e002      	b.n	800bd5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bd54:	bf00      	nop
 800bd56:	e000      	b.n	800bd5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bd58:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd5a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d10e      	bne.n	800bd80 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bd62:	4b06      	ldr	r3, [pc, #24]	; (800bd7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd66:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bd6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bd72:	4a02      	ldr	r2, [pc, #8]	; (800bd7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd74:	430b      	orrs	r3, r1
 800bd76:	6593      	str	r3, [r2, #88]	; 0x58
 800bd78:	e006      	b.n	800bd88 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800bd7a:	bf00      	nop
 800bd7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd80:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd84:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bd88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd90:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800bd94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bd98:	2300      	movs	r3, #0
 800bd9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bd9e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800bda2:	460b      	mov	r3, r1
 800bda4:	4313      	orrs	r3, r2
 800bda6:	d037      	beq.n	800be18 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800bda8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bdb2:	d00e      	beq.n	800bdd2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800bdb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bdb8:	d816      	bhi.n	800bde8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d018      	beq.n	800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800bdbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bdc2:	d111      	bne.n	800bde8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bdc4:	4bc4      	ldr	r3, [pc, #784]	; (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdc8:	4ac3      	ldr	r2, [pc, #780]	; (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bdce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bdd0:	e00f      	b.n	800bdf2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bdd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdd6:	3308      	adds	r3, #8
 800bdd8:	2101      	movs	r1, #1
 800bdda:	4618      	mov	r0, r3
 800bddc:	f001 ff54 	bl	800dc88 <RCCEx_PLL2_Config>
 800bde0:	4603      	mov	r3, r0
 800bde2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bde6:	e004      	b.n	800bdf2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bde8:	2301      	movs	r3, #1
 800bdea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bdee:	e000      	b.n	800bdf2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800bdf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bdf2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d10a      	bne.n	800be10 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bdfa:	4bb7      	ldr	r3, [pc, #732]	; (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdfe:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800be02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be08:	4ab3      	ldr	r2, [pc, #716]	; (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be0a:	430b      	orrs	r3, r1
 800be0c:	6513      	str	r3, [r2, #80]	; 0x50
 800be0e:	e003      	b.n	800be18 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be10:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be14:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800be18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be20:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800be24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800be28:	2300      	movs	r3, #0
 800be2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800be2e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800be32:	460b      	mov	r3, r1
 800be34:	4313      	orrs	r3, r2
 800be36:	d039      	beq.n	800beac <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800be38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be3e:	2b03      	cmp	r3, #3
 800be40:	d81c      	bhi.n	800be7c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800be42:	a201      	add	r2, pc, #4	; (adr r2, 800be48 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800be44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be48:	0800be85 	.word	0x0800be85
 800be4c:	0800be59 	.word	0x0800be59
 800be50:	0800be67 	.word	0x0800be67
 800be54:	0800be85 	.word	0x0800be85
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be58:	4b9f      	ldr	r3, [pc, #636]	; (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be5c:	4a9e      	ldr	r2, [pc, #632]	; (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800be64:	e00f      	b.n	800be86 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800be66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be6a:	3308      	adds	r3, #8
 800be6c:	2102      	movs	r1, #2
 800be6e:	4618      	mov	r0, r3
 800be70:	f001 ff0a 	bl	800dc88 <RCCEx_PLL2_Config>
 800be74:	4603      	mov	r3, r0
 800be76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800be7a:	e004      	b.n	800be86 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800be7c:	2301      	movs	r3, #1
 800be7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800be82:	e000      	b.n	800be86 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800be84:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be86:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d10a      	bne.n	800bea4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800be8e:	4b92      	ldr	r3, [pc, #584]	; (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be92:	f023 0103 	bic.w	r1, r3, #3
 800be96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be9c:	4a8e      	ldr	r2, [pc, #568]	; (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be9e:	430b      	orrs	r3, r1
 800bea0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bea2:	e003      	b.n	800beac <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bea4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bea8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800beac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800beb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800beb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bebc:	2300      	movs	r3, #0
 800bebe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bec2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bec6:	460b      	mov	r3, r1
 800bec8:	4313      	orrs	r3, r2
 800beca:	f000 8099 	beq.w	800c000 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bece:	4b83      	ldr	r3, [pc, #524]	; (800c0dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	4a82      	ldr	r2, [pc, #520]	; (800c0dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bed8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800beda:	f7f8 f91b 	bl	8004114 <HAL_GetTick>
 800bede:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bee2:	e00b      	b.n	800befc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bee4:	f7f8 f916 	bl	8004114 <HAL_GetTick>
 800bee8:	4602      	mov	r2, r0
 800beea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800beee:	1ad3      	subs	r3, r2, r3
 800bef0:	2b64      	cmp	r3, #100	; 0x64
 800bef2:	d903      	bls.n	800befc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800bef4:	2303      	movs	r3, #3
 800bef6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800befa:	e005      	b.n	800bf08 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800befc:	4b77      	ldr	r3, [pc, #476]	; (800c0dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d0ed      	beq.n	800bee4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800bf08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d173      	bne.n	800bff8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bf10:	4b71      	ldr	r3, [pc, #452]	; (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bf14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bf1c:	4053      	eors	r3, r2
 800bf1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d015      	beq.n	800bf52 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bf26:	4b6c      	ldr	r3, [pc, #432]	; (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf2e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bf32:	4b69      	ldr	r3, [pc, #420]	; (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf36:	4a68      	ldr	r2, [pc, #416]	; (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bf3c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bf3e:	4b66      	ldr	r3, [pc, #408]	; (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf42:	4a65      	ldr	r2, [pc, #404]	; (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bf48:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bf4a:	4a63      	ldr	r2, [pc, #396]	; (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf50:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bf52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bf5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf5e:	d118      	bne.n	800bf92 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf60:	f7f8 f8d8 	bl	8004114 <HAL_GetTick>
 800bf64:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bf68:	e00d      	b.n	800bf86 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bf6a:	f7f8 f8d3 	bl	8004114 <HAL_GetTick>
 800bf6e:	4602      	mov	r2, r0
 800bf70:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800bf74:	1ad2      	subs	r2, r2, r3
 800bf76:	f241 3388 	movw	r3, #5000	; 0x1388
 800bf7a:	429a      	cmp	r2, r3
 800bf7c:	d903      	bls.n	800bf86 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800bf7e:	2303      	movs	r3, #3
 800bf80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800bf84:	e005      	b.n	800bf92 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bf86:	4b54      	ldr	r3, [pc, #336]	; (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf8a:	f003 0302 	and.w	r3, r3, #2
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d0eb      	beq.n	800bf6a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800bf92:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d129      	bne.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bf9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bfa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bfa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bfaa:	d10e      	bne.n	800bfca <HAL_RCCEx_PeriphCLKConfig+0x846>
 800bfac:	4b4a      	ldr	r3, [pc, #296]	; (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfae:	691b      	ldr	r3, [r3, #16]
 800bfb0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800bfb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bfbc:	091a      	lsrs	r2, r3, #4
 800bfbe:	4b48      	ldr	r3, [pc, #288]	; (800c0e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800bfc0:	4013      	ands	r3, r2
 800bfc2:	4a45      	ldr	r2, [pc, #276]	; (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfc4:	430b      	orrs	r3, r1
 800bfc6:	6113      	str	r3, [r2, #16]
 800bfc8:	e005      	b.n	800bfd6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800bfca:	4b43      	ldr	r3, [pc, #268]	; (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfcc:	691b      	ldr	r3, [r3, #16]
 800bfce:	4a42      	ldr	r2, [pc, #264]	; (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfd0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bfd4:	6113      	str	r3, [r2, #16]
 800bfd6:	4b40      	ldr	r3, [pc, #256]	; (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfd8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800bfda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfde:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bfe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bfe6:	4a3c      	ldr	r2, [pc, #240]	; (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfe8:	430b      	orrs	r3, r1
 800bfea:	6713      	str	r3, [r2, #112]	; 0x70
 800bfec:	e008      	b.n	800c000 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bfee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bff2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800bff6:	e003      	b.n	800c000 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bff8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bffc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c000:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c008:	f002 0301 	and.w	r3, r2, #1
 800c00c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c010:	2300      	movs	r3, #0
 800c012:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c016:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800c01a:	460b      	mov	r3, r1
 800c01c:	4313      	orrs	r3, r2
 800c01e:	f000 808f 	beq.w	800c140 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800c022:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c026:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c028:	2b28      	cmp	r3, #40	; 0x28
 800c02a:	d871      	bhi.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800c02c:	a201      	add	r2, pc, #4	; (adr r2, 800c034 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800c02e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c032:	bf00      	nop
 800c034:	0800c119 	.word	0x0800c119
 800c038:	0800c111 	.word	0x0800c111
 800c03c:	0800c111 	.word	0x0800c111
 800c040:	0800c111 	.word	0x0800c111
 800c044:	0800c111 	.word	0x0800c111
 800c048:	0800c111 	.word	0x0800c111
 800c04c:	0800c111 	.word	0x0800c111
 800c050:	0800c111 	.word	0x0800c111
 800c054:	0800c0e5 	.word	0x0800c0e5
 800c058:	0800c111 	.word	0x0800c111
 800c05c:	0800c111 	.word	0x0800c111
 800c060:	0800c111 	.word	0x0800c111
 800c064:	0800c111 	.word	0x0800c111
 800c068:	0800c111 	.word	0x0800c111
 800c06c:	0800c111 	.word	0x0800c111
 800c070:	0800c111 	.word	0x0800c111
 800c074:	0800c0fb 	.word	0x0800c0fb
 800c078:	0800c111 	.word	0x0800c111
 800c07c:	0800c111 	.word	0x0800c111
 800c080:	0800c111 	.word	0x0800c111
 800c084:	0800c111 	.word	0x0800c111
 800c088:	0800c111 	.word	0x0800c111
 800c08c:	0800c111 	.word	0x0800c111
 800c090:	0800c111 	.word	0x0800c111
 800c094:	0800c119 	.word	0x0800c119
 800c098:	0800c111 	.word	0x0800c111
 800c09c:	0800c111 	.word	0x0800c111
 800c0a0:	0800c111 	.word	0x0800c111
 800c0a4:	0800c111 	.word	0x0800c111
 800c0a8:	0800c111 	.word	0x0800c111
 800c0ac:	0800c111 	.word	0x0800c111
 800c0b0:	0800c111 	.word	0x0800c111
 800c0b4:	0800c119 	.word	0x0800c119
 800c0b8:	0800c111 	.word	0x0800c111
 800c0bc:	0800c111 	.word	0x0800c111
 800c0c0:	0800c111 	.word	0x0800c111
 800c0c4:	0800c111 	.word	0x0800c111
 800c0c8:	0800c111 	.word	0x0800c111
 800c0cc:	0800c111 	.word	0x0800c111
 800c0d0:	0800c111 	.word	0x0800c111
 800c0d4:	0800c119 	.word	0x0800c119
 800c0d8:	58024400 	.word	0x58024400
 800c0dc:	58024800 	.word	0x58024800
 800c0e0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c0e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0e8:	3308      	adds	r3, #8
 800c0ea:	2101      	movs	r1, #1
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f001 fdcb 	bl	800dc88 <RCCEx_PLL2_Config>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c0f8:	e00f      	b.n	800c11a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c0fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0fe:	3328      	adds	r3, #40	; 0x28
 800c100:	2101      	movs	r1, #1
 800c102:	4618      	mov	r0, r3
 800c104:	f001 fe72 	bl	800ddec <RCCEx_PLL3_Config>
 800c108:	4603      	mov	r3, r0
 800c10a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c10e:	e004      	b.n	800c11a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c110:	2301      	movs	r3, #1
 800c112:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c116:	e000      	b.n	800c11a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800c118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c11a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d10a      	bne.n	800c138 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c122:	4bbf      	ldr	r3, [pc, #764]	; (800c420 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c126:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800c12a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c12e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c130:	4abb      	ldr	r2, [pc, #748]	; (800c420 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c132:	430b      	orrs	r3, r1
 800c134:	6553      	str	r3, [r2, #84]	; 0x54
 800c136:	e003      	b.n	800c140 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c138:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c13c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c140:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c148:	f002 0302 	and.w	r3, r2, #2
 800c14c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c150:	2300      	movs	r3, #0
 800c152:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c156:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800c15a:	460b      	mov	r3, r1
 800c15c:	4313      	orrs	r3, r2
 800c15e:	d041      	beq.n	800c1e4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c160:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c166:	2b05      	cmp	r3, #5
 800c168:	d824      	bhi.n	800c1b4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800c16a:	a201      	add	r2, pc, #4	; (adr r2, 800c170 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800c16c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c170:	0800c1bd 	.word	0x0800c1bd
 800c174:	0800c189 	.word	0x0800c189
 800c178:	0800c19f 	.word	0x0800c19f
 800c17c:	0800c1bd 	.word	0x0800c1bd
 800c180:	0800c1bd 	.word	0x0800c1bd
 800c184:	0800c1bd 	.word	0x0800c1bd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c188:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c18c:	3308      	adds	r3, #8
 800c18e:	2101      	movs	r1, #1
 800c190:	4618      	mov	r0, r3
 800c192:	f001 fd79 	bl	800dc88 <RCCEx_PLL2_Config>
 800c196:	4603      	mov	r3, r0
 800c198:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c19c:	e00f      	b.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c19e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1a2:	3328      	adds	r3, #40	; 0x28
 800c1a4:	2101      	movs	r1, #1
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f001 fe20 	bl	800ddec <RCCEx_PLL3_Config>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c1b2:	e004      	b.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c1ba:	e000      	b.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800c1bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d10a      	bne.n	800c1dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c1c6:	4b96      	ldr	r3, [pc, #600]	; (800c420 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c1c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1ca:	f023 0107 	bic.w	r1, r3, #7
 800c1ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1d4:	4a92      	ldr	r2, [pc, #584]	; (800c420 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c1d6:	430b      	orrs	r3, r1
 800c1d8:	6553      	str	r3, [r2, #84]	; 0x54
 800c1da:	e003      	b.n	800c1e4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c1e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c1e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ec:	f002 0304 	and.w	r3, r2, #4
 800c1f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c1fa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c1fe:	460b      	mov	r3, r1
 800c200:	4313      	orrs	r3, r2
 800c202:	d044      	beq.n	800c28e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c20c:	2b05      	cmp	r3, #5
 800c20e:	d825      	bhi.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800c210:	a201      	add	r2, pc, #4	; (adr r2, 800c218 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800c212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c216:	bf00      	nop
 800c218:	0800c265 	.word	0x0800c265
 800c21c:	0800c231 	.word	0x0800c231
 800c220:	0800c247 	.word	0x0800c247
 800c224:	0800c265 	.word	0x0800c265
 800c228:	0800c265 	.word	0x0800c265
 800c22c:	0800c265 	.word	0x0800c265
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c230:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c234:	3308      	adds	r3, #8
 800c236:	2101      	movs	r1, #1
 800c238:	4618      	mov	r0, r3
 800c23a:	f001 fd25 	bl	800dc88 <RCCEx_PLL2_Config>
 800c23e:	4603      	mov	r3, r0
 800c240:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c244:	e00f      	b.n	800c266 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c246:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c24a:	3328      	adds	r3, #40	; 0x28
 800c24c:	2101      	movs	r1, #1
 800c24e:	4618      	mov	r0, r3
 800c250:	f001 fdcc 	bl	800ddec <RCCEx_PLL3_Config>
 800c254:	4603      	mov	r3, r0
 800c256:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c25a:	e004      	b.n	800c266 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c25c:	2301      	movs	r3, #1
 800c25e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c262:	e000      	b.n	800c266 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800c264:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c266:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d10b      	bne.n	800c286 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c26e:	4b6c      	ldr	r3, [pc, #432]	; (800c420 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c272:	f023 0107 	bic.w	r1, r3, #7
 800c276:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c27a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c27e:	4a68      	ldr	r2, [pc, #416]	; (800c420 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c280:	430b      	orrs	r3, r1
 800c282:	6593      	str	r3, [r2, #88]	; 0x58
 800c284:	e003      	b.n	800c28e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c286:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c28a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c28e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c296:	f002 0320 	and.w	r3, r2, #32
 800c29a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c29e:	2300      	movs	r3, #0
 800c2a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c2a4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800c2a8:	460b      	mov	r3, r1
 800c2aa:	4313      	orrs	r3, r2
 800c2ac:	d055      	beq.n	800c35a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c2ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c2ba:	d033      	beq.n	800c324 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800c2bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c2c0:	d82c      	bhi.n	800c31c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c2c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2c6:	d02f      	beq.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c2c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2cc:	d826      	bhi.n	800c31c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c2ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c2d2:	d02b      	beq.n	800c32c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c2d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c2d8:	d820      	bhi.n	800c31c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c2da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2de:	d012      	beq.n	800c306 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800c2e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2e4:	d81a      	bhi.n	800c31c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d022      	beq.n	800c330 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c2ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c2ee:	d115      	bne.n	800c31c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c2f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2f4:	3308      	adds	r3, #8
 800c2f6:	2100      	movs	r1, #0
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f001 fcc5 	bl	800dc88 <RCCEx_PLL2_Config>
 800c2fe:	4603      	mov	r3, r0
 800c300:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c304:	e015      	b.n	800c332 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c306:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c30a:	3328      	adds	r3, #40	; 0x28
 800c30c:	2102      	movs	r1, #2
 800c30e:	4618      	mov	r0, r3
 800c310:	f001 fd6c 	bl	800ddec <RCCEx_PLL3_Config>
 800c314:	4603      	mov	r3, r0
 800c316:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c31a:	e00a      	b.n	800c332 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c31c:	2301      	movs	r3, #1
 800c31e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c322:	e006      	b.n	800c332 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c324:	bf00      	nop
 800c326:	e004      	b.n	800c332 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c328:	bf00      	nop
 800c32a:	e002      	b.n	800c332 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c32c:	bf00      	nop
 800c32e:	e000      	b.n	800c332 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c330:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c332:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c336:	2b00      	cmp	r3, #0
 800c338:	d10b      	bne.n	800c352 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c33a:	4b39      	ldr	r3, [pc, #228]	; (800c420 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c33c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c33e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800c342:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c346:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c34a:	4a35      	ldr	r2, [pc, #212]	; (800c420 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c34c:	430b      	orrs	r3, r1
 800c34e:	6553      	str	r3, [r2, #84]	; 0x54
 800c350:	e003      	b.n	800c35a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c352:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c356:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c35a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c362:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800c366:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c36a:	2300      	movs	r3, #0
 800c36c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c370:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800c374:	460b      	mov	r3, r1
 800c376:	4313      	orrs	r3, r2
 800c378:	d058      	beq.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c37a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c37e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c382:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c386:	d033      	beq.n	800c3f0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800c388:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c38c:	d82c      	bhi.n	800c3e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c38e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c392:	d02f      	beq.n	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c398:	d826      	bhi.n	800c3e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c39a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c39e:	d02b      	beq.n	800c3f8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c3a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c3a4:	d820      	bhi.n	800c3e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c3a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c3aa:	d012      	beq.n	800c3d2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800c3ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c3b0:	d81a      	bhi.n	800c3e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d022      	beq.n	800c3fc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c3b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c3ba:	d115      	bne.n	800c3e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c3bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3c0:	3308      	adds	r3, #8
 800c3c2:	2100      	movs	r1, #0
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f001 fc5f 	bl	800dc88 <RCCEx_PLL2_Config>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c3d0:	e015      	b.n	800c3fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c3d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3d6:	3328      	adds	r3, #40	; 0x28
 800c3d8:	2102      	movs	r1, #2
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f001 fd06 	bl	800ddec <RCCEx_PLL3_Config>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c3e6:	e00a      	b.n	800c3fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c3ee:	e006      	b.n	800c3fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c3f0:	bf00      	nop
 800c3f2:	e004      	b.n	800c3fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c3f4:	bf00      	nop
 800c3f6:	e002      	b.n	800c3fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c3f8:	bf00      	nop
 800c3fa:	e000      	b.n	800c3fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c3fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c3fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c402:	2b00      	cmp	r3, #0
 800c404:	d10e      	bne.n	800c424 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c406:	4b06      	ldr	r3, [pc, #24]	; (800c420 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c40a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800c40e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c412:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c416:	4a02      	ldr	r2, [pc, #8]	; (800c420 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c418:	430b      	orrs	r3, r1
 800c41a:	6593      	str	r3, [r2, #88]	; 0x58
 800c41c:	e006      	b.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800c41e:	bf00      	nop
 800c420:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c424:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c428:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c42c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c434:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800c438:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c43c:	2300      	movs	r3, #0
 800c43e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c442:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800c446:	460b      	mov	r3, r1
 800c448:	4313      	orrs	r3, r2
 800c44a:	d055      	beq.n	800c4f8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c44c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c450:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c454:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c458:	d033      	beq.n	800c4c2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800c45a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c45e:	d82c      	bhi.n	800c4ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c464:	d02f      	beq.n	800c4c6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c46a:	d826      	bhi.n	800c4ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c46c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c470:	d02b      	beq.n	800c4ca <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c472:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c476:	d820      	bhi.n	800c4ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c478:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c47c:	d012      	beq.n	800c4a4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800c47e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c482:	d81a      	bhi.n	800c4ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c484:	2b00      	cmp	r3, #0
 800c486:	d022      	beq.n	800c4ce <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c488:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c48c:	d115      	bne.n	800c4ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c48e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c492:	3308      	adds	r3, #8
 800c494:	2100      	movs	r1, #0
 800c496:	4618      	mov	r0, r3
 800c498:	f001 fbf6 	bl	800dc88 <RCCEx_PLL2_Config>
 800c49c:	4603      	mov	r3, r0
 800c49e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c4a2:	e015      	b.n	800c4d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c4a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4a8:	3328      	adds	r3, #40	; 0x28
 800c4aa:	2102      	movs	r1, #2
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f001 fc9d 	bl	800ddec <RCCEx_PLL3_Config>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c4b8:	e00a      	b.n	800c4d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c4c0:	e006      	b.n	800c4d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c4c2:	bf00      	nop
 800c4c4:	e004      	b.n	800c4d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c4c6:	bf00      	nop
 800c4c8:	e002      	b.n	800c4d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c4ca:	bf00      	nop
 800c4cc:	e000      	b.n	800c4d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c4ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c4d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d10b      	bne.n	800c4f0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c4d8:	4ba0      	ldr	r3, [pc, #640]	; (800c75c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c4da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4dc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800c4e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c4e8:	4a9c      	ldr	r2, [pc, #624]	; (800c75c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c4ea:	430b      	orrs	r3, r1
 800c4ec:	6593      	str	r3, [r2, #88]	; 0x58
 800c4ee:	e003      	b.n	800c4f8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c4f4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800c4f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c500:	f002 0308 	and.w	r3, r2, #8
 800c504:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c508:	2300      	movs	r3, #0
 800c50a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c50e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c512:	460b      	mov	r3, r1
 800c514:	4313      	orrs	r3, r2
 800c516:	d01e      	beq.n	800c556 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800c518:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c51c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c524:	d10c      	bne.n	800c540 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c526:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c52a:	3328      	adds	r3, #40	; 0x28
 800c52c:	2102      	movs	r1, #2
 800c52e:	4618      	mov	r0, r3
 800c530:	f001 fc5c 	bl	800ddec <RCCEx_PLL3_Config>
 800c534:	4603      	mov	r3, r0
 800c536:	2b00      	cmp	r3, #0
 800c538:	d002      	beq.n	800c540 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800c53a:	2301      	movs	r3, #1
 800c53c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800c540:	4b86      	ldr	r3, [pc, #536]	; (800c75c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c544:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c548:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c54c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c550:	4a82      	ldr	r2, [pc, #520]	; (800c75c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c552:	430b      	orrs	r3, r1
 800c554:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c556:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c55e:	f002 0310 	and.w	r3, r2, #16
 800c562:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c566:	2300      	movs	r3, #0
 800c568:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c56c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c570:	460b      	mov	r3, r1
 800c572:	4313      	orrs	r3, r2
 800c574:	d01e      	beq.n	800c5b4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c576:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c57a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c57e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c582:	d10c      	bne.n	800c59e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c584:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c588:	3328      	adds	r3, #40	; 0x28
 800c58a:	2102      	movs	r1, #2
 800c58c:	4618      	mov	r0, r3
 800c58e:	f001 fc2d 	bl	800ddec <RCCEx_PLL3_Config>
 800c592:	4603      	mov	r3, r0
 800c594:	2b00      	cmp	r3, #0
 800c596:	d002      	beq.n	800c59e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800c598:	2301      	movs	r3, #1
 800c59a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c59e:	4b6f      	ldr	r3, [pc, #444]	; (800c75c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c5a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c5a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c5ae:	4a6b      	ldr	r2, [pc, #428]	; (800c75c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c5b0:	430b      	orrs	r3, r1
 800c5b2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c5b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5bc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c5c0:	67bb      	str	r3, [r7, #120]	; 0x78
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c5c6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c5ca:	460b      	mov	r3, r1
 800c5cc:	4313      	orrs	r3, r2
 800c5ce:	d03e      	beq.n	800c64e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c5d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c5d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5dc:	d022      	beq.n	800c624 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c5de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5e2:	d81b      	bhi.n	800c61c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d003      	beq.n	800c5f0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800c5e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5ec:	d00b      	beq.n	800c606 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800c5ee:	e015      	b.n	800c61c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c5f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5f4:	3308      	adds	r3, #8
 800c5f6:	2100      	movs	r1, #0
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f001 fb45 	bl	800dc88 <RCCEx_PLL2_Config>
 800c5fe:	4603      	mov	r3, r0
 800c600:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c604:	e00f      	b.n	800c626 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c606:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c60a:	3328      	adds	r3, #40	; 0x28
 800c60c:	2102      	movs	r1, #2
 800c60e:	4618      	mov	r0, r3
 800c610:	f001 fbec 	bl	800ddec <RCCEx_PLL3_Config>
 800c614:	4603      	mov	r3, r0
 800c616:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c61a:	e004      	b.n	800c626 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c61c:	2301      	movs	r3, #1
 800c61e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c622:	e000      	b.n	800c626 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800c624:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c626:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d10b      	bne.n	800c646 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c62e:	4b4b      	ldr	r3, [pc, #300]	; (800c75c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c632:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c636:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c63a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c63e:	4a47      	ldr	r2, [pc, #284]	; (800c75c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c640:	430b      	orrs	r3, r1
 800c642:	6593      	str	r3, [r2, #88]	; 0x58
 800c644:	e003      	b.n	800c64e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c646:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c64a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c64e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c656:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c65a:	673b      	str	r3, [r7, #112]	; 0x70
 800c65c:	2300      	movs	r3, #0
 800c65e:	677b      	str	r3, [r7, #116]	; 0x74
 800c660:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c664:	460b      	mov	r3, r1
 800c666:	4313      	orrs	r3, r2
 800c668:	d03b      	beq.n	800c6e2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c66a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c66e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c672:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c676:	d01f      	beq.n	800c6b8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c678:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c67c:	d818      	bhi.n	800c6b0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800c67e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c682:	d003      	beq.n	800c68c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800c684:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c688:	d007      	beq.n	800c69a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800c68a:	e011      	b.n	800c6b0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c68c:	4b33      	ldr	r3, [pc, #204]	; (800c75c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c68e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c690:	4a32      	ldr	r2, [pc, #200]	; (800c75c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c696:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c698:	e00f      	b.n	800c6ba <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c69a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c69e:	3328      	adds	r3, #40	; 0x28
 800c6a0:	2101      	movs	r1, #1
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f001 fba2 	bl	800ddec <RCCEx_PLL3_Config>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800c6ae:	e004      	b.n	800c6ba <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c6b6:	e000      	b.n	800c6ba <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800c6b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c6ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d10b      	bne.n	800c6da <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c6c2:	4b26      	ldr	r3, [pc, #152]	; (800c75c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c6c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6c6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c6ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6d2:	4a22      	ldr	r2, [pc, #136]	; (800c75c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c6d4:	430b      	orrs	r3, r1
 800c6d6:	6553      	str	r3, [r2, #84]	; 0x54
 800c6d8:	e003      	b.n	800c6e2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c6de:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c6e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ea:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c6ee:	66bb      	str	r3, [r7, #104]	; 0x68
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c6f4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c6f8:	460b      	mov	r3, r1
 800c6fa:	4313      	orrs	r3, r2
 800c6fc:	d034      	beq.n	800c768 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c6fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c704:	2b00      	cmp	r3, #0
 800c706:	d003      	beq.n	800c710 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800c708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c70c:	d007      	beq.n	800c71e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800c70e:	e011      	b.n	800c734 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c710:	4b12      	ldr	r3, [pc, #72]	; (800c75c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c714:	4a11      	ldr	r2, [pc, #68]	; (800c75c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c71a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c71c:	e00e      	b.n	800c73c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c71e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c722:	3308      	adds	r3, #8
 800c724:	2102      	movs	r1, #2
 800c726:	4618      	mov	r0, r3
 800c728:	f001 faae 	bl	800dc88 <RCCEx_PLL2_Config>
 800c72c:	4603      	mov	r3, r0
 800c72e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c732:	e003      	b.n	800c73c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800c734:	2301      	movs	r3, #1
 800c736:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c73a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c73c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c740:	2b00      	cmp	r3, #0
 800c742:	d10d      	bne.n	800c760 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c744:	4b05      	ldr	r3, [pc, #20]	; (800c75c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c748:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c74c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c752:	4a02      	ldr	r2, [pc, #8]	; (800c75c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c754:	430b      	orrs	r3, r1
 800c756:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c758:	e006      	b.n	800c768 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800c75a:	bf00      	nop
 800c75c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c760:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c764:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c768:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c770:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c774:	663b      	str	r3, [r7, #96]	; 0x60
 800c776:	2300      	movs	r3, #0
 800c778:	667b      	str	r3, [r7, #100]	; 0x64
 800c77a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c77e:	460b      	mov	r3, r1
 800c780:	4313      	orrs	r3, r2
 800c782:	d00c      	beq.n	800c79e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c788:	3328      	adds	r3, #40	; 0x28
 800c78a:	2102      	movs	r1, #2
 800c78c:	4618      	mov	r0, r3
 800c78e:	f001 fb2d 	bl	800ddec <RCCEx_PLL3_Config>
 800c792:	4603      	mov	r3, r0
 800c794:	2b00      	cmp	r3, #0
 800c796:	d002      	beq.n	800c79e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800c798:	2301      	movs	r3, #1
 800c79a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c79e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c7aa:	65bb      	str	r3, [r7, #88]	; 0x58
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c7b0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c7b4:	460b      	mov	r3, r1
 800c7b6:	4313      	orrs	r3, r2
 800c7b8:	d036      	beq.n	800c828 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c7ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c7c4:	d018      	beq.n	800c7f8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800c7c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c7ca:	d811      	bhi.n	800c7f0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c7cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7d0:	d014      	beq.n	800c7fc <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800c7d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7d6:	d80b      	bhi.n	800c7f0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d011      	beq.n	800c800 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800c7dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7e0:	d106      	bne.n	800c7f0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c7e2:	4bb7      	ldr	r3, [pc, #732]	; (800cac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c7e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7e6:	4ab6      	ldr	r2, [pc, #728]	; (800cac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c7e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c7ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c7ee:	e008      	b.n	800c802 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c7f0:	2301      	movs	r3, #1
 800c7f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c7f6:	e004      	b.n	800c802 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c7f8:	bf00      	nop
 800c7fa:	e002      	b.n	800c802 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c7fc:	bf00      	nop
 800c7fe:	e000      	b.n	800c802 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c800:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c802:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c806:	2b00      	cmp	r3, #0
 800c808:	d10a      	bne.n	800c820 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c80a:	4bad      	ldr	r3, [pc, #692]	; (800cac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c80c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c80e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c812:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c816:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c818:	4aa9      	ldr	r2, [pc, #676]	; (800cac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c81a:	430b      	orrs	r3, r1
 800c81c:	6553      	str	r3, [r2, #84]	; 0x54
 800c81e:	e003      	b.n	800c828 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c820:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c824:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c830:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c834:	653b      	str	r3, [r7, #80]	; 0x50
 800c836:	2300      	movs	r3, #0
 800c838:	657b      	str	r3, [r7, #84]	; 0x54
 800c83a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c83e:	460b      	mov	r3, r1
 800c840:	4313      	orrs	r3, r2
 800c842:	d009      	beq.n	800c858 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c844:	4b9e      	ldr	r3, [pc, #632]	; (800cac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c848:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c84c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c852:	4a9b      	ldr	r2, [pc, #620]	; (800cac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c854:	430b      	orrs	r3, r1
 800c856:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c858:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c860:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c864:	64bb      	str	r3, [r7, #72]	; 0x48
 800c866:	2300      	movs	r3, #0
 800c868:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c86a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c86e:	460b      	mov	r3, r1
 800c870:	4313      	orrs	r3, r2
 800c872:	d009      	beq.n	800c888 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c874:	4b92      	ldr	r3, [pc, #584]	; (800cac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c878:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c87c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c880:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c882:	4a8f      	ldr	r2, [pc, #572]	; (800cac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c884:	430b      	orrs	r3, r1
 800c886:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c888:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c890:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c894:	643b      	str	r3, [r7, #64]	; 0x40
 800c896:	2300      	movs	r3, #0
 800c898:	647b      	str	r3, [r7, #68]	; 0x44
 800c89a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c89e:	460b      	mov	r3, r1
 800c8a0:	4313      	orrs	r3, r2
 800c8a2:	d00e      	beq.n	800c8c2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c8a4:	4b86      	ldr	r3, [pc, #536]	; (800cac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c8a6:	691b      	ldr	r3, [r3, #16]
 800c8a8:	4a85      	ldr	r2, [pc, #532]	; (800cac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c8aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c8ae:	6113      	str	r3, [r2, #16]
 800c8b0:	4b83      	ldr	r3, [pc, #524]	; (800cac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c8b2:	6919      	ldr	r1, [r3, #16]
 800c8b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c8bc:	4a80      	ldr	r2, [pc, #512]	; (800cac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c8be:	430b      	orrs	r3, r1
 800c8c0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c8c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ca:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c8ce:	63bb      	str	r3, [r7, #56]	; 0x38
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8d4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c8d8:	460b      	mov	r3, r1
 800c8da:	4313      	orrs	r3, r2
 800c8dc:	d009      	beq.n	800c8f2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c8de:	4b78      	ldr	r3, [pc, #480]	; (800cac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c8e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8e2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c8e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8ec:	4a74      	ldr	r2, [pc, #464]	; (800cac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c8ee:	430b      	orrs	r3, r1
 800c8f0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c8f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8fa:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c8fe:	633b      	str	r3, [r7, #48]	; 0x30
 800c900:	2300      	movs	r3, #0
 800c902:	637b      	str	r3, [r7, #52]	; 0x34
 800c904:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c908:	460b      	mov	r3, r1
 800c90a:	4313      	orrs	r3, r2
 800c90c:	d00a      	beq.n	800c924 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c90e:	4b6c      	ldr	r3, [pc, #432]	; (800cac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c912:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c916:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c91a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c91e:	4a68      	ldr	r2, [pc, #416]	; (800cac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c920:	430b      	orrs	r3, r1
 800c922:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c924:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c92c:	2100      	movs	r1, #0
 800c92e:	62b9      	str	r1, [r7, #40]	; 0x28
 800c930:	f003 0301 	and.w	r3, r3, #1
 800c934:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c936:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c93a:	460b      	mov	r3, r1
 800c93c:	4313      	orrs	r3, r2
 800c93e:	d011      	beq.n	800c964 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c940:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c944:	3308      	adds	r3, #8
 800c946:	2100      	movs	r1, #0
 800c948:	4618      	mov	r0, r3
 800c94a:	f001 f99d 	bl	800dc88 <RCCEx_PLL2_Config>
 800c94e:	4603      	mov	r3, r0
 800c950:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c954:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d003      	beq.n	800c964 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c95c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c960:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c964:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c96c:	2100      	movs	r1, #0
 800c96e:	6239      	str	r1, [r7, #32]
 800c970:	f003 0302 	and.w	r3, r3, #2
 800c974:	627b      	str	r3, [r7, #36]	; 0x24
 800c976:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c97a:	460b      	mov	r3, r1
 800c97c:	4313      	orrs	r3, r2
 800c97e:	d011      	beq.n	800c9a4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c980:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c984:	3308      	adds	r3, #8
 800c986:	2101      	movs	r1, #1
 800c988:	4618      	mov	r0, r3
 800c98a:	f001 f97d 	bl	800dc88 <RCCEx_PLL2_Config>
 800c98e:	4603      	mov	r3, r0
 800c990:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c994:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d003      	beq.n	800c9a4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c99c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c9a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c9a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ac:	2100      	movs	r1, #0
 800c9ae:	61b9      	str	r1, [r7, #24]
 800c9b0:	f003 0304 	and.w	r3, r3, #4
 800c9b4:	61fb      	str	r3, [r7, #28]
 800c9b6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c9ba:	460b      	mov	r3, r1
 800c9bc:	4313      	orrs	r3, r2
 800c9be:	d011      	beq.n	800c9e4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c9c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9c4:	3308      	adds	r3, #8
 800c9c6:	2102      	movs	r1, #2
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f001 f95d 	bl	800dc88 <RCCEx_PLL2_Config>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c9d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d003      	beq.n	800c9e4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c9e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c9e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ec:	2100      	movs	r1, #0
 800c9ee:	6139      	str	r1, [r7, #16]
 800c9f0:	f003 0308 	and.w	r3, r3, #8
 800c9f4:	617b      	str	r3, [r7, #20]
 800c9f6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c9fa:	460b      	mov	r3, r1
 800c9fc:	4313      	orrs	r3, r2
 800c9fe:	d011      	beq.n	800ca24 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ca00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca04:	3328      	adds	r3, #40	; 0x28
 800ca06:	2100      	movs	r1, #0
 800ca08:	4618      	mov	r0, r3
 800ca0a:	f001 f9ef 	bl	800ddec <RCCEx_PLL3_Config>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800ca14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d003      	beq.n	800ca24 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca1c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ca20:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ca24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca2c:	2100      	movs	r1, #0
 800ca2e:	60b9      	str	r1, [r7, #8]
 800ca30:	f003 0310 	and.w	r3, r3, #16
 800ca34:	60fb      	str	r3, [r7, #12]
 800ca36:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ca3a:	460b      	mov	r3, r1
 800ca3c:	4313      	orrs	r3, r2
 800ca3e:	d011      	beq.n	800ca64 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ca40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca44:	3328      	adds	r3, #40	; 0x28
 800ca46:	2101      	movs	r1, #1
 800ca48:	4618      	mov	r0, r3
 800ca4a:	f001 f9cf 	bl	800ddec <RCCEx_PLL3_Config>
 800ca4e:	4603      	mov	r3, r0
 800ca50:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ca54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d003      	beq.n	800ca64 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ca60:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ca64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca6c:	2100      	movs	r1, #0
 800ca6e:	6039      	str	r1, [r7, #0]
 800ca70:	f003 0320 	and.w	r3, r3, #32
 800ca74:	607b      	str	r3, [r7, #4]
 800ca76:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ca7a:	460b      	mov	r3, r1
 800ca7c:	4313      	orrs	r3, r2
 800ca7e:	d011      	beq.n	800caa4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ca80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca84:	3328      	adds	r3, #40	; 0x28
 800ca86:	2102      	movs	r1, #2
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f001 f9af 	bl	800ddec <RCCEx_PLL3_Config>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ca94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d003      	beq.n	800caa4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800caa0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800caa4:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d101      	bne.n	800cab0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800caac:	2300      	movs	r3, #0
 800caae:	e000      	b.n	800cab2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800cab0:	2301      	movs	r3, #1
}
 800cab2:	4618      	mov	r0, r3
 800cab4:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800cab8:	46bd      	mov	sp, r7
 800caba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cabe:	bf00      	nop
 800cac0:	58024400 	.word	0x58024400

0800cac4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b090      	sub	sp, #64	; 0x40
 800cac8:	af00      	add	r7, sp, #0
 800caca:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800cace:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cad2:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800cad6:	430b      	orrs	r3, r1
 800cad8:	f040 8094 	bne.w	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800cadc:	4b9b      	ldr	r3, [pc, #620]	; (800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cae0:	f003 0307 	and.w	r3, r3, #7
 800cae4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800cae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae8:	2b04      	cmp	r3, #4
 800caea:	f200 8087 	bhi.w	800cbfc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800caee:	a201      	add	r2, pc, #4	; (adr r2, 800caf4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800caf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caf4:	0800cb09 	.word	0x0800cb09
 800caf8:	0800cb31 	.word	0x0800cb31
 800cafc:	0800cb59 	.word	0x0800cb59
 800cb00:	0800cbf5 	.word	0x0800cbf5
 800cb04:	0800cb81 	.word	0x0800cb81
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cb08:	4b90      	ldr	r3, [pc, #576]	; (800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cb14:	d108      	bne.n	800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cb16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f000 ff62 	bl	800d9e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cb20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb24:	f000 bc93 	b.w	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb2c:	f000 bc8f 	b.w	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cb30:	4b86      	ldr	r3, [pc, #536]	; (800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb3c:	d108      	bne.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb3e:	f107 0318 	add.w	r3, r7, #24
 800cb42:	4618      	mov	r0, r3
 800cb44:	f000 fca6 	bl	800d494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cb48:	69bb      	ldr	r3, [r7, #24]
 800cb4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb4c:	f000 bc7f 	b.w	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cb50:	2300      	movs	r3, #0
 800cb52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb54:	f000 bc7b 	b.w	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cb58:	4b7c      	ldr	r3, [pc, #496]	; (800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb64:	d108      	bne.n	800cb78 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb66:	f107 030c 	add.w	r3, r7, #12
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f000 fde6 	bl	800d73c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb74:	f000 bc6b 	b.w	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb7c:	f000 bc67 	b.w	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cb80:	4b72      	ldr	r3, [pc, #456]	; (800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cb88:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cb8a:	4b70      	ldr	r3, [pc, #448]	; (800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	f003 0304 	and.w	r3, r3, #4
 800cb92:	2b04      	cmp	r3, #4
 800cb94:	d10c      	bne.n	800cbb0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800cb96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d109      	bne.n	800cbb0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb9c:	4b6b      	ldr	r3, [pc, #428]	; (800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	08db      	lsrs	r3, r3, #3
 800cba2:	f003 0303 	and.w	r3, r3, #3
 800cba6:	4a6a      	ldr	r2, [pc, #424]	; (800cd50 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800cba8:	fa22 f303 	lsr.w	r3, r2, r3
 800cbac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbae:	e01f      	b.n	800cbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cbb0:	4b66      	ldr	r3, [pc, #408]	; (800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbbc:	d106      	bne.n	800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800cbbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cbc4:	d102      	bne.n	800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cbc6:	4b63      	ldr	r3, [pc, #396]	; (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800cbc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbca:	e011      	b.n	800cbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cbcc:	4b5f      	ldr	r3, [pc, #380]	; (800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cbd8:	d106      	bne.n	800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800cbda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbe0:	d102      	bne.n	800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cbe2:	4b5d      	ldr	r3, [pc, #372]	; (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cbe4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbe6:	e003      	b.n	800cbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cbe8:	2300      	movs	r3, #0
 800cbea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cbec:	f000 bc2f 	b.w	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cbf0:	f000 bc2d 	b.w	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cbf4:	4b59      	ldr	r3, [pc, #356]	; (800cd5c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800cbf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbf8:	f000 bc29 	b.w	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc00:	f000 bc25 	b.w	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800cc04:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc08:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800cc0c:	430b      	orrs	r3, r1
 800cc0e:	f040 80a7 	bne.w	800cd60 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800cc12:	4b4e      	ldr	r3, [pc, #312]	; (800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cc14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc16:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800cc1a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800cc1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cc22:	d054      	beq.n	800ccce <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800cc24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cc2a:	f200 808b 	bhi.w	800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cc2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc30:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cc34:	f000 8083 	beq.w	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800cc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc3a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cc3e:	f200 8081 	bhi.w	800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cc48:	d02f      	beq.n	800ccaa <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800cc4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cc50:	d878      	bhi.n	800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cc52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d004      	beq.n	800cc62 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800cc58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cc5e:	d012      	beq.n	800cc86 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800cc60:	e070      	b.n	800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cc62:	4b3a      	ldr	r3, [pc, #232]	; (800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc6e:	d107      	bne.n	800cc80 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cc70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cc74:	4618      	mov	r0, r3
 800cc76:	f000 feb5 	bl	800d9e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cc7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc7e:	e3e6      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc80:	2300      	movs	r3, #0
 800cc82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc84:	e3e3      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cc86:	4b31      	ldr	r3, [pc, #196]	; (800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cc92:	d107      	bne.n	800cca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc94:	f107 0318 	add.w	r3, r7, #24
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f000 fbfb 	bl	800d494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cc9e:	69bb      	ldr	r3, [r7, #24]
 800cca0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cca2:	e3d4      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cca4:	2300      	movs	r3, #0
 800cca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cca8:	e3d1      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ccaa:	4b28      	ldr	r3, [pc, #160]	; (800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ccb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccb6:	d107      	bne.n	800ccc8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ccb8:	f107 030c 	add.w	r3, r7, #12
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f000 fd3d 	bl	800d73c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccc6:	e3c2      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cccc:	e3bf      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ccce:	4b1f      	ldr	r3, [pc, #124]	; (800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ccd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ccd2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ccd6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ccd8:	4b1c      	ldr	r3, [pc, #112]	; (800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	f003 0304 	and.w	r3, r3, #4
 800cce0:	2b04      	cmp	r3, #4
 800cce2:	d10c      	bne.n	800ccfe <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800cce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d109      	bne.n	800ccfe <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ccea:	4b18      	ldr	r3, [pc, #96]	; (800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	08db      	lsrs	r3, r3, #3
 800ccf0:	f003 0303 	and.w	r3, r3, #3
 800ccf4:	4a16      	ldr	r2, [pc, #88]	; (800cd50 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800ccf6:	fa22 f303 	lsr.w	r3, r2, r3
 800ccfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ccfc:	e01e      	b.n	800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ccfe:	4b13      	ldr	r3, [pc, #76]	; (800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd0a:	d106      	bne.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800cd0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd12:	d102      	bne.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cd14:	4b0f      	ldr	r3, [pc, #60]	; (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800cd16:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd18:	e010      	b.n	800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cd1a:	4b0c      	ldr	r3, [pc, #48]	; (800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd26:	d106      	bne.n	800cd36 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800cd28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd2e:	d102      	bne.n	800cd36 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cd30:	4b09      	ldr	r3, [pc, #36]	; (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cd32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd34:	e002      	b.n	800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cd36:	2300      	movs	r3, #0
 800cd38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cd3a:	e388      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cd3c:	e387      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cd3e:	4b07      	ldr	r3, [pc, #28]	; (800cd5c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800cd40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd42:	e384      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800cd44:	2300      	movs	r3, #0
 800cd46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd48:	e381      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cd4a:	bf00      	nop
 800cd4c:	58024400 	.word	0x58024400
 800cd50:	03d09000 	.word	0x03d09000
 800cd54:	003d0900 	.word	0x003d0900
 800cd58:	02faf080 	.word	0x02faf080
 800cd5c:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800cd60:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd64:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800cd68:	430b      	orrs	r3, r1
 800cd6a:	f040 809c 	bne.w	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800cd6e:	4b9e      	ldr	r3, [pc, #632]	; (800cfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cd70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd72:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800cd76:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800cd78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cd7e:	d054      	beq.n	800ce2a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800cd80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cd86:	f200 808b 	bhi.w	800cea0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800cd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd8c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cd90:	f000 8083 	beq.w	800ce9a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800cd94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd96:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cd9a:	f200 8081 	bhi.w	800cea0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800cd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cda4:	d02f      	beq.n	800ce06 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800cda6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cdac:	d878      	bhi.n	800cea0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800cdae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d004      	beq.n	800cdbe <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800cdb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cdba:	d012      	beq.n	800cde2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800cdbc:	e070      	b.n	800cea0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cdbe:	4b8a      	ldr	r3, [pc, #552]	; (800cfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cdc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cdca:	d107      	bne.n	800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cdcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f000 fe07 	bl	800d9e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cdd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdda:	e338      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cddc:	2300      	movs	r3, #0
 800cdde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cde0:	e335      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cde2:	4b81      	ldr	r3, [pc, #516]	; (800cfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cdea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cdee:	d107      	bne.n	800ce00 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cdf0:	f107 0318 	add.w	r3, r7, #24
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f000 fb4d 	bl	800d494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cdfa:	69bb      	ldr	r3, [r7, #24]
 800cdfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdfe:	e326      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce00:	2300      	movs	r3, #0
 800ce02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce04:	e323      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ce06:	4b78      	ldr	r3, [pc, #480]	; (800cfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce12:	d107      	bne.n	800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce14:	f107 030c 	add.w	r3, r7, #12
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f000 fc8f 	bl	800d73c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce22:	e314      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce24:	2300      	movs	r3, #0
 800ce26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce28:	e311      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ce2a:	4b6f      	ldr	r3, [pc, #444]	; (800cfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ce32:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ce34:	4b6c      	ldr	r3, [pc, #432]	; (800cfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	f003 0304 	and.w	r3, r3, #4
 800ce3c:	2b04      	cmp	r3, #4
 800ce3e:	d10c      	bne.n	800ce5a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800ce40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d109      	bne.n	800ce5a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce46:	4b68      	ldr	r3, [pc, #416]	; (800cfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	08db      	lsrs	r3, r3, #3
 800ce4c:	f003 0303 	and.w	r3, r3, #3
 800ce50:	4a66      	ldr	r2, [pc, #408]	; (800cfec <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800ce52:	fa22 f303 	lsr.w	r3, r2, r3
 800ce56:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce58:	e01e      	b.n	800ce98 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ce5a:	4b63      	ldr	r3, [pc, #396]	; (800cfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce66:	d106      	bne.n	800ce76 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800ce68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ce6e:	d102      	bne.n	800ce76 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ce70:	4b5f      	ldr	r3, [pc, #380]	; (800cff0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800ce72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce74:	e010      	b.n	800ce98 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ce76:	4b5c      	ldr	r3, [pc, #368]	; (800cfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ce82:	d106      	bne.n	800ce92 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800ce84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce8a:	d102      	bne.n	800ce92 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ce8c:	4b59      	ldr	r3, [pc, #356]	; (800cff4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ce8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce90:	e002      	b.n	800ce98 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ce92:	2300      	movs	r3, #0
 800ce94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ce96:	e2da      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ce98:	e2d9      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ce9a:	4b57      	ldr	r3, [pc, #348]	; (800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ce9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce9e:	e2d6      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800cea0:	2300      	movs	r3, #0
 800cea2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cea4:	e2d3      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800cea6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ceaa:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800ceae:	430b      	orrs	r3, r1
 800ceb0:	f040 80a7 	bne.w	800d002 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ceb4:	4b4c      	ldr	r3, [pc, #304]	; (800cfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ceb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ceb8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800cebc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cec0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cec4:	d055      	beq.n	800cf72 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800cec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cec8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cecc:	f200 8096 	bhi.w	800cffc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800ced0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ced2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ced6:	f000 8084 	beq.w	800cfe2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800ceda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cedc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cee0:	f200 808c 	bhi.w	800cffc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ceea:	d030      	beq.n	800cf4e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800ceec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cef2:	f200 8083 	bhi.w	800cffc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d004      	beq.n	800cf06 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800cefc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cefe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf02:	d012      	beq.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800cf04:	e07a      	b.n	800cffc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cf06:	4b38      	ldr	r3, [pc, #224]	; (800cfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf12:	d107      	bne.n	800cf24 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cf14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f000 fd63 	bl	800d9e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cf1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf22:	e294      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf24:	2300      	movs	r3, #0
 800cf26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf28:	e291      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cf2a:	4b2f      	ldr	r3, [pc, #188]	; (800cfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cf36:	d107      	bne.n	800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf38:	f107 0318 	add.w	r3, r7, #24
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f000 faa9 	bl	800d494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cf42:	69bb      	ldr	r3, [r7, #24]
 800cf44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf46:	e282      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf4c:	e27f      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cf4e:	4b26      	ldr	r3, [pc, #152]	; (800cfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf5a:	d107      	bne.n	800cf6c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf5c:	f107 030c 	add.w	r3, r7, #12
 800cf60:	4618      	mov	r0, r3
 800cf62:	f000 fbeb 	bl	800d73c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf6a:	e270      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf70:	e26d      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cf72:	4b1d      	ldr	r3, [pc, #116]	; (800cfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cf7a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cf7c:	4b1a      	ldr	r3, [pc, #104]	; (800cfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	f003 0304 	and.w	r3, r3, #4
 800cf84:	2b04      	cmp	r3, #4
 800cf86:	d10c      	bne.n	800cfa2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800cf88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d109      	bne.n	800cfa2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf8e:	4b16      	ldr	r3, [pc, #88]	; (800cfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	08db      	lsrs	r3, r3, #3
 800cf94:	f003 0303 	and.w	r3, r3, #3
 800cf98:	4a14      	ldr	r2, [pc, #80]	; (800cfec <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800cf9a:	fa22 f303 	lsr.w	r3, r2, r3
 800cf9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cfa0:	e01e      	b.n	800cfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cfa2:	4b11      	ldr	r3, [pc, #68]	; (800cfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cfae:	d106      	bne.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800cfb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cfb6:	d102      	bne.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cfb8:	4b0d      	ldr	r3, [pc, #52]	; (800cff0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800cfba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cfbc:	e010      	b.n	800cfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cfbe:	4b0a      	ldr	r3, [pc, #40]	; (800cfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cfc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cfca:	d106      	bne.n	800cfda <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800cfcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cfd2:	d102      	bne.n	800cfda <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cfd4:	4b07      	ldr	r3, [pc, #28]	; (800cff4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cfd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cfd8:	e002      	b.n	800cfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cfde:	e236      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cfe0:	e235      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cfe2:	4b05      	ldr	r3, [pc, #20]	; (800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800cfe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfe6:	e232      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cfe8:	58024400 	.word	0x58024400
 800cfec:	03d09000 	.word	0x03d09000
 800cff0:	003d0900 	.word	0x003d0900
 800cff4:	02faf080 	.word	0x02faf080
 800cff8:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800cffc:	2300      	movs	r3, #0
 800cffe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d000:	e225      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800d002:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d006:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800d00a:	430b      	orrs	r3, r1
 800d00c:	f040 8085 	bne.w	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800d010:	4b9c      	ldr	r3, [pc, #624]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d014:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800d018:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800d01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d01c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d020:	d06b      	beq.n	800d0fa <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800d022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d028:	d874      	bhi.n	800d114 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d02c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d030:	d056      	beq.n	800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800d032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d034:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d038:	d86c      	bhi.n	800d114 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d03c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d040:	d03b      	beq.n	800d0ba <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800d042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d044:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d048:	d864      	bhi.n	800d114 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d04c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d050:	d021      	beq.n	800d096 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800d052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d054:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d058:	d85c      	bhi.n	800d114 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d004      	beq.n	800d06a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800d060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d066:	d004      	beq.n	800d072 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800d068:	e054      	b.n	800d114 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800d06a:	f7fe fb5f 	bl	800b72c <HAL_RCC_GetPCLK1Freq>
 800d06e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d070:	e1ed      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d072:	4b84      	ldr	r3, [pc, #528]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d07a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d07e:	d107      	bne.n	800d090 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d080:	f107 0318 	add.w	r3, r7, #24
 800d084:	4618      	mov	r0, r3
 800d086:	f000 fa05 	bl	800d494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d08a:	69fb      	ldr	r3, [r7, #28]
 800d08c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d08e:	e1de      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d090:	2300      	movs	r3, #0
 800d092:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d094:	e1db      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d096:	4b7b      	ldr	r3, [pc, #492]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d09e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d0a2:	d107      	bne.n	800d0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d0a4:	f107 030c 	add.w	r3, r7, #12
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f000 fb47 	bl	800d73c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d0ae:	693b      	ldr	r3, [r7, #16]
 800d0b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0b2:	e1cc      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0b8:	e1c9      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d0ba:	4b72      	ldr	r3, [pc, #456]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	f003 0304 	and.w	r3, r3, #4
 800d0c2:	2b04      	cmp	r3, #4
 800d0c4:	d109      	bne.n	800d0da <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d0c6:	4b6f      	ldr	r3, [pc, #444]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	08db      	lsrs	r3, r3, #3
 800d0cc:	f003 0303 	and.w	r3, r3, #3
 800d0d0:	4a6d      	ldr	r2, [pc, #436]	; (800d288 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800d0d2:	fa22 f303 	lsr.w	r3, r2, r3
 800d0d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0d8:	e1b9      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0de:	e1b6      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d0e0:	4b68      	ldr	r3, [pc, #416]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d0ec:	d102      	bne.n	800d0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800d0ee:	4b67      	ldr	r3, [pc, #412]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d0f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0f2:	e1ac      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0f8:	e1a9      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d0fa:	4b62      	ldr	r3, [pc, #392]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d102:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d106:	d102      	bne.n	800d10e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800d108:	4b61      	ldr	r3, [pc, #388]	; (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d10a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d10c:	e19f      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d10e:	2300      	movs	r3, #0
 800d110:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d112:	e19c      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d114:	2300      	movs	r3, #0
 800d116:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d118:	e199      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800d11a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d11e:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800d122:	430b      	orrs	r3, r1
 800d124:	d173      	bne.n	800d20e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800d126:	4b57      	ldr	r3, [pc, #348]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d12a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d12e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d132:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d136:	d02f      	beq.n	800d198 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800d138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d13a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d13e:	d863      	bhi.n	800d208 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800d140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d142:	2b00      	cmp	r3, #0
 800d144:	d004      	beq.n	800d150 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800d146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d14c:	d012      	beq.n	800d174 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800d14e:	e05b      	b.n	800d208 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d150:	4b4c      	ldr	r3, [pc, #304]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d158:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d15c:	d107      	bne.n	800d16e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d15e:	f107 0318 	add.w	r3, r7, #24
 800d162:	4618      	mov	r0, r3
 800d164:	f000 f996 	bl	800d494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d168:	69bb      	ldr	r3, [r7, #24]
 800d16a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d16c:	e16f      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d16e:	2300      	movs	r3, #0
 800d170:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d172:	e16c      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d174:	4b43      	ldr	r3, [pc, #268]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d17c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d180:	d107      	bne.n	800d192 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d182:	f107 030c 	add.w	r3, r7, #12
 800d186:	4618      	mov	r0, r3
 800d188:	f000 fad8 	bl	800d73c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800d18c:	697b      	ldr	r3, [r7, #20]
 800d18e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d190:	e15d      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d192:	2300      	movs	r3, #0
 800d194:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d196:	e15a      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d198:	4b3a      	ldr	r3, [pc, #232]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d19a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d19c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d1a0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d1a2:	4b38      	ldr	r3, [pc, #224]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	f003 0304 	and.w	r3, r3, #4
 800d1aa:	2b04      	cmp	r3, #4
 800d1ac:	d10c      	bne.n	800d1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800d1ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d109      	bne.n	800d1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d1b4:	4b33      	ldr	r3, [pc, #204]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	08db      	lsrs	r3, r3, #3
 800d1ba:	f003 0303 	and.w	r3, r3, #3
 800d1be:	4a32      	ldr	r2, [pc, #200]	; (800d288 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800d1c0:	fa22 f303 	lsr.w	r3, r2, r3
 800d1c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d1c6:	e01e      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d1c8:	4b2e      	ldr	r3, [pc, #184]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d1d4:	d106      	bne.n	800d1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800d1d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d1dc:	d102      	bne.n	800d1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d1de:	4b2b      	ldr	r3, [pc, #172]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d1e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d1e2:	e010      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d1e4:	4b27      	ldr	r3, [pc, #156]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d1ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d1f0:	d106      	bne.n	800d200 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800d1f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d1f8:	d102      	bne.n	800d200 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d1fa:	4b25      	ldr	r3, [pc, #148]	; (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d1fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d1fe:	e002      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d200:	2300      	movs	r3, #0
 800d202:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800d204:	e123      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d206:	e122      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d208:	2300      	movs	r3, #0
 800d20a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d20c:	e11f      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d20e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d212:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800d216:	430b      	orrs	r3, r1
 800d218:	d13c      	bne.n	800d294 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800d21a:	4b1a      	ldr	r3, [pc, #104]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d21c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d21e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d222:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d226:	2b00      	cmp	r3, #0
 800d228:	d004      	beq.n	800d234 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800d22a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d22c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d230:	d012      	beq.n	800d258 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800d232:	e023      	b.n	800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d234:	4b13      	ldr	r3, [pc, #76]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d23c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d240:	d107      	bne.n	800d252 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d246:	4618      	mov	r0, r3
 800d248:	f000 fbcc 	bl	800d9e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d24e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d250:	e0fd      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d252:	2300      	movs	r3, #0
 800d254:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d256:	e0fa      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d258:	4b0a      	ldr	r3, [pc, #40]	; (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d260:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d264:	d107      	bne.n	800d276 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d266:	f107 0318 	add.w	r3, r7, #24
 800d26a:	4618      	mov	r0, r3
 800d26c:	f000 f912 	bl	800d494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d270:	6a3b      	ldr	r3, [r7, #32]
 800d272:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d274:	e0eb      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d276:	2300      	movs	r3, #0
 800d278:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d27a:	e0e8      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d27c:	2300      	movs	r3, #0
 800d27e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d280:	e0e5      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d282:	bf00      	nop
 800d284:	58024400 	.word	0x58024400
 800d288:	03d09000 	.word	0x03d09000
 800d28c:	003d0900 	.word	0x003d0900
 800d290:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d294:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d298:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800d29c:	430b      	orrs	r3, r1
 800d29e:	f040 8085 	bne.w	800d3ac <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800d2a2:	4b6d      	ldr	r3, [pc, #436]	; (800d458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d2a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2a6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800d2aa:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d2b2:	d06b      	beq.n	800d38c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800d2b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d2ba:	d874      	bhi.n	800d3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d2c2:	d056      	beq.n	800d372 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800d2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d2ca:	d86c      	bhi.n	800d3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d2d2:	d03b      	beq.n	800d34c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800d2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d2da:	d864      	bhi.n	800d3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d2e2:	d021      	beq.n	800d328 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800d2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d2ea:	d85c      	bhi.n	800d3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d004      	beq.n	800d2fc <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800d2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d2f8:	d004      	beq.n	800d304 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800d2fa:	e054      	b.n	800d3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d2fc:	f000 f8b4 	bl	800d468 <HAL_RCCEx_GetD3PCLK1Freq>
 800d300:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d302:	e0a4      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d304:	4b54      	ldr	r3, [pc, #336]	; (800d458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d30c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d310:	d107      	bne.n	800d322 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d312:	f107 0318 	add.w	r3, r7, #24
 800d316:	4618      	mov	r0, r3
 800d318:	f000 f8bc 	bl	800d494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d31c:	69fb      	ldr	r3, [r7, #28]
 800d31e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d320:	e095      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d322:	2300      	movs	r3, #0
 800d324:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d326:	e092      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d328:	4b4b      	ldr	r3, [pc, #300]	; (800d458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d330:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d334:	d107      	bne.n	800d346 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d336:	f107 030c 	add.w	r3, r7, #12
 800d33a:	4618      	mov	r0, r3
 800d33c:	f000 f9fe 	bl	800d73c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d340:	693b      	ldr	r3, [r7, #16]
 800d342:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d344:	e083      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d346:	2300      	movs	r3, #0
 800d348:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d34a:	e080      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d34c:	4b42      	ldr	r3, [pc, #264]	; (800d458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	f003 0304 	and.w	r3, r3, #4
 800d354:	2b04      	cmp	r3, #4
 800d356:	d109      	bne.n	800d36c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d358:	4b3f      	ldr	r3, [pc, #252]	; (800d458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	08db      	lsrs	r3, r3, #3
 800d35e:	f003 0303 	and.w	r3, r3, #3
 800d362:	4a3e      	ldr	r2, [pc, #248]	; (800d45c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800d364:	fa22 f303 	lsr.w	r3, r2, r3
 800d368:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d36a:	e070      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d36c:	2300      	movs	r3, #0
 800d36e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d370:	e06d      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d372:	4b39      	ldr	r3, [pc, #228]	; (800d458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d37a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d37e:	d102      	bne.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800d380:	4b37      	ldr	r3, [pc, #220]	; (800d460 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d382:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d384:	e063      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d386:	2300      	movs	r3, #0
 800d388:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d38a:	e060      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d38c:	4b32      	ldr	r3, [pc, #200]	; (800d458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d394:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d398:	d102      	bne.n	800d3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800d39a:	4b32      	ldr	r3, [pc, #200]	; (800d464 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d39c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d39e:	e056      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3a4:	e053      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3aa:	e050      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d3ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d3b0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800d3b4:	430b      	orrs	r3, r1
 800d3b6:	d148      	bne.n	800d44a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d3b8:	4b27      	ldr	r3, [pc, #156]	; (800d458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d3ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d3c0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d3c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d3c8:	d02a      	beq.n	800d420 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800d3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d3d0:	d838      	bhi.n	800d444 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800d3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d004      	beq.n	800d3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800d3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d3de:	d00d      	beq.n	800d3fc <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800d3e0:	e030      	b.n	800d444 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d3e2:	4b1d      	ldr	r3, [pc, #116]	; (800d458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d3ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d3ee:	d102      	bne.n	800d3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800d3f0:	4b1c      	ldr	r3, [pc, #112]	; (800d464 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d3f4:	e02b      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3fa:	e028      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d3fc:	4b16      	ldr	r3, [pc, #88]	; (800d458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d404:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d408:	d107      	bne.n	800d41a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d40a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d40e:	4618      	mov	r0, r3
 800d410:	f000 fae8 	bl	800d9e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d416:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d418:	e019      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d41a:	2300      	movs	r3, #0
 800d41c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d41e:	e016      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d420:	4b0d      	ldr	r3, [pc, #52]	; (800d458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d428:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d42c:	d107      	bne.n	800d43e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d42e:	f107 0318 	add.w	r3, r7, #24
 800d432:	4618      	mov	r0, r3
 800d434:	f000 f82e 	bl	800d494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d438:	69fb      	ldr	r3, [r7, #28]
 800d43a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d43c:	e007      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d43e:	2300      	movs	r3, #0
 800d440:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d442:	e004      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d444:	2300      	movs	r3, #0
 800d446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d448:	e001      	b.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800d44a:	2300      	movs	r3, #0
 800d44c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800d44e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d450:	4618      	mov	r0, r3
 800d452:	3740      	adds	r7, #64	; 0x40
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}
 800d458:	58024400 	.word	0x58024400
 800d45c:	03d09000 	.word	0x03d09000
 800d460:	003d0900 	.word	0x003d0900
 800d464:	02faf080 	.word	0x02faf080

0800d468 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d46c:	f7fe f92e 	bl	800b6cc <HAL_RCC_GetHCLKFreq>
 800d470:	4602      	mov	r2, r0
 800d472:	4b06      	ldr	r3, [pc, #24]	; (800d48c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d474:	6a1b      	ldr	r3, [r3, #32]
 800d476:	091b      	lsrs	r3, r3, #4
 800d478:	f003 0307 	and.w	r3, r3, #7
 800d47c:	4904      	ldr	r1, [pc, #16]	; (800d490 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d47e:	5ccb      	ldrb	r3, [r1, r3]
 800d480:	f003 031f 	and.w	r3, r3, #31
 800d484:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d488:	4618      	mov	r0, r3
 800d48a:	bd80      	pop	{r7, pc}
 800d48c:	58024400 	.word	0x58024400
 800d490:	0801ff74 	.word	0x0801ff74

0800d494 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d494:	b480      	push	{r7}
 800d496:	b089      	sub	sp, #36	; 0x24
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d49c:	4ba1      	ldr	r3, [pc, #644]	; (800d724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d49e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4a0:	f003 0303 	and.w	r3, r3, #3
 800d4a4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d4a6:	4b9f      	ldr	r3, [pc, #636]	; (800d724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4aa:	0b1b      	lsrs	r3, r3, #12
 800d4ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d4b0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d4b2:	4b9c      	ldr	r3, [pc, #624]	; (800d724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4b6:	091b      	lsrs	r3, r3, #4
 800d4b8:	f003 0301 	and.w	r3, r3, #1
 800d4bc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d4be:	4b99      	ldr	r3, [pc, #612]	; (800d724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4c2:	08db      	lsrs	r3, r3, #3
 800d4c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d4c8:	693a      	ldr	r2, [r7, #16]
 800d4ca:	fb02 f303 	mul.w	r3, r2, r3
 800d4ce:	ee07 3a90 	vmov	s15, r3
 800d4d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	f000 8111 	beq.w	800d704 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d4e2:	69bb      	ldr	r3, [r7, #24]
 800d4e4:	2b02      	cmp	r3, #2
 800d4e6:	f000 8083 	beq.w	800d5f0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d4ea:	69bb      	ldr	r3, [r7, #24]
 800d4ec:	2b02      	cmp	r3, #2
 800d4ee:	f200 80a1 	bhi.w	800d634 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d4f2:	69bb      	ldr	r3, [r7, #24]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d003      	beq.n	800d500 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d4f8:	69bb      	ldr	r3, [r7, #24]
 800d4fa:	2b01      	cmp	r3, #1
 800d4fc:	d056      	beq.n	800d5ac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d4fe:	e099      	b.n	800d634 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d500:	4b88      	ldr	r3, [pc, #544]	; (800d724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	f003 0320 	and.w	r3, r3, #32
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d02d      	beq.n	800d568 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d50c:	4b85      	ldr	r3, [pc, #532]	; (800d724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	08db      	lsrs	r3, r3, #3
 800d512:	f003 0303 	and.w	r3, r3, #3
 800d516:	4a84      	ldr	r2, [pc, #528]	; (800d728 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d518:	fa22 f303 	lsr.w	r3, r2, r3
 800d51c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d51e:	68bb      	ldr	r3, [r7, #8]
 800d520:	ee07 3a90 	vmov	s15, r3
 800d524:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d528:	697b      	ldr	r3, [r7, #20]
 800d52a:	ee07 3a90 	vmov	s15, r3
 800d52e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d536:	4b7b      	ldr	r3, [pc, #492]	; (800d724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d53a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d53e:	ee07 3a90 	vmov	s15, r3
 800d542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d546:	ed97 6a03 	vldr	s12, [r7, #12]
 800d54a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d72c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d54e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d556:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d55a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d55e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d562:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d566:	e087      	b.n	800d678 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d568:	697b      	ldr	r3, [r7, #20]
 800d56a:	ee07 3a90 	vmov	s15, r3
 800d56e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d572:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d730 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d57a:	4b6a      	ldr	r3, [pc, #424]	; (800d724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d57c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d57e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d582:	ee07 3a90 	vmov	s15, r3
 800d586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d58a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d58e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d72c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d59a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d59e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d5aa:	e065      	b.n	800d678 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d5ac:	697b      	ldr	r3, [r7, #20]
 800d5ae:	ee07 3a90 	vmov	s15, r3
 800d5b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d5ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5be:	4b59      	ldr	r3, [pc, #356]	; (800d724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d5c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5c6:	ee07 3a90 	vmov	s15, r3
 800d5ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d72c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d5d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d5e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d5ee:	e043      	b.n	800d678 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d5f0:	697b      	ldr	r3, [r7, #20]
 800d5f2:	ee07 3a90 	vmov	s15, r3
 800d5f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d738 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d5fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d602:	4b48      	ldr	r3, [pc, #288]	; (800d724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d60a:	ee07 3a90 	vmov	s15, r3
 800d60e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d612:	ed97 6a03 	vldr	s12, [r7, #12]
 800d616:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d72c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d61a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d61e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d62a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d62e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d632:	e021      	b.n	800d678 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d634:	697b      	ldr	r3, [r7, #20]
 800d636:	ee07 3a90 	vmov	s15, r3
 800d63a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d63e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d646:	4b37      	ldr	r3, [pc, #220]	; (800d724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d64a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d64e:	ee07 3a90 	vmov	s15, r3
 800d652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d656:	ed97 6a03 	vldr	s12, [r7, #12]
 800d65a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d72c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d65e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d66a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d66e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d672:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d676:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d678:	4b2a      	ldr	r3, [pc, #168]	; (800d724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d67a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d67c:	0a5b      	lsrs	r3, r3, #9
 800d67e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d682:	ee07 3a90 	vmov	s15, r3
 800d686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d68a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d68e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d692:	edd7 6a07 	vldr	s13, [r7, #28]
 800d696:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d69a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d69e:	ee17 2a90 	vmov	r2, s15
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d6a6:	4b1f      	ldr	r3, [pc, #124]	; (800d724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d6a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6aa:	0c1b      	lsrs	r3, r3, #16
 800d6ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6b0:	ee07 3a90 	vmov	s15, r3
 800d6b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d6bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d6c0:	edd7 6a07 	vldr	s13, [r7, #28]
 800d6c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d6c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d6cc:	ee17 2a90 	vmov	r2, s15
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d6d4:	4b13      	ldr	r3, [pc, #76]	; (800d724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d6d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6d8:	0e1b      	lsrs	r3, r3, #24
 800d6da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6de:	ee07 3a90 	vmov	s15, r3
 800d6e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d6ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d6ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800d6f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d6f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d6fa:	ee17 2a90 	vmov	r2, s15
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d702:	e008      	b.n	800d716 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2200      	movs	r2, #0
 800d708:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2200      	movs	r2, #0
 800d70e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2200      	movs	r2, #0
 800d714:	609a      	str	r2, [r3, #8]
}
 800d716:	bf00      	nop
 800d718:	3724      	adds	r7, #36	; 0x24
 800d71a:	46bd      	mov	sp, r7
 800d71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d720:	4770      	bx	lr
 800d722:	bf00      	nop
 800d724:	58024400 	.word	0x58024400
 800d728:	03d09000 	.word	0x03d09000
 800d72c:	46000000 	.word	0x46000000
 800d730:	4c742400 	.word	0x4c742400
 800d734:	4a742400 	.word	0x4a742400
 800d738:	4c3ebc20 	.word	0x4c3ebc20

0800d73c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d73c:	b480      	push	{r7}
 800d73e:	b089      	sub	sp, #36	; 0x24
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d744:	4ba1      	ldr	r3, [pc, #644]	; (800d9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d748:	f003 0303 	and.w	r3, r3, #3
 800d74c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d74e:	4b9f      	ldr	r3, [pc, #636]	; (800d9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d752:	0d1b      	lsrs	r3, r3, #20
 800d754:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d758:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d75a:	4b9c      	ldr	r3, [pc, #624]	; (800d9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d75c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d75e:	0a1b      	lsrs	r3, r3, #8
 800d760:	f003 0301 	and.w	r3, r3, #1
 800d764:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d766:	4b99      	ldr	r3, [pc, #612]	; (800d9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d76a:	08db      	lsrs	r3, r3, #3
 800d76c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d770:	693a      	ldr	r2, [r7, #16]
 800d772:	fb02 f303 	mul.w	r3, r2, r3
 800d776:	ee07 3a90 	vmov	s15, r3
 800d77a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d77e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d782:	697b      	ldr	r3, [r7, #20]
 800d784:	2b00      	cmp	r3, #0
 800d786:	f000 8111 	beq.w	800d9ac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d78a:	69bb      	ldr	r3, [r7, #24]
 800d78c:	2b02      	cmp	r3, #2
 800d78e:	f000 8083 	beq.w	800d898 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d792:	69bb      	ldr	r3, [r7, #24]
 800d794:	2b02      	cmp	r3, #2
 800d796:	f200 80a1 	bhi.w	800d8dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d79a:	69bb      	ldr	r3, [r7, #24]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d003      	beq.n	800d7a8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d7a0:	69bb      	ldr	r3, [r7, #24]
 800d7a2:	2b01      	cmp	r3, #1
 800d7a4:	d056      	beq.n	800d854 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d7a6:	e099      	b.n	800d8dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d7a8:	4b88      	ldr	r3, [pc, #544]	; (800d9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	f003 0320 	and.w	r3, r3, #32
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d02d      	beq.n	800d810 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d7b4:	4b85      	ldr	r3, [pc, #532]	; (800d9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	08db      	lsrs	r3, r3, #3
 800d7ba:	f003 0303 	and.w	r3, r3, #3
 800d7be:	4a84      	ldr	r2, [pc, #528]	; (800d9d0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d7c0:	fa22 f303 	lsr.w	r3, r2, r3
 800d7c4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d7c6:	68bb      	ldr	r3, [r7, #8]
 800d7c8:	ee07 3a90 	vmov	s15, r3
 800d7cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7d0:	697b      	ldr	r3, [r7, #20]
 800d7d2:	ee07 3a90 	vmov	s15, r3
 800d7d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d7de:	4b7b      	ldr	r3, [pc, #492]	; (800d9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7e6:	ee07 3a90 	vmov	s15, r3
 800d7ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800d7f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d7f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d7fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d80a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d80e:	e087      	b.n	800d920 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d810:	697b      	ldr	r3, [r7, #20]
 800d812:	ee07 3a90 	vmov	s15, r3
 800d816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d81a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d81e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d822:	4b6a      	ldr	r3, [pc, #424]	; (800d9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d82a:	ee07 3a90 	vmov	s15, r3
 800d82e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d832:	ed97 6a03 	vldr	s12, [r7, #12]
 800d836:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d83a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d83e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d842:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d84a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d84e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d852:	e065      	b.n	800d920 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d854:	697b      	ldr	r3, [r7, #20]
 800d856:	ee07 3a90 	vmov	s15, r3
 800d85a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d85e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d9dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d866:	4b59      	ldr	r3, [pc, #356]	; (800d9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d86a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d86e:	ee07 3a90 	vmov	s15, r3
 800d872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d876:	ed97 6a03 	vldr	s12, [r7, #12]
 800d87a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d87e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d88a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d88e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d892:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d896:	e043      	b.n	800d920 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d898:	697b      	ldr	r3, [r7, #20]
 800d89a:	ee07 3a90 	vmov	s15, r3
 800d89e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d9e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d8a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d8aa:	4b48      	ldr	r3, [pc, #288]	; (800d9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d8ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8b2:	ee07 3a90 	vmov	s15, r3
 800d8b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800d8be:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d8c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d8c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d8ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d8ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d8d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d8da:	e021      	b.n	800d920 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d8dc:	697b      	ldr	r3, [r7, #20]
 800d8de:	ee07 3a90 	vmov	s15, r3
 800d8e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d9dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d8ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d8ee:	4b37      	ldr	r3, [pc, #220]	; (800d9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d8f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8f6:	ee07 3a90 	vmov	s15, r3
 800d8fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800d902:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d90a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d90e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d91a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d91e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d920:	4b2a      	ldr	r3, [pc, #168]	; (800d9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d924:	0a5b      	lsrs	r3, r3, #9
 800d926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d92a:	ee07 3a90 	vmov	s15, r3
 800d92e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d932:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d936:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d93a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d93e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d942:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d946:	ee17 2a90 	vmov	r2, s15
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d94e:	4b1f      	ldr	r3, [pc, #124]	; (800d9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d952:	0c1b      	lsrs	r3, r3, #16
 800d954:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d958:	ee07 3a90 	vmov	s15, r3
 800d95c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d960:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d964:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d968:	edd7 6a07 	vldr	s13, [r7, #28]
 800d96c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d970:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d974:	ee17 2a90 	vmov	r2, s15
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d97c:	4b13      	ldr	r3, [pc, #76]	; (800d9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d97e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d980:	0e1b      	lsrs	r3, r3, #24
 800d982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d986:	ee07 3a90 	vmov	s15, r3
 800d98a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d98e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d992:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d996:	edd7 6a07 	vldr	s13, [r7, #28]
 800d99a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d99e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d9a2:	ee17 2a90 	vmov	r2, s15
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d9aa:	e008      	b.n	800d9be <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	609a      	str	r2, [r3, #8]
}
 800d9be:	bf00      	nop
 800d9c0:	3724      	adds	r7, #36	; 0x24
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c8:	4770      	bx	lr
 800d9ca:	bf00      	nop
 800d9cc:	58024400 	.word	0x58024400
 800d9d0:	03d09000 	.word	0x03d09000
 800d9d4:	46000000 	.word	0x46000000
 800d9d8:	4c742400 	.word	0x4c742400
 800d9dc:	4a742400 	.word	0x4a742400
 800d9e0:	4c3ebc20 	.word	0x4c3ebc20

0800d9e4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d9e4:	b480      	push	{r7}
 800d9e6:	b089      	sub	sp, #36	; 0x24
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d9ec:	4ba0      	ldr	r3, [pc, #640]	; (800dc70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d9ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9f0:	f003 0303 	and.w	r3, r3, #3
 800d9f4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d9f6:	4b9e      	ldr	r3, [pc, #632]	; (800dc70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d9f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9fa:	091b      	lsrs	r3, r3, #4
 800d9fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da00:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800da02:	4b9b      	ldr	r3, [pc, #620]	; (800dc70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da06:	f003 0301 	and.w	r3, r3, #1
 800da0a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800da0c:	4b98      	ldr	r3, [pc, #608]	; (800dc70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da10:	08db      	lsrs	r3, r3, #3
 800da12:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800da16:	693a      	ldr	r2, [r7, #16]
 800da18:	fb02 f303 	mul.w	r3, r2, r3
 800da1c:	ee07 3a90 	vmov	s15, r3
 800da20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da24:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	f000 8111 	beq.w	800dc52 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800da30:	69bb      	ldr	r3, [r7, #24]
 800da32:	2b02      	cmp	r3, #2
 800da34:	f000 8083 	beq.w	800db3e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800da38:	69bb      	ldr	r3, [r7, #24]
 800da3a:	2b02      	cmp	r3, #2
 800da3c:	f200 80a1 	bhi.w	800db82 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800da40:	69bb      	ldr	r3, [r7, #24]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d003      	beq.n	800da4e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800da46:	69bb      	ldr	r3, [r7, #24]
 800da48:	2b01      	cmp	r3, #1
 800da4a:	d056      	beq.n	800dafa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800da4c:	e099      	b.n	800db82 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800da4e:	4b88      	ldr	r3, [pc, #544]	; (800dc70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	f003 0320 	and.w	r3, r3, #32
 800da56:	2b00      	cmp	r3, #0
 800da58:	d02d      	beq.n	800dab6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800da5a:	4b85      	ldr	r3, [pc, #532]	; (800dc70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	08db      	lsrs	r3, r3, #3
 800da60:	f003 0303 	and.w	r3, r3, #3
 800da64:	4a83      	ldr	r2, [pc, #524]	; (800dc74 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800da66:	fa22 f303 	lsr.w	r3, r2, r3
 800da6a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800da6c:	68bb      	ldr	r3, [r7, #8]
 800da6e:	ee07 3a90 	vmov	s15, r3
 800da72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da76:	697b      	ldr	r3, [r7, #20]
 800da78:	ee07 3a90 	vmov	s15, r3
 800da7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da84:	4b7a      	ldr	r3, [pc, #488]	; (800dc70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da8c:	ee07 3a90 	vmov	s15, r3
 800da90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da94:	ed97 6a03 	vldr	s12, [r7, #12]
 800da98:	eddf 5a77 	vldr	s11, [pc, #476]	; 800dc78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800da9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800daa0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800daa4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800daa8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800daac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dab0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800dab4:	e087      	b.n	800dbc6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dab6:	697b      	ldr	r3, [r7, #20]
 800dab8:	ee07 3a90 	vmov	s15, r3
 800dabc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dac0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800dc7c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800dac4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dac8:	4b69      	ldr	r3, [pc, #420]	; (800dc70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800daca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dacc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dad0:	ee07 3a90 	vmov	s15, r3
 800dad4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dad8:	ed97 6a03 	vldr	s12, [r7, #12]
 800dadc:	eddf 5a66 	vldr	s11, [pc, #408]	; 800dc78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dae0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dae4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dae8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800daec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800daf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800daf4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800daf8:	e065      	b.n	800dbc6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	ee07 3a90 	vmov	s15, r3
 800db00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db04:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800dc80 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800db08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db0c:	4b58      	ldr	r3, [pc, #352]	; (800dc70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db14:	ee07 3a90 	vmov	s15, r3
 800db18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db1c:	ed97 6a03 	vldr	s12, [r7, #12]
 800db20:	eddf 5a55 	vldr	s11, [pc, #340]	; 800dc78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800db24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800db30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db34:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db38:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800db3c:	e043      	b.n	800dbc6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	ee07 3a90 	vmov	s15, r3
 800db44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db48:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800dc84 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800db4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db50:	4b47      	ldr	r3, [pc, #284]	; (800dc70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db58:	ee07 3a90 	vmov	s15, r3
 800db5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db60:	ed97 6a03 	vldr	s12, [r7, #12]
 800db64:	eddf 5a44 	vldr	s11, [pc, #272]	; 800dc78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800db68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800db74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db78:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db7c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800db80:	e021      	b.n	800dbc6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800db82:	697b      	ldr	r3, [r7, #20]
 800db84:	ee07 3a90 	vmov	s15, r3
 800db88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db8c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800dc7c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800db90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db94:	4b36      	ldr	r3, [pc, #216]	; (800dc70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db9c:	ee07 3a90 	vmov	s15, r3
 800dba0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dba4:	ed97 6a03 	vldr	s12, [r7, #12]
 800dba8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800dc78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dbac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dbb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dbb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dbb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dbbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dbc0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dbc4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800dbc6:	4b2a      	ldr	r3, [pc, #168]	; (800dc70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dbc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbca:	0a5b      	lsrs	r3, r3, #9
 800dbcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbd0:	ee07 3a90 	vmov	s15, r3
 800dbd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dbdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dbe0:	edd7 6a07 	vldr	s13, [r7, #28]
 800dbe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dbe8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dbec:	ee17 2a90 	vmov	r2, s15
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800dbf4:	4b1e      	ldr	r3, [pc, #120]	; (800dc70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dbf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbf8:	0c1b      	lsrs	r3, r3, #16
 800dbfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbfe:	ee07 3a90 	vmov	s15, r3
 800dc02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dc0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dc0e:	edd7 6a07 	vldr	s13, [r7, #28]
 800dc12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dc16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dc1a:	ee17 2a90 	vmov	r2, s15
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800dc22:	4b13      	ldr	r3, [pc, #76]	; (800dc70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dc24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc26:	0e1b      	lsrs	r3, r3, #24
 800dc28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc2c:	ee07 3a90 	vmov	s15, r3
 800dc30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dc38:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dc3c:	edd7 6a07 	vldr	s13, [r7, #28]
 800dc40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dc44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dc48:	ee17 2a90 	vmov	r2, s15
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800dc50:	e008      	b.n	800dc64 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2200      	movs	r2, #0
 800dc56:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	2200      	movs	r2, #0
 800dc62:	609a      	str	r2, [r3, #8]
}
 800dc64:	bf00      	nop
 800dc66:	3724      	adds	r7, #36	; 0x24
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6e:	4770      	bx	lr
 800dc70:	58024400 	.word	0x58024400
 800dc74:	03d09000 	.word	0x03d09000
 800dc78:	46000000 	.word	0x46000000
 800dc7c:	4c742400 	.word	0x4c742400
 800dc80:	4a742400 	.word	0x4a742400
 800dc84:	4c3ebc20 	.word	0x4c3ebc20

0800dc88 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b084      	sub	sp, #16
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dc92:	2300      	movs	r3, #0
 800dc94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dc96:	4b53      	ldr	r3, [pc, #332]	; (800dde4 <RCCEx_PLL2_Config+0x15c>)
 800dc98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc9a:	f003 0303 	and.w	r3, r3, #3
 800dc9e:	2b03      	cmp	r3, #3
 800dca0:	d101      	bne.n	800dca6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800dca2:	2301      	movs	r3, #1
 800dca4:	e099      	b.n	800ddda <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800dca6:	4b4f      	ldr	r3, [pc, #316]	; (800dde4 <RCCEx_PLL2_Config+0x15c>)
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	4a4e      	ldr	r2, [pc, #312]	; (800dde4 <RCCEx_PLL2_Config+0x15c>)
 800dcac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800dcb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dcb2:	f7f6 fa2f 	bl	8004114 <HAL_GetTick>
 800dcb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dcb8:	e008      	b.n	800dccc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dcba:	f7f6 fa2b 	bl	8004114 <HAL_GetTick>
 800dcbe:	4602      	mov	r2, r0
 800dcc0:	68bb      	ldr	r3, [r7, #8]
 800dcc2:	1ad3      	subs	r3, r2, r3
 800dcc4:	2b02      	cmp	r3, #2
 800dcc6:	d901      	bls.n	800dccc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800dcc8:	2303      	movs	r3, #3
 800dcca:	e086      	b.n	800ddda <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dccc:	4b45      	ldr	r3, [pc, #276]	; (800dde4 <RCCEx_PLL2_Config+0x15c>)
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d1f0      	bne.n	800dcba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800dcd8:	4b42      	ldr	r3, [pc, #264]	; (800dde4 <RCCEx_PLL2_Config+0x15c>)
 800dcda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcdc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	031b      	lsls	r3, r3, #12
 800dce6:	493f      	ldr	r1, [pc, #252]	; (800dde4 <RCCEx_PLL2_Config+0x15c>)
 800dce8:	4313      	orrs	r3, r2
 800dcea:	628b      	str	r3, [r1, #40]	; 0x28
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	685b      	ldr	r3, [r3, #4]
 800dcf0:	3b01      	subs	r3, #1
 800dcf2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	689b      	ldr	r3, [r3, #8]
 800dcfa:	3b01      	subs	r3, #1
 800dcfc:	025b      	lsls	r3, r3, #9
 800dcfe:	b29b      	uxth	r3, r3
 800dd00:	431a      	orrs	r2, r3
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	68db      	ldr	r3, [r3, #12]
 800dd06:	3b01      	subs	r3, #1
 800dd08:	041b      	lsls	r3, r3, #16
 800dd0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800dd0e:	431a      	orrs	r2, r3
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	691b      	ldr	r3, [r3, #16]
 800dd14:	3b01      	subs	r3, #1
 800dd16:	061b      	lsls	r3, r3, #24
 800dd18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800dd1c:	4931      	ldr	r1, [pc, #196]	; (800dde4 <RCCEx_PLL2_Config+0x15c>)
 800dd1e:	4313      	orrs	r3, r2
 800dd20:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800dd22:	4b30      	ldr	r3, [pc, #192]	; (800dde4 <RCCEx_PLL2_Config+0x15c>)
 800dd24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	695b      	ldr	r3, [r3, #20]
 800dd2e:	492d      	ldr	r1, [pc, #180]	; (800dde4 <RCCEx_PLL2_Config+0x15c>)
 800dd30:	4313      	orrs	r3, r2
 800dd32:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800dd34:	4b2b      	ldr	r3, [pc, #172]	; (800dde4 <RCCEx_PLL2_Config+0x15c>)
 800dd36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd38:	f023 0220 	bic.w	r2, r3, #32
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	699b      	ldr	r3, [r3, #24]
 800dd40:	4928      	ldr	r1, [pc, #160]	; (800dde4 <RCCEx_PLL2_Config+0x15c>)
 800dd42:	4313      	orrs	r3, r2
 800dd44:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800dd46:	4b27      	ldr	r3, [pc, #156]	; (800dde4 <RCCEx_PLL2_Config+0x15c>)
 800dd48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd4a:	4a26      	ldr	r2, [pc, #152]	; (800dde4 <RCCEx_PLL2_Config+0x15c>)
 800dd4c:	f023 0310 	bic.w	r3, r3, #16
 800dd50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800dd52:	4b24      	ldr	r3, [pc, #144]	; (800dde4 <RCCEx_PLL2_Config+0x15c>)
 800dd54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dd56:	4b24      	ldr	r3, [pc, #144]	; (800dde8 <RCCEx_PLL2_Config+0x160>)
 800dd58:	4013      	ands	r3, r2
 800dd5a:	687a      	ldr	r2, [r7, #4]
 800dd5c:	69d2      	ldr	r2, [r2, #28]
 800dd5e:	00d2      	lsls	r2, r2, #3
 800dd60:	4920      	ldr	r1, [pc, #128]	; (800dde4 <RCCEx_PLL2_Config+0x15c>)
 800dd62:	4313      	orrs	r3, r2
 800dd64:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800dd66:	4b1f      	ldr	r3, [pc, #124]	; (800dde4 <RCCEx_PLL2_Config+0x15c>)
 800dd68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd6a:	4a1e      	ldr	r2, [pc, #120]	; (800dde4 <RCCEx_PLL2_Config+0x15c>)
 800dd6c:	f043 0310 	orr.w	r3, r3, #16
 800dd70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d106      	bne.n	800dd86 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800dd78:	4b1a      	ldr	r3, [pc, #104]	; (800dde4 <RCCEx_PLL2_Config+0x15c>)
 800dd7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd7c:	4a19      	ldr	r2, [pc, #100]	; (800dde4 <RCCEx_PLL2_Config+0x15c>)
 800dd7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dd82:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dd84:	e00f      	b.n	800dda6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dd86:	683b      	ldr	r3, [r7, #0]
 800dd88:	2b01      	cmp	r3, #1
 800dd8a:	d106      	bne.n	800dd9a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800dd8c:	4b15      	ldr	r3, [pc, #84]	; (800dde4 <RCCEx_PLL2_Config+0x15c>)
 800dd8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd90:	4a14      	ldr	r2, [pc, #80]	; (800dde4 <RCCEx_PLL2_Config+0x15c>)
 800dd92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dd96:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dd98:	e005      	b.n	800dda6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800dd9a:	4b12      	ldr	r3, [pc, #72]	; (800dde4 <RCCEx_PLL2_Config+0x15c>)
 800dd9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd9e:	4a11      	ldr	r2, [pc, #68]	; (800dde4 <RCCEx_PLL2_Config+0x15c>)
 800dda0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dda4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800dda6:	4b0f      	ldr	r3, [pc, #60]	; (800dde4 <RCCEx_PLL2_Config+0x15c>)
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	4a0e      	ldr	r2, [pc, #56]	; (800dde4 <RCCEx_PLL2_Config+0x15c>)
 800ddac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ddb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ddb2:	f7f6 f9af 	bl	8004114 <HAL_GetTick>
 800ddb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ddb8:	e008      	b.n	800ddcc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ddba:	f7f6 f9ab 	bl	8004114 <HAL_GetTick>
 800ddbe:	4602      	mov	r2, r0
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	1ad3      	subs	r3, r2, r3
 800ddc4:	2b02      	cmp	r3, #2
 800ddc6:	d901      	bls.n	800ddcc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ddc8:	2303      	movs	r3, #3
 800ddca:	e006      	b.n	800ddda <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ddcc:	4b05      	ldr	r3, [pc, #20]	; (800dde4 <RCCEx_PLL2_Config+0x15c>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d0f0      	beq.n	800ddba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ddd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddda:	4618      	mov	r0, r3
 800dddc:	3710      	adds	r7, #16
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}
 800dde2:	bf00      	nop
 800dde4:	58024400 	.word	0x58024400
 800dde8:	ffff0007 	.word	0xffff0007

0800ddec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b084      	sub	sp, #16
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
 800ddf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ddfa:	4b53      	ldr	r3, [pc, #332]	; (800df48 <RCCEx_PLL3_Config+0x15c>)
 800ddfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddfe:	f003 0303 	and.w	r3, r3, #3
 800de02:	2b03      	cmp	r3, #3
 800de04:	d101      	bne.n	800de0a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800de06:	2301      	movs	r3, #1
 800de08:	e099      	b.n	800df3e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800de0a:	4b4f      	ldr	r3, [pc, #316]	; (800df48 <RCCEx_PLL3_Config+0x15c>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	4a4e      	ldr	r2, [pc, #312]	; (800df48 <RCCEx_PLL3_Config+0x15c>)
 800de10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800de14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800de16:	f7f6 f97d 	bl	8004114 <HAL_GetTick>
 800de1a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800de1c:	e008      	b.n	800de30 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800de1e:	f7f6 f979 	bl	8004114 <HAL_GetTick>
 800de22:	4602      	mov	r2, r0
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	1ad3      	subs	r3, r2, r3
 800de28:	2b02      	cmp	r3, #2
 800de2a:	d901      	bls.n	800de30 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800de2c:	2303      	movs	r3, #3
 800de2e:	e086      	b.n	800df3e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800de30:	4b45      	ldr	r3, [pc, #276]	; (800df48 <RCCEx_PLL3_Config+0x15c>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d1f0      	bne.n	800de1e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800de3c:	4b42      	ldr	r3, [pc, #264]	; (800df48 <RCCEx_PLL3_Config+0x15c>)
 800de3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de40:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	051b      	lsls	r3, r3, #20
 800de4a:	493f      	ldr	r1, [pc, #252]	; (800df48 <RCCEx_PLL3_Config+0x15c>)
 800de4c:	4313      	orrs	r3, r2
 800de4e:	628b      	str	r3, [r1, #40]	; 0x28
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	685b      	ldr	r3, [r3, #4]
 800de54:	3b01      	subs	r3, #1
 800de56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	689b      	ldr	r3, [r3, #8]
 800de5e:	3b01      	subs	r3, #1
 800de60:	025b      	lsls	r3, r3, #9
 800de62:	b29b      	uxth	r3, r3
 800de64:	431a      	orrs	r2, r3
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	68db      	ldr	r3, [r3, #12]
 800de6a:	3b01      	subs	r3, #1
 800de6c:	041b      	lsls	r3, r3, #16
 800de6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800de72:	431a      	orrs	r2, r3
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	691b      	ldr	r3, [r3, #16]
 800de78:	3b01      	subs	r3, #1
 800de7a:	061b      	lsls	r3, r3, #24
 800de7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800de80:	4931      	ldr	r1, [pc, #196]	; (800df48 <RCCEx_PLL3_Config+0x15c>)
 800de82:	4313      	orrs	r3, r2
 800de84:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800de86:	4b30      	ldr	r3, [pc, #192]	; (800df48 <RCCEx_PLL3_Config+0x15c>)
 800de88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de8a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	695b      	ldr	r3, [r3, #20]
 800de92:	492d      	ldr	r1, [pc, #180]	; (800df48 <RCCEx_PLL3_Config+0x15c>)
 800de94:	4313      	orrs	r3, r2
 800de96:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800de98:	4b2b      	ldr	r3, [pc, #172]	; (800df48 <RCCEx_PLL3_Config+0x15c>)
 800de9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de9c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	699b      	ldr	r3, [r3, #24]
 800dea4:	4928      	ldr	r1, [pc, #160]	; (800df48 <RCCEx_PLL3_Config+0x15c>)
 800dea6:	4313      	orrs	r3, r2
 800dea8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800deaa:	4b27      	ldr	r3, [pc, #156]	; (800df48 <RCCEx_PLL3_Config+0x15c>)
 800deac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deae:	4a26      	ldr	r2, [pc, #152]	; (800df48 <RCCEx_PLL3_Config+0x15c>)
 800deb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800deb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800deb6:	4b24      	ldr	r3, [pc, #144]	; (800df48 <RCCEx_PLL3_Config+0x15c>)
 800deb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800deba:	4b24      	ldr	r3, [pc, #144]	; (800df4c <RCCEx_PLL3_Config+0x160>)
 800debc:	4013      	ands	r3, r2
 800debe:	687a      	ldr	r2, [r7, #4]
 800dec0:	69d2      	ldr	r2, [r2, #28]
 800dec2:	00d2      	lsls	r2, r2, #3
 800dec4:	4920      	ldr	r1, [pc, #128]	; (800df48 <RCCEx_PLL3_Config+0x15c>)
 800dec6:	4313      	orrs	r3, r2
 800dec8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800deca:	4b1f      	ldr	r3, [pc, #124]	; (800df48 <RCCEx_PLL3_Config+0x15c>)
 800decc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dece:	4a1e      	ldr	r2, [pc, #120]	; (800df48 <RCCEx_PLL3_Config+0x15c>)
 800ded0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ded4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d106      	bne.n	800deea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800dedc:	4b1a      	ldr	r3, [pc, #104]	; (800df48 <RCCEx_PLL3_Config+0x15c>)
 800dede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dee0:	4a19      	ldr	r2, [pc, #100]	; (800df48 <RCCEx_PLL3_Config+0x15c>)
 800dee2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800dee6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dee8:	e00f      	b.n	800df0a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	2b01      	cmp	r3, #1
 800deee:	d106      	bne.n	800defe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800def0:	4b15      	ldr	r3, [pc, #84]	; (800df48 <RCCEx_PLL3_Config+0x15c>)
 800def2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800def4:	4a14      	ldr	r2, [pc, #80]	; (800df48 <RCCEx_PLL3_Config+0x15c>)
 800def6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800defa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800defc:	e005      	b.n	800df0a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800defe:	4b12      	ldr	r3, [pc, #72]	; (800df48 <RCCEx_PLL3_Config+0x15c>)
 800df00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df02:	4a11      	ldr	r2, [pc, #68]	; (800df48 <RCCEx_PLL3_Config+0x15c>)
 800df04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800df08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800df0a:	4b0f      	ldr	r3, [pc, #60]	; (800df48 <RCCEx_PLL3_Config+0x15c>)
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	4a0e      	ldr	r2, [pc, #56]	; (800df48 <RCCEx_PLL3_Config+0x15c>)
 800df10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800df14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800df16:	f7f6 f8fd 	bl	8004114 <HAL_GetTick>
 800df1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800df1c:	e008      	b.n	800df30 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800df1e:	f7f6 f8f9 	bl	8004114 <HAL_GetTick>
 800df22:	4602      	mov	r2, r0
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	1ad3      	subs	r3, r2, r3
 800df28:	2b02      	cmp	r3, #2
 800df2a:	d901      	bls.n	800df30 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800df2c:	2303      	movs	r3, #3
 800df2e:	e006      	b.n	800df3e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800df30:	4b05      	ldr	r3, [pc, #20]	; (800df48 <RCCEx_PLL3_Config+0x15c>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d0f0      	beq.n	800df1e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800df3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800df3e:	4618      	mov	r0, r3
 800df40:	3710      	adds	r7, #16
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}
 800df46:	bf00      	nop
 800df48:	58024400 	.word	0x58024400
 800df4c:	ffff0007 	.word	0xffff0007

0800df50 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b08a      	sub	sp, #40	; 0x28
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d101      	bne.n	800df62 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800df5e:	2301      	movs	r3, #1
 800df60:	e075      	b.n	800e04e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800df68:	b2db      	uxtb	r3, r3
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d105      	bne.n	800df7a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	2200      	movs	r2, #0
 800df72:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800df74:	6878      	ldr	r0, [r7, #4]
 800df76:	f7f5 f965 	bl	8003244 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	2204      	movs	r2, #4
 800df7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f000 f868 	bl	800e058 <HAL_SD_InitCard>
 800df88:	4603      	mov	r3, r0
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d001      	beq.n	800df92 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800df8e:	2301      	movs	r3, #1
 800df90:	e05d      	b.n	800e04e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800df92:	f107 0308 	add.w	r3, r7, #8
 800df96:	4619      	mov	r1, r3
 800df98:	6878      	ldr	r0, [r7, #4]
 800df9a:	f000 fdaf 	bl	800eafc <HAL_SD_GetCardStatus>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d001      	beq.n	800dfa8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800dfa4:	2301      	movs	r3, #1
 800dfa6:	e052      	b.n	800e04e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800dfa8:	7e3b      	ldrb	r3, [r7, #24]
 800dfaa:	b2db      	uxtb	r3, r3
 800dfac:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800dfae:	7e7b      	ldrb	r3, [r7, #25]
 800dfb0:	b2db      	uxtb	r3, r3
 800dfb2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfb8:	2b01      	cmp	r3, #1
 800dfba:	d10a      	bne.n	800dfd2 <HAL_SD_Init+0x82>
 800dfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d102      	bne.n	800dfc8 <HAL_SD_Init+0x78>
 800dfc2:	6a3b      	ldr	r3, [r7, #32]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d004      	beq.n	800dfd2 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dfce:	659a      	str	r2, [r3, #88]	; 0x58
 800dfd0:	e00b      	b.n	800dfea <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfd6:	2b01      	cmp	r3, #1
 800dfd8:	d104      	bne.n	800dfe4 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dfe0:	659a      	str	r2, [r3, #88]	; 0x58
 800dfe2:	e002      	b.n	800dfea <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	68db      	ldr	r3, [r3, #12]
 800dfee:	4619      	mov	r1, r3
 800dff0:	6878      	ldr	r0, [r7, #4]
 800dff2:	f000 fe6d 	bl	800ecd0 <HAL_SD_ConfigWideBusOperation>
 800dff6:	4603      	mov	r3, r0
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d001      	beq.n	800e000 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800dffc:	2301      	movs	r3, #1
 800dffe:	e026      	b.n	800e04e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800e000:	f7f6 f888 	bl	8004114 <HAL_GetTick>
 800e004:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800e006:	e011      	b.n	800e02c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e008:	f7f6 f884 	bl	8004114 <HAL_GetTick>
 800e00c:	4602      	mov	r2, r0
 800e00e:	69fb      	ldr	r3, [r7, #28]
 800e010:	1ad3      	subs	r3, r2, r3
 800e012:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e016:	d109      	bne.n	800e02c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e01e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2201      	movs	r2, #1
 800e024:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800e028:	2303      	movs	r3, #3
 800e02a:	e010      	b.n	800e04e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800e02c:	6878      	ldr	r0, [r7, #4]
 800e02e:	f000 ff61 	bl	800eef4 <HAL_SD_GetCardState>
 800e032:	4603      	mov	r3, r0
 800e034:	2b04      	cmp	r3, #4
 800e036:	d1e7      	bne.n	800e008 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2200      	movs	r2, #0
 800e03c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	2200      	movs	r2, #0
 800e042:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2201      	movs	r2, #1
 800e048:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800e04c:	2300      	movs	r3, #0
}
 800e04e:	4618      	mov	r0, r3
 800e050:	3728      	adds	r7, #40	; 0x28
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}
	...

0800e058 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e058:	b590      	push	{r4, r7, lr}
 800e05a:	b08d      	sub	sp, #52	; 0x34
 800e05c:	af02      	add	r7, sp, #8
 800e05e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800e060:	2300      	movs	r3, #0
 800e062:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800e064:	2300      	movs	r3, #0
 800e066:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800e068:	2300      	movs	r3, #0
 800e06a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800e06c:	2300      	movs	r3, #0
 800e06e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800e070:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800e074:	f04f 0100 	mov.w	r1, #0
 800e078:	f7fe fd24 	bl	800cac4 <HAL_RCCEx_GetPeriphCLKFreq>
 800e07c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800e07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e080:	2b00      	cmp	r3, #0
 800e082:	d109      	bne.n	800e098 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2201      	movs	r2, #1
 800e088:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e092:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e094:	2301      	movs	r3, #1
 800e096:	e070      	b.n	800e17a <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800e098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e09a:	0a1b      	lsrs	r3, r3, #8
 800e09c:	4a39      	ldr	r2, [pc, #228]	; (800e184 <HAL_SD_InitCard+0x12c>)
 800e09e:	fba2 2303 	umull	r2, r3, r2, r3
 800e0a2:	091b      	lsrs	r3, r3, #4
 800e0a4:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681c      	ldr	r4, [r3, #0]
 800e0aa:	466a      	mov	r2, sp
 800e0ac:	f107 0318 	add.w	r3, r7, #24
 800e0b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e0b4:	e882 0003 	stmia.w	r2, {r0, r1}
 800e0b8:	f107 030c 	add.w	r3, r7, #12
 800e0bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e0be:	4620      	mov	r0, r4
 800e0c0:	f004 fec4 	bl	8012e4c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f004 ff07 	bl	8012edc <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800e0ce:	69fb      	ldr	r3, [r7, #28]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d005      	beq.n	800e0e0 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800e0d4:	69fb      	ldr	r3, [r7, #28]
 800e0d6:	005b      	lsls	r3, r3, #1
 800e0d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0da:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0de:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800e0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d007      	beq.n	800e0f6 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800e0e6:	4a28      	ldr	r2, [pc, #160]	; (800e188 <HAL_SD_InitCard+0x130>)
 800e0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0ee:	3301      	adds	r3, #1
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	f7f6 f81b 	bl	800412c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800e0f6:	6878      	ldr	r0, [r7, #4]
 800e0f8:	f000 ffea 	bl	800f0d0 <SD_PowerON>
 800e0fc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e0fe:	6a3b      	ldr	r3, [r7, #32]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d00b      	beq.n	800e11c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	2201      	movs	r2, #1
 800e108:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e110:	6a3b      	ldr	r3, [r7, #32]
 800e112:	431a      	orrs	r2, r3
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e118:	2301      	movs	r3, #1
 800e11a:	e02e      	b.n	800e17a <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f000 ff09 	bl	800ef34 <SD_InitCard>
 800e122:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e124:	6a3b      	ldr	r3, [r7, #32]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d00b      	beq.n	800e142 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	2201      	movs	r2, #1
 800e12e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e136:	6a3b      	ldr	r3, [r7, #32]
 800e138:	431a      	orrs	r2, r3
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e13e:	2301      	movs	r3, #1
 800e140:	e01b      	b.n	800e17a <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e14a:	4618      	mov	r0, r3
 800e14c:	f004 ff5c 	bl	8013008 <SDMMC_CmdBlockLength>
 800e150:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e152:	6a3b      	ldr	r3, [r7, #32]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d00f      	beq.n	800e178 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	4a0b      	ldr	r2, [pc, #44]	; (800e18c <HAL_SD_InitCard+0x134>)
 800e15e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e164:	6a3b      	ldr	r3, [r7, #32]
 800e166:	431a      	orrs	r2, r3
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2201      	movs	r2, #1
 800e170:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800e174:	2301      	movs	r3, #1
 800e176:	e000      	b.n	800e17a <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800e178:	2300      	movs	r3, #0
}
 800e17a:	4618      	mov	r0, r3
 800e17c:	372c      	adds	r7, #44	; 0x2c
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd90      	pop	{r4, r7, pc}
 800e182:	bf00      	nop
 800e184:	014f8b59 	.word	0x014f8b59
 800e188:	00012110 	.word	0x00012110
 800e18c:	1fe00fff 	.word	0x1fe00fff

0800e190 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b08c      	sub	sp, #48	; 0x30
 800e194:	af00      	add	r7, sp, #0
 800e196:	60f8      	str	r0, [r7, #12]
 800e198:	60b9      	str	r1, [r7, #8]
 800e19a:	607a      	str	r2, [r7, #4]
 800e19c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800e1a2:	68bb      	ldr	r3, [r7, #8]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d107      	bne.n	800e1b8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1ac:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	e08d      	b.n	800e2d4 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e1be:	b2db      	uxtb	r3, r3
 800e1c0:	2b01      	cmp	r3, #1
 800e1c2:	f040 8086 	bne.w	800e2d2 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e1cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	441a      	add	r2, r3
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1d6:	429a      	cmp	r2, r3
 800e1d8:	d907      	bls.n	800e1ea <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1de:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	e074      	b.n	800e2d4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	2203      	movs	r2, #3
 800e1ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	68ba      	ldr	r2, [r7, #8]
 800e1fe:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	025a      	lsls	r2, r3, #9
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e20c:	2b01      	cmp	r3, #1
 800e20e:	d002      	beq.n	800e216 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800e210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e212:	025b      	lsls	r3, r3, #9
 800e214:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e216:	f04f 33ff 	mov.w	r3, #4294967295
 800e21a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e21c:	683b      	ldr	r3, [r7, #0]
 800e21e:	025b      	lsls	r3, r3, #9
 800e220:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e222:	2390      	movs	r3, #144	; 0x90
 800e224:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e226:	2302      	movs	r3, #2
 800e228:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e22a:	2300      	movs	r3, #0
 800e22c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800e22e:	2300      	movs	r3, #0
 800e230:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	f107 0210 	add.w	r2, r7, #16
 800e23a:	4611      	mov	r1, r2
 800e23c:	4618      	mov	r0, r3
 800e23e:	f004 feb7 	bl	8012fb0 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	68da      	ldr	r2, [r3, #12]
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e250:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	68ba      	ldr	r2, [r7, #8]
 800e258:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	2201      	movs	r2, #1
 800e260:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	2b01      	cmp	r3, #1
 800e266:	d90a      	bls.n	800e27e <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	2282      	movs	r2, #130	; 0x82
 800e26c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e274:	4618      	mov	r0, r3
 800e276:	f004 ff0d 	bl	8013094 <SDMMC_CmdReadMultiBlock>
 800e27a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e27c:	e009      	b.n	800e292 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	2281      	movs	r2, #129	; 0x81
 800e282:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e28a:	4618      	mov	r0, r3
 800e28c:	f004 fedf 	bl	801304e <SDMMC_CmdReadSingleBlock>
 800e290:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800e292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e294:	2b00      	cmp	r3, #0
 800e296:	d012      	beq.n	800e2be <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	4a0f      	ldr	r2, [pc, #60]	; (800e2dc <HAL_SD_ReadBlocks_DMA+0x14c>)
 800e29e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2a6:	431a      	orrs	r2, r3
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	2201      	movs	r2, #1
 800e2b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800e2ba:	2301      	movs	r3, #1
 800e2bc:	e00a      	b.n	800e2d4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800e2cc:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	e000      	b.n	800e2d4 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800e2d2:	2302      	movs	r3, #2
  }
}
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	3730      	adds	r7, #48	; 0x30
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}
 800e2dc:	1fe00fff 	.word	0x1fe00fff

0800e2e0 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b08c      	sub	sp, #48	; 0x30
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	60f8      	str	r0, [r7, #12]
 800e2e8:	60b9      	str	r1, [r7, #8]
 800e2ea:	607a      	str	r2, [r7, #4]
 800e2ec:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800e2f2:	68bb      	ldr	r3, [r7, #8]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d107      	bne.n	800e308 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2fc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e304:	2301      	movs	r3, #1
 800e306:	e08d      	b.n	800e424 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e30e:	b2db      	uxtb	r3, r3
 800e310:	2b01      	cmp	r3, #1
 800e312:	f040 8086 	bne.w	800e422 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	2200      	movs	r2, #0
 800e31a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e31c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	441a      	add	r2, r3
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e326:	429a      	cmp	r2, r3
 800e328:	d907      	bls.n	800e33a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e32e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e336:	2301      	movs	r3, #1
 800e338:	e074      	b.n	800e424 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	2203      	movs	r2, #3
 800e33e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	2200      	movs	r2, #0
 800e348:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	68ba      	ldr	r2, [r7, #8]
 800e34e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	025a      	lsls	r2, r3, #9
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e35c:	2b01      	cmp	r3, #1
 800e35e:	d002      	beq.n	800e366 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800e360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e362:	025b      	lsls	r3, r3, #9
 800e364:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e366:	f04f 33ff 	mov.w	r3, #4294967295
 800e36a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	025b      	lsls	r3, r3, #9
 800e370:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e372:	2390      	movs	r3, #144	; 0x90
 800e374:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800e376:	2300      	movs	r3, #0
 800e378:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e37a:	2300      	movs	r3, #0
 800e37c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800e37e:	2300      	movs	r3, #0
 800e380:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	f107 0210 	add.w	r2, r7, #16
 800e38a:	4611      	mov	r1, r2
 800e38c:	4618      	mov	r0, r3
 800e38e:	f004 fe0f 	bl	8012fb0 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	68da      	ldr	r2, [r3, #12]
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e3a0:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	68ba      	ldr	r2, [r7, #8]
 800e3a8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	2201      	movs	r2, #1
 800e3b0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	2b01      	cmp	r3, #1
 800e3b6:	d90a      	bls.n	800e3ce <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	22a0      	movs	r2, #160	; 0xa0
 800e3bc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f004 feab 	bl	8013120 <SDMMC_CmdWriteMultiBlock>
 800e3ca:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e3cc:	e009      	b.n	800e3e2 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	2290      	movs	r2, #144	; 0x90
 800e3d2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e3da:	4618      	mov	r0, r3
 800e3dc:	f004 fe7d 	bl	80130da <SDMMC_CmdWriteSingleBlock>
 800e3e0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800e3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d012      	beq.n	800e40e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	4a0f      	ldr	r2, [pc, #60]	; (800e42c <HAL_SD_WriteBlocks_DMA+0x14c>)
 800e3ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3f6:	431a      	orrs	r2, r3
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	2201      	movs	r2, #1
 800e400:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	2200      	movs	r2, #0
 800e408:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800e40a:	2301      	movs	r3, #1
 800e40c:	e00a      	b.n	800e424 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800e41c:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800e41e:	2300      	movs	r3, #0
 800e420:	e000      	b.n	800e424 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800e422:	2302      	movs	r3, #2
  }
}
 800e424:	4618      	mov	r0, r3
 800e426:	3730      	adds	r7, #48	; 0x30
 800e428:	46bd      	mov	sp, r7
 800e42a:	bd80      	pop	{r7, pc}
 800e42c:	1fe00fff 	.word	0x1fe00fff

0800e430 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b084      	sub	sp, #16
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e43c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e444:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d008      	beq.n	800e45e <HAL_SD_IRQHandler+0x2e>
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	f003 0308 	and.w	r3, r3, #8
 800e452:	2b00      	cmp	r3, #0
 800e454:	d003      	beq.n	800e45e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800e456:	6878      	ldr	r0, [r7, #4]
 800e458:	f001 f926 	bl	800f6a8 <SD_Read_IT>
 800e45c:	e19a      	b.n	800e794 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e468:	2b00      	cmp	r3, #0
 800e46a:	f000 80ac 	beq.w	800e5c6 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e476:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681a      	ldr	r2, [r3, #0]
 800e482:	4b59      	ldr	r3, [pc, #356]	; (800e5e8 <HAL_SD_IRQHandler+0x1b8>)
 800e484:	400b      	ands	r3, r1
 800e486:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e496:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	68da      	ldr	r2, [r3, #12]
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e4a6:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	f003 0308 	and.w	r3, r3, #8
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d038      	beq.n	800e524 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	f003 0302 	and.w	r3, r3, #2
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d104      	bne.n	800e4c6 <HAL_SD_IRQHandler+0x96>
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	f003 0320 	and.w	r3, r3, #32
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d011      	beq.n	800e4ea <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f004 fe4c 	bl	8013168 <SDMMC_CmdStopTransfer>
 800e4d0:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800e4d2:	68bb      	ldr	r3, [r7, #8]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d008      	beq.n	800e4ea <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e4dc:	68bb      	ldr	r3, [r7, #8]
 800e4de:	431a      	orrs	r2, r3
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800e4e4:	6878      	ldr	r0, [r7, #4]
 800e4e6:	f000 f95b 	bl	800e7a0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	4a3f      	ldr	r2, [pc, #252]	; (800e5ec <HAL_SD_IRQHandler+0x1bc>)
 800e4f0:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2201      	movs	r2, #1
 800e4f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	f003 0301 	and.w	r3, r3, #1
 800e506:	2b00      	cmp	r3, #0
 800e508:	d104      	bne.n	800e514 <HAL_SD_IRQHandler+0xe4>
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	f003 0302 	and.w	r3, r3, #2
 800e510:	2b00      	cmp	r3, #0
 800e512:	d003      	beq.n	800e51c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800e514:	6878      	ldr	r0, [r7, #4]
 800e516:	f006 fe55 	bl	80151c4 <HAL_SD_RxCpltCallback>
 800e51a:	e13b      	b.n	800e794 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800e51c:	6878      	ldr	r0, [r7, #4]
 800e51e:	f006 fe47 	bl	80151b0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800e522:	e137      	b.n	800e794 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	f000 8132 	beq.w	800e794 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	2200      	movs	r2, #0
 800e536:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	2200      	movs	r2, #0
 800e53e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	2200      	movs	r2, #0
 800e546:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	f003 0302 	and.w	r3, r3, #2
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d104      	bne.n	800e55c <HAL_SD_IRQHandler+0x12c>
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	f003 0320 	and.w	r3, r3, #32
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d011      	beq.n	800e580 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	4618      	mov	r0, r3
 800e562:	f004 fe01 	bl	8013168 <SDMMC_CmdStopTransfer>
 800e566:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800e568:	68bb      	ldr	r3, [r7, #8]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d008      	beq.n	800e580 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e572:	68bb      	ldr	r3, [r7, #8]
 800e574:	431a      	orrs	r2, r3
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800e57a:	6878      	ldr	r0, [r7, #4]
 800e57c:	f000 f910 	bl	800e7a0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	2201      	movs	r2, #1
 800e584:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	2200      	movs	r2, #0
 800e58c:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	f003 0310 	and.w	r3, r3, #16
 800e594:	2b00      	cmp	r3, #0
 800e596:	d104      	bne.n	800e5a2 <HAL_SD_IRQHandler+0x172>
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	f003 0320 	and.w	r3, r3, #32
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d002      	beq.n	800e5a8 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800e5a2:	6878      	ldr	r0, [r7, #4]
 800e5a4:	f006 fe04 	bl	80151b0 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	f003 0301 	and.w	r3, r3, #1
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d105      	bne.n	800e5be <HAL_SD_IRQHandler+0x18e>
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	f003 0302 	and.w	r3, r3, #2
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	f000 80eb 	beq.w	800e794 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800e5be:	6878      	ldr	r0, [r7, #4]
 800e5c0:	f006 fe00 	bl	80151c4 <HAL_SD_RxCpltCallback>
}
 800e5c4:	e0e6      	b.n	800e794 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d00d      	beq.n	800e5f0 <HAL_SD_IRQHandler+0x1c0>
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	f003 0308 	and.w	r3, r3, #8
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d008      	beq.n	800e5f0 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	f001 f8a8 	bl	800f734 <SD_Write_IT>
 800e5e4:	e0d6      	b.n	800e794 <HAL_SD_IRQHandler+0x364>
 800e5e6:	bf00      	nop
 800e5e8:	ffff3ec5 	.word	0xffff3ec5
 800e5ec:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5f6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	f000 809d 	beq.w	800e73a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e606:	f003 0302 	and.w	r3, r3, #2
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d005      	beq.n	800e61a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e612:	f043 0202 	orr.w	r2, r3, #2
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e620:	f003 0308 	and.w	r3, r3, #8
 800e624:	2b00      	cmp	r3, #0
 800e626:	d005      	beq.n	800e634 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e62c:	f043 0208 	orr.w	r2, r3, #8
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e63a:	f003 0320 	and.w	r3, r3, #32
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d005      	beq.n	800e64e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e646:	f043 0220 	orr.w	r2, r3, #32
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e654:	f003 0310 	and.w	r3, r3, #16
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d005      	beq.n	800e668 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e660:	f043 0210 	orr.w	r2, r3, #16
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	4a4b      	ldr	r2, [pc, #300]	; (800e79c <HAL_SD_IRQHandler+0x36c>)
 800e66e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800e67e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	68da      	ldr	r2, [r3, #12]
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e68e:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e69e:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	68da      	ldr	r2, [r3, #12]
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e6ae:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f004 fd57 	bl	8013168 <SDMMC_CmdStopTransfer>
 800e6ba:	4602      	mov	r2, r0
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6c0:	431a      	orrs	r2, r3
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	68da      	ldr	r2, [r3, #12]
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e6d4:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e6de:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	f003 0308 	and.w	r3, r3, #8
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d00a      	beq.n	800e700 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	2201      	movs	r2, #1
 800e6ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800e6f8:	6878      	ldr	r0, [r7, #4]
 800e6fa:	f000 f851 	bl	800e7a0 <HAL_SD_ErrorCallback>
}
 800e6fe:	e049      	b.n	800e794 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e706:	2b00      	cmp	r3, #0
 800e708:	d044      	beq.n	800e794 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d040      	beq.n	800e794 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e720:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	2200      	movs	r2, #0
 800e728:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	2201      	movs	r2, #1
 800e72e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800e732:	6878      	ldr	r0, [r7, #4]
 800e734:	f000 f834 	bl	800e7a0 <HAL_SD_ErrorCallback>
}
 800e738:	e02c      	b.n	800e794 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e744:	2b00      	cmp	r3, #0
 800e746:	d025      	beq.n	800e794 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e750:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e758:	f003 0304 	and.w	r3, r3, #4
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d10c      	bne.n	800e77a <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	f003 0320 	and.w	r3, r3, #32
 800e766:	2b00      	cmp	r3, #0
 800e768:	d003      	beq.n	800e772 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800e76a:	6878      	ldr	r0, [r7, #4]
 800e76c:	f001 f84a 	bl	800f804 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800e770:	e010      	b.n	800e794 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800e772:	6878      	ldr	r0, [r7, #4]
 800e774:	f001 f832 	bl	800f7dc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800e778:	e00c      	b.n	800e794 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	f003 0320 	and.w	r3, r3, #32
 800e780:	2b00      	cmp	r3, #0
 800e782:	d003      	beq.n	800e78c <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800e784:	6878      	ldr	r0, [r7, #4]
 800e786:	f001 f833 	bl	800f7f0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800e78a:	e003      	b.n	800e794 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800e78c:	6878      	ldr	r0, [r7, #4]
 800e78e:	f001 f81b 	bl	800f7c8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800e792:	e7ff      	b.n	800e794 <HAL_SD_IRQHandler+0x364>
 800e794:	bf00      	nop
 800e796:	3710      	adds	r7, #16
 800e798:	46bd      	mov	sp, r7
 800e79a:	bd80      	pop	{r7, pc}
 800e79c:	18000f3a 	.word	0x18000f3a

0800e7a0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800e7a0:	b480      	push	{r7}
 800e7a2:	b083      	sub	sp, #12
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800e7a8:	bf00      	nop
 800e7aa:	370c      	adds	r7, #12
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b2:	4770      	bx	lr

0800e7b4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800e7b4:	b480      	push	{r7}
 800e7b6:	b083      	sub	sp, #12
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
 800e7bc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e7c2:	0f9b      	lsrs	r3, r3, #30
 800e7c4:	b2da      	uxtb	r2, r3
 800e7c6:	683b      	ldr	r3, [r7, #0]
 800e7c8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e7ce:	0e9b      	lsrs	r3, r3, #26
 800e7d0:	b2db      	uxtb	r3, r3
 800e7d2:	f003 030f 	and.w	r3, r3, #15
 800e7d6:	b2da      	uxtb	r2, r3
 800e7d8:	683b      	ldr	r3, [r7, #0]
 800e7da:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e7e0:	0e1b      	lsrs	r3, r3, #24
 800e7e2:	b2db      	uxtb	r3, r3
 800e7e4:	f003 0303 	and.w	r3, r3, #3
 800e7e8:	b2da      	uxtb	r2, r3
 800e7ea:	683b      	ldr	r3, [r7, #0]
 800e7ec:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e7f2:	0c1b      	lsrs	r3, r3, #16
 800e7f4:	b2da      	uxtb	r2, r3
 800e7f6:	683b      	ldr	r3, [r7, #0]
 800e7f8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e7fe:	0a1b      	lsrs	r3, r3, #8
 800e800:	b2da      	uxtb	r2, r3
 800e802:	683b      	ldr	r3, [r7, #0]
 800e804:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e80a:	b2da      	uxtb	r2, r3
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e814:	0d1b      	lsrs	r3, r3, #20
 800e816:	b29a      	uxth	r2, r3
 800e818:	683b      	ldr	r3, [r7, #0]
 800e81a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e820:	0c1b      	lsrs	r3, r3, #16
 800e822:	b2db      	uxtb	r3, r3
 800e824:	f003 030f 	and.w	r3, r3, #15
 800e828:	b2da      	uxtb	r2, r3
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e832:	0bdb      	lsrs	r3, r3, #15
 800e834:	b2db      	uxtb	r3, r3
 800e836:	f003 0301 	and.w	r3, r3, #1
 800e83a:	b2da      	uxtb	r2, r3
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e844:	0b9b      	lsrs	r3, r3, #14
 800e846:	b2db      	uxtb	r3, r3
 800e848:	f003 0301 	and.w	r3, r3, #1
 800e84c:	b2da      	uxtb	r2, r3
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e856:	0b5b      	lsrs	r3, r3, #13
 800e858:	b2db      	uxtb	r3, r3
 800e85a:	f003 0301 	and.w	r3, r3, #1
 800e85e:	b2da      	uxtb	r2, r3
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e868:	0b1b      	lsrs	r3, r3, #12
 800e86a:	b2db      	uxtb	r3, r3
 800e86c:	f003 0301 	and.w	r3, r3, #1
 800e870:	b2da      	uxtb	r2, r3
 800e872:	683b      	ldr	r3, [r7, #0]
 800e874:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800e876:	683b      	ldr	r3, [r7, #0]
 800e878:	2200      	movs	r2, #0
 800e87a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e880:	2b00      	cmp	r3, #0
 800e882:	d163      	bne.n	800e94c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e888:	009a      	lsls	r2, r3, #2
 800e88a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800e88e:	4013      	ands	r3, r2
 800e890:	687a      	ldr	r2, [r7, #4]
 800e892:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800e894:	0f92      	lsrs	r2, r2, #30
 800e896:	431a      	orrs	r2, r3
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8a0:	0edb      	lsrs	r3, r3, #27
 800e8a2:	b2db      	uxtb	r3, r3
 800e8a4:	f003 0307 	and.w	r3, r3, #7
 800e8a8:	b2da      	uxtb	r2, r3
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8b2:	0e1b      	lsrs	r3, r3, #24
 800e8b4:	b2db      	uxtb	r3, r3
 800e8b6:	f003 0307 	and.w	r3, r3, #7
 800e8ba:	b2da      	uxtb	r2, r3
 800e8bc:	683b      	ldr	r3, [r7, #0]
 800e8be:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8c4:	0d5b      	lsrs	r3, r3, #21
 800e8c6:	b2db      	uxtb	r3, r3
 800e8c8:	f003 0307 	and.w	r3, r3, #7
 800e8cc:	b2da      	uxtb	r2, r3
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8d6:	0c9b      	lsrs	r3, r3, #18
 800e8d8:	b2db      	uxtb	r3, r3
 800e8da:	f003 0307 	and.w	r3, r3, #7
 800e8de:	b2da      	uxtb	r2, r3
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8e8:	0bdb      	lsrs	r3, r3, #15
 800e8ea:	b2db      	uxtb	r3, r3
 800e8ec:	f003 0307 	and.w	r3, r3, #7
 800e8f0:	b2da      	uxtb	r2, r3
 800e8f2:	683b      	ldr	r3, [r7, #0]
 800e8f4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800e8f6:	683b      	ldr	r3, [r7, #0]
 800e8f8:	691b      	ldr	r3, [r3, #16]
 800e8fa:	1c5a      	adds	r2, r3, #1
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	7e1b      	ldrb	r3, [r3, #24]
 800e904:	b2db      	uxtb	r3, r3
 800e906:	f003 0307 	and.w	r3, r3, #7
 800e90a:	3302      	adds	r3, #2
 800e90c:	2201      	movs	r2, #1
 800e90e:	fa02 f303 	lsl.w	r3, r2, r3
 800e912:	687a      	ldr	r2, [r7, #4]
 800e914:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e916:	fb03 f202 	mul.w	r2, r3, r2
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	7a1b      	ldrb	r3, [r3, #8]
 800e922:	b2db      	uxtb	r3, r3
 800e924:	f003 030f 	and.w	r3, r3, #15
 800e928:	2201      	movs	r2, #1
 800e92a:	409a      	lsls	r2, r3
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e934:	687a      	ldr	r2, [r7, #4]
 800e936:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800e938:	0a52      	lsrs	r2, r2, #9
 800e93a:	fb03 f202 	mul.w	r2, r3, r2
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e948:	655a      	str	r2, [r3, #84]	; 0x54
 800e94a:	e031      	b.n	800e9b0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e950:	2b01      	cmp	r3, #1
 800e952:	d11d      	bne.n	800e990 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e958:	041b      	lsls	r3, r3, #16
 800e95a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e962:	0c1b      	lsrs	r3, r3, #16
 800e964:	431a      	orrs	r2, r3
 800e966:	683b      	ldr	r3, [r7, #0]
 800e968:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800e96a:	683b      	ldr	r3, [r7, #0]
 800e96c:	691b      	ldr	r3, [r3, #16]
 800e96e:	3301      	adds	r3, #1
 800e970:	029a      	lsls	r2, r3, #10
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e984:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	655a      	str	r2, [r3, #84]	; 0x54
 800e98e:	e00f      	b.n	800e9b0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	4a58      	ldr	r2, [pc, #352]	; (800eaf8 <HAL_SD_GetCardCSD+0x344>)
 800e996:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e99c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	2201      	movs	r2, #1
 800e9a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800e9ac:	2301      	movs	r3, #1
 800e9ae:	e09d      	b.n	800eaec <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e9b4:	0b9b      	lsrs	r3, r3, #14
 800e9b6:	b2db      	uxtb	r3, r3
 800e9b8:	f003 0301 	and.w	r3, r3, #1
 800e9bc:	b2da      	uxtb	r2, r3
 800e9be:	683b      	ldr	r3, [r7, #0]
 800e9c0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e9c6:	09db      	lsrs	r3, r3, #7
 800e9c8:	b2db      	uxtb	r3, r3
 800e9ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e9ce:	b2da      	uxtb	r2, r3
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e9d8:	b2db      	uxtb	r3, r3
 800e9da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e9de:	b2da      	uxtb	r2, r3
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e9e8:	0fdb      	lsrs	r3, r3, #31
 800e9ea:	b2da      	uxtb	r2, r3
 800e9ec:	683b      	ldr	r3, [r7, #0]
 800e9ee:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e9f4:	0f5b      	lsrs	r3, r3, #29
 800e9f6:	b2db      	uxtb	r3, r3
 800e9f8:	f003 0303 	and.w	r3, r3, #3
 800e9fc:	b2da      	uxtb	r2, r3
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea06:	0e9b      	lsrs	r3, r3, #26
 800ea08:	b2db      	uxtb	r3, r3
 800ea0a:	f003 0307 	and.w	r3, r3, #7
 800ea0e:	b2da      	uxtb	r2, r3
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea18:	0d9b      	lsrs	r3, r3, #22
 800ea1a:	b2db      	uxtb	r3, r3
 800ea1c:	f003 030f 	and.w	r3, r3, #15
 800ea20:	b2da      	uxtb	r2, r3
 800ea22:	683b      	ldr	r3, [r7, #0]
 800ea24:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea2a:	0d5b      	lsrs	r3, r3, #21
 800ea2c:	b2db      	uxtb	r3, r3
 800ea2e:	f003 0301 	and.w	r3, r3, #1
 800ea32:	b2da      	uxtb	r2, r3
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ea3a:	683b      	ldr	r3, [r7, #0]
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea46:	0c1b      	lsrs	r3, r3, #16
 800ea48:	b2db      	uxtb	r3, r3
 800ea4a:	f003 0301 	and.w	r3, r3, #1
 800ea4e:	b2da      	uxtb	r2, r3
 800ea50:	683b      	ldr	r3, [r7, #0]
 800ea52:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea5a:	0bdb      	lsrs	r3, r3, #15
 800ea5c:	b2db      	uxtb	r3, r3
 800ea5e:	f003 0301 	and.w	r3, r3, #1
 800ea62:	b2da      	uxtb	r2, r3
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea6e:	0b9b      	lsrs	r3, r3, #14
 800ea70:	b2db      	uxtb	r3, r3
 800ea72:	f003 0301 	and.w	r3, r3, #1
 800ea76:	b2da      	uxtb	r2, r3
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea82:	0b5b      	lsrs	r3, r3, #13
 800ea84:	b2db      	uxtb	r3, r3
 800ea86:	f003 0301 	and.w	r3, r3, #1
 800ea8a:	b2da      	uxtb	r2, r3
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea96:	0b1b      	lsrs	r3, r3, #12
 800ea98:	b2db      	uxtb	r3, r3
 800ea9a:	f003 0301 	and.w	r3, r3, #1
 800ea9e:	b2da      	uxtb	r2, r3
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eaaa:	0a9b      	lsrs	r3, r3, #10
 800eaac:	b2db      	uxtb	r3, r3
 800eaae:	f003 0303 	and.w	r3, r3, #3
 800eab2:	b2da      	uxtb	r2, r3
 800eab4:	683b      	ldr	r3, [r7, #0]
 800eab6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eabe:	0a1b      	lsrs	r3, r3, #8
 800eac0:	b2db      	uxtb	r3, r3
 800eac2:	f003 0303 	and.w	r3, r3, #3
 800eac6:	b2da      	uxtb	r2, r3
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ead2:	085b      	lsrs	r3, r3, #1
 800ead4:	b2db      	uxtb	r3, r3
 800ead6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eada:	b2da      	uxtb	r2, r3
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	2201      	movs	r2, #1
 800eae6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800eaea:	2300      	movs	r3, #0
}
 800eaec:	4618      	mov	r0, r3
 800eaee:	370c      	adds	r7, #12
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf6:	4770      	bx	lr
 800eaf8:	1fe00fff 	.word	0x1fe00fff

0800eafc <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b094      	sub	sp, #80	; 0x50
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
 800eb04:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800eb06:	2300      	movs	r3, #0
 800eb08:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eb12:	b2db      	uxtb	r3, r3
 800eb14:	2b03      	cmp	r3, #3
 800eb16:	d101      	bne.n	800eb1c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800eb18:	2301      	movs	r3, #1
 800eb1a:	e0a7      	b.n	800ec6c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800eb1c:	f107 0308 	add.w	r3, r7, #8
 800eb20:	4619      	mov	r1, r3
 800eb22:	6878      	ldr	r0, [r7, #4]
 800eb24:	f000 fb62 	bl	800f1ec <SD_SendSDStatus>
 800eb28:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800eb2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d011      	beq.n	800eb54 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	4a4f      	ldr	r2, [pc, #316]	; (800ec74 <HAL_SD_GetCardStatus+0x178>)
 800eb36:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb3e:	431a      	orrs	r2, r3
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2201      	movs	r2, #1
 800eb48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800eb52:	e070      	b.n	800ec36 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800eb54:	68bb      	ldr	r3, [r7, #8]
 800eb56:	099b      	lsrs	r3, r3, #6
 800eb58:	b2db      	uxtb	r3, r3
 800eb5a:	f003 0303 	and.w	r3, r3, #3
 800eb5e:	b2da      	uxtb	r2, r3
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800eb64:	68bb      	ldr	r3, [r7, #8]
 800eb66:	095b      	lsrs	r3, r3, #5
 800eb68:	b2db      	uxtb	r3, r3
 800eb6a:	f003 0301 	and.w	r3, r3, #1
 800eb6e:	b2da      	uxtb	r2, r3
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800eb74:	68bb      	ldr	r3, [r7, #8]
 800eb76:	0a1b      	lsrs	r3, r3, #8
 800eb78:	b29b      	uxth	r3, r3
 800eb7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800eb7e:	b29a      	uxth	r2, r3
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	0e1b      	lsrs	r3, r3, #24
 800eb84:	b29b      	uxth	r3, r3
 800eb86:	4313      	orrs	r3, r2
 800eb88:	b29a      	uxth	r2, r3
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	061a      	lsls	r2, r3, #24
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	021b      	lsls	r3, r3, #8
 800eb96:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eb9a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	0a1b      	lsrs	r3, r3, #8
 800eba0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800eba4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	0e1b      	lsrs	r3, r3, #24
 800ebaa:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800ebb0:	693b      	ldr	r3, [r7, #16]
 800ebb2:	b2da      	uxtb	r2, r3
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800ebb8:	693b      	ldr	r3, [r7, #16]
 800ebba:	0a1b      	lsrs	r3, r3, #8
 800ebbc:	b2da      	uxtb	r2, r3
 800ebbe:	683b      	ldr	r3, [r7, #0]
 800ebc0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800ebc2:	693b      	ldr	r3, [r7, #16]
 800ebc4:	0d1b      	lsrs	r3, r3, #20
 800ebc6:	b2db      	uxtb	r3, r3
 800ebc8:	f003 030f 	and.w	r3, r3, #15
 800ebcc:	b2da      	uxtb	r2, r3
 800ebce:	683b      	ldr	r3, [r7, #0]
 800ebd0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800ebd2:	693b      	ldr	r3, [r7, #16]
 800ebd4:	0c1b      	lsrs	r3, r3, #16
 800ebd6:	b29b      	uxth	r3, r3
 800ebd8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ebdc:	b29a      	uxth	r2, r3
 800ebde:	697b      	ldr	r3, [r7, #20]
 800ebe0:	b29b      	uxth	r3, r3
 800ebe2:	b2db      	uxtb	r3, r3
 800ebe4:	b29b      	uxth	r3, r3
 800ebe6:	4313      	orrs	r3, r2
 800ebe8:	b29a      	uxth	r2, r3
 800ebea:	683b      	ldr	r3, [r7, #0]
 800ebec:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800ebee:	697b      	ldr	r3, [r7, #20]
 800ebf0:	0a9b      	lsrs	r3, r3, #10
 800ebf2:	b2db      	uxtb	r3, r3
 800ebf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ebf8:	b2da      	uxtb	r2, r3
 800ebfa:	683b      	ldr	r3, [r7, #0]
 800ebfc:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800ebfe:	697b      	ldr	r3, [r7, #20]
 800ec00:	0a1b      	lsrs	r3, r3, #8
 800ec02:	b2db      	uxtb	r3, r3
 800ec04:	f003 0303 	and.w	r3, r3, #3
 800ec08:	b2da      	uxtb	r2, r3
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800ec0e:	697b      	ldr	r3, [r7, #20]
 800ec10:	091b      	lsrs	r3, r3, #4
 800ec12:	b2db      	uxtb	r3, r3
 800ec14:	f003 030f 	and.w	r3, r3, #15
 800ec18:	b2da      	uxtb	r2, r3
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800ec1e:	697b      	ldr	r3, [r7, #20]
 800ec20:	b2db      	uxtb	r3, r3
 800ec22:	f003 030f 	and.w	r3, r3, #15
 800ec26:	b2da      	uxtb	r2, r3
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800ec2c:	69bb      	ldr	r3, [r7, #24]
 800ec2e:	0e1b      	lsrs	r3, r3, #24
 800ec30:	b2da      	uxtb	r2, r3
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f004 f9e2 	bl	8013008 <SDMMC_CmdBlockLength>
 800ec44:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800ec46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d00d      	beq.n	800ec68 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	4a08      	ldr	r2, [pc, #32]	; (800ec74 <HAL_SD_GetCardStatus+0x178>)
 800ec52:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ec58:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	2201      	movs	r2, #1
 800ec5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800ec62:	2301      	movs	r3, #1
 800ec64:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800ec68:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	3750      	adds	r7, #80	; 0x50
 800ec70:	46bd      	mov	sp, r7
 800ec72:	bd80      	pop	{r7, pc}
 800ec74:	1fe00fff 	.word	0x1fe00fff

0800ec78 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ec78:	b480      	push	{r7}
 800ec7a:	b083      	sub	sp, #12
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
 800ec80:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec86:	683b      	ldr	r3, [r7, #0]
 800ec88:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ec8e:	683b      	ldr	r3, [r7, #0]
 800ec90:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ec9e:	683b      	ldr	r3, [r7, #0]
 800eca0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ecae:	683b      	ldr	r3, [r7, #0]
 800ecb0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ecc2:	2300      	movs	r3, #0
}
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	370c      	adds	r7, #12
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecce:	4770      	bx	lr

0800ecd0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ecd0:	b590      	push	{r4, r7, lr}
 800ecd2:	b08d      	sub	sp, #52	; 0x34
 800ecd4:	af02      	add	r7, sp, #8
 800ecd6:	6078      	str	r0, [r7, #4]
 800ecd8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800ecda:	2300      	movs	r3, #0
 800ecdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2203      	movs	r2, #3
 800ece4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecec:	2b03      	cmp	r3, #3
 800ecee:	d02e      	beq.n	800ed4e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800ecf0:	683b      	ldr	r3, [r7, #0]
 800ecf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ecf6:	d106      	bne.n	800ed06 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecfc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	635a      	str	r2, [r3, #52]	; 0x34
 800ed04:	e029      	b.n	800ed5a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800ed06:	683b      	ldr	r3, [r7, #0]
 800ed08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ed0c:	d10a      	bne.n	800ed24 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ed0e:	6878      	ldr	r0, [r7, #4]
 800ed10:	f000 fb64 	bl	800f3dc <SD_WideBus_Enable>
 800ed14:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ed1a:	6a3b      	ldr	r3, [r7, #32]
 800ed1c:	431a      	orrs	r2, r3
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	635a      	str	r2, [r3, #52]	; 0x34
 800ed22:	e01a      	b.n	800ed5a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800ed24:	683b      	ldr	r3, [r7, #0]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d10a      	bne.n	800ed40 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ed2a:	6878      	ldr	r0, [r7, #4]
 800ed2c:	f000 fba1 	bl	800f472 <SD_WideBus_Disable>
 800ed30:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ed36:	6a3b      	ldr	r3, [r7, #32]
 800ed38:	431a      	orrs	r2, r3
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	635a      	str	r2, [r3, #52]	; 0x34
 800ed3e:	e00c      	b.n	800ed5a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed44:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	635a      	str	r2, [r3, #52]	; 0x34
 800ed4c:	e005      	b.n	800ed5a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed52:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d007      	beq.n	800ed72 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	4a5f      	ldr	r2, [pc, #380]	; (800eee4 <HAL_SD_ConfigWideBusOperation+0x214>)
 800ed68:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800ed6a:	2301      	movs	r3, #1
 800ed6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ed70:	e096      	b.n	800eea0 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800ed72:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800ed76:	f04f 0100 	mov.w	r1, #0
 800ed7a:	f7fd fea3 	bl	800cac4 <HAL_RCCEx_GetPeriphCLKFreq>
 800ed7e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800ed80:	69fb      	ldr	r3, [r7, #28]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	f000 8083 	beq.w	800ee8e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	685b      	ldr	r3, [r3, #4]
 800ed8c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	689b      	ldr	r3, [r3, #8]
 800ed92:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	691b      	ldr	r3, [r3, #16]
 800ed9c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	695a      	ldr	r2, [r3, #20]
 800eda2:	69fb      	ldr	r3, [r7, #28]
 800eda4:	4950      	ldr	r1, [pc, #320]	; (800eee8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800eda6:	fba1 1303 	umull	r1, r3, r1, r3
 800edaa:	0e1b      	lsrs	r3, r3, #24
 800edac:	429a      	cmp	r2, r3
 800edae:	d303      	bcc.n	800edb8 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	695b      	ldr	r3, [r3, #20]
 800edb4:	61bb      	str	r3, [r7, #24]
 800edb6:	e05a      	b.n	800ee6e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800edbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800edc0:	d103      	bne.n	800edca <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	695b      	ldr	r3, [r3, #20]
 800edc6:	61bb      	str	r3, [r7, #24]
 800edc8:	e051      	b.n	800ee6e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800edce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800edd2:	d126      	bne.n	800ee22 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	695b      	ldr	r3, [r3, #20]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d10e      	bne.n	800edfa <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800eddc:	69fb      	ldr	r3, [r7, #28]
 800edde:	4a43      	ldr	r2, [pc, #268]	; (800eeec <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ede0:	4293      	cmp	r3, r2
 800ede2:	d906      	bls.n	800edf2 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ede4:	69fb      	ldr	r3, [r7, #28]
 800ede6:	4a40      	ldr	r2, [pc, #256]	; (800eee8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ede8:	fba2 2303 	umull	r2, r3, r2, r3
 800edec:	0e5b      	lsrs	r3, r3, #25
 800edee:	61bb      	str	r3, [r7, #24]
 800edf0:	e03d      	b.n	800ee6e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	695b      	ldr	r3, [r3, #20]
 800edf6:	61bb      	str	r3, [r7, #24]
 800edf8:	e039      	b.n	800ee6e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	695b      	ldr	r3, [r3, #20]
 800edfe:	005b      	lsls	r3, r3, #1
 800ee00:	69fa      	ldr	r2, [r7, #28]
 800ee02:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee06:	4a39      	ldr	r2, [pc, #228]	; (800eeec <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ee08:	4293      	cmp	r3, r2
 800ee0a:	d906      	bls.n	800ee1a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ee0c:	69fb      	ldr	r3, [r7, #28]
 800ee0e:	4a36      	ldr	r2, [pc, #216]	; (800eee8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ee10:	fba2 2303 	umull	r2, r3, r2, r3
 800ee14:	0e5b      	lsrs	r3, r3, #25
 800ee16:	61bb      	str	r3, [r7, #24]
 800ee18:	e029      	b.n	800ee6e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	695b      	ldr	r3, [r3, #20]
 800ee1e:	61bb      	str	r3, [r7, #24]
 800ee20:	e025      	b.n	800ee6e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	695b      	ldr	r3, [r3, #20]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d10e      	bne.n	800ee48 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800ee2a:	69fb      	ldr	r3, [r7, #28]
 800ee2c:	4a30      	ldr	r2, [pc, #192]	; (800eef0 <HAL_SD_ConfigWideBusOperation+0x220>)
 800ee2e:	4293      	cmp	r3, r2
 800ee30:	d906      	bls.n	800ee40 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ee32:	69fb      	ldr	r3, [r7, #28]
 800ee34:	4a2c      	ldr	r2, [pc, #176]	; (800eee8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ee36:	fba2 2303 	umull	r2, r3, r2, r3
 800ee3a:	0e1b      	lsrs	r3, r3, #24
 800ee3c:	61bb      	str	r3, [r7, #24]
 800ee3e:	e016      	b.n	800ee6e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	695b      	ldr	r3, [r3, #20]
 800ee44:	61bb      	str	r3, [r7, #24]
 800ee46:	e012      	b.n	800ee6e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	695b      	ldr	r3, [r3, #20]
 800ee4c:	005b      	lsls	r3, r3, #1
 800ee4e:	69fa      	ldr	r2, [r7, #28]
 800ee50:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee54:	4a26      	ldr	r2, [pc, #152]	; (800eef0 <HAL_SD_ConfigWideBusOperation+0x220>)
 800ee56:	4293      	cmp	r3, r2
 800ee58:	d906      	bls.n	800ee68 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ee5a:	69fb      	ldr	r3, [r7, #28]
 800ee5c:	4a22      	ldr	r2, [pc, #136]	; (800eee8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ee5e:	fba2 2303 	umull	r2, r3, r2, r3
 800ee62:	0e1b      	lsrs	r3, r3, #24
 800ee64:	61bb      	str	r3, [r7, #24]
 800ee66:	e002      	b.n	800ee6e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	695b      	ldr	r3, [r3, #20]
 800ee6c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681c      	ldr	r4, [r3, #0]
 800ee72:	466a      	mov	r2, sp
 800ee74:	f107 0314 	add.w	r3, r7, #20
 800ee78:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ee7c:	e882 0003 	stmia.w	r2, {r0, r1}
 800ee80:	f107 0308 	add.w	r3, r7, #8
 800ee84:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ee86:	4620      	mov	r0, r4
 800ee88:	f003 ffe0 	bl	8012e4c <SDMMC_Init>
 800ee8c:	e008      	b.n	800eea0 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee92:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800ee9a:	2301      	movs	r3, #1
 800ee9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f004 f8ad 	bl	8013008 <SDMMC_CmdBlockLength>
 800eeae:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800eeb0:	6a3b      	ldr	r3, [r7, #32]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d00c      	beq.n	800eed0 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	4a0a      	ldr	r2, [pc, #40]	; (800eee4 <HAL_SD_ConfigWideBusOperation+0x214>)
 800eebc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eec2:	6a3b      	ldr	r3, [r7, #32]
 800eec4:	431a      	orrs	r2, r3
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800eeca:	2301      	movs	r3, #1
 800eecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2201      	movs	r2, #1
 800eed4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800eed8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800eedc:	4618      	mov	r0, r3
 800eede:	372c      	adds	r7, #44	; 0x2c
 800eee0:	46bd      	mov	sp, r7
 800eee2:	bd90      	pop	{r4, r7, pc}
 800eee4:	1fe00fff 	.word	0x1fe00fff
 800eee8:	55e63b89 	.word	0x55e63b89
 800eeec:	02faf080 	.word	0x02faf080
 800eef0:	017d7840 	.word	0x017d7840

0800eef4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b086      	sub	sp, #24
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800eefc:	2300      	movs	r3, #0
 800eefe:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ef00:	f107 030c 	add.w	r3, r7, #12
 800ef04:	4619      	mov	r1, r3
 800ef06:	6878      	ldr	r0, [r7, #4]
 800ef08:	f000 fa40 	bl	800f38c <SD_SendStatus>
 800ef0c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ef0e:	697b      	ldr	r3, [r7, #20]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d005      	beq.n	800ef20 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ef18:	697b      	ldr	r3, [r7, #20]
 800ef1a:	431a      	orrs	r2, r3
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	0a5b      	lsrs	r3, r3, #9
 800ef24:	f003 030f 	and.w	r3, r3, #15
 800ef28:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ef2a:	693b      	ldr	r3, [r7, #16]
}
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	3718      	adds	r7, #24
 800ef30:	46bd      	mov	sp, r7
 800ef32:	bd80      	pop	{r7, pc}

0800ef34 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b090      	sub	sp, #64	; 0x40
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800ef40:	f7f5 f8e8 	bl	8004114 <HAL_GetTick>
 800ef44:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f003 ffd7 	bl	8012efe <SDMMC_GetPowerState>
 800ef50:	4603      	mov	r3, r0
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d102      	bne.n	800ef5c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ef56:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ef5a:	e0b5      	b.n	800f0c8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef60:	2b03      	cmp	r3, #3
 800ef62:	d02e      	beq.n	800efc2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	4618      	mov	r0, r3
 800ef6a:	f004 fa22 	bl	80133b2 <SDMMC_CmdSendCID>
 800ef6e:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800ef70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d001      	beq.n	800ef7a <SD_InitCard+0x46>
    {
      return errorstate;
 800ef76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef78:	e0a6      	b.n	800f0c8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	2100      	movs	r1, #0
 800ef80:	4618      	mov	r0, r3
 800ef82:	f004 f802 	bl	8012f8a <SDMMC_GetResponse>
 800ef86:	4602      	mov	r2, r0
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	2104      	movs	r1, #4
 800ef92:	4618      	mov	r0, r3
 800ef94:	f003 fff9 	bl	8012f8a <SDMMC_GetResponse>
 800ef98:	4602      	mov	r2, r0
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	2108      	movs	r1, #8
 800efa4:	4618      	mov	r0, r3
 800efa6:	f003 fff0 	bl	8012f8a <SDMMC_GetResponse>
 800efaa:	4602      	mov	r2, r0
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	210c      	movs	r1, #12
 800efb6:	4618      	mov	r0, r3
 800efb8:	f003 ffe7 	bl	8012f8a <SDMMC_GetResponse>
 800efbc:	4602      	mov	r2, r0
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efc6:	2b03      	cmp	r3, #3
 800efc8:	d01d      	beq.n	800f006 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800efca:	e019      	b.n	800f000 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	f107 020a 	add.w	r2, r7, #10
 800efd4:	4611      	mov	r1, r2
 800efd6:	4618      	mov	r0, r3
 800efd8:	f004 fa2a 	bl	8013430 <SDMMC_CmdSetRelAdd>
 800efdc:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800efde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d001      	beq.n	800efe8 <SD_InitCard+0xb4>
      {
        return errorstate;
 800efe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efe6:	e06f      	b.n	800f0c8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800efe8:	f7f5 f894 	bl	8004114 <HAL_GetTick>
 800efec:	4602      	mov	r2, r0
 800efee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eff0:	1ad3      	subs	r3, r2, r3
 800eff2:	f241 3287 	movw	r2, #4999	; 0x1387
 800eff6:	4293      	cmp	r3, r2
 800eff8:	d902      	bls.n	800f000 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800effa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800effe:	e063      	b.n	800f0c8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800f000:	897b      	ldrh	r3, [r7, #10]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d0e2      	beq.n	800efcc <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f00a:	2b03      	cmp	r3, #3
 800f00c:	d036      	beq.n	800f07c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800f00e:	897b      	ldrh	r3, [r7, #10]
 800f010:	461a      	mov	r2, r3
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	681a      	ldr	r2, [r3, #0]
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f01e:	041b      	lsls	r3, r3, #16
 800f020:	4619      	mov	r1, r3
 800f022:	4610      	mov	r0, r2
 800f024:	f004 f9e4 	bl	80133f0 <SDMMC_CmdSendCSD>
 800f028:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800f02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d001      	beq.n	800f034 <SD_InitCard+0x100>
    {
      return errorstate;
 800f030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f032:	e049      	b.n	800f0c8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	2100      	movs	r1, #0
 800f03a:	4618      	mov	r0, r3
 800f03c:	f003 ffa5 	bl	8012f8a <SDMMC_GetResponse>
 800f040:	4602      	mov	r2, r0
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	2104      	movs	r1, #4
 800f04c:	4618      	mov	r0, r3
 800f04e:	f003 ff9c 	bl	8012f8a <SDMMC_GetResponse>
 800f052:	4602      	mov	r2, r0
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	2108      	movs	r1, #8
 800f05e:	4618      	mov	r0, r3
 800f060:	f003 ff93 	bl	8012f8a <SDMMC_GetResponse>
 800f064:	4602      	mov	r2, r0
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	210c      	movs	r1, #12
 800f070:	4618      	mov	r0, r3
 800f072:	f003 ff8a 	bl	8012f8a <SDMMC_GetResponse>
 800f076:	4602      	mov	r2, r0
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	2104      	movs	r1, #4
 800f082:	4618      	mov	r0, r3
 800f084:	f003 ff81 	bl	8012f8a <SDMMC_GetResponse>
 800f088:	4603      	mov	r3, r0
 800f08a:	0d1a      	lsrs	r2, r3, #20
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800f090:	f107 030c 	add.w	r3, r7, #12
 800f094:	4619      	mov	r1, r3
 800f096:	6878      	ldr	r0, [r7, #4]
 800f098:	f7ff fb8c 	bl	800e7b4 <HAL_SD_GetCardCSD>
 800f09c:	4603      	mov	r3, r0
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d002      	beq.n	800f0a8 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f0a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f0a6:	e00f      	b.n	800f0c8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681a      	ldr	r2, [r3, #0]
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0b0:	041b      	lsls	r3, r3, #16
 800f0b2:	4619      	mov	r1, r3
 800f0b4:	4610      	mov	r0, r2
 800f0b6:	f004 f893 	bl	80131e0 <SDMMC_CmdSelDesel>
 800f0ba:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800f0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d001      	beq.n	800f0c6 <SD_InitCard+0x192>
  {
    return errorstate;
 800f0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0c4:	e000      	b.n	800f0c8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800f0c6:	2300      	movs	r3, #0
}
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	3740      	adds	r7, #64	; 0x40
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bd80      	pop	{r7, pc}

0800f0d0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b086      	sub	sp, #24
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f0d8:	2300      	movs	r3, #0
 800f0da:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800f0dc:	2300      	movs	r3, #0
 800f0de:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f004 f89c 	bl	8013226 <SDMMC_CmdGoIdleState>
 800f0ee:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d001      	beq.n	800f0fa <SD_PowerON+0x2a>
  {
    return errorstate;
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	e072      	b.n	800f1e0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	4618      	mov	r0, r3
 800f100:	f004 f8af 	bl	8013262 <SDMMC_CmdOperCond>
 800f104:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f10c:	d10d      	bne.n	800f12a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	2200      	movs	r2, #0
 800f112:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	4618      	mov	r0, r3
 800f11a:	f004 f884 	bl	8013226 <SDMMC_CmdGoIdleState>
 800f11e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d004      	beq.n	800f130 <SD_PowerON+0x60>
    {
      return errorstate;
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	e05a      	b.n	800f1e0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	2201      	movs	r2, #1
 800f12e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f134:	2b01      	cmp	r3, #1
 800f136:	d137      	bne.n	800f1a8 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	2100      	movs	r1, #0
 800f13e:	4618      	mov	r0, r3
 800f140:	f004 f8af 	bl	80132a2 <SDMMC_CmdAppCommand>
 800f144:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d02d      	beq.n	800f1a8 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f14c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f150:	e046      	b.n	800f1e0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	2100      	movs	r1, #0
 800f158:	4618      	mov	r0, r3
 800f15a:	f004 f8a2 	bl	80132a2 <SDMMC_CmdAppCommand>
 800f15e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d001      	beq.n	800f16a <SD_PowerON+0x9a>
    {
      return errorstate;
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	e03a      	b.n	800f1e0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	491e      	ldr	r1, [pc, #120]	; (800f1e8 <SD_PowerON+0x118>)
 800f170:	4618      	mov	r0, r3
 800f172:	f004 f8b9 	bl	80132e8 <SDMMC_CmdAppOperCommand>
 800f176:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d002      	beq.n	800f184 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f17e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f182:	e02d      	b.n	800f1e0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	2100      	movs	r1, #0
 800f18a:	4618      	mov	r0, r3
 800f18c:	f003 fefd 	bl	8012f8a <SDMMC_GetResponse>
 800f190:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800f192:	697b      	ldr	r3, [r7, #20]
 800f194:	0fdb      	lsrs	r3, r3, #31
 800f196:	2b01      	cmp	r3, #1
 800f198:	d101      	bne.n	800f19e <SD_PowerON+0xce>
 800f19a:	2301      	movs	r3, #1
 800f19c:	e000      	b.n	800f1a0 <SD_PowerON+0xd0>
 800f19e:	2300      	movs	r3, #0
 800f1a0:	613b      	str	r3, [r7, #16]

    count++;
 800f1a2:	68bb      	ldr	r3, [r7, #8]
 800f1a4:	3301      	adds	r3, #1
 800f1a6:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800f1a8:	68bb      	ldr	r3, [r7, #8]
 800f1aa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f1ae:	4293      	cmp	r3, r2
 800f1b0:	d802      	bhi.n	800f1b8 <SD_PowerON+0xe8>
 800f1b2:	693b      	ldr	r3, [r7, #16]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d0cc      	beq.n	800f152 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800f1b8:	68bb      	ldr	r3, [r7, #8]
 800f1ba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f1be:	4293      	cmp	r3, r2
 800f1c0:	d902      	bls.n	800f1c8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800f1c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f1c6:	e00b      	b.n	800f1e0 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800f1ce:	697b      	ldr	r3, [r7, #20]
 800f1d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d002      	beq.n	800f1de <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2201      	movs	r2, #1
 800f1dc:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800f1de:	2300      	movs	r3, #0
}
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	3718      	adds	r7, #24
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd80      	pop	{r7, pc}
 800f1e8:	c1100000 	.word	0xc1100000

0800f1ec <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b08c      	sub	sp, #48	; 0x30
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
 800f1f4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f1f6:	f7f4 ff8d 	bl	8004114 <HAL_GetTick>
 800f1fa:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	2100      	movs	r1, #0
 800f206:	4618      	mov	r0, r3
 800f208:	f003 febf 	bl	8012f8a <SDMMC_GetResponse>
 800f20c:	4603      	mov	r3, r0
 800f20e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f212:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f216:	d102      	bne.n	800f21e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f218:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f21c:	e0b0      	b.n	800f380 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	2140      	movs	r1, #64	; 0x40
 800f224:	4618      	mov	r0, r3
 800f226:	f003 feef 	bl	8013008 <SDMMC_CmdBlockLength>
 800f22a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f22c:	6a3b      	ldr	r3, [r7, #32]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d005      	beq.n	800f23e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800f23a:	6a3b      	ldr	r3, [r7, #32]
 800f23c:	e0a0      	b.n	800f380 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681a      	ldr	r2, [r3, #0]
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f246:	041b      	lsls	r3, r3, #16
 800f248:	4619      	mov	r1, r3
 800f24a:	4610      	mov	r0, r2
 800f24c:	f004 f829 	bl	80132a2 <SDMMC_CmdAppCommand>
 800f250:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f252:	6a3b      	ldr	r3, [r7, #32]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d005      	beq.n	800f264 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800f260:	6a3b      	ldr	r3, [r7, #32]
 800f262:	e08d      	b.n	800f380 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f264:	f04f 33ff 	mov.w	r3, #4294967295
 800f268:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800f26a:	2340      	movs	r3, #64	; 0x40
 800f26c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800f26e:	2360      	movs	r3, #96	; 0x60
 800f270:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f272:	2302      	movs	r3, #2
 800f274:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f276:	2300      	movs	r3, #0
 800f278:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f27a:	2301      	movs	r3, #1
 800f27c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	f107 0208 	add.w	r2, r7, #8
 800f286:	4611      	mov	r1, r2
 800f288:	4618      	mov	r0, r3
 800f28a:	f003 fe91 	bl	8012fb0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	4618      	mov	r0, r3
 800f294:	f004 f911 	bl	80134ba <SDMMC_CmdStatusRegister>
 800f298:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f29a:	6a3b      	ldr	r3, [r7, #32]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d02b      	beq.n	800f2f8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800f2a8:	6a3b      	ldr	r3, [r7, #32]
 800f2aa:	e069      	b.n	800f380 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d013      	beq.n	800f2e2 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f2be:	e00d      	b.n	800f2dc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	f003 fdeb 	bl	8012ea0 <SDMMC_ReadFIFO>
 800f2ca:	4602      	mov	r2, r0
 800f2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ce:	601a      	str	r2, [r3, #0]
        pData++;
 800f2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2d2:	3304      	adds	r3, #4
 800f2d4:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800f2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2d8:	3301      	adds	r3, #1
 800f2da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2de:	2b07      	cmp	r3, #7
 800f2e0:	d9ee      	bls.n	800f2c0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f2e2:	f7f4 ff17 	bl	8004114 <HAL_GetTick>
 800f2e6:	4602      	mov	r2, r0
 800f2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ea:	1ad3      	subs	r3, r2, r3
 800f2ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2f0:	d102      	bne.n	800f2f8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f2f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f2f6:	e043      	b.n	800f380 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2fe:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800f302:	2b00      	cmp	r3, #0
 800f304:	d0d2      	beq.n	800f2ac <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f30c:	f003 0308 	and.w	r3, r3, #8
 800f310:	2b00      	cmp	r3, #0
 800f312:	d001      	beq.n	800f318 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f314:	2308      	movs	r3, #8
 800f316:	e033      	b.n	800f380 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f31e:	f003 0302 	and.w	r3, r3, #2
 800f322:	2b00      	cmp	r3, #0
 800f324:	d001      	beq.n	800f32a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f326:	2302      	movs	r3, #2
 800f328:	e02a      	b.n	800f380 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f330:	f003 0320 	and.w	r3, r3, #32
 800f334:	2b00      	cmp	r3, #0
 800f336:	d017      	beq.n	800f368 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800f338:	2320      	movs	r3, #32
 800f33a:	e021      	b.n	800f380 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	4618      	mov	r0, r3
 800f342:	f003 fdad 	bl	8012ea0 <SDMMC_ReadFIFO>
 800f346:	4602      	mov	r2, r0
 800f348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f34a:	601a      	str	r2, [r3, #0]
    pData++;
 800f34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f34e:	3304      	adds	r3, #4
 800f350:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f352:	f7f4 fedf 	bl	8004114 <HAL_GetTick>
 800f356:	4602      	mov	r2, r0
 800f358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f35a:	1ad3      	subs	r3, r2, r3
 800f35c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f360:	d102      	bne.n	800f368 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f362:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f366:	e00b      	b.n	800f380 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f36e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f372:	2b00      	cmp	r3, #0
 800f374:	d1e2      	bne.n	800f33c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	4a03      	ldr	r2, [pc, #12]	; (800f388 <SD_SendSDStatus+0x19c>)
 800f37c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800f37e:	2300      	movs	r3, #0
}
 800f380:	4618      	mov	r0, r3
 800f382:	3730      	adds	r7, #48	; 0x30
 800f384:	46bd      	mov	sp, r7
 800f386:	bd80      	pop	{r7, pc}
 800f388:	18000f3a 	.word	0x18000f3a

0800f38c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b084      	sub	sp, #16
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
 800f394:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800f396:	683b      	ldr	r3, [r7, #0]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d102      	bne.n	800f3a2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800f39c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f3a0:	e018      	b.n	800f3d4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681a      	ldr	r2, [r3, #0]
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3aa:	041b      	lsls	r3, r3, #16
 800f3ac:	4619      	mov	r1, r3
 800f3ae:	4610      	mov	r0, r2
 800f3b0:	f004 f860 	bl	8013474 <SDMMC_CmdSendStatus>
 800f3b4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d001      	beq.n	800f3c0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	e009      	b.n	800f3d4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	2100      	movs	r1, #0
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	f003 fddf 	bl	8012f8a <SDMMC_GetResponse>
 800f3cc:	4602      	mov	r2, r0
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800f3d2:	2300      	movs	r3, #0
}
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	3710      	adds	r7, #16
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	bd80      	pop	{r7, pc}

0800f3dc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b086      	sub	sp, #24
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	60fb      	str	r3, [r7, #12]
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	2100      	movs	r1, #0
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	f003 fdc9 	bl	8012f8a <SDMMC_GetResponse>
 800f3f8:	4603      	mov	r3, r0
 800f3fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f3fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f402:	d102      	bne.n	800f40a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f404:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f408:	e02f      	b.n	800f46a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f40a:	f107 030c 	add.w	r3, r7, #12
 800f40e:	4619      	mov	r1, r3
 800f410:	6878      	ldr	r0, [r7, #4]
 800f412:	f000 f879 	bl	800f508 <SD_FindSCR>
 800f416:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f418:	697b      	ldr	r3, [r7, #20]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d001      	beq.n	800f422 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800f41e:	697b      	ldr	r3, [r7, #20]
 800f420:	e023      	b.n	800f46a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f422:	693b      	ldr	r3, [r7, #16]
 800f424:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d01c      	beq.n	800f466 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	681a      	ldr	r2, [r3, #0]
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f434:	041b      	lsls	r3, r3, #16
 800f436:	4619      	mov	r1, r3
 800f438:	4610      	mov	r0, r2
 800f43a:	f003 ff32 	bl	80132a2 <SDMMC_CmdAppCommand>
 800f43e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f440:	697b      	ldr	r3, [r7, #20]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d001      	beq.n	800f44a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800f446:	697b      	ldr	r3, [r7, #20]
 800f448:	e00f      	b.n	800f46a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	2102      	movs	r1, #2
 800f450:	4618      	mov	r0, r3
 800f452:	f003 ff69 	bl	8013328 <SDMMC_CmdBusWidth>
 800f456:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f458:	697b      	ldr	r3, [r7, #20]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d001      	beq.n	800f462 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800f45e:	697b      	ldr	r3, [r7, #20]
 800f460:	e003      	b.n	800f46a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f462:	2300      	movs	r3, #0
 800f464:	e001      	b.n	800f46a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f466:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f46a:	4618      	mov	r0, r3
 800f46c:	3718      	adds	r7, #24
 800f46e:	46bd      	mov	sp, r7
 800f470:	bd80      	pop	{r7, pc}

0800f472 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800f472:	b580      	push	{r7, lr}
 800f474:	b086      	sub	sp, #24
 800f476:	af00      	add	r7, sp, #0
 800f478:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800f47a:	2300      	movs	r3, #0
 800f47c:	60fb      	str	r3, [r7, #12]
 800f47e:	2300      	movs	r3, #0
 800f480:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	2100      	movs	r1, #0
 800f488:	4618      	mov	r0, r3
 800f48a:	f003 fd7e 	bl	8012f8a <SDMMC_GetResponse>
 800f48e:	4603      	mov	r3, r0
 800f490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f494:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f498:	d102      	bne.n	800f4a0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f49a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f49e:	e02f      	b.n	800f500 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f4a0:	f107 030c 	add.w	r3, r7, #12
 800f4a4:	4619      	mov	r1, r3
 800f4a6:	6878      	ldr	r0, [r7, #4]
 800f4a8:	f000 f82e 	bl	800f508 <SD_FindSCR>
 800f4ac:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f4ae:	697b      	ldr	r3, [r7, #20]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d001      	beq.n	800f4b8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800f4b4:	697b      	ldr	r3, [r7, #20]
 800f4b6:	e023      	b.n	800f500 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f4b8:	693b      	ldr	r3, [r7, #16]
 800f4ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d01c      	beq.n	800f4fc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681a      	ldr	r2, [r3, #0]
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4ca:	041b      	lsls	r3, r3, #16
 800f4cc:	4619      	mov	r1, r3
 800f4ce:	4610      	mov	r0, r2
 800f4d0:	f003 fee7 	bl	80132a2 <SDMMC_CmdAppCommand>
 800f4d4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f4d6:	697b      	ldr	r3, [r7, #20]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d001      	beq.n	800f4e0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800f4dc:	697b      	ldr	r3, [r7, #20]
 800f4de:	e00f      	b.n	800f500 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	2100      	movs	r1, #0
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f003 ff1e 	bl	8013328 <SDMMC_CmdBusWidth>
 800f4ec:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f4ee:	697b      	ldr	r3, [r7, #20]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d001      	beq.n	800f4f8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800f4f4:	697b      	ldr	r3, [r7, #20]
 800f4f6:	e003      	b.n	800f500 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	e001      	b.n	800f500 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f4fc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f500:	4618      	mov	r0, r3
 800f502:	3718      	adds	r7, #24
 800f504:	46bd      	mov	sp, r7
 800f506:	bd80      	pop	{r7, pc}

0800f508 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b08e      	sub	sp, #56	; 0x38
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
 800f510:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f512:	f7f4 fdff 	bl	8004114 <HAL_GetTick>
 800f516:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800f518:	2300      	movs	r3, #0
 800f51a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800f51c:	2300      	movs	r3, #0
 800f51e:	60bb      	str	r3, [r7, #8]
 800f520:	2300      	movs	r3, #0
 800f522:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800f524:	683b      	ldr	r3, [r7, #0]
 800f526:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	2108      	movs	r1, #8
 800f52e:	4618      	mov	r0, r3
 800f530:	f003 fd6a 	bl	8013008 <SDMMC_CmdBlockLength>
 800f534:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d001      	beq.n	800f540 <SD_FindSCR+0x38>
  {
    return errorstate;
 800f53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f53e:	e0ad      	b.n	800f69c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	681a      	ldr	r2, [r3, #0]
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f548:	041b      	lsls	r3, r3, #16
 800f54a:	4619      	mov	r1, r3
 800f54c:	4610      	mov	r0, r2
 800f54e:	f003 fea8 	bl	80132a2 <SDMMC_CmdAppCommand>
 800f552:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f556:	2b00      	cmp	r3, #0
 800f558:	d001      	beq.n	800f55e <SD_FindSCR+0x56>
  {
    return errorstate;
 800f55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f55c:	e09e      	b.n	800f69c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f55e:	f04f 33ff 	mov.w	r3, #4294967295
 800f562:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800f564:	2308      	movs	r3, #8
 800f566:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800f568:	2330      	movs	r3, #48	; 0x30
 800f56a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f56c:	2302      	movs	r3, #2
 800f56e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f570:	2300      	movs	r3, #0
 800f572:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f574:	2301      	movs	r3, #1
 800f576:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	f107 0210 	add.w	r2, r7, #16
 800f580:	4611      	mov	r1, r2
 800f582:	4618      	mov	r0, r3
 800f584:	f003 fd14 	bl	8012fb0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	4618      	mov	r0, r3
 800f58e:	f003 feee 	bl	801336e <SDMMC_CmdSendSCR>
 800f592:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f596:	2b00      	cmp	r3, #0
 800f598:	d027      	beq.n	800f5ea <SD_FindSCR+0xe2>
  {
    return errorstate;
 800f59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f59c:	e07e      	b.n	800f69c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d113      	bne.n	800f5d4 <SD_FindSCR+0xcc>
 800f5ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d110      	bne.n	800f5d4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	f003 fc72 	bl	8012ea0 <SDMMC_ReadFIFO>
 800f5bc:	4603      	mov	r3, r0
 800f5be:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	f003 fc6b 	bl	8012ea0 <SDMMC_ReadFIFO>
 800f5ca:	4603      	mov	r3, r0
 800f5cc:	60fb      	str	r3, [r7, #12]
      index++;
 800f5ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5d0:	3301      	adds	r3, #1
 800f5d2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f5d4:	f7f4 fd9e 	bl	8004114 <HAL_GetTick>
 800f5d8:	4602      	mov	r2, r0
 800f5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5dc:	1ad3      	subs	r3, r2, r3
 800f5de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5e2:	d102      	bne.n	800f5ea <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f5e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f5e8:	e058      	b.n	800f69c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f5f0:	f240 532a 	movw	r3, #1322	; 0x52a
 800f5f4:	4013      	ands	r3, r2
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d0d1      	beq.n	800f59e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f600:	f003 0308 	and.w	r3, r3, #8
 800f604:	2b00      	cmp	r3, #0
 800f606:	d005      	beq.n	800f614 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	2208      	movs	r2, #8
 800f60e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f610:	2308      	movs	r3, #8
 800f612:	e043      	b.n	800f69c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f61a:	f003 0302 	and.w	r3, r3, #2
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d005      	beq.n	800f62e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	2202      	movs	r2, #2
 800f628:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f62a:	2302      	movs	r3, #2
 800f62c:	e036      	b.n	800f69c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f634:	f003 0320 	and.w	r3, r3, #32
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d005      	beq.n	800f648 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	2220      	movs	r2, #32
 800f642:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800f644:	2320      	movs	r3, #32
 800f646:	e029      	b.n	800f69c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	4a15      	ldr	r2, [pc, #84]	; (800f6a4 <SD_FindSCR+0x19c>)
 800f64e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	061a      	lsls	r2, r3, #24
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	021b      	lsls	r3, r3, #8
 800f658:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f65c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	0a1b      	lsrs	r3, r3, #8
 800f662:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f666:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	0e1b      	lsrs	r3, r3, #24
 800f66c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f670:	601a      	str	r2, [r3, #0]
    scr++;
 800f672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f674:	3304      	adds	r3, #4
 800f676:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f678:	68bb      	ldr	r3, [r7, #8]
 800f67a:	061a      	lsls	r2, r3, #24
 800f67c:	68bb      	ldr	r3, [r7, #8]
 800f67e:	021b      	lsls	r3, r3, #8
 800f680:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f684:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f686:	68bb      	ldr	r3, [r7, #8]
 800f688:	0a1b      	lsrs	r3, r3, #8
 800f68a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f68e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f690:	68bb      	ldr	r3, [r7, #8]
 800f692:	0e1b      	lsrs	r3, r3, #24
 800f694:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f698:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800f69a:	2300      	movs	r3, #0
}
 800f69c:	4618      	mov	r0, r3
 800f69e:	3738      	adds	r7, #56	; 0x38
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	bd80      	pop	{r7, pc}
 800f6a4:	18000f3a 	.word	0x18000f3a

0800f6a8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b086      	sub	sp, #24
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6b4:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6ba:	2b1f      	cmp	r3, #31
 800f6bc:	d936      	bls.n	800f72c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800f6be:	2300      	movs	r3, #0
 800f6c0:	617b      	str	r3, [r7, #20]
 800f6c2:	e027      	b.n	800f714 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	f003 fbe9 	bl	8012ea0 <SDMMC_ReadFIFO>
 800f6ce:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	b2da      	uxtb	r2, r3
 800f6d4:	693b      	ldr	r3, [r7, #16]
 800f6d6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f6d8:	693b      	ldr	r3, [r7, #16]
 800f6da:	3301      	adds	r3, #1
 800f6dc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	0a1b      	lsrs	r3, r3, #8
 800f6e2:	b2da      	uxtb	r2, r3
 800f6e4:	693b      	ldr	r3, [r7, #16]
 800f6e6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f6e8:	693b      	ldr	r3, [r7, #16]
 800f6ea:	3301      	adds	r3, #1
 800f6ec:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	0c1b      	lsrs	r3, r3, #16
 800f6f2:	b2da      	uxtb	r2, r3
 800f6f4:	693b      	ldr	r3, [r7, #16]
 800f6f6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f6f8:	693b      	ldr	r3, [r7, #16]
 800f6fa:	3301      	adds	r3, #1
 800f6fc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	0e1b      	lsrs	r3, r3, #24
 800f702:	b2da      	uxtb	r2, r3
 800f704:	693b      	ldr	r3, [r7, #16]
 800f706:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f708:	693b      	ldr	r3, [r7, #16]
 800f70a:	3301      	adds	r3, #1
 800f70c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800f70e:	697b      	ldr	r3, [r7, #20]
 800f710:	3301      	adds	r3, #1
 800f712:	617b      	str	r3, [r7, #20]
 800f714:	697b      	ldr	r3, [r7, #20]
 800f716:	2b07      	cmp	r3, #7
 800f718:	d9d4      	bls.n	800f6c4 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	693a      	ldr	r2, [r7, #16]
 800f71e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f724:	f1a3 0220 	sub.w	r2, r3, #32
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800f72c:	bf00      	nop
 800f72e:	3718      	adds	r7, #24
 800f730:	46bd      	mov	sp, r7
 800f732:	bd80      	pop	{r7, pc}

0800f734 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b086      	sub	sp, #24
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	69db      	ldr	r3, [r3, #28]
 800f740:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	6a1b      	ldr	r3, [r3, #32]
 800f746:	2b1f      	cmp	r3, #31
 800f748:	d93a      	bls.n	800f7c0 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800f74a:	2300      	movs	r3, #0
 800f74c:	617b      	str	r3, [r7, #20]
 800f74e:	e02b      	b.n	800f7a8 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800f750:	693b      	ldr	r3, [r7, #16]
 800f752:	781b      	ldrb	r3, [r3, #0]
 800f754:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f756:	693b      	ldr	r3, [r7, #16]
 800f758:	3301      	adds	r3, #1
 800f75a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800f75c:	693b      	ldr	r3, [r7, #16]
 800f75e:	781b      	ldrb	r3, [r3, #0]
 800f760:	021a      	lsls	r2, r3, #8
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	4313      	orrs	r3, r2
 800f766:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f768:	693b      	ldr	r3, [r7, #16]
 800f76a:	3301      	adds	r3, #1
 800f76c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800f76e:	693b      	ldr	r3, [r7, #16]
 800f770:	781b      	ldrb	r3, [r3, #0]
 800f772:	041a      	lsls	r2, r3, #16
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	4313      	orrs	r3, r2
 800f778:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f77a:	693b      	ldr	r3, [r7, #16]
 800f77c:	3301      	adds	r3, #1
 800f77e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800f780:	693b      	ldr	r3, [r7, #16]
 800f782:	781b      	ldrb	r3, [r3, #0]
 800f784:	061a      	lsls	r2, r3, #24
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	4313      	orrs	r3, r2
 800f78a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f78c:	693b      	ldr	r3, [r7, #16]
 800f78e:	3301      	adds	r3, #1
 800f790:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	f107 020c 	add.w	r2, r7, #12
 800f79a:	4611      	mov	r1, r2
 800f79c:	4618      	mov	r0, r3
 800f79e:	f003 fb8c 	bl	8012eba <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800f7a2:	697b      	ldr	r3, [r7, #20]
 800f7a4:	3301      	adds	r3, #1
 800f7a6:	617b      	str	r3, [r7, #20]
 800f7a8:	697b      	ldr	r3, [r7, #20]
 800f7aa:	2b07      	cmp	r3, #7
 800f7ac:	d9d0      	bls.n	800f750 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	693a      	ldr	r2, [r7, #16]
 800f7b2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	6a1b      	ldr	r3, [r3, #32]
 800f7b8:	f1a3 0220 	sub.w	r2, r3, #32
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	621a      	str	r2, [r3, #32]
  }
}
 800f7c0:	bf00      	nop
 800f7c2:	3718      	adds	r7, #24
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	bd80      	pop	{r7, pc}

0800f7c8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800f7c8:	b480      	push	{r7}
 800f7ca:	b083      	sub	sp, #12
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800f7d0:	bf00      	nop
 800f7d2:	370c      	adds	r7, #12
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7da:	4770      	bx	lr

0800f7dc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800f7dc:	b480      	push	{r7}
 800f7de:	b083      	sub	sp, #12
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800f7e4:	bf00      	nop
 800f7e6:	370c      	adds	r7, #12
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ee:	4770      	bx	lr

0800f7f0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800f7f0:	b480      	push	{r7}
 800f7f2:	b083      	sub	sp, #12
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800f7f8:	bf00      	nop
 800f7fa:	370c      	adds	r7, #12
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f802:	4770      	bx	lr

0800f804 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800f804:	b480      	push	{r7}
 800f806:	b083      	sub	sp, #12
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800f80c:	bf00      	nop
 800f80e:	370c      	adds	r7, #12
 800f810:	46bd      	mov	sp, r7
 800f812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f816:	4770      	bx	lr

0800f818 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b084      	sub	sp, #16
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d101      	bne.n	800f82a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f826:	2301      	movs	r3, #1
 800f828:	e10f      	b.n	800fa4a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	2200      	movs	r2, #0
 800f82e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	4a87      	ldr	r2, [pc, #540]	; (800fa54 <HAL_SPI_Init+0x23c>)
 800f836:	4293      	cmp	r3, r2
 800f838:	d00f      	beq.n	800f85a <HAL_SPI_Init+0x42>
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	4a86      	ldr	r2, [pc, #536]	; (800fa58 <HAL_SPI_Init+0x240>)
 800f840:	4293      	cmp	r3, r2
 800f842:	d00a      	beq.n	800f85a <HAL_SPI_Init+0x42>
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	4a84      	ldr	r2, [pc, #528]	; (800fa5c <HAL_SPI_Init+0x244>)
 800f84a:	4293      	cmp	r3, r2
 800f84c:	d005      	beq.n	800f85a <HAL_SPI_Init+0x42>
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	68db      	ldr	r3, [r3, #12]
 800f852:	2b0f      	cmp	r3, #15
 800f854:	d901      	bls.n	800f85a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800f856:	2301      	movs	r3, #1
 800f858:	e0f7      	b.n	800fa4a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800f85a:	6878      	ldr	r0, [r7, #4]
 800f85c:	f000 fd5a 	bl	8010314 <SPI_GetPacketSize>
 800f860:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	4a7b      	ldr	r2, [pc, #492]	; (800fa54 <HAL_SPI_Init+0x23c>)
 800f868:	4293      	cmp	r3, r2
 800f86a:	d00c      	beq.n	800f886 <HAL_SPI_Init+0x6e>
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	4a79      	ldr	r2, [pc, #484]	; (800fa58 <HAL_SPI_Init+0x240>)
 800f872:	4293      	cmp	r3, r2
 800f874:	d007      	beq.n	800f886 <HAL_SPI_Init+0x6e>
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	4a78      	ldr	r2, [pc, #480]	; (800fa5c <HAL_SPI_Init+0x244>)
 800f87c:	4293      	cmp	r3, r2
 800f87e:	d002      	beq.n	800f886 <HAL_SPI_Init+0x6e>
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	2b08      	cmp	r3, #8
 800f884:	d811      	bhi.n	800f8aa <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f88a:	4a72      	ldr	r2, [pc, #456]	; (800fa54 <HAL_SPI_Init+0x23c>)
 800f88c:	4293      	cmp	r3, r2
 800f88e:	d009      	beq.n	800f8a4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	4a70      	ldr	r2, [pc, #448]	; (800fa58 <HAL_SPI_Init+0x240>)
 800f896:	4293      	cmp	r3, r2
 800f898:	d004      	beq.n	800f8a4 <HAL_SPI_Init+0x8c>
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	4a6f      	ldr	r2, [pc, #444]	; (800fa5c <HAL_SPI_Init+0x244>)
 800f8a0:	4293      	cmp	r3, r2
 800f8a2:	d104      	bne.n	800f8ae <HAL_SPI_Init+0x96>
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	2b10      	cmp	r3, #16
 800f8a8:	d901      	bls.n	800f8ae <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800f8aa:	2301      	movs	r3, #1
 800f8ac:	e0cd      	b.n	800fa4a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f8b4:	b2db      	uxtb	r3, r3
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d106      	bne.n	800f8c8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	2200      	movs	r2, #0
 800f8be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f8c2:	6878      	ldr	r0, [r7, #4]
 800f8c4:	f7f3 fd96 	bl	80033f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	2202      	movs	r2, #2
 800f8cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	681a      	ldr	r2, [r3, #0]
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	f022 0201 	bic.w	r2, r2, #1
 800f8de:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	689b      	ldr	r3, [r3, #8]
 800f8e6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800f8ea:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	699b      	ldr	r3, [r3, #24]
 800f8f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f8f4:	d119      	bne.n	800f92a <HAL_SPI_Init+0x112>
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	685b      	ldr	r3, [r3, #4]
 800f8fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f8fe:	d103      	bne.n	800f908 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f904:	2b00      	cmp	r3, #0
 800f906:	d008      	beq.n	800f91a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d10c      	bne.n	800f92a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f914:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f918:	d107      	bne.n	800f92a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	681a      	ldr	r2, [r3, #0]
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f928:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	685b      	ldr	r3, [r3, #4]
 800f92e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f932:	2b00      	cmp	r3, #0
 800f934:	d00f      	beq.n	800f956 <HAL_SPI_Init+0x13e>
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	68db      	ldr	r3, [r3, #12]
 800f93a:	2b06      	cmp	r3, #6
 800f93c:	d90b      	bls.n	800f956 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	430a      	orrs	r2, r1
 800f952:	601a      	str	r2, [r3, #0]
 800f954:	e007      	b.n	800f966 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	681a      	ldr	r2, [r3, #0]
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f964:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	69da      	ldr	r2, [r3, #28]
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f96e:	431a      	orrs	r2, r3
 800f970:	68bb      	ldr	r3, [r7, #8]
 800f972:	431a      	orrs	r2, r3
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f978:	ea42 0103 	orr.w	r1, r2, r3
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	68da      	ldr	r2, [r3, #12]
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	430a      	orrs	r2, r1
 800f986:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f990:	431a      	orrs	r2, r3
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f996:	431a      	orrs	r2, r3
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	699b      	ldr	r3, [r3, #24]
 800f99c:	431a      	orrs	r2, r3
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	691b      	ldr	r3, [r3, #16]
 800f9a2:	431a      	orrs	r2, r3
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	695b      	ldr	r3, [r3, #20]
 800f9a8:	431a      	orrs	r2, r3
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	6a1b      	ldr	r3, [r3, #32]
 800f9ae:	431a      	orrs	r2, r3
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	685b      	ldr	r3, [r3, #4]
 800f9b4:	431a      	orrs	r2, r3
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f9ba:	431a      	orrs	r2, r3
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	689b      	ldr	r3, [r3, #8]
 800f9c0:	431a      	orrs	r2, r3
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f9c6:	ea42 0103 	orr.w	r1, r2, r3
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	430a      	orrs	r2, r1
 800f9d4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	685b      	ldr	r3, [r3, #4]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d113      	bne.n	800fa06 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	689b      	ldr	r3, [r3, #8]
 800f9e4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f9f0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	689b      	ldr	r3, [r3, #8]
 800f9f8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fa04:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	f022 0201 	bic.w	r2, r2, #1
 800fa14:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	685b      	ldr	r3, [r3, #4]
 800fa1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d00a      	beq.n	800fa38 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	68db      	ldr	r3, [r3, #12]
 800fa28:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	430a      	orrs	r2, r1
 800fa36:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	2201      	movs	r2, #1
 800fa44:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800fa48:	2300      	movs	r3, #0
}
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	3710      	adds	r7, #16
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	bd80      	pop	{r7, pc}
 800fa52:	bf00      	nop
 800fa54:	40013000 	.word	0x40013000
 800fa58:	40003800 	.word	0x40003800
 800fa5c:	40003c00 	.word	0x40003c00

0800fa60 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b08a      	sub	sp, #40	; 0x28
 800fa64:	af02      	add	r7, sp, #8
 800fa66:	60f8      	str	r0, [r7, #12]
 800fa68:	60b9      	str	r1, [r7, #8]
 800fa6a:	603b      	str	r3, [r7, #0]
 800fa6c:	4613      	mov	r3, r2
 800fa6e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	3320      	adds	r3, #32
 800fa76:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800fa78:	2300      	movs	r3, #0
 800fa7a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fa82:	2b01      	cmp	r3, #1
 800fa84:	d101      	bne.n	800fa8a <HAL_SPI_Transmit+0x2a>
 800fa86:	2302      	movs	r3, #2
 800fa88:	e1e1      	b.n	800fe4e <HAL_SPI_Transmit+0x3ee>
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	2201      	movs	r2, #1
 800fa8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fa92:	f7f4 fb3f 	bl	8004114 <HAL_GetTick>
 800fa96:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800fa9e:	b2db      	uxtb	r3, r3
 800faa0:	2b01      	cmp	r3, #1
 800faa2:	d007      	beq.n	800fab4 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800faa4:	2302      	movs	r3, #2
 800faa6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	2200      	movs	r2, #0
 800faac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800fab0:	7efb      	ldrb	r3, [r7, #27]
 800fab2:	e1cc      	b.n	800fe4e <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800fab4:	68bb      	ldr	r3, [r7, #8]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d002      	beq.n	800fac0 <HAL_SPI_Transmit+0x60>
 800faba:	88fb      	ldrh	r3, [r7, #6]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d107      	bne.n	800fad0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800fac0:	2301      	movs	r3, #1
 800fac2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	2200      	movs	r2, #0
 800fac8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800facc:	7efb      	ldrb	r3, [r7, #27]
 800face:	e1be      	b.n	800fe4e <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	2203      	movs	r2, #3
 800fad4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	2200      	movs	r2, #0
 800fadc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	68ba      	ldr	r2, [r7, #8]
 800fae4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	88fa      	ldrh	r2, [r7, #6]
 800faea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	88fa      	ldrh	r2, [r7, #6]
 800faf2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	2200      	movs	r2, #0
 800fafa:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	2200      	movs	r2, #0
 800fb00:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	2200      	movs	r2, #0
 800fb08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	2200      	movs	r2, #0
 800fb10:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	2200      	movs	r2, #0
 800fb16:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	689b      	ldr	r3, [r3, #8]
 800fb1c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800fb20:	d108      	bne.n	800fb34 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	681a      	ldr	r2, [r3, #0]
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fb30:	601a      	str	r2, [r3, #0]
 800fb32:	e009      	b.n	800fb48 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	68db      	ldr	r3, [r3, #12]
 800fb3a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800fb46:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	685a      	ldr	r2, [r3, #4]
 800fb4e:	4b96      	ldr	r3, [pc, #600]	; (800fda8 <HAL_SPI_Transmit+0x348>)
 800fb50:	4013      	ands	r3, r2
 800fb52:	88f9      	ldrh	r1, [r7, #6]
 800fb54:	68fa      	ldr	r2, [r7, #12]
 800fb56:	6812      	ldr	r2, [r2, #0]
 800fb58:	430b      	orrs	r3, r1
 800fb5a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	681a      	ldr	r2, [r3, #0]
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	f042 0201 	orr.w	r2, r2, #1
 800fb6a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	685b      	ldr	r3, [r3, #4]
 800fb70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fb74:	d107      	bne.n	800fb86 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	681a      	ldr	r2, [r3, #0]
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fb84:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	68db      	ldr	r3, [r3, #12]
 800fb8a:	2b0f      	cmp	r3, #15
 800fb8c:	d947      	bls.n	800fc1e <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800fb8e:	e03f      	b.n	800fc10 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	695b      	ldr	r3, [r3, #20]
 800fb96:	f003 0302 	and.w	r3, r3, #2
 800fb9a:	2b02      	cmp	r3, #2
 800fb9c:	d114      	bne.n	800fbc8 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	6812      	ldr	r2, [r2, #0]
 800fba8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fbae:	1d1a      	adds	r2, r3, #4
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fbba:	b29b      	uxth	r3, r3
 800fbbc:	3b01      	subs	r3, #1
 800fbbe:	b29a      	uxth	r2, r3
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fbc6:	e023      	b.n	800fc10 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fbc8:	f7f4 faa4 	bl	8004114 <HAL_GetTick>
 800fbcc:	4602      	mov	r2, r0
 800fbce:	697b      	ldr	r3, [r7, #20]
 800fbd0:	1ad3      	subs	r3, r2, r3
 800fbd2:	683a      	ldr	r2, [r7, #0]
 800fbd4:	429a      	cmp	r2, r3
 800fbd6:	d803      	bhi.n	800fbe0 <HAL_SPI_Transmit+0x180>
 800fbd8:	683b      	ldr	r3, [r7, #0]
 800fbda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbde:	d102      	bne.n	800fbe6 <HAL_SPI_Transmit+0x186>
 800fbe0:	683b      	ldr	r3, [r7, #0]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d114      	bne.n	800fc10 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fbe6:	68f8      	ldr	r0, [r7, #12]
 800fbe8:	f000 fac6 	bl	8010178 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	2200      	movs	r2, #0
 800fbf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fbfa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	2201      	movs	r2, #1
 800fc08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800fc0c:	2303      	movs	r3, #3
 800fc0e:	e11e      	b.n	800fe4e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fc16:	b29b      	uxth	r3, r3
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d1b9      	bne.n	800fb90 <HAL_SPI_Transmit+0x130>
 800fc1c:	e0f1      	b.n	800fe02 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	68db      	ldr	r3, [r3, #12]
 800fc22:	2b07      	cmp	r3, #7
 800fc24:	f240 80e6 	bls.w	800fdf4 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800fc28:	e05d      	b.n	800fce6 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	695b      	ldr	r3, [r3, #20]
 800fc30:	f003 0302 	and.w	r3, r3, #2
 800fc34:	2b02      	cmp	r3, #2
 800fc36:	d132      	bne.n	800fc9e <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fc3e:	b29b      	uxth	r3, r3
 800fc40:	2b01      	cmp	r3, #1
 800fc42:	d918      	bls.n	800fc76 <HAL_SPI_Transmit+0x216>
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d014      	beq.n	800fc76 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	6812      	ldr	r2, [r2, #0]
 800fc56:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fc5c:	1d1a      	adds	r2, r3, #4
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fc68:	b29b      	uxth	r3, r3
 800fc6a:	3b02      	subs	r3, #2
 800fc6c:	b29a      	uxth	r2, r3
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fc74:	e037      	b.n	800fce6 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fc7a:	881a      	ldrh	r2, [r3, #0]
 800fc7c:	69fb      	ldr	r3, [r7, #28]
 800fc7e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fc84:	1c9a      	adds	r2, r3, #2
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fc90:	b29b      	uxth	r3, r3
 800fc92:	3b01      	subs	r3, #1
 800fc94:	b29a      	uxth	r2, r3
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fc9c:	e023      	b.n	800fce6 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fc9e:	f7f4 fa39 	bl	8004114 <HAL_GetTick>
 800fca2:	4602      	mov	r2, r0
 800fca4:	697b      	ldr	r3, [r7, #20]
 800fca6:	1ad3      	subs	r3, r2, r3
 800fca8:	683a      	ldr	r2, [r7, #0]
 800fcaa:	429a      	cmp	r2, r3
 800fcac:	d803      	bhi.n	800fcb6 <HAL_SPI_Transmit+0x256>
 800fcae:	683b      	ldr	r3, [r7, #0]
 800fcb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcb4:	d102      	bne.n	800fcbc <HAL_SPI_Transmit+0x25c>
 800fcb6:	683b      	ldr	r3, [r7, #0]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d114      	bne.n	800fce6 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fcbc:	68f8      	ldr	r0, [r7, #12]
 800fcbe:	f000 fa5b 	bl	8010178 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fcd0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	2201      	movs	r2, #1
 800fcde:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800fce2:	2303      	movs	r3, #3
 800fce4:	e0b3      	b.n	800fe4e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fcec:	b29b      	uxth	r3, r3
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d19b      	bne.n	800fc2a <HAL_SPI_Transmit+0x1ca>
 800fcf2:	e086      	b.n	800fe02 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	695b      	ldr	r3, [r3, #20]
 800fcfa:	f003 0302 	and.w	r3, r3, #2
 800fcfe:	2b02      	cmp	r3, #2
 800fd00:	d154      	bne.n	800fdac <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fd08:	b29b      	uxth	r3, r3
 800fd0a:	2b03      	cmp	r3, #3
 800fd0c:	d918      	bls.n	800fd40 <HAL_SPI_Transmit+0x2e0>
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd12:	2b40      	cmp	r3, #64	; 0x40
 800fd14:	d914      	bls.n	800fd40 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	6812      	ldr	r2, [r2, #0]
 800fd20:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fd26:	1d1a      	adds	r2, r3, #4
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fd32:	b29b      	uxth	r3, r3
 800fd34:	3b04      	subs	r3, #4
 800fd36:	b29a      	uxth	r2, r3
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fd3e:	e059      	b.n	800fdf4 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fd46:	b29b      	uxth	r3, r3
 800fd48:	2b01      	cmp	r3, #1
 800fd4a:	d917      	bls.n	800fd7c <HAL_SPI_Transmit+0x31c>
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d013      	beq.n	800fd7c <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fd58:	881a      	ldrh	r2, [r3, #0]
 800fd5a:	69fb      	ldr	r3, [r7, #28]
 800fd5c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fd62:	1c9a      	adds	r2, r3, #2
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fd6e:	b29b      	uxth	r3, r3
 800fd70:	3b02      	subs	r3, #2
 800fd72:	b29a      	uxth	r2, r3
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fd7a:	e03b      	b.n	800fdf4 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	3320      	adds	r3, #32
 800fd86:	7812      	ldrb	r2, [r2, #0]
 800fd88:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fd8e:	1c5a      	adds	r2, r3, #1
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fd9a:	b29b      	uxth	r3, r3
 800fd9c:	3b01      	subs	r3, #1
 800fd9e:	b29a      	uxth	r2, r3
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fda6:	e025      	b.n	800fdf4 <HAL_SPI_Transmit+0x394>
 800fda8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fdac:	f7f4 f9b2 	bl	8004114 <HAL_GetTick>
 800fdb0:	4602      	mov	r2, r0
 800fdb2:	697b      	ldr	r3, [r7, #20]
 800fdb4:	1ad3      	subs	r3, r2, r3
 800fdb6:	683a      	ldr	r2, [r7, #0]
 800fdb8:	429a      	cmp	r2, r3
 800fdba:	d803      	bhi.n	800fdc4 <HAL_SPI_Transmit+0x364>
 800fdbc:	683b      	ldr	r3, [r7, #0]
 800fdbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdc2:	d102      	bne.n	800fdca <HAL_SPI_Transmit+0x36a>
 800fdc4:	683b      	ldr	r3, [r7, #0]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d114      	bne.n	800fdf4 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fdca:	68f8      	ldr	r0, [r7, #12]
 800fdcc:	f000 f9d4 	bl	8010178 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	2200      	movs	r2, #0
 800fdd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fdde:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	2201      	movs	r2, #1
 800fdec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800fdf0:	2303      	movs	r3, #3
 800fdf2:	e02c      	b.n	800fe4e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fdfa:	b29b      	uxth	r3, r3
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	f47f af79 	bne.w	800fcf4 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800fe02:	697b      	ldr	r3, [r7, #20]
 800fe04:	9300      	str	r3, [sp, #0]
 800fe06:	683b      	ldr	r3, [r7, #0]
 800fe08:	2200      	movs	r2, #0
 800fe0a:	2108      	movs	r1, #8
 800fe0c:	68f8      	ldr	r0, [r7, #12]
 800fe0e:	f000 fa53 	bl	80102b8 <SPI_WaitOnFlagUntilTimeout>
 800fe12:	4603      	mov	r3, r0
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d007      	beq.n	800fe28 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fe1e:	f043 0220 	orr.w	r2, r3, #32
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800fe28:	68f8      	ldr	r0, [r7, #12]
 800fe2a:	f000 f9a5 	bl	8010178 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	2200      	movs	r2, #0
 800fe32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	2201      	movs	r2, #1
 800fe3a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d001      	beq.n	800fe4c <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800fe48:	2301      	movs	r3, #1
 800fe4a:	e000      	b.n	800fe4e <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800fe4c:	7efb      	ldrb	r3, [r7, #27]
}
 800fe4e:	4618      	mov	r0, r3
 800fe50:	3720      	adds	r7, #32
 800fe52:	46bd      	mov	sp, r7
 800fe54:	bd80      	pop	{r7, pc}
 800fe56:	bf00      	nop

0800fe58 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b088      	sub	sp, #32
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	60f8      	str	r0, [r7, #12]
 800fe60:	60b9      	str	r1, [r7, #8]
 800fe62:	603b      	str	r3, [r7, #0]
 800fe64:	4613      	mov	r3, r2
 800fe66:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800fe68:	2300      	movs	r3, #0
 800fe6a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	3330      	adds	r3, #48	; 0x30
 800fe72:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fe7a:	2b01      	cmp	r3, #1
 800fe7c:	d101      	bne.n	800fe82 <HAL_SPI_Receive+0x2a>
 800fe7e:	2302      	movs	r3, #2
 800fe80:	e173      	b.n	801016a <HAL_SPI_Receive+0x312>
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	2201      	movs	r2, #1
 800fe86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fe8a:	f7f4 f943 	bl	8004114 <HAL_GetTick>
 800fe8e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800fe96:	b2db      	uxtb	r3, r3
 800fe98:	2b01      	cmp	r3, #1
 800fe9a:	d007      	beq.n	800feac <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800fe9c:	2302      	movs	r3, #2
 800fe9e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	2200      	movs	r2, #0
 800fea4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800fea8:	7ffb      	ldrb	r3, [r7, #31]
 800feaa:	e15e      	b.n	801016a <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800feac:	68bb      	ldr	r3, [r7, #8]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d002      	beq.n	800feb8 <HAL_SPI_Receive+0x60>
 800feb2:	88fb      	ldrh	r3, [r7, #6]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d107      	bne.n	800fec8 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800feb8:	2301      	movs	r3, #1
 800feba:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	2200      	movs	r2, #0
 800fec0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800fec4:	7ffb      	ldrb	r3, [r7, #31]
 800fec6:	e150      	b.n	801016a <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	2204      	movs	r2, #4
 800fecc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	2200      	movs	r2, #0
 800fed4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	68ba      	ldr	r2, [r7, #8]
 800fedc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	88fa      	ldrh	r2, [r7, #6]
 800fee2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	88fa      	ldrh	r2, [r7, #6]
 800feea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	2200      	movs	r2, #0
 800fef2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	2200      	movs	r2, #0
 800fef8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	2200      	movs	r2, #0
 800ff00:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	2200      	movs	r2, #0
 800ff08:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	689b      	ldr	r3, [r3, #8]
 800ff14:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ff18:	d108      	bne.n	800ff2c <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	681a      	ldr	r2, [r3, #0]
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ff28:	601a      	str	r2, [r3, #0]
 800ff2a:	e009      	b.n	800ff40 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	68db      	ldr	r3, [r3, #12]
 800ff32:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ff3e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	685a      	ldr	r2, [r3, #4]
 800ff46:	4b8b      	ldr	r3, [pc, #556]	; (8010174 <HAL_SPI_Receive+0x31c>)
 800ff48:	4013      	ands	r3, r2
 800ff4a:	88f9      	ldrh	r1, [r7, #6]
 800ff4c:	68fa      	ldr	r2, [r7, #12]
 800ff4e:	6812      	ldr	r2, [r2, #0]
 800ff50:	430b      	orrs	r3, r1
 800ff52:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	681a      	ldr	r2, [r3, #0]
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	f042 0201 	orr.w	r2, r2, #1
 800ff62:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	685b      	ldr	r3, [r3, #4]
 800ff68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ff6c:	d107      	bne.n	800ff7e <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	681a      	ldr	r2, [r3, #0]
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ff7c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	68db      	ldr	r3, [r3, #12]
 800ff82:	2b0f      	cmp	r3, #15
 800ff84:	d948      	bls.n	8010018 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ff86:	e040      	b.n	801000a <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	695a      	ldr	r2, [r3, #20]
 800ff8e:	f248 0308 	movw	r3, #32776	; 0x8008
 800ff92:	4013      	ands	r3, r2
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d014      	beq.n	800ffc2 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	681a      	ldr	r2, [r3, #0]
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ffa0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ffa2:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ffa8:	1d1a      	adds	r2, r3, #4
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ffb4:	b29b      	uxth	r3, r3
 800ffb6:	3b01      	subs	r3, #1
 800ffb8:	b29a      	uxth	r2, r3
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ffc0:	e023      	b.n	801000a <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ffc2:	f7f4 f8a7 	bl	8004114 <HAL_GetTick>
 800ffc6:	4602      	mov	r2, r0
 800ffc8:	697b      	ldr	r3, [r7, #20]
 800ffca:	1ad3      	subs	r3, r2, r3
 800ffcc:	683a      	ldr	r2, [r7, #0]
 800ffce:	429a      	cmp	r2, r3
 800ffd0:	d803      	bhi.n	800ffda <HAL_SPI_Receive+0x182>
 800ffd2:	683b      	ldr	r3, [r7, #0]
 800ffd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffd8:	d102      	bne.n	800ffe0 <HAL_SPI_Receive+0x188>
 800ffda:	683b      	ldr	r3, [r7, #0]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d114      	bne.n	801000a <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ffe0:	68f8      	ldr	r0, [r7, #12]
 800ffe2:	f000 f8c9 	bl	8010178 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	2200      	movs	r2, #0
 800ffea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fff4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	2201      	movs	r2, #1
 8010002:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8010006:	2303      	movs	r3, #3
 8010008:	e0af      	b.n	801016a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010010:	b29b      	uxth	r3, r3
 8010012:	2b00      	cmp	r3, #0
 8010014:	d1b8      	bne.n	800ff88 <HAL_SPI_Receive+0x130>
 8010016:	e095      	b.n	8010144 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	68db      	ldr	r3, [r3, #12]
 801001c:	2b07      	cmp	r3, #7
 801001e:	f240 808b 	bls.w	8010138 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8010022:	e03f      	b.n	80100a4 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	695b      	ldr	r3, [r3, #20]
 801002a:	f003 0301 	and.w	r3, r3, #1
 801002e:	2b01      	cmp	r3, #1
 8010030:	d114      	bne.n	801005c <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010036:	69ba      	ldr	r2, [r7, #24]
 8010038:	8812      	ldrh	r2, [r2, #0]
 801003a:	b292      	uxth	r2, r2
 801003c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010042:	1c9a      	adds	r2, r3, #2
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801004e:	b29b      	uxth	r3, r3
 8010050:	3b01      	subs	r3, #1
 8010052:	b29a      	uxth	r2, r3
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801005a:	e023      	b.n	80100a4 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801005c:	f7f4 f85a 	bl	8004114 <HAL_GetTick>
 8010060:	4602      	mov	r2, r0
 8010062:	697b      	ldr	r3, [r7, #20]
 8010064:	1ad3      	subs	r3, r2, r3
 8010066:	683a      	ldr	r2, [r7, #0]
 8010068:	429a      	cmp	r2, r3
 801006a:	d803      	bhi.n	8010074 <HAL_SPI_Receive+0x21c>
 801006c:	683b      	ldr	r3, [r7, #0]
 801006e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010072:	d102      	bne.n	801007a <HAL_SPI_Receive+0x222>
 8010074:	683b      	ldr	r3, [r7, #0]
 8010076:	2b00      	cmp	r3, #0
 8010078:	d114      	bne.n	80100a4 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801007a:	68f8      	ldr	r0, [r7, #12]
 801007c:	f000 f87c 	bl	8010178 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	2200      	movs	r2, #0
 8010084:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801008e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	2201      	movs	r2, #1
 801009c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80100a0:	2303      	movs	r3, #3
 80100a2:	e062      	b.n	801016a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80100aa:	b29b      	uxth	r3, r3
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d1b9      	bne.n	8010024 <HAL_SPI_Receive+0x1cc>
 80100b0:	e048      	b.n	8010144 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	695b      	ldr	r3, [r3, #20]
 80100b8:	f003 0301 	and.w	r3, r3, #1
 80100bc:	2b01      	cmp	r3, #1
 80100be:	d117      	bne.n	80100f0 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80100cc:	7812      	ldrb	r2, [r2, #0]
 80100ce:	b2d2      	uxtb	r2, r2
 80100d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80100d6:	1c5a      	adds	r2, r3, #1
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80100e2:	b29b      	uxth	r3, r3
 80100e4:	3b01      	subs	r3, #1
 80100e6:	b29a      	uxth	r2, r3
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80100ee:	e023      	b.n	8010138 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80100f0:	f7f4 f810 	bl	8004114 <HAL_GetTick>
 80100f4:	4602      	mov	r2, r0
 80100f6:	697b      	ldr	r3, [r7, #20]
 80100f8:	1ad3      	subs	r3, r2, r3
 80100fa:	683a      	ldr	r2, [r7, #0]
 80100fc:	429a      	cmp	r2, r3
 80100fe:	d803      	bhi.n	8010108 <HAL_SPI_Receive+0x2b0>
 8010100:	683b      	ldr	r3, [r7, #0]
 8010102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010106:	d102      	bne.n	801010e <HAL_SPI_Receive+0x2b6>
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	2b00      	cmp	r3, #0
 801010c:	d114      	bne.n	8010138 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801010e:	68f8      	ldr	r0, [r7, #12]
 8010110:	f000 f832 	bl	8010178 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	2200      	movs	r2, #0
 8010118:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010122:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	2201      	movs	r2, #1
 8010130:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8010134:	2303      	movs	r3, #3
 8010136:	e018      	b.n	801016a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801013e:	b29b      	uxth	r3, r3
 8010140:	2b00      	cmp	r3, #0
 8010142:	d1b6      	bne.n	80100b2 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010144:	68f8      	ldr	r0, [r7, #12]
 8010146:	f000 f817 	bl	8010178 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	2200      	movs	r2, #0
 801014e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	2201      	movs	r2, #1
 8010156:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010160:	2b00      	cmp	r3, #0
 8010162:	d001      	beq.n	8010168 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 8010164:	2301      	movs	r3, #1
 8010166:	e000      	b.n	801016a <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 8010168:	7ffb      	ldrb	r3, [r7, #31]
}
 801016a:	4618      	mov	r0, r3
 801016c:	3720      	adds	r7, #32
 801016e:	46bd      	mov	sp, r7
 8010170:	bd80      	pop	{r7, pc}
 8010172:	bf00      	nop
 8010174:	ffff0000 	.word	0xffff0000

08010178 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8010178:	b480      	push	{r7}
 801017a:	b085      	sub	sp, #20
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	695b      	ldr	r3, [r3, #20]
 8010186:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	699a      	ldr	r2, [r3, #24]
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	f042 0208 	orr.w	r2, r2, #8
 8010196:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	699a      	ldr	r2, [r3, #24]
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	f042 0210 	orr.w	r2, r2, #16
 80101a6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	681a      	ldr	r2, [r3, #0]
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	f022 0201 	bic.w	r2, r2, #1
 80101b6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	6919      	ldr	r1, [r3, #16]
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681a      	ldr	r2, [r3, #0]
 80101c2:	4b3c      	ldr	r3, [pc, #240]	; (80102b4 <SPI_CloseTransfer+0x13c>)
 80101c4:	400b      	ands	r3, r1
 80101c6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	689a      	ldr	r2, [r3, #8]
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80101d6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80101de:	b2db      	uxtb	r3, r3
 80101e0:	2b04      	cmp	r3, #4
 80101e2:	d014      	beq.n	801020e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	f003 0320 	and.w	r3, r3, #32
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d00f      	beq.n	801020e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80101f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	699a      	ldr	r2, [r3, #24]
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	f042 0220 	orr.w	r2, r2, #32
 801020c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010214:	b2db      	uxtb	r3, r3
 8010216:	2b03      	cmp	r3, #3
 8010218:	d014      	beq.n	8010244 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010220:	2b00      	cmp	r3, #0
 8010222:	d00f      	beq.n	8010244 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801022a:	f043 0204 	orr.w	r2, r3, #4
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	699a      	ldr	r2, [r3, #24]
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010242:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801024a:	2b00      	cmp	r3, #0
 801024c:	d00f      	beq.n	801026e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010254:	f043 0201 	orr.w	r2, r3, #1
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	699a      	ldr	r2, [r3, #24]
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801026c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010274:	2b00      	cmp	r3, #0
 8010276:	d00f      	beq.n	8010298 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801027e:	f043 0208 	orr.w	r2, r3, #8
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	699a      	ldr	r2, [r3, #24]
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010296:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	2200      	movs	r2, #0
 801029c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	2200      	movs	r2, #0
 80102a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80102a8:	bf00      	nop
 80102aa:	3714      	adds	r7, #20
 80102ac:	46bd      	mov	sp, r7
 80102ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b2:	4770      	bx	lr
 80102b4:	fffffc90 	.word	0xfffffc90

080102b8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b084      	sub	sp, #16
 80102bc:	af00      	add	r7, sp, #0
 80102be:	60f8      	str	r0, [r7, #12]
 80102c0:	60b9      	str	r1, [r7, #8]
 80102c2:	603b      	str	r3, [r7, #0]
 80102c4:	4613      	mov	r3, r2
 80102c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80102c8:	e010      	b.n	80102ec <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80102ca:	f7f3 ff23 	bl	8004114 <HAL_GetTick>
 80102ce:	4602      	mov	r2, r0
 80102d0:	69bb      	ldr	r3, [r7, #24]
 80102d2:	1ad3      	subs	r3, r2, r3
 80102d4:	683a      	ldr	r2, [r7, #0]
 80102d6:	429a      	cmp	r2, r3
 80102d8:	d803      	bhi.n	80102e2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80102da:	683b      	ldr	r3, [r7, #0]
 80102dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102e0:	d102      	bne.n	80102e8 <SPI_WaitOnFlagUntilTimeout+0x30>
 80102e2:	683b      	ldr	r3, [r7, #0]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d101      	bne.n	80102ec <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80102e8:	2303      	movs	r3, #3
 80102ea:	e00f      	b.n	801030c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	695a      	ldr	r2, [r3, #20]
 80102f2:	68bb      	ldr	r3, [r7, #8]
 80102f4:	4013      	ands	r3, r2
 80102f6:	68ba      	ldr	r2, [r7, #8]
 80102f8:	429a      	cmp	r2, r3
 80102fa:	bf0c      	ite	eq
 80102fc:	2301      	moveq	r3, #1
 80102fe:	2300      	movne	r3, #0
 8010300:	b2db      	uxtb	r3, r3
 8010302:	461a      	mov	r2, r3
 8010304:	79fb      	ldrb	r3, [r7, #7]
 8010306:	429a      	cmp	r2, r3
 8010308:	d0df      	beq.n	80102ca <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 801030a:	2300      	movs	r3, #0
}
 801030c:	4618      	mov	r0, r3
 801030e:	3710      	adds	r7, #16
 8010310:	46bd      	mov	sp, r7
 8010312:	bd80      	pop	{r7, pc}

08010314 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8010314:	b480      	push	{r7}
 8010316:	b085      	sub	sp, #20
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010320:	095b      	lsrs	r3, r3, #5
 8010322:	3301      	adds	r3, #1
 8010324:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	68db      	ldr	r3, [r3, #12]
 801032a:	3301      	adds	r3, #1
 801032c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801032e:	68bb      	ldr	r3, [r7, #8]
 8010330:	3307      	adds	r3, #7
 8010332:	08db      	lsrs	r3, r3, #3
 8010334:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8010336:	68bb      	ldr	r3, [r7, #8]
 8010338:	68fa      	ldr	r2, [r7, #12]
 801033a:	fb02 f303 	mul.w	r3, r2, r3
}
 801033e:	4618      	mov	r0, r3
 8010340:	3714      	adds	r7, #20
 8010342:	46bd      	mov	sp, r7
 8010344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010348:	4770      	bx	lr

0801034a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801034a:	b580      	push	{r7, lr}
 801034c:	b082      	sub	sp, #8
 801034e:	af00      	add	r7, sp, #0
 8010350:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d101      	bne.n	801035c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010358:	2301      	movs	r3, #1
 801035a:	e049      	b.n	80103f0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010362:	b2db      	uxtb	r3, r3
 8010364:	2b00      	cmp	r3, #0
 8010366:	d106      	bne.n	8010376 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	2200      	movs	r2, #0
 801036c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010370:	6878      	ldr	r0, [r7, #4]
 8010372:	f7f3 fa91 	bl	8003898 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	2202      	movs	r2, #2
 801037a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	681a      	ldr	r2, [r3, #0]
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	3304      	adds	r3, #4
 8010386:	4619      	mov	r1, r3
 8010388:	4610      	mov	r0, r2
 801038a:	f000 ff29 	bl	80111e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	2201      	movs	r2, #1
 8010392:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	2201      	movs	r2, #1
 801039a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	2201      	movs	r2, #1
 80103a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	2201      	movs	r2, #1
 80103aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	2201      	movs	r2, #1
 80103b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	2201      	movs	r2, #1
 80103ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	2201      	movs	r2, #1
 80103c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	2201      	movs	r2, #1
 80103ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	2201      	movs	r2, #1
 80103d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	2201      	movs	r2, #1
 80103da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	2201      	movs	r2, #1
 80103e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	2201      	movs	r2, #1
 80103ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80103ee:	2300      	movs	r3, #0
}
 80103f0:	4618      	mov	r0, r3
 80103f2:	3708      	adds	r7, #8
 80103f4:	46bd      	mov	sp, r7
 80103f6:	bd80      	pop	{r7, pc}

080103f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b082      	sub	sp, #8
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d101      	bne.n	801040a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010406:	2301      	movs	r3, #1
 8010408:	e049      	b.n	801049e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010410:	b2db      	uxtb	r3, r3
 8010412:	2b00      	cmp	r3, #0
 8010414:	d106      	bne.n	8010424 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	2200      	movs	r2, #0
 801041a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801041e:	6878      	ldr	r0, [r7, #4]
 8010420:	f7f3 f8a4 	bl	800356c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	2202      	movs	r2, #2
 8010428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	681a      	ldr	r2, [r3, #0]
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	3304      	adds	r3, #4
 8010434:	4619      	mov	r1, r3
 8010436:	4610      	mov	r0, r2
 8010438:	f000 fed2 	bl	80111e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	2201      	movs	r2, #1
 8010440:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	2201      	movs	r2, #1
 8010448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	2201      	movs	r2, #1
 8010450:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	2201      	movs	r2, #1
 8010458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	2201      	movs	r2, #1
 8010460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	2201      	movs	r2, #1
 8010468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	2201      	movs	r2, #1
 8010470:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	2201      	movs	r2, #1
 8010478:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	2201      	movs	r2, #1
 8010480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	2201      	movs	r2, #1
 8010488:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	2201      	movs	r2, #1
 8010490:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	2201      	movs	r2, #1
 8010498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801049c:	2300      	movs	r3, #0
}
 801049e:	4618      	mov	r0, r3
 80104a0:	3708      	adds	r7, #8
 80104a2:	46bd      	mov	sp, r7
 80104a4:	bd80      	pop	{r7, pc}
	...

080104a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b084      	sub	sp, #16
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	6078      	str	r0, [r7, #4]
 80104b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80104b2:	683b      	ldr	r3, [r7, #0]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d109      	bne.n	80104cc <HAL_TIM_PWM_Start+0x24>
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80104be:	b2db      	uxtb	r3, r3
 80104c0:	2b01      	cmp	r3, #1
 80104c2:	bf14      	ite	ne
 80104c4:	2301      	movne	r3, #1
 80104c6:	2300      	moveq	r3, #0
 80104c8:	b2db      	uxtb	r3, r3
 80104ca:	e03c      	b.n	8010546 <HAL_TIM_PWM_Start+0x9e>
 80104cc:	683b      	ldr	r3, [r7, #0]
 80104ce:	2b04      	cmp	r3, #4
 80104d0:	d109      	bne.n	80104e6 <HAL_TIM_PWM_Start+0x3e>
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80104d8:	b2db      	uxtb	r3, r3
 80104da:	2b01      	cmp	r3, #1
 80104dc:	bf14      	ite	ne
 80104de:	2301      	movne	r3, #1
 80104e0:	2300      	moveq	r3, #0
 80104e2:	b2db      	uxtb	r3, r3
 80104e4:	e02f      	b.n	8010546 <HAL_TIM_PWM_Start+0x9e>
 80104e6:	683b      	ldr	r3, [r7, #0]
 80104e8:	2b08      	cmp	r3, #8
 80104ea:	d109      	bne.n	8010500 <HAL_TIM_PWM_Start+0x58>
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80104f2:	b2db      	uxtb	r3, r3
 80104f4:	2b01      	cmp	r3, #1
 80104f6:	bf14      	ite	ne
 80104f8:	2301      	movne	r3, #1
 80104fa:	2300      	moveq	r3, #0
 80104fc:	b2db      	uxtb	r3, r3
 80104fe:	e022      	b.n	8010546 <HAL_TIM_PWM_Start+0x9e>
 8010500:	683b      	ldr	r3, [r7, #0]
 8010502:	2b0c      	cmp	r3, #12
 8010504:	d109      	bne.n	801051a <HAL_TIM_PWM_Start+0x72>
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801050c:	b2db      	uxtb	r3, r3
 801050e:	2b01      	cmp	r3, #1
 8010510:	bf14      	ite	ne
 8010512:	2301      	movne	r3, #1
 8010514:	2300      	moveq	r3, #0
 8010516:	b2db      	uxtb	r3, r3
 8010518:	e015      	b.n	8010546 <HAL_TIM_PWM_Start+0x9e>
 801051a:	683b      	ldr	r3, [r7, #0]
 801051c:	2b10      	cmp	r3, #16
 801051e:	d109      	bne.n	8010534 <HAL_TIM_PWM_Start+0x8c>
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010526:	b2db      	uxtb	r3, r3
 8010528:	2b01      	cmp	r3, #1
 801052a:	bf14      	ite	ne
 801052c:	2301      	movne	r3, #1
 801052e:	2300      	moveq	r3, #0
 8010530:	b2db      	uxtb	r3, r3
 8010532:	e008      	b.n	8010546 <HAL_TIM_PWM_Start+0x9e>
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801053a:	b2db      	uxtb	r3, r3
 801053c:	2b01      	cmp	r3, #1
 801053e:	bf14      	ite	ne
 8010540:	2301      	movne	r3, #1
 8010542:	2300      	moveq	r3, #0
 8010544:	b2db      	uxtb	r3, r3
 8010546:	2b00      	cmp	r3, #0
 8010548:	d001      	beq.n	801054e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801054a:	2301      	movs	r3, #1
 801054c:	e0ab      	b.n	80106a6 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801054e:	683b      	ldr	r3, [r7, #0]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d104      	bne.n	801055e <HAL_TIM_PWM_Start+0xb6>
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	2202      	movs	r2, #2
 8010558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801055c:	e023      	b.n	80105a6 <HAL_TIM_PWM_Start+0xfe>
 801055e:	683b      	ldr	r3, [r7, #0]
 8010560:	2b04      	cmp	r3, #4
 8010562:	d104      	bne.n	801056e <HAL_TIM_PWM_Start+0xc6>
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	2202      	movs	r2, #2
 8010568:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801056c:	e01b      	b.n	80105a6 <HAL_TIM_PWM_Start+0xfe>
 801056e:	683b      	ldr	r3, [r7, #0]
 8010570:	2b08      	cmp	r3, #8
 8010572:	d104      	bne.n	801057e <HAL_TIM_PWM_Start+0xd6>
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	2202      	movs	r2, #2
 8010578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801057c:	e013      	b.n	80105a6 <HAL_TIM_PWM_Start+0xfe>
 801057e:	683b      	ldr	r3, [r7, #0]
 8010580:	2b0c      	cmp	r3, #12
 8010582:	d104      	bne.n	801058e <HAL_TIM_PWM_Start+0xe6>
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2202      	movs	r2, #2
 8010588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801058c:	e00b      	b.n	80105a6 <HAL_TIM_PWM_Start+0xfe>
 801058e:	683b      	ldr	r3, [r7, #0]
 8010590:	2b10      	cmp	r3, #16
 8010592:	d104      	bne.n	801059e <HAL_TIM_PWM_Start+0xf6>
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	2202      	movs	r2, #2
 8010598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801059c:	e003      	b.n	80105a6 <HAL_TIM_PWM_Start+0xfe>
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	2202      	movs	r2, #2
 80105a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	2201      	movs	r2, #1
 80105ac:	6839      	ldr	r1, [r7, #0]
 80105ae:	4618      	mov	r0, r3
 80105b0:	f001 f992 	bl	80118d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	4a3d      	ldr	r2, [pc, #244]	; (80106b0 <HAL_TIM_PWM_Start+0x208>)
 80105ba:	4293      	cmp	r3, r2
 80105bc:	d013      	beq.n	80105e6 <HAL_TIM_PWM_Start+0x13e>
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	4a3c      	ldr	r2, [pc, #240]	; (80106b4 <HAL_TIM_PWM_Start+0x20c>)
 80105c4:	4293      	cmp	r3, r2
 80105c6:	d00e      	beq.n	80105e6 <HAL_TIM_PWM_Start+0x13e>
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	4a3a      	ldr	r2, [pc, #232]	; (80106b8 <HAL_TIM_PWM_Start+0x210>)
 80105ce:	4293      	cmp	r3, r2
 80105d0:	d009      	beq.n	80105e6 <HAL_TIM_PWM_Start+0x13e>
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	4a39      	ldr	r2, [pc, #228]	; (80106bc <HAL_TIM_PWM_Start+0x214>)
 80105d8:	4293      	cmp	r3, r2
 80105da:	d004      	beq.n	80105e6 <HAL_TIM_PWM_Start+0x13e>
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	4a37      	ldr	r2, [pc, #220]	; (80106c0 <HAL_TIM_PWM_Start+0x218>)
 80105e2:	4293      	cmp	r3, r2
 80105e4:	d101      	bne.n	80105ea <HAL_TIM_PWM_Start+0x142>
 80105e6:	2301      	movs	r3, #1
 80105e8:	e000      	b.n	80105ec <HAL_TIM_PWM_Start+0x144>
 80105ea:	2300      	movs	r3, #0
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d007      	beq.n	8010600 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80105fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	4a2a      	ldr	r2, [pc, #168]	; (80106b0 <HAL_TIM_PWM_Start+0x208>)
 8010606:	4293      	cmp	r3, r2
 8010608:	d02c      	beq.n	8010664 <HAL_TIM_PWM_Start+0x1bc>
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010612:	d027      	beq.n	8010664 <HAL_TIM_PWM_Start+0x1bc>
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	4a2a      	ldr	r2, [pc, #168]	; (80106c4 <HAL_TIM_PWM_Start+0x21c>)
 801061a:	4293      	cmp	r3, r2
 801061c:	d022      	beq.n	8010664 <HAL_TIM_PWM_Start+0x1bc>
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	4a29      	ldr	r2, [pc, #164]	; (80106c8 <HAL_TIM_PWM_Start+0x220>)
 8010624:	4293      	cmp	r3, r2
 8010626:	d01d      	beq.n	8010664 <HAL_TIM_PWM_Start+0x1bc>
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	4a27      	ldr	r2, [pc, #156]	; (80106cc <HAL_TIM_PWM_Start+0x224>)
 801062e:	4293      	cmp	r3, r2
 8010630:	d018      	beq.n	8010664 <HAL_TIM_PWM_Start+0x1bc>
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	4a1f      	ldr	r2, [pc, #124]	; (80106b4 <HAL_TIM_PWM_Start+0x20c>)
 8010638:	4293      	cmp	r3, r2
 801063a:	d013      	beq.n	8010664 <HAL_TIM_PWM_Start+0x1bc>
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	4a23      	ldr	r2, [pc, #140]	; (80106d0 <HAL_TIM_PWM_Start+0x228>)
 8010642:	4293      	cmp	r3, r2
 8010644:	d00e      	beq.n	8010664 <HAL_TIM_PWM_Start+0x1bc>
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	4a1b      	ldr	r2, [pc, #108]	; (80106b8 <HAL_TIM_PWM_Start+0x210>)
 801064c:	4293      	cmp	r3, r2
 801064e:	d009      	beq.n	8010664 <HAL_TIM_PWM_Start+0x1bc>
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	4a1f      	ldr	r2, [pc, #124]	; (80106d4 <HAL_TIM_PWM_Start+0x22c>)
 8010656:	4293      	cmp	r3, r2
 8010658:	d004      	beq.n	8010664 <HAL_TIM_PWM_Start+0x1bc>
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	4a1e      	ldr	r2, [pc, #120]	; (80106d8 <HAL_TIM_PWM_Start+0x230>)
 8010660:	4293      	cmp	r3, r2
 8010662:	d115      	bne.n	8010690 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	689a      	ldr	r2, [r3, #8]
 801066a:	4b1c      	ldr	r3, [pc, #112]	; (80106dc <HAL_TIM_PWM_Start+0x234>)
 801066c:	4013      	ands	r3, r2
 801066e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	2b06      	cmp	r3, #6
 8010674:	d015      	beq.n	80106a2 <HAL_TIM_PWM_Start+0x1fa>
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801067c:	d011      	beq.n	80106a2 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	681a      	ldr	r2, [r3, #0]
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	f042 0201 	orr.w	r2, r2, #1
 801068c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801068e:	e008      	b.n	80106a2 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	681a      	ldr	r2, [r3, #0]
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	f042 0201 	orr.w	r2, r2, #1
 801069e:	601a      	str	r2, [r3, #0]
 80106a0:	e000      	b.n	80106a4 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80106a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80106a4:	2300      	movs	r3, #0
}
 80106a6:	4618      	mov	r0, r3
 80106a8:	3710      	adds	r7, #16
 80106aa:	46bd      	mov	sp, r7
 80106ac:	bd80      	pop	{r7, pc}
 80106ae:	bf00      	nop
 80106b0:	40010000 	.word	0x40010000
 80106b4:	40010400 	.word	0x40010400
 80106b8:	40014000 	.word	0x40014000
 80106bc:	40014400 	.word	0x40014400
 80106c0:	40014800 	.word	0x40014800
 80106c4:	40000400 	.word	0x40000400
 80106c8:	40000800 	.word	0x40000800
 80106cc:	40000c00 	.word	0x40000c00
 80106d0:	40001800 	.word	0x40001800
 80106d4:	4000e000 	.word	0x4000e000
 80106d8:	4000e400 	.word	0x4000e400
 80106dc:	00010007 	.word	0x00010007

080106e0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80106e0:	b580      	push	{r7, lr}
 80106e2:	b086      	sub	sp, #24
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	60f8      	str	r0, [r7, #12]
 80106e8:	60b9      	str	r1, [r7, #8]
 80106ea:	607a      	str	r2, [r7, #4]
 80106ec:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80106ee:	2300      	movs	r3, #0
 80106f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80106f2:	68bb      	ldr	r3, [r7, #8]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d109      	bne.n	801070c <HAL_TIM_PWM_Start_DMA+0x2c>
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80106fe:	b2db      	uxtb	r3, r3
 8010700:	2b02      	cmp	r3, #2
 8010702:	bf0c      	ite	eq
 8010704:	2301      	moveq	r3, #1
 8010706:	2300      	movne	r3, #0
 8010708:	b2db      	uxtb	r3, r3
 801070a:	e03c      	b.n	8010786 <HAL_TIM_PWM_Start_DMA+0xa6>
 801070c:	68bb      	ldr	r3, [r7, #8]
 801070e:	2b04      	cmp	r3, #4
 8010710:	d109      	bne.n	8010726 <HAL_TIM_PWM_Start_DMA+0x46>
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010718:	b2db      	uxtb	r3, r3
 801071a:	2b02      	cmp	r3, #2
 801071c:	bf0c      	ite	eq
 801071e:	2301      	moveq	r3, #1
 8010720:	2300      	movne	r3, #0
 8010722:	b2db      	uxtb	r3, r3
 8010724:	e02f      	b.n	8010786 <HAL_TIM_PWM_Start_DMA+0xa6>
 8010726:	68bb      	ldr	r3, [r7, #8]
 8010728:	2b08      	cmp	r3, #8
 801072a:	d109      	bne.n	8010740 <HAL_TIM_PWM_Start_DMA+0x60>
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010732:	b2db      	uxtb	r3, r3
 8010734:	2b02      	cmp	r3, #2
 8010736:	bf0c      	ite	eq
 8010738:	2301      	moveq	r3, #1
 801073a:	2300      	movne	r3, #0
 801073c:	b2db      	uxtb	r3, r3
 801073e:	e022      	b.n	8010786 <HAL_TIM_PWM_Start_DMA+0xa6>
 8010740:	68bb      	ldr	r3, [r7, #8]
 8010742:	2b0c      	cmp	r3, #12
 8010744:	d109      	bne.n	801075a <HAL_TIM_PWM_Start_DMA+0x7a>
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801074c:	b2db      	uxtb	r3, r3
 801074e:	2b02      	cmp	r3, #2
 8010750:	bf0c      	ite	eq
 8010752:	2301      	moveq	r3, #1
 8010754:	2300      	movne	r3, #0
 8010756:	b2db      	uxtb	r3, r3
 8010758:	e015      	b.n	8010786 <HAL_TIM_PWM_Start_DMA+0xa6>
 801075a:	68bb      	ldr	r3, [r7, #8]
 801075c:	2b10      	cmp	r3, #16
 801075e:	d109      	bne.n	8010774 <HAL_TIM_PWM_Start_DMA+0x94>
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010766:	b2db      	uxtb	r3, r3
 8010768:	2b02      	cmp	r3, #2
 801076a:	bf0c      	ite	eq
 801076c:	2301      	moveq	r3, #1
 801076e:	2300      	movne	r3, #0
 8010770:	b2db      	uxtb	r3, r3
 8010772:	e008      	b.n	8010786 <HAL_TIM_PWM_Start_DMA+0xa6>
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801077a:	b2db      	uxtb	r3, r3
 801077c:	2b02      	cmp	r3, #2
 801077e:	bf0c      	ite	eq
 8010780:	2301      	moveq	r3, #1
 8010782:	2300      	movne	r3, #0
 8010784:	b2db      	uxtb	r3, r3
 8010786:	2b00      	cmp	r3, #0
 8010788:	d001      	beq.n	801078e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 801078a:	2302      	movs	r3, #2
 801078c:	e1ba      	b.n	8010b04 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 801078e:	68bb      	ldr	r3, [r7, #8]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d109      	bne.n	80107a8 <HAL_TIM_PWM_Start_DMA+0xc8>
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801079a:	b2db      	uxtb	r3, r3
 801079c:	2b01      	cmp	r3, #1
 801079e:	bf0c      	ite	eq
 80107a0:	2301      	moveq	r3, #1
 80107a2:	2300      	movne	r3, #0
 80107a4:	b2db      	uxtb	r3, r3
 80107a6:	e03c      	b.n	8010822 <HAL_TIM_PWM_Start_DMA+0x142>
 80107a8:	68bb      	ldr	r3, [r7, #8]
 80107aa:	2b04      	cmp	r3, #4
 80107ac:	d109      	bne.n	80107c2 <HAL_TIM_PWM_Start_DMA+0xe2>
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80107b4:	b2db      	uxtb	r3, r3
 80107b6:	2b01      	cmp	r3, #1
 80107b8:	bf0c      	ite	eq
 80107ba:	2301      	moveq	r3, #1
 80107bc:	2300      	movne	r3, #0
 80107be:	b2db      	uxtb	r3, r3
 80107c0:	e02f      	b.n	8010822 <HAL_TIM_PWM_Start_DMA+0x142>
 80107c2:	68bb      	ldr	r3, [r7, #8]
 80107c4:	2b08      	cmp	r3, #8
 80107c6:	d109      	bne.n	80107dc <HAL_TIM_PWM_Start_DMA+0xfc>
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80107ce:	b2db      	uxtb	r3, r3
 80107d0:	2b01      	cmp	r3, #1
 80107d2:	bf0c      	ite	eq
 80107d4:	2301      	moveq	r3, #1
 80107d6:	2300      	movne	r3, #0
 80107d8:	b2db      	uxtb	r3, r3
 80107da:	e022      	b.n	8010822 <HAL_TIM_PWM_Start_DMA+0x142>
 80107dc:	68bb      	ldr	r3, [r7, #8]
 80107de:	2b0c      	cmp	r3, #12
 80107e0:	d109      	bne.n	80107f6 <HAL_TIM_PWM_Start_DMA+0x116>
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80107e8:	b2db      	uxtb	r3, r3
 80107ea:	2b01      	cmp	r3, #1
 80107ec:	bf0c      	ite	eq
 80107ee:	2301      	moveq	r3, #1
 80107f0:	2300      	movne	r3, #0
 80107f2:	b2db      	uxtb	r3, r3
 80107f4:	e015      	b.n	8010822 <HAL_TIM_PWM_Start_DMA+0x142>
 80107f6:	68bb      	ldr	r3, [r7, #8]
 80107f8:	2b10      	cmp	r3, #16
 80107fa:	d109      	bne.n	8010810 <HAL_TIM_PWM_Start_DMA+0x130>
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010802:	b2db      	uxtb	r3, r3
 8010804:	2b01      	cmp	r3, #1
 8010806:	bf0c      	ite	eq
 8010808:	2301      	moveq	r3, #1
 801080a:	2300      	movne	r3, #0
 801080c:	b2db      	uxtb	r3, r3
 801080e:	e008      	b.n	8010822 <HAL_TIM_PWM_Start_DMA+0x142>
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010816:	b2db      	uxtb	r3, r3
 8010818:	2b01      	cmp	r3, #1
 801081a:	bf0c      	ite	eq
 801081c:	2301      	moveq	r3, #1
 801081e:	2300      	movne	r3, #0
 8010820:	b2db      	uxtb	r3, r3
 8010822:	2b00      	cmp	r3, #0
 8010824:	d034      	beq.n	8010890 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d002      	beq.n	8010832 <HAL_TIM_PWM_Start_DMA+0x152>
 801082c:	887b      	ldrh	r3, [r7, #2]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d101      	bne.n	8010836 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8010832:	2301      	movs	r3, #1
 8010834:	e166      	b.n	8010b04 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010836:	68bb      	ldr	r3, [r7, #8]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d104      	bne.n	8010846 <HAL_TIM_PWM_Start_DMA+0x166>
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	2202      	movs	r2, #2
 8010840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010844:	e026      	b.n	8010894 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8010846:	68bb      	ldr	r3, [r7, #8]
 8010848:	2b04      	cmp	r3, #4
 801084a:	d104      	bne.n	8010856 <HAL_TIM_PWM_Start_DMA+0x176>
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	2202      	movs	r2, #2
 8010850:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010854:	e01e      	b.n	8010894 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8010856:	68bb      	ldr	r3, [r7, #8]
 8010858:	2b08      	cmp	r3, #8
 801085a:	d104      	bne.n	8010866 <HAL_TIM_PWM_Start_DMA+0x186>
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	2202      	movs	r2, #2
 8010860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010864:	e016      	b.n	8010894 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8010866:	68bb      	ldr	r3, [r7, #8]
 8010868:	2b0c      	cmp	r3, #12
 801086a:	d104      	bne.n	8010876 <HAL_TIM_PWM_Start_DMA+0x196>
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	2202      	movs	r2, #2
 8010870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010874:	e00e      	b.n	8010894 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8010876:	68bb      	ldr	r3, [r7, #8]
 8010878:	2b10      	cmp	r3, #16
 801087a:	d104      	bne.n	8010886 <HAL_TIM_PWM_Start_DMA+0x1a6>
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	2202      	movs	r2, #2
 8010880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010884:	e006      	b.n	8010894 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	2202      	movs	r2, #2
 801088a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801088e:	e001      	b.n	8010894 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8010890:	2301      	movs	r3, #1
 8010892:	e137      	b.n	8010b04 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 8010894:	68bb      	ldr	r3, [r7, #8]
 8010896:	2b0c      	cmp	r3, #12
 8010898:	f200 80ae 	bhi.w	80109f8 <HAL_TIM_PWM_Start_DMA+0x318>
 801089c:	a201      	add	r2, pc, #4	; (adr r2, 80108a4 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 801089e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108a2:	bf00      	nop
 80108a4:	080108d9 	.word	0x080108d9
 80108a8:	080109f9 	.word	0x080109f9
 80108ac:	080109f9 	.word	0x080109f9
 80108b0:	080109f9 	.word	0x080109f9
 80108b4:	08010921 	.word	0x08010921
 80108b8:	080109f9 	.word	0x080109f9
 80108bc:	080109f9 	.word	0x080109f9
 80108c0:	080109f9 	.word	0x080109f9
 80108c4:	08010969 	.word	0x08010969
 80108c8:	080109f9 	.word	0x080109f9
 80108cc:	080109f9 	.word	0x080109f9
 80108d0:	080109f9 	.word	0x080109f9
 80108d4:	080109b1 	.word	0x080109b1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108dc:	4a8b      	ldr	r2, [pc, #556]	; (8010b0c <HAL_TIM_PWM_Start_DMA+0x42c>)
 80108de:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108e4:	4a8a      	ldr	r2, [pc, #552]	; (8010b10 <HAL_TIM_PWM_Start_DMA+0x430>)
 80108e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108ec:	4a89      	ldr	r2, [pc, #548]	; (8010b14 <HAL_TIM_PWM_Start_DMA+0x434>)
 80108ee:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80108f4:	6879      	ldr	r1, [r7, #4]
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	3334      	adds	r3, #52	; 0x34
 80108fc:	461a      	mov	r2, r3
 80108fe:	887b      	ldrh	r3, [r7, #2]
 8010900:	f7f6 f872 	bl	80069e8 <HAL_DMA_Start_IT>
 8010904:	4603      	mov	r3, r0
 8010906:	2b00      	cmp	r3, #0
 8010908:	d001      	beq.n	801090e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 801090a:	2301      	movs	r3, #1
 801090c:	e0fa      	b.n	8010b04 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	68da      	ldr	r2, [r3, #12]
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801091c:	60da      	str	r2, [r3, #12]
      break;
 801091e:	e06e      	b.n	80109fe <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010924:	4a79      	ldr	r2, [pc, #484]	; (8010b0c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8010926:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801092c:	4a78      	ldr	r2, [pc, #480]	; (8010b10 <HAL_TIM_PWM_Start_DMA+0x430>)
 801092e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010934:	4a77      	ldr	r2, [pc, #476]	; (8010b14 <HAL_TIM_PWM_Start_DMA+0x434>)
 8010936:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801093c:	6879      	ldr	r1, [r7, #4]
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	3338      	adds	r3, #56	; 0x38
 8010944:	461a      	mov	r2, r3
 8010946:	887b      	ldrh	r3, [r7, #2]
 8010948:	f7f6 f84e 	bl	80069e8 <HAL_DMA_Start_IT>
 801094c:	4603      	mov	r3, r0
 801094e:	2b00      	cmp	r3, #0
 8010950:	d001      	beq.n	8010956 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8010952:	2301      	movs	r3, #1
 8010954:	e0d6      	b.n	8010b04 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	68da      	ldr	r2, [r3, #12]
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010964:	60da      	str	r2, [r3, #12]
      break;
 8010966:	e04a      	b.n	80109fe <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801096c:	4a67      	ldr	r2, [pc, #412]	; (8010b0c <HAL_TIM_PWM_Start_DMA+0x42c>)
 801096e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010974:	4a66      	ldr	r2, [pc, #408]	; (8010b10 <HAL_TIM_PWM_Start_DMA+0x430>)
 8010976:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801097c:	4a65      	ldr	r2, [pc, #404]	; (8010b14 <HAL_TIM_PWM_Start_DMA+0x434>)
 801097e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8010984:	6879      	ldr	r1, [r7, #4]
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	333c      	adds	r3, #60	; 0x3c
 801098c:	461a      	mov	r2, r3
 801098e:	887b      	ldrh	r3, [r7, #2]
 8010990:	f7f6 f82a 	bl	80069e8 <HAL_DMA_Start_IT>
 8010994:	4603      	mov	r3, r0
 8010996:	2b00      	cmp	r3, #0
 8010998:	d001      	beq.n	801099e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 801099a:	2301      	movs	r3, #1
 801099c:	e0b2      	b.n	8010b04 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	68da      	ldr	r2, [r3, #12]
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80109ac:	60da      	str	r2, [r3, #12]
      break;
 80109ae:	e026      	b.n	80109fe <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109b4:	4a55      	ldr	r2, [pc, #340]	; (8010b0c <HAL_TIM_PWM_Start_DMA+0x42c>)
 80109b6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109bc:	4a54      	ldr	r2, [pc, #336]	; (8010b10 <HAL_TIM_PWM_Start_DMA+0x430>)
 80109be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109c4:	4a53      	ldr	r2, [pc, #332]	; (8010b14 <HAL_TIM_PWM_Start_DMA+0x434>)
 80109c6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80109cc:	6879      	ldr	r1, [r7, #4]
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	3340      	adds	r3, #64	; 0x40
 80109d4:	461a      	mov	r2, r3
 80109d6:	887b      	ldrh	r3, [r7, #2]
 80109d8:	f7f6 f806 	bl	80069e8 <HAL_DMA_Start_IT>
 80109dc:	4603      	mov	r3, r0
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d001      	beq.n	80109e6 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80109e2:	2301      	movs	r3, #1
 80109e4:	e08e      	b.n	8010b04 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	68da      	ldr	r2, [r3, #12]
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80109f4:	60da      	str	r2, [r3, #12]
      break;
 80109f6:	e002      	b.n	80109fe <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80109f8:	2301      	movs	r3, #1
 80109fa:	75fb      	strb	r3, [r7, #23]
      break;
 80109fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80109fe:	7dfb      	ldrb	r3, [r7, #23]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d17e      	bne.n	8010b02 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	2201      	movs	r2, #1
 8010a0a:	68b9      	ldr	r1, [r7, #8]
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	f000 ff63 	bl	80118d8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	4a40      	ldr	r2, [pc, #256]	; (8010b18 <HAL_TIM_PWM_Start_DMA+0x438>)
 8010a18:	4293      	cmp	r3, r2
 8010a1a:	d013      	beq.n	8010a44 <HAL_TIM_PWM_Start_DMA+0x364>
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	4a3e      	ldr	r2, [pc, #248]	; (8010b1c <HAL_TIM_PWM_Start_DMA+0x43c>)
 8010a22:	4293      	cmp	r3, r2
 8010a24:	d00e      	beq.n	8010a44 <HAL_TIM_PWM_Start_DMA+0x364>
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	4a3d      	ldr	r2, [pc, #244]	; (8010b20 <HAL_TIM_PWM_Start_DMA+0x440>)
 8010a2c:	4293      	cmp	r3, r2
 8010a2e:	d009      	beq.n	8010a44 <HAL_TIM_PWM_Start_DMA+0x364>
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	4a3b      	ldr	r2, [pc, #236]	; (8010b24 <HAL_TIM_PWM_Start_DMA+0x444>)
 8010a36:	4293      	cmp	r3, r2
 8010a38:	d004      	beq.n	8010a44 <HAL_TIM_PWM_Start_DMA+0x364>
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	4a3a      	ldr	r2, [pc, #232]	; (8010b28 <HAL_TIM_PWM_Start_DMA+0x448>)
 8010a40:	4293      	cmp	r3, r2
 8010a42:	d101      	bne.n	8010a48 <HAL_TIM_PWM_Start_DMA+0x368>
 8010a44:	2301      	movs	r3, #1
 8010a46:	e000      	b.n	8010a4a <HAL_TIM_PWM_Start_DMA+0x36a>
 8010a48:	2300      	movs	r3, #0
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d007      	beq.n	8010a5e <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010a5c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	4a2d      	ldr	r2, [pc, #180]	; (8010b18 <HAL_TIM_PWM_Start_DMA+0x438>)
 8010a64:	4293      	cmp	r3, r2
 8010a66:	d02c      	beq.n	8010ac2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010a70:	d027      	beq.n	8010ac2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	4a2d      	ldr	r2, [pc, #180]	; (8010b2c <HAL_TIM_PWM_Start_DMA+0x44c>)
 8010a78:	4293      	cmp	r3, r2
 8010a7a:	d022      	beq.n	8010ac2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	4a2b      	ldr	r2, [pc, #172]	; (8010b30 <HAL_TIM_PWM_Start_DMA+0x450>)
 8010a82:	4293      	cmp	r3, r2
 8010a84:	d01d      	beq.n	8010ac2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	4a2a      	ldr	r2, [pc, #168]	; (8010b34 <HAL_TIM_PWM_Start_DMA+0x454>)
 8010a8c:	4293      	cmp	r3, r2
 8010a8e:	d018      	beq.n	8010ac2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	4a21      	ldr	r2, [pc, #132]	; (8010b1c <HAL_TIM_PWM_Start_DMA+0x43c>)
 8010a96:	4293      	cmp	r3, r2
 8010a98:	d013      	beq.n	8010ac2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	4a26      	ldr	r2, [pc, #152]	; (8010b38 <HAL_TIM_PWM_Start_DMA+0x458>)
 8010aa0:	4293      	cmp	r3, r2
 8010aa2:	d00e      	beq.n	8010ac2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	4a1d      	ldr	r2, [pc, #116]	; (8010b20 <HAL_TIM_PWM_Start_DMA+0x440>)
 8010aaa:	4293      	cmp	r3, r2
 8010aac:	d009      	beq.n	8010ac2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	4a22      	ldr	r2, [pc, #136]	; (8010b3c <HAL_TIM_PWM_Start_DMA+0x45c>)
 8010ab4:	4293      	cmp	r3, r2
 8010ab6:	d004      	beq.n	8010ac2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	4a20      	ldr	r2, [pc, #128]	; (8010b40 <HAL_TIM_PWM_Start_DMA+0x460>)
 8010abe:	4293      	cmp	r3, r2
 8010ac0:	d115      	bne.n	8010aee <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	689a      	ldr	r2, [r3, #8]
 8010ac8:	4b1e      	ldr	r3, [pc, #120]	; (8010b44 <HAL_TIM_PWM_Start_DMA+0x464>)
 8010aca:	4013      	ands	r3, r2
 8010acc:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010ace:	693b      	ldr	r3, [r7, #16]
 8010ad0:	2b06      	cmp	r3, #6
 8010ad2:	d015      	beq.n	8010b00 <HAL_TIM_PWM_Start_DMA+0x420>
 8010ad4:	693b      	ldr	r3, [r7, #16]
 8010ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010ada:	d011      	beq.n	8010b00 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	681a      	ldr	r2, [r3, #0]
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	f042 0201 	orr.w	r2, r2, #1
 8010aea:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010aec:	e008      	b.n	8010b00 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	681a      	ldr	r2, [r3, #0]
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	f042 0201 	orr.w	r2, r2, #1
 8010afc:	601a      	str	r2, [r3, #0]
 8010afe:	e000      	b.n	8010b02 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010b00:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8010b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b04:	4618      	mov	r0, r3
 8010b06:	3718      	adds	r7, #24
 8010b08:	46bd      	mov	sp, r7
 8010b0a:	bd80      	pop	{r7, pc}
 8010b0c:	080110cf 	.word	0x080110cf
 8010b10:	08011177 	.word	0x08011177
 8010b14:	0801103d 	.word	0x0801103d
 8010b18:	40010000 	.word	0x40010000
 8010b1c:	40010400 	.word	0x40010400
 8010b20:	40014000 	.word	0x40014000
 8010b24:	40014400 	.word	0x40014400
 8010b28:	40014800 	.word	0x40014800
 8010b2c:	40000400 	.word	0x40000400
 8010b30:	40000800 	.word	0x40000800
 8010b34:	40000c00 	.word	0x40000c00
 8010b38:	40001800 	.word	0x40001800
 8010b3c:	4000e000 	.word	0x4000e000
 8010b40:	4000e400 	.word	0x4000e400
 8010b44:	00010007 	.word	0x00010007

08010b48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010b48:	b580      	push	{r7, lr}
 8010b4a:	b082      	sub	sp, #8
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	691b      	ldr	r3, [r3, #16]
 8010b56:	f003 0302 	and.w	r3, r3, #2
 8010b5a:	2b02      	cmp	r3, #2
 8010b5c:	d122      	bne.n	8010ba4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	68db      	ldr	r3, [r3, #12]
 8010b64:	f003 0302 	and.w	r3, r3, #2
 8010b68:	2b02      	cmp	r3, #2
 8010b6a:	d11b      	bne.n	8010ba4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	f06f 0202 	mvn.w	r2, #2
 8010b74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	2201      	movs	r2, #1
 8010b7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	699b      	ldr	r3, [r3, #24]
 8010b82:	f003 0303 	and.w	r3, r3, #3
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d003      	beq.n	8010b92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010b8a:	6878      	ldr	r0, [r7, #4]
 8010b8c:	f000 fa24 	bl	8010fd8 <HAL_TIM_IC_CaptureCallback>
 8010b90:	e005      	b.n	8010b9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010b92:	6878      	ldr	r0, [r7, #4]
 8010b94:	f000 fa16 	bl	8010fc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010b98:	6878      	ldr	r0, [r7, #4]
 8010b9a:	f000 fa27 	bl	8010fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	691b      	ldr	r3, [r3, #16]
 8010baa:	f003 0304 	and.w	r3, r3, #4
 8010bae:	2b04      	cmp	r3, #4
 8010bb0:	d122      	bne.n	8010bf8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	68db      	ldr	r3, [r3, #12]
 8010bb8:	f003 0304 	and.w	r3, r3, #4
 8010bbc:	2b04      	cmp	r3, #4
 8010bbe:	d11b      	bne.n	8010bf8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	f06f 0204 	mvn.w	r2, #4
 8010bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	2202      	movs	r2, #2
 8010bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	699b      	ldr	r3, [r3, #24]
 8010bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d003      	beq.n	8010be6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010bde:	6878      	ldr	r0, [r7, #4]
 8010be0:	f000 f9fa 	bl	8010fd8 <HAL_TIM_IC_CaptureCallback>
 8010be4:	e005      	b.n	8010bf2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010be6:	6878      	ldr	r0, [r7, #4]
 8010be8:	f000 f9ec 	bl	8010fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010bec:	6878      	ldr	r0, [r7, #4]
 8010bee:	f000 f9fd 	bl	8010fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	2200      	movs	r2, #0
 8010bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	691b      	ldr	r3, [r3, #16]
 8010bfe:	f003 0308 	and.w	r3, r3, #8
 8010c02:	2b08      	cmp	r3, #8
 8010c04:	d122      	bne.n	8010c4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	68db      	ldr	r3, [r3, #12]
 8010c0c:	f003 0308 	and.w	r3, r3, #8
 8010c10:	2b08      	cmp	r3, #8
 8010c12:	d11b      	bne.n	8010c4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	f06f 0208 	mvn.w	r2, #8
 8010c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	2204      	movs	r2, #4
 8010c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	69db      	ldr	r3, [r3, #28]
 8010c2a:	f003 0303 	and.w	r3, r3, #3
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d003      	beq.n	8010c3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010c32:	6878      	ldr	r0, [r7, #4]
 8010c34:	f000 f9d0 	bl	8010fd8 <HAL_TIM_IC_CaptureCallback>
 8010c38:	e005      	b.n	8010c46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010c3a:	6878      	ldr	r0, [r7, #4]
 8010c3c:	f000 f9c2 	bl	8010fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010c40:	6878      	ldr	r0, [r7, #4]
 8010c42:	f000 f9d3 	bl	8010fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	2200      	movs	r2, #0
 8010c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	691b      	ldr	r3, [r3, #16]
 8010c52:	f003 0310 	and.w	r3, r3, #16
 8010c56:	2b10      	cmp	r3, #16
 8010c58:	d122      	bne.n	8010ca0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	68db      	ldr	r3, [r3, #12]
 8010c60:	f003 0310 	and.w	r3, r3, #16
 8010c64:	2b10      	cmp	r3, #16
 8010c66:	d11b      	bne.n	8010ca0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	f06f 0210 	mvn.w	r2, #16
 8010c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	2208      	movs	r2, #8
 8010c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	69db      	ldr	r3, [r3, #28]
 8010c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d003      	beq.n	8010c8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010c86:	6878      	ldr	r0, [r7, #4]
 8010c88:	f000 f9a6 	bl	8010fd8 <HAL_TIM_IC_CaptureCallback>
 8010c8c:	e005      	b.n	8010c9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010c8e:	6878      	ldr	r0, [r7, #4]
 8010c90:	f000 f998 	bl	8010fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010c94:	6878      	ldr	r0, [r7, #4]
 8010c96:	f000 f9a9 	bl	8010fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	2200      	movs	r2, #0
 8010c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	691b      	ldr	r3, [r3, #16]
 8010ca6:	f003 0301 	and.w	r3, r3, #1
 8010caa:	2b01      	cmp	r3, #1
 8010cac:	d10e      	bne.n	8010ccc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	68db      	ldr	r3, [r3, #12]
 8010cb4:	f003 0301 	and.w	r3, r3, #1
 8010cb8:	2b01      	cmp	r3, #1
 8010cba:	d107      	bne.n	8010ccc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	f06f 0201 	mvn.w	r2, #1
 8010cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010cc6:	6878      	ldr	r0, [r7, #4]
 8010cc8:	f000 f972 	bl	8010fb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	691b      	ldr	r3, [r3, #16]
 8010cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010cd6:	2b80      	cmp	r3, #128	; 0x80
 8010cd8:	d10e      	bne.n	8010cf8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	68db      	ldr	r3, [r3, #12]
 8010ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ce4:	2b80      	cmp	r3, #128	; 0x80
 8010ce6:	d107      	bne.n	8010cf8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010cf2:	6878      	ldr	r0, [r7, #4]
 8010cf4:	f000 febc 	bl	8011a70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	691b      	ldr	r3, [r3, #16]
 8010cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010d02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010d06:	d10e      	bne.n	8010d26 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	68db      	ldr	r3, [r3, #12]
 8010d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d12:	2b80      	cmp	r3, #128	; 0x80
 8010d14:	d107      	bne.n	8010d26 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8010d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010d20:	6878      	ldr	r0, [r7, #4]
 8010d22:	f000 feaf 	bl	8011a84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	691b      	ldr	r3, [r3, #16]
 8010d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d30:	2b40      	cmp	r3, #64	; 0x40
 8010d32:	d10e      	bne.n	8010d52 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	68db      	ldr	r3, [r3, #12]
 8010d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d3e:	2b40      	cmp	r3, #64	; 0x40
 8010d40:	d107      	bne.n	8010d52 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010d4c:	6878      	ldr	r0, [r7, #4]
 8010d4e:	f000 f961 	bl	8011014 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	691b      	ldr	r3, [r3, #16]
 8010d58:	f003 0320 	and.w	r3, r3, #32
 8010d5c:	2b20      	cmp	r3, #32
 8010d5e:	d10e      	bne.n	8010d7e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	68db      	ldr	r3, [r3, #12]
 8010d66:	f003 0320 	and.w	r3, r3, #32
 8010d6a:	2b20      	cmp	r3, #32
 8010d6c:	d107      	bne.n	8010d7e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	f06f 0220 	mvn.w	r2, #32
 8010d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010d78:	6878      	ldr	r0, [r7, #4]
 8010d7a:	f000 fe6f 	bl	8011a5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010d7e:	bf00      	nop
 8010d80:	3708      	adds	r7, #8
 8010d82:	46bd      	mov	sp, r7
 8010d84:	bd80      	pop	{r7, pc}
	...

08010d88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b086      	sub	sp, #24
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	60f8      	str	r0, [r7, #12]
 8010d90:	60b9      	str	r1, [r7, #8]
 8010d92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010d94:	2300      	movs	r3, #0
 8010d96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010d9e:	2b01      	cmp	r3, #1
 8010da0:	d101      	bne.n	8010da6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8010da2:	2302      	movs	r3, #2
 8010da4:	e0ff      	b.n	8010fa6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	2201      	movs	r2, #1
 8010daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	2b14      	cmp	r3, #20
 8010db2:	f200 80f0 	bhi.w	8010f96 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8010db6:	a201      	add	r2, pc, #4	; (adr r2, 8010dbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8010db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dbc:	08010e11 	.word	0x08010e11
 8010dc0:	08010f97 	.word	0x08010f97
 8010dc4:	08010f97 	.word	0x08010f97
 8010dc8:	08010f97 	.word	0x08010f97
 8010dcc:	08010e51 	.word	0x08010e51
 8010dd0:	08010f97 	.word	0x08010f97
 8010dd4:	08010f97 	.word	0x08010f97
 8010dd8:	08010f97 	.word	0x08010f97
 8010ddc:	08010e93 	.word	0x08010e93
 8010de0:	08010f97 	.word	0x08010f97
 8010de4:	08010f97 	.word	0x08010f97
 8010de8:	08010f97 	.word	0x08010f97
 8010dec:	08010ed3 	.word	0x08010ed3
 8010df0:	08010f97 	.word	0x08010f97
 8010df4:	08010f97 	.word	0x08010f97
 8010df8:	08010f97 	.word	0x08010f97
 8010dfc:	08010f15 	.word	0x08010f15
 8010e00:	08010f97 	.word	0x08010f97
 8010e04:	08010f97 	.word	0x08010f97
 8010e08:	08010f97 	.word	0x08010f97
 8010e0c:	08010f55 	.word	0x08010f55
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	68b9      	ldr	r1, [r7, #8]
 8010e16:	4618      	mov	r0, r3
 8010e18:	f000 fa88 	bl	801132c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	699a      	ldr	r2, [r3, #24]
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	f042 0208 	orr.w	r2, r2, #8
 8010e2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	699a      	ldr	r2, [r3, #24]
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	f022 0204 	bic.w	r2, r2, #4
 8010e3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	6999      	ldr	r1, [r3, #24]
 8010e42:	68bb      	ldr	r3, [r7, #8]
 8010e44:	691a      	ldr	r2, [r3, #16]
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	430a      	orrs	r2, r1
 8010e4c:	619a      	str	r2, [r3, #24]
      break;
 8010e4e:	e0a5      	b.n	8010f9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	68b9      	ldr	r1, [r7, #8]
 8010e56:	4618      	mov	r0, r3
 8010e58:	f000 faf8 	bl	801144c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	699a      	ldr	r2, [r3, #24]
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010e6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	699a      	ldr	r2, [r3, #24]
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010e7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	6999      	ldr	r1, [r3, #24]
 8010e82:	68bb      	ldr	r3, [r7, #8]
 8010e84:	691b      	ldr	r3, [r3, #16]
 8010e86:	021a      	lsls	r2, r3, #8
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	430a      	orrs	r2, r1
 8010e8e:	619a      	str	r2, [r3, #24]
      break;
 8010e90:	e084      	b.n	8010f9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	68b9      	ldr	r1, [r7, #8]
 8010e98:	4618      	mov	r0, r3
 8010e9a:	f000 fb61 	bl	8011560 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	69da      	ldr	r2, [r3, #28]
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	f042 0208 	orr.w	r2, r2, #8
 8010eac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	69da      	ldr	r2, [r3, #28]
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	f022 0204 	bic.w	r2, r2, #4
 8010ebc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	69d9      	ldr	r1, [r3, #28]
 8010ec4:	68bb      	ldr	r3, [r7, #8]
 8010ec6:	691a      	ldr	r2, [r3, #16]
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	430a      	orrs	r2, r1
 8010ece:	61da      	str	r2, [r3, #28]
      break;
 8010ed0:	e064      	b.n	8010f9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	68b9      	ldr	r1, [r7, #8]
 8010ed8:	4618      	mov	r0, r3
 8010eda:	f000 fbc9 	bl	8011670 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	69da      	ldr	r2, [r3, #28]
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010eec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	69da      	ldr	r2, [r3, #28]
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010efc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	69d9      	ldr	r1, [r3, #28]
 8010f04:	68bb      	ldr	r3, [r7, #8]
 8010f06:	691b      	ldr	r3, [r3, #16]
 8010f08:	021a      	lsls	r2, r3, #8
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	430a      	orrs	r2, r1
 8010f10:	61da      	str	r2, [r3, #28]
      break;
 8010f12:	e043      	b.n	8010f9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	68b9      	ldr	r1, [r7, #8]
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	f000 fc12 	bl	8011744 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	f042 0208 	orr.w	r2, r2, #8
 8010f2e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	f022 0204 	bic.w	r2, r2, #4
 8010f3e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010f46:	68bb      	ldr	r3, [r7, #8]
 8010f48:	691a      	ldr	r2, [r3, #16]
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	430a      	orrs	r2, r1
 8010f50:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010f52:	e023      	b.n	8010f9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	68b9      	ldr	r1, [r7, #8]
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	f000 fc56 	bl	801180c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010f6e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010f7e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010f86:	68bb      	ldr	r3, [r7, #8]
 8010f88:	691b      	ldr	r3, [r3, #16]
 8010f8a:	021a      	lsls	r2, r3, #8
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	430a      	orrs	r2, r1
 8010f92:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010f94:	e002      	b.n	8010f9c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8010f96:	2301      	movs	r3, #1
 8010f98:	75fb      	strb	r3, [r7, #23]
      break;
 8010f9a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010fa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	3718      	adds	r7, #24
 8010faa:	46bd      	mov	sp, r7
 8010fac:	bd80      	pop	{r7, pc}
 8010fae:	bf00      	nop

08010fb0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010fb0:	b480      	push	{r7}
 8010fb2:	b083      	sub	sp, #12
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8010fb8:	bf00      	nop
 8010fba:	370c      	adds	r7, #12
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc2:	4770      	bx	lr

08010fc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010fc4:	b480      	push	{r7}
 8010fc6:	b083      	sub	sp, #12
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010fcc:	bf00      	nop
 8010fce:	370c      	adds	r7, #12
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd6:	4770      	bx	lr

08010fd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010fd8:	b480      	push	{r7}
 8010fda:	b083      	sub	sp, #12
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010fe0:	bf00      	nop
 8010fe2:	370c      	adds	r7, #12
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fea:	4770      	bx	lr

08010fec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010fec:	b480      	push	{r7}
 8010fee:	b083      	sub	sp, #12
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010ff4:	bf00      	nop
 8010ff6:	370c      	adds	r7, #12
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ffe:	4770      	bx	lr

08011000 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8011000:	b480      	push	{r7}
 8011002:	b083      	sub	sp, #12
 8011004:	af00      	add	r7, sp, #0
 8011006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8011008:	bf00      	nop
 801100a:	370c      	adds	r7, #12
 801100c:	46bd      	mov	sp, r7
 801100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011012:	4770      	bx	lr

08011014 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8011014:	b480      	push	{r7}
 8011016:	b083      	sub	sp, #12
 8011018:	af00      	add	r7, sp, #0
 801101a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801101c:	bf00      	nop
 801101e:	370c      	adds	r7, #12
 8011020:	46bd      	mov	sp, r7
 8011022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011026:	4770      	bx	lr

08011028 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8011028:	b480      	push	{r7}
 801102a:	b083      	sub	sp, #12
 801102c:	af00      	add	r7, sp, #0
 801102e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8011030:	bf00      	nop
 8011032:	370c      	adds	r7, #12
 8011034:	46bd      	mov	sp, r7
 8011036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801103a:	4770      	bx	lr

0801103c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 801103c:	b580      	push	{r7, lr}
 801103e:	b084      	sub	sp, #16
 8011040:	af00      	add	r7, sp, #0
 8011042:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011048:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801104e:	687a      	ldr	r2, [r7, #4]
 8011050:	429a      	cmp	r2, r3
 8011052:	d107      	bne.n	8011064 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	2201      	movs	r2, #1
 8011058:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	2201      	movs	r2, #1
 801105e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011062:	e02a      	b.n	80110ba <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011068:	687a      	ldr	r2, [r7, #4]
 801106a:	429a      	cmp	r2, r3
 801106c:	d107      	bne.n	801107e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	2202      	movs	r2, #2
 8011072:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	2201      	movs	r2, #1
 8011078:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801107c:	e01d      	b.n	80110ba <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011082:	687a      	ldr	r2, [r7, #4]
 8011084:	429a      	cmp	r2, r3
 8011086:	d107      	bne.n	8011098 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	2204      	movs	r2, #4
 801108c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	2201      	movs	r2, #1
 8011092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011096:	e010      	b.n	80110ba <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801109c:	687a      	ldr	r2, [r7, #4]
 801109e:	429a      	cmp	r2, r3
 80110a0:	d107      	bne.n	80110b2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	2208      	movs	r2, #8
 80110a6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	2201      	movs	r2, #1
 80110ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80110b0:	e003      	b.n	80110ba <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	2201      	movs	r2, #1
 80110b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80110ba:	68f8      	ldr	r0, [r7, #12]
 80110bc:	f7ff ffb4 	bl	8011028 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	2200      	movs	r2, #0
 80110c4:	771a      	strb	r2, [r3, #28]
}
 80110c6:	bf00      	nop
 80110c8:	3710      	adds	r7, #16
 80110ca:	46bd      	mov	sp, r7
 80110cc:	bd80      	pop	{r7, pc}

080110ce <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80110ce:	b580      	push	{r7, lr}
 80110d0:	b084      	sub	sp, #16
 80110d2:	af00      	add	r7, sp, #0
 80110d4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110da:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110e0:	687a      	ldr	r2, [r7, #4]
 80110e2:	429a      	cmp	r2, r3
 80110e4:	d10b      	bne.n	80110fe <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	2201      	movs	r2, #1
 80110ea:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	69db      	ldr	r3, [r3, #28]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d136      	bne.n	8011162 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	2201      	movs	r2, #1
 80110f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80110fc:	e031      	b.n	8011162 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011102:	687a      	ldr	r2, [r7, #4]
 8011104:	429a      	cmp	r2, r3
 8011106:	d10b      	bne.n	8011120 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	2202      	movs	r2, #2
 801110c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	69db      	ldr	r3, [r3, #28]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d125      	bne.n	8011162 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	2201      	movs	r2, #1
 801111a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801111e:	e020      	b.n	8011162 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011124:	687a      	ldr	r2, [r7, #4]
 8011126:	429a      	cmp	r2, r3
 8011128:	d10b      	bne.n	8011142 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	2204      	movs	r2, #4
 801112e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	69db      	ldr	r3, [r3, #28]
 8011134:	2b00      	cmp	r3, #0
 8011136:	d114      	bne.n	8011162 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	2201      	movs	r2, #1
 801113c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011140:	e00f      	b.n	8011162 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011146:	687a      	ldr	r2, [r7, #4]
 8011148:	429a      	cmp	r2, r3
 801114a:	d10a      	bne.n	8011162 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	2208      	movs	r2, #8
 8011150:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	69db      	ldr	r3, [r3, #28]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d103      	bne.n	8011162 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	2201      	movs	r2, #1
 801115e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011162:	68f8      	ldr	r0, [r7, #12]
 8011164:	f7ff ff42 	bl	8010fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	2200      	movs	r2, #0
 801116c:	771a      	strb	r2, [r3, #28]
}
 801116e:	bf00      	nop
 8011170:	3710      	adds	r7, #16
 8011172:	46bd      	mov	sp, r7
 8011174:	bd80      	pop	{r7, pc}

08011176 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011176:	b580      	push	{r7, lr}
 8011178:	b084      	sub	sp, #16
 801117a:	af00      	add	r7, sp, #0
 801117c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011182:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011188:	687a      	ldr	r2, [r7, #4]
 801118a:	429a      	cmp	r2, r3
 801118c:	d103      	bne.n	8011196 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	2201      	movs	r2, #1
 8011192:	771a      	strb	r2, [r3, #28]
 8011194:	e019      	b.n	80111ca <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801119a:	687a      	ldr	r2, [r7, #4]
 801119c:	429a      	cmp	r2, r3
 801119e:	d103      	bne.n	80111a8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	2202      	movs	r2, #2
 80111a4:	771a      	strb	r2, [r3, #28]
 80111a6:	e010      	b.n	80111ca <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111ac:	687a      	ldr	r2, [r7, #4]
 80111ae:	429a      	cmp	r2, r3
 80111b0:	d103      	bne.n	80111ba <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	2204      	movs	r2, #4
 80111b6:	771a      	strb	r2, [r3, #28]
 80111b8:	e007      	b.n	80111ca <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111be:	687a      	ldr	r2, [r7, #4]
 80111c0:	429a      	cmp	r2, r3
 80111c2:	d102      	bne.n	80111ca <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	2208      	movs	r2, #8
 80111c8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80111ca:	68f8      	ldr	r0, [r7, #12]
 80111cc:	f7ff ff18 	bl	8011000 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	2200      	movs	r2, #0
 80111d4:	771a      	strb	r2, [r3, #28]
}
 80111d6:	bf00      	nop
 80111d8:	3710      	adds	r7, #16
 80111da:	46bd      	mov	sp, r7
 80111dc:	bd80      	pop	{r7, pc}
	...

080111e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80111e0:	b480      	push	{r7}
 80111e2:	b085      	sub	sp, #20
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
 80111e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	4a44      	ldr	r2, [pc, #272]	; (8011304 <TIM_Base_SetConfig+0x124>)
 80111f4:	4293      	cmp	r3, r2
 80111f6:	d013      	beq.n	8011220 <TIM_Base_SetConfig+0x40>
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80111fe:	d00f      	beq.n	8011220 <TIM_Base_SetConfig+0x40>
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	4a41      	ldr	r2, [pc, #260]	; (8011308 <TIM_Base_SetConfig+0x128>)
 8011204:	4293      	cmp	r3, r2
 8011206:	d00b      	beq.n	8011220 <TIM_Base_SetConfig+0x40>
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	4a40      	ldr	r2, [pc, #256]	; (801130c <TIM_Base_SetConfig+0x12c>)
 801120c:	4293      	cmp	r3, r2
 801120e:	d007      	beq.n	8011220 <TIM_Base_SetConfig+0x40>
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	4a3f      	ldr	r2, [pc, #252]	; (8011310 <TIM_Base_SetConfig+0x130>)
 8011214:	4293      	cmp	r3, r2
 8011216:	d003      	beq.n	8011220 <TIM_Base_SetConfig+0x40>
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	4a3e      	ldr	r2, [pc, #248]	; (8011314 <TIM_Base_SetConfig+0x134>)
 801121c:	4293      	cmp	r3, r2
 801121e:	d108      	bne.n	8011232 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011226:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011228:	683b      	ldr	r3, [r7, #0]
 801122a:	685b      	ldr	r3, [r3, #4]
 801122c:	68fa      	ldr	r2, [r7, #12]
 801122e:	4313      	orrs	r3, r2
 8011230:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	4a33      	ldr	r2, [pc, #204]	; (8011304 <TIM_Base_SetConfig+0x124>)
 8011236:	4293      	cmp	r3, r2
 8011238:	d027      	beq.n	801128a <TIM_Base_SetConfig+0xaa>
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011240:	d023      	beq.n	801128a <TIM_Base_SetConfig+0xaa>
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	4a30      	ldr	r2, [pc, #192]	; (8011308 <TIM_Base_SetConfig+0x128>)
 8011246:	4293      	cmp	r3, r2
 8011248:	d01f      	beq.n	801128a <TIM_Base_SetConfig+0xaa>
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	4a2f      	ldr	r2, [pc, #188]	; (801130c <TIM_Base_SetConfig+0x12c>)
 801124e:	4293      	cmp	r3, r2
 8011250:	d01b      	beq.n	801128a <TIM_Base_SetConfig+0xaa>
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	4a2e      	ldr	r2, [pc, #184]	; (8011310 <TIM_Base_SetConfig+0x130>)
 8011256:	4293      	cmp	r3, r2
 8011258:	d017      	beq.n	801128a <TIM_Base_SetConfig+0xaa>
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	4a2d      	ldr	r2, [pc, #180]	; (8011314 <TIM_Base_SetConfig+0x134>)
 801125e:	4293      	cmp	r3, r2
 8011260:	d013      	beq.n	801128a <TIM_Base_SetConfig+0xaa>
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	4a2c      	ldr	r2, [pc, #176]	; (8011318 <TIM_Base_SetConfig+0x138>)
 8011266:	4293      	cmp	r3, r2
 8011268:	d00f      	beq.n	801128a <TIM_Base_SetConfig+0xaa>
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	4a2b      	ldr	r2, [pc, #172]	; (801131c <TIM_Base_SetConfig+0x13c>)
 801126e:	4293      	cmp	r3, r2
 8011270:	d00b      	beq.n	801128a <TIM_Base_SetConfig+0xaa>
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	4a2a      	ldr	r2, [pc, #168]	; (8011320 <TIM_Base_SetConfig+0x140>)
 8011276:	4293      	cmp	r3, r2
 8011278:	d007      	beq.n	801128a <TIM_Base_SetConfig+0xaa>
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	4a29      	ldr	r2, [pc, #164]	; (8011324 <TIM_Base_SetConfig+0x144>)
 801127e:	4293      	cmp	r3, r2
 8011280:	d003      	beq.n	801128a <TIM_Base_SetConfig+0xaa>
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	4a28      	ldr	r2, [pc, #160]	; (8011328 <TIM_Base_SetConfig+0x148>)
 8011286:	4293      	cmp	r3, r2
 8011288:	d108      	bne.n	801129c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011290:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011292:	683b      	ldr	r3, [r7, #0]
 8011294:	68db      	ldr	r3, [r3, #12]
 8011296:	68fa      	ldr	r2, [r7, #12]
 8011298:	4313      	orrs	r3, r2
 801129a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80112a2:	683b      	ldr	r3, [r7, #0]
 80112a4:	695b      	ldr	r3, [r3, #20]
 80112a6:	4313      	orrs	r3, r2
 80112a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	68fa      	ldr	r2, [r7, #12]
 80112ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80112b0:	683b      	ldr	r3, [r7, #0]
 80112b2:	689a      	ldr	r2, [r3, #8]
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80112b8:	683b      	ldr	r3, [r7, #0]
 80112ba:	681a      	ldr	r2, [r3, #0]
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	4a10      	ldr	r2, [pc, #64]	; (8011304 <TIM_Base_SetConfig+0x124>)
 80112c4:	4293      	cmp	r3, r2
 80112c6:	d00f      	beq.n	80112e8 <TIM_Base_SetConfig+0x108>
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	4a12      	ldr	r2, [pc, #72]	; (8011314 <TIM_Base_SetConfig+0x134>)
 80112cc:	4293      	cmp	r3, r2
 80112ce:	d00b      	beq.n	80112e8 <TIM_Base_SetConfig+0x108>
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	4a11      	ldr	r2, [pc, #68]	; (8011318 <TIM_Base_SetConfig+0x138>)
 80112d4:	4293      	cmp	r3, r2
 80112d6:	d007      	beq.n	80112e8 <TIM_Base_SetConfig+0x108>
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	4a10      	ldr	r2, [pc, #64]	; (801131c <TIM_Base_SetConfig+0x13c>)
 80112dc:	4293      	cmp	r3, r2
 80112de:	d003      	beq.n	80112e8 <TIM_Base_SetConfig+0x108>
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	4a0f      	ldr	r2, [pc, #60]	; (8011320 <TIM_Base_SetConfig+0x140>)
 80112e4:	4293      	cmp	r3, r2
 80112e6:	d103      	bne.n	80112f0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80112e8:	683b      	ldr	r3, [r7, #0]
 80112ea:	691a      	ldr	r2, [r3, #16]
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	2201      	movs	r2, #1
 80112f4:	615a      	str	r2, [r3, #20]
}
 80112f6:	bf00      	nop
 80112f8:	3714      	adds	r7, #20
 80112fa:	46bd      	mov	sp, r7
 80112fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011300:	4770      	bx	lr
 8011302:	bf00      	nop
 8011304:	40010000 	.word	0x40010000
 8011308:	40000400 	.word	0x40000400
 801130c:	40000800 	.word	0x40000800
 8011310:	40000c00 	.word	0x40000c00
 8011314:	40010400 	.word	0x40010400
 8011318:	40014000 	.word	0x40014000
 801131c:	40014400 	.word	0x40014400
 8011320:	40014800 	.word	0x40014800
 8011324:	4000e000 	.word	0x4000e000
 8011328:	4000e400 	.word	0x4000e400

0801132c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801132c:	b480      	push	{r7}
 801132e:	b087      	sub	sp, #28
 8011330:	af00      	add	r7, sp, #0
 8011332:	6078      	str	r0, [r7, #4]
 8011334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	6a1b      	ldr	r3, [r3, #32]
 801133a:	f023 0201 	bic.w	r2, r3, #1
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	6a1b      	ldr	r3, [r3, #32]
 8011346:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	685b      	ldr	r3, [r3, #4]
 801134c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	699b      	ldr	r3, [r3, #24]
 8011352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8011354:	68fa      	ldr	r2, [r7, #12]
 8011356:	4b37      	ldr	r3, [pc, #220]	; (8011434 <TIM_OC1_SetConfig+0x108>)
 8011358:	4013      	ands	r3, r2
 801135a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	f023 0303 	bic.w	r3, r3, #3
 8011362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011364:	683b      	ldr	r3, [r7, #0]
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	68fa      	ldr	r2, [r7, #12]
 801136a:	4313      	orrs	r3, r2
 801136c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801136e:	697b      	ldr	r3, [r7, #20]
 8011370:	f023 0302 	bic.w	r3, r3, #2
 8011374:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8011376:	683b      	ldr	r3, [r7, #0]
 8011378:	689b      	ldr	r3, [r3, #8]
 801137a:	697a      	ldr	r2, [r7, #20]
 801137c:	4313      	orrs	r3, r2
 801137e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	4a2d      	ldr	r2, [pc, #180]	; (8011438 <TIM_OC1_SetConfig+0x10c>)
 8011384:	4293      	cmp	r3, r2
 8011386:	d00f      	beq.n	80113a8 <TIM_OC1_SetConfig+0x7c>
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	4a2c      	ldr	r2, [pc, #176]	; (801143c <TIM_OC1_SetConfig+0x110>)
 801138c:	4293      	cmp	r3, r2
 801138e:	d00b      	beq.n	80113a8 <TIM_OC1_SetConfig+0x7c>
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	4a2b      	ldr	r2, [pc, #172]	; (8011440 <TIM_OC1_SetConfig+0x114>)
 8011394:	4293      	cmp	r3, r2
 8011396:	d007      	beq.n	80113a8 <TIM_OC1_SetConfig+0x7c>
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	4a2a      	ldr	r2, [pc, #168]	; (8011444 <TIM_OC1_SetConfig+0x118>)
 801139c:	4293      	cmp	r3, r2
 801139e:	d003      	beq.n	80113a8 <TIM_OC1_SetConfig+0x7c>
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	4a29      	ldr	r2, [pc, #164]	; (8011448 <TIM_OC1_SetConfig+0x11c>)
 80113a4:	4293      	cmp	r3, r2
 80113a6:	d10c      	bne.n	80113c2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80113a8:	697b      	ldr	r3, [r7, #20]
 80113aa:	f023 0308 	bic.w	r3, r3, #8
 80113ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80113b0:	683b      	ldr	r3, [r7, #0]
 80113b2:	68db      	ldr	r3, [r3, #12]
 80113b4:	697a      	ldr	r2, [r7, #20]
 80113b6:	4313      	orrs	r3, r2
 80113b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80113ba:	697b      	ldr	r3, [r7, #20]
 80113bc:	f023 0304 	bic.w	r3, r3, #4
 80113c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	4a1c      	ldr	r2, [pc, #112]	; (8011438 <TIM_OC1_SetConfig+0x10c>)
 80113c6:	4293      	cmp	r3, r2
 80113c8:	d00f      	beq.n	80113ea <TIM_OC1_SetConfig+0xbe>
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	4a1b      	ldr	r2, [pc, #108]	; (801143c <TIM_OC1_SetConfig+0x110>)
 80113ce:	4293      	cmp	r3, r2
 80113d0:	d00b      	beq.n	80113ea <TIM_OC1_SetConfig+0xbe>
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	4a1a      	ldr	r2, [pc, #104]	; (8011440 <TIM_OC1_SetConfig+0x114>)
 80113d6:	4293      	cmp	r3, r2
 80113d8:	d007      	beq.n	80113ea <TIM_OC1_SetConfig+0xbe>
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	4a19      	ldr	r2, [pc, #100]	; (8011444 <TIM_OC1_SetConfig+0x118>)
 80113de:	4293      	cmp	r3, r2
 80113e0:	d003      	beq.n	80113ea <TIM_OC1_SetConfig+0xbe>
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	4a18      	ldr	r2, [pc, #96]	; (8011448 <TIM_OC1_SetConfig+0x11c>)
 80113e6:	4293      	cmp	r3, r2
 80113e8:	d111      	bne.n	801140e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80113ea:	693b      	ldr	r3, [r7, #16]
 80113ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80113f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80113f2:	693b      	ldr	r3, [r7, #16]
 80113f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80113f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80113fa:	683b      	ldr	r3, [r7, #0]
 80113fc:	695b      	ldr	r3, [r3, #20]
 80113fe:	693a      	ldr	r2, [r7, #16]
 8011400:	4313      	orrs	r3, r2
 8011402:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8011404:	683b      	ldr	r3, [r7, #0]
 8011406:	699b      	ldr	r3, [r3, #24]
 8011408:	693a      	ldr	r2, [r7, #16]
 801140a:	4313      	orrs	r3, r2
 801140c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	693a      	ldr	r2, [r7, #16]
 8011412:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	68fa      	ldr	r2, [r7, #12]
 8011418:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801141a:	683b      	ldr	r3, [r7, #0]
 801141c:	685a      	ldr	r2, [r3, #4]
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	697a      	ldr	r2, [r7, #20]
 8011426:	621a      	str	r2, [r3, #32]
}
 8011428:	bf00      	nop
 801142a:	371c      	adds	r7, #28
 801142c:	46bd      	mov	sp, r7
 801142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011432:	4770      	bx	lr
 8011434:	fffeff8f 	.word	0xfffeff8f
 8011438:	40010000 	.word	0x40010000
 801143c:	40010400 	.word	0x40010400
 8011440:	40014000 	.word	0x40014000
 8011444:	40014400 	.word	0x40014400
 8011448:	40014800 	.word	0x40014800

0801144c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801144c:	b480      	push	{r7}
 801144e:	b087      	sub	sp, #28
 8011450:	af00      	add	r7, sp, #0
 8011452:	6078      	str	r0, [r7, #4]
 8011454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	6a1b      	ldr	r3, [r3, #32]
 801145a:	f023 0210 	bic.w	r2, r3, #16
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	6a1b      	ldr	r3, [r3, #32]
 8011466:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	685b      	ldr	r3, [r3, #4]
 801146c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	699b      	ldr	r3, [r3, #24]
 8011472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011474:	68fa      	ldr	r2, [r7, #12]
 8011476:	4b34      	ldr	r3, [pc, #208]	; (8011548 <TIM_OC2_SetConfig+0xfc>)
 8011478:	4013      	ands	r3, r2
 801147a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011482:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011484:	683b      	ldr	r3, [r7, #0]
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	021b      	lsls	r3, r3, #8
 801148a:	68fa      	ldr	r2, [r7, #12]
 801148c:	4313      	orrs	r3, r2
 801148e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011490:	697b      	ldr	r3, [r7, #20]
 8011492:	f023 0320 	bic.w	r3, r3, #32
 8011496:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011498:	683b      	ldr	r3, [r7, #0]
 801149a:	689b      	ldr	r3, [r3, #8]
 801149c:	011b      	lsls	r3, r3, #4
 801149e:	697a      	ldr	r2, [r7, #20]
 80114a0:	4313      	orrs	r3, r2
 80114a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	4a29      	ldr	r2, [pc, #164]	; (801154c <TIM_OC2_SetConfig+0x100>)
 80114a8:	4293      	cmp	r3, r2
 80114aa:	d003      	beq.n	80114b4 <TIM_OC2_SetConfig+0x68>
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	4a28      	ldr	r2, [pc, #160]	; (8011550 <TIM_OC2_SetConfig+0x104>)
 80114b0:	4293      	cmp	r3, r2
 80114b2:	d10d      	bne.n	80114d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80114b4:	697b      	ldr	r3, [r7, #20]
 80114b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80114ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80114bc:	683b      	ldr	r3, [r7, #0]
 80114be:	68db      	ldr	r3, [r3, #12]
 80114c0:	011b      	lsls	r3, r3, #4
 80114c2:	697a      	ldr	r2, [r7, #20]
 80114c4:	4313      	orrs	r3, r2
 80114c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80114c8:	697b      	ldr	r3, [r7, #20]
 80114ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80114ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	4a1e      	ldr	r2, [pc, #120]	; (801154c <TIM_OC2_SetConfig+0x100>)
 80114d4:	4293      	cmp	r3, r2
 80114d6:	d00f      	beq.n	80114f8 <TIM_OC2_SetConfig+0xac>
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	4a1d      	ldr	r2, [pc, #116]	; (8011550 <TIM_OC2_SetConfig+0x104>)
 80114dc:	4293      	cmp	r3, r2
 80114de:	d00b      	beq.n	80114f8 <TIM_OC2_SetConfig+0xac>
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	4a1c      	ldr	r2, [pc, #112]	; (8011554 <TIM_OC2_SetConfig+0x108>)
 80114e4:	4293      	cmp	r3, r2
 80114e6:	d007      	beq.n	80114f8 <TIM_OC2_SetConfig+0xac>
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	4a1b      	ldr	r2, [pc, #108]	; (8011558 <TIM_OC2_SetConfig+0x10c>)
 80114ec:	4293      	cmp	r3, r2
 80114ee:	d003      	beq.n	80114f8 <TIM_OC2_SetConfig+0xac>
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	4a1a      	ldr	r2, [pc, #104]	; (801155c <TIM_OC2_SetConfig+0x110>)
 80114f4:	4293      	cmp	r3, r2
 80114f6:	d113      	bne.n	8011520 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80114f8:	693b      	ldr	r3, [r7, #16]
 80114fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80114fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011500:	693b      	ldr	r3, [r7, #16]
 8011502:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011506:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011508:	683b      	ldr	r3, [r7, #0]
 801150a:	695b      	ldr	r3, [r3, #20]
 801150c:	009b      	lsls	r3, r3, #2
 801150e:	693a      	ldr	r2, [r7, #16]
 8011510:	4313      	orrs	r3, r2
 8011512:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011514:	683b      	ldr	r3, [r7, #0]
 8011516:	699b      	ldr	r3, [r3, #24]
 8011518:	009b      	lsls	r3, r3, #2
 801151a:	693a      	ldr	r2, [r7, #16]
 801151c:	4313      	orrs	r3, r2
 801151e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	693a      	ldr	r2, [r7, #16]
 8011524:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	68fa      	ldr	r2, [r7, #12]
 801152a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801152c:	683b      	ldr	r3, [r7, #0]
 801152e:	685a      	ldr	r2, [r3, #4]
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	697a      	ldr	r2, [r7, #20]
 8011538:	621a      	str	r2, [r3, #32]
}
 801153a:	bf00      	nop
 801153c:	371c      	adds	r7, #28
 801153e:	46bd      	mov	sp, r7
 8011540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011544:	4770      	bx	lr
 8011546:	bf00      	nop
 8011548:	feff8fff 	.word	0xfeff8fff
 801154c:	40010000 	.word	0x40010000
 8011550:	40010400 	.word	0x40010400
 8011554:	40014000 	.word	0x40014000
 8011558:	40014400 	.word	0x40014400
 801155c:	40014800 	.word	0x40014800

08011560 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011560:	b480      	push	{r7}
 8011562:	b087      	sub	sp, #28
 8011564:	af00      	add	r7, sp, #0
 8011566:	6078      	str	r0, [r7, #4]
 8011568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	6a1b      	ldr	r3, [r3, #32]
 801156e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	6a1b      	ldr	r3, [r3, #32]
 801157a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	685b      	ldr	r3, [r3, #4]
 8011580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	69db      	ldr	r3, [r3, #28]
 8011586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011588:	68fa      	ldr	r2, [r7, #12]
 801158a:	4b33      	ldr	r3, [pc, #204]	; (8011658 <TIM_OC3_SetConfig+0xf8>)
 801158c:	4013      	ands	r3, r2
 801158e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	f023 0303 	bic.w	r3, r3, #3
 8011596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011598:	683b      	ldr	r3, [r7, #0]
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	68fa      	ldr	r2, [r7, #12]
 801159e:	4313      	orrs	r3, r2
 80115a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80115a2:	697b      	ldr	r3, [r7, #20]
 80115a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80115a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80115aa:	683b      	ldr	r3, [r7, #0]
 80115ac:	689b      	ldr	r3, [r3, #8]
 80115ae:	021b      	lsls	r3, r3, #8
 80115b0:	697a      	ldr	r2, [r7, #20]
 80115b2:	4313      	orrs	r3, r2
 80115b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	4a28      	ldr	r2, [pc, #160]	; (801165c <TIM_OC3_SetConfig+0xfc>)
 80115ba:	4293      	cmp	r3, r2
 80115bc:	d003      	beq.n	80115c6 <TIM_OC3_SetConfig+0x66>
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	4a27      	ldr	r2, [pc, #156]	; (8011660 <TIM_OC3_SetConfig+0x100>)
 80115c2:	4293      	cmp	r3, r2
 80115c4:	d10d      	bne.n	80115e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80115c6:	697b      	ldr	r3, [r7, #20]
 80115c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80115cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80115ce:	683b      	ldr	r3, [r7, #0]
 80115d0:	68db      	ldr	r3, [r3, #12]
 80115d2:	021b      	lsls	r3, r3, #8
 80115d4:	697a      	ldr	r2, [r7, #20]
 80115d6:	4313      	orrs	r3, r2
 80115d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80115da:	697b      	ldr	r3, [r7, #20]
 80115dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80115e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	4a1d      	ldr	r2, [pc, #116]	; (801165c <TIM_OC3_SetConfig+0xfc>)
 80115e6:	4293      	cmp	r3, r2
 80115e8:	d00f      	beq.n	801160a <TIM_OC3_SetConfig+0xaa>
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	4a1c      	ldr	r2, [pc, #112]	; (8011660 <TIM_OC3_SetConfig+0x100>)
 80115ee:	4293      	cmp	r3, r2
 80115f0:	d00b      	beq.n	801160a <TIM_OC3_SetConfig+0xaa>
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	4a1b      	ldr	r2, [pc, #108]	; (8011664 <TIM_OC3_SetConfig+0x104>)
 80115f6:	4293      	cmp	r3, r2
 80115f8:	d007      	beq.n	801160a <TIM_OC3_SetConfig+0xaa>
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	4a1a      	ldr	r2, [pc, #104]	; (8011668 <TIM_OC3_SetConfig+0x108>)
 80115fe:	4293      	cmp	r3, r2
 8011600:	d003      	beq.n	801160a <TIM_OC3_SetConfig+0xaa>
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	4a19      	ldr	r2, [pc, #100]	; (801166c <TIM_OC3_SetConfig+0x10c>)
 8011606:	4293      	cmp	r3, r2
 8011608:	d113      	bne.n	8011632 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801160a:	693b      	ldr	r3, [r7, #16]
 801160c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011610:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8011612:	693b      	ldr	r3, [r7, #16]
 8011614:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011618:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801161a:	683b      	ldr	r3, [r7, #0]
 801161c:	695b      	ldr	r3, [r3, #20]
 801161e:	011b      	lsls	r3, r3, #4
 8011620:	693a      	ldr	r2, [r7, #16]
 8011622:	4313      	orrs	r3, r2
 8011624:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011626:	683b      	ldr	r3, [r7, #0]
 8011628:	699b      	ldr	r3, [r3, #24]
 801162a:	011b      	lsls	r3, r3, #4
 801162c:	693a      	ldr	r2, [r7, #16]
 801162e:	4313      	orrs	r3, r2
 8011630:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	693a      	ldr	r2, [r7, #16]
 8011636:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	68fa      	ldr	r2, [r7, #12]
 801163c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801163e:	683b      	ldr	r3, [r7, #0]
 8011640:	685a      	ldr	r2, [r3, #4]
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	697a      	ldr	r2, [r7, #20]
 801164a:	621a      	str	r2, [r3, #32]
}
 801164c:	bf00      	nop
 801164e:	371c      	adds	r7, #28
 8011650:	46bd      	mov	sp, r7
 8011652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011656:	4770      	bx	lr
 8011658:	fffeff8f 	.word	0xfffeff8f
 801165c:	40010000 	.word	0x40010000
 8011660:	40010400 	.word	0x40010400
 8011664:	40014000 	.word	0x40014000
 8011668:	40014400 	.word	0x40014400
 801166c:	40014800 	.word	0x40014800

08011670 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011670:	b480      	push	{r7}
 8011672:	b087      	sub	sp, #28
 8011674:	af00      	add	r7, sp, #0
 8011676:	6078      	str	r0, [r7, #4]
 8011678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	6a1b      	ldr	r3, [r3, #32]
 801167e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	6a1b      	ldr	r3, [r3, #32]
 801168a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	685b      	ldr	r3, [r3, #4]
 8011690:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	69db      	ldr	r3, [r3, #28]
 8011696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011698:	68fa      	ldr	r2, [r7, #12]
 801169a:	4b24      	ldr	r3, [pc, #144]	; (801172c <TIM_OC4_SetConfig+0xbc>)
 801169c:	4013      	ands	r3, r2
 801169e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80116a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80116a8:	683b      	ldr	r3, [r7, #0]
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	021b      	lsls	r3, r3, #8
 80116ae:	68fa      	ldr	r2, [r7, #12]
 80116b0:	4313      	orrs	r3, r2
 80116b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80116b4:	693b      	ldr	r3, [r7, #16]
 80116b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80116ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80116bc:	683b      	ldr	r3, [r7, #0]
 80116be:	689b      	ldr	r3, [r3, #8]
 80116c0:	031b      	lsls	r3, r3, #12
 80116c2:	693a      	ldr	r2, [r7, #16]
 80116c4:	4313      	orrs	r3, r2
 80116c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	4a19      	ldr	r2, [pc, #100]	; (8011730 <TIM_OC4_SetConfig+0xc0>)
 80116cc:	4293      	cmp	r3, r2
 80116ce:	d00f      	beq.n	80116f0 <TIM_OC4_SetConfig+0x80>
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	4a18      	ldr	r2, [pc, #96]	; (8011734 <TIM_OC4_SetConfig+0xc4>)
 80116d4:	4293      	cmp	r3, r2
 80116d6:	d00b      	beq.n	80116f0 <TIM_OC4_SetConfig+0x80>
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	4a17      	ldr	r2, [pc, #92]	; (8011738 <TIM_OC4_SetConfig+0xc8>)
 80116dc:	4293      	cmp	r3, r2
 80116de:	d007      	beq.n	80116f0 <TIM_OC4_SetConfig+0x80>
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	4a16      	ldr	r2, [pc, #88]	; (801173c <TIM_OC4_SetConfig+0xcc>)
 80116e4:	4293      	cmp	r3, r2
 80116e6:	d003      	beq.n	80116f0 <TIM_OC4_SetConfig+0x80>
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	4a15      	ldr	r2, [pc, #84]	; (8011740 <TIM_OC4_SetConfig+0xd0>)
 80116ec:	4293      	cmp	r3, r2
 80116ee:	d109      	bne.n	8011704 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80116f0:	697b      	ldr	r3, [r7, #20]
 80116f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80116f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80116f8:	683b      	ldr	r3, [r7, #0]
 80116fa:	695b      	ldr	r3, [r3, #20]
 80116fc:	019b      	lsls	r3, r3, #6
 80116fe:	697a      	ldr	r2, [r7, #20]
 8011700:	4313      	orrs	r3, r2
 8011702:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	697a      	ldr	r2, [r7, #20]
 8011708:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	68fa      	ldr	r2, [r7, #12]
 801170e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011710:	683b      	ldr	r3, [r7, #0]
 8011712:	685a      	ldr	r2, [r3, #4]
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	693a      	ldr	r2, [r7, #16]
 801171c:	621a      	str	r2, [r3, #32]
}
 801171e:	bf00      	nop
 8011720:	371c      	adds	r7, #28
 8011722:	46bd      	mov	sp, r7
 8011724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011728:	4770      	bx	lr
 801172a:	bf00      	nop
 801172c:	feff8fff 	.word	0xfeff8fff
 8011730:	40010000 	.word	0x40010000
 8011734:	40010400 	.word	0x40010400
 8011738:	40014000 	.word	0x40014000
 801173c:	40014400 	.word	0x40014400
 8011740:	40014800 	.word	0x40014800

08011744 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011744:	b480      	push	{r7}
 8011746:	b087      	sub	sp, #28
 8011748:	af00      	add	r7, sp, #0
 801174a:	6078      	str	r0, [r7, #4]
 801174c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	6a1b      	ldr	r3, [r3, #32]
 8011752:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	6a1b      	ldr	r3, [r3, #32]
 801175e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	685b      	ldr	r3, [r3, #4]
 8011764:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801176a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801176c:	68fa      	ldr	r2, [r7, #12]
 801176e:	4b21      	ldr	r3, [pc, #132]	; (80117f4 <TIM_OC5_SetConfig+0xb0>)
 8011770:	4013      	ands	r3, r2
 8011772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011774:	683b      	ldr	r3, [r7, #0]
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	68fa      	ldr	r2, [r7, #12]
 801177a:	4313      	orrs	r3, r2
 801177c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801177e:	693b      	ldr	r3, [r7, #16]
 8011780:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8011784:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8011786:	683b      	ldr	r3, [r7, #0]
 8011788:	689b      	ldr	r3, [r3, #8]
 801178a:	041b      	lsls	r3, r3, #16
 801178c:	693a      	ldr	r2, [r7, #16]
 801178e:	4313      	orrs	r3, r2
 8011790:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	4a18      	ldr	r2, [pc, #96]	; (80117f8 <TIM_OC5_SetConfig+0xb4>)
 8011796:	4293      	cmp	r3, r2
 8011798:	d00f      	beq.n	80117ba <TIM_OC5_SetConfig+0x76>
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	4a17      	ldr	r2, [pc, #92]	; (80117fc <TIM_OC5_SetConfig+0xb8>)
 801179e:	4293      	cmp	r3, r2
 80117a0:	d00b      	beq.n	80117ba <TIM_OC5_SetConfig+0x76>
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	4a16      	ldr	r2, [pc, #88]	; (8011800 <TIM_OC5_SetConfig+0xbc>)
 80117a6:	4293      	cmp	r3, r2
 80117a8:	d007      	beq.n	80117ba <TIM_OC5_SetConfig+0x76>
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	4a15      	ldr	r2, [pc, #84]	; (8011804 <TIM_OC5_SetConfig+0xc0>)
 80117ae:	4293      	cmp	r3, r2
 80117b0:	d003      	beq.n	80117ba <TIM_OC5_SetConfig+0x76>
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	4a14      	ldr	r2, [pc, #80]	; (8011808 <TIM_OC5_SetConfig+0xc4>)
 80117b6:	4293      	cmp	r3, r2
 80117b8:	d109      	bne.n	80117ce <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80117ba:	697b      	ldr	r3, [r7, #20]
 80117bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80117c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80117c2:	683b      	ldr	r3, [r7, #0]
 80117c4:	695b      	ldr	r3, [r3, #20]
 80117c6:	021b      	lsls	r3, r3, #8
 80117c8:	697a      	ldr	r2, [r7, #20]
 80117ca:	4313      	orrs	r3, r2
 80117cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	697a      	ldr	r2, [r7, #20]
 80117d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	68fa      	ldr	r2, [r7, #12]
 80117d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80117da:	683b      	ldr	r3, [r7, #0]
 80117dc:	685a      	ldr	r2, [r3, #4]
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	693a      	ldr	r2, [r7, #16]
 80117e6:	621a      	str	r2, [r3, #32]
}
 80117e8:	bf00      	nop
 80117ea:	371c      	adds	r7, #28
 80117ec:	46bd      	mov	sp, r7
 80117ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f2:	4770      	bx	lr
 80117f4:	fffeff8f 	.word	0xfffeff8f
 80117f8:	40010000 	.word	0x40010000
 80117fc:	40010400 	.word	0x40010400
 8011800:	40014000 	.word	0x40014000
 8011804:	40014400 	.word	0x40014400
 8011808:	40014800 	.word	0x40014800

0801180c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801180c:	b480      	push	{r7}
 801180e:	b087      	sub	sp, #28
 8011810:	af00      	add	r7, sp, #0
 8011812:	6078      	str	r0, [r7, #4]
 8011814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	6a1b      	ldr	r3, [r3, #32]
 801181a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	6a1b      	ldr	r3, [r3, #32]
 8011826:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	685b      	ldr	r3, [r3, #4]
 801182c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011834:	68fa      	ldr	r2, [r7, #12]
 8011836:	4b22      	ldr	r3, [pc, #136]	; (80118c0 <TIM_OC6_SetConfig+0xb4>)
 8011838:	4013      	ands	r3, r2
 801183a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801183c:	683b      	ldr	r3, [r7, #0]
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	021b      	lsls	r3, r3, #8
 8011842:	68fa      	ldr	r2, [r7, #12]
 8011844:	4313      	orrs	r3, r2
 8011846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011848:	693b      	ldr	r3, [r7, #16]
 801184a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801184e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8011850:	683b      	ldr	r3, [r7, #0]
 8011852:	689b      	ldr	r3, [r3, #8]
 8011854:	051b      	lsls	r3, r3, #20
 8011856:	693a      	ldr	r2, [r7, #16]
 8011858:	4313      	orrs	r3, r2
 801185a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	4a19      	ldr	r2, [pc, #100]	; (80118c4 <TIM_OC6_SetConfig+0xb8>)
 8011860:	4293      	cmp	r3, r2
 8011862:	d00f      	beq.n	8011884 <TIM_OC6_SetConfig+0x78>
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	4a18      	ldr	r2, [pc, #96]	; (80118c8 <TIM_OC6_SetConfig+0xbc>)
 8011868:	4293      	cmp	r3, r2
 801186a:	d00b      	beq.n	8011884 <TIM_OC6_SetConfig+0x78>
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	4a17      	ldr	r2, [pc, #92]	; (80118cc <TIM_OC6_SetConfig+0xc0>)
 8011870:	4293      	cmp	r3, r2
 8011872:	d007      	beq.n	8011884 <TIM_OC6_SetConfig+0x78>
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	4a16      	ldr	r2, [pc, #88]	; (80118d0 <TIM_OC6_SetConfig+0xc4>)
 8011878:	4293      	cmp	r3, r2
 801187a:	d003      	beq.n	8011884 <TIM_OC6_SetConfig+0x78>
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	4a15      	ldr	r2, [pc, #84]	; (80118d4 <TIM_OC6_SetConfig+0xc8>)
 8011880:	4293      	cmp	r3, r2
 8011882:	d109      	bne.n	8011898 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8011884:	697b      	ldr	r3, [r7, #20]
 8011886:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801188a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801188c:	683b      	ldr	r3, [r7, #0]
 801188e:	695b      	ldr	r3, [r3, #20]
 8011890:	029b      	lsls	r3, r3, #10
 8011892:	697a      	ldr	r2, [r7, #20]
 8011894:	4313      	orrs	r3, r2
 8011896:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	697a      	ldr	r2, [r7, #20]
 801189c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	68fa      	ldr	r2, [r7, #12]
 80118a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80118a4:	683b      	ldr	r3, [r7, #0]
 80118a6:	685a      	ldr	r2, [r3, #4]
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	693a      	ldr	r2, [r7, #16]
 80118b0:	621a      	str	r2, [r3, #32]
}
 80118b2:	bf00      	nop
 80118b4:	371c      	adds	r7, #28
 80118b6:	46bd      	mov	sp, r7
 80118b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118bc:	4770      	bx	lr
 80118be:	bf00      	nop
 80118c0:	feff8fff 	.word	0xfeff8fff
 80118c4:	40010000 	.word	0x40010000
 80118c8:	40010400 	.word	0x40010400
 80118cc:	40014000 	.word	0x40014000
 80118d0:	40014400 	.word	0x40014400
 80118d4:	40014800 	.word	0x40014800

080118d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80118d8:	b480      	push	{r7}
 80118da:	b087      	sub	sp, #28
 80118dc:	af00      	add	r7, sp, #0
 80118de:	60f8      	str	r0, [r7, #12]
 80118e0:	60b9      	str	r1, [r7, #8]
 80118e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80118e4:	68bb      	ldr	r3, [r7, #8]
 80118e6:	f003 031f 	and.w	r3, r3, #31
 80118ea:	2201      	movs	r2, #1
 80118ec:	fa02 f303 	lsl.w	r3, r2, r3
 80118f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	6a1a      	ldr	r2, [r3, #32]
 80118f6:	697b      	ldr	r3, [r7, #20]
 80118f8:	43db      	mvns	r3, r3
 80118fa:	401a      	ands	r2, r3
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	6a1a      	ldr	r2, [r3, #32]
 8011904:	68bb      	ldr	r3, [r7, #8]
 8011906:	f003 031f 	and.w	r3, r3, #31
 801190a:	6879      	ldr	r1, [r7, #4]
 801190c:	fa01 f303 	lsl.w	r3, r1, r3
 8011910:	431a      	orrs	r2, r3
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	621a      	str	r2, [r3, #32]
}
 8011916:	bf00      	nop
 8011918:	371c      	adds	r7, #28
 801191a:	46bd      	mov	sp, r7
 801191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011920:	4770      	bx	lr
	...

08011924 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011924:	b480      	push	{r7}
 8011926:	b085      	sub	sp, #20
 8011928:	af00      	add	r7, sp, #0
 801192a:	6078      	str	r0, [r7, #4]
 801192c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011934:	2b01      	cmp	r3, #1
 8011936:	d101      	bne.n	801193c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011938:	2302      	movs	r3, #2
 801193a:	e077      	b.n	8011a2c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	2201      	movs	r2, #1
 8011940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	2202      	movs	r2, #2
 8011948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	685b      	ldr	r3, [r3, #4]
 8011952:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	689b      	ldr	r3, [r3, #8]
 801195a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	4a35      	ldr	r2, [pc, #212]	; (8011a38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8011962:	4293      	cmp	r3, r2
 8011964:	d004      	beq.n	8011970 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	4a34      	ldr	r2, [pc, #208]	; (8011a3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801196c:	4293      	cmp	r3, r2
 801196e:	d108      	bne.n	8011982 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8011976:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011978:	683b      	ldr	r3, [r7, #0]
 801197a:	685b      	ldr	r3, [r3, #4]
 801197c:	68fa      	ldr	r2, [r7, #12]
 801197e:	4313      	orrs	r3, r2
 8011980:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011988:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801198a:	683b      	ldr	r3, [r7, #0]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	68fa      	ldr	r2, [r7, #12]
 8011990:	4313      	orrs	r3, r2
 8011992:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	68fa      	ldr	r2, [r7, #12]
 801199a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	4a25      	ldr	r2, [pc, #148]	; (8011a38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80119a2:	4293      	cmp	r3, r2
 80119a4:	d02c      	beq.n	8011a00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80119ae:	d027      	beq.n	8011a00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	4a22      	ldr	r2, [pc, #136]	; (8011a40 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80119b6:	4293      	cmp	r3, r2
 80119b8:	d022      	beq.n	8011a00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	4a21      	ldr	r2, [pc, #132]	; (8011a44 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80119c0:	4293      	cmp	r3, r2
 80119c2:	d01d      	beq.n	8011a00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	4a1f      	ldr	r2, [pc, #124]	; (8011a48 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80119ca:	4293      	cmp	r3, r2
 80119cc:	d018      	beq.n	8011a00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	4a1a      	ldr	r2, [pc, #104]	; (8011a3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80119d4:	4293      	cmp	r3, r2
 80119d6:	d013      	beq.n	8011a00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	4a1b      	ldr	r2, [pc, #108]	; (8011a4c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80119de:	4293      	cmp	r3, r2
 80119e0:	d00e      	beq.n	8011a00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	4a1a      	ldr	r2, [pc, #104]	; (8011a50 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80119e8:	4293      	cmp	r3, r2
 80119ea:	d009      	beq.n	8011a00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	4a18      	ldr	r2, [pc, #96]	; (8011a54 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80119f2:	4293      	cmp	r3, r2
 80119f4:	d004      	beq.n	8011a00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	4a17      	ldr	r2, [pc, #92]	; (8011a58 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80119fc:	4293      	cmp	r3, r2
 80119fe:	d10c      	bne.n	8011a1a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011a00:	68bb      	ldr	r3, [r7, #8]
 8011a02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011a06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011a08:	683b      	ldr	r3, [r7, #0]
 8011a0a:	689b      	ldr	r3, [r3, #8]
 8011a0c:	68ba      	ldr	r2, [r7, #8]
 8011a0e:	4313      	orrs	r3, r2
 8011a10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	68ba      	ldr	r2, [r7, #8]
 8011a18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	2201      	movs	r2, #1
 8011a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	2200      	movs	r2, #0
 8011a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011a2a:	2300      	movs	r3, #0
}
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	3714      	adds	r7, #20
 8011a30:	46bd      	mov	sp, r7
 8011a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a36:	4770      	bx	lr
 8011a38:	40010000 	.word	0x40010000
 8011a3c:	40010400 	.word	0x40010400
 8011a40:	40000400 	.word	0x40000400
 8011a44:	40000800 	.word	0x40000800
 8011a48:	40000c00 	.word	0x40000c00
 8011a4c:	40001800 	.word	0x40001800
 8011a50:	40014000 	.word	0x40014000
 8011a54:	4000e000 	.word	0x4000e000
 8011a58:	4000e400 	.word	0x4000e400

08011a5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011a5c:	b480      	push	{r7}
 8011a5e:	b083      	sub	sp, #12
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011a64:	bf00      	nop
 8011a66:	370c      	adds	r7, #12
 8011a68:	46bd      	mov	sp, r7
 8011a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a6e:	4770      	bx	lr

08011a70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011a70:	b480      	push	{r7}
 8011a72:	b083      	sub	sp, #12
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011a78:	bf00      	nop
 8011a7a:	370c      	adds	r7, #12
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a82:	4770      	bx	lr

08011a84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8011a84:	b480      	push	{r7}
 8011a86:	b083      	sub	sp, #12
 8011a88:	af00      	add	r7, sp, #0
 8011a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011a8c:	bf00      	nop
 8011a8e:	370c      	adds	r7, #12
 8011a90:	46bd      	mov	sp, r7
 8011a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a96:	4770      	bx	lr

08011a98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	b082      	sub	sp, #8
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d101      	bne.n	8011aaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011aa6:	2301      	movs	r3, #1
 8011aa8:	e042      	b.n	8011b30 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d106      	bne.n	8011ac2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	2200      	movs	r2, #0
 8011ab8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011abc:	6878      	ldr	r0, [r7, #4]
 8011abe:	f7f1 ffe9 	bl	8003a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	2224      	movs	r2, #36	; 0x24
 8011ac6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	681a      	ldr	r2, [r3, #0]
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	f022 0201 	bic.w	r2, r2, #1
 8011ad8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011ada:	6878      	ldr	r0, [r7, #4]
 8011adc:	f000 f82c 	bl	8011b38 <UART_SetConfig>
 8011ae0:	4603      	mov	r3, r0
 8011ae2:	2b01      	cmp	r3, #1
 8011ae4:	d101      	bne.n	8011aea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8011ae6:	2301      	movs	r3, #1
 8011ae8:	e022      	b.n	8011b30 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d002      	beq.n	8011af8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8011af2:	6878      	ldr	r0, [r7, #4]
 8011af4:	f000 fe8c 	bl	8012810 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	685a      	ldr	r2, [r3, #4]
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011b06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	689a      	ldr	r2, [r3, #8]
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011b16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	681a      	ldr	r2, [r3, #0]
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	f042 0201 	orr.w	r2, r2, #1
 8011b26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011b28:	6878      	ldr	r0, [r7, #4]
 8011b2a:	f000 ff13 	bl	8012954 <UART_CheckIdleState>
 8011b2e:	4603      	mov	r3, r0
}
 8011b30:	4618      	mov	r0, r3
 8011b32:	3708      	adds	r7, #8
 8011b34:	46bd      	mov	sp, r7
 8011b36:	bd80      	pop	{r7, pc}

08011b38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011b38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011b3c:	b092      	sub	sp, #72	; 0x48
 8011b3e:	af00      	add	r7, sp, #0
 8011b40:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011b42:	2300      	movs	r3, #0
 8011b44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011b48:	697b      	ldr	r3, [r7, #20]
 8011b4a:	689a      	ldr	r2, [r3, #8]
 8011b4c:	697b      	ldr	r3, [r7, #20]
 8011b4e:	691b      	ldr	r3, [r3, #16]
 8011b50:	431a      	orrs	r2, r3
 8011b52:	697b      	ldr	r3, [r7, #20]
 8011b54:	695b      	ldr	r3, [r3, #20]
 8011b56:	431a      	orrs	r2, r3
 8011b58:	697b      	ldr	r3, [r7, #20]
 8011b5a:	69db      	ldr	r3, [r3, #28]
 8011b5c:	4313      	orrs	r3, r2
 8011b5e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011b60:	697b      	ldr	r3, [r7, #20]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	681a      	ldr	r2, [r3, #0]
 8011b66:	4bbe      	ldr	r3, [pc, #760]	; (8011e60 <UART_SetConfig+0x328>)
 8011b68:	4013      	ands	r3, r2
 8011b6a:	697a      	ldr	r2, [r7, #20]
 8011b6c:	6812      	ldr	r2, [r2, #0]
 8011b6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011b70:	430b      	orrs	r3, r1
 8011b72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011b74:	697b      	ldr	r3, [r7, #20]
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	685b      	ldr	r3, [r3, #4]
 8011b7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011b7e:	697b      	ldr	r3, [r7, #20]
 8011b80:	68da      	ldr	r2, [r3, #12]
 8011b82:	697b      	ldr	r3, [r7, #20]
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	430a      	orrs	r2, r1
 8011b88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011b8a:	697b      	ldr	r3, [r7, #20]
 8011b8c:	699b      	ldr	r3, [r3, #24]
 8011b8e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011b90:	697b      	ldr	r3, [r7, #20]
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	4ab3      	ldr	r2, [pc, #716]	; (8011e64 <UART_SetConfig+0x32c>)
 8011b96:	4293      	cmp	r3, r2
 8011b98:	d004      	beq.n	8011ba4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011b9a:	697b      	ldr	r3, [r7, #20]
 8011b9c:	6a1b      	ldr	r3, [r3, #32]
 8011b9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011ba0:	4313      	orrs	r3, r2
 8011ba2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011ba4:	697b      	ldr	r3, [r7, #20]
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	689a      	ldr	r2, [r3, #8]
 8011baa:	4baf      	ldr	r3, [pc, #700]	; (8011e68 <UART_SetConfig+0x330>)
 8011bac:	4013      	ands	r3, r2
 8011bae:	697a      	ldr	r2, [r7, #20]
 8011bb0:	6812      	ldr	r2, [r2, #0]
 8011bb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011bb4:	430b      	orrs	r3, r1
 8011bb6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011bb8:	697b      	ldr	r3, [r7, #20]
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bbe:	f023 010f 	bic.w	r1, r3, #15
 8011bc2:	697b      	ldr	r3, [r7, #20]
 8011bc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011bc6:	697b      	ldr	r3, [r7, #20]
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	430a      	orrs	r2, r1
 8011bcc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011bce:	697b      	ldr	r3, [r7, #20]
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	4aa6      	ldr	r2, [pc, #664]	; (8011e6c <UART_SetConfig+0x334>)
 8011bd4:	4293      	cmp	r3, r2
 8011bd6:	d177      	bne.n	8011cc8 <UART_SetConfig+0x190>
 8011bd8:	4ba5      	ldr	r3, [pc, #660]	; (8011e70 <UART_SetConfig+0x338>)
 8011bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011bdc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011be0:	2b28      	cmp	r3, #40	; 0x28
 8011be2:	d86d      	bhi.n	8011cc0 <UART_SetConfig+0x188>
 8011be4:	a201      	add	r2, pc, #4	; (adr r2, 8011bec <UART_SetConfig+0xb4>)
 8011be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bea:	bf00      	nop
 8011bec:	08011c91 	.word	0x08011c91
 8011bf0:	08011cc1 	.word	0x08011cc1
 8011bf4:	08011cc1 	.word	0x08011cc1
 8011bf8:	08011cc1 	.word	0x08011cc1
 8011bfc:	08011cc1 	.word	0x08011cc1
 8011c00:	08011cc1 	.word	0x08011cc1
 8011c04:	08011cc1 	.word	0x08011cc1
 8011c08:	08011cc1 	.word	0x08011cc1
 8011c0c:	08011c99 	.word	0x08011c99
 8011c10:	08011cc1 	.word	0x08011cc1
 8011c14:	08011cc1 	.word	0x08011cc1
 8011c18:	08011cc1 	.word	0x08011cc1
 8011c1c:	08011cc1 	.word	0x08011cc1
 8011c20:	08011cc1 	.word	0x08011cc1
 8011c24:	08011cc1 	.word	0x08011cc1
 8011c28:	08011cc1 	.word	0x08011cc1
 8011c2c:	08011ca1 	.word	0x08011ca1
 8011c30:	08011cc1 	.word	0x08011cc1
 8011c34:	08011cc1 	.word	0x08011cc1
 8011c38:	08011cc1 	.word	0x08011cc1
 8011c3c:	08011cc1 	.word	0x08011cc1
 8011c40:	08011cc1 	.word	0x08011cc1
 8011c44:	08011cc1 	.word	0x08011cc1
 8011c48:	08011cc1 	.word	0x08011cc1
 8011c4c:	08011ca9 	.word	0x08011ca9
 8011c50:	08011cc1 	.word	0x08011cc1
 8011c54:	08011cc1 	.word	0x08011cc1
 8011c58:	08011cc1 	.word	0x08011cc1
 8011c5c:	08011cc1 	.word	0x08011cc1
 8011c60:	08011cc1 	.word	0x08011cc1
 8011c64:	08011cc1 	.word	0x08011cc1
 8011c68:	08011cc1 	.word	0x08011cc1
 8011c6c:	08011cb1 	.word	0x08011cb1
 8011c70:	08011cc1 	.word	0x08011cc1
 8011c74:	08011cc1 	.word	0x08011cc1
 8011c78:	08011cc1 	.word	0x08011cc1
 8011c7c:	08011cc1 	.word	0x08011cc1
 8011c80:	08011cc1 	.word	0x08011cc1
 8011c84:	08011cc1 	.word	0x08011cc1
 8011c88:	08011cc1 	.word	0x08011cc1
 8011c8c:	08011cb9 	.word	0x08011cb9
 8011c90:	2301      	movs	r3, #1
 8011c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c96:	e326      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011c98:	2304      	movs	r3, #4
 8011c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c9e:	e322      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011ca0:	2308      	movs	r3, #8
 8011ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ca6:	e31e      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011ca8:	2310      	movs	r3, #16
 8011caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cae:	e31a      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011cb0:	2320      	movs	r3, #32
 8011cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cb6:	e316      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011cb8:	2340      	movs	r3, #64	; 0x40
 8011cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cbe:	e312      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011cc0:	2380      	movs	r3, #128	; 0x80
 8011cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cc6:	e30e      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011cc8:	697b      	ldr	r3, [r7, #20]
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	4a69      	ldr	r2, [pc, #420]	; (8011e74 <UART_SetConfig+0x33c>)
 8011cce:	4293      	cmp	r3, r2
 8011cd0:	d130      	bne.n	8011d34 <UART_SetConfig+0x1fc>
 8011cd2:	4b67      	ldr	r3, [pc, #412]	; (8011e70 <UART_SetConfig+0x338>)
 8011cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011cd6:	f003 0307 	and.w	r3, r3, #7
 8011cda:	2b05      	cmp	r3, #5
 8011cdc:	d826      	bhi.n	8011d2c <UART_SetConfig+0x1f4>
 8011cde:	a201      	add	r2, pc, #4	; (adr r2, 8011ce4 <UART_SetConfig+0x1ac>)
 8011ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ce4:	08011cfd 	.word	0x08011cfd
 8011ce8:	08011d05 	.word	0x08011d05
 8011cec:	08011d0d 	.word	0x08011d0d
 8011cf0:	08011d15 	.word	0x08011d15
 8011cf4:	08011d1d 	.word	0x08011d1d
 8011cf8:	08011d25 	.word	0x08011d25
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d02:	e2f0      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011d04:	2304      	movs	r3, #4
 8011d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d0a:	e2ec      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011d0c:	2308      	movs	r3, #8
 8011d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d12:	e2e8      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011d14:	2310      	movs	r3, #16
 8011d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d1a:	e2e4      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011d1c:	2320      	movs	r3, #32
 8011d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d22:	e2e0      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011d24:	2340      	movs	r3, #64	; 0x40
 8011d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d2a:	e2dc      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011d2c:	2380      	movs	r3, #128	; 0x80
 8011d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d32:	e2d8      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011d34:	697b      	ldr	r3, [r7, #20]
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	4a4f      	ldr	r2, [pc, #316]	; (8011e78 <UART_SetConfig+0x340>)
 8011d3a:	4293      	cmp	r3, r2
 8011d3c:	d130      	bne.n	8011da0 <UART_SetConfig+0x268>
 8011d3e:	4b4c      	ldr	r3, [pc, #304]	; (8011e70 <UART_SetConfig+0x338>)
 8011d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011d42:	f003 0307 	and.w	r3, r3, #7
 8011d46:	2b05      	cmp	r3, #5
 8011d48:	d826      	bhi.n	8011d98 <UART_SetConfig+0x260>
 8011d4a:	a201      	add	r2, pc, #4	; (adr r2, 8011d50 <UART_SetConfig+0x218>)
 8011d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d50:	08011d69 	.word	0x08011d69
 8011d54:	08011d71 	.word	0x08011d71
 8011d58:	08011d79 	.word	0x08011d79
 8011d5c:	08011d81 	.word	0x08011d81
 8011d60:	08011d89 	.word	0x08011d89
 8011d64:	08011d91 	.word	0x08011d91
 8011d68:	2300      	movs	r3, #0
 8011d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d6e:	e2ba      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011d70:	2304      	movs	r3, #4
 8011d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d76:	e2b6      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011d78:	2308      	movs	r3, #8
 8011d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d7e:	e2b2      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011d80:	2310      	movs	r3, #16
 8011d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d86:	e2ae      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011d88:	2320      	movs	r3, #32
 8011d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d8e:	e2aa      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011d90:	2340      	movs	r3, #64	; 0x40
 8011d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d96:	e2a6      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011d98:	2380      	movs	r3, #128	; 0x80
 8011d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d9e:	e2a2      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011da0:	697b      	ldr	r3, [r7, #20]
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	4a35      	ldr	r2, [pc, #212]	; (8011e7c <UART_SetConfig+0x344>)
 8011da6:	4293      	cmp	r3, r2
 8011da8:	d130      	bne.n	8011e0c <UART_SetConfig+0x2d4>
 8011daa:	4b31      	ldr	r3, [pc, #196]	; (8011e70 <UART_SetConfig+0x338>)
 8011dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011dae:	f003 0307 	and.w	r3, r3, #7
 8011db2:	2b05      	cmp	r3, #5
 8011db4:	d826      	bhi.n	8011e04 <UART_SetConfig+0x2cc>
 8011db6:	a201      	add	r2, pc, #4	; (adr r2, 8011dbc <UART_SetConfig+0x284>)
 8011db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011dbc:	08011dd5 	.word	0x08011dd5
 8011dc0:	08011ddd 	.word	0x08011ddd
 8011dc4:	08011de5 	.word	0x08011de5
 8011dc8:	08011ded 	.word	0x08011ded
 8011dcc:	08011df5 	.word	0x08011df5
 8011dd0:	08011dfd 	.word	0x08011dfd
 8011dd4:	2300      	movs	r3, #0
 8011dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011dda:	e284      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011ddc:	2304      	movs	r3, #4
 8011dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011de2:	e280      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011de4:	2308      	movs	r3, #8
 8011de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011dea:	e27c      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011dec:	2310      	movs	r3, #16
 8011dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011df2:	e278      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011df4:	2320      	movs	r3, #32
 8011df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011dfa:	e274      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011dfc:	2340      	movs	r3, #64	; 0x40
 8011dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e02:	e270      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011e04:	2380      	movs	r3, #128	; 0x80
 8011e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e0a:	e26c      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011e0c:	697b      	ldr	r3, [r7, #20]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	4a1b      	ldr	r2, [pc, #108]	; (8011e80 <UART_SetConfig+0x348>)
 8011e12:	4293      	cmp	r3, r2
 8011e14:	d142      	bne.n	8011e9c <UART_SetConfig+0x364>
 8011e16:	4b16      	ldr	r3, [pc, #88]	; (8011e70 <UART_SetConfig+0x338>)
 8011e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011e1a:	f003 0307 	and.w	r3, r3, #7
 8011e1e:	2b05      	cmp	r3, #5
 8011e20:	d838      	bhi.n	8011e94 <UART_SetConfig+0x35c>
 8011e22:	a201      	add	r2, pc, #4	; (adr r2, 8011e28 <UART_SetConfig+0x2f0>)
 8011e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e28:	08011e41 	.word	0x08011e41
 8011e2c:	08011e49 	.word	0x08011e49
 8011e30:	08011e51 	.word	0x08011e51
 8011e34:	08011e59 	.word	0x08011e59
 8011e38:	08011e85 	.word	0x08011e85
 8011e3c:	08011e8d 	.word	0x08011e8d
 8011e40:	2300      	movs	r3, #0
 8011e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e46:	e24e      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011e48:	2304      	movs	r3, #4
 8011e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e4e:	e24a      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011e50:	2308      	movs	r3, #8
 8011e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e56:	e246      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011e58:	2310      	movs	r3, #16
 8011e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e5e:	e242      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011e60:	cfff69f3 	.word	0xcfff69f3
 8011e64:	58000c00 	.word	0x58000c00
 8011e68:	11fff4ff 	.word	0x11fff4ff
 8011e6c:	40011000 	.word	0x40011000
 8011e70:	58024400 	.word	0x58024400
 8011e74:	40004400 	.word	0x40004400
 8011e78:	40004800 	.word	0x40004800
 8011e7c:	40004c00 	.word	0x40004c00
 8011e80:	40005000 	.word	0x40005000
 8011e84:	2320      	movs	r3, #32
 8011e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e8a:	e22c      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011e8c:	2340      	movs	r3, #64	; 0x40
 8011e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e92:	e228      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011e94:	2380      	movs	r3, #128	; 0x80
 8011e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e9a:	e224      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011e9c:	697b      	ldr	r3, [r7, #20]
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	4ab1      	ldr	r2, [pc, #708]	; (8012168 <UART_SetConfig+0x630>)
 8011ea2:	4293      	cmp	r3, r2
 8011ea4:	d176      	bne.n	8011f94 <UART_SetConfig+0x45c>
 8011ea6:	4bb1      	ldr	r3, [pc, #708]	; (801216c <UART_SetConfig+0x634>)
 8011ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011eaa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011eae:	2b28      	cmp	r3, #40	; 0x28
 8011eb0:	d86c      	bhi.n	8011f8c <UART_SetConfig+0x454>
 8011eb2:	a201      	add	r2, pc, #4	; (adr r2, 8011eb8 <UART_SetConfig+0x380>)
 8011eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011eb8:	08011f5d 	.word	0x08011f5d
 8011ebc:	08011f8d 	.word	0x08011f8d
 8011ec0:	08011f8d 	.word	0x08011f8d
 8011ec4:	08011f8d 	.word	0x08011f8d
 8011ec8:	08011f8d 	.word	0x08011f8d
 8011ecc:	08011f8d 	.word	0x08011f8d
 8011ed0:	08011f8d 	.word	0x08011f8d
 8011ed4:	08011f8d 	.word	0x08011f8d
 8011ed8:	08011f65 	.word	0x08011f65
 8011edc:	08011f8d 	.word	0x08011f8d
 8011ee0:	08011f8d 	.word	0x08011f8d
 8011ee4:	08011f8d 	.word	0x08011f8d
 8011ee8:	08011f8d 	.word	0x08011f8d
 8011eec:	08011f8d 	.word	0x08011f8d
 8011ef0:	08011f8d 	.word	0x08011f8d
 8011ef4:	08011f8d 	.word	0x08011f8d
 8011ef8:	08011f6d 	.word	0x08011f6d
 8011efc:	08011f8d 	.word	0x08011f8d
 8011f00:	08011f8d 	.word	0x08011f8d
 8011f04:	08011f8d 	.word	0x08011f8d
 8011f08:	08011f8d 	.word	0x08011f8d
 8011f0c:	08011f8d 	.word	0x08011f8d
 8011f10:	08011f8d 	.word	0x08011f8d
 8011f14:	08011f8d 	.word	0x08011f8d
 8011f18:	08011f75 	.word	0x08011f75
 8011f1c:	08011f8d 	.word	0x08011f8d
 8011f20:	08011f8d 	.word	0x08011f8d
 8011f24:	08011f8d 	.word	0x08011f8d
 8011f28:	08011f8d 	.word	0x08011f8d
 8011f2c:	08011f8d 	.word	0x08011f8d
 8011f30:	08011f8d 	.word	0x08011f8d
 8011f34:	08011f8d 	.word	0x08011f8d
 8011f38:	08011f7d 	.word	0x08011f7d
 8011f3c:	08011f8d 	.word	0x08011f8d
 8011f40:	08011f8d 	.word	0x08011f8d
 8011f44:	08011f8d 	.word	0x08011f8d
 8011f48:	08011f8d 	.word	0x08011f8d
 8011f4c:	08011f8d 	.word	0x08011f8d
 8011f50:	08011f8d 	.word	0x08011f8d
 8011f54:	08011f8d 	.word	0x08011f8d
 8011f58:	08011f85 	.word	0x08011f85
 8011f5c:	2301      	movs	r3, #1
 8011f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f62:	e1c0      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011f64:	2304      	movs	r3, #4
 8011f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f6a:	e1bc      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011f6c:	2308      	movs	r3, #8
 8011f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f72:	e1b8      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011f74:	2310      	movs	r3, #16
 8011f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f7a:	e1b4      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011f7c:	2320      	movs	r3, #32
 8011f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f82:	e1b0      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011f84:	2340      	movs	r3, #64	; 0x40
 8011f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f8a:	e1ac      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011f8c:	2380      	movs	r3, #128	; 0x80
 8011f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f92:	e1a8      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011f94:	697b      	ldr	r3, [r7, #20]
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	4a75      	ldr	r2, [pc, #468]	; (8012170 <UART_SetConfig+0x638>)
 8011f9a:	4293      	cmp	r3, r2
 8011f9c:	d130      	bne.n	8012000 <UART_SetConfig+0x4c8>
 8011f9e:	4b73      	ldr	r3, [pc, #460]	; (801216c <UART_SetConfig+0x634>)
 8011fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011fa2:	f003 0307 	and.w	r3, r3, #7
 8011fa6:	2b05      	cmp	r3, #5
 8011fa8:	d826      	bhi.n	8011ff8 <UART_SetConfig+0x4c0>
 8011faa:	a201      	add	r2, pc, #4	; (adr r2, 8011fb0 <UART_SetConfig+0x478>)
 8011fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fb0:	08011fc9 	.word	0x08011fc9
 8011fb4:	08011fd1 	.word	0x08011fd1
 8011fb8:	08011fd9 	.word	0x08011fd9
 8011fbc:	08011fe1 	.word	0x08011fe1
 8011fc0:	08011fe9 	.word	0x08011fe9
 8011fc4:	08011ff1 	.word	0x08011ff1
 8011fc8:	2300      	movs	r3, #0
 8011fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011fce:	e18a      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011fd0:	2304      	movs	r3, #4
 8011fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011fd6:	e186      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011fd8:	2308      	movs	r3, #8
 8011fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011fde:	e182      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011fe0:	2310      	movs	r3, #16
 8011fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011fe6:	e17e      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011fe8:	2320      	movs	r3, #32
 8011fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011fee:	e17a      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011ff0:	2340      	movs	r3, #64	; 0x40
 8011ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ff6:	e176      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8011ff8:	2380      	movs	r3, #128	; 0x80
 8011ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ffe:	e172      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8012000:	697b      	ldr	r3, [r7, #20]
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	4a5b      	ldr	r2, [pc, #364]	; (8012174 <UART_SetConfig+0x63c>)
 8012006:	4293      	cmp	r3, r2
 8012008:	d130      	bne.n	801206c <UART_SetConfig+0x534>
 801200a:	4b58      	ldr	r3, [pc, #352]	; (801216c <UART_SetConfig+0x634>)
 801200c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801200e:	f003 0307 	and.w	r3, r3, #7
 8012012:	2b05      	cmp	r3, #5
 8012014:	d826      	bhi.n	8012064 <UART_SetConfig+0x52c>
 8012016:	a201      	add	r2, pc, #4	; (adr r2, 801201c <UART_SetConfig+0x4e4>)
 8012018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801201c:	08012035 	.word	0x08012035
 8012020:	0801203d 	.word	0x0801203d
 8012024:	08012045 	.word	0x08012045
 8012028:	0801204d 	.word	0x0801204d
 801202c:	08012055 	.word	0x08012055
 8012030:	0801205d 	.word	0x0801205d
 8012034:	2300      	movs	r3, #0
 8012036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801203a:	e154      	b.n	80122e6 <UART_SetConfig+0x7ae>
 801203c:	2304      	movs	r3, #4
 801203e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012042:	e150      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8012044:	2308      	movs	r3, #8
 8012046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801204a:	e14c      	b.n	80122e6 <UART_SetConfig+0x7ae>
 801204c:	2310      	movs	r3, #16
 801204e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012052:	e148      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8012054:	2320      	movs	r3, #32
 8012056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801205a:	e144      	b.n	80122e6 <UART_SetConfig+0x7ae>
 801205c:	2340      	movs	r3, #64	; 0x40
 801205e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012062:	e140      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8012064:	2380      	movs	r3, #128	; 0x80
 8012066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801206a:	e13c      	b.n	80122e6 <UART_SetConfig+0x7ae>
 801206c:	697b      	ldr	r3, [r7, #20]
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	4a41      	ldr	r2, [pc, #260]	; (8012178 <UART_SetConfig+0x640>)
 8012072:	4293      	cmp	r3, r2
 8012074:	f040 8082 	bne.w	801217c <UART_SetConfig+0x644>
 8012078:	4b3c      	ldr	r3, [pc, #240]	; (801216c <UART_SetConfig+0x634>)
 801207a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801207c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012080:	2b28      	cmp	r3, #40	; 0x28
 8012082:	d86d      	bhi.n	8012160 <UART_SetConfig+0x628>
 8012084:	a201      	add	r2, pc, #4	; (adr r2, 801208c <UART_SetConfig+0x554>)
 8012086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801208a:	bf00      	nop
 801208c:	08012131 	.word	0x08012131
 8012090:	08012161 	.word	0x08012161
 8012094:	08012161 	.word	0x08012161
 8012098:	08012161 	.word	0x08012161
 801209c:	08012161 	.word	0x08012161
 80120a0:	08012161 	.word	0x08012161
 80120a4:	08012161 	.word	0x08012161
 80120a8:	08012161 	.word	0x08012161
 80120ac:	08012139 	.word	0x08012139
 80120b0:	08012161 	.word	0x08012161
 80120b4:	08012161 	.word	0x08012161
 80120b8:	08012161 	.word	0x08012161
 80120bc:	08012161 	.word	0x08012161
 80120c0:	08012161 	.word	0x08012161
 80120c4:	08012161 	.word	0x08012161
 80120c8:	08012161 	.word	0x08012161
 80120cc:	08012141 	.word	0x08012141
 80120d0:	08012161 	.word	0x08012161
 80120d4:	08012161 	.word	0x08012161
 80120d8:	08012161 	.word	0x08012161
 80120dc:	08012161 	.word	0x08012161
 80120e0:	08012161 	.word	0x08012161
 80120e4:	08012161 	.word	0x08012161
 80120e8:	08012161 	.word	0x08012161
 80120ec:	08012149 	.word	0x08012149
 80120f0:	08012161 	.word	0x08012161
 80120f4:	08012161 	.word	0x08012161
 80120f8:	08012161 	.word	0x08012161
 80120fc:	08012161 	.word	0x08012161
 8012100:	08012161 	.word	0x08012161
 8012104:	08012161 	.word	0x08012161
 8012108:	08012161 	.word	0x08012161
 801210c:	08012151 	.word	0x08012151
 8012110:	08012161 	.word	0x08012161
 8012114:	08012161 	.word	0x08012161
 8012118:	08012161 	.word	0x08012161
 801211c:	08012161 	.word	0x08012161
 8012120:	08012161 	.word	0x08012161
 8012124:	08012161 	.word	0x08012161
 8012128:	08012161 	.word	0x08012161
 801212c:	08012159 	.word	0x08012159
 8012130:	2301      	movs	r3, #1
 8012132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012136:	e0d6      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8012138:	2304      	movs	r3, #4
 801213a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801213e:	e0d2      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8012140:	2308      	movs	r3, #8
 8012142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012146:	e0ce      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8012148:	2310      	movs	r3, #16
 801214a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801214e:	e0ca      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8012150:	2320      	movs	r3, #32
 8012152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012156:	e0c6      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8012158:	2340      	movs	r3, #64	; 0x40
 801215a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801215e:	e0c2      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8012160:	2380      	movs	r3, #128	; 0x80
 8012162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012166:	e0be      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8012168:	40011400 	.word	0x40011400
 801216c:	58024400 	.word	0x58024400
 8012170:	40007800 	.word	0x40007800
 8012174:	40007c00 	.word	0x40007c00
 8012178:	40011800 	.word	0x40011800
 801217c:	697b      	ldr	r3, [r7, #20]
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	4aad      	ldr	r2, [pc, #692]	; (8012438 <UART_SetConfig+0x900>)
 8012182:	4293      	cmp	r3, r2
 8012184:	d176      	bne.n	8012274 <UART_SetConfig+0x73c>
 8012186:	4bad      	ldr	r3, [pc, #692]	; (801243c <UART_SetConfig+0x904>)
 8012188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801218a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801218e:	2b28      	cmp	r3, #40	; 0x28
 8012190:	d86c      	bhi.n	801226c <UART_SetConfig+0x734>
 8012192:	a201      	add	r2, pc, #4	; (adr r2, 8012198 <UART_SetConfig+0x660>)
 8012194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012198:	0801223d 	.word	0x0801223d
 801219c:	0801226d 	.word	0x0801226d
 80121a0:	0801226d 	.word	0x0801226d
 80121a4:	0801226d 	.word	0x0801226d
 80121a8:	0801226d 	.word	0x0801226d
 80121ac:	0801226d 	.word	0x0801226d
 80121b0:	0801226d 	.word	0x0801226d
 80121b4:	0801226d 	.word	0x0801226d
 80121b8:	08012245 	.word	0x08012245
 80121bc:	0801226d 	.word	0x0801226d
 80121c0:	0801226d 	.word	0x0801226d
 80121c4:	0801226d 	.word	0x0801226d
 80121c8:	0801226d 	.word	0x0801226d
 80121cc:	0801226d 	.word	0x0801226d
 80121d0:	0801226d 	.word	0x0801226d
 80121d4:	0801226d 	.word	0x0801226d
 80121d8:	0801224d 	.word	0x0801224d
 80121dc:	0801226d 	.word	0x0801226d
 80121e0:	0801226d 	.word	0x0801226d
 80121e4:	0801226d 	.word	0x0801226d
 80121e8:	0801226d 	.word	0x0801226d
 80121ec:	0801226d 	.word	0x0801226d
 80121f0:	0801226d 	.word	0x0801226d
 80121f4:	0801226d 	.word	0x0801226d
 80121f8:	08012255 	.word	0x08012255
 80121fc:	0801226d 	.word	0x0801226d
 8012200:	0801226d 	.word	0x0801226d
 8012204:	0801226d 	.word	0x0801226d
 8012208:	0801226d 	.word	0x0801226d
 801220c:	0801226d 	.word	0x0801226d
 8012210:	0801226d 	.word	0x0801226d
 8012214:	0801226d 	.word	0x0801226d
 8012218:	0801225d 	.word	0x0801225d
 801221c:	0801226d 	.word	0x0801226d
 8012220:	0801226d 	.word	0x0801226d
 8012224:	0801226d 	.word	0x0801226d
 8012228:	0801226d 	.word	0x0801226d
 801222c:	0801226d 	.word	0x0801226d
 8012230:	0801226d 	.word	0x0801226d
 8012234:	0801226d 	.word	0x0801226d
 8012238:	08012265 	.word	0x08012265
 801223c:	2301      	movs	r3, #1
 801223e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012242:	e050      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8012244:	2304      	movs	r3, #4
 8012246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801224a:	e04c      	b.n	80122e6 <UART_SetConfig+0x7ae>
 801224c:	2308      	movs	r3, #8
 801224e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012252:	e048      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8012254:	2310      	movs	r3, #16
 8012256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801225a:	e044      	b.n	80122e6 <UART_SetConfig+0x7ae>
 801225c:	2320      	movs	r3, #32
 801225e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012262:	e040      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8012264:	2340      	movs	r3, #64	; 0x40
 8012266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801226a:	e03c      	b.n	80122e6 <UART_SetConfig+0x7ae>
 801226c:	2380      	movs	r3, #128	; 0x80
 801226e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012272:	e038      	b.n	80122e6 <UART_SetConfig+0x7ae>
 8012274:	697b      	ldr	r3, [r7, #20]
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	4a71      	ldr	r2, [pc, #452]	; (8012440 <UART_SetConfig+0x908>)
 801227a:	4293      	cmp	r3, r2
 801227c:	d130      	bne.n	80122e0 <UART_SetConfig+0x7a8>
 801227e:	4b6f      	ldr	r3, [pc, #444]	; (801243c <UART_SetConfig+0x904>)
 8012280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012282:	f003 0307 	and.w	r3, r3, #7
 8012286:	2b05      	cmp	r3, #5
 8012288:	d826      	bhi.n	80122d8 <UART_SetConfig+0x7a0>
 801228a:	a201      	add	r2, pc, #4	; (adr r2, 8012290 <UART_SetConfig+0x758>)
 801228c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012290:	080122a9 	.word	0x080122a9
 8012294:	080122b1 	.word	0x080122b1
 8012298:	080122b9 	.word	0x080122b9
 801229c:	080122c1 	.word	0x080122c1
 80122a0:	080122c9 	.word	0x080122c9
 80122a4:	080122d1 	.word	0x080122d1
 80122a8:	2302      	movs	r3, #2
 80122aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122ae:	e01a      	b.n	80122e6 <UART_SetConfig+0x7ae>
 80122b0:	2304      	movs	r3, #4
 80122b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122b6:	e016      	b.n	80122e6 <UART_SetConfig+0x7ae>
 80122b8:	2308      	movs	r3, #8
 80122ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122be:	e012      	b.n	80122e6 <UART_SetConfig+0x7ae>
 80122c0:	2310      	movs	r3, #16
 80122c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122c6:	e00e      	b.n	80122e6 <UART_SetConfig+0x7ae>
 80122c8:	2320      	movs	r3, #32
 80122ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122ce:	e00a      	b.n	80122e6 <UART_SetConfig+0x7ae>
 80122d0:	2340      	movs	r3, #64	; 0x40
 80122d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122d6:	e006      	b.n	80122e6 <UART_SetConfig+0x7ae>
 80122d8:	2380      	movs	r3, #128	; 0x80
 80122da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80122de:	e002      	b.n	80122e6 <UART_SetConfig+0x7ae>
 80122e0:	2380      	movs	r3, #128	; 0x80
 80122e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80122e6:	697b      	ldr	r3, [r7, #20]
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	4a55      	ldr	r2, [pc, #340]	; (8012440 <UART_SetConfig+0x908>)
 80122ec:	4293      	cmp	r3, r2
 80122ee:	f040 80f8 	bne.w	80124e2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80122f2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80122f6:	2b20      	cmp	r3, #32
 80122f8:	dc46      	bgt.n	8012388 <UART_SetConfig+0x850>
 80122fa:	2b02      	cmp	r3, #2
 80122fc:	db75      	blt.n	80123ea <UART_SetConfig+0x8b2>
 80122fe:	3b02      	subs	r3, #2
 8012300:	2b1e      	cmp	r3, #30
 8012302:	d872      	bhi.n	80123ea <UART_SetConfig+0x8b2>
 8012304:	a201      	add	r2, pc, #4	; (adr r2, 801230c <UART_SetConfig+0x7d4>)
 8012306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801230a:	bf00      	nop
 801230c:	0801238f 	.word	0x0801238f
 8012310:	080123eb 	.word	0x080123eb
 8012314:	08012397 	.word	0x08012397
 8012318:	080123eb 	.word	0x080123eb
 801231c:	080123eb 	.word	0x080123eb
 8012320:	080123eb 	.word	0x080123eb
 8012324:	080123a7 	.word	0x080123a7
 8012328:	080123eb 	.word	0x080123eb
 801232c:	080123eb 	.word	0x080123eb
 8012330:	080123eb 	.word	0x080123eb
 8012334:	080123eb 	.word	0x080123eb
 8012338:	080123eb 	.word	0x080123eb
 801233c:	080123eb 	.word	0x080123eb
 8012340:	080123eb 	.word	0x080123eb
 8012344:	080123b7 	.word	0x080123b7
 8012348:	080123eb 	.word	0x080123eb
 801234c:	080123eb 	.word	0x080123eb
 8012350:	080123eb 	.word	0x080123eb
 8012354:	080123eb 	.word	0x080123eb
 8012358:	080123eb 	.word	0x080123eb
 801235c:	080123eb 	.word	0x080123eb
 8012360:	080123eb 	.word	0x080123eb
 8012364:	080123eb 	.word	0x080123eb
 8012368:	080123eb 	.word	0x080123eb
 801236c:	080123eb 	.word	0x080123eb
 8012370:	080123eb 	.word	0x080123eb
 8012374:	080123eb 	.word	0x080123eb
 8012378:	080123eb 	.word	0x080123eb
 801237c:	080123eb 	.word	0x080123eb
 8012380:	080123eb 	.word	0x080123eb
 8012384:	080123dd 	.word	0x080123dd
 8012388:	2b40      	cmp	r3, #64	; 0x40
 801238a:	d02a      	beq.n	80123e2 <UART_SetConfig+0x8aa>
 801238c:	e02d      	b.n	80123ea <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801238e:	f7fb f86b 	bl	800d468 <HAL_RCCEx_GetD3PCLK1Freq>
 8012392:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012394:	e02f      	b.n	80123f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012396:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801239a:	4618      	mov	r0, r3
 801239c:	f7fb f87a 	bl	800d494 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80123a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80123a4:	e027      	b.n	80123f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80123a6:	f107 0318 	add.w	r3, r7, #24
 80123aa:	4618      	mov	r0, r3
 80123ac:	f7fb f9c6 	bl	800d73c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80123b0:	69fb      	ldr	r3, [r7, #28]
 80123b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80123b4:	e01f      	b.n	80123f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80123b6:	4b21      	ldr	r3, [pc, #132]	; (801243c <UART_SetConfig+0x904>)
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	f003 0320 	and.w	r3, r3, #32
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d009      	beq.n	80123d6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80123c2:	4b1e      	ldr	r3, [pc, #120]	; (801243c <UART_SetConfig+0x904>)
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	08db      	lsrs	r3, r3, #3
 80123c8:	f003 0303 	and.w	r3, r3, #3
 80123cc:	4a1d      	ldr	r2, [pc, #116]	; (8012444 <UART_SetConfig+0x90c>)
 80123ce:	fa22 f303 	lsr.w	r3, r2, r3
 80123d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80123d4:	e00f      	b.n	80123f6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80123d6:	4b1b      	ldr	r3, [pc, #108]	; (8012444 <UART_SetConfig+0x90c>)
 80123d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80123da:	e00c      	b.n	80123f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80123dc:	4b1a      	ldr	r3, [pc, #104]	; (8012448 <UART_SetConfig+0x910>)
 80123de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80123e0:	e009      	b.n	80123f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80123e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80123e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80123e8:	e005      	b.n	80123f6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80123ea:	2300      	movs	r3, #0
 80123ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80123ee:	2301      	movs	r3, #1
 80123f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80123f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80123f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	f000 81ee 	beq.w	80127da <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80123fe:	697b      	ldr	r3, [r7, #20]
 8012400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012402:	4a12      	ldr	r2, [pc, #72]	; (801244c <UART_SetConfig+0x914>)
 8012404:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012408:	461a      	mov	r2, r3
 801240a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801240c:	fbb3 f3f2 	udiv	r3, r3, r2
 8012410:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012412:	697b      	ldr	r3, [r7, #20]
 8012414:	685a      	ldr	r2, [r3, #4]
 8012416:	4613      	mov	r3, r2
 8012418:	005b      	lsls	r3, r3, #1
 801241a:	4413      	add	r3, r2
 801241c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801241e:	429a      	cmp	r2, r3
 8012420:	d305      	bcc.n	801242e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8012422:	697b      	ldr	r3, [r7, #20]
 8012424:	685b      	ldr	r3, [r3, #4]
 8012426:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801242a:	429a      	cmp	r2, r3
 801242c:	d910      	bls.n	8012450 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 801242e:	2301      	movs	r3, #1
 8012430:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8012434:	e1d1      	b.n	80127da <UART_SetConfig+0xca2>
 8012436:	bf00      	nop
 8012438:	40011c00 	.word	0x40011c00
 801243c:	58024400 	.word	0x58024400
 8012440:	58000c00 	.word	0x58000c00
 8012444:	03d09000 	.word	0x03d09000
 8012448:	003d0900 	.word	0x003d0900
 801244c:	0801ff8c 	.word	0x0801ff8c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012452:	2200      	movs	r2, #0
 8012454:	60bb      	str	r3, [r7, #8]
 8012456:	60fa      	str	r2, [r7, #12]
 8012458:	697b      	ldr	r3, [r7, #20]
 801245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801245c:	4ac0      	ldr	r2, [pc, #768]	; (8012760 <UART_SetConfig+0xc28>)
 801245e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012462:	b29b      	uxth	r3, r3
 8012464:	2200      	movs	r2, #0
 8012466:	603b      	str	r3, [r7, #0]
 8012468:	607a      	str	r2, [r7, #4]
 801246a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801246e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8012472:	f7ee f971 	bl	8000758 <__aeabi_uldivmod>
 8012476:	4602      	mov	r2, r0
 8012478:	460b      	mov	r3, r1
 801247a:	4610      	mov	r0, r2
 801247c:	4619      	mov	r1, r3
 801247e:	f04f 0200 	mov.w	r2, #0
 8012482:	f04f 0300 	mov.w	r3, #0
 8012486:	020b      	lsls	r3, r1, #8
 8012488:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801248c:	0202      	lsls	r2, r0, #8
 801248e:	6979      	ldr	r1, [r7, #20]
 8012490:	6849      	ldr	r1, [r1, #4]
 8012492:	0849      	lsrs	r1, r1, #1
 8012494:	2000      	movs	r0, #0
 8012496:	460c      	mov	r4, r1
 8012498:	4605      	mov	r5, r0
 801249a:	eb12 0804 	adds.w	r8, r2, r4
 801249e:	eb43 0905 	adc.w	r9, r3, r5
 80124a2:	697b      	ldr	r3, [r7, #20]
 80124a4:	685b      	ldr	r3, [r3, #4]
 80124a6:	2200      	movs	r2, #0
 80124a8:	469a      	mov	sl, r3
 80124aa:	4693      	mov	fp, r2
 80124ac:	4652      	mov	r2, sl
 80124ae:	465b      	mov	r3, fp
 80124b0:	4640      	mov	r0, r8
 80124b2:	4649      	mov	r1, r9
 80124b4:	f7ee f950 	bl	8000758 <__aeabi_uldivmod>
 80124b8:	4602      	mov	r2, r0
 80124ba:	460b      	mov	r3, r1
 80124bc:	4613      	mov	r3, r2
 80124be:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80124c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80124c6:	d308      	bcc.n	80124da <UART_SetConfig+0x9a2>
 80124c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80124ce:	d204      	bcs.n	80124da <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80124d0:	697b      	ldr	r3, [r7, #20]
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80124d6:	60da      	str	r2, [r3, #12]
 80124d8:	e17f      	b.n	80127da <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80124da:	2301      	movs	r3, #1
 80124dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80124e0:	e17b      	b.n	80127da <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80124e2:	697b      	ldr	r3, [r7, #20]
 80124e4:	69db      	ldr	r3, [r3, #28]
 80124e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80124ea:	f040 80bd 	bne.w	8012668 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80124ee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80124f2:	2b20      	cmp	r3, #32
 80124f4:	dc48      	bgt.n	8012588 <UART_SetConfig+0xa50>
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	db7b      	blt.n	80125f2 <UART_SetConfig+0xaba>
 80124fa:	2b20      	cmp	r3, #32
 80124fc:	d879      	bhi.n	80125f2 <UART_SetConfig+0xaba>
 80124fe:	a201      	add	r2, pc, #4	; (adr r2, 8012504 <UART_SetConfig+0x9cc>)
 8012500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012504:	0801258f 	.word	0x0801258f
 8012508:	08012597 	.word	0x08012597
 801250c:	080125f3 	.word	0x080125f3
 8012510:	080125f3 	.word	0x080125f3
 8012514:	0801259f 	.word	0x0801259f
 8012518:	080125f3 	.word	0x080125f3
 801251c:	080125f3 	.word	0x080125f3
 8012520:	080125f3 	.word	0x080125f3
 8012524:	080125af 	.word	0x080125af
 8012528:	080125f3 	.word	0x080125f3
 801252c:	080125f3 	.word	0x080125f3
 8012530:	080125f3 	.word	0x080125f3
 8012534:	080125f3 	.word	0x080125f3
 8012538:	080125f3 	.word	0x080125f3
 801253c:	080125f3 	.word	0x080125f3
 8012540:	080125f3 	.word	0x080125f3
 8012544:	080125bf 	.word	0x080125bf
 8012548:	080125f3 	.word	0x080125f3
 801254c:	080125f3 	.word	0x080125f3
 8012550:	080125f3 	.word	0x080125f3
 8012554:	080125f3 	.word	0x080125f3
 8012558:	080125f3 	.word	0x080125f3
 801255c:	080125f3 	.word	0x080125f3
 8012560:	080125f3 	.word	0x080125f3
 8012564:	080125f3 	.word	0x080125f3
 8012568:	080125f3 	.word	0x080125f3
 801256c:	080125f3 	.word	0x080125f3
 8012570:	080125f3 	.word	0x080125f3
 8012574:	080125f3 	.word	0x080125f3
 8012578:	080125f3 	.word	0x080125f3
 801257c:	080125f3 	.word	0x080125f3
 8012580:	080125f3 	.word	0x080125f3
 8012584:	080125e5 	.word	0x080125e5
 8012588:	2b40      	cmp	r3, #64	; 0x40
 801258a:	d02e      	beq.n	80125ea <UART_SetConfig+0xab2>
 801258c:	e031      	b.n	80125f2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801258e:	f7f9 f8cd 	bl	800b72c <HAL_RCC_GetPCLK1Freq>
 8012592:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012594:	e033      	b.n	80125fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012596:	f7f9 f8df 	bl	800b758 <HAL_RCC_GetPCLK2Freq>
 801259a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801259c:	e02f      	b.n	80125fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801259e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80125a2:	4618      	mov	r0, r3
 80125a4:	f7fa ff76 	bl	800d494 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80125a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80125ac:	e027      	b.n	80125fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80125ae:	f107 0318 	add.w	r3, r7, #24
 80125b2:	4618      	mov	r0, r3
 80125b4:	f7fb f8c2 	bl	800d73c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80125b8:	69fb      	ldr	r3, [r7, #28]
 80125ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80125bc:	e01f      	b.n	80125fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80125be:	4b69      	ldr	r3, [pc, #420]	; (8012764 <UART_SetConfig+0xc2c>)
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	f003 0320 	and.w	r3, r3, #32
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d009      	beq.n	80125de <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80125ca:	4b66      	ldr	r3, [pc, #408]	; (8012764 <UART_SetConfig+0xc2c>)
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	08db      	lsrs	r3, r3, #3
 80125d0:	f003 0303 	and.w	r3, r3, #3
 80125d4:	4a64      	ldr	r2, [pc, #400]	; (8012768 <UART_SetConfig+0xc30>)
 80125d6:	fa22 f303 	lsr.w	r3, r2, r3
 80125da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80125dc:	e00f      	b.n	80125fe <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80125de:	4b62      	ldr	r3, [pc, #392]	; (8012768 <UART_SetConfig+0xc30>)
 80125e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80125e2:	e00c      	b.n	80125fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80125e4:	4b61      	ldr	r3, [pc, #388]	; (801276c <UART_SetConfig+0xc34>)
 80125e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80125e8:	e009      	b.n	80125fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80125ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80125ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80125f0:	e005      	b.n	80125fe <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80125f2:	2300      	movs	r3, #0
 80125f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80125f6:	2301      	movs	r3, #1
 80125f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80125fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80125fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012600:	2b00      	cmp	r3, #0
 8012602:	f000 80ea 	beq.w	80127da <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012606:	697b      	ldr	r3, [r7, #20]
 8012608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801260a:	4a55      	ldr	r2, [pc, #340]	; (8012760 <UART_SetConfig+0xc28>)
 801260c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012610:	461a      	mov	r2, r3
 8012612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012614:	fbb3 f3f2 	udiv	r3, r3, r2
 8012618:	005a      	lsls	r2, r3, #1
 801261a:	697b      	ldr	r3, [r7, #20]
 801261c:	685b      	ldr	r3, [r3, #4]
 801261e:	085b      	lsrs	r3, r3, #1
 8012620:	441a      	add	r2, r3
 8012622:	697b      	ldr	r3, [r7, #20]
 8012624:	685b      	ldr	r3, [r3, #4]
 8012626:	fbb2 f3f3 	udiv	r3, r2, r3
 801262a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801262c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801262e:	2b0f      	cmp	r3, #15
 8012630:	d916      	bls.n	8012660 <UART_SetConfig+0xb28>
 8012632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012638:	d212      	bcs.n	8012660 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801263a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801263c:	b29b      	uxth	r3, r3
 801263e:	f023 030f 	bic.w	r3, r3, #15
 8012642:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012646:	085b      	lsrs	r3, r3, #1
 8012648:	b29b      	uxth	r3, r3
 801264a:	f003 0307 	and.w	r3, r3, #7
 801264e:	b29a      	uxth	r2, r3
 8012650:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012652:	4313      	orrs	r3, r2
 8012654:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8012656:	697b      	ldr	r3, [r7, #20]
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801265c:	60da      	str	r2, [r3, #12]
 801265e:	e0bc      	b.n	80127da <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8012660:	2301      	movs	r3, #1
 8012662:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8012666:	e0b8      	b.n	80127da <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8012668:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801266c:	2b20      	cmp	r3, #32
 801266e:	dc4b      	bgt.n	8012708 <UART_SetConfig+0xbd0>
 8012670:	2b00      	cmp	r3, #0
 8012672:	f2c0 8087 	blt.w	8012784 <UART_SetConfig+0xc4c>
 8012676:	2b20      	cmp	r3, #32
 8012678:	f200 8084 	bhi.w	8012784 <UART_SetConfig+0xc4c>
 801267c:	a201      	add	r2, pc, #4	; (adr r2, 8012684 <UART_SetConfig+0xb4c>)
 801267e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012682:	bf00      	nop
 8012684:	0801270f 	.word	0x0801270f
 8012688:	08012717 	.word	0x08012717
 801268c:	08012785 	.word	0x08012785
 8012690:	08012785 	.word	0x08012785
 8012694:	0801271f 	.word	0x0801271f
 8012698:	08012785 	.word	0x08012785
 801269c:	08012785 	.word	0x08012785
 80126a0:	08012785 	.word	0x08012785
 80126a4:	0801272f 	.word	0x0801272f
 80126a8:	08012785 	.word	0x08012785
 80126ac:	08012785 	.word	0x08012785
 80126b0:	08012785 	.word	0x08012785
 80126b4:	08012785 	.word	0x08012785
 80126b8:	08012785 	.word	0x08012785
 80126bc:	08012785 	.word	0x08012785
 80126c0:	08012785 	.word	0x08012785
 80126c4:	0801273f 	.word	0x0801273f
 80126c8:	08012785 	.word	0x08012785
 80126cc:	08012785 	.word	0x08012785
 80126d0:	08012785 	.word	0x08012785
 80126d4:	08012785 	.word	0x08012785
 80126d8:	08012785 	.word	0x08012785
 80126dc:	08012785 	.word	0x08012785
 80126e0:	08012785 	.word	0x08012785
 80126e4:	08012785 	.word	0x08012785
 80126e8:	08012785 	.word	0x08012785
 80126ec:	08012785 	.word	0x08012785
 80126f0:	08012785 	.word	0x08012785
 80126f4:	08012785 	.word	0x08012785
 80126f8:	08012785 	.word	0x08012785
 80126fc:	08012785 	.word	0x08012785
 8012700:	08012785 	.word	0x08012785
 8012704:	08012777 	.word	0x08012777
 8012708:	2b40      	cmp	r3, #64	; 0x40
 801270a:	d037      	beq.n	801277c <UART_SetConfig+0xc44>
 801270c:	e03a      	b.n	8012784 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801270e:	f7f9 f80d 	bl	800b72c <HAL_RCC_GetPCLK1Freq>
 8012712:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012714:	e03c      	b.n	8012790 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012716:	f7f9 f81f 	bl	800b758 <HAL_RCC_GetPCLK2Freq>
 801271a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801271c:	e038      	b.n	8012790 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801271e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012722:	4618      	mov	r0, r3
 8012724:	f7fa feb6 	bl	800d494 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801272a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801272c:	e030      	b.n	8012790 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801272e:	f107 0318 	add.w	r3, r7, #24
 8012732:	4618      	mov	r0, r3
 8012734:	f7fb f802 	bl	800d73c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012738:	69fb      	ldr	r3, [r7, #28]
 801273a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801273c:	e028      	b.n	8012790 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801273e:	4b09      	ldr	r3, [pc, #36]	; (8012764 <UART_SetConfig+0xc2c>)
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	f003 0320 	and.w	r3, r3, #32
 8012746:	2b00      	cmp	r3, #0
 8012748:	d012      	beq.n	8012770 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801274a:	4b06      	ldr	r3, [pc, #24]	; (8012764 <UART_SetConfig+0xc2c>)
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	08db      	lsrs	r3, r3, #3
 8012750:	f003 0303 	and.w	r3, r3, #3
 8012754:	4a04      	ldr	r2, [pc, #16]	; (8012768 <UART_SetConfig+0xc30>)
 8012756:	fa22 f303 	lsr.w	r3, r2, r3
 801275a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801275c:	e018      	b.n	8012790 <UART_SetConfig+0xc58>
 801275e:	bf00      	nop
 8012760:	0801ff8c 	.word	0x0801ff8c
 8012764:	58024400 	.word	0x58024400
 8012768:	03d09000 	.word	0x03d09000
 801276c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8012770:	4b24      	ldr	r3, [pc, #144]	; (8012804 <UART_SetConfig+0xccc>)
 8012772:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012774:	e00c      	b.n	8012790 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012776:	4b24      	ldr	r3, [pc, #144]	; (8012808 <UART_SetConfig+0xcd0>)
 8012778:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801277a:	e009      	b.n	8012790 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801277c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012780:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012782:	e005      	b.n	8012790 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8012784:	2300      	movs	r3, #0
 8012786:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8012788:	2301      	movs	r3, #1
 801278a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801278e:	bf00      	nop
    }

    if (pclk != 0U)
 8012790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012792:	2b00      	cmp	r3, #0
 8012794:	d021      	beq.n	80127da <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012796:	697b      	ldr	r3, [r7, #20]
 8012798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801279a:	4a1c      	ldr	r2, [pc, #112]	; (801280c <UART_SetConfig+0xcd4>)
 801279c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80127a0:	461a      	mov	r2, r3
 80127a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127a4:	fbb3 f2f2 	udiv	r2, r3, r2
 80127a8:	697b      	ldr	r3, [r7, #20]
 80127aa:	685b      	ldr	r3, [r3, #4]
 80127ac:	085b      	lsrs	r3, r3, #1
 80127ae:	441a      	add	r2, r3
 80127b0:	697b      	ldr	r3, [r7, #20]
 80127b2:	685b      	ldr	r3, [r3, #4]
 80127b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80127b8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80127ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127bc:	2b0f      	cmp	r3, #15
 80127be:	d909      	bls.n	80127d4 <UART_SetConfig+0xc9c>
 80127c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80127c6:	d205      	bcs.n	80127d4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80127c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127ca:	b29a      	uxth	r2, r3
 80127cc:	697b      	ldr	r3, [r7, #20]
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	60da      	str	r2, [r3, #12]
 80127d2:	e002      	b.n	80127da <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80127d4:	2301      	movs	r3, #1
 80127d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80127da:	697b      	ldr	r3, [r7, #20]
 80127dc:	2201      	movs	r2, #1
 80127de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80127e2:	697b      	ldr	r3, [r7, #20]
 80127e4:	2201      	movs	r2, #1
 80127e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80127ea:	697b      	ldr	r3, [r7, #20]
 80127ec:	2200      	movs	r2, #0
 80127ee:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80127f0:	697b      	ldr	r3, [r7, #20]
 80127f2:	2200      	movs	r2, #0
 80127f4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80127f6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80127fa:	4618      	mov	r0, r3
 80127fc:	3748      	adds	r7, #72	; 0x48
 80127fe:	46bd      	mov	sp, r7
 8012800:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012804:	03d09000 	.word	0x03d09000
 8012808:	003d0900 	.word	0x003d0900
 801280c:	0801ff8c 	.word	0x0801ff8c

08012810 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012810:	b480      	push	{r7}
 8012812:	b083      	sub	sp, #12
 8012814:	af00      	add	r7, sp, #0
 8012816:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801281c:	f003 0301 	and.w	r3, r3, #1
 8012820:	2b00      	cmp	r3, #0
 8012822:	d00a      	beq.n	801283a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	685b      	ldr	r3, [r3, #4]
 801282a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	430a      	orrs	r2, r1
 8012838:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801283e:	f003 0302 	and.w	r3, r3, #2
 8012842:	2b00      	cmp	r3, #0
 8012844:	d00a      	beq.n	801285c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	685b      	ldr	r3, [r3, #4]
 801284c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	430a      	orrs	r2, r1
 801285a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012860:	f003 0304 	and.w	r3, r3, #4
 8012864:	2b00      	cmp	r3, #0
 8012866:	d00a      	beq.n	801287e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	685b      	ldr	r3, [r3, #4]
 801286e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	430a      	orrs	r2, r1
 801287c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012882:	f003 0308 	and.w	r3, r3, #8
 8012886:	2b00      	cmp	r3, #0
 8012888:	d00a      	beq.n	80128a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	685b      	ldr	r3, [r3, #4]
 8012890:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	430a      	orrs	r2, r1
 801289e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128a4:	f003 0310 	and.w	r3, r3, #16
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d00a      	beq.n	80128c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	689b      	ldr	r3, [r3, #8]
 80128b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	430a      	orrs	r2, r1
 80128c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128c6:	f003 0320 	and.w	r3, r3, #32
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d00a      	beq.n	80128e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	689b      	ldr	r3, [r3, #8]
 80128d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	430a      	orrs	r2, r1
 80128e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d01a      	beq.n	8012926 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	685b      	ldr	r3, [r3, #4]
 80128f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	430a      	orrs	r2, r1
 8012904:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801290a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801290e:	d10a      	bne.n	8012926 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	685b      	ldr	r3, [r3, #4]
 8012916:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	430a      	orrs	r2, r1
 8012924:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801292a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801292e:	2b00      	cmp	r3, #0
 8012930:	d00a      	beq.n	8012948 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	685b      	ldr	r3, [r3, #4]
 8012938:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	430a      	orrs	r2, r1
 8012946:	605a      	str	r2, [r3, #4]
  }
}
 8012948:	bf00      	nop
 801294a:	370c      	adds	r7, #12
 801294c:	46bd      	mov	sp, r7
 801294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012952:	4770      	bx	lr

08012954 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012954:	b580      	push	{r7, lr}
 8012956:	b098      	sub	sp, #96	; 0x60
 8012958:	af02      	add	r7, sp, #8
 801295a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	2200      	movs	r2, #0
 8012960:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012964:	f7f1 fbd6 	bl	8004114 <HAL_GetTick>
 8012968:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	f003 0308 	and.w	r3, r3, #8
 8012974:	2b08      	cmp	r3, #8
 8012976:	d12f      	bne.n	80129d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012978:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801297c:	9300      	str	r3, [sp, #0]
 801297e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012980:	2200      	movs	r2, #0
 8012982:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012986:	6878      	ldr	r0, [r7, #4]
 8012988:	f000 f88e 	bl	8012aa8 <UART_WaitOnFlagUntilTimeout>
 801298c:	4603      	mov	r3, r0
 801298e:	2b00      	cmp	r3, #0
 8012990:	d022      	beq.n	80129d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801299a:	e853 3f00 	ldrex	r3, [r3]
 801299e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80129a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80129a6:	653b      	str	r3, [r7, #80]	; 0x50
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	461a      	mov	r2, r3
 80129ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129b0:	647b      	str	r3, [r7, #68]	; 0x44
 80129b2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80129b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80129b8:	e841 2300 	strex	r3, r2, [r1]
 80129bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80129be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d1e6      	bne.n	8012992 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	2220      	movs	r2, #32
 80129c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	2200      	movs	r2, #0
 80129d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80129d4:	2303      	movs	r3, #3
 80129d6:	e063      	b.n	8012aa0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	f003 0304 	and.w	r3, r3, #4
 80129e2:	2b04      	cmp	r3, #4
 80129e4:	d149      	bne.n	8012a7a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80129e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80129ea:	9300      	str	r3, [sp, #0]
 80129ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80129ee:	2200      	movs	r2, #0
 80129f0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80129f4:	6878      	ldr	r0, [r7, #4]
 80129f6:	f000 f857 	bl	8012aa8 <UART_WaitOnFlagUntilTimeout>
 80129fa:	4603      	mov	r3, r0
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d03c      	beq.n	8012a7a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a08:	e853 3f00 	ldrex	r3, [r3]
 8012a0c:	623b      	str	r3, [r7, #32]
   return(result);
 8012a0e:	6a3b      	ldr	r3, [r7, #32]
 8012a10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012a14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	461a      	mov	r2, r3
 8012a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a1e:	633b      	str	r3, [r7, #48]	; 0x30
 8012a20:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012a24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012a26:	e841 2300 	strex	r3, r2, [r1]
 8012a2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d1e6      	bne.n	8012a00 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	3308      	adds	r3, #8
 8012a38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a3a:	693b      	ldr	r3, [r7, #16]
 8012a3c:	e853 3f00 	ldrex	r3, [r3]
 8012a40:	60fb      	str	r3, [r7, #12]
   return(result);
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	f023 0301 	bic.w	r3, r3, #1
 8012a48:	64bb      	str	r3, [r7, #72]	; 0x48
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	3308      	adds	r3, #8
 8012a50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012a52:	61fa      	str	r2, [r7, #28]
 8012a54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a56:	69b9      	ldr	r1, [r7, #24]
 8012a58:	69fa      	ldr	r2, [r7, #28]
 8012a5a:	e841 2300 	strex	r3, r2, [r1]
 8012a5e:	617b      	str	r3, [r7, #20]
   return(result);
 8012a60:	697b      	ldr	r3, [r7, #20]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d1e5      	bne.n	8012a32 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	2220      	movs	r2, #32
 8012a6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	2200      	movs	r2, #0
 8012a72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012a76:	2303      	movs	r3, #3
 8012a78:	e012      	b.n	8012aa0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	2220      	movs	r2, #32
 8012a7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	2220      	movs	r2, #32
 8012a86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	2200      	movs	r2, #0
 8012a8e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	2200      	movs	r2, #0
 8012a94:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	2200      	movs	r2, #0
 8012a9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012a9e:	2300      	movs	r3, #0
}
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	3758      	adds	r7, #88	; 0x58
 8012aa4:	46bd      	mov	sp, r7
 8012aa6:	bd80      	pop	{r7, pc}

08012aa8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	b084      	sub	sp, #16
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	60f8      	str	r0, [r7, #12]
 8012ab0:	60b9      	str	r1, [r7, #8]
 8012ab2:	603b      	str	r3, [r7, #0]
 8012ab4:	4613      	mov	r3, r2
 8012ab6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012ab8:	e049      	b.n	8012b4e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012aba:	69bb      	ldr	r3, [r7, #24]
 8012abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ac0:	d045      	beq.n	8012b4e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012ac2:	f7f1 fb27 	bl	8004114 <HAL_GetTick>
 8012ac6:	4602      	mov	r2, r0
 8012ac8:	683b      	ldr	r3, [r7, #0]
 8012aca:	1ad3      	subs	r3, r2, r3
 8012acc:	69ba      	ldr	r2, [r7, #24]
 8012ace:	429a      	cmp	r2, r3
 8012ad0:	d302      	bcc.n	8012ad8 <UART_WaitOnFlagUntilTimeout+0x30>
 8012ad2:	69bb      	ldr	r3, [r7, #24]
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d101      	bne.n	8012adc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8012ad8:	2303      	movs	r3, #3
 8012ada:	e048      	b.n	8012b6e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	f003 0304 	and.w	r3, r3, #4
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d031      	beq.n	8012b4e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	69db      	ldr	r3, [r3, #28]
 8012af0:	f003 0308 	and.w	r3, r3, #8
 8012af4:	2b08      	cmp	r3, #8
 8012af6:	d110      	bne.n	8012b1a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	2208      	movs	r2, #8
 8012afe:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8012b00:	68f8      	ldr	r0, [r7, #12]
 8012b02:	f000 f839 	bl	8012b78 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	2208      	movs	r2, #8
 8012b0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	2200      	movs	r2, #0
 8012b12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8012b16:	2301      	movs	r3, #1
 8012b18:	e029      	b.n	8012b6e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	69db      	ldr	r3, [r3, #28]
 8012b20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012b24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012b28:	d111      	bne.n	8012b4e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012b32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012b34:	68f8      	ldr	r0, [r7, #12]
 8012b36:	f000 f81f 	bl	8012b78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	2220      	movs	r2, #32
 8012b3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	2200      	movs	r2, #0
 8012b46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8012b4a:	2303      	movs	r3, #3
 8012b4c:	e00f      	b.n	8012b6e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	69da      	ldr	r2, [r3, #28]
 8012b54:	68bb      	ldr	r3, [r7, #8]
 8012b56:	4013      	ands	r3, r2
 8012b58:	68ba      	ldr	r2, [r7, #8]
 8012b5a:	429a      	cmp	r2, r3
 8012b5c:	bf0c      	ite	eq
 8012b5e:	2301      	moveq	r3, #1
 8012b60:	2300      	movne	r3, #0
 8012b62:	b2db      	uxtb	r3, r3
 8012b64:	461a      	mov	r2, r3
 8012b66:	79fb      	ldrb	r3, [r7, #7]
 8012b68:	429a      	cmp	r2, r3
 8012b6a:	d0a6      	beq.n	8012aba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012b6c:	2300      	movs	r3, #0
}
 8012b6e:	4618      	mov	r0, r3
 8012b70:	3710      	adds	r7, #16
 8012b72:	46bd      	mov	sp, r7
 8012b74:	bd80      	pop	{r7, pc}
	...

08012b78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012b78:	b480      	push	{r7}
 8012b7a:	b095      	sub	sp, #84	; 0x54
 8012b7c:	af00      	add	r7, sp, #0
 8012b7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b88:	e853 3f00 	ldrex	r3, [r3]
 8012b8c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012b94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	461a      	mov	r2, r3
 8012b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b9e:	643b      	str	r3, [r7, #64]	; 0x40
 8012ba0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ba2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012ba4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012ba6:	e841 2300 	strex	r3, r2, [r1]
 8012baa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d1e6      	bne.n	8012b80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	3308      	adds	r3, #8
 8012bb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012bba:	6a3b      	ldr	r3, [r7, #32]
 8012bbc:	e853 3f00 	ldrex	r3, [r3]
 8012bc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8012bc2:	69fa      	ldr	r2, [r7, #28]
 8012bc4:	4b1e      	ldr	r3, [pc, #120]	; (8012c40 <UART_EndRxTransfer+0xc8>)
 8012bc6:	4013      	ands	r3, r2
 8012bc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	3308      	adds	r3, #8
 8012bd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012bd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012bd4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012bd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012bd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012bda:	e841 2300 	strex	r3, r2, [r1]
 8012bde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d1e5      	bne.n	8012bb2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012bea:	2b01      	cmp	r3, #1
 8012bec:	d118      	bne.n	8012c20 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	e853 3f00 	ldrex	r3, [r3]
 8012bfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8012bfc:	68bb      	ldr	r3, [r7, #8]
 8012bfe:	f023 0310 	bic.w	r3, r3, #16
 8012c02:	647b      	str	r3, [r7, #68]	; 0x44
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	461a      	mov	r2, r3
 8012c0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012c0c:	61bb      	str	r3, [r7, #24]
 8012c0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c10:	6979      	ldr	r1, [r7, #20]
 8012c12:	69ba      	ldr	r2, [r7, #24]
 8012c14:	e841 2300 	strex	r3, r2, [r1]
 8012c18:	613b      	str	r3, [r7, #16]
   return(result);
 8012c1a:	693b      	ldr	r3, [r7, #16]
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d1e6      	bne.n	8012bee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	2220      	movs	r2, #32
 8012c24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	2200      	movs	r2, #0
 8012c2c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	2200      	movs	r2, #0
 8012c32:	675a      	str	r2, [r3, #116]	; 0x74
}
 8012c34:	bf00      	nop
 8012c36:	3754      	adds	r7, #84	; 0x54
 8012c38:	46bd      	mov	sp, r7
 8012c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c3e:	4770      	bx	lr
 8012c40:	effffffe 	.word	0xeffffffe

08012c44 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012c44:	b480      	push	{r7}
 8012c46:	b085      	sub	sp, #20
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012c52:	2b01      	cmp	r3, #1
 8012c54:	d101      	bne.n	8012c5a <HAL_UARTEx_DisableFifoMode+0x16>
 8012c56:	2302      	movs	r3, #2
 8012c58:	e027      	b.n	8012caa <HAL_UARTEx_DisableFifoMode+0x66>
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	2201      	movs	r2, #1
 8012c5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	2224      	movs	r2, #36	; 0x24
 8012c66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	681a      	ldr	r2, [r3, #0]
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	f022 0201 	bic.w	r2, r2, #1
 8012c80:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012c88:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	2200      	movs	r2, #0
 8012c8e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	68fa      	ldr	r2, [r7, #12]
 8012c96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	2220      	movs	r2, #32
 8012c9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	2200      	movs	r2, #0
 8012ca4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012ca8:	2300      	movs	r3, #0
}
 8012caa:	4618      	mov	r0, r3
 8012cac:	3714      	adds	r7, #20
 8012cae:	46bd      	mov	sp, r7
 8012cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb4:	4770      	bx	lr

08012cb6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012cb6:	b580      	push	{r7, lr}
 8012cb8:	b084      	sub	sp, #16
 8012cba:	af00      	add	r7, sp, #0
 8012cbc:	6078      	str	r0, [r7, #4]
 8012cbe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012cc6:	2b01      	cmp	r3, #1
 8012cc8:	d101      	bne.n	8012cce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012cca:	2302      	movs	r3, #2
 8012ccc:	e02d      	b.n	8012d2a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	2201      	movs	r2, #1
 8012cd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	2224      	movs	r2, #36	; 0x24
 8012cda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	681a      	ldr	r2, [r3, #0]
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	f022 0201 	bic.w	r2, r2, #1
 8012cf4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	689b      	ldr	r3, [r3, #8]
 8012cfc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	683a      	ldr	r2, [r7, #0]
 8012d06:	430a      	orrs	r2, r1
 8012d08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012d0a:	6878      	ldr	r0, [r7, #4]
 8012d0c:	f000 f850 	bl	8012db0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	68fa      	ldr	r2, [r7, #12]
 8012d16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	2220      	movs	r2, #32
 8012d1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	2200      	movs	r2, #0
 8012d24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012d28:	2300      	movs	r3, #0
}
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	3710      	adds	r7, #16
 8012d2e:	46bd      	mov	sp, r7
 8012d30:	bd80      	pop	{r7, pc}

08012d32 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012d32:	b580      	push	{r7, lr}
 8012d34:	b084      	sub	sp, #16
 8012d36:	af00      	add	r7, sp, #0
 8012d38:	6078      	str	r0, [r7, #4]
 8012d3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012d42:	2b01      	cmp	r3, #1
 8012d44:	d101      	bne.n	8012d4a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012d46:	2302      	movs	r3, #2
 8012d48:	e02d      	b.n	8012da6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	2201      	movs	r2, #1
 8012d4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	2224      	movs	r2, #36	; 0x24
 8012d56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	681b      	ldr	r3, [r3, #0]
 8012d66:	681a      	ldr	r2, [r3, #0]
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	f022 0201 	bic.w	r2, r2, #1
 8012d70:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	689b      	ldr	r3, [r3, #8]
 8012d78:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	683a      	ldr	r2, [r7, #0]
 8012d82:	430a      	orrs	r2, r1
 8012d84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012d86:	6878      	ldr	r0, [r7, #4]
 8012d88:	f000 f812 	bl	8012db0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	68fa      	ldr	r2, [r7, #12]
 8012d92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	2220      	movs	r2, #32
 8012d98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	2200      	movs	r2, #0
 8012da0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012da4:	2300      	movs	r3, #0
}
 8012da6:	4618      	mov	r0, r3
 8012da8:	3710      	adds	r7, #16
 8012daa:	46bd      	mov	sp, r7
 8012dac:	bd80      	pop	{r7, pc}
	...

08012db0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012db0:	b480      	push	{r7}
 8012db2:	b085      	sub	sp, #20
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d108      	bne.n	8012dd2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	2201      	movs	r2, #1
 8012dc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	2201      	movs	r2, #1
 8012dcc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012dd0:	e031      	b.n	8012e36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012dd2:	2310      	movs	r3, #16
 8012dd4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012dd6:	2310      	movs	r3, #16
 8012dd8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	689b      	ldr	r3, [r3, #8]
 8012de0:	0e5b      	lsrs	r3, r3, #25
 8012de2:	b2db      	uxtb	r3, r3
 8012de4:	f003 0307 	and.w	r3, r3, #7
 8012de8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	689b      	ldr	r3, [r3, #8]
 8012df0:	0f5b      	lsrs	r3, r3, #29
 8012df2:	b2db      	uxtb	r3, r3
 8012df4:	f003 0307 	and.w	r3, r3, #7
 8012df8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012dfa:	7bbb      	ldrb	r3, [r7, #14]
 8012dfc:	7b3a      	ldrb	r2, [r7, #12]
 8012dfe:	4911      	ldr	r1, [pc, #68]	; (8012e44 <UARTEx_SetNbDataToProcess+0x94>)
 8012e00:	5c8a      	ldrb	r2, [r1, r2]
 8012e02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012e06:	7b3a      	ldrb	r2, [r7, #12]
 8012e08:	490f      	ldr	r1, [pc, #60]	; (8012e48 <UARTEx_SetNbDataToProcess+0x98>)
 8012e0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012e0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8012e10:	b29a      	uxth	r2, r3
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012e18:	7bfb      	ldrb	r3, [r7, #15]
 8012e1a:	7b7a      	ldrb	r2, [r7, #13]
 8012e1c:	4909      	ldr	r1, [pc, #36]	; (8012e44 <UARTEx_SetNbDataToProcess+0x94>)
 8012e1e:	5c8a      	ldrb	r2, [r1, r2]
 8012e20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012e24:	7b7a      	ldrb	r2, [r7, #13]
 8012e26:	4908      	ldr	r1, [pc, #32]	; (8012e48 <UARTEx_SetNbDataToProcess+0x98>)
 8012e28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012e2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8012e2e:	b29a      	uxth	r2, r3
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012e36:	bf00      	nop
 8012e38:	3714      	adds	r7, #20
 8012e3a:	46bd      	mov	sp, r7
 8012e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e40:	4770      	bx	lr
 8012e42:	bf00      	nop
 8012e44:	0801ffa4 	.word	0x0801ffa4
 8012e48:	0801ffac 	.word	0x0801ffac

08012e4c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8012e4c:	b084      	sub	sp, #16
 8012e4e:	b480      	push	{r7}
 8012e50:	b085      	sub	sp, #20
 8012e52:	af00      	add	r7, sp, #0
 8012e54:	6078      	str	r0, [r7, #4]
 8012e56:	f107 001c 	add.w	r0, r7, #28
 8012e5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8012e5e:	2300      	movs	r3, #0
 8012e60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8012e62:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8012e64:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8012e66:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8012e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8012e6a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8012e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8012e6e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8012e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8012e72:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8012e74:	68fa      	ldr	r2, [r7, #12]
 8012e76:	4313      	orrs	r3, r2
 8012e78:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	685a      	ldr	r2, [r3, #4]
 8012e7e:	4b07      	ldr	r3, [pc, #28]	; (8012e9c <SDMMC_Init+0x50>)
 8012e80:	4013      	ands	r3, r2
 8012e82:	68fa      	ldr	r2, [r7, #12]
 8012e84:	431a      	orrs	r2, r3
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8012e8a:	2300      	movs	r3, #0
}
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	3714      	adds	r7, #20
 8012e90:	46bd      	mov	sp, r7
 8012e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e96:	b004      	add	sp, #16
 8012e98:	4770      	bx	lr
 8012e9a:	bf00      	nop
 8012e9c:	ffc02c00 	.word	0xffc02c00

08012ea0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8012ea0:	b480      	push	{r7}
 8012ea2:	b083      	sub	sp, #12
 8012ea4:	af00      	add	r7, sp, #0
 8012ea6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8012eae:	4618      	mov	r0, r3
 8012eb0:	370c      	adds	r7, #12
 8012eb2:	46bd      	mov	sp, r7
 8012eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb8:	4770      	bx	lr

08012eba <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8012eba:	b480      	push	{r7}
 8012ebc:	b083      	sub	sp, #12
 8012ebe:	af00      	add	r7, sp, #0
 8012ec0:	6078      	str	r0, [r7, #4]
 8012ec2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8012ec4:	683b      	ldr	r3, [r7, #0]
 8012ec6:	681a      	ldr	r2, [r3, #0]
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8012ece:	2300      	movs	r3, #0
}
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	370c      	adds	r7, #12
 8012ed4:	46bd      	mov	sp, r7
 8012ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eda:	4770      	bx	lr

08012edc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8012edc:	b480      	push	{r7}
 8012ede:	b083      	sub	sp, #12
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	f043 0203 	orr.w	r2, r3, #3
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8012ef0:	2300      	movs	r3, #0
}
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	370c      	adds	r7, #12
 8012ef6:	46bd      	mov	sp, r7
 8012ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012efc:	4770      	bx	lr

08012efe <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8012efe:	b480      	push	{r7}
 8012f00:	b083      	sub	sp, #12
 8012f02:	af00      	add	r7, sp, #0
 8012f04:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	f003 0303 	and.w	r3, r3, #3
}
 8012f0e:	4618      	mov	r0, r3
 8012f10:	370c      	adds	r7, #12
 8012f12:	46bd      	mov	sp, r7
 8012f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f18:	4770      	bx	lr
	...

08012f1c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8012f1c:	b480      	push	{r7}
 8012f1e:	b085      	sub	sp, #20
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	6078      	str	r0, [r7, #4]
 8012f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012f26:	2300      	movs	r3, #0
 8012f28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8012f2a:	683b      	ldr	r3, [r7, #0]
 8012f2c:	681a      	ldr	r2, [r3, #0]
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012f32:	683b      	ldr	r3, [r7, #0]
 8012f34:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8012f36:	683b      	ldr	r3, [r7, #0]
 8012f38:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012f3a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8012f3c:	683b      	ldr	r3, [r7, #0]
 8012f3e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8012f40:	431a      	orrs	r2, r3
                       Command->CPSM);
 8012f42:	683b      	ldr	r3, [r7, #0]
 8012f44:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8012f46:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012f48:	68fa      	ldr	r2, [r7, #12]
 8012f4a:	4313      	orrs	r3, r2
 8012f4c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	68da      	ldr	r2, [r3, #12]
 8012f52:	4b06      	ldr	r3, [pc, #24]	; (8012f6c <SDMMC_SendCommand+0x50>)
 8012f54:	4013      	ands	r3, r2
 8012f56:	68fa      	ldr	r2, [r7, #12]
 8012f58:	431a      	orrs	r2, r3
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012f5e:	2300      	movs	r3, #0
}
 8012f60:	4618      	mov	r0, r3
 8012f62:	3714      	adds	r7, #20
 8012f64:	46bd      	mov	sp, r7
 8012f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f6a:	4770      	bx	lr
 8012f6c:	fffee0c0 	.word	0xfffee0c0

08012f70 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8012f70:	b480      	push	{r7}
 8012f72:	b083      	sub	sp, #12
 8012f74:	af00      	add	r7, sp, #0
 8012f76:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	691b      	ldr	r3, [r3, #16]
 8012f7c:	b2db      	uxtb	r3, r3
}
 8012f7e:	4618      	mov	r0, r3
 8012f80:	370c      	adds	r7, #12
 8012f82:	46bd      	mov	sp, r7
 8012f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f88:	4770      	bx	lr

08012f8a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8012f8a:	b480      	push	{r7}
 8012f8c:	b085      	sub	sp, #20
 8012f8e:	af00      	add	r7, sp, #0
 8012f90:	6078      	str	r0, [r7, #4]
 8012f92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	3314      	adds	r3, #20
 8012f98:	461a      	mov	r2, r3
 8012f9a:	683b      	ldr	r3, [r7, #0]
 8012f9c:	4413      	add	r3, r2
 8012f9e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	681b      	ldr	r3, [r3, #0]
}
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	3714      	adds	r7, #20
 8012fa8:	46bd      	mov	sp, r7
 8012faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fae:	4770      	bx	lr

08012fb0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8012fb0:	b480      	push	{r7}
 8012fb2:	b085      	sub	sp, #20
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	6078      	str	r0, [r7, #4]
 8012fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012fba:	2300      	movs	r3, #0
 8012fbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8012fbe:	683b      	ldr	r3, [r7, #0]
 8012fc0:	681a      	ldr	r2, [r3, #0]
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8012fc6:	683b      	ldr	r3, [r7, #0]
 8012fc8:	685a      	ldr	r2, [r3, #4]
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012fce:	683b      	ldr	r3, [r7, #0]
 8012fd0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8012fd2:	683b      	ldr	r3, [r7, #0]
 8012fd4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012fd6:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8012fd8:	683b      	ldr	r3, [r7, #0]
 8012fda:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8012fdc:	431a      	orrs	r2, r3
                       Data->DPSM);
 8012fde:	683b      	ldr	r3, [r7, #0]
 8012fe0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8012fe2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012fe4:	68fa      	ldr	r2, [r7, #12]
 8012fe6:	4313      	orrs	r3, r2
 8012fe8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	431a      	orrs	r2, r3
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8012ffa:	2300      	movs	r3, #0

}
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	3714      	adds	r7, #20
 8013000:	46bd      	mov	sp, r7
 8013002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013006:	4770      	bx	lr

08013008 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8013008:	b580      	push	{r7, lr}
 801300a:	b088      	sub	sp, #32
 801300c:	af00      	add	r7, sp, #0
 801300e:	6078      	str	r0, [r7, #4]
 8013010:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8013012:	683b      	ldr	r3, [r7, #0]
 8013014:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8013016:	2310      	movs	r3, #16
 8013018:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801301a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801301e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013020:	2300      	movs	r3, #0
 8013022:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013024:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013028:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801302a:	f107 0308 	add.w	r3, r7, #8
 801302e:	4619      	mov	r1, r3
 8013030:	6878      	ldr	r0, [r7, #4]
 8013032:	f7ff ff73 	bl	8012f1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8013036:	f241 3288 	movw	r2, #5000	; 0x1388
 801303a:	2110      	movs	r1, #16
 801303c:	6878      	ldr	r0, [r7, #4]
 801303e:	f000 fa5f 	bl	8013500 <SDMMC_GetCmdResp1>
 8013042:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013044:	69fb      	ldr	r3, [r7, #28]
}
 8013046:	4618      	mov	r0, r3
 8013048:	3720      	adds	r7, #32
 801304a:	46bd      	mov	sp, r7
 801304c:	bd80      	pop	{r7, pc}

0801304e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801304e:	b580      	push	{r7, lr}
 8013050:	b088      	sub	sp, #32
 8013052:	af00      	add	r7, sp, #0
 8013054:	6078      	str	r0, [r7, #4]
 8013056:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8013058:	683b      	ldr	r3, [r7, #0]
 801305a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801305c:	2311      	movs	r3, #17
 801305e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013060:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013064:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013066:	2300      	movs	r3, #0
 8013068:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801306a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801306e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013070:	f107 0308 	add.w	r3, r7, #8
 8013074:	4619      	mov	r1, r3
 8013076:	6878      	ldr	r0, [r7, #4]
 8013078:	f7ff ff50 	bl	8012f1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801307c:	f241 3288 	movw	r2, #5000	; 0x1388
 8013080:	2111      	movs	r1, #17
 8013082:	6878      	ldr	r0, [r7, #4]
 8013084:	f000 fa3c 	bl	8013500 <SDMMC_GetCmdResp1>
 8013088:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801308a:	69fb      	ldr	r3, [r7, #28]
}
 801308c:	4618      	mov	r0, r3
 801308e:	3720      	adds	r7, #32
 8013090:	46bd      	mov	sp, r7
 8013092:	bd80      	pop	{r7, pc}

08013094 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8013094:	b580      	push	{r7, lr}
 8013096:	b088      	sub	sp, #32
 8013098:	af00      	add	r7, sp, #0
 801309a:	6078      	str	r0, [r7, #4]
 801309c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801309e:	683b      	ldr	r3, [r7, #0]
 80130a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80130a2:	2312      	movs	r3, #18
 80130a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80130a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80130aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80130ac:	2300      	movs	r3, #0
 80130ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80130b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80130b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80130b6:	f107 0308 	add.w	r3, r7, #8
 80130ba:	4619      	mov	r1, r3
 80130bc:	6878      	ldr	r0, [r7, #4]
 80130be:	f7ff ff2d 	bl	8012f1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80130c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80130c6:	2112      	movs	r1, #18
 80130c8:	6878      	ldr	r0, [r7, #4]
 80130ca:	f000 fa19 	bl	8013500 <SDMMC_GetCmdResp1>
 80130ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80130d0:	69fb      	ldr	r3, [r7, #28]
}
 80130d2:	4618      	mov	r0, r3
 80130d4:	3720      	adds	r7, #32
 80130d6:	46bd      	mov	sp, r7
 80130d8:	bd80      	pop	{r7, pc}

080130da <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80130da:	b580      	push	{r7, lr}
 80130dc:	b088      	sub	sp, #32
 80130de:	af00      	add	r7, sp, #0
 80130e0:	6078      	str	r0, [r7, #4]
 80130e2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80130e4:	683b      	ldr	r3, [r7, #0]
 80130e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80130e8:	2318      	movs	r3, #24
 80130ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80130ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80130f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80130f2:	2300      	movs	r3, #0
 80130f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80130f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80130fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80130fc:	f107 0308 	add.w	r3, r7, #8
 8013100:	4619      	mov	r1, r3
 8013102:	6878      	ldr	r0, [r7, #4]
 8013104:	f7ff ff0a 	bl	8012f1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8013108:	f241 3288 	movw	r2, #5000	; 0x1388
 801310c:	2118      	movs	r1, #24
 801310e:	6878      	ldr	r0, [r7, #4]
 8013110:	f000 f9f6 	bl	8013500 <SDMMC_GetCmdResp1>
 8013114:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013116:	69fb      	ldr	r3, [r7, #28]
}
 8013118:	4618      	mov	r0, r3
 801311a:	3720      	adds	r7, #32
 801311c:	46bd      	mov	sp, r7
 801311e:	bd80      	pop	{r7, pc}

08013120 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8013120:	b580      	push	{r7, lr}
 8013122:	b088      	sub	sp, #32
 8013124:	af00      	add	r7, sp, #0
 8013126:	6078      	str	r0, [r7, #4]
 8013128:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801312a:	683b      	ldr	r3, [r7, #0]
 801312c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801312e:	2319      	movs	r3, #25
 8013130:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013132:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013136:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013138:	2300      	movs	r3, #0
 801313a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801313c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013140:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013142:	f107 0308 	add.w	r3, r7, #8
 8013146:	4619      	mov	r1, r3
 8013148:	6878      	ldr	r0, [r7, #4]
 801314a:	f7ff fee7 	bl	8012f1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801314e:	f241 3288 	movw	r2, #5000	; 0x1388
 8013152:	2119      	movs	r1, #25
 8013154:	6878      	ldr	r0, [r7, #4]
 8013156:	f000 f9d3 	bl	8013500 <SDMMC_GetCmdResp1>
 801315a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801315c:	69fb      	ldr	r3, [r7, #28]
}
 801315e:	4618      	mov	r0, r3
 8013160:	3720      	adds	r7, #32
 8013162:	46bd      	mov	sp, r7
 8013164:	bd80      	pop	{r7, pc}
	...

08013168 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8013168:	b580      	push	{r7, lr}
 801316a:	b088      	sub	sp, #32
 801316c:	af00      	add	r7, sp, #0
 801316e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8013170:	2300      	movs	r3, #0
 8013172:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8013174:	230c      	movs	r3, #12
 8013176:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013178:	f44f 7380 	mov.w	r3, #256	; 0x100
 801317c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801317e:	2300      	movs	r3, #0
 8013180:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013182:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013186:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	68db      	ldr	r3, [r3, #12]
 801318c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	68db      	ldr	r3, [r3, #12]
 8013198:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80131a0:	f107 0308 	add.w	r3, r7, #8
 80131a4:	4619      	mov	r1, r3
 80131a6:	6878      	ldr	r0, [r7, #4]
 80131a8:	f7ff feb8 	bl	8012f1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80131ac:	4a0b      	ldr	r2, [pc, #44]	; (80131dc <SDMMC_CmdStopTransfer+0x74>)
 80131ae:	210c      	movs	r1, #12
 80131b0:	6878      	ldr	r0, [r7, #4]
 80131b2:	f000 f9a5 	bl	8013500 <SDMMC_GetCmdResp1>
 80131b6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	68db      	ldr	r3, [r3, #12]
 80131bc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80131c4:	69fb      	ldr	r3, [r7, #28]
 80131c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80131ca:	d101      	bne.n	80131d0 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80131cc:	2300      	movs	r3, #0
 80131ce:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80131d0:	69fb      	ldr	r3, [r7, #28]
}
 80131d2:	4618      	mov	r0, r3
 80131d4:	3720      	adds	r7, #32
 80131d6:	46bd      	mov	sp, r7
 80131d8:	bd80      	pop	{r7, pc}
 80131da:	bf00      	nop
 80131dc:	05f5e100 	.word	0x05f5e100

080131e0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80131e0:	b580      	push	{r7, lr}
 80131e2:	b088      	sub	sp, #32
 80131e4:	af00      	add	r7, sp, #0
 80131e6:	6078      	str	r0, [r7, #4]
 80131e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80131ea:	683b      	ldr	r3, [r7, #0]
 80131ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80131ee:	2307      	movs	r3, #7
 80131f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80131f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80131f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80131f8:	2300      	movs	r3, #0
 80131fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80131fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013200:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013202:	f107 0308 	add.w	r3, r7, #8
 8013206:	4619      	mov	r1, r3
 8013208:	6878      	ldr	r0, [r7, #4]
 801320a:	f7ff fe87 	bl	8012f1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 801320e:	f241 3288 	movw	r2, #5000	; 0x1388
 8013212:	2107      	movs	r1, #7
 8013214:	6878      	ldr	r0, [r7, #4]
 8013216:	f000 f973 	bl	8013500 <SDMMC_GetCmdResp1>
 801321a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801321c:	69fb      	ldr	r3, [r7, #28]
}
 801321e:	4618      	mov	r0, r3
 8013220:	3720      	adds	r7, #32
 8013222:	46bd      	mov	sp, r7
 8013224:	bd80      	pop	{r7, pc}

08013226 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8013226:	b580      	push	{r7, lr}
 8013228:	b088      	sub	sp, #32
 801322a:	af00      	add	r7, sp, #0
 801322c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801322e:	2300      	movs	r3, #0
 8013230:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8013232:	2300      	movs	r3, #0
 8013234:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8013236:	2300      	movs	r3, #0
 8013238:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801323a:	2300      	movs	r3, #0
 801323c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801323e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013242:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013244:	f107 0308 	add.w	r3, r7, #8
 8013248:	4619      	mov	r1, r3
 801324a:	6878      	ldr	r0, [r7, #4]
 801324c:	f7ff fe66 	bl	8012f1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8013250:	6878      	ldr	r0, [r7, #4]
 8013252:	f000 fb97 	bl	8013984 <SDMMC_GetCmdError>
 8013256:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013258:	69fb      	ldr	r3, [r7, #28]
}
 801325a:	4618      	mov	r0, r3
 801325c:	3720      	adds	r7, #32
 801325e:	46bd      	mov	sp, r7
 8013260:	bd80      	pop	{r7, pc}

08013262 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8013262:	b580      	push	{r7, lr}
 8013264:	b088      	sub	sp, #32
 8013266:	af00      	add	r7, sp, #0
 8013268:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801326a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801326e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8013270:	2308      	movs	r3, #8
 8013272:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013274:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013278:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801327a:	2300      	movs	r3, #0
 801327c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801327e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013282:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013284:	f107 0308 	add.w	r3, r7, #8
 8013288:	4619      	mov	r1, r3
 801328a:	6878      	ldr	r0, [r7, #4]
 801328c:	f7ff fe46 	bl	8012f1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8013290:	6878      	ldr	r0, [r7, #4]
 8013292:	f000 fb29 	bl	80138e8 <SDMMC_GetCmdResp7>
 8013296:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013298:	69fb      	ldr	r3, [r7, #28]
}
 801329a:	4618      	mov	r0, r3
 801329c:	3720      	adds	r7, #32
 801329e:	46bd      	mov	sp, r7
 80132a0:	bd80      	pop	{r7, pc}

080132a2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80132a2:	b580      	push	{r7, lr}
 80132a4:	b088      	sub	sp, #32
 80132a6:	af00      	add	r7, sp, #0
 80132a8:	6078      	str	r0, [r7, #4]
 80132aa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80132ac:	683b      	ldr	r3, [r7, #0]
 80132ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80132b0:	2337      	movs	r3, #55	; 0x37
 80132b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80132b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80132b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80132ba:	2300      	movs	r3, #0
 80132bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80132be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80132c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80132c4:	f107 0308 	add.w	r3, r7, #8
 80132c8:	4619      	mov	r1, r3
 80132ca:	6878      	ldr	r0, [r7, #4]
 80132cc:	f7ff fe26 	bl	8012f1c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80132d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80132d4:	2137      	movs	r1, #55	; 0x37
 80132d6:	6878      	ldr	r0, [r7, #4]
 80132d8:	f000 f912 	bl	8013500 <SDMMC_GetCmdResp1>
 80132dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80132de:	69fb      	ldr	r3, [r7, #28]
}
 80132e0:	4618      	mov	r0, r3
 80132e2:	3720      	adds	r7, #32
 80132e4:	46bd      	mov	sp, r7
 80132e6:	bd80      	pop	{r7, pc}

080132e8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80132e8:	b580      	push	{r7, lr}
 80132ea:	b088      	sub	sp, #32
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	6078      	str	r0, [r7, #4]
 80132f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80132f2:	683b      	ldr	r3, [r7, #0]
 80132f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80132f6:	2329      	movs	r3, #41	; 0x29
 80132f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80132fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80132fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013300:	2300      	movs	r3, #0
 8013302:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013304:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013308:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801330a:	f107 0308 	add.w	r3, r7, #8
 801330e:	4619      	mov	r1, r3
 8013310:	6878      	ldr	r0, [r7, #4]
 8013312:	f7ff fe03 	bl	8012f1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8013316:	6878      	ldr	r0, [r7, #4]
 8013318:	f000 fa2e 	bl	8013778 <SDMMC_GetCmdResp3>
 801331c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801331e:	69fb      	ldr	r3, [r7, #28]
}
 8013320:	4618      	mov	r0, r3
 8013322:	3720      	adds	r7, #32
 8013324:	46bd      	mov	sp, r7
 8013326:	bd80      	pop	{r7, pc}

08013328 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8013328:	b580      	push	{r7, lr}
 801332a:	b088      	sub	sp, #32
 801332c:	af00      	add	r7, sp, #0
 801332e:	6078      	str	r0, [r7, #4]
 8013330:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8013332:	683b      	ldr	r3, [r7, #0]
 8013334:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8013336:	2306      	movs	r3, #6
 8013338:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801333a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801333e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013340:	2300      	movs	r3, #0
 8013342:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013344:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013348:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801334a:	f107 0308 	add.w	r3, r7, #8
 801334e:	4619      	mov	r1, r3
 8013350:	6878      	ldr	r0, [r7, #4]
 8013352:	f7ff fde3 	bl	8012f1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8013356:	f241 3288 	movw	r2, #5000	; 0x1388
 801335a:	2106      	movs	r1, #6
 801335c:	6878      	ldr	r0, [r7, #4]
 801335e:	f000 f8cf 	bl	8013500 <SDMMC_GetCmdResp1>
 8013362:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013364:	69fb      	ldr	r3, [r7, #28]
}
 8013366:	4618      	mov	r0, r3
 8013368:	3720      	adds	r7, #32
 801336a:	46bd      	mov	sp, r7
 801336c:	bd80      	pop	{r7, pc}

0801336e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801336e:	b580      	push	{r7, lr}
 8013370:	b088      	sub	sp, #32
 8013372:	af00      	add	r7, sp, #0
 8013374:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8013376:	2300      	movs	r3, #0
 8013378:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801337a:	2333      	movs	r3, #51	; 0x33
 801337c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801337e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013382:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013384:	2300      	movs	r3, #0
 8013386:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013388:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801338c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801338e:	f107 0308 	add.w	r3, r7, #8
 8013392:	4619      	mov	r1, r3
 8013394:	6878      	ldr	r0, [r7, #4]
 8013396:	f7ff fdc1 	bl	8012f1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 801339a:	f241 3288 	movw	r2, #5000	; 0x1388
 801339e:	2133      	movs	r1, #51	; 0x33
 80133a0:	6878      	ldr	r0, [r7, #4]
 80133a2:	f000 f8ad 	bl	8013500 <SDMMC_GetCmdResp1>
 80133a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80133a8:	69fb      	ldr	r3, [r7, #28]
}
 80133aa:	4618      	mov	r0, r3
 80133ac:	3720      	adds	r7, #32
 80133ae:	46bd      	mov	sp, r7
 80133b0:	bd80      	pop	{r7, pc}

080133b2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80133b2:	b580      	push	{r7, lr}
 80133b4:	b088      	sub	sp, #32
 80133b6:	af00      	add	r7, sp, #0
 80133b8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80133ba:	2300      	movs	r3, #0
 80133bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80133be:	2302      	movs	r3, #2
 80133c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80133c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80133c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80133c8:	2300      	movs	r3, #0
 80133ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80133cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80133d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80133d2:	f107 0308 	add.w	r3, r7, #8
 80133d6:	4619      	mov	r1, r3
 80133d8:	6878      	ldr	r0, [r7, #4]
 80133da:	f7ff fd9f 	bl	8012f1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80133de:	6878      	ldr	r0, [r7, #4]
 80133e0:	f000 f980 	bl	80136e4 <SDMMC_GetCmdResp2>
 80133e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80133e6:	69fb      	ldr	r3, [r7, #28]
}
 80133e8:	4618      	mov	r0, r3
 80133ea:	3720      	adds	r7, #32
 80133ec:	46bd      	mov	sp, r7
 80133ee:	bd80      	pop	{r7, pc}

080133f0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80133f0:	b580      	push	{r7, lr}
 80133f2:	b088      	sub	sp, #32
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	6078      	str	r0, [r7, #4]
 80133f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80133fa:	683b      	ldr	r3, [r7, #0]
 80133fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80133fe:	2309      	movs	r3, #9
 8013400:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8013402:	f44f 7340 	mov.w	r3, #768	; 0x300
 8013406:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013408:	2300      	movs	r3, #0
 801340a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801340c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013410:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013412:	f107 0308 	add.w	r3, r7, #8
 8013416:	4619      	mov	r1, r3
 8013418:	6878      	ldr	r0, [r7, #4]
 801341a:	f7ff fd7f 	bl	8012f1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801341e:	6878      	ldr	r0, [r7, #4]
 8013420:	f000 f960 	bl	80136e4 <SDMMC_GetCmdResp2>
 8013424:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013426:	69fb      	ldr	r3, [r7, #28]
}
 8013428:	4618      	mov	r0, r3
 801342a:	3720      	adds	r7, #32
 801342c:	46bd      	mov	sp, r7
 801342e:	bd80      	pop	{r7, pc}

08013430 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8013430:	b580      	push	{r7, lr}
 8013432:	b088      	sub	sp, #32
 8013434:	af00      	add	r7, sp, #0
 8013436:	6078      	str	r0, [r7, #4]
 8013438:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801343a:	2300      	movs	r3, #0
 801343c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801343e:	2303      	movs	r3, #3
 8013440:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013442:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013446:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013448:	2300      	movs	r3, #0
 801344a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801344c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013450:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013452:	f107 0308 	add.w	r3, r7, #8
 8013456:	4619      	mov	r1, r3
 8013458:	6878      	ldr	r0, [r7, #4]
 801345a:	f7ff fd5f 	bl	8012f1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801345e:	683a      	ldr	r2, [r7, #0]
 8013460:	2103      	movs	r1, #3
 8013462:	6878      	ldr	r0, [r7, #4]
 8013464:	f000 f9c8 	bl	80137f8 <SDMMC_GetCmdResp6>
 8013468:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801346a:	69fb      	ldr	r3, [r7, #28]
}
 801346c:	4618      	mov	r0, r3
 801346e:	3720      	adds	r7, #32
 8013470:	46bd      	mov	sp, r7
 8013472:	bd80      	pop	{r7, pc}

08013474 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013474:	b580      	push	{r7, lr}
 8013476:	b088      	sub	sp, #32
 8013478:	af00      	add	r7, sp, #0
 801347a:	6078      	str	r0, [r7, #4]
 801347c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801347e:	683b      	ldr	r3, [r7, #0]
 8013480:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8013482:	230d      	movs	r3, #13
 8013484:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013486:	f44f 7380 	mov.w	r3, #256	; 0x100
 801348a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801348c:	2300      	movs	r3, #0
 801348e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013490:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013494:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013496:	f107 0308 	add.w	r3, r7, #8
 801349a:	4619      	mov	r1, r3
 801349c:	6878      	ldr	r0, [r7, #4]
 801349e:	f7ff fd3d 	bl	8012f1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80134a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80134a6:	210d      	movs	r1, #13
 80134a8:	6878      	ldr	r0, [r7, #4]
 80134aa:	f000 f829 	bl	8013500 <SDMMC_GetCmdResp1>
 80134ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80134b0:	69fb      	ldr	r3, [r7, #28]
}
 80134b2:	4618      	mov	r0, r3
 80134b4:	3720      	adds	r7, #32
 80134b6:	46bd      	mov	sp, r7
 80134b8:	bd80      	pop	{r7, pc}

080134ba <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80134ba:	b580      	push	{r7, lr}
 80134bc:	b088      	sub	sp, #32
 80134be:	af00      	add	r7, sp, #0
 80134c0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80134c2:	2300      	movs	r3, #0
 80134c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80134c6:	230d      	movs	r3, #13
 80134c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80134ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80134ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80134d0:	2300      	movs	r3, #0
 80134d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80134d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80134d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80134da:	f107 0308 	add.w	r3, r7, #8
 80134de:	4619      	mov	r1, r3
 80134e0:	6878      	ldr	r0, [r7, #4]
 80134e2:	f7ff fd1b 	bl	8012f1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80134e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80134ea:	210d      	movs	r1, #13
 80134ec:	6878      	ldr	r0, [r7, #4]
 80134ee:	f000 f807 	bl	8013500 <SDMMC_GetCmdResp1>
 80134f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80134f4:	69fb      	ldr	r3, [r7, #28]
}
 80134f6:	4618      	mov	r0, r3
 80134f8:	3720      	adds	r7, #32
 80134fa:	46bd      	mov	sp, r7
 80134fc:	bd80      	pop	{r7, pc}
	...

08013500 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8013500:	b580      	push	{r7, lr}
 8013502:	b088      	sub	sp, #32
 8013504:	af00      	add	r7, sp, #0
 8013506:	60f8      	str	r0, [r7, #12]
 8013508:	460b      	mov	r3, r1
 801350a:	607a      	str	r2, [r7, #4]
 801350c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801350e:	4b70      	ldr	r3, [pc, #448]	; (80136d0 <SDMMC_GetCmdResp1+0x1d0>)
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	4a70      	ldr	r2, [pc, #448]	; (80136d4 <SDMMC_GetCmdResp1+0x1d4>)
 8013514:	fba2 2303 	umull	r2, r3, r2, r3
 8013518:	0a5a      	lsrs	r2, r3, #9
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	fb02 f303 	mul.w	r3, r2, r3
 8013520:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8013522:	69fb      	ldr	r3, [r7, #28]
 8013524:	1e5a      	subs	r2, r3, #1
 8013526:	61fa      	str	r2, [r7, #28]
 8013528:	2b00      	cmp	r3, #0
 801352a:	d102      	bne.n	8013532 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 801352c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013530:	e0c9      	b.n	80136c6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013536:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8013538:	69ba      	ldr	r2, [r7, #24]
 801353a:	4b67      	ldr	r3, [pc, #412]	; (80136d8 <SDMMC_GetCmdResp1+0x1d8>)
 801353c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801353e:	2b00      	cmp	r3, #0
 8013540:	d0ef      	beq.n	8013522 <SDMMC_GetCmdResp1+0x22>
 8013542:	69bb      	ldr	r3, [r7, #24]
 8013544:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013548:	2b00      	cmp	r3, #0
 801354a:	d1ea      	bne.n	8013522 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013550:	f003 0304 	and.w	r3, r3, #4
 8013554:	2b00      	cmp	r3, #0
 8013556:	d004      	beq.n	8013562 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	2204      	movs	r2, #4
 801355c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801355e:	2304      	movs	r3, #4
 8013560:	e0b1      	b.n	80136c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013566:	f003 0301 	and.w	r3, r3, #1
 801356a:	2b00      	cmp	r3, #0
 801356c:	d004      	beq.n	8013578 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	2201      	movs	r2, #1
 8013572:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013574:	2301      	movs	r3, #1
 8013576:	e0a6      	b.n	80136c6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	4a58      	ldr	r2, [pc, #352]	; (80136dc <SDMMC_GetCmdResp1+0x1dc>)
 801357c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801357e:	68f8      	ldr	r0, [r7, #12]
 8013580:	f7ff fcf6 	bl	8012f70 <SDMMC_GetCommandResponse>
 8013584:	4603      	mov	r3, r0
 8013586:	461a      	mov	r2, r3
 8013588:	7afb      	ldrb	r3, [r7, #11]
 801358a:	4293      	cmp	r3, r2
 801358c:	d001      	beq.n	8013592 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801358e:	2301      	movs	r3, #1
 8013590:	e099      	b.n	80136c6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8013592:	2100      	movs	r1, #0
 8013594:	68f8      	ldr	r0, [r7, #12]
 8013596:	f7ff fcf8 	bl	8012f8a <SDMMC_GetResponse>
 801359a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801359c:	697a      	ldr	r2, [r7, #20]
 801359e:	4b50      	ldr	r3, [pc, #320]	; (80136e0 <SDMMC_GetCmdResp1+0x1e0>)
 80135a0:	4013      	ands	r3, r2
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d101      	bne.n	80135aa <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80135a6:	2300      	movs	r3, #0
 80135a8:	e08d      	b.n	80136c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80135aa:	697b      	ldr	r3, [r7, #20]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	da02      	bge.n	80135b6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80135b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80135b4:	e087      	b.n	80136c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80135b6:	697b      	ldr	r3, [r7, #20]
 80135b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d001      	beq.n	80135c4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80135c0:	2340      	movs	r3, #64	; 0x40
 80135c2:	e080      	b.n	80136c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80135c4:	697b      	ldr	r3, [r7, #20]
 80135c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d001      	beq.n	80135d2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80135ce:	2380      	movs	r3, #128	; 0x80
 80135d0:	e079      	b.n	80136c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80135d2:	697b      	ldr	r3, [r7, #20]
 80135d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d002      	beq.n	80135e2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80135dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80135e0:	e071      	b.n	80136c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80135e2:	697b      	ldr	r3, [r7, #20]
 80135e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d002      	beq.n	80135f2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80135ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80135f0:	e069      	b.n	80136c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80135f2:	697b      	ldr	r3, [r7, #20]
 80135f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d002      	beq.n	8013602 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80135fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013600:	e061      	b.n	80136c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8013602:	697b      	ldr	r3, [r7, #20]
 8013604:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013608:	2b00      	cmp	r3, #0
 801360a:	d002      	beq.n	8013612 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801360c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013610:	e059      	b.n	80136c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8013612:	697b      	ldr	r3, [r7, #20]
 8013614:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013618:	2b00      	cmp	r3, #0
 801361a:	d002      	beq.n	8013622 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801361c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013620:	e051      	b.n	80136c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8013622:	697b      	ldr	r3, [r7, #20]
 8013624:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013628:	2b00      	cmp	r3, #0
 801362a:	d002      	beq.n	8013632 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801362c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013630:	e049      	b.n	80136c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8013632:	697b      	ldr	r3, [r7, #20]
 8013634:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013638:	2b00      	cmp	r3, #0
 801363a:	d002      	beq.n	8013642 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801363c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8013640:	e041      	b.n	80136c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8013642:	697b      	ldr	r3, [r7, #20]
 8013644:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013648:	2b00      	cmp	r3, #0
 801364a:	d002      	beq.n	8013652 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 801364c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013650:	e039      	b.n	80136c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8013652:	697b      	ldr	r3, [r7, #20]
 8013654:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8013658:	2b00      	cmp	r3, #0
 801365a:	d002      	beq.n	8013662 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801365c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013660:	e031      	b.n	80136c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8013662:	697b      	ldr	r3, [r7, #20]
 8013664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013668:	2b00      	cmp	r3, #0
 801366a:	d002      	beq.n	8013672 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801366c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8013670:	e029      	b.n	80136c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8013672:	697b      	ldr	r3, [r7, #20]
 8013674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013678:	2b00      	cmp	r3, #0
 801367a:	d002      	beq.n	8013682 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801367c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013680:	e021      	b.n	80136c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8013682:	697b      	ldr	r3, [r7, #20]
 8013684:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013688:	2b00      	cmp	r3, #0
 801368a:	d002      	beq.n	8013692 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801368c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8013690:	e019      	b.n	80136c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8013692:	697b      	ldr	r3, [r7, #20]
 8013694:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013698:	2b00      	cmp	r3, #0
 801369a:	d002      	beq.n	80136a2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801369c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80136a0:	e011      	b.n	80136c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80136a2:	697b      	ldr	r3, [r7, #20]
 80136a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d002      	beq.n	80136b2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80136ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80136b0:	e009      	b.n	80136c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80136b2:	697b      	ldr	r3, [r7, #20]
 80136b4:	f003 0308 	and.w	r3, r3, #8
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d002      	beq.n	80136c2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80136bc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80136c0:	e001      	b.n	80136c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80136c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80136c6:	4618      	mov	r0, r3
 80136c8:	3720      	adds	r7, #32
 80136ca:	46bd      	mov	sp, r7
 80136cc:	bd80      	pop	{r7, pc}
 80136ce:	bf00      	nop
 80136d0:	24000000 	.word	0x24000000
 80136d4:	10624dd3 	.word	0x10624dd3
 80136d8:	00200045 	.word	0x00200045
 80136dc:	002000c5 	.word	0x002000c5
 80136e0:	fdffe008 	.word	0xfdffe008

080136e4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80136e4:	b480      	push	{r7}
 80136e6:	b085      	sub	sp, #20
 80136e8:	af00      	add	r7, sp, #0
 80136ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80136ec:	4b1f      	ldr	r3, [pc, #124]	; (801376c <SDMMC_GetCmdResp2+0x88>)
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	4a1f      	ldr	r2, [pc, #124]	; (8013770 <SDMMC_GetCmdResp2+0x8c>)
 80136f2:	fba2 2303 	umull	r2, r3, r2, r3
 80136f6:	0a5b      	lsrs	r3, r3, #9
 80136f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80136fc:	fb02 f303 	mul.w	r3, r2, r3
 8013700:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	1e5a      	subs	r2, r3, #1
 8013706:	60fa      	str	r2, [r7, #12]
 8013708:	2b00      	cmp	r3, #0
 801370a:	d102      	bne.n	8013712 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801370c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013710:	e026      	b.n	8013760 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013716:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013718:	68bb      	ldr	r3, [r7, #8]
 801371a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801371e:	2b00      	cmp	r3, #0
 8013720:	d0ef      	beq.n	8013702 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013722:	68bb      	ldr	r3, [r7, #8]
 8013724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013728:	2b00      	cmp	r3, #0
 801372a:	d1ea      	bne.n	8013702 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013730:	f003 0304 	and.w	r3, r3, #4
 8013734:	2b00      	cmp	r3, #0
 8013736:	d004      	beq.n	8013742 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	2204      	movs	r2, #4
 801373c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801373e:	2304      	movs	r3, #4
 8013740:	e00e      	b.n	8013760 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013746:	f003 0301 	and.w	r3, r3, #1
 801374a:	2b00      	cmp	r3, #0
 801374c:	d004      	beq.n	8013758 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	2201      	movs	r2, #1
 8013752:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013754:	2301      	movs	r3, #1
 8013756:	e003      	b.n	8013760 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	4a06      	ldr	r2, [pc, #24]	; (8013774 <SDMMC_GetCmdResp2+0x90>)
 801375c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801375e:	2300      	movs	r3, #0
}
 8013760:	4618      	mov	r0, r3
 8013762:	3714      	adds	r7, #20
 8013764:	46bd      	mov	sp, r7
 8013766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801376a:	4770      	bx	lr
 801376c:	24000000 	.word	0x24000000
 8013770:	10624dd3 	.word	0x10624dd3
 8013774:	002000c5 	.word	0x002000c5

08013778 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8013778:	b480      	push	{r7}
 801377a:	b085      	sub	sp, #20
 801377c:	af00      	add	r7, sp, #0
 801377e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013780:	4b1a      	ldr	r3, [pc, #104]	; (80137ec <SDMMC_GetCmdResp3+0x74>)
 8013782:	681b      	ldr	r3, [r3, #0]
 8013784:	4a1a      	ldr	r2, [pc, #104]	; (80137f0 <SDMMC_GetCmdResp3+0x78>)
 8013786:	fba2 2303 	umull	r2, r3, r2, r3
 801378a:	0a5b      	lsrs	r3, r3, #9
 801378c:	f241 3288 	movw	r2, #5000	; 0x1388
 8013790:	fb02 f303 	mul.w	r3, r2, r3
 8013794:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	1e5a      	subs	r2, r3, #1
 801379a:	60fa      	str	r2, [r7, #12]
 801379c:	2b00      	cmp	r3, #0
 801379e:	d102      	bne.n	80137a6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80137a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80137a4:	e01b      	b.n	80137de <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80137aa:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80137ac:	68bb      	ldr	r3, [r7, #8]
 80137ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d0ef      	beq.n	8013796 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80137b6:	68bb      	ldr	r3, [r7, #8]
 80137b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d1ea      	bne.n	8013796 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80137c4:	f003 0304 	and.w	r3, r3, #4
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d004      	beq.n	80137d6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	2204      	movs	r2, #4
 80137d0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80137d2:	2304      	movs	r3, #4
 80137d4:	e003      	b.n	80137de <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	4a06      	ldr	r2, [pc, #24]	; (80137f4 <SDMMC_GetCmdResp3+0x7c>)
 80137da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80137dc:	2300      	movs	r3, #0
}
 80137de:	4618      	mov	r0, r3
 80137e0:	3714      	adds	r7, #20
 80137e2:	46bd      	mov	sp, r7
 80137e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e8:	4770      	bx	lr
 80137ea:	bf00      	nop
 80137ec:	24000000 	.word	0x24000000
 80137f0:	10624dd3 	.word	0x10624dd3
 80137f4:	002000c5 	.word	0x002000c5

080137f8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80137f8:	b580      	push	{r7, lr}
 80137fa:	b088      	sub	sp, #32
 80137fc:	af00      	add	r7, sp, #0
 80137fe:	60f8      	str	r0, [r7, #12]
 8013800:	460b      	mov	r3, r1
 8013802:	607a      	str	r2, [r7, #4]
 8013804:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013806:	4b35      	ldr	r3, [pc, #212]	; (80138dc <SDMMC_GetCmdResp6+0xe4>)
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	4a35      	ldr	r2, [pc, #212]	; (80138e0 <SDMMC_GetCmdResp6+0xe8>)
 801380c:	fba2 2303 	umull	r2, r3, r2, r3
 8013810:	0a5b      	lsrs	r3, r3, #9
 8013812:	f241 3288 	movw	r2, #5000	; 0x1388
 8013816:	fb02 f303 	mul.w	r3, r2, r3
 801381a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801381c:	69fb      	ldr	r3, [r7, #28]
 801381e:	1e5a      	subs	r2, r3, #1
 8013820:	61fa      	str	r2, [r7, #28]
 8013822:	2b00      	cmp	r3, #0
 8013824:	d102      	bne.n	801382c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013826:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801382a:	e052      	b.n	80138d2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013830:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013832:	69bb      	ldr	r3, [r7, #24]
 8013834:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8013838:	2b00      	cmp	r3, #0
 801383a:	d0ef      	beq.n	801381c <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801383c:	69bb      	ldr	r3, [r7, #24]
 801383e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013842:	2b00      	cmp	r3, #0
 8013844:	d1ea      	bne.n	801381c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801384a:	f003 0304 	and.w	r3, r3, #4
 801384e:	2b00      	cmp	r3, #0
 8013850:	d004      	beq.n	801385c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	2204      	movs	r2, #4
 8013856:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013858:	2304      	movs	r3, #4
 801385a:	e03a      	b.n	80138d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013860:	f003 0301 	and.w	r3, r3, #1
 8013864:	2b00      	cmp	r3, #0
 8013866:	d004      	beq.n	8013872 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	2201      	movs	r2, #1
 801386c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801386e:	2301      	movs	r3, #1
 8013870:	e02f      	b.n	80138d2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8013872:	68f8      	ldr	r0, [r7, #12]
 8013874:	f7ff fb7c 	bl	8012f70 <SDMMC_GetCommandResponse>
 8013878:	4603      	mov	r3, r0
 801387a:	461a      	mov	r2, r3
 801387c:	7afb      	ldrb	r3, [r7, #11]
 801387e:	4293      	cmp	r3, r2
 8013880:	d001      	beq.n	8013886 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013882:	2301      	movs	r3, #1
 8013884:	e025      	b.n	80138d2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	4a16      	ldr	r2, [pc, #88]	; (80138e4 <SDMMC_GetCmdResp6+0xec>)
 801388a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801388c:	2100      	movs	r1, #0
 801388e:	68f8      	ldr	r0, [r7, #12]
 8013890:	f7ff fb7b 	bl	8012f8a <SDMMC_GetResponse>
 8013894:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8013896:	697b      	ldr	r3, [r7, #20]
 8013898:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 801389c:	2b00      	cmp	r3, #0
 801389e:	d106      	bne.n	80138ae <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80138a0:	697b      	ldr	r3, [r7, #20]
 80138a2:	0c1b      	lsrs	r3, r3, #16
 80138a4:	b29a      	uxth	r2, r3
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80138aa:	2300      	movs	r3, #0
 80138ac:	e011      	b.n	80138d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80138ae:	697b      	ldr	r3, [r7, #20]
 80138b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d002      	beq.n	80138be <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80138b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80138bc:	e009      	b.n	80138d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80138be:	697b      	ldr	r3, [r7, #20]
 80138c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d002      	beq.n	80138ce <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80138c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80138cc:	e001      	b.n	80138d2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80138ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80138d2:	4618      	mov	r0, r3
 80138d4:	3720      	adds	r7, #32
 80138d6:	46bd      	mov	sp, r7
 80138d8:	bd80      	pop	{r7, pc}
 80138da:	bf00      	nop
 80138dc:	24000000 	.word	0x24000000
 80138e0:	10624dd3 	.word	0x10624dd3
 80138e4:	002000c5 	.word	0x002000c5

080138e8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80138e8:	b480      	push	{r7}
 80138ea:	b085      	sub	sp, #20
 80138ec:	af00      	add	r7, sp, #0
 80138ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80138f0:	4b22      	ldr	r3, [pc, #136]	; (801397c <SDMMC_GetCmdResp7+0x94>)
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	4a22      	ldr	r2, [pc, #136]	; (8013980 <SDMMC_GetCmdResp7+0x98>)
 80138f6:	fba2 2303 	umull	r2, r3, r2, r3
 80138fa:	0a5b      	lsrs	r3, r3, #9
 80138fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8013900:	fb02 f303 	mul.w	r3, r2, r3
 8013904:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	1e5a      	subs	r2, r3, #1
 801390a:	60fa      	str	r2, [r7, #12]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d102      	bne.n	8013916 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013910:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013914:	e02c      	b.n	8013970 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801391a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801391c:	68bb      	ldr	r3, [r7, #8]
 801391e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8013922:	2b00      	cmp	r3, #0
 8013924:	d0ef      	beq.n	8013906 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013926:	68bb      	ldr	r3, [r7, #8]
 8013928:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801392c:	2b00      	cmp	r3, #0
 801392e:	d1ea      	bne.n	8013906 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013934:	f003 0304 	and.w	r3, r3, #4
 8013938:	2b00      	cmp	r3, #0
 801393a:	d004      	beq.n	8013946 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	2204      	movs	r2, #4
 8013940:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013942:	2304      	movs	r3, #4
 8013944:	e014      	b.n	8013970 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801394a:	f003 0301 	and.w	r3, r3, #1
 801394e:	2b00      	cmp	r3, #0
 8013950:	d004      	beq.n	801395c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	2201      	movs	r2, #1
 8013956:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013958:	2301      	movs	r3, #1
 801395a:	e009      	b.n	8013970 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013964:	2b00      	cmp	r3, #0
 8013966:	d002      	beq.n	801396e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	2240      	movs	r2, #64	; 0x40
 801396c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801396e:	2300      	movs	r3, #0

}
 8013970:	4618      	mov	r0, r3
 8013972:	3714      	adds	r7, #20
 8013974:	46bd      	mov	sp, r7
 8013976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801397a:	4770      	bx	lr
 801397c:	24000000 	.word	0x24000000
 8013980:	10624dd3 	.word	0x10624dd3

08013984 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8013984:	b480      	push	{r7}
 8013986:	b085      	sub	sp, #20
 8013988:	af00      	add	r7, sp, #0
 801398a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801398c:	4b11      	ldr	r3, [pc, #68]	; (80139d4 <SDMMC_GetCmdError+0x50>)
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	4a11      	ldr	r2, [pc, #68]	; (80139d8 <SDMMC_GetCmdError+0x54>)
 8013992:	fba2 2303 	umull	r2, r3, r2, r3
 8013996:	0a5b      	lsrs	r3, r3, #9
 8013998:	f241 3288 	movw	r2, #5000	; 0x1388
 801399c:	fb02 f303 	mul.w	r3, r2, r3
 80139a0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	1e5a      	subs	r2, r3, #1
 80139a6:	60fa      	str	r2, [r7, #12]
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d102      	bne.n	80139b2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80139ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80139b0:	e009      	b.n	80139c6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80139b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d0f1      	beq.n	80139a2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	4a06      	ldr	r2, [pc, #24]	; (80139dc <SDMMC_GetCmdError+0x58>)
 80139c2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80139c4:	2300      	movs	r3, #0
}
 80139c6:	4618      	mov	r0, r3
 80139c8:	3714      	adds	r7, #20
 80139ca:	46bd      	mov	sp, r7
 80139cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d0:	4770      	bx	lr
 80139d2:	bf00      	nop
 80139d4:	24000000 	.word	0x24000000
 80139d8:	10624dd3 	.word	0x10624dd3
 80139dc:	002000c5 	.word	0x002000c5

080139e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80139e0:	b084      	sub	sp, #16
 80139e2:	b580      	push	{r7, lr}
 80139e4:	b084      	sub	sp, #16
 80139e6:	af00      	add	r7, sp, #0
 80139e8:	6078      	str	r0, [r7, #4]
 80139ea:	f107 001c 	add.w	r0, r7, #28
 80139ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80139f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139f4:	2b01      	cmp	r3, #1
 80139f6:	d120      	bne.n	8013a3a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80139fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	68da      	ldr	r2, [r3, #12]
 8013a08:	4b2a      	ldr	r3, [pc, #168]	; (8013ab4 <USB_CoreInit+0xd4>)
 8013a0a:	4013      	ands	r3, r2
 8013a0c:	687a      	ldr	r2, [r7, #4]
 8013a0e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	68db      	ldr	r3, [r3, #12]
 8013a14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8013a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a1e:	2b01      	cmp	r3, #1
 8013a20:	d105      	bne.n	8013a2e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	68db      	ldr	r3, [r3, #12]
 8013a26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8013a2e:	6878      	ldr	r0, [r7, #4]
 8013a30:	f001 faf8 	bl	8015024 <USB_CoreReset>
 8013a34:	4603      	mov	r3, r0
 8013a36:	73fb      	strb	r3, [r7, #15]
 8013a38:	e01a      	b.n	8013a70 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	68db      	ldr	r3, [r3, #12]
 8013a3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8013a46:	6878      	ldr	r0, [r7, #4]
 8013a48:	f001 faec 	bl	8015024 <USB_CoreReset>
 8013a4c:	4603      	mov	r3, r0
 8013a4e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8013a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d106      	bne.n	8013a64 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a5a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	639a      	str	r2, [r3, #56]	; 0x38
 8013a62:	e005      	b.n	8013a70 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8013a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a72:	2b01      	cmp	r3, #1
 8013a74:	d116      	bne.n	8013aa4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013a7a:	b29a      	uxth	r2, r3
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013a84:	4b0c      	ldr	r3, [pc, #48]	; (8013ab8 <USB_CoreInit+0xd8>)
 8013a86:	4313      	orrs	r3, r2
 8013a88:	687a      	ldr	r2, [r7, #4]
 8013a8a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	689b      	ldr	r3, [r3, #8]
 8013a90:	f043 0206 	orr.w	r2, r3, #6
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	689b      	ldr	r3, [r3, #8]
 8013a9c:	f043 0220 	orr.w	r2, r3, #32
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8013aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8013aa6:	4618      	mov	r0, r3
 8013aa8:	3710      	adds	r7, #16
 8013aaa:	46bd      	mov	sp, r7
 8013aac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013ab0:	b004      	add	sp, #16
 8013ab2:	4770      	bx	lr
 8013ab4:	ffbdffbf 	.word	0xffbdffbf
 8013ab8:	03ee0000 	.word	0x03ee0000

08013abc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8013abc:	b480      	push	{r7}
 8013abe:	b087      	sub	sp, #28
 8013ac0:	af00      	add	r7, sp, #0
 8013ac2:	60f8      	str	r0, [r7, #12]
 8013ac4:	60b9      	str	r1, [r7, #8]
 8013ac6:	4613      	mov	r3, r2
 8013ac8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8013aca:	79fb      	ldrb	r3, [r7, #7]
 8013acc:	2b02      	cmp	r3, #2
 8013ace:	d165      	bne.n	8013b9c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8013ad0:	68bb      	ldr	r3, [r7, #8]
 8013ad2:	4a41      	ldr	r2, [pc, #260]	; (8013bd8 <USB_SetTurnaroundTime+0x11c>)
 8013ad4:	4293      	cmp	r3, r2
 8013ad6:	d906      	bls.n	8013ae6 <USB_SetTurnaroundTime+0x2a>
 8013ad8:	68bb      	ldr	r3, [r7, #8]
 8013ada:	4a40      	ldr	r2, [pc, #256]	; (8013bdc <USB_SetTurnaroundTime+0x120>)
 8013adc:	4293      	cmp	r3, r2
 8013ade:	d202      	bcs.n	8013ae6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8013ae0:	230f      	movs	r3, #15
 8013ae2:	617b      	str	r3, [r7, #20]
 8013ae4:	e062      	b.n	8013bac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8013ae6:	68bb      	ldr	r3, [r7, #8]
 8013ae8:	4a3c      	ldr	r2, [pc, #240]	; (8013bdc <USB_SetTurnaroundTime+0x120>)
 8013aea:	4293      	cmp	r3, r2
 8013aec:	d306      	bcc.n	8013afc <USB_SetTurnaroundTime+0x40>
 8013aee:	68bb      	ldr	r3, [r7, #8]
 8013af0:	4a3b      	ldr	r2, [pc, #236]	; (8013be0 <USB_SetTurnaroundTime+0x124>)
 8013af2:	4293      	cmp	r3, r2
 8013af4:	d202      	bcs.n	8013afc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8013af6:	230e      	movs	r3, #14
 8013af8:	617b      	str	r3, [r7, #20]
 8013afa:	e057      	b.n	8013bac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8013afc:	68bb      	ldr	r3, [r7, #8]
 8013afe:	4a38      	ldr	r2, [pc, #224]	; (8013be0 <USB_SetTurnaroundTime+0x124>)
 8013b00:	4293      	cmp	r3, r2
 8013b02:	d306      	bcc.n	8013b12 <USB_SetTurnaroundTime+0x56>
 8013b04:	68bb      	ldr	r3, [r7, #8]
 8013b06:	4a37      	ldr	r2, [pc, #220]	; (8013be4 <USB_SetTurnaroundTime+0x128>)
 8013b08:	4293      	cmp	r3, r2
 8013b0a:	d202      	bcs.n	8013b12 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8013b0c:	230d      	movs	r3, #13
 8013b0e:	617b      	str	r3, [r7, #20]
 8013b10:	e04c      	b.n	8013bac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8013b12:	68bb      	ldr	r3, [r7, #8]
 8013b14:	4a33      	ldr	r2, [pc, #204]	; (8013be4 <USB_SetTurnaroundTime+0x128>)
 8013b16:	4293      	cmp	r3, r2
 8013b18:	d306      	bcc.n	8013b28 <USB_SetTurnaroundTime+0x6c>
 8013b1a:	68bb      	ldr	r3, [r7, #8]
 8013b1c:	4a32      	ldr	r2, [pc, #200]	; (8013be8 <USB_SetTurnaroundTime+0x12c>)
 8013b1e:	4293      	cmp	r3, r2
 8013b20:	d802      	bhi.n	8013b28 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8013b22:	230c      	movs	r3, #12
 8013b24:	617b      	str	r3, [r7, #20]
 8013b26:	e041      	b.n	8013bac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8013b28:	68bb      	ldr	r3, [r7, #8]
 8013b2a:	4a2f      	ldr	r2, [pc, #188]	; (8013be8 <USB_SetTurnaroundTime+0x12c>)
 8013b2c:	4293      	cmp	r3, r2
 8013b2e:	d906      	bls.n	8013b3e <USB_SetTurnaroundTime+0x82>
 8013b30:	68bb      	ldr	r3, [r7, #8]
 8013b32:	4a2e      	ldr	r2, [pc, #184]	; (8013bec <USB_SetTurnaroundTime+0x130>)
 8013b34:	4293      	cmp	r3, r2
 8013b36:	d802      	bhi.n	8013b3e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8013b38:	230b      	movs	r3, #11
 8013b3a:	617b      	str	r3, [r7, #20]
 8013b3c:	e036      	b.n	8013bac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8013b3e:	68bb      	ldr	r3, [r7, #8]
 8013b40:	4a2a      	ldr	r2, [pc, #168]	; (8013bec <USB_SetTurnaroundTime+0x130>)
 8013b42:	4293      	cmp	r3, r2
 8013b44:	d906      	bls.n	8013b54 <USB_SetTurnaroundTime+0x98>
 8013b46:	68bb      	ldr	r3, [r7, #8]
 8013b48:	4a29      	ldr	r2, [pc, #164]	; (8013bf0 <USB_SetTurnaroundTime+0x134>)
 8013b4a:	4293      	cmp	r3, r2
 8013b4c:	d802      	bhi.n	8013b54 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8013b4e:	230a      	movs	r3, #10
 8013b50:	617b      	str	r3, [r7, #20]
 8013b52:	e02b      	b.n	8013bac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8013b54:	68bb      	ldr	r3, [r7, #8]
 8013b56:	4a26      	ldr	r2, [pc, #152]	; (8013bf0 <USB_SetTurnaroundTime+0x134>)
 8013b58:	4293      	cmp	r3, r2
 8013b5a:	d906      	bls.n	8013b6a <USB_SetTurnaroundTime+0xae>
 8013b5c:	68bb      	ldr	r3, [r7, #8]
 8013b5e:	4a25      	ldr	r2, [pc, #148]	; (8013bf4 <USB_SetTurnaroundTime+0x138>)
 8013b60:	4293      	cmp	r3, r2
 8013b62:	d202      	bcs.n	8013b6a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8013b64:	2309      	movs	r3, #9
 8013b66:	617b      	str	r3, [r7, #20]
 8013b68:	e020      	b.n	8013bac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8013b6a:	68bb      	ldr	r3, [r7, #8]
 8013b6c:	4a21      	ldr	r2, [pc, #132]	; (8013bf4 <USB_SetTurnaroundTime+0x138>)
 8013b6e:	4293      	cmp	r3, r2
 8013b70:	d306      	bcc.n	8013b80 <USB_SetTurnaroundTime+0xc4>
 8013b72:	68bb      	ldr	r3, [r7, #8]
 8013b74:	4a20      	ldr	r2, [pc, #128]	; (8013bf8 <USB_SetTurnaroundTime+0x13c>)
 8013b76:	4293      	cmp	r3, r2
 8013b78:	d802      	bhi.n	8013b80 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8013b7a:	2308      	movs	r3, #8
 8013b7c:	617b      	str	r3, [r7, #20]
 8013b7e:	e015      	b.n	8013bac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8013b80:	68bb      	ldr	r3, [r7, #8]
 8013b82:	4a1d      	ldr	r2, [pc, #116]	; (8013bf8 <USB_SetTurnaroundTime+0x13c>)
 8013b84:	4293      	cmp	r3, r2
 8013b86:	d906      	bls.n	8013b96 <USB_SetTurnaroundTime+0xda>
 8013b88:	68bb      	ldr	r3, [r7, #8]
 8013b8a:	4a1c      	ldr	r2, [pc, #112]	; (8013bfc <USB_SetTurnaroundTime+0x140>)
 8013b8c:	4293      	cmp	r3, r2
 8013b8e:	d202      	bcs.n	8013b96 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8013b90:	2307      	movs	r3, #7
 8013b92:	617b      	str	r3, [r7, #20]
 8013b94:	e00a      	b.n	8013bac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8013b96:	2306      	movs	r3, #6
 8013b98:	617b      	str	r3, [r7, #20]
 8013b9a:	e007      	b.n	8013bac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8013b9c:	79fb      	ldrb	r3, [r7, #7]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d102      	bne.n	8013ba8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8013ba2:	2309      	movs	r3, #9
 8013ba4:	617b      	str	r3, [r7, #20]
 8013ba6:	e001      	b.n	8013bac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8013ba8:	2309      	movs	r3, #9
 8013baa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	68db      	ldr	r3, [r3, #12]
 8013bb0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	68da      	ldr	r2, [r3, #12]
 8013bbc:	697b      	ldr	r3, [r7, #20]
 8013bbe:	029b      	lsls	r3, r3, #10
 8013bc0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8013bc4:	431a      	orrs	r2, r3
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8013bca:	2300      	movs	r3, #0
}
 8013bcc:	4618      	mov	r0, r3
 8013bce:	371c      	adds	r7, #28
 8013bd0:	46bd      	mov	sp, r7
 8013bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd6:	4770      	bx	lr
 8013bd8:	00d8acbf 	.word	0x00d8acbf
 8013bdc:	00e4e1c0 	.word	0x00e4e1c0
 8013be0:	00f42400 	.word	0x00f42400
 8013be4:	01067380 	.word	0x01067380
 8013be8:	011a499f 	.word	0x011a499f
 8013bec:	01312cff 	.word	0x01312cff
 8013bf0:	014ca43f 	.word	0x014ca43f
 8013bf4:	016e3600 	.word	0x016e3600
 8013bf8:	01a6ab1f 	.word	0x01a6ab1f
 8013bfc:	01e84800 	.word	0x01e84800

08013c00 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013c00:	b480      	push	{r7}
 8013c02:	b083      	sub	sp, #12
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	689b      	ldr	r3, [r3, #8]
 8013c0c:	f043 0201 	orr.w	r2, r3, #1
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013c14:	2300      	movs	r3, #0
}
 8013c16:	4618      	mov	r0, r3
 8013c18:	370c      	adds	r7, #12
 8013c1a:	46bd      	mov	sp, r7
 8013c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c20:	4770      	bx	lr

08013c22 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013c22:	b480      	push	{r7}
 8013c24:	b083      	sub	sp, #12
 8013c26:	af00      	add	r7, sp, #0
 8013c28:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	689b      	ldr	r3, [r3, #8]
 8013c2e:	f023 0201 	bic.w	r2, r3, #1
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013c36:	2300      	movs	r3, #0
}
 8013c38:	4618      	mov	r0, r3
 8013c3a:	370c      	adds	r7, #12
 8013c3c:	46bd      	mov	sp, r7
 8013c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c42:	4770      	bx	lr

08013c44 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8013c44:	b580      	push	{r7, lr}
 8013c46:	b084      	sub	sp, #16
 8013c48:	af00      	add	r7, sp, #0
 8013c4a:	6078      	str	r0, [r7, #4]
 8013c4c:	460b      	mov	r3, r1
 8013c4e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8013c50:	2300      	movs	r3, #0
 8013c52:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	68db      	ldr	r3, [r3, #12]
 8013c58:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8013c60:	78fb      	ldrb	r3, [r7, #3]
 8013c62:	2b01      	cmp	r3, #1
 8013c64:	d115      	bne.n	8013c92 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	68db      	ldr	r3, [r3, #12]
 8013c6a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8013c72:	2001      	movs	r0, #1
 8013c74:	f7f0 fa5a 	bl	800412c <HAL_Delay>
      ms++;
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	3301      	adds	r3, #1
 8013c7c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8013c7e:	6878      	ldr	r0, [r7, #4]
 8013c80:	f001 f93f 	bl	8014f02 <USB_GetMode>
 8013c84:	4603      	mov	r3, r0
 8013c86:	2b01      	cmp	r3, #1
 8013c88:	d01e      	beq.n	8013cc8 <USB_SetCurrentMode+0x84>
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	2b31      	cmp	r3, #49	; 0x31
 8013c8e:	d9f0      	bls.n	8013c72 <USB_SetCurrentMode+0x2e>
 8013c90:	e01a      	b.n	8013cc8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8013c92:	78fb      	ldrb	r3, [r7, #3]
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d115      	bne.n	8013cc4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	68db      	ldr	r3, [r3, #12]
 8013c9c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8013ca4:	2001      	movs	r0, #1
 8013ca6:	f7f0 fa41 	bl	800412c <HAL_Delay>
      ms++;
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	3301      	adds	r3, #1
 8013cae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8013cb0:	6878      	ldr	r0, [r7, #4]
 8013cb2:	f001 f926 	bl	8014f02 <USB_GetMode>
 8013cb6:	4603      	mov	r3, r0
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d005      	beq.n	8013cc8 <USB_SetCurrentMode+0x84>
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	2b31      	cmp	r3, #49	; 0x31
 8013cc0:	d9f0      	bls.n	8013ca4 <USB_SetCurrentMode+0x60>
 8013cc2:	e001      	b.n	8013cc8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8013cc4:	2301      	movs	r3, #1
 8013cc6:	e005      	b.n	8013cd4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	2b32      	cmp	r3, #50	; 0x32
 8013ccc:	d101      	bne.n	8013cd2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8013cce:	2301      	movs	r3, #1
 8013cd0:	e000      	b.n	8013cd4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8013cd2:	2300      	movs	r3, #0
}
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	3710      	adds	r7, #16
 8013cd8:	46bd      	mov	sp, r7
 8013cda:	bd80      	pop	{r7, pc}

08013cdc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013cdc:	b084      	sub	sp, #16
 8013cde:	b580      	push	{r7, lr}
 8013ce0:	b086      	sub	sp, #24
 8013ce2:	af00      	add	r7, sp, #0
 8013ce4:	6078      	str	r0, [r7, #4]
 8013ce6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8013cea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8013cee:	2300      	movs	r3, #0
 8013cf0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8013cf6:	2300      	movs	r3, #0
 8013cf8:	613b      	str	r3, [r7, #16]
 8013cfa:	e009      	b.n	8013d10 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8013cfc:	687a      	ldr	r2, [r7, #4]
 8013cfe:	693b      	ldr	r3, [r7, #16]
 8013d00:	3340      	adds	r3, #64	; 0x40
 8013d02:	009b      	lsls	r3, r3, #2
 8013d04:	4413      	add	r3, r2
 8013d06:	2200      	movs	r2, #0
 8013d08:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8013d0a:	693b      	ldr	r3, [r7, #16]
 8013d0c:	3301      	adds	r3, #1
 8013d0e:	613b      	str	r3, [r7, #16]
 8013d10:	693b      	ldr	r3, [r7, #16]
 8013d12:	2b0e      	cmp	r3, #14
 8013d14:	d9f2      	bls.n	8013cfc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8013d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d11c      	bne.n	8013d56 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d22:	685b      	ldr	r3, [r3, #4]
 8013d24:	68fa      	ldr	r2, [r7, #12]
 8013d26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013d2a:	f043 0302 	orr.w	r3, r3, #2
 8013d2e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d34:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	681b      	ldr	r3, [r3, #0]
 8013d40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	601a      	str	r2, [r3, #0]
 8013d54:	e005      	b.n	8013d62 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d5a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013d68:	461a      	mov	r2, r3
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d74:	4619      	mov	r1, r3
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d7c:	461a      	mov	r2, r3
 8013d7e:	680b      	ldr	r3, [r1, #0]
 8013d80:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d84:	2b01      	cmp	r3, #1
 8013d86:	d10c      	bne.n	8013da2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8013d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d104      	bne.n	8013d98 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8013d8e:	2100      	movs	r1, #0
 8013d90:	6878      	ldr	r0, [r7, #4]
 8013d92:	f000 f965 	bl	8014060 <USB_SetDevSpeed>
 8013d96:	e008      	b.n	8013daa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8013d98:	2101      	movs	r1, #1
 8013d9a:	6878      	ldr	r0, [r7, #4]
 8013d9c:	f000 f960 	bl	8014060 <USB_SetDevSpeed>
 8013da0:	e003      	b.n	8013daa <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8013da2:	2103      	movs	r1, #3
 8013da4:	6878      	ldr	r0, [r7, #4]
 8013da6:	f000 f95b 	bl	8014060 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8013daa:	2110      	movs	r1, #16
 8013dac:	6878      	ldr	r0, [r7, #4]
 8013dae:	f000 f8f3 	bl	8013f98 <USB_FlushTxFifo>
 8013db2:	4603      	mov	r3, r0
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d001      	beq.n	8013dbc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8013db8:	2301      	movs	r3, #1
 8013dba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8013dbc:	6878      	ldr	r0, [r7, #4]
 8013dbe:	f000 f91f 	bl	8014000 <USB_FlushRxFifo>
 8013dc2:	4603      	mov	r3, r0
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d001      	beq.n	8013dcc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8013dc8:	2301      	movs	r3, #1
 8013dca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013dd2:	461a      	mov	r2, r3
 8013dd4:	2300      	movs	r3, #0
 8013dd6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013dde:	461a      	mov	r2, r3
 8013de0:	2300      	movs	r3, #0
 8013de2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013dea:	461a      	mov	r2, r3
 8013dec:	2300      	movs	r3, #0
 8013dee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013df0:	2300      	movs	r3, #0
 8013df2:	613b      	str	r3, [r7, #16]
 8013df4:	e043      	b.n	8013e7e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013df6:	693b      	ldr	r3, [r7, #16]
 8013df8:	015a      	lsls	r2, r3, #5
 8013dfa:	68fb      	ldr	r3, [r7, #12]
 8013dfc:	4413      	add	r3, r2
 8013dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013e08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013e0c:	d118      	bne.n	8013e40 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8013e0e:	693b      	ldr	r3, [r7, #16]
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d10a      	bne.n	8013e2a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8013e14:	693b      	ldr	r3, [r7, #16]
 8013e16:	015a      	lsls	r2, r3, #5
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	4413      	add	r3, r2
 8013e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e20:	461a      	mov	r2, r3
 8013e22:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013e26:	6013      	str	r3, [r2, #0]
 8013e28:	e013      	b.n	8013e52 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8013e2a:	693b      	ldr	r3, [r7, #16]
 8013e2c:	015a      	lsls	r2, r3, #5
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	4413      	add	r3, r2
 8013e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e36:	461a      	mov	r2, r3
 8013e38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013e3c:	6013      	str	r3, [r2, #0]
 8013e3e:	e008      	b.n	8013e52 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8013e40:	693b      	ldr	r3, [r7, #16]
 8013e42:	015a      	lsls	r2, r3, #5
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	4413      	add	r3, r2
 8013e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e4c:	461a      	mov	r2, r3
 8013e4e:	2300      	movs	r3, #0
 8013e50:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8013e52:	693b      	ldr	r3, [r7, #16]
 8013e54:	015a      	lsls	r2, r3, #5
 8013e56:	68fb      	ldr	r3, [r7, #12]
 8013e58:	4413      	add	r3, r2
 8013e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e5e:	461a      	mov	r2, r3
 8013e60:	2300      	movs	r3, #0
 8013e62:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8013e64:	693b      	ldr	r3, [r7, #16]
 8013e66:	015a      	lsls	r2, r3, #5
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	4413      	add	r3, r2
 8013e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e70:	461a      	mov	r2, r3
 8013e72:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013e76:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013e78:	693b      	ldr	r3, [r7, #16]
 8013e7a:	3301      	adds	r3, #1
 8013e7c:	613b      	str	r3, [r7, #16]
 8013e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e80:	693a      	ldr	r2, [r7, #16]
 8013e82:	429a      	cmp	r2, r3
 8013e84:	d3b7      	bcc.n	8013df6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013e86:	2300      	movs	r3, #0
 8013e88:	613b      	str	r3, [r7, #16]
 8013e8a:	e043      	b.n	8013f14 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013e8c:	693b      	ldr	r3, [r7, #16]
 8013e8e:	015a      	lsls	r2, r3, #5
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	4413      	add	r3, r2
 8013e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013e9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013ea2:	d118      	bne.n	8013ed6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8013ea4:	693b      	ldr	r3, [r7, #16]
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d10a      	bne.n	8013ec0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8013eaa:	693b      	ldr	r3, [r7, #16]
 8013eac:	015a      	lsls	r2, r3, #5
 8013eae:	68fb      	ldr	r3, [r7, #12]
 8013eb0:	4413      	add	r3, r2
 8013eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013eb6:	461a      	mov	r2, r3
 8013eb8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013ebc:	6013      	str	r3, [r2, #0]
 8013ebe:	e013      	b.n	8013ee8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8013ec0:	693b      	ldr	r3, [r7, #16]
 8013ec2:	015a      	lsls	r2, r3, #5
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	4413      	add	r3, r2
 8013ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ecc:	461a      	mov	r2, r3
 8013ece:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013ed2:	6013      	str	r3, [r2, #0]
 8013ed4:	e008      	b.n	8013ee8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8013ed6:	693b      	ldr	r3, [r7, #16]
 8013ed8:	015a      	lsls	r2, r3, #5
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	4413      	add	r3, r2
 8013ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ee2:	461a      	mov	r2, r3
 8013ee4:	2300      	movs	r3, #0
 8013ee6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8013ee8:	693b      	ldr	r3, [r7, #16]
 8013eea:	015a      	lsls	r2, r3, #5
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	4413      	add	r3, r2
 8013ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ef4:	461a      	mov	r2, r3
 8013ef6:	2300      	movs	r3, #0
 8013ef8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8013efa:	693b      	ldr	r3, [r7, #16]
 8013efc:	015a      	lsls	r2, r3, #5
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	4413      	add	r3, r2
 8013f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f06:	461a      	mov	r2, r3
 8013f08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013f0c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013f0e:	693b      	ldr	r3, [r7, #16]
 8013f10:	3301      	adds	r3, #1
 8013f12:	613b      	str	r3, [r7, #16]
 8013f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f16:	693a      	ldr	r2, [r7, #16]
 8013f18:	429a      	cmp	r2, r3
 8013f1a:	d3b7      	bcc.n	8013e8c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f22:	691b      	ldr	r3, [r3, #16]
 8013f24:	68fa      	ldr	r2, [r7, #12]
 8013f26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013f2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013f2e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	2200      	movs	r2, #0
 8013f34:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8013f3c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8013f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d105      	bne.n	8013f50 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	699b      	ldr	r3, [r3, #24]
 8013f48:	f043 0210 	orr.w	r2, r3, #16
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	699a      	ldr	r2, [r3, #24]
 8013f54:	4b0e      	ldr	r3, [pc, #56]	; (8013f90 <USB_DevInit+0x2b4>)
 8013f56:	4313      	orrs	r3, r2
 8013f58:	687a      	ldr	r2, [r7, #4]
 8013f5a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8013f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d005      	beq.n	8013f6e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	699b      	ldr	r3, [r3, #24]
 8013f66:	f043 0208 	orr.w	r2, r3, #8
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8013f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013f70:	2b01      	cmp	r3, #1
 8013f72:	d105      	bne.n	8013f80 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	699a      	ldr	r2, [r3, #24]
 8013f78:	4b06      	ldr	r3, [pc, #24]	; (8013f94 <USB_DevInit+0x2b8>)
 8013f7a:	4313      	orrs	r3, r2
 8013f7c:	687a      	ldr	r2, [r7, #4]
 8013f7e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8013f80:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f82:	4618      	mov	r0, r3
 8013f84:	3718      	adds	r7, #24
 8013f86:	46bd      	mov	sp, r7
 8013f88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013f8c:	b004      	add	sp, #16
 8013f8e:	4770      	bx	lr
 8013f90:	803c3800 	.word	0x803c3800
 8013f94:	40000004 	.word	0x40000004

08013f98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8013f98:	b480      	push	{r7}
 8013f9a:	b085      	sub	sp, #20
 8013f9c:	af00      	add	r7, sp, #0
 8013f9e:	6078      	str	r0, [r7, #4]
 8013fa0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013fa2:	2300      	movs	r3, #0
 8013fa4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013fa6:	68fb      	ldr	r3, [r7, #12]
 8013fa8:	3301      	adds	r3, #1
 8013faa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	4a13      	ldr	r2, [pc, #76]	; (8013ffc <USB_FlushTxFifo+0x64>)
 8013fb0:	4293      	cmp	r3, r2
 8013fb2:	d901      	bls.n	8013fb8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8013fb4:	2303      	movs	r3, #3
 8013fb6:	e01b      	b.n	8013ff0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	691b      	ldr	r3, [r3, #16]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	daf2      	bge.n	8013fa6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8013fc0:	2300      	movs	r3, #0
 8013fc2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013fc4:	683b      	ldr	r3, [r7, #0]
 8013fc6:	019b      	lsls	r3, r3, #6
 8013fc8:	f043 0220 	orr.w	r2, r3, #32
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	3301      	adds	r3, #1
 8013fd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	4a08      	ldr	r2, [pc, #32]	; (8013ffc <USB_FlushTxFifo+0x64>)
 8013fda:	4293      	cmp	r3, r2
 8013fdc:	d901      	bls.n	8013fe2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8013fde:	2303      	movs	r3, #3
 8013fe0:	e006      	b.n	8013ff0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	691b      	ldr	r3, [r3, #16]
 8013fe6:	f003 0320 	and.w	r3, r3, #32
 8013fea:	2b20      	cmp	r3, #32
 8013fec:	d0f0      	beq.n	8013fd0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8013fee:	2300      	movs	r3, #0
}
 8013ff0:	4618      	mov	r0, r3
 8013ff2:	3714      	adds	r7, #20
 8013ff4:	46bd      	mov	sp, r7
 8013ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ffa:	4770      	bx	lr
 8013ffc:	00030d40 	.word	0x00030d40

08014000 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8014000:	b480      	push	{r7}
 8014002:	b085      	sub	sp, #20
 8014004:	af00      	add	r7, sp, #0
 8014006:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014008:	2300      	movs	r3, #0
 801400a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	3301      	adds	r3, #1
 8014010:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	4a11      	ldr	r2, [pc, #68]	; (801405c <USB_FlushRxFifo+0x5c>)
 8014016:	4293      	cmp	r3, r2
 8014018:	d901      	bls.n	801401e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801401a:	2303      	movs	r3, #3
 801401c:	e018      	b.n	8014050 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	691b      	ldr	r3, [r3, #16]
 8014022:	2b00      	cmp	r3, #0
 8014024:	daf2      	bge.n	801400c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8014026:	2300      	movs	r3, #0
 8014028:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	2210      	movs	r2, #16
 801402e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	3301      	adds	r3, #1
 8014034:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	4a08      	ldr	r2, [pc, #32]	; (801405c <USB_FlushRxFifo+0x5c>)
 801403a:	4293      	cmp	r3, r2
 801403c:	d901      	bls.n	8014042 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801403e:	2303      	movs	r3, #3
 8014040:	e006      	b.n	8014050 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	691b      	ldr	r3, [r3, #16]
 8014046:	f003 0310 	and.w	r3, r3, #16
 801404a:	2b10      	cmp	r3, #16
 801404c:	d0f0      	beq.n	8014030 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801404e:	2300      	movs	r3, #0
}
 8014050:	4618      	mov	r0, r3
 8014052:	3714      	adds	r7, #20
 8014054:	46bd      	mov	sp, r7
 8014056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801405a:	4770      	bx	lr
 801405c:	00030d40 	.word	0x00030d40

08014060 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8014060:	b480      	push	{r7}
 8014062:	b085      	sub	sp, #20
 8014064:	af00      	add	r7, sp, #0
 8014066:	6078      	str	r0, [r7, #4]
 8014068:	460b      	mov	r3, r1
 801406a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014076:	681a      	ldr	r2, [r3, #0]
 8014078:	78fb      	ldrb	r3, [r7, #3]
 801407a:	68f9      	ldr	r1, [r7, #12]
 801407c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014080:	4313      	orrs	r3, r2
 8014082:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8014084:	2300      	movs	r3, #0
}
 8014086:	4618      	mov	r0, r3
 8014088:	3714      	adds	r7, #20
 801408a:	46bd      	mov	sp, r7
 801408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014090:	4770      	bx	lr

08014092 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8014092:	b480      	push	{r7}
 8014094:	b087      	sub	sp, #28
 8014096:	af00      	add	r7, sp, #0
 8014098:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801409e:	693b      	ldr	r3, [r7, #16]
 80140a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80140a4:	689b      	ldr	r3, [r3, #8]
 80140a6:	f003 0306 	and.w	r3, r3, #6
 80140aa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d102      	bne.n	80140b8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80140b2:	2300      	movs	r3, #0
 80140b4:	75fb      	strb	r3, [r7, #23]
 80140b6:	e00a      	b.n	80140ce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	2b02      	cmp	r3, #2
 80140bc:	d002      	beq.n	80140c4 <USB_GetDevSpeed+0x32>
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	2b06      	cmp	r3, #6
 80140c2:	d102      	bne.n	80140ca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80140c4:	2302      	movs	r3, #2
 80140c6:	75fb      	strb	r3, [r7, #23]
 80140c8:	e001      	b.n	80140ce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80140ca:	230f      	movs	r3, #15
 80140cc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80140ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80140d0:	4618      	mov	r0, r3
 80140d2:	371c      	adds	r7, #28
 80140d4:	46bd      	mov	sp, r7
 80140d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140da:	4770      	bx	lr

080140dc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80140dc:	b480      	push	{r7}
 80140de:	b085      	sub	sp, #20
 80140e0:	af00      	add	r7, sp, #0
 80140e2:	6078      	str	r0, [r7, #4]
 80140e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80140ea:	683b      	ldr	r3, [r7, #0]
 80140ec:	781b      	ldrb	r3, [r3, #0]
 80140ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80140f0:	683b      	ldr	r3, [r7, #0]
 80140f2:	785b      	ldrb	r3, [r3, #1]
 80140f4:	2b01      	cmp	r3, #1
 80140f6:	d139      	bne.n	801416c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80140fe:	69da      	ldr	r2, [r3, #28]
 8014100:	683b      	ldr	r3, [r7, #0]
 8014102:	781b      	ldrb	r3, [r3, #0]
 8014104:	f003 030f 	and.w	r3, r3, #15
 8014108:	2101      	movs	r1, #1
 801410a:	fa01 f303 	lsl.w	r3, r1, r3
 801410e:	b29b      	uxth	r3, r3
 8014110:	68f9      	ldr	r1, [r7, #12]
 8014112:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014116:	4313      	orrs	r3, r2
 8014118:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801411a:	68bb      	ldr	r3, [r7, #8]
 801411c:	015a      	lsls	r2, r3, #5
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	4413      	add	r3, r2
 8014122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801412c:	2b00      	cmp	r3, #0
 801412e:	d153      	bne.n	80141d8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014130:	68bb      	ldr	r3, [r7, #8]
 8014132:	015a      	lsls	r2, r3, #5
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	4413      	add	r3, r2
 8014138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801413c:	681a      	ldr	r2, [r3, #0]
 801413e:	683b      	ldr	r3, [r7, #0]
 8014140:	689b      	ldr	r3, [r3, #8]
 8014142:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8014146:	683b      	ldr	r3, [r7, #0]
 8014148:	791b      	ldrb	r3, [r3, #4]
 801414a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801414c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801414e:	68bb      	ldr	r3, [r7, #8]
 8014150:	059b      	lsls	r3, r3, #22
 8014152:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014154:	431a      	orrs	r2, r3
 8014156:	68bb      	ldr	r3, [r7, #8]
 8014158:	0159      	lsls	r1, r3, #5
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	440b      	add	r3, r1
 801415e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014162:	4619      	mov	r1, r3
 8014164:	4b20      	ldr	r3, [pc, #128]	; (80141e8 <USB_ActivateEndpoint+0x10c>)
 8014166:	4313      	orrs	r3, r2
 8014168:	600b      	str	r3, [r1, #0]
 801416a:	e035      	b.n	80141d8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801416c:	68fb      	ldr	r3, [r7, #12]
 801416e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014172:	69da      	ldr	r2, [r3, #28]
 8014174:	683b      	ldr	r3, [r7, #0]
 8014176:	781b      	ldrb	r3, [r3, #0]
 8014178:	f003 030f 	and.w	r3, r3, #15
 801417c:	2101      	movs	r1, #1
 801417e:	fa01 f303 	lsl.w	r3, r1, r3
 8014182:	041b      	lsls	r3, r3, #16
 8014184:	68f9      	ldr	r1, [r7, #12]
 8014186:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801418a:	4313      	orrs	r3, r2
 801418c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801418e:	68bb      	ldr	r3, [r7, #8]
 8014190:	015a      	lsls	r2, r3, #5
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	4413      	add	r3, r2
 8014196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d119      	bne.n	80141d8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80141a4:	68bb      	ldr	r3, [r7, #8]
 80141a6:	015a      	lsls	r2, r3, #5
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	4413      	add	r3, r2
 80141ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80141b0:	681a      	ldr	r2, [r3, #0]
 80141b2:	683b      	ldr	r3, [r7, #0]
 80141b4:	689b      	ldr	r3, [r3, #8]
 80141b6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80141ba:	683b      	ldr	r3, [r7, #0]
 80141bc:	791b      	ldrb	r3, [r3, #4]
 80141be:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80141c0:	430b      	orrs	r3, r1
 80141c2:	431a      	orrs	r2, r3
 80141c4:	68bb      	ldr	r3, [r7, #8]
 80141c6:	0159      	lsls	r1, r3, #5
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	440b      	add	r3, r1
 80141cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80141d0:	4619      	mov	r1, r3
 80141d2:	4b05      	ldr	r3, [pc, #20]	; (80141e8 <USB_ActivateEndpoint+0x10c>)
 80141d4:	4313      	orrs	r3, r2
 80141d6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80141d8:	2300      	movs	r3, #0
}
 80141da:	4618      	mov	r0, r3
 80141dc:	3714      	adds	r7, #20
 80141de:	46bd      	mov	sp, r7
 80141e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e4:	4770      	bx	lr
 80141e6:	bf00      	nop
 80141e8:	10008000 	.word	0x10008000

080141ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80141ec:	b480      	push	{r7}
 80141ee:	b085      	sub	sp, #20
 80141f0:	af00      	add	r7, sp, #0
 80141f2:	6078      	str	r0, [r7, #4]
 80141f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80141fa:	683b      	ldr	r3, [r7, #0]
 80141fc:	781b      	ldrb	r3, [r3, #0]
 80141fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8014200:	683b      	ldr	r3, [r7, #0]
 8014202:	785b      	ldrb	r3, [r3, #1]
 8014204:	2b01      	cmp	r3, #1
 8014206:	d161      	bne.n	80142cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014208:	68bb      	ldr	r3, [r7, #8]
 801420a:	015a      	lsls	r2, r3, #5
 801420c:	68fb      	ldr	r3, [r7, #12]
 801420e:	4413      	add	r3, r2
 8014210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801421a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801421e:	d11f      	bne.n	8014260 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8014220:	68bb      	ldr	r3, [r7, #8]
 8014222:	015a      	lsls	r2, r3, #5
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	4413      	add	r3, r2
 8014228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	68ba      	ldr	r2, [r7, #8]
 8014230:	0151      	lsls	r1, r2, #5
 8014232:	68fa      	ldr	r2, [r7, #12]
 8014234:	440a      	add	r2, r1
 8014236:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801423a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801423e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8014240:	68bb      	ldr	r3, [r7, #8]
 8014242:	015a      	lsls	r2, r3, #5
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	4413      	add	r3, r2
 8014248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	68ba      	ldr	r2, [r7, #8]
 8014250:	0151      	lsls	r1, r2, #5
 8014252:	68fa      	ldr	r2, [r7, #12]
 8014254:	440a      	add	r2, r1
 8014256:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801425a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801425e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014266:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014268:	683b      	ldr	r3, [r7, #0]
 801426a:	781b      	ldrb	r3, [r3, #0]
 801426c:	f003 030f 	and.w	r3, r3, #15
 8014270:	2101      	movs	r1, #1
 8014272:	fa01 f303 	lsl.w	r3, r1, r3
 8014276:	b29b      	uxth	r3, r3
 8014278:	43db      	mvns	r3, r3
 801427a:	68f9      	ldr	r1, [r7, #12]
 801427c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014280:	4013      	ands	r3, r2
 8014282:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014284:	68fb      	ldr	r3, [r7, #12]
 8014286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801428a:	69da      	ldr	r2, [r3, #28]
 801428c:	683b      	ldr	r3, [r7, #0]
 801428e:	781b      	ldrb	r3, [r3, #0]
 8014290:	f003 030f 	and.w	r3, r3, #15
 8014294:	2101      	movs	r1, #1
 8014296:	fa01 f303 	lsl.w	r3, r1, r3
 801429a:	b29b      	uxth	r3, r3
 801429c:	43db      	mvns	r3, r3
 801429e:	68f9      	ldr	r1, [r7, #12]
 80142a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80142a4:	4013      	ands	r3, r2
 80142a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80142a8:	68bb      	ldr	r3, [r7, #8]
 80142aa:	015a      	lsls	r2, r3, #5
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	4413      	add	r3, r2
 80142b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142b4:	681a      	ldr	r2, [r3, #0]
 80142b6:	68bb      	ldr	r3, [r7, #8]
 80142b8:	0159      	lsls	r1, r3, #5
 80142ba:	68fb      	ldr	r3, [r7, #12]
 80142bc:	440b      	add	r3, r1
 80142be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142c2:	4619      	mov	r1, r3
 80142c4:	4b35      	ldr	r3, [pc, #212]	; (801439c <USB_DeactivateEndpoint+0x1b0>)
 80142c6:	4013      	ands	r3, r2
 80142c8:	600b      	str	r3, [r1, #0]
 80142ca:	e060      	b.n	801438e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80142cc:	68bb      	ldr	r3, [r7, #8]
 80142ce:	015a      	lsls	r2, r3, #5
 80142d0:	68fb      	ldr	r3, [r7, #12]
 80142d2:	4413      	add	r3, r2
 80142d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80142d8:	681b      	ldr	r3, [r3, #0]
 80142da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80142de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80142e2:	d11f      	bne.n	8014324 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80142e4:	68bb      	ldr	r3, [r7, #8]
 80142e6:	015a      	lsls	r2, r3, #5
 80142e8:	68fb      	ldr	r3, [r7, #12]
 80142ea:	4413      	add	r3, r2
 80142ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	68ba      	ldr	r2, [r7, #8]
 80142f4:	0151      	lsls	r1, r2, #5
 80142f6:	68fa      	ldr	r2, [r7, #12]
 80142f8:	440a      	add	r2, r1
 80142fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80142fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014302:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8014304:	68bb      	ldr	r3, [r7, #8]
 8014306:	015a      	lsls	r2, r3, #5
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	4413      	add	r3, r2
 801430c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	68ba      	ldr	r2, [r7, #8]
 8014314:	0151      	lsls	r1, r2, #5
 8014316:	68fa      	ldr	r2, [r7, #12]
 8014318:	440a      	add	r2, r1
 801431a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801431e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014322:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801432a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801432c:	683b      	ldr	r3, [r7, #0]
 801432e:	781b      	ldrb	r3, [r3, #0]
 8014330:	f003 030f 	and.w	r3, r3, #15
 8014334:	2101      	movs	r1, #1
 8014336:	fa01 f303 	lsl.w	r3, r1, r3
 801433a:	041b      	lsls	r3, r3, #16
 801433c:	43db      	mvns	r3, r3
 801433e:	68f9      	ldr	r1, [r7, #12]
 8014340:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014344:	4013      	ands	r3, r2
 8014346:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801434e:	69da      	ldr	r2, [r3, #28]
 8014350:	683b      	ldr	r3, [r7, #0]
 8014352:	781b      	ldrb	r3, [r3, #0]
 8014354:	f003 030f 	and.w	r3, r3, #15
 8014358:	2101      	movs	r1, #1
 801435a:	fa01 f303 	lsl.w	r3, r1, r3
 801435e:	041b      	lsls	r3, r3, #16
 8014360:	43db      	mvns	r3, r3
 8014362:	68f9      	ldr	r1, [r7, #12]
 8014364:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014368:	4013      	ands	r3, r2
 801436a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801436c:	68bb      	ldr	r3, [r7, #8]
 801436e:	015a      	lsls	r2, r3, #5
 8014370:	68fb      	ldr	r3, [r7, #12]
 8014372:	4413      	add	r3, r2
 8014374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014378:	681a      	ldr	r2, [r3, #0]
 801437a:	68bb      	ldr	r3, [r7, #8]
 801437c:	0159      	lsls	r1, r3, #5
 801437e:	68fb      	ldr	r3, [r7, #12]
 8014380:	440b      	add	r3, r1
 8014382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014386:	4619      	mov	r1, r3
 8014388:	4b05      	ldr	r3, [pc, #20]	; (80143a0 <USB_DeactivateEndpoint+0x1b4>)
 801438a:	4013      	ands	r3, r2
 801438c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801438e:	2300      	movs	r3, #0
}
 8014390:	4618      	mov	r0, r3
 8014392:	3714      	adds	r7, #20
 8014394:	46bd      	mov	sp, r7
 8014396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801439a:	4770      	bx	lr
 801439c:	ec337800 	.word	0xec337800
 80143a0:	eff37800 	.word	0xeff37800

080143a4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80143a4:	b580      	push	{r7, lr}
 80143a6:	b08a      	sub	sp, #40	; 0x28
 80143a8:	af02      	add	r7, sp, #8
 80143aa:	60f8      	str	r0, [r7, #12]
 80143ac:	60b9      	str	r1, [r7, #8]
 80143ae:	4613      	mov	r3, r2
 80143b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80143b6:	68bb      	ldr	r3, [r7, #8]
 80143b8:	781b      	ldrb	r3, [r3, #0]
 80143ba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80143bc:	68bb      	ldr	r3, [r7, #8]
 80143be:	785b      	ldrb	r3, [r3, #1]
 80143c0:	2b01      	cmp	r3, #1
 80143c2:	f040 8181 	bne.w	80146c8 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80143c6:	68bb      	ldr	r3, [r7, #8]
 80143c8:	691b      	ldr	r3, [r3, #16]
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d132      	bne.n	8014434 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80143ce:	69bb      	ldr	r3, [r7, #24]
 80143d0:	015a      	lsls	r2, r3, #5
 80143d2:	69fb      	ldr	r3, [r7, #28]
 80143d4:	4413      	add	r3, r2
 80143d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143da:	691a      	ldr	r2, [r3, #16]
 80143dc:	69bb      	ldr	r3, [r7, #24]
 80143de:	0159      	lsls	r1, r3, #5
 80143e0:	69fb      	ldr	r3, [r7, #28]
 80143e2:	440b      	add	r3, r1
 80143e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143e8:	4619      	mov	r1, r3
 80143ea:	4ba5      	ldr	r3, [pc, #660]	; (8014680 <USB_EPStartXfer+0x2dc>)
 80143ec:	4013      	ands	r3, r2
 80143ee:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80143f0:	69bb      	ldr	r3, [r7, #24]
 80143f2:	015a      	lsls	r2, r3, #5
 80143f4:	69fb      	ldr	r3, [r7, #28]
 80143f6:	4413      	add	r3, r2
 80143f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143fc:	691b      	ldr	r3, [r3, #16]
 80143fe:	69ba      	ldr	r2, [r7, #24]
 8014400:	0151      	lsls	r1, r2, #5
 8014402:	69fa      	ldr	r2, [r7, #28]
 8014404:	440a      	add	r2, r1
 8014406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801440a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801440e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014410:	69bb      	ldr	r3, [r7, #24]
 8014412:	015a      	lsls	r2, r3, #5
 8014414:	69fb      	ldr	r3, [r7, #28]
 8014416:	4413      	add	r3, r2
 8014418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801441c:	691a      	ldr	r2, [r3, #16]
 801441e:	69bb      	ldr	r3, [r7, #24]
 8014420:	0159      	lsls	r1, r3, #5
 8014422:	69fb      	ldr	r3, [r7, #28]
 8014424:	440b      	add	r3, r1
 8014426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801442a:	4619      	mov	r1, r3
 801442c:	4b95      	ldr	r3, [pc, #596]	; (8014684 <USB_EPStartXfer+0x2e0>)
 801442e:	4013      	ands	r3, r2
 8014430:	610b      	str	r3, [r1, #16]
 8014432:	e092      	b.n	801455a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014434:	69bb      	ldr	r3, [r7, #24]
 8014436:	015a      	lsls	r2, r3, #5
 8014438:	69fb      	ldr	r3, [r7, #28]
 801443a:	4413      	add	r3, r2
 801443c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014440:	691a      	ldr	r2, [r3, #16]
 8014442:	69bb      	ldr	r3, [r7, #24]
 8014444:	0159      	lsls	r1, r3, #5
 8014446:	69fb      	ldr	r3, [r7, #28]
 8014448:	440b      	add	r3, r1
 801444a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801444e:	4619      	mov	r1, r3
 8014450:	4b8c      	ldr	r3, [pc, #560]	; (8014684 <USB_EPStartXfer+0x2e0>)
 8014452:	4013      	ands	r3, r2
 8014454:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014456:	69bb      	ldr	r3, [r7, #24]
 8014458:	015a      	lsls	r2, r3, #5
 801445a:	69fb      	ldr	r3, [r7, #28]
 801445c:	4413      	add	r3, r2
 801445e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014462:	691a      	ldr	r2, [r3, #16]
 8014464:	69bb      	ldr	r3, [r7, #24]
 8014466:	0159      	lsls	r1, r3, #5
 8014468:	69fb      	ldr	r3, [r7, #28]
 801446a:	440b      	add	r3, r1
 801446c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014470:	4619      	mov	r1, r3
 8014472:	4b83      	ldr	r3, [pc, #524]	; (8014680 <USB_EPStartXfer+0x2dc>)
 8014474:	4013      	ands	r3, r2
 8014476:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8014478:	69bb      	ldr	r3, [r7, #24]
 801447a:	2b00      	cmp	r3, #0
 801447c:	d11a      	bne.n	80144b4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 801447e:	68bb      	ldr	r3, [r7, #8]
 8014480:	691a      	ldr	r2, [r3, #16]
 8014482:	68bb      	ldr	r3, [r7, #8]
 8014484:	689b      	ldr	r3, [r3, #8]
 8014486:	429a      	cmp	r2, r3
 8014488:	d903      	bls.n	8014492 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 801448a:	68bb      	ldr	r3, [r7, #8]
 801448c:	689a      	ldr	r2, [r3, #8]
 801448e:	68bb      	ldr	r3, [r7, #8]
 8014490:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014492:	69bb      	ldr	r3, [r7, #24]
 8014494:	015a      	lsls	r2, r3, #5
 8014496:	69fb      	ldr	r3, [r7, #28]
 8014498:	4413      	add	r3, r2
 801449a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801449e:	691b      	ldr	r3, [r3, #16]
 80144a0:	69ba      	ldr	r2, [r7, #24]
 80144a2:	0151      	lsls	r1, r2, #5
 80144a4:	69fa      	ldr	r2, [r7, #28]
 80144a6:	440a      	add	r2, r1
 80144a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80144ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80144b0:	6113      	str	r3, [r2, #16]
 80144b2:	e01b      	b.n	80144ec <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80144b4:	69bb      	ldr	r3, [r7, #24]
 80144b6:	015a      	lsls	r2, r3, #5
 80144b8:	69fb      	ldr	r3, [r7, #28]
 80144ba:	4413      	add	r3, r2
 80144bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80144c0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80144c2:	68bb      	ldr	r3, [r7, #8]
 80144c4:	6919      	ldr	r1, [r3, #16]
 80144c6:	68bb      	ldr	r3, [r7, #8]
 80144c8:	689b      	ldr	r3, [r3, #8]
 80144ca:	440b      	add	r3, r1
 80144cc:	1e59      	subs	r1, r3, #1
 80144ce:	68bb      	ldr	r3, [r7, #8]
 80144d0:	689b      	ldr	r3, [r3, #8]
 80144d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80144d6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80144d8:	4b6b      	ldr	r3, [pc, #428]	; (8014688 <USB_EPStartXfer+0x2e4>)
 80144da:	400b      	ands	r3, r1
 80144dc:	69b9      	ldr	r1, [r7, #24]
 80144de:	0148      	lsls	r0, r1, #5
 80144e0:	69f9      	ldr	r1, [r7, #28]
 80144e2:	4401      	add	r1, r0
 80144e4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80144e8:	4313      	orrs	r3, r2
 80144ea:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80144ec:	69bb      	ldr	r3, [r7, #24]
 80144ee:	015a      	lsls	r2, r3, #5
 80144f0:	69fb      	ldr	r3, [r7, #28]
 80144f2:	4413      	add	r3, r2
 80144f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80144f8:	691a      	ldr	r2, [r3, #16]
 80144fa:	68bb      	ldr	r3, [r7, #8]
 80144fc:	691b      	ldr	r3, [r3, #16]
 80144fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014502:	69b9      	ldr	r1, [r7, #24]
 8014504:	0148      	lsls	r0, r1, #5
 8014506:	69f9      	ldr	r1, [r7, #28]
 8014508:	4401      	add	r1, r0
 801450a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801450e:	4313      	orrs	r3, r2
 8014510:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8014512:	68bb      	ldr	r3, [r7, #8]
 8014514:	791b      	ldrb	r3, [r3, #4]
 8014516:	2b01      	cmp	r3, #1
 8014518:	d11f      	bne.n	801455a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801451a:	69bb      	ldr	r3, [r7, #24]
 801451c:	015a      	lsls	r2, r3, #5
 801451e:	69fb      	ldr	r3, [r7, #28]
 8014520:	4413      	add	r3, r2
 8014522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014526:	691b      	ldr	r3, [r3, #16]
 8014528:	69ba      	ldr	r2, [r7, #24]
 801452a:	0151      	lsls	r1, r2, #5
 801452c:	69fa      	ldr	r2, [r7, #28]
 801452e:	440a      	add	r2, r1
 8014530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014534:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8014538:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801453a:	69bb      	ldr	r3, [r7, #24]
 801453c:	015a      	lsls	r2, r3, #5
 801453e:	69fb      	ldr	r3, [r7, #28]
 8014540:	4413      	add	r3, r2
 8014542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014546:	691b      	ldr	r3, [r3, #16]
 8014548:	69ba      	ldr	r2, [r7, #24]
 801454a:	0151      	lsls	r1, r2, #5
 801454c:	69fa      	ldr	r2, [r7, #28]
 801454e:	440a      	add	r2, r1
 8014550:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014554:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014558:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801455a:	79fb      	ldrb	r3, [r7, #7]
 801455c:	2b01      	cmp	r3, #1
 801455e:	d14b      	bne.n	80145f8 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8014560:	68bb      	ldr	r3, [r7, #8]
 8014562:	69db      	ldr	r3, [r3, #28]
 8014564:	2b00      	cmp	r3, #0
 8014566:	d009      	beq.n	801457c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8014568:	69bb      	ldr	r3, [r7, #24]
 801456a:	015a      	lsls	r2, r3, #5
 801456c:	69fb      	ldr	r3, [r7, #28]
 801456e:	4413      	add	r3, r2
 8014570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014574:	461a      	mov	r2, r3
 8014576:	68bb      	ldr	r3, [r7, #8]
 8014578:	69db      	ldr	r3, [r3, #28]
 801457a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801457c:	68bb      	ldr	r3, [r7, #8]
 801457e:	791b      	ldrb	r3, [r3, #4]
 8014580:	2b01      	cmp	r3, #1
 8014582:	d128      	bne.n	80145d6 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014584:	69fb      	ldr	r3, [r7, #28]
 8014586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801458a:	689b      	ldr	r3, [r3, #8]
 801458c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014590:	2b00      	cmp	r3, #0
 8014592:	d110      	bne.n	80145b6 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014594:	69bb      	ldr	r3, [r7, #24]
 8014596:	015a      	lsls	r2, r3, #5
 8014598:	69fb      	ldr	r3, [r7, #28]
 801459a:	4413      	add	r3, r2
 801459c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	69ba      	ldr	r2, [r7, #24]
 80145a4:	0151      	lsls	r1, r2, #5
 80145a6:	69fa      	ldr	r2, [r7, #28]
 80145a8:	440a      	add	r2, r1
 80145aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80145ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80145b2:	6013      	str	r3, [r2, #0]
 80145b4:	e00f      	b.n	80145d6 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80145b6:	69bb      	ldr	r3, [r7, #24]
 80145b8:	015a      	lsls	r2, r3, #5
 80145ba:	69fb      	ldr	r3, [r7, #28]
 80145bc:	4413      	add	r3, r2
 80145be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	69ba      	ldr	r2, [r7, #24]
 80145c6:	0151      	lsls	r1, r2, #5
 80145c8:	69fa      	ldr	r2, [r7, #28]
 80145ca:	440a      	add	r2, r1
 80145cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80145d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80145d4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80145d6:	69bb      	ldr	r3, [r7, #24]
 80145d8:	015a      	lsls	r2, r3, #5
 80145da:	69fb      	ldr	r3, [r7, #28]
 80145dc:	4413      	add	r3, r2
 80145de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	69ba      	ldr	r2, [r7, #24]
 80145e6:	0151      	lsls	r1, r2, #5
 80145e8:	69fa      	ldr	r2, [r7, #28]
 80145ea:	440a      	add	r2, r1
 80145ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80145f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80145f4:	6013      	str	r3, [r2, #0]
 80145f6:	e16a      	b.n	80148ce <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80145f8:	69bb      	ldr	r3, [r7, #24]
 80145fa:	015a      	lsls	r2, r3, #5
 80145fc:	69fb      	ldr	r3, [r7, #28]
 80145fe:	4413      	add	r3, r2
 8014600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	69ba      	ldr	r2, [r7, #24]
 8014608:	0151      	lsls	r1, r2, #5
 801460a:	69fa      	ldr	r2, [r7, #28]
 801460c:	440a      	add	r2, r1
 801460e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014612:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014616:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8014618:	68bb      	ldr	r3, [r7, #8]
 801461a:	791b      	ldrb	r3, [r3, #4]
 801461c:	2b01      	cmp	r3, #1
 801461e:	d015      	beq.n	801464c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8014620:	68bb      	ldr	r3, [r7, #8]
 8014622:	691b      	ldr	r3, [r3, #16]
 8014624:	2b00      	cmp	r3, #0
 8014626:	f000 8152 	beq.w	80148ce <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801462a:	69fb      	ldr	r3, [r7, #28]
 801462c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014630:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014632:	68bb      	ldr	r3, [r7, #8]
 8014634:	781b      	ldrb	r3, [r3, #0]
 8014636:	f003 030f 	and.w	r3, r3, #15
 801463a:	2101      	movs	r1, #1
 801463c:	fa01 f303 	lsl.w	r3, r1, r3
 8014640:	69f9      	ldr	r1, [r7, #28]
 8014642:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014646:	4313      	orrs	r3, r2
 8014648:	634b      	str	r3, [r1, #52]	; 0x34
 801464a:	e140      	b.n	80148ce <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801464c:	69fb      	ldr	r3, [r7, #28]
 801464e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014652:	689b      	ldr	r3, [r3, #8]
 8014654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014658:	2b00      	cmp	r3, #0
 801465a:	d117      	bne.n	801468c <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801465c:	69bb      	ldr	r3, [r7, #24]
 801465e:	015a      	lsls	r2, r3, #5
 8014660:	69fb      	ldr	r3, [r7, #28]
 8014662:	4413      	add	r3, r2
 8014664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014668:	681b      	ldr	r3, [r3, #0]
 801466a:	69ba      	ldr	r2, [r7, #24]
 801466c:	0151      	lsls	r1, r2, #5
 801466e:	69fa      	ldr	r2, [r7, #28]
 8014670:	440a      	add	r2, r1
 8014672:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014676:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801467a:	6013      	str	r3, [r2, #0]
 801467c:	e016      	b.n	80146ac <USB_EPStartXfer+0x308>
 801467e:	bf00      	nop
 8014680:	e007ffff 	.word	0xe007ffff
 8014684:	fff80000 	.word	0xfff80000
 8014688:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801468c:	69bb      	ldr	r3, [r7, #24]
 801468e:	015a      	lsls	r2, r3, #5
 8014690:	69fb      	ldr	r3, [r7, #28]
 8014692:	4413      	add	r3, r2
 8014694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	69ba      	ldr	r2, [r7, #24]
 801469c:	0151      	lsls	r1, r2, #5
 801469e:	69fa      	ldr	r2, [r7, #28]
 80146a0:	440a      	add	r2, r1
 80146a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80146a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80146aa:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80146ac:	68bb      	ldr	r3, [r7, #8]
 80146ae:	68d9      	ldr	r1, [r3, #12]
 80146b0:	68bb      	ldr	r3, [r7, #8]
 80146b2:	781a      	ldrb	r2, [r3, #0]
 80146b4:	68bb      	ldr	r3, [r7, #8]
 80146b6:	691b      	ldr	r3, [r3, #16]
 80146b8:	b298      	uxth	r0, r3
 80146ba:	79fb      	ldrb	r3, [r7, #7]
 80146bc:	9300      	str	r3, [sp, #0]
 80146be:	4603      	mov	r3, r0
 80146c0:	68f8      	ldr	r0, [r7, #12]
 80146c2:	f000 f9b9 	bl	8014a38 <USB_WritePacket>
 80146c6:	e102      	b.n	80148ce <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80146c8:	69bb      	ldr	r3, [r7, #24]
 80146ca:	015a      	lsls	r2, r3, #5
 80146cc:	69fb      	ldr	r3, [r7, #28]
 80146ce:	4413      	add	r3, r2
 80146d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80146d4:	691a      	ldr	r2, [r3, #16]
 80146d6:	69bb      	ldr	r3, [r7, #24]
 80146d8:	0159      	lsls	r1, r3, #5
 80146da:	69fb      	ldr	r3, [r7, #28]
 80146dc:	440b      	add	r3, r1
 80146de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80146e2:	4619      	mov	r1, r3
 80146e4:	4b7c      	ldr	r3, [pc, #496]	; (80148d8 <USB_EPStartXfer+0x534>)
 80146e6:	4013      	ands	r3, r2
 80146e8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80146ea:	69bb      	ldr	r3, [r7, #24]
 80146ec:	015a      	lsls	r2, r3, #5
 80146ee:	69fb      	ldr	r3, [r7, #28]
 80146f0:	4413      	add	r3, r2
 80146f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80146f6:	691a      	ldr	r2, [r3, #16]
 80146f8:	69bb      	ldr	r3, [r7, #24]
 80146fa:	0159      	lsls	r1, r3, #5
 80146fc:	69fb      	ldr	r3, [r7, #28]
 80146fe:	440b      	add	r3, r1
 8014700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014704:	4619      	mov	r1, r3
 8014706:	4b75      	ldr	r3, [pc, #468]	; (80148dc <USB_EPStartXfer+0x538>)
 8014708:	4013      	ands	r3, r2
 801470a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 801470c:	69bb      	ldr	r3, [r7, #24]
 801470e:	2b00      	cmp	r3, #0
 8014710:	d12f      	bne.n	8014772 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8014712:	68bb      	ldr	r3, [r7, #8]
 8014714:	691b      	ldr	r3, [r3, #16]
 8014716:	2b00      	cmp	r3, #0
 8014718:	d003      	beq.n	8014722 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 801471a:	68bb      	ldr	r3, [r7, #8]
 801471c:	689a      	ldr	r2, [r3, #8]
 801471e:	68bb      	ldr	r3, [r7, #8]
 8014720:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8014722:	68bb      	ldr	r3, [r7, #8]
 8014724:	689a      	ldr	r2, [r3, #8]
 8014726:	68bb      	ldr	r3, [r7, #8]
 8014728:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801472a:	69bb      	ldr	r3, [r7, #24]
 801472c:	015a      	lsls	r2, r3, #5
 801472e:	69fb      	ldr	r3, [r7, #28]
 8014730:	4413      	add	r3, r2
 8014732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014736:	691a      	ldr	r2, [r3, #16]
 8014738:	68bb      	ldr	r3, [r7, #8]
 801473a:	6a1b      	ldr	r3, [r3, #32]
 801473c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014740:	69b9      	ldr	r1, [r7, #24]
 8014742:	0148      	lsls	r0, r1, #5
 8014744:	69f9      	ldr	r1, [r7, #28]
 8014746:	4401      	add	r1, r0
 8014748:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801474c:	4313      	orrs	r3, r2
 801474e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014750:	69bb      	ldr	r3, [r7, #24]
 8014752:	015a      	lsls	r2, r3, #5
 8014754:	69fb      	ldr	r3, [r7, #28]
 8014756:	4413      	add	r3, r2
 8014758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801475c:	691b      	ldr	r3, [r3, #16]
 801475e:	69ba      	ldr	r2, [r7, #24]
 8014760:	0151      	lsls	r1, r2, #5
 8014762:	69fa      	ldr	r2, [r7, #28]
 8014764:	440a      	add	r2, r1
 8014766:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801476a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801476e:	6113      	str	r3, [r2, #16]
 8014770:	e05f      	b.n	8014832 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8014772:	68bb      	ldr	r3, [r7, #8]
 8014774:	691b      	ldr	r3, [r3, #16]
 8014776:	2b00      	cmp	r3, #0
 8014778:	d123      	bne.n	80147c2 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801477a:	69bb      	ldr	r3, [r7, #24]
 801477c:	015a      	lsls	r2, r3, #5
 801477e:	69fb      	ldr	r3, [r7, #28]
 8014780:	4413      	add	r3, r2
 8014782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014786:	691a      	ldr	r2, [r3, #16]
 8014788:	68bb      	ldr	r3, [r7, #8]
 801478a:	689b      	ldr	r3, [r3, #8]
 801478c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014790:	69b9      	ldr	r1, [r7, #24]
 8014792:	0148      	lsls	r0, r1, #5
 8014794:	69f9      	ldr	r1, [r7, #28]
 8014796:	4401      	add	r1, r0
 8014798:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801479c:	4313      	orrs	r3, r2
 801479e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80147a0:	69bb      	ldr	r3, [r7, #24]
 80147a2:	015a      	lsls	r2, r3, #5
 80147a4:	69fb      	ldr	r3, [r7, #28]
 80147a6:	4413      	add	r3, r2
 80147a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80147ac:	691b      	ldr	r3, [r3, #16]
 80147ae:	69ba      	ldr	r2, [r7, #24]
 80147b0:	0151      	lsls	r1, r2, #5
 80147b2:	69fa      	ldr	r2, [r7, #28]
 80147b4:	440a      	add	r2, r1
 80147b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80147ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80147be:	6113      	str	r3, [r2, #16]
 80147c0:	e037      	b.n	8014832 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80147c2:	68bb      	ldr	r3, [r7, #8]
 80147c4:	691a      	ldr	r2, [r3, #16]
 80147c6:	68bb      	ldr	r3, [r7, #8]
 80147c8:	689b      	ldr	r3, [r3, #8]
 80147ca:	4413      	add	r3, r2
 80147cc:	1e5a      	subs	r2, r3, #1
 80147ce:	68bb      	ldr	r3, [r7, #8]
 80147d0:	689b      	ldr	r3, [r3, #8]
 80147d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80147d6:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80147d8:	68bb      	ldr	r3, [r7, #8]
 80147da:	689b      	ldr	r3, [r3, #8]
 80147dc:	8afa      	ldrh	r2, [r7, #22]
 80147de:	fb03 f202 	mul.w	r2, r3, r2
 80147e2:	68bb      	ldr	r3, [r7, #8]
 80147e4:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80147e6:	69bb      	ldr	r3, [r7, #24]
 80147e8:	015a      	lsls	r2, r3, #5
 80147ea:	69fb      	ldr	r3, [r7, #28]
 80147ec:	4413      	add	r3, r2
 80147ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80147f2:	691a      	ldr	r2, [r3, #16]
 80147f4:	8afb      	ldrh	r3, [r7, #22]
 80147f6:	04d9      	lsls	r1, r3, #19
 80147f8:	4b39      	ldr	r3, [pc, #228]	; (80148e0 <USB_EPStartXfer+0x53c>)
 80147fa:	400b      	ands	r3, r1
 80147fc:	69b9      	ldr	r1, [r7, #24]
 80147fe:	0148      	lsls	r0, r1, #5
 8014800:	69f9      	ldr	r1, [r7, #28]
 8014802:	4401      	add	r1, r0
 8014804:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014808:	4313      	orrs	r3, r2
 801480a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 801480c:	69bb      	ldr	r3, [r7, #24]
 801480e:	015a      	lsls	r2, r3, #5
 8014810:	69fb      	ldr	r3, [r7, #28]
 8014812:	4413      	add	r3, r2
 8014814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014818:	691a      	ldr	r2, [r3, #16]
 801481a:	68bb      	ldr	r3, [r7, #8]
 801481c:	6a1b      	ldr	r3, [r3, #32]
 801481e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014822:	69b9      	ldr	r1, [r7, #24]
 8014824:	0148      	lsls	r0, r1, #5
 8014826:	69f9      	ldr	r1, [r7, #28]
 8014828:	4401      	add	r1, r0
 801482a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801482e:	4313      	orrs	r3, r2
 8014830:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8014832:	79fb      	ldrb	r3, [r7, #7]
 8014834:	2b01      	cmp	r3, #1
 8014836:	d10d      	bne.n	8014854 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8014838:	68bb      	ldr	r3, [r7, #8]
 801483a:	68db      	ldr	r3, [r3, #12]
 801483c:	2b00      	cmp	r3, #0
 801483e:	d009      	beq.n	8014854 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8014840:	68bb      	ldr	r3, [r7, #8]
 8014842:	68d9      	ldr	r1, [r3, #12]
 8014844:	69bb      	ldr	r3, [r7, #24]
 8014846:	015a      	lsls	r2, r3, #5
 8014848:	69fb      	ldr	r3, [r7, #28]
 801484a:	4413      	add	r3, r2
 801484c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014850:	460a      	mov	r2, r1
 8014852:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8014854:	68bb      	ldr	r3, [r7, #8]
 8014856:	791b      	ldrb	r3, [r3, #4]
 8014858:	2b01      	cmp	r3, #1
 801485a:	d128      	bne.n	80148ae <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801485c:	69fb      	ldr	r3, [r7, #28]
 801485e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014862:	689b      	ldr	r3, [r3, #8]
 8014864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014868:	2b00      	cmp	r3, #0
 801486a:	d110      	bne.n	801488e <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801486c:	69bb      	ldr	r3, [r7, #24]
 801486e:	015a      	lsls	r2, r3, #5
 8014870:	69fb      	ldr	r3, [r7, #28]
 8014872:	4413      	add	r3, r2
 8014874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	69ba      	ldr	r2, [r7, #24]
 801487c:	0151      	lsls	r1, r2, #5
 801487e:	69fa      	ldr	r2, [r7, #28]
 8014880:	440a      	add	r2, r1
 8014882:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014886:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801488a:	6013      	str	r3, [r2, #0]
 801488c:	e00f      	b.n	80148ae <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801488e:	69bb      	ldr	r3, [r7, #24]
 8014890:	015a      	lsls	r2, r3, #5
 8014892:	69fb      	ldr	r3, [r7, #28]
 8014894:	4413      	add	r3, r2
 8014896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	69ba      	ldr	r2, [r7, #24]
 801489e:	0151      	lsls	r1, r2, #5
 80148a0:	69fa      	ldr	r2, [r7, #28]
 80148a2:	440a      	add	r2, r1
 80148a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80148a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80148ac:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80148ae:	69bb      	ldr	r3, [r7, #24]
 80148b0:	015a      	lsls	r2, r3, #5
 80148b2:	69fb      	ldr	r3, [r7, #28]
 80148b4:	4413      	add	r3, r2
 80148b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	69ba      	ldr	r2, [r7, #24]
 80148be:	0151      	lsls	r1, r2, #5
 80148c0:	69fa      	ldr	r2, [r7, #28]
 80148c2:	440a      	add	r2, r1
 80148c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80148c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80148cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80148ce:	2300      	movs	r3, #0
}
 80148d0:	4618      	mov	r0, r3
 80148d2:	3720      	adds	r7, #32
 80148d4:	46bd      	mov	sp, r7
 80148d6:	bd80      	pop	{r7, pc}
 80148d8:	fff80000 	.word	0xfff80000
 80148dc:	e007ffff 	.word	0xe007ffff
 80148e0:	1ff80000 	.word	0x1ff80000

080148e4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80148e4:	b480      	push	{r7}
 80148e6:	b087      	sub	sp, #28
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	6078      	str	r0, [r7, #4]
 80148ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80148ee:	2300      	movs	r3, #0
 80148f0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80148f2:	2300      	movs	r3, #0
 80148f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80148fa:	683b      	ldr	r3, [r7, #0]
 80148fc:	785b      	ldrb	r3, [r3, #1]
 80148fe:	2b01      	cmp	r3, #1
 8014900:	d14a      	bne.n	8014998 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014902:	683b      	ldr	r3, [r7, #0]
 8014904:	781b      	ldrb	r3, [r3, #0]
 8014906:	015a      	lsls	r2, r3, #5
 8014908:	693b      	ldr	r3, [r7, #16]
 801490a:	4413      	add	r3, r2
 801490c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014916:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801491a:	f040 8086 	bne.w	8014a2a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801491e:	683b      	ldr	r3, [r7, #0]
 8014920:	781b      	ldrb	r3, [r3, #0]
 8014922:	015a      	lsls	r2, r3, #5
 8014924:	693b      	ldr	r3, [r7, #16]
 8014926:	4413      	add	r3, r2
 8014928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801492c:	681b      	ldr	r3, [r3, #0]
 801492e:	683a      	ldr	r2, [r7, #0]
 8014930:	7812      	ldrb	r2, [r2, #0]
 8014932:	0151      	lsls	r1, r2, #5
 8014934:	693a      	ldr	r2, [r7, #16]
 8014936:	440a      	add	r2, r1
 8014938:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801493c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014940:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8014942:	683b      	ldr	r3, [r7, #0]
 8014944:	781b      	ldrb	r3, [r3, #0]
 8014946:	015a      	lsls	r2, r3, #5
 8014948:	693b      	ldr	r3, [r7, #16]
 801494a:	4413      	add	r3, r2
 801494c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014950:	681b      	ldr	r3, [r3, #0]
 8014952:	683a      	ldr	r2, [r7, #0]
 8014954:	7812      	ldrb	r2, [r2, #0]
 8014956:	0151      	lsls	r1, r2, #5
 8014958:	693a      	ldr	r2, [r7, #16]
 801495a:	440a      	add	r2, r1
 801495c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014960:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014964:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014966:	68fb      	ldr	r3, [r7, #12]
 8014968:	3301      	adds	r3, #1
 801496a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	f242 7210 	movw	r2, #10000	; 0x2710
 8014972:	4293      	cmp	r3, r2
 8014974:	d902      	bls.n	801497c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8014976:	2301      	movs	r3, #1
 8014978:	75fb      	strb	r3, [r7, #23]
          break;
 801497a:	e056      	b.n	8014a2a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 801497c:	683b      	ldr	r3, [r7, #0]
 801497e:	781b      	ldrb	r3, [r3, #0]
 8014980:	015a      	lsls	r2, r3, #5
 8014982:	693b      	ldr	r3, [r7, #16]
 8014984:	4413      	add	r3, r2
 8014986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801498a:	681b      	ldr	r3, [r3, #0]
 801498c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014990:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014994:	d0e7      	beq.n	8014966 <USB_EPStopXfer+0x82>
 8014996:	e048      	b.n	8014a2a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014998:	683b      	ldr	r3, [r7, #0]
 801499a:	781b      	ldrb	r3, [r3, #0]
 801499c:	015a      	lsls	r2, r3, #5
 801499e:	693b      	ldr	r3, [r7, #16]
 80149a0:	4413      	add	r3, r2
 80149a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80149a6:	681b      	ldr	r3, [r3, #0]
 80149a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80149ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80149b0:	d13b      	bne.n	8014a2a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80149b2:	683b      	ldr	r3, [r7, #0]
 80149b4:	781b      	ldrb	r3, [r3, #0]
 80149b6:	015a      	lsls	r2, r3, #5
 80149b8:	693b      	ldr	r3, [r7, #16]
 80149ba:	4413      	add	r3, r2
 80149bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	683a      	ldr	r2, [r7, #0]
 80149c4:	7812      	ldrb	r2, [r2, #0]
 80149c6:	0151      	lsls	r1, r2, #5
 80149c8:	693a      	ldr	r2, [r7, #16]
 80149ca:	440a      	add	r2, r1
 80149cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80149d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80149d4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80149d6:	683b      	ldr	r3, [r7, #0]
 80149d8:	781b      	ldrb	r3, [r3, #0]
 80149da:	015a      	lsls	r2, r3, #5
 80149dc:	693b      	ldr	r3, [r7, #16]
 80149de:	4413      	add	r3, r2
 80149e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	683a      	ldr	r2, [r7, #0]
 80149e8:	7812      	ldrb	r2, [r2, #0]
 80149ea:	0151      	lsls	r1, r2, #5
 80149ec:	693a      	ldr	r2, [r7, #16]
 80149ee:	440a      	add	r2, r1
 80149f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80149f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80149f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80149fa:	68fb      	ldr	r3, [r7, #12]
 80149fc:	3301      	adds	r3, #1
 80149fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	f242 7210 	movw	r2, #10000	; 0x2710
 8014a06:	4293      	cmp	r3, r2
 8014a08:	d902      	bls.n	8014a10 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8014a0a:	2301      	movs	r3, #1
 8014a0c:	75fb      	strb	r3, [r7, #23]
          break;
 8014a0e:	e00c      	b.n	8014a2a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8014a10:	683b      	ldr	r3, [r7, #0]
 8014a12:	781b      	ldrb	r3, [r3, #0]
 8014a14:	015a      	lsls	r2, r3, #5
 8014a16:	693b      	ldr	r3, [r7, #16]
 8014a18:	4413      	add	r3, r2
 8014a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014a1e:	681b      	ldr	r3, [r3, #0]
 8014a20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014a24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014a28:	d0e7      	beq.n	80149fa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8014a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a2c:	4618      	mov	r0, r3
 8014a2e:	371c      	adds	r7, #28
 8014a30:	46bd      	mov	sp, r7
 8014a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a36:	4770      	bx	lr

08014a38 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8014a38:	b480      	push	{r7}
 8014a3a:	b089      	sub	sp, #36	; 0x24
 8014a3c:	af00      	add	r7, sp, #0
 8014a3e:	60f8      	str	r0, [r7, #12]
 8014a40:	60b9      	str	r1, [r7, #8]
 8014a42:	4611      	mov	r1, r2
 8014a44:	461a      	mov	r2, r3
 8014a46:	460b      	mov	r3, r1
 8014a48:	71fb      	strb	r3, [r7, #7]
 8014a4a:	4613      	mov	r3, r2
 8014a4c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8014a52:	68bb      	ldr	r3, [r7, #8]
 8014a54:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8014a56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d123      	bne.n	8014aa6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8014a5e:	88bb      	ldrh	r3, [r7, #4]
 8014a60:	3303      	adds	r3, #3
 8014a62:	089b      	lsrs	r3, r3, #2
 8014a64:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8014a66:	2300      	movs	r3, #0
 8014a68:	61bb      	str	r3, [r7, #24]
 8014a6a:	e018      	b.n	8014a9e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014a6c:	79fb      	ldrb	r3, [r7, #7]
 8014a6e:	031a      	lsls	r2, r3, #12
 8014a70:	697b      	ldr	r3, [r7, #20]
 8014a72:	4413      	add	r3, r2
 8014a74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014a78:	461a      	mov	r2, r3
 8014a7a:	69fb      	ldr	r3, [r7, #28]
 8014a7c:	681b      	ldr	r3, [r3, #0]
 8014a7e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8014a80:	69fb      	ldr	r3, [r7, #28]
 8014a82:	3301      	adds	r3, #1
 8014a84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014a86:	69fb      	ldr	r3, [r7, #28]
 8014a88:	3301      	adds	r3, #1
 8014a8a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014a8c:	69fb      	ldr	r3, [r7, #28]
 8014a8e:	3301      	adds	r3, #1
 8014a90:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014a92:	69fb      	ldr	r3, [r7, #28]
 8014a94:	3301      	adds	r3, #1
 8014a96:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8014a98:	69bb      	ldr	r3, [r7, #24]
 8014a9a:	3301      	adds	r3, #1
 8014a9c:	61bb      	str	r3, [r7, #24]
 8014a9e:	69ba      	ldr	r2, [r7, #24]
 8014aa0:	693b      	ldr	r3, [r7, #16]
 8014aa2:	429a      	cmp	r2, r3
 8014aa4:	d3e2      	bcc.n	8014a6c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8014aa6:	2300      	movs	r3, #0
}
 8014aa8:	4618      	mov	r0, r3
 8014aaa:	3724      	adds	r7, #36	; 0x24
 8014aac:	46bd      	mov	sp, r7
 8014aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ab2:	4770      	bx	lr

08014ab4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8014ab4:	b480      	push	{r7}
 8014ab6:	b08b      	sub	sp, #44	; 0x2c
 8014ab8:	af00      	add	r7, sp, #0
 8014aba:	60f8      	str	r0, [r7, #12]
 8014abc:	60b9      	str	r1, [r7, #8]
 8014abe:	4613      	mov	r3, r2
 8014ac0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014ac2:	68fb      	ldr	r3, [r7, #12]
 8014ac4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8014ac6:	68bb      	ldr	r3, [r7, #8]
 8014ac8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8014aca:	88fb      	ldrh	r3, [r7, #6]
 8014acc:	089b      	lsrs	r3, r3, #2
 8014ace:	b29b      	uxth	r3, r3
 8014ad0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8014ad2:	88fb      	ldrh	r3, [r7, #6]
 8014ad4:	f003 0303 	and.w	r3, r3, #3
 8014ad8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8014ada:	2300      	movs	r3, #0
 8014adc:	623b      	str	r3, [r7, #32]
 8014ade:	e014      	b.n	8014b0a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8014ae0:	69bb      	ldr	r3, [r7, #24]
 8014ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014ae6:	681a      	ldr	r2, [r3, #0]
 8014ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014aea:	601a      	str	r2, [r3, #0]
    pDest++;
 8014aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014aee:	3301      	adds	r3, #1
 8014af0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014af4:	3301      	adds	r3, #1
 8014af6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014afa:	3301      	adds	r3, #1
 8014afc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b00:	3301      	adds	r3, #1
 8014b02:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8014b04:	6a3b      	ldr	r3, [r7, #32]
 8014b06:	3301      	adds	r3, #1
 8014b08:	623b      	str	r3, [r7, #32]
 8014b0a:	6a3a      	ldr	r2, [r7, #32]
 8014b0c:	697b      	ldr	r3, [r7, #20]
 8014b0e:	429a      	cmp	r2, r3
 8014b10:	d3e6      	bcc.n	8014ae0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8014b12:	8bfb      	ldrh	r3, [r7, #30]
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d01e      	beq.n	8014b56 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8014b18:	2300      	movs	r3, #0
 8014b1a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8014b1c:	69bb      	ldr	r3, [r7, #24]
 8014b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014b22:	461a      	mov	r2, r3
 8014b24:	f107 0310 	add.w	r3, r7, #16
 8014b28:	6812      	ldr	r2, [r2, #0]
 8014b2a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8014b2c:	693a      	ldr	r2, [r7, #16]
 8014b2e:	6a3b      	ldr	r3, [r7, #32]
 8014b30:	b2db      	uxtb	r3, r3
 8014b32:	00db      	lsls	r3, r3, #3
 8014b34:	fa22 f303 	lsr.w	r3, r2, r3
 8014b38:	b2da      	uxtb	r2, r3
 8014b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b3c:	701a      	strb	r2, [r3, #0]
      i++;
 8014b3e:	6a3b      	ldr	r3, [r7, #32]
 8014b40:	3301      	adds	r3, #1
 8014b42:	623b      	str	r3, [r7, #32]
      pDest++;
 8014b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b46:	3301      	adds	r3, #1
 8014b48:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8014b4a:	8bfb      	ldrh	r3, [r7, #30]
 8014b4c:	3b01      	subs	r3, #1
 8014b4e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8014b50:	8bfb      	ldrh	r3, [r7, #30]
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d1ea      	bne.n	8014b2c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8014b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014b58:	4618      	mov	r0, r3
 8014b5a:	372c      	adds	r7, #44	; 0x2c
 8014b5c:	46bd      	mov	sp, r7
 8014b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b62:	4770      	bx	lr

08014b64 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014b64:	b480      	push	{r7}
 8014b66:	b085      	sub	sp, #20
 8014b68:	af00      	add	r7, sp, #0
 8014b6a:	6078      	str	r0, [r7, #4]
 8014b6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014b72:	683b      	ldr	r3, [r7, #0]
 8014b74:	781b      	ldrb	r3, [r3, #0]
 8014b76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014b78:	683b      	ldr	r3, [r7, #0]
 8014b7a:	785b      	ldrb	r3, [r3, #1]
 8014b7c:	2b01      	cmp	r3, #1
 8014b7e:	d12c      	bne.n	8014bda <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014b80:	68bb      	ldr	r3, [r7, #8]
 8014b82:	015a      	lsls	r2, r3, #5
 8014b84:	68fb      	ldr	r3, [r7, #12]
 8014b86:	4413      	add	r3, r2
 8014b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014b8c:	681b      	ldr	r3, [r3, #0]
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	db12      	blt.n	8014bb8 <USB_EPSetStall+0x54>
 8014b92:	68bb      	ldr	r3, [r7, #8]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d00f      	beq.n	8014bb8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8014b98:	68bb      	ldr	r3, [r7, #8]
 8014b9a:	015a      	lsls	r2, r3, #5
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	4413      	add	r3, r2
 8014ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	68ba      	ldr	r2, [r7, #8]
 8014ba8:	0151      	lsls	r1, r2, #5
 8014baa:	68fa      	ldr	r2, [r7, #12]
 8014bac:	440a      	add	r2, r1
 8014bae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014bb2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014bb6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8014bb8:	68bb      	ldr	r3, [r7, #8]
 8014bba:	015a      	lsls	r2, r3, #5
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	4413      	add	r3, r2
 8014bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	68ba      	ldr	r2, [r7, #8]
 8014bc8:	0151      	lsls	r1, r2, #5
 8014bca:	68fa      	ldr	r2, [r7, #12]
 8014bcc:	440a      	add	r2, r1
 8014bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014bd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014bd6:	6013      	str	r3, [r2, #0]
 8014bd8:	e02b      	b.n	8014c32 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014bda:	68bb      	ldr	r3, [r7, #8]
 8014bdc:	015a      	lsls	r2, r3, #5
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	4413      	add	r3, r2
 8014be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014be6:	681b      	ldr	r3, [r3, #0]
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	db12      	blt.n	8014c12 <USB_EPSetStall+0xae>
 8014bec:	68bb      	ldr	r3, [r7, #8]
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d00f      	beq.n	8014c12 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8014bf2:	68bb      	ldr	r3, [r7, #8]
 8014bf4:	015a      	lsls	r2, r3, #5
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	4413      	add	r3, r2
 8014bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	68ba      	ldr	r2, [r7, #8]
 8014c02:	0151      	lsls	r1, r2, #5
 8014c04:	68fa      	ldr	r2, [r7, #12]
 8014c06:	440a      	add	r2, r1
 8014c08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014c0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014c10:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8014c12:	68bb      	ldr	r3, [r7, #8]
 8014c14:	015a      	lsls	r2, r3, #5
 8014c16:	68fb      	ldr	r3, [r7, #12]
 8014c18:	4413      	add	r3, r2
 8014c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014c1e:	681b      	ldr	r3, [r3, #0]
 8014c20:	68ba      	ldr	r2, [r7, #8]
 8014c22:	0151      	lsls	r1, r2, #5
 8014c24:	68fa      	ldr	r2, [r7, #12]
 8014c26:	440a      	add	r2, r1
 8014c28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014c2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014c30:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014c32:	2300      	movs	r3, #0
}
 8014c34:	4618      	mov	r0, r3
 8014c36:	3714      	adds	r7, #20
 8014c38:	46bd      	mov	sp, r7
 8014c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c3e:	4770      	bx	lr

08014c40 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014c40:	b480      	push	{r7}
 8014c42:	b085      	sub	sp, #20
 8014c44:	af00      	add	r7, sp, #0
 8014c46:	6078      	str	r0, [r7, #4]
 8014c48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014c4e:	683b      	ldr	r3, [r7, #0]
 8014c50:	781b      	ldrb	r3, [r3, #0]
 8014c52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014c54:	683b      	ldr	r3, [r7, #0]
 8014c56:	785b      	ldrb	r3, [r3, #1]
 8014c58:	2b01      	cmp	r3, #1
 8014c5a:	d128      	bne.n	8014cae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8014c5c:	68bb      	ldr	r3, [r7, #8]
 8014c5e:	015a      	lsls	r2, r3, #5
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	4413      	add	r3, r2
 8014c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014c68:	681b      	ldr	r3, [r3, #0]
 8014c6a:	68ba      	ldr	r2, [r7, #8]
 8014c6c:	0151      	lsls	r1, r2, #5
 8014c6e:	68fa      	ldr	r2, [r7, #12]
 8014c70:	440a      	add	r2, r1
 8014c72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014c76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014c7a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014c7c:	683b      	ldr	r3, [r7, #0]
 8014c7e:	791b      	ldrb	r3, [r3, #4]
 8014c80:	2b03      	cmp	r3, #3
 8014c82:	d003      	beq.n	8014c8c <USB_EPClearStall+0x4c>
 8014c84:	683b      	ldr	r3, [r7, #0]
 8014c86:	791b      	ldrb	r3, [r3, #4]
 8014c88:	2b02      	cmp	r3, #2
 8014c8a:	d138      	bne.n	8014cfe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014c8c:	68bb      	ldr	r3, [r7, #8]
 8014c8e:	015a      	lsls	r2, r3, #5
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	4413      	add	r3, r2
 8014c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014c98:	681b      	ldr	r3, [r3, #0]
 8014c9a:	68ba      	ldr	r2, [r7, #8]
 8014c9c:	0151      	lsls	r1, r2, #5
 8014c9e:	68fa      	ldr	r2, [r7, #12]
 8014ca0:	440a      	add	r2, r1
 8014ca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014caa:	6013      	str	r3, [r2, #0]
 8014cac:	e027      	b.n	8014cfe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8014cae:	68bb      	ldr	r3, [r7, #8]
 8014cb0:	015a      	lsls	r2, r3, #5
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	4413      	add	r3, r2
 8014cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	68ba      	ldr	r2, [r7, #8]
 8014cbe:	0151      	lsls	r1, r2, #5
 8014cc0:	68fa      	ldr	r2, [r7, #12]
 8014cc2:	440a      	add	r2, r1
 8014cc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014cc8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014ccc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014cce:	683b      	ldr	r3, [r7, #0]
 8014cd0:	791b      	ldrb	r3, [r3, #4]
 8014cd2:	2b03      	cmp	r3, #3
 8014cd4:	d003      	beq.n	8014cde <USB_EPClearStall+0x9e>
 8014cd6:	683b      	ldr	r3, [r7, #0]
 8014cd8:	791b      	ldrb	r3, [r3, #4]
 8014cda:	2b02      	cmp	r3, #2
 8014cdc:	d10f      	bne.n	8014cfe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014cde:	68bb      	ldr	r3, [r7, #8]
 8014ce0:	015a      	lsls	r2, r3, #5
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	4413      	add	r3, r2
 8014ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014cea:	681b      	ldr	r3, [r3, #0]
 8014cec:	68ba      	ldr	r2, [r7, #8]
 8014cee:	0151      	lsls	r1, r2, #5
 8014cf0:	68fa      	ldr	r2, [r7, #12]
 8014cf2:	440a      	add	r2, r1
 8014cf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014cfc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8014cfe:	2300      	movs	r3, #0
}
 8014d00:	4618      	mov	r0, r3
 8014d02:	3714      	adds	r7, #20
 8014d04:	46bd      	mov	sp, r7
 8014d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d0a:	4770      	bx	lr

08014d0c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8014d0c:	b480      	push	{r7}
 8014d0e:	b085      	sub	sp, #20
 8014d10:	af00      	add	r7, sp, #0
 8014d12:	6078      	str	r0, [r7, #4]
 8014d14:	460b      	mov	r3, r1
 8014d16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8014d1c:	68fb      	ldr	r3, [r7, #12]
 8014d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	68fa      	ldr	r2, [r7, #12]
 8014d26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014d2a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8014d2e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014d36:	681a      	ldr	r2, [r3, #0]
 8014d38:	78fb      	ldrb	r3, [r7, #3]
 8014d3a:	011b      	lsls	r3, r3, #4
 8014d3c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8014d40:	68f9      	ldr	r1, [r7, #12]
 8014d42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014d46:	4313      	orrs	r3, r2
 8014d48:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8014d4a:	2300      	movs	r3, #0
}
 8014d4c:	4618      	mov	r0, r3
 8014d4e:	3714      	adds	r7, #20
 8014d50:	46bd      	mov	sp, r7
 8014d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d56:	4770      	bx	lr

08014d58 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014d58:	b480      	push	{r7}
 8014d5a:	b085      	sub	sp, #20
 8014d5c:	af00      	add	r7, sp, #0
 8014d5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014d64:	68fb      	ldr	r3, [r7, #12]
 8014d66:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014d6a:	681b      	ldr	r3, [r3, #0]
 8014d6c:	68fa      	ldr	r2, [r7, #12]
 8014d6e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014d72:	f023 0303 	bic.w	r3, r3, #3
 8014d76:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014d7e:	685b      	ldr	r3, [r3, #4]
 8014d80:	68fa      	ldr	r2, [r7, #12]
 8014d82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014d86:	f023 0302 	bic.w	r3, r3, #2
 8014d8a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014d8c:	2300      	movs	r3, #0
}
 8014d8e:	4618      	mov	r0, r3
 8014d90:	3714      	adds	r7, #20
 8014d92:	46bd      	mov	sp, r7
 8014d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d98:	4770      	bx	lr

08014d9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014d9a:	b480      	push	{r7}
 8014d9c:	b085      	sub	sp, #20
 8014d9e:	af00      	add	r7, sp, #0
 8014da0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014dac:	681b      	ldr	r3, [r3, #0]
 8014dae:	68fa      	ldr	r2, [r7, #12]
 8014db0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014db4:	f023 0303 	bic.w	r3, r3, #3
 8014db8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014dc0:	685b      	ldr	r3, [r3, #4]
 8014dc2:	68fa      	ldr	r2, [r7, #12]
 8014dc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014dc8:	f043 0302 	orr.w	r3, r3, #2
 8014dcc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014dce:	2300      	movs	r3, #0
}
 8014dd0:	4618      	mov	r0, r3
 8014dd2:	3714      	adds	r7, #20
 8014dd4:	46bd      	mov	sp, r7
 8014dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dda:	4770      	bx	lr

08014ddc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8014ddc:	b480      	push	{r7}
 8014dde:	b085      	sub	sp, #20
 8014de0:	af00      	add	r7, sp, #0
 8014de2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	695b      	ldr	r3, [r3, #20]
 8014de8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	699b      	ldr	r3, [r3, #24]
 8014dee:	68fa      	ldr	r2, [r7, #12]
 8014df0:	4013      	ands	r3, r2
 8014df2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8014df4:	68fb      	ldr	r3, [r7, #12]
}
 8014df6:	4618      	mov	r0, r3
 8014df8:	3714      	adds	r7, #20
 8014dfa:	46bd      	mov	sp, r7
 8014dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e00:	4770      	bx	lr

08014e02 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014e02:	b480      	push	{r7}
 8014e04:	b085      	sub	sp, #20
 8014e06:	af00      	add	r7, sp, #0
 8014e08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014e0e:	68fb      	ldr	r3, [r7, #12]
 8014e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014e14:	699b      	ldr	r3, [r3, #24]
 8014e16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014e1e:	69db      	ldr	r3, [r3, #28]
 8014e20:	68ba      	ldr	r2, [r7, #8]
 8014e22:	4013      	ands	r3, r2
 8014e24:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8014e26:	68bb      	ldr	r3, [r7, #8]
 8014e28:	0c1b      	lsrs	r3, r3, #16
}
 8014e2a:	4618      	mov	r0, r3
 8014e2c:	3714      	adds	r7, #20
 8014e2e:	46bd      	mov	sp, r7
 8014e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e34:	4770      	bx	lr

08014e36 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014e36:	b480      	push	{r7}
 8014e38:	b085      	sub	sp, #20
 8014e3a:	af00      	add	r7, sp, #0
 8014e3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014e42:	68fb      	ldr	r3, [r7, #12]
 8014e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014e48:	699b      	ldr	r3, [r3, #24]
 8014e4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014e4c:	68fb      	ldr	r3, [r7, #12]
 8014e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014e52:	69db      	ldr	r3, [r3, #28]
 8014e54:	68ba      	ldr	r2, [r7, #8]
 8014e56:	4013      	ands	r3, r2
 8014e58:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8014e5a:	68bb      	ldr	r3, [r7, #8]
 8014e5c:	b29b      	uxth	r3, r3
}
 8014e5e:	4618      	mov	r0, r3
 8014e60:	3714      	adds	r7, #20
 8014e62:	46bd      	mov	sp, r7
 8014e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e68:	4770      	bx	lr

08014e6a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014e6a:	b480      	push	{r7}
 8014e6c:	b085      	sub	sp, #20
 8014e6e:	af00      	add	r7, sp, #0
 8014e70:	6078      	str	r0, [r7, #4]
 8014e72:	460b      	mov	r3, r1
 8014e74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8014e7a:	78fb      	ldrb	r3, [r7, #3]
 8014e7c:	015a      	lsls	r2, r3, #5
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	4413      	add	r3, r2
 8014e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014e86:	689b      	ldr	r3, [r3, #8]
 8014e88:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8014e8a:	68fb      	ldr	r3, [r7, #12]
 8014e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014e90:	695b      	ldr	r3, [r3, #20]
 8014e92:	68ba      	ldr	r2, [r7, #8]
 8014e94:	4013      	ands	r3, r2
 8014e96:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014e98:	68bb      	ldr	r3, [r7, #8]
}
 8014e9a:	4618      	mov	r0, r3
 8014e9c:	3714      	adds	r7, #20
 8014e9e:	46bd      	mov	sp, r7
 8014ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ea4:	4770      	bx	lr

08014ea6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014ea6:	b480      	push	{r7}
 8014ea8:	b087      	sub	sp, #28
 8014eaa:	af00      	add	r7, sp, #0
 8014eac:	6078      	str	r0, [r7, #4]
 8014eae:	460b      	mov	r3, r1
 8014eb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8014eb6:	697b      	ldr	r3, [r7, #20]
 8014eb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014ebc:	691b      	ldr	r3, [r3, #16]
 8014ebe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8014ec0:	697b      	ldr	r3, [r7, #20]
 8014ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014ec8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8014eca:	78fb      	ldrb	r3, [r7, #3]
 8014ecc:	f003 030f 	and.w	r3, r3, #15
 8014ed0:	68fa      	ldr	r2, [r7, #12]
 8014ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8014ed6:	01db      	lsls	r3, r3, #7
 8014ed8:	b2db      	uxtb	r3, r3
 8014eda:	693a      	ldr	r2, [r7, #16]
 8014edc:	4313      	orrs	r3, r2
 8014ede:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8014ee0:	78fb      	ldrb	r3, [r7, #3]
 8014ee2:	015a      	lsls	r2, r3, #5
 8014ee4:	697b      	ldr	r3, [r7, #20]
 8014ee6:	4413      	add	r3, r2
 8014ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014eec:	689b      	ldr	r3, [r3, #8]
 8014eee:	693a      	ldr	r2, [r7, #16]
 8014ef0:	4013      	ands	r3, r2
 8014ef2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014ef4:	68bb      	ldr	r3, [r7, #8]
}
 8014ef6:	4618      	mov	r0, r3
 8014ef8:	371c      	adds	r7, #28
 8014efa:	46bd      	mov	sp, r7
 8014efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f00:	4770      	bx	lr

08014f02 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8014f02:	b480      	push	{r7}
 8014f04:	b083      	sub	sp, #12
 8014f06:	af00      	add	r7, sp, #0
 8014f08:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	695b      	ldr	r3, [r3, #20]
 8014f0e:	f003 0301 	and.w	r3, r3, #1
}
 8014f12:	4618      	mov	r0, r3
 8014f14:	370c      	adds	r7, #12
 8014f16:	46bd      	mov	sp, r7
 8014f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f1c:	4770      	bx	lr
	...

08014f20 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8014f20:	b480      	push	{r7}
 8014f22:	b085      	sub	sp, #20
 8014f24:	af00      	add	r7, sp, #0
 8014f26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014f32:	681a      	ldr	r2, [r3, #0]
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014f3a:	4619      	mov	r1, r3
 8014f3c:	4b09      	ldr	r3, [pc, #36]	; (8014f64 <USB_ActivateSetup+0x44>)
 8014f3e:	4013      	ands	r3, r2
 8014f40:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014f48:	685b      	ldr	r3, [r3, #4]
 8014f4a:	68fa      	ldr	r2, [r7, #12]
 8014f4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014f54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014f56:	2300      	movs	r3, #0
}
 8014f58:	4618      	mov	r0, r3
 8014f5a:	3714      	adds	r7, #20
 8014f5c:	46bd      	mov	sp, r7
 8014f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f62:	4770      	bx	lr
 8014f64:	fffff800 	.word	0xfffff800

08014f68 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8014f68:	b480      	push	{r7}
 8014f6a:	b087      	sub	sp, #28
 8014f6c:	af00      	add	r7, sp, #0
 8014f6e:	60f8      	str	r0, [r7, #12]
 8014f70:	460b      	mov	r3, r1
 8014f72:	607a      	str	r2, [r7, #4]
 8014f74:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014f76:	68fb      	ldr	r3, [r7, #12]
 8014f78:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	333c      	adds	r3, #60	; 0x3c
 8014f7e:	3304      	adds	r3, #4
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8014f84:	693b      	ldr	r3, [r7, #16]
 8014f86:	4a26      	ldr	r2, [pc, #152]	; (8015020 <USB_EP0_OutStart+0xb8>)
 8014f88:	4293      	cmp	r3, r2
 8014f8a:	d90a      	bls.n	8014fa2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014f8c:	697b      	ldr	r3, [r7, #20]
 8014f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014f98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014f9c:	d101      	bne.n	8014fa2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8014f9e:	2300      	movs	r3, #0
 8014fa0:	e037      	b.n	8015012 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8014fa2:	697b      	ldr	r3, [r7, #20]
 8014fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014fa8:	461a      	mov	r2, r3
 8014faa:	2300      	movs	r3, #0
 8014fac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014fae:	697b      	ldr	r3, [r7, #20]
 8014fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014fb4:	691b      	ldr	r3, [r3, #16]
 8014fb6:	697a      	ldr	r2, [r7, #20]
 8014fb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014fbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014fc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8014fc2:	697b      	ldr	r3, [r7, #20]
 8014fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014fc8:	691b      	ldr	r3, [r3, #16]
 8014fca:	697a      	ldr	r2, [r7, #20]
 8014fcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014fd0:	f043 0318 	orr.w	r3, r3, #24
 8014fd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8014fd6:	697b      	ldr	r3, [r7, #20]
 8014fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014fdc:	691b      	ldr	r3, [r3, #16]
 8014fde:	697a      	ldr	r2, [r7, #20]
 8014fe0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014fe4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8014fe8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8014fea:	7afb      	ldrb	r3, [r7, #11]
 8014fec:	2b01      	cmp	r3, #1
 8014fee:	d10f      	bne.n	8015010 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8014ff0:	697b      	ldr	r3, [r7, #20]
 8014ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014ff6:	461a      	mov	r2, r3
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8014ffc:	697b      	ldr	r3, [r7, #20]
 8014ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	697a      	ldr	r2, [r7, #20]
 8015006:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801500a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801500e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015010:	2300      	movs	r3, #0
}
 8015012:	4618      	mov	r0, r3
 8015014:	371c      	adds	r7, #28
 8015016:	46bd      	mov	sp, r7
 8015018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801501c:	4770      	bx	lr
 801501e:	bf00      	nop
 8015020:	4f54300a 	.word	0x4f54300a

08015024 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8015024:	b480      	push	{r7}
 8015026:	b085      	sub	sp, #20
 8015028:	af00      	add	r7, sp, #0
 801502a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801502c:	2300      	movs	r3, #0
 801502e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	3301      	adds	r3, #1
 8015034:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	4a13      	ldr	r2, [pc, #76]	; (8015088 <USB_CoreReset+0x64>)
 801503a:	4293      	cmp	r3, r2
 801503c:	d901      	bls.n	8015042 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801503e:	2303      	movs	r3, #3
 8015040:	e01b      	b.n	801507a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	691b      	ldr	r3, [r3, #16]
 8015046:	2b00      	cmp	r3, #0
 8015048:	daf2      	bge.n	8015030 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801504a:	2300      	movs	r3, #0
 801504c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	691b      	ldr	r3, [r3, #16]
 8015052:	f043 0201 	orr.w	r2, r3, #1
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801505a:	68fb      	ldr	r3, [r7, #12]
 801505c:	3301      	adds	r3, #1
 801505e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	4a09      	ldr	r2, [pc, #36]	; (8015088 <USB_CoreReset+0x64>)
 8015064:	4293      	cmp	r3, r2
 8015066:	d901      	bls.n	801506c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8015068:	2303      	movs	r3, #3
 801506a:	e006      	b.n	801507a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	691b      	ldr	r3, [r3, #16]
 8015070:	f003 0301 	and.w	r3, r3, #1
 8015074:	2b01      	cmp	r3, #1
 8015076:	d0f0      	beq.n	801505a <USB_CoreReset+0x36>

  return HAL_OK;
 8015078:	2300      	movs	r3, #0
}
 801507a:	4618      	mov	r0, r3
 801507c:	3714      	adds	r7, #20
 801507e:	46bd      	mov	sp, r7
 8015080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015084:	4770      	bx	lr
 8015086:	bf00      	nop
 8015088:	00030d40 	.word	0x00030d40

0801508c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801508c:	b580      	push	{r7, lr}
 801508e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8015090:	4904      	ldr	r1, [pc, #16]	; (80150a4 <MX_FATFS_Init+0x18>)
 8015092:	4805      	ldr	r0, [pc, #20]	; (80150a8 <MX_FATFS_Init+0x1c>)
 8015094:	f005 f904 	bl	801a2a0 <FATFS_LinkDriver>
 8015098:	4603      	mov	r3, r0
 801509a:	461a      	mov	r2, r3
 801509c:	4b03      	ldr	r3, [pc, #12]	; (80150ac <MX_FATFS_Init+0x20>)
 801509e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80150a0:	bf00      	nop
 80150a2:	bd80      	pop	{r7, pc}
 80150a4:	24001698 	.word	0x24001698
 80150a8:	0801ffb4 	.word	0x0801ffb4
 80150ac:	24001694 	.word	0x24001694

080150b0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80150b0:	b480      	push	{r7}
 80150b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80150b4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80150b6:	4618      	mov	r0, r3
 80150b8:	46bd      	mov	sp, r7
 80150ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150be:	4770      	bx	lr

080150c0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80150c0:	b580      	push	{r7, lr}
 80150c2:	b082      	sub	sp, #8
 80150c4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80150c6:	2300      	movs	r3, #0
 80150c8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80150ca:	f000 f885 	bl	80151d8 <BSP_SD_IsDetected>
 80150ce:	4603      	mov	r3, r0
 80150d0:	2b01      	cmp	r3, #1
 80150d2:	d001      	beq.n	80150d8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80150d4:	2302      	movs	r3, #2
 80150d6:	e012      	b.n	80150fe <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 80150d8:	480b      	ldr	r0, [pc, #44]	; (8015108 <BSP_SD_Init+0x48>)
 80150da:	f7f8 ff39 	bl	800df50 <HAL_SD_Init>
 80150de:	4603      	mov	r3, r0
 80150e0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80150e2:	79fb      	ldrb	r3, [r7, #7]
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d109      	bne.n	80150fc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80150e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80150ec:	4806      	ldr	r0, [pc, #24]	; (8015108 <BSP_SD_Init+0x48>)
 80150ee:	f7f9 fdef 	bl	800ecd0 <HAL_SD_ConfigWideBusOperation>
 80150f2:	4603      	mov	r3, r0
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d001      	beq.n	80150fc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80150f8:	2301      	movs	r3, #1
 80150fa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80150fc:	79fb      	ldrb	r3, [r7, #7]
}
 80150fe:	4618      	mov	r0, r3
 8015100:	3708      	adds	r7, #8
 8015102:	46bd      	mov	sp, r7
 8015104:	bd80      	pop	{r7, pc}
 8015106:	bf00      	nop
 8015108:	24000f30 	.word	0x24000f30

0801510c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 801510c:	b580      	push	{r7, lr}
 801510e:	b086      	sub	sp, #24
 8015110:	af00      	add	r7, sp, #0
 8015112:	60f8      	str	r0, [r7, #12]
 8015114:	60b9      	str	r1, [r7, #8]
 8015116:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8015118:	2300      	movs	r3, #0
 801511a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	68ba      	ldr	r2, [r7, #8]
 8015120:	68f9      	ldr	r1, [r7, #12]
 8015122:	4806      	ldr	r0, [pc, #24]	; (801513c <BSP_SD_ReadBlocks_DMA+0x30>)
 8015124:	f7f9 f834 	bl	800e190 <HAL_SD_ReadBlocks_DMA>
 8015128:	4603      	mov	r3, r0
 801512a:	2b00      	cmp	r3, #0
 801512c:	d001      	beq.n	8015132 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801512e:	2301      	movs	r3, #1
 8015130:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8015132:	7dfb      	ldrb	r3, [r7, #23]
}
 8015134:	4618      	mov	r0, r3
 8015136:	3718      	adds	r7, #24
 8015138:	46bd      	mov	sp, r7
 801513a:	bd80      	pop	{r7, pc}
 801513c:	24000f30 	.word	0x24000f30

08015140 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8015140:	b580      	push	{r7, lr}
 8015142:	b086      	sub	sp, #24
 8015144:	af00      	add	r7, sp, #0
 8015146:	60f8      	str	r0, [r7, #12]
 8015148:	60b9      	str	r1, [r7, #8]
 801514a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801514c:	2300      	movs	r3, #0
 801514e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	68ba      	ldr	r2, [r7, #8]
 8015154:	68f9      	ldr	r1, [r7, #12]
 8015156:	4806      	ldr	r0, [pc, #24]	; (8015170 <BSP_SD_WriteBlocks_DMA+0x30>)
 8015158:	f7f9 f8c2 	bl	800e2e0 <HAL_SD_WriteBlocks_DMA>
 801515c:	4603      	mov	r3, r0
 801515e:	2b00      	cmp	r3, #0
 8015160:	d001      	beq.n	8015166 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8015162:	2301      	movs	r3, #1
 8015164:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8015166:	7dfb      	ldrb	r3, [r7, #23]
}
 8015168:	4618      	mov	r0, r3
 801516a:	3718      	adds	r7, #24
 801516c:	46bd      	mov	sp, r7
 801516e:	bd80      	pop	{r7, pc}
 8015170:	24000f30 	.word	0x24000f30

08015174 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8015174:	b580      	push	{r7, lr}
 8015176:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8015178:	4805      	ldr	r0, [pc, #20]	; (8015190 <BSP_SD_GetCardState+0x1c>)
 801517a:	f7f9 febb 	bl	800eef4 <HAL_SD_GetCardState>
 801517e:	4603      	mov	r3, r0
 8015180:	2b04      	cmp	r3, #4
 8015182:	bf14      	ite	ne
 8015184:	2301      	movne	r3, #1
 8015186:	2300      	moveq	r3, #0
 8015188:	b2db      	uxtb	r3, r3
}
 801518a:	4618      	mov	r0, r3
 801518c:	bd80      	pop	{r7, pc}
 801518e:	bf00      	nop
 8015190:	24000f30 	.word	0x24000f30

08015194 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8015194:	b580      	push	{r7, lr}
 8015196:	b082      	sub	sp, #8
 8015198:	af00      	add	r7, sp, #0
 801519a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 801519c:	6879      	ldr	r1, [r7, #4]
 801519e:	4803      	ldr	r0, [pc, #12]	; (80151ac <BSP_SD_GetCardInfo+0x18>)
 80151a0:	f7f9 fd6a 	bl	800ec78 <HAL_SD_GetCardInfo>
}
 80151a4:	bf00      	nop
 80151a6:	3708      	adds	r7, #8
 80151a8:	46bd      	mov	sp, r7
 80151aa:	bd80      	pop	{r7, pc}
 80151ac:	24000f30 	.word	0x24000f30

080151b0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80151b0:	b580      	push	{r7, lr}
 80151b2:	b082      	sub	sp, #8
 80151b4:	af00      	add	r7, sp, #0
 80151b6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80151b8:	f000 f984 	bl	80154c4 <BSP_SD_WriteCpltCallback>
}
 80151bc:	bf00      	nop
 80151be:	3708      	adds	r7, #8
 80151c0:	46bd      	mov	sp, r7
 80151c2:	bd80      	pop	{r7, pc}

080151c4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80151c4:	b580      	push	{r7, lr}
 80151c6:	b082      	sub	sp, #8
 80151c8:	af00      	add	r7, sp, #0
 80151ca:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80151cc:	f000 f986 	bl	80154dc <BSP_SD_ReadCpltCallback>
}
 80151d0:	bf00      	nop
 80151d2:	3708      	adds	r7, #8
 80151d4:	46bd      	mov	sp, r7
 80151d6:	bd80      	pop	{r7, pc}

080151d8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80151d8:	b480      	push	{r7}
 80151da:	b083      	sub	sp, #12
 80151dc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80151de:	2301      	movs	r3, #1
 80151e0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 80151e2:	79fb      	ldrb	r3, [r7, #7]
 80151e4:	b2db      	uxtb	r3, r3
}
 80151e6:	4618      	mov	r0, r3
 80151e8:	370c      	adds	r7, #12
 80151ea:	46bd      	mov	sp, r7
 80151ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151f0:	4770      	bx	lr

080151f2 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80151f2:	b580      	push	{r7, lr}
 80151f4:	b084      	sub	sp, #16
 80151f6:	af00      	add	r7, sp, #0
 80151f8:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80151fa:	f7ee ff8b 	bl	8004114 <HAL_GetTick>
 80151fe:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8015200:	e006      	b.n	8015210 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015202:	f7ff ffb7 	bl	8015174 <BSP_SD_GetCardState>
 8015206:	4603      	mov	r3, r0
 8015208:	2b00      	cmp	r3, #0
 801520a:	d101      	bne.n	8015210 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801520c:	2300      	movs	r3, #0
 801520e:	e009      	b.n	8015224 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8015210:	f7ee ff80 	bl	8004114 <HAL_GetTick>
 8015214:	4602      	mov	r2, r0
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	1ad3      	subs	r3, r2, r3
 801521a:	687a      	ldr	r2, [r7, #4]
 801521c:	429a      	cmp	r2, r3
 801521e:	d8f0      	bhi.n	8015202 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8015220:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015224:	4618      	mov	r0, r3
 8015226:	3710      	adds	r7, #16
 8015228:	46bd      	mov	sp, r7
 801522a:	bd80      	pop	{r7, pc}

0801522c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801522c:	b580      	push	{r7, lr}
 801522e:	b082      	sub	sp, #8
 8015230:	af00      	add	r7, sp, #0
 8015232:	4603      	mov	r3, r0
 8015234:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8015236:	4b0b      	ldr	r3, [pc, #44]	; (8015264 <SD_CheckStatus+0x38>)
 8015238:	2201      	movs	r2, #1
 801523a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801523c:	f7ff ff9a 	bl	8015174 <BSP_SD_GetCardState>
 8015240:	4603      	mov	r3, r0
 8015242:	2b00      	cmp	r3, #0
 8015244:	d107      	bne.n	8015256 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8015246:	4b07      	ldr	r3, [pc, #28]	; (8015264 <SD_CheckStatus+0x38>)
 8015248:	781b      	ldrb	r3, [r3, #0]
 801524a:	b2db      	uxtb	r3, r3
 801524c:	f023 0301 	bic.w	r3, r3, #1
 8015250:	b2da      	uxtb	r2, r3
 8015252:	4b04      	ldr	r3, [pc, #16]	; (8015264 <SD_CheckStatus+0x38>)
 8015254:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8015256:	4b03      	ldr	r3, [pc, #12]	; (8015264 <SD_CheckStatus+0x38>)
 8015258:	781b      	ldrb	r3, [r3, #0]
 801525a:	b2db      	uxtb	r3, r3
}
 801525c:	4618      	mov	r0, r3
 801525e:	3708      	adds	r7, #8
 8015260:	46bd      	mov	sp, r7
 8015262:	bd80      	pop	{r7, pc}
 8015264:	2400000d 	.word	0x2400000d

08015268 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8015268:	b580      	push	{r7, lr}
 801526a:	b082      	sub	sp, #8
 801526c:	af00      	add	r7, sp, #0
 801526e:	4603      	mov	r3, r0
 8015270:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8015272:	f7ff ff25 	bl	80150c0 <BSP_SD_Init>
 8015276:	4603      	mov	r3, r0
 8015278:	2b00      	cmp	r3, #0
 801527a:	d107      	bne.n	801528c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 801527c:	79fb      	ldrb	r3, [r7, #7]
 801527e:	4618      	mov	r0, r3
 8015280:	f7ff ffd4 	bl	801522c <SD_CheckStatus>
 8015284:	4603      	mov	r3, r0
 8015286:	461a      	mov	r2, r3
 8015288:	4b04      	ldr	r3, [pc, #16]	; (801529c <SD_initialize+0x34>)
 801528a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 801528c:	4b03      	ldr	r3, [pc, #12]	; (801529c <SD_initialize+0x34>)
 801528e:	781b      	ldrb	r3, [r3, #0]
 8015290:	b2db      	uxtb	r3, r3
}
 8015292:	4618      	mov	r0, r3
 8015294:	3708      	adds	r7, #8
 8015296:	46bd      	mov	sp, r7
 8015298:	bd80      	pop	{r7, pc}
 801529a:	bf00      	nop
 801529c:	2400000d 	.word	0x2400000d

080152a0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80152a0:	b580      	push	{r7, lr}
 80152a2:	b082      	sub	sp, #8
 80152a4:	af00      	add	r7, sp, #0
 80152a6:	4603      	mov	r3, r0
 80152a8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80152aa:	79fb      	ldrb	r3, [r7, #7]
 80152ac:	4618      	mov	r0, r3
 80152ae:	f7ff ffbd 	bl	801522c <SD_CheckStatus>
 80152b2:	4603      	mov	r3, r0
}
 80152b4:	4618      	mov	r0, r3
 80152b6:	3708      	adds	r7, #8
 80152b8:	46bd      	mov	sp, r7
 80152ba:	bd80      	pop	{r7, pc}

080152bc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80152bc:	b580      	push	{r7, lr}
 80152be:	b086      	sub	sp, #24
 80152c0:	af00      	add	r7, sp, #0
 80152c2:	60b9      	str	r1, [r7, #8]
 80152c4:	607a      	str	r2, [r7, #4]
 80152c6:	603b      	str	r3, [r7, #0]
 80152c8:	4603      	mov	r3, r0
 80152ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80152cc:	2301      	movs	r3, #1
 80152ce:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80152d0:	f247 5030 	movw	r0, #30000	; 0x7530
 80152d4:	f7ff ff8d 	bl	80151f2 <SD_CheckStatusWithTimeout>
 80152d8:	4603      	mov	r3, r0
 80152da:	2b00      	cmp	r3, #0
 80152dc:	da01      	bge.n	80152e2 <SD_read+0x26>
  {
    return res;
 80152de:	7dfb      	ldrb	r3, [r7, #23]
 80152e0:	e03b      	b.n	801535a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80152e2:	683a      	ldr	r2, [r7, #0]
 80152e4:	6879      	ldr	r1, [r7, #4]
 80152e6:	68b8      	ldr	r0, [r7, #8]
 80152e8:	f7ff ff10 	bl	801510c <BSP_SD_ReadBlocks_DMA>
 80152ec:	4603      	mov	r3, r0
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d132      	bne.n	8015358 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80152f2:	4b1c      	ldr	r3, [pc, #112]	; (8015364 <SD_read+0xa8>)
 80152f4:	2200      	movs	r2, #0
 80152f6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80152f8:	f7ee ff0c 	bl	8004114 <HAL_GetTick>
 80152fc:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80152fe:	bf00      	nop
 8015300:	4b18      	ldr	r3, [pc, #96]	; (8015364 <SD_read+0xa8>)
 8015302:	681b      	ldr	r3, [r3, #0]
 8015304:	2b00      	cmp	r3, #0
 8015306:	d108      	bne.n	801531a <SD_read+0x5e>
 8015308:	f7ee ff04 	bl	8004114 <HAL_GetTick>
 801530c:	4602      	mov	r2, r0
 801530e:	693b      	ldr	r3, [r7, #16]
 8015310:	1ad3      	subs	r3, r2, r3
 8015312:	f247 522f 	movw	r2, #29999	; 0x752f
 8015316:	4293      	cmp	r3, r2
 8015318:	d9f2      	bls.n	8015300 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 801531a:	4b12      	ldr	r3, [pc, #72]	; (8015364 <SD_read+0xa8>)
 801531c:	681b      	ldr	r3, [r3, #0]
 801531e:	2b00      	cmp	r3, #0
 8015320:	d102      	bne.n	8015328 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8015322:	2301      	movs	r3, #1
 8015324:	75fb      	strb	r3, [r7, #23]
 8015326:	e017      	b.n	8015358 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8015328:	4b0e      	ldr	r3, [pc, #56]	; (8015364 <SD_read+0xa8>)
 801532a:	2200      	movs	r2, #0
 801532c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801532e:	f7ee fef1 	bl	8004114 <HAL_GetTick>
 8015332:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015334:	e007      	b.n	8015346 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015336:	f7ff ff1d 	bl	8015174 <BSP_SD_GetCardState>
 801533a:	4603      	mov	r3, r0
 801533c:	2b00      	cmp	r3, #0
 801533e:	d102      	bne.n	8015346 <SD_read+0x8a>
          {
            res = RES_OK;
 8015340:	2300      	movs	r3, #0
 8015342:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8015344:	e008      	b.n	8015358 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015346:	f7ee fee5 	bl	8004114 <HAL_GetTick>
 801534a:	4602      	mov	r2, r0
 801534c:	693b      	ldr	r3, [r7, #16]
 801534e:	1ad3      	subs	r3, r2, r3
 8015350:	f247 522f 	movw	r2, #29999	; 0x752f
 8015354:	4293      	cmp	r3, r2
 8015356:	d9ee      	bls.n	8015336 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8015358:	7dfb      	ldrb	r3, [r7, #23]
}
 801535a:	4618      	mov	r0, r3
 801535c:	3718      	adds	r7, #24
 801535e:	46bd      	mov	sp, r7
 8015360:	bd80      	pop	{r7, pc}
 8015362:	bf00      	nop
 8015364:	240016a0 	.word	0x240016a0

08015368 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8015368:	b580      	push	{r7, lr}
 801536a:	b086      	sub	sp, #24
 801536c:	af00      	add	r7, sp, #0
 801536e:	60b9      	str	r1, [r7, #8]
 8015370:	607a      	str	r2, [r7, #4]
 8015372:	603b      	str	r3, [r7, #0]
 8015374:	4603      	mov	r3, r0
 8015376:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8015378:	2301      	movs	r3, #1
 801537a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 801537c:	4b24      	ldr	r3, [pc, #144]	; (8015410 <SD_write+0xa8>)
 801537e:	2200      	movs	r2, #0
 8015380:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8015382:	f247 5030 	movw	r0, #30000	; 0x7530
 8015386:	f7ff ff34 	bl	80151f2 <SD_CheckStatusWithTimeout>
 801538a:	4603      	mov	r3, r0
 801538c:	2b00      	cmp	r3, #0
 801538e:	da01      	bge.n	8015394 <SD_write+0x2c>
  {
    return res;
 8015390:	7dfb      	ldrb	r3, [r7, #23]
 8015392:	e038      	b.n	8015406 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8015394:	683a      	ldr	r2, [r7, #0]
 8015396:	6879      	ldr	r1, [r7, #4]
 8015398:	68b8      	ldr	r0, [r7, #8]
 801539a:	f7ff fed1 	bl	8015140 <BSP_SD_WriteBlocks_DMA>
 801539e:	4603      	mov	r3, r0
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d12f      	bne.n	8015404 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80153a4:	f7ee feb6 	bl	8004114 <HAL_GetTick>
 80153a8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80153aa:	bf00      	nop
 80153ac:	4b18      	ldr	r3, [pc, #96]	; (8015410 <SD_write+0xa8>)
 80153ae:	681b      	ldr	r3, [r3, #0]
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d108      	bne.n	80153c6 <SD_write+0x5e>
 80153b4:	f7ee feae 	bl	8004114 <HAL_GetTick>
 80153b8:	4602      	mov	r2, r0
 80153ba:	693b      	ldr	r3, [r7, #16]
 80153bc:	1ad3      	subs	r3, r2, r3
 80153be:	f247 522f 	movw	r2, #29999	; 0x752f
 80153c2:	4293      	cmp	r3, r2
 80153c4:	d9f2      	bls.n	80153ac <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80153c6:	4b12      	ldr	r3, [pc, #72]	; (8015410 <SD_write+0xa8>)
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d102      	bne.n	80153d4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80153ce:	2301      	movs	r3, #1
 80153d0:	75fb      	strb	r3, [r7, #23]
 80153d2:	e017      	b.n	8015404 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80153d4:	4b0e      	ldr	r3, [pc, #56]	; (8015410 <SD_write+0xa8>)
 80153d6:	2200      	movs	r2, #0
 80153d8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80153da:	f7ee fe9b 	bl	8004114 <HAL_GetTick>
 80153de:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80153e0:	e007      	b.n	80153f2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80153e2:	f7ff fec7 	bl	8015174 <BSP_SD_GetCardState>
 80153e6:	4603      	mov	r3, r0
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d102      	bne.n	80153f2 <SD_write+0x8a>
          {
            res = RES_OK;
 80153ec:	2300      	movs	r3, #0
 80153ee:	75fb      	strb	r3, [r7, #23]
            break;
 80153f0:	e008      	b.n	8015404 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80153f2:	f7ee fe8f 	bl	8004114 <HAL_GetTick>
 80153f6:	4602      	mov	r2, r0
 80153f8:	693b      	ldr	r3, [r7, #16]
 80153fa:	1ad3      	subs	r3, r2, r3
 80153fc:	f247 522f 	movw	r2, #29999	; 0x752f
 8015400:	4293      	cmp	r3, r2
 8015402:	d9ee      	bls.n	80153e2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8015404:	7dfb      	ldrb	r3, [r7, #23]
}
 8015406:	4618      	mov	r0, r3
 8015408:	3718      	adds	r7, #24
 801540a:	46bd      	mov	sp, r7
 801540c:	bd80      	pop	{r7, pc}
 801540e:	bf00      	nop
 8015410:	2400169c 	.word	0x2400169c

08015414 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8015414:	b580      	push	{r7, lr}
 8015416:	b08c      	sub	sp, #48	; 0x30
 8015418:	af00      	add	r7, sp, #0
 801541a:	4603      	mov	r3, r0
 801541c:	603a      	str	r2, [r7, #0]
 801541e:	71fb      	strb	r3, [r7, #7]
 8015420:	460b      	mov	r3, r1
 8015422:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8015424:	2301      	movs	r3, #1
 8015426:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801542a:	4b25      	ldr	r3, [pc, #148]	; (80154c0 <SD_ioctl+0xac>)
 801542c:	781b      	ldrb	r3, [r3, #0]
 801542e:	b2db      	uxtb	r3, r3
 8015430:	f003 0301 	and.w	r3, r3, #1
 8015434:	2b00      	cmp	r3, #0
 8015436:	d001      	beq.n	801543c <SD_ioctl+0x28>
 8015438:	2303      	movs	r3, #3
 801543a:	e03c      	b.n	80154b6 <SD_ioctl+0xa2>

  switch (cmd)
 801543c:	79bb      	ldrb	r3, [r7, #6]
 801543e:	2b03      	cmp	r3, #3
 8015440:	d834      	bhi.n	80154ac <SD_ioctl+0x98>
 8015442:	a201      	add	r2, pc, #4	; (adr r2, 8015448 <SD_ioctl+0x34>)
 8015444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015448:	08015459 	.word	0x08015459
 801544c:	08015461 	.word	0x08015461
 8015450:	08015479 	.word	0x08015479
 8015454:	08015493 	.word	0x08015493
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8015458:	2300      	movs	r3, #0
 801545a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801545e:	e028      	b.n	80154b2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8015460:	f107 0308 	add.w	r3, r7, #8
 8015464:	4618      	mov	r0, r3
 8015466:	f7ff fe95 	bl	8015194 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801546a:	6a3a      	ldr	r2, [r7, #32]
 801546c:	683b      	ldr	r3, [r7, #0]
 801546e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8015470:	2300      	movs	r3, #0
 8015472:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015476:	e01c      	b.n	80154b2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8015478:	f107 0308 	add.w	r3, r7, #8
 801547c:	4618      	mov	r0, r3
 801547e:	f7ff fe89 	bl	8015194 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8015482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015484:	b29a      	uxth	r2, r3
 8015486:	683b      	ldr	r3, [r7, #0]
 8015488:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801548a:	2300      	movs	r3, #0
 801548c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015490:	e00f      	b.n	80154b2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8015492:	f107 0308 	add.w	r3, r7, #8
 8015496:	4618      	mov	r0, r3
 8015498:	f7ff fe7c 	bl	8015194 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801549c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801549e:	0a5a      	lsrs	r2, r3, #9
 80154a0:	683b      	ldr	r3, [r7, #0]
 80154a2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80154a4:	2300      	movs	r3, #0
 80154a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80154aa:	e002      	b.n	80154b2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80154ac:	2304      	movs	r3, #4
 80154ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80154b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80154b6:	4618      	mov	r0, r3
 80154b8:	3730      	adds	r7, #48	; 0x30
 80154ba:	46bd      	mov	sp, r7
 80154bc:	bd80      	pop	{r7, pc}
 80154be:	bf00      	nop
 80154c0:	2400000d 	.word	0x2400000d

080154c4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80154c4:	b480      	push	{r7}
 80154c6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80154c8:	4b03      	ldr	r3, [pc, #12]	; (80154d8 <BSP_SD_WriteCpltCallback+0x14>)
 80154ca:	2201      	movs	r2, #1
 80154cc:	601a      	str	r2, [r3, #0]
}
 80154ce:	bf00      	nop
 80154d0:	46bd      	mov	sp, r7
 80154d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154d6:	4770      	bx	lr
 80154d8:	2400169c 	.word	0x2400169c

080154dc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80154dc:	b480      	push	{r7}
 80154de:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80154e0:	4b03      	ldr	r3, [pc, #12]	; (80154f0 <BSP_SD_ReadCpltCallback+0x14>)
 80154e2:	2201      	movs	r2, #1
 80154e4:	601a      	str	r2, [r3, #0]
}
 80154e6:	bf00      	nop
 80154e8:	46bd      	mov	sp, r7
 80154ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ee:	4770      	bx	lr
 80154f0:	240016a0 	.word	0x240016a0

080154f4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80154f4:	b580      	push	{r7, lr}
 80154f6:	b084      	sub	sp, #16
 80154f8:	af00      	add	r7, sp, #0
 80154fa:	6078      	str	r0, [r7, #4]
 80154fc:	460b      	mov	r3, r1
 80154fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8015500:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8015504:	f005 fc72 	bl	801adec <USBD_static_malloc>
 8015508:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	2b00      	cmp	r3, #0
 801550e:	d109      	bne.n	8015524 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	32b0      	adds	r2, #176	; 0xb0
 801551a:	2100      	movs	r1, #0
 801551c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8015520:	2302      	movs	r3, #2
 8015522:	e0d4      	b.n	80156ce <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8015524:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8015528:	2100      	movs	r1, #0
 801552a:	68f8      	ldr	r0, [r7, #12]
 801552c:	f006 fc35 	bl	801bd9a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	32b0      	adds	r2, #176	; 0xb0
 801553a:	68f9      	ldr	r1, [r7, #12]
 801553c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	32b0      	adds	r2, #176	; 0xb0
 801554a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	7c1b      	ldrb	r3, [r3, #16]
 8015558:	2b00      	cmp	r3, #0
 801555a:	d138      	bne.n	80155ce <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801555c:	4b5e      	ldr	r3, [pc, #376]	; (80156d8 <USBD_CDC_Init+0x1e4>)
 801555e:	7819      	ldrb	r1, [r3, #0]
 8015560:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015564:	2202      	movs	r2, #2
 8015566:	6878      	ldr	r0, [r7, #4]
 8015568:	f005 fb1d 	bl	801aba6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801556c:	4b5a      	ldr	r3, [pc, #360]	; (80156d8 <USBD_CDC_Init+0x1e4>)
 801556e:	781b      	ldrb	r3, [r3, #0]
 8015570:	f003 020f 	and.w	r2, r3, #15
 8015574:	6879      	ldr	r1, [r7, #4]
 8015576:	4613      	mov	r3, r2
 8015578:	009b      	lsls	r3, r3, #2
 801557a:	4413      	add	r3, r2
 801557c:	009b      	lsls	r3, r3, #2
 801557e:	440b      	add	r3, r1
 8015580:	3324      	adds	r3, #36	; 0x24
 8015582:	2201      	movs	r2, #1
 8015584:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8015586:	4b55      	ldr	r3, [pc, #340]	; (80156dc <USBD_CDC_Init+0x1e8>)
 8015588:	7819      	ldrb	r1, [r3, #0]
 801558a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801558e:	2202      	movs	r2, #2
 8015590:	6878      	ldr	r0, [r7, #4]
 8015592:	f005 fb08 	bl	801aba6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8015596:	4b51      	ldr	r3, [pc, #324]	; (80156dc <USBD_CDC_Init+0x1e8>)
 8015598:	781b      	ldrb	r3, [r3, #0]
 801559a:	f003 020f 	and.w	r2, r3, #15
 801559e:	6879      	ldr	r1, [r7, #4]
 80155a0:	4613      	mov	r3, r2
 80155a2:	009b      	lsls	r3, r3, #2
 80155a4:	4413      	add	r3, r2
 80155a6:	009b      	lsls	r3, r3, #2
 80155a8:	440b      	add	r3, r1
 80155aa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80155ae:	2201      	movs	r2, #1
 80155b0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80155b2:	4b4b      	ldr	r3, [pc, #300]	; (80156e0 <USBD_CDC_Init+0x1ec>)
 80155b4:	781b      	ldrb	r3, [r3, #0]
 80155b6:	f003 020f 	and.w	r2, r3, #15
 80155ba:	6879      	ldr	r1, [r7, #4]
 80155bc:	4613      	mov	r3, r2
 80155be:	009b      	lsls	r3, r3, #2
 80155c0:	4413      	add	r3, r2
 80155c2:	009b      	lsls	r3, r3, #2
 80155c4:	440b      	add	r3, r1
 80155c6:	3326      	adds	r3, #38	; 0x26
 80155c8:	2210      	movs	r2, #16
 80155ca:	801a      	strh	r2, [r3, #0]
 80155cc:	e035      	b.n	801563a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80155ce:	4b42      	ldr	r3, [pc, #264]	; (80156d8 <USBD_CDC_Init+0x1e4>)
 80155d0:	7819      	ldrb	r1, [r3, #0]
 80155d2:	2340      	movs	r3, #64	; 0x40
 80155d4:	2202      	movs	r2, #2
 80155d6:	6878      	ldr	r0, [r7, #4]
 80155d8:	f005 fae5 	bl	801aba6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80155dc:	4b3e      	ldr	r3, [pc, #248]	; (80156d8 <USBD_CDC_Init+0x1e4>)
 80155de:	781b      	ldrb	r3, [r3, #0]
 80155e0:	f003 020f 	and.w	r2, r3, #15
 80155e4:	6879      	ldr	r1, [r7, #4]
 80155e6:	4613      	mov	r3, r2
 80155e8:	009b      	lsls	r3, r3, #2
 80155ea:	4413      	add	r3, r2
 80155ec:	009b      	lsls	r3, r3, #2
 80155ee:	440b      	add	r3, r1
 80155f0:	3324      	adds	r3, #36	; 0x24
 80155f2:	2201      	movs	r2, #1
 80155f4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80155f6:	4b39      	ldr	r3, [pc, #228]	; (80156dc <USBD_CDC_Init+0x1e8>)
 80155f8:	7819      	ldrb	r1, [r3, #0]
 80155fa:	2340      	movs	r3, #64	; 0x40
 80155fc:	2202      	movs	r2, #2
 80155fe:	6878      	ldr	r0, [r7, #4]
 8015600:	f005 fad1 	bl	801aba6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8015604:	4b35      	ldr	r3, [pc, #212]	; (80156dc <USBD_CDC_Init+0x1e8>)
 8015606:	781b      	ldrb	r3, [r3, #0]
 8015608:	f003 020f 	and.w	r2, r3, #15
 801560c:	6879      	ldr	r1, [r7, #4]
 801560e:	4613      	mov	r3, r2
 8015610:	009b      	lsls	r3, r3, #2
 8015612:	4413      	add	r3, r2
 8015614:	009b      	lsls	r3, r3, #2
 8015616:	440b      	add	r3, r1
 8015618:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801561c:	2201      	movs	r2, #1
 801561e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8015620:	4b2f      	ldr	r3, [pc, #188]	; (80156e0 <USBD_CDC_Init+0x1ec>)
 8015622:	781b      	ldrb	r3, [r3, #0]
 8015624:	f003 020f 	and.w	r2, r3, #15
 8015628:	6879      	ldr	r1, [r7, #4]
 801562a:	4613      	mov	r3, r2
 801562c:	009b      	lsls	r3, r3, #2
 801562e:	4413      	add	r3, r2
 8015630:	009b      	lsls	r3, r3, #2
 8015632:	440b      	add	r3, r1
 8015634:	3326      	adds	r3, #38	; 0x26
 8015636:	2210      	movs	r2, #16
 8015638:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801563a:	4b29      	ldr	r3, [pc, #164]	; (80156e0 <USBD_CDC_Init+0x1ec>)
 801563c:	7819      	ldrb	r1, [r3, #0]
 801563e:	2308      	movs	r3, #8
 8015640:	2203      	movs	r2, #3
 8015642:	6878      	ldr	r0, [r7, #4]
 8015644:	f005 faaf 	bl	801aba6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8015648:	4b25      	ldr	r3, [pc, #148]	; (80156e0 <USBD_CDC_Init+0x1ec>)
 801564a:	781b      	ldrb	r3, [r3, #0]
 801564c:	f003 020f 	and.w	r2, r3, #15
 8015650:	6879      	ldr	r1, [r7, #4]
 8015652:	4613      	mov	r3, r2
 8015654:	009b      	lsls	r3, r3, #2
 8015656:	4413      	add	r3, r2
 8015658:	009b      	lsls	r3, r3, #2
 801565a:	440b      	add	r3, r1
 801565c:	3324      	adds	r3, #36	; 0x24
 801565e:	2201      	movs	r2, #1
 8015660:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8015662:	68fb      	ldr	r3, [r7, #12]
 8015664:	2200      	movs	r2, #0
 8015666:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015670:	687a      	ldr	r2, [r7, #4]
 8015672:	33b0      	adds	r3, #176	; 0xb0
 8015674:	009b      	lsls	r3, r3, #2
 8015676:	4413      	add	r3, r2
 8015678:	685b      	ldr	r3, [r3, #4]
 801567a:	681b      	ldr	r3, [r3, #0]
 801567c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	2200      	movs	r2, #0
 8015682:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8015686:	68fb      	ldr	r3, [r7, #12]
 8015688:	2200      	movs	r2, #0
 801568a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8015694:	2b00      	cmp	r3, #0
 8015696:	d101      	bne.n	801569c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8015698:	2302      	movs	r3, #2
 801569a:	e018      	b.n	80156ce <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	7c1b      	ldrb	r3, [r3, #16]
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d10a      	bne.n	80156ba <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80156a4:	4b0d      	ldr	r3, [pc, #52]	; (80156dc <USBD_CDC_Init+0x1e8>)
 80156a6:	7819      	ldrb	r1, [r3, #0]
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80156ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80156b2:	6878      	ldr	r0, [r7, #4]
 80156b4:	f005 fb66 	bl	801ad84 <USBD_LL_PrepareReceive>
 80156b8:	e008      	b.n	80156cc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80156ba:	4b08      	ldr	r3, [pc, #32]	; (80156dc <USBD_CDC_Init+0x1e8>)
 80156bc:	7819      	ldrb	r1, [r3, #0]
 80156be:	68fb      	ldr	r3, [r7, #12]
 80156c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80156c4:	2340      	movs	r3, #64	; 0x40
 80156c6:	6878      	ldr	r0, [r7, #4]
 80156c8:	f005 fb5c 	bl	801ad84 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80156cc:	2300      	movs	r3, #0
}
 80156ce:	4618      	mov	r0, r3
 80156d0:	3710      	adds	r7, #16
 80156d2:	46bd      	mov	sp, r7
 80156d4:	bd80      	pop	{r7, pc}
 80156d6:	bf00      	nop
 80156d8:	24000097 	.word	0x24000097
 80156dc:	24000098 	.word	0x24000098
 80156e0:	24000099 	.word	0x24000099

080156e4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80156e4:	b580      	push	{r7, lr}
 80156e6:	b082      	sub	sp, #8
 80156e8:	af00      	add	r7, sp, #0
 80156ea:	6078      	str	r0, [r7, #4]
 80156ec:	460b      	mov	r3, r1
 80156ee:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80156f0:	4b3a      	ldr	r3, [pc, #232]	; (80157dc <USBD_CDC_DeInit+0xf8>)
 80156f2:	781b      	ldrb	r3, [r3, #0]
 80156f4:	4619      	mov	r1, r3
 80156f6:	6878      	ldr	r0, [r7, #4]
 80156f8:	f005 fa7b 	bl	801abf2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80156fc:	4b37      	ldr	r3, [pc, #220]	; (80157dc <USBD_CDC_DeInit+0xf8>)
 80156fe:	781b      	ldrb	r3, [r3, #0]
 8015700:	f003 020f 	and.w	r2, r3, #15
 8015704:	6879      	ldr	r1, [r7, #4]
 8015706:	4613      	mov	r3, r2
 8015708:	009b      	lsls	r3, r3, #2
 801570a:	4413      	add	r3, r2
 801570c:	009b      	lsls	r3, r3, #2
 801570e:	440b      	add	r3, r1
 8015710:	3324      	adds	r3, #36	; 0x24
 8015712:	2200      	movs	r2, #0
 8015714:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8015716:	4b32      	ldr	r3, [pc, #200]	; (80157e0 <USBD_CDC_DeInit+0xfc>)
 8015718:	781b      	ldrb	r3, [r3, #0]
 801571a:	4619      	mov	r1, r3
 801571c:	6878      	ldr	r0, [r7, #4]
 801571e:	f005 fa68 	bl	801abf2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8015722:	4b2f      	ldr	r3, [pc, #188]	; (80157e0 <USBD_CDC_DeInit+0xfc>)
 8015724:	781b      	ldrb	r3, [r3, #0]
 8015726:	f003 020f 	and.w	r2, r3, #15
 801572a:	6879      	ldr	r1, [r7, #4]
 801572c:	4613      	mov	r3, r2
 801572e:	009b      	lsls	r3, r3, #2
 8015730:	4413      	add	r3, r2
 8015732:	009b      	lsls	r3, r3, #2
 8015734:	440b      	add	r3, r1
 8015736:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801573a:	2200      	movs	r2, #0
 801573c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801573e:	4b29      	ldr	r3, [pc, #164]	; (80157e4 <USBD_CDC_DeInit+0x100>)
 8015740:	781b      	ldrb	r3, [r3, #0]
 8015742:	4619      	mov	r1, r3
 8015744:	6878      	ldr	r0, [r7, #4]
 8015746:	f005 fa54 	bl	801abf2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801574a:	4b26      	ldr	r3, [pc, #152]	; (80157e4 <USBD_CDC_DeInit+0x100>)
 801574c:	781b      	ldrb	r3, [r3, #0]
 801574e:	f003 020f 	and.w	r2, r3, #15
 8015752:	6879      	ldr	r1, [r7, #4]
 8015754:	4613      	mov	r3, r2
 8015756:	009b      	lsls	r3, r3, #2
 8015758:	4413      	add	r3, r2
 801575a:	009b      	lsls	r3, r3, #2
 801575c:	440b      	add	r3, r1
 801575e:	3324      	adds	r3, #36	; 0x24
 8015760:	2200      	movs	r2, #0
 8015762:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8015764:	4b1f      	ldr	r3, [pc, #124]	; (80157e4 <USBD_CDC_DeInit+0x100>)
 8015766:	781b      	ldrb	r3, [r3, #0]
 8015768:	f003 020f 	and.w	r2, r3, #15
 801576c:	6879      	ldr	r1, [r7, #4]
 801576e:	4613      	mov	r3, r2
 8015770:	009b      	lsls	r3, r3, #2
 8015772:	4413      	add	r3, r2
 8015774:	009b      	lsls	r3, r3, #2
 8015776:	440b      	add	r3, r1
 8015778:	3326      	adds	r3, #38	; 0x26
 801577a:	2200      	movs	r2, #0
 801577c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	32b0      	adds	r2, #176	; 0xb0
 8015788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801578c:	2b00      	cmp	r3, #0
 801578e:	d01f      	beq.n	80157d0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015796:	687a      	ldr	r2, [r7, #4]
 8015798:	33b0      	adds	r3, #176	; 0xb0
 801579a:	009b      	lsls	r3, r3, #2
 801579c:	4413      	add	r3, r2
 801579e:	685b      	ldr	r3, [r3, #4]
 80157a0:	685b      	ldr	r3, [r3, #4]
 80157a2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	32b0      	adds	r2, #176	; 0xb0
 80157ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80157b2:	4618      	mov	r0, r3
 80157b4:	f005 fb28 	bl	801ae08 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	32b0      	adds	r2, #176	; 0xb0
 80157c2:	2100      	movs	r1, #0
 80157c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	2200      	movs	r2, #0
 80157cc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80157d0:	2300      	movs	r3, #0
}
 80157d2:	4618      	mov	r0, r3
 80157d4:	3708      	adds	r7, #8
 80157d6:	46bd      	mov	sp, r7
 80157d8:	bd80      	pop	{r7, pc}
 80157da:	bf00      	nop
 80157dc:	24000097 	.word	0x24000097
 80157e0:	24000098 	.word	0x24000098
 80157e4:	24000099 	.word	0x24000099

080157e8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80157e8:	b580      	push	{r7, lr}
 80157ea:	b086      	sub	sp, #24
 80157ec:	af00      	add	r7, sp, #0
 80157ee:	6078      	str	r0, [r7, #4]
 80157f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	32b0      	adds	r2, #176	; 0xb0
 80157fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015800:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8015802:	2300      	movs	r3, #0
 8015804:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8015806:	2300      	movs	r3, #0
 8015808:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801580a:	2300      	movs	r3, #0
 801580c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801580e:	693b      	ldr	r3, [r7, #16]
 8015810:	2b00      	cmp	r3, #0
 8015812:	d101      	bne.n	8015818 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8015814:	2303      	movs	r3, #3
 8015816:	e0bf      	b.n	8015998 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015818:	683b      	ldr	r3, [r7, #0]
 801581a:	781b      	ldrb	r3, [r3, #0]
 801581c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015820:	2b00      	cmp	r3, #0
 8015822:	d050      	beq.n	80158c6 <USBD_CDC_Setup+0xde>
 8015824:	2b20      	cmp	r3, #32
 8015826:	f040 80af 	bne.w	8015988 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801582a:	683b      	ldr	r3, [r7, #0]
 801582c:	88db      	ldrh	r3, [r3, #6]
 801582e:	2b00      	cmp	r3, #0
 8015830:	d03a      	beq.n	80158a8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8015832:	683b      	ldr	r3, [r7, #0]
 8015834:	781b      	ldrb	r3, [r3, #0]
 8015836:	b25b      	sxtb	r3, r3
 8015838:	2b00      	cmp	r3, #0
 801583a:	da1b      	bge.n	8015874 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015842:	687a      	ldr	r2, [r7, #4]
 8015844:	33b0      	adds	r3, #176	; 0xb0
 8015846:	009b      	lsls	r3, r3, #2
 8015848:	4413      	add	r3, r2
 801584a:	685b      	ldr	r3, [r3, #4]
 801584c:	689b      	ldr	r3, [r3, #8]
 801584e:	683a      	ldr	r2, [r7, #0]
 8015850:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8015852:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015854:	683a      	ldr	r2, [r7, #0]
 8015856:	88d2      	ldrh	r2, [r2, #6]
 8015858:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801585a:	683b      	ldr	r3, [r7, #0]
 801585c:	88db      	ldrh	r3, [r3, #6]
 801585e:	2b07      	cmp	r3, #7
 8015860:	bf28      	it	cs
 8015862:	2307      	movcs	r3, #7
 8015864:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8015866:	693b      	ldr	r3, [r7, #16]
 8015868:	89fa      	ldrh	r2, [r7, #14]
 801586a:	4619      	mov	r1, r3
 801586c:	6878      	ldr	r0, [r7, #4]
 801586e:	f001 fd89 	bl	8017384 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8015872:	e090      	b.n	8015996 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8015874:	683b      	ldr	r3, [r7, #0]
 8015876:	785a      	ldrb	r2, [r3, #1]
 8015878:	693b      	ldr	r3, [r7, #16]
 801587a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 801587e:	683b      	ldr	r3, [r7, #0]
 8015880:	88db      	ldrh	r3, [r3, #6]
 8015882:	2b3f      	cmp	r3, #63	; 0x3f
 8015884:	d803      	bhi.n	801588e <USBD_CDC_Setup+0xa6>
 8015886:	683b      	ldr	r3, [r7, #0]
 8015888:	88db      	ldrh	r3, [r3, #6]
 801588a:	b2da      	uxtb	r2, r3
 801588c:	e000      	b.n	8015890 <USBD_CDC_Setup+0xa8>
 801588e:	2240      	movs	r2, #64	; 0x40
 8015890:	693b      	ldr	r3, [r7, #16]
 8015892:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8015896:	6939      	ldr	r1, [r7, #16]
 8015898:	693b      	ldr	r3, [r7, #16]
 801589a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801589e:	461a      	mov	r2, r3
 80158a0:	6878      	ldr	r0, [r7, #4]
 80158a2:	f001 fd9b 	bl	80173dc <USBD_CtlPrepareRx>
      break;
 80158a6:	e076      	b.n	8015996 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80158ae:	687a      	ldr	r2, [r7, #4]
 80158b0:	33b0      	adds	r3, #176	; 0xb0
 80158b2:	009b      	lsls	r3, r3, #2
 80158b4:	4413      	add	r3, r2
 80158b6:	685b      	ldr	r3, [r3, #4]
 80158b8:	689b      	ldr	r3, [r3, #8]
 80158ba:	683a      	ldr	r2, [r7, #0]
 80158bc:	7850      	ldrb	r0, [r2, #1]
 80158be:	2200      	movs	r2, #0
 80158c0:	6839      	ldr	r1, [r7, #0]
 80158c2:	4798      	blx	r3
      break;
 80158c4:	e067      	b.n	8015996 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80158c6:	683b      	ldr	r3, [r7, #0]
 80158c8:	785b      	ldrb	r3, [r3, #1]
 80158ca:	2b0b      	cmp	r3, #11
 80158cc:	d851      	bhi.n	8015972 <USBD_CDC_Setup+0x18a>
 80158ce:	a201      	add	r2, pc, #4	; (adr r2, 80158d4 <USBD_CDC_Setup+0xec>)
 80158d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80158d4:	08015905 	.word	0x08015905
 80158d8:	08015981 	.word	0x08015981
 80158dc:	08015973 	.word	0x08015973
 80158e0:	08015973 	.word	0x08015973
 80158e4:	08015973 	.word	0x08015973
 80158e8:	08015973 	.word	0x08015973
 80158ec:	08015973 	.word	0x08015973
 80158f0:	08015973 	.word	0x08015973
 80158f4:	08015973 	.word	0x08015973
 80158f8:	08015973 	.word	0x08015973
 80158fc:	0801592f 	.word	0x0801592f
 8015900:	08015959 	.word	0x08015959
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801590a:	b2db      	uxtb	r3, r3
 801590c:	2b03      	cmp	r3, #3
 801590e:	d107      	bne.n	8015920 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015910:	f107 030a 	add.w	r3, r7, #10
 8015914:	2202      	movs	r2, #2
 8015916:	4619      	mov	r1, r3
 8015918:	6878      	ldr	r0, [r7, #4]
 801591a:	f001 fd33 	bl	8017384 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801591e:	e032      	b.n	8015986 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015920:	6839      	ldr	r1, [r7, #0]
 8015922:	6878      	ldr	r0, [r7, #4]
 8015924:	f001 fcbd 	bl	80172a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8015928:	2303      	movs	r3, #3
 801592a:	75fb      	strb	r3, [r7, #23]
          break;
 801592c:	e02b      	b.n	8015986 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015934:	b2db      	uxtb	r3, r3
 8015936:	2b03      	cmp	r3, #3
 8015938:	d107      	bne.n	801594a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801593a:	f107 030d 	add.w	r3, r7, #13
 801593e:	2201      	movs	r2, #1
 8015940:	4619      	mov	r1, r3
 8015942:	6878      	ldr	r0, [r7, #4]
 8015944:	f001 fd1e 	bl	8017384 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015948:	e01d      	b.n	8015986 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801594a:	6839      	ldr	r1, [r7, #0]
 801594c:	6878      	ldr	r0, [r7, #4]
 801594e:	f001 fca8 	bl	80172a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8015952:	2303      	movs	r3, #3
 8015954:	75fb      	strb	r3, [r7, #23]
          break;
 8015956:	e016      	b.n	8015986 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801595e:	b2db      	uxtb	r3, r3
 8015960:	2b03      	cmp	r3, #3
 8015962:	d00f      	beq.n	8015984 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8015964:	6839      	ldr	r1, [r7, #0]
 8015966:	6878      	ldr	r0, [r7, #4]
 8015968:	f001 fc9b 	bl	80172a2 <USBD_CtlError>
            ret = USBD_FAIL;
 801596c:	2303      	movs	r3, #3
 801596e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8015970:	e008      	b.n	8015984 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8015972:	6839      	ldr	r1, [r7, #0]
 8015974:	6878      	ldr	r0, [r7, #4]
 8015976:	f001 fc94 	bl	80172a2 <USBD_CtlError>
          ret = USBD_FAIL;
 801597a:	2303      	movs	r3, #3
 801597c:	75fb      	strb	r3, [r7, #23]
          break;
 801597e:	e002      	b.n	8015986 <USBD_CDC_Setup+0x19e>
          break;
 8015980:	bf00      	nop
 8015982:	e008      	b.n	8015996 <USBD_CDC_Setup+0x1ae>
          break;
 8015984:	bf00      	nop
      }
      break;
 8015986:	e006      	b.n	8015996 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8015988:	6839      	ldr	r1, [r7, #0]
 801598a:	6878      	ldr	r0, [r7, #4]
 801598c:	f001 fc89 	bl	80172a2 <USBD_CtlError>
      ret = USBD_FAIL;
 8015990:	2303      	movs	r3, #3
 8015992:	75fb      	strb	r3, [r7, #23]
      break;
 8015994:	bf00      	nop
  }

  return (uint8_t)ret;
 8015996:	7dfb      	ldrb	r3, [r7, #23]
}
 8015998:	4618      	mov	r0, r3
 801599a:	3718      	adds	r7, #24
 801599c:	46bd      	mov	sp, r7
 801599e:	bd80      	pop	{r7, pc}

080159a0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80159a0:	b580      	push	{r7, lr}
 80159a2:	b084      	sub	sp, #16
 80159a4:	af00      	add	r7, sp, #0
 80159a6:	6078      	str	r0, [r7, #4]
 80159a8:	460b      	mov	r3, r1
 80159aa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80159b2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	32b0      	adds	r2, #176	; 0xb0
 80159be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d101      	bne.n	80159ca <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80159c6:	2303      	movs	r3, #3
 80159c8:	e065      	b.n	8015a96 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	32b0      	adds	r2, #176	; 0xb0
 80159d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159d8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80159da:	78fb      	ldrb	r3, [r7, #3]
 80159dc:	f003 020f 	and.w	r2, r3, #15
 80159e0:	6879      	ldr	r1, [r7, #4]
 80159e2:	4613      	mov	r3, r2
 80159e4:	009b      	lsls	r3, r3, #2
 80159e6:	4413      	add	r3, r2
 80159e8:	009b      	lsls	r3, r3, #2
 80159ea:	440b      	add	r3, r1
 80159ec:	3318      	adds	r3, #24
 80159ee:	681b      	ldr	r3, [r3, #0]
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d02f      	beq.n	8015a54 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80159f4:	78fb      	ldrb	r3, [r7, #3]
 80159f6:	f003 020f 	and.w	r2, r3, #15
 80159fa:	6879      	ldr	r1, [r7, #4]
 80159fc:	4613      	mov	r3, r2
 80159fe:	009b      	lsls	r3, r3, #2
 8015a00:	4413      	add	r3, r2
 8015a02:	009b      	lsls	r3, r3, #2
 8015a04:	440b      	add	r3, r1
 8015a06:	3318      	adds	r3, #24
 8015a08:	681a      	ldr	r2, [r3, #0]
 8015a0a:	78fb      	ldrb	r3, [r7, #3]
 8015a0c:	f003 010f 	and.w	r1, r3, #15
 8015a10:	68f8      	ldr	r0, [r7, #12]
 8015a12:	460b      	mov	r3, r1
 8015a14:	00db      	lsls	r3, r3, #3
 8015a16:	440b      	add	r3, r1
 8015a18:	009b      	lsls	r3, r3, #2
 8015a1a:	4403      	add	r3, r0
 8015a1c:	3344      	adds	r3, #68	; 0x44
 8015a1e:	681b      	ldr	r3, [r3, #0]
 8015a20:	fbb2 f1f3 	udiv	r1, r2, r3
 8015a24:	fb01 f303 	mul.w	r3, r1, r3
 8015a28:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d112      	bne.n	8015a54 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8015a2e:	78fb      	ldrb	r3, [r7, #3]
 8015a30:	f003 020f 	and.w	r2, r3, #15
 8015a34:	6879      	ldr	r1, [r7, #4]
 8015a36:	4613      	mov	r3, r2
 8015a38:	009b      	lsls	r3, r3, #2
 8015a3a:	4413      	add	r3, r2
 8015a3c:	009b      	lsls	r3, r3, #2
 8015a3e:	440b      	add	r3, r1
 8015a40:	3318      	adds	r3, #24
 8015a42:	2200      	movs	r2, #0
 8015a44:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8015a46:	78f9      	ldrb	r1, [r7, #3]
 8015a48:	2300      	movs	r3, #0
 8015a4a:	2200      	movs	r2, #0
 8015a4c:	6878      	ldr	r0, [r7, #4]
 8015a4e:	f005 f978 	bl	801ad42 <USBD_LL_Transmit>
 8015a52:	e01f      	b.n	8015a94 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8015a54:	68bb      	ldr	r3, [r7, #8]
 8015a56:	2200      	movs	r2, #0
 8015a58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015a62:	687a      	ldr	r2, [r7, #4]
 8015a64:	33b0      	adds	r3, #176	; 0xb0
 8015a66:	009b      	lsls	r3, r3, #2
 8015a68:	4413      	add	r3, r2
 8015a6a:	685b      	ldr	r3, [r3, #4]
 8015a6c:	691b      	ldr	r3, [r3, #16]
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d010      	beq.n	8015a94 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015a78:	687a      	ldr	r2, [r7, #4]
 8015a7a:	33b0      	adds	r3, #176	; 0xb0
 8015a7c:	009b      	lsls	r3, r3, #2
 8015a7e:	4413      	add	r3, r2
 8015a80:	685b      	ldr	r3, [r3, #4]
 8015a82:	691b      	ldr	r3, [r3, #16]
 8015a84:	68ba      	ldr	r2, [r7, #8]
 8015a86:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8015a8a:	68ba      	ldr	r2, [r7, #8]
 8015a8c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8015a90:	78fa      	ldrb	r2, [r7, #3]
 8015a92:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8015a94:	2300      	movs	r3, #0
}
 8015a96:	4618      	mov	r0, r3
 8015a98:	3710      	adds	r7, #16
 8015a9a:	46bd      	mov	sp, r7
 8015a9c:	bd80      	pop	{r7, pc}

08015a9e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015a9e:	b580      	push	{r7, lr}
 8015aa0:	b084      	sub	sp, #16
 8015aa2:	af00      	add	r7, sp, #0
 8015aa4:	6078      	str	r0, [r7, #4]
 8015aa6:	460b      	mov	r3, r1
 8015aa8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	32b0      	adds	r2, #176	; 0xb0
 8015ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ab8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	32b0      	adds	r2, #176	; 0xb0
 8015ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	d101      	bne.n	8015ad0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8015acc:	2303      	movs	r3, #3
 8015ace:	e01a      	b.n	8015b06 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8015ad0:	78fb      	ldrb	r3, [r7, #3]
 8015ad2:	4619      	mov	r1, r3
 8015ad4:	6878      	ldr	r0, [r7, #4]
 8015ad6:	f005 f976 	bl	801adc6 <USBD_LL_GetRxDataSize>
 8015ada:	4602      	mov	r2, r0
 8015adc:	68fb      	ldr	r3, [r7, #12]
 8015ade:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015ae8:	687a      	ldr	r2, [r7, #4]
 8015aea:	33b0      	adds	r3, #176	; 0xb0
 8015aec:	009b      	lsls	r3, r3, #2
 8015aee:	4413      	add	r3, r2
 8015af0:	685b      	ldr	r3, [r3, #4]
 8015af2:	68db      	ldr	r3, [r3, #12]
 8015af4:	68fa      	ldr	r2, [r7, #12]
 8015af6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8015afa:	68fa      	ldr	r2, [r7, #12]
 8015afc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8015b00:	4611      	mov	r1, r2
 8015b02:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8015b04:	2300      	movs	r3, #0
}
 8015b06:	4618      	mov	r0, r3
 8015b08:	3710      	adds	r7, #16
 8015b0a:	46bd      	mov	sp, r7
 8015b0c:	bd80      	pop	{r7, pc}

08015b0e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8015b0e:	b580      	push	{r7, lr}
 8015b10:	b084      	sub	sp, #16
 8015b12:	af00      	add	r7, sp, #0
 8015b14:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	32b0      	adds	r2, #176	; 0xb0
 8015b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b24:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015b26:	68fb      	ldr	r3, [r7, #12]
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d101      	bne.n	8015b30 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8015b2c:	2303      	movs	r3, #3
 8015b2e:	e025      	b.n	8015b7c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015b36:	687a      	ldr	r2, [r7, #4]
 8015b38:	33b0      	adds	r3, #176	; 0xb0
 8015b3a:	009b      	lsls	r3, r3, #2
 8015b3c:	4413      	add	r3, r2
 8015b3e:	685b      	ldr	r3, [r3, #4]
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d01a      	beq.n	8015b7a <USBD_CDC_EP0_RxReady+0x6c>
 8015b44:	68fb      	ldr	r3, [r7, #12]
 8015b46:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8015b4a:	2bff      	cmp	r3, #255	; 0xff
 8015b4c:	d015      	beq.n	8015b7a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015b54:	687a      	ldr	r2, [r7, #4]
 8015b56:	33b0      	adds	r3, #176	; 0xb0
 8015b58:	009b      	lsls	r3, r3, #2
 8015b5a:	4413      	add	r3, r2
 8015b5c:	685b      	ldr	r3, [r3, #4]
 8015b5e:	689b      	ldr	r3, [r3, #8]
 8015b60:	68fa      	ldr	r2, [r7, #12]
 8015b62:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8015b66:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8015b68:	68fa      	ldr	r2, [r7, #12]
 8015b6a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015b6e:	b292      	uxth	r2, r2
 8015b70:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	22ff      	movs	r2, #255	; 0xff
 8015b76:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8015b7a:	2300      	movs	r3, #0
}
 8015b7c:	4618      	mov	r0, r3
 8015b7e:	3710      	adds	r7, #16
 8015b80:	46bd      	mov	sp, r7
 8015b82:	bd80      	pop	{r7, pc}

08015b84 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8015b84:	b580      	push	{r7, lr}
 8015b86:	b086      	sub	sp, #24
 8015b88:	af00      	add	r7, sp, #0
 8015b8a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015b8c:	2182      	movs	r1, #130	; 0x82
 8015b8e:	4818      	ldr	r0, [pc, #96]	; (8015bf0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015b90:	f000 fd4f 	bl	8016632 <USBD_GetEpDesc>
 8015b94:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015b96:	2101      	movs	r1, #1
 8015b98:	4815      	ldr	r0, [pc, #84]	; (8015bf0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015b9a:	f000 fd4a 	bl	8016632 <USBD_GetEpDesc>
 8015b9e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015ba0:	2181      	movs	r1, #129	; 0x81
 8015ba2:	4813      	ldr	r0, [pc, #76]	; (8015bf0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015ba4:	f000 fd45 	bl	8016632 <USBD_GetEpDesc>
 8015ba8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015baa:	697b      	ldr	r3, [r7, #20]
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d002      	beq.n	8015bb6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015bb0:	697b      	ldr	r3, [r7, #20]
 8015bb2:	2210      	movs	r2, #16
 8015bb4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015bb6:	693b      	ldr	r3, [r7, #16]
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d006      	beq.n	8015bca <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015bbc:	693b      	ldr	r3, [r7, #16]
 8015bbe:	2200      	movs	r2, #0
 8015bc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015bc4:	711a      	strb	r2, [r3, #4]
 8015bc6:	2200      	movs	r2, #0
 8015bc8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015bca:	68fb      	ldr	r3, [r7, #12]
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d006      	beq.n	8015bde <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015bd0:	68fb      	ldr	r3, [r7, #12]
 8015bd2:	2200      	movs	r2, #0
 8015bd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015bd8:	711a      	strb	r2, [r3, #4]
 8015bda:	2200      	movs	r2, #0
 8015bdc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	2243      	movs	r2, #67	; 0x43
 8015be2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015be4:	4b02      	ldr	r3, [pc, #8]	; (8015bf0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8015be6:	4618      	mov	r0, r3
 8015be8:	3718      	adds	r7, #24
 8015bea:	46bd      	mov	sp, r7
 8015bec:	bd80      	pop	{r7, pc}
 8015bee:	bf00      	nop
 8015bf0:	24000054 	.word	0x24000054

08015bf4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8015bf4:	b580      	push	{r7, lr}
 8015bf6:	b086      	sub	sp, #24
 8015bf8:	af00      	add	r7, sp, #0
 8015bfa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015bfc:	2182      	movs	r1, #130	; 0x82
 8015bfe:	4818      	ldr	r0, [pc, #96]	; (8015c60 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015c00:	f000 fd17 	bl	8016632 <USBD_GetEpDesc>
 8015c04:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015c06:	2101      	movs	r1, #1
 8015c08:	4815      	ldr	r0, [pc, #84]	; (8015c60 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015c0a:	f000 fd12 	bl	8016632 <USBD_GetEpDesc>
 8015c0e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015c10:	2181      	movs	r1, #129	; 0x81
 8015c12:	4813      	ldr	r0, [pc, #76]	; (8015c60 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015c14:	f000 fd0d 	bl	8016632 <USBD_GetEpDesc>
 8015c18:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015c1a:	697b      	ldr	r3, [r7, #20]
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d002      	beq.n	8015c26 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8015c20:	697b      	ldr	r3, [r7, #20]
 8015c22:	2210      	movs	r2, #16
 8015c24:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015c26:	693b      	ldr	r3, [r7, #16]
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	d006      	beq.n	8015c3a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015c2c:	693b      	ldr	r3, [r7, #16]
 8015c2e:	2200      	movs	r2, #0
 8015c30:	711a      	strb	r2, [r3, #4]
 8015c32:	2200      	movs	r2, #0
 8015c34:	f042 0202 	orr.w	r2, r2, #2
 8015c38:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015c3a:	68fb      	ldr	r3, [r7, #12]
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d006      	beq.n	8015c4e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	2200      	movs	r2, #0
 8015c44:	711a      	strb	r2, [r3, #4]
 8015c46:	2200      	movs	r2, #0
 8015c48:	f042 0202 	orr.w	r2, r2, #2
 8015c4c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	2243      	movs	r2, #67	; 0x43
 8015c52:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015c54:	4b02      	ldr	r3, [pc, #8]	; (8015c60 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8015c56:	4618      	mov	r0, r3
 8015c58:	3718      	adds	r7, #24
 8015c5a:	46bd      	mov	sp, r7
 8015c5c:	bd80      	pop	{r7, pc}
 8015c5e:	bf00      	nop
 8015c60:	24000054 	.word	0x24000054

08015c64 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8015c64:	b580      	push	{r7, lr}
 8015c66:	b086      	sub	sp, #24
 8015c68:	af00      	add	r7, sp, #0
 8015c6a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015c6c:	2182      	movs	r1, #130	; 0x82
 8015c6e:	4818      	ldr	r0, [pc, #96]	; (8015cd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015c70:	f000 fcdf 	bl	8016632 <USBD_GetEpDesc>
 8015c74:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015c76:	2101      	movs	r1, #1
 8015c78:	4815      	ldr	r0, [pc, #84]	; (8015cd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015c7a:	f000 fcda 	bl	8016632 <USBD_GetEpDesc>
 8015c7e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015c80:	2181      	movs	r1, #129	; 0x81
 8015c82:	4813      	ldr	r0, [pc, #76]	; (8015cd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015c84:	f000 fcd5 	bl	8016632 <USBD_GetEpDesc>
 8015c88:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015c8a:	697b      	ldr	r3, [r7, #20]
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d002      	beq.n	8015c96 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015c90:	697b      	ldr	r3, [r7, #20]
 8015c92:	2210      	movs	r2, #16
 8015c94:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015c96:	693b      	ldr	r3, [r7, #16]
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d006      	beq.n	8015caa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015c9c:	693b      	ldr	r3, [r7, #16]
 8015c9e:	2200      	movs	r2, #0
 8015ca0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015ca4:	711a      	strb	r2, [r3, #4]
 8015ca6:	2200      	movs	r2, #0
 8015ca8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015caa:	68fb      	ldr	r3, [r7, #12]
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d006      	beq.n	8015cbe <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015cb0:	68fb      	ldr	r3, [r7, #12]
 8015cb2:	2200      	movs	r2, #0
 8015cb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015cb8:	711a      	strb	r2, [r3, #4]
 8015cba:	2200      	movs	r2, #0
 8015cbc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	2243      	movs	r2, #67	; 0x43
 8015cc2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015cc4:	4b02      	ldr	r3, [pc, #8]	; (8015cd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8015cc6:	4618      	mov	r0, r3
 8015cc8:	3718      	adds	r7, #24
 8015cca:	46bd      	mov	sp, r7
 8015ccc:	bd80      	pop	{r7, pc}
 8015cce:	bf00      	nop
 8015cd0:	24000054 	.word	0x24000054

08015cd4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8015cd4:	b480      	push	{r7}
 8015cd6:	b083      	sub	sp, #12
 8015cd8:	af00      	add	r7, sp, #0
 8015cda:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	220a      	movs	r2, #10
 8015ce0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8015ce2:	4b03      	ldr	r3, [pc, #12]	; (8015cf0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8015ce4:	4618      	mov	r0, r3
 8015ce6:	370c      	adds	r7, #12
 8015ce8:	46bd      	mov	sp, r7
 8015cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cee:	4770      	bx	lr
 8015cf0:	24000010 	.word	0x24000010

08015cf4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8015cf4:	b480      	push	{r7}
 8015cf6:	b083      	sub	sp, #12
 8015cf8:	af00      	add	r7, sp, #0
 8015cfa:	6078      	str	r0, [r7, #4]
 8015cfc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8015cfe:	683b      	ldr	r3, [r7, #0]
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	d101      	bne.n	8015d08 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8015d04:	2303      	movs	r3, #3
 8015d06:	e009      	b.n	8015d1c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015d0e:	687a      	ldr	r2, [r7, #4]
 8015d10:	33b0      	adds	r3, #176	; 0xb0
 8015d12:	009b      	lsls	r3, r3, #2
 8015d14:	4413      	add	r3, r2
 8015d16:	683a      	ldr	r2, [r7, #0]
 8015d18:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8015d1a:	2300      	movs	r3, #0
}
 8015d1c:	4618      	mov	r0, r3
 8015d1e:	370c      	adds	r7, #12
 8015d20:	46bd      	mov	sp, r7
 8015d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d26:	4770      	bx	lr

08015d28 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8015d28:	b480      	push	{r7}
 8015d2a:	b087      	sub	sp, #28
 8015d2c:	af00      	add	r7, sp, #0
 8015d2e:	60f8      	str	r0, [r7, #12]
 8015d30:	60b9      	str	r1, [r7, #8]
 8015d32:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015d34:	68fb      	ldr	r3, [r7, #12]
 8015d36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015d3a:	68fb      	ldr	r3, [r7, #12]
 8015d3c:	32b0      	adds	r2, #176	; 0xb0
 8015d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d42:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015d44:	697b      	ldr	r3, [r7, #20]
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d101      	bne.n	8015d4e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8015d4a:	2303      	movs	r3, #3
 8015d4c:	e008      	b.n	8015d60 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8015d4e:	697b      	ldr	r3, [r7, #20]
 8015d50:	68ba      	ldr	r2, [r7, #8]
 8015d52:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8015d56:	697b      	ldr	r3, [r7, #20]
 8015d58:	687a      	ldr	r2, [r7, #4]
 8015d5a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8015d5e:	2300      	movs	r3, #0
}
 8015d60:	4618      	mov	r0, r3
 8015d62:	371c      	adds	r7, #28
 8015d64:	46bd      	mov	sp, r7
 8015d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d6a:	4770      	bx	lr

08015d6c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8015d6c:	b480      	push	{r7}
 8015d6e:	b085      	sub	sp, #20
 8015d70:	af00      	add	r7, sp, #0
 8015d72:	6078      	str	r0, [r7, #4]
 8015d74:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	32b0      	adds	r2, #176	; 0xb0
 8015d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d84:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015d86:	68fb      	ldr	r3, [r7, #12]
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d101      	bne.n	8015d90 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8015d8c:	2303      	movs	r3, #3
 8015d8e:	e004      	b.n	8015d9a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8015d90:	68fb      	ldr	r3, [r7, #12]
 8015d92:	683a      	ldr	r2, [r7, #0]
 8015d94:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8015d98:	2300      	movs	r3, #0
}
 8015d9a:	4618      	mov	r0, r3
 8015d9c:	3714      	adds	r7, #20
 8015d9e:	46bd      	mov	sp, r7
 8015da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015da4:	4770      	bx	lr
	...

08015da8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8015da8:	b580      	push	{r7, lr}
 8015daa:	b084      	sub	sp, #16
 8015dac:	af00      	add	r7, sp, #0
 8015dae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	32b0      	adds	r2, #176	; 0xb0
 8015dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015dbe:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8015dc0:	2301      	movs	r3, #1
 8015dc2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015dc4:	68bb      	ldr	r3, [r7, #8]
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d101      	bne.n	8015dce <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8015dca:	2303      	movs	r3, #3
 8015dcc:	e025      	b.n	8015e1a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8015dce:	68bb      	ldr	r3, [r7, #8]
 8015dd0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d11f      	bne.n	8015e18 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8015dd8:	68bb      	ldr	r3, [r7, #8]
 8015dda:	2201      	movs	r2, #1
 8015ddc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8015de0:	4b10      	ldr	r3, [pc, #64]	; (8015e24 <USBD_CDC_TransmitPacket+0x7c>)
 8015de2:	781b      	ldrb	r3, [r3, #0]
 8015de4:	f003 020f 	and.w	r2, r3, #15
 8015de8:	68bb      	ldr	r3, [r7, #8]
 8015dea:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8015dee:	6878      	ldr	r0, [r7, #4]
 8015df0:	4613      	mov	r3, r2
 8015df2:	009b      	lsls	r3, r3, #2
 8015df4:	4413      	add	r3, r2
 8015df6:	009b      	lsls	r3, r3, #2
 8015df8:	4403      	add	r3, r0
 8015dfa:	3318      	adds	r3, #24
 8015dfc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8015dfe:	4b09      	ldr	r3, [pc, #36]	; (8015e24 <USBD_CDC_TransmitPacket+0x7c>)
 8015e00:	7819      	ldrb	r1, [r3, #0]
 8015e02:	68bb      	ldr	r3, [r7, #8]
 8015e04:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8015e08:	68bb      	ldr	r3, [r7, #8]
 8015e0a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8015e0e:	6878      	ldr	r0, [r7, #4]
 8015e10:	f004 ff97 	bl	801ad42 <USBD_LL_Transmit>

    ret = USBD_OK;
 8015e14:	2300      	movs	r3, #0
 8015e16:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8015e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e1a:	4618      	mov	r0, r3
 8015e1c:	3710      	adds	r7, #16
 8015e1e:	46bd      	mov	sp, r7
 8015e20:	bd80      	pop	{r7, pc}
 8015e22:	bf00      	nop
 8015e24:	24000097 	.word	0x24000097

08015e28 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8015e28:	b580      	push	{r7, lr}
 8015e2a:	b084      	sub	sp, #16
 8015e2c:	af00      	add	r7, sp, #0
 8015e2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	32b0      	adds	r2, #176	; 0xb0
 8015e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e3e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	32b0      	adds	r2, #176	; 0xb0
 8015e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d101      	bne.n	8015e56 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8015e52:	2303      	movs	r3, #3
 8015e54:	e018      	b.n	8015e88 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	7c1b      	ldrb	r3, [r3, #16]
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d10a      	bne.n	8015e74 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015e5e:	4b0c      	ldr	r3, [pc, #48]	; (8015e90 <USBD_CDC_ReceivePacket+0x68>)
 8015e60:	7819      	ldrb	r1, [r3, #0]
 8015e62:	68fb      	ldr	r3, [r7, #12]
 8015e64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015e68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015e6c:	6878      	ldr	r0, [r7, #4]
 8015e6e:	f004 ff89 	bl	801ad84 <USBD_LL_PrepareReceive>
 8015e72:	e008      	b.n	8015e86 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015e74:	4b06      	ldr	r3, [pc, #24]	; (8015e90 <USBD_CDC_ReceivePacket+0x68>)
 8015e76:	7819      	ldrb	r1, [r3, #0]
 8015e78:	68fb      	ldr	r3, [r7, #12]
 8015e7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015e7e:	2340      	movs	r3, #64	; 0x40
 8015e80:	6878      	ldr	r0, [r7, #4]
 8015e82:	f004 ff7f 	bl	801ad84 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015e86:	2300      	movs	r3, #0
}
 8015e88:	4618      	mov	r0, r3
 8015e8a:	3710      	adds	r7, #16
 8015e8c:	46bd      	mov	sp, r7
 8015e8e:	bd80      	pop	{r7, pc}
 8015e90:	24000098 	.word	0x24000098

08015e94 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8015e94:	b580      	push	{r7, lr}
 8015e96:	b086      	sub	sp, #24
 8015e98:	af00      	add	r7, sp, #0
 8015e9a:	60f8      	str	r0, [r7, #12]
 8015e9c:	60b9      	str	r1, [r7, #8]
 8015e9e:	4613      	mov	r3, r2
 8015ea0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8015ea2:	68fb      	ldr	r3, [r7, #12]
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d101      	bne.n	8015eac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015ea8:	2303      	movs	r3, #3
 8015eaa:	e01f      	b.n	8015eec <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8015eac:	68fb      	ldr	r3, [r7, #12]
 8015eae:	2200      	movs	r2, #0
 8015eb0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	2200      	movs	r2, #0
 8015eb8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8015ebc:	68fb      	ldr	r3, [r7, #12]
 8015ebe:	2200      	movs	r2, #0
 8015ec0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015ec4:	68bb      	ldr	r3, [r7, #8]
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d003      	beq.n	8015ed2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8015eca:	68fb      	ldr	r3, [r7, #12]
 8015ecc:	68ba      	ldr	r2, [r7, #8]
 8015ece:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	2201      	movs	r2, #1
 8015ed6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8015eda:	68fb      	ldr	r3, [r7, #12]
 8015edc:	79fa      	ldrb	r2, [r7, #7]
 8015ede:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8015ee0:	68f8      	ldr	r0, [r7, #12]
 8015ee2:	f004 fdf3 	bl	801aacc <USBD_LL_Init>
 8015ee6:	4603      	mov	r3, r0
 8015ee8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8015eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8015eec:	4618      	mov	r0, r3
 8015eee:	3718      	adds	r7, #24
 8015ef0:	46bd      	mov	sp, r7
 8015ef2:	bd80      	pop	{r7, pc}

08015ef4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015ef4:	b580      	push	{r7, lr}
 8015ef6:	b084      	sub	sp, #16
 8015ef8:	af00      	add	r7, sp, #0
 8015efa:	6078      	str	r0, [r7, #4]
 8015efc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015efe:	2300      	movs	r3, #0
 8015f00:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8015f02:	683b      	ldr	r3, [r7, #0]
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d101      	bne.n	8015f0c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015f08:	2303      	movs	r3, #3
 8015f0a:	e025      	b.n	8015f58 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	683a      	ldr	r2, [r7, #0]
 8015f10:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	32ae      	adds	r2, #174	; 0xae
 8015f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	d00f      	beq.n	8015f48 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	32ae      	adds	r2, #174	; 0xae
 8015f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f38:	f107 020e 	add.w	r2, r7, #14
 8015f3c:	4610      	mov	r0, r2
 8015f3e:	4798      	blx	r3
 8015f40:	4602      	mov	r2, r0
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015f4e:	1c5a      	adds	r2, r3, #1
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8015f56:	2300      	movs	r3, #0
}
 8015f58:	4618      	mov	r0, r3
 8015f5a:	3710      	adds	r7, #16
 8015f5c:	46bd      	mov	sp, r7
 8015f5e:	bd80      	pop	{r7, pc}

08015f60 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8015f60:	b580      	push	{r7, lr}
 8015f62:	b082      	sub	sp, #8
 8015f64:	af00      	add	r7, sp, #0
 8015f66:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8015f68:	6878      	ldr	r0, [r7, #4]
 8015f6a:	f004 fe01 	bl	801ab70 <USBD_LL_Start>
 8015f6e:	4603      	mov	r3, r0
}
 8015f70:	4618      	mov	r0, r3
 8015f72:	3708      	adds	r7, #8
 8015f74:	46bd      	mov	sp, r7
 8015f76:	bd80      	pop	{r7, pc}

08015f78 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8015f78:	b480      	push	{r7}
 8015f7a:	b083      	sub	sp, #12
 8015f7c:	af00      	add	r7, sp, #0
 8015f7e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015f80:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8015f82:	4618      	mov	r0, r3
 8015f84:	370c      	adds	r7, #12
 8015f86:	46bd      	mov	sp, r7
 8015f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f8c:	4770      	bx	lr

08015f8e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015f8e:	b580      	push	{r7, lr}
 8015f90:	b084      	sub	sp, #16
 8015f92:	af00      	add	r7, sp, #0
 8015f94:	6078      	str	r0, [r7, #4]
 8015f96:	460b      	mov	r3, r1
 8015f98:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015f9a:	2300      	movs	r3, #0
 8015f9c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d009      	beq.n	8015fbc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015fae:	681b      	ldr	r3, [r3, #0]
 8015fb0:	78fa      	ldrb	r2, [r7, #3]
 8015fb2:	4611      	mov	r1, r2
 8015fb4:	6878      	ldr	r0, [r7, #4]
 8015fb6:	4798      	blx	r3
 8015fb8:	4603      	mov	r3, r0
 8015fba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8015fbe:	4618      	mov	r0, r3
 8015fc0:	3710      	adds	r7, #16
 8015fc2:	46bd      	mov	sp, r7
 8015fc4:	bd80      	pop	{r7, pc}

08015fc6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015fc6:	b580      	push	{r7, lr}
 8015fc8:	b084      	sub	sp, #16
 8015fca:	af00      	add	r7, sp, #0
 8015fcc:	6078      	str	r0, [r7, #4]
 8015fce:	460b      	mov	r3, r1
 8015fd0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015fd2:	2300      	movs	r3, #0
 8015fd4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015fdc:	685b      	ldr	r3, [r3, #4]
 8015fde:	78fa      	ldrb	r2, [r7, #3]
 8015fe0:	4611      	mov	r1, r2
 8015fe2:	6878      	ldr	r0, [r7, #4]
 8015fe4:	4798      	blx	r3
 8015fe6:	4603      	mov	r3, r0
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d001      	beq.n	8015ff0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8015fec:	2303      	movs	r3, #3
 8015fee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ff2:	4618      	mov	r0, r3
 8015ff4:	3710      	adds	r7, #16
 8015ff6:	46bd      	mov	sp, r7
 8015ff8:	bd80      	pop	{r7, pc}

08015ffa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015ffa:	b580      	push	{r7, lr}
 8015ffc:	b084      	sub	sp, #16
 8015ffe:	af00      	add	r7, sp, #0
 8016000:	6078      	str	r0, [r7, #4]
 8016002:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801600a:	6839      	ldr	r1, [r7, #0]
 801600c:	4618      	mov	r0, r3
 801600e:	f001 f90e 	bl	801722e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	2201      	movs	r2, #1
 8016016:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8016020:	461a      	mov	r2, r3
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801602e:	f003 031f 	and.w	r3, r3, #31
 8016032:	2b02      	cmp	r3, #2
 8016034:	d01a      	beq.n	801606c <USBD_LL_SetupStage+0x72>
 8016036:	2b02      	cmp	r3, #2
 8016038:	d822      	bhi.n	8016080 <USBD_LL_SetupStage+0x86>
 801603a:	2b00      	cmp	r3, #0
 801603c:	d002      	beq.n	8016044 <USBD_LL_SetupStage+0x4a>
 801603e:	2b01      	cmp	r3, #1
 8016040:	d00a      	beq.n	8016058 <USBD_LL_SetupStage+0x5e>
 8016042:	e01d      	b.n	8016080 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801604a:	4619      	mov	r1, r3
 801604c:	6878      	ldr	r0, [r7, #4]
 801604e:	f000 fb65 	bl	801671c <USBD_StdDevReq>
 8016052:	4603      	mov	r3, r0
 8016054:	73fb      	strb	r3, [r7, #15]
      break;
 8016056:	e020      	b.n	801609a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801605e:	4619      	mov	r1, r3
 8016060:	6878      	ldr	r0, [r7, #4]
 8016062:	f000 fbcd 	bl	8016800 <USBD_StdItfReq>
 8016066:	4603      	mov	r3, r0
 8016068:	73fb      	strb	r3, [r7, #15]
      break;
 801606a:	e016      	b.n	801609a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8016072:	4619      	mov	r1, r3
 8016074:	6878      	ldr	r0, [r7, #4]
 8016076:	f000 fc2f 	bl	80168d8 <USBD_StdEPReq>
 801607a:	4603      	mov	r3, r0
 801607c:	73fb      	strb	r3, [r7, #15]
      break;
 801607e:	e00c      	b.n	801609a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8016086:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801608a:	b2db      	uxtb	r3, r3
 801608c:	4619      	mov	r1, r3
 801608e:	6878      	ldr	r0, [r7, #4]
 8016090:	f004 fdce 	bl	801ac30 <USBD_LL_StallEP>
 8016094:	4603      	mov	r3, r0
 8016096:	73fb      	strb	r3, [r7, #15]
      break;
 8016098:	bf00      	nop
  }

  return ret;
 801609a:	7bfb      	ldrb	r3, [r7, #15]
}
 801609c:	4618      	mov	r0, r3
 801609e:	3710      	adds	r7, #16
 80160a0:	46bd      	mov	sp, r7
 80160a2:	bd80      	pop	{r7, pc}

080160a4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80160a4:	b580      	push	{r7, lr}
 80160a6:	b086      	sub	sp, #24
 80160a8:	af00      	add	r7, sp, #0
 80160aa:	60f8      	str	r0, [r7, #12]
 80160ac:	460b      	mov	r3, r1
 80160ae:	607a      	str	r2, [r7, #4]
 80160b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80160b2:	2300      	movs	r3, #0
 80160b4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80160b6:	7afb      	ldrb	r3, [r7, #11]
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d16e      	bne.n	801619a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80160bc:	68fb      	ldr	r3, [r7, #12]
 80160be:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80160c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80160c4:	68fb      	ldr	r3, [r7, #12]
 80160c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80160ca:	2b03      	cmp	r3, #3
 80160cc:	f040 8098 	bne.w	8016200 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80160d0:	693b      	ldr	r3, [r7, #16]
 80160d2:	689a      	ldr	r2, [r3, #8]
 80160d4:	693b      	ldr	r3, [r7, #16]
 80160d6:	68db      	ldr	r3, [r3, #12]
 80160d8:	429a      	cmp	r2, r3
 80160da:	d913      	bls.n	8016104 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80160dc:	693b      	ldr	r3, [r7, #16]
 80160de:	689a      	ldr	r2, [r3, #8]
 80160e0:	693b      	ldr	r3, [r7, #16]
 80160e2:	68db      	ldr	r3, [r3, #12]
 80160e4:	1ad2      	subs	r2, r2, r3
 80160e6:	693b      	ldr	r3, [r7, #16]
 80160e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80160ea:	693b      	ldr	r3, [r7, #16]
 80160ec:	68da      	ldr	r2, [r3, #12]
 80160ee:	693b      	ldr	r3, [r7, #16]
 80160f0:	689b      	ldr	r3, [r3, #8]
 80160f2:	4293      	cmp	r3, r2
 80160f4:	bf28      	it	cs
 80160f6:	4613      	movcs	r3, r2
 80160f8:	461a      	mov	r2, r3
 80160fa:	6879      	ldr	r1, [r7, #4]
 80160fc:	68f8      	ldr	r0, [r7, #12]
 80160fe:	f001 f98a 	bl	8017416 <USBD_CtlContinueRx>
 8016102:	e07d      	b.n	8016200 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801610a:	f003 031f 	and.w	r3, r3, #31
 801610e:	2b02      	cmp	r3, #2
 8016110:	d014      	beq.n	801613c <USBD_LL_DataOutStage+0x98>
 8016112:	2b02      	cmp	r3, #2
 8016114:	d81d      	bhi.n	8016152 <USBD_LL_DataOutStage+0xae>
 8016116:	2b00      	cmp	r3, #0
 8016118:	d002      	beq.n	8016120 <USBD_LL_DataOutStage+0x7c>
 801611a:	2b01      	cmp	r3, #1
 801611c:	d003      	beq.n	8016126 <USBD_LL_DataOutStage+0x82>
 801611e:	e018      	b.n	8016152 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8016120:	2300      	movs	r3, #0
 8016122:	75bb      	strb	r3, [r7, #22]
            break;
 8016124:	e018      	b.n	8016158 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8016126:	68fb      	ldr	r3, [r7, #12]
 8016128:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801612c:	b2db      	uxtb	r3, r3
 801612e:	4619      	mov	r1, r3
 8016130:	68f8      	ldr	r0, [r7, #12]
 8016132:	f000 fa64 	bl	80165fe <USBD_CoreFindIF>
 8016136:	4603      	mov	r3, r0
 8016138:	75bb      	strb	r3, [r7, #22]
            break;
 801613a:	e00d      	b.n	8016158 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801613c:	68fb      	ldr	r3, [r7, #12]
 801613e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8016142:	b2db      	uxtb	r3, r3
 8016144:	4619      	mov	r1, r3
 8016146:	68f8      	ldr	r0, [r7, #12]
 8016148:	f000 fa66 	bl	8016618 <USBD_CoreFindEP>
 801614c:	4603      	mov	r3, r0
 801614e:	75bb      	strb	r3, [r7, #22]
            break;
 8016150:	e002      	b.n	8016158 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8016152:	2300      	movs	r3, #0
 8016154:	75bb      	strb	r3, [r7, #22]
            break;
 8016156:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8016158:	7dbb      	ldrb	r3, [r7, #22]
 801615a:	2b00      	cmp	r3, #0
 801615c:	d119      	bne.n	8016192 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016164:	b2db      	uxtb	r3, r3
 8016166:	2b03      	cmp	r3, #3
 8016168:	d113      	bne.n	8016192 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801616a:	7dba      	ldrb	r2, [r7, #22]
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	32ae      	adds	r2, #174	; 0xae
 8016170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016174:	691b      	ldr	r3, [r3, #16]
 8016176:	2b00      	cmp	r3, #0
 8016178:	d00b      	beq.n	8016192 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801617a:	7dba      	ldrb	r2, [r7, #22]
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8016182:	7dba      	ldrb	r2, [r7, #22]
 8016184:	68fb      	ldr	r3, [r7, #12]
 8016186:	32ae      	adds	r2, #174	; 0xae
 8016188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801618c:	691b      	ldr	r3, [r3, #16]
 801618e:	68f8      	ldr	r0, [r7, #12]
 8016190:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8016192:	68f8      	ldr	r0, [r7, #12]
 8016194:	f001 f950 	bl	8017438 <USBD_CtlSendStatus>
 8016198:	e032      	b.n	8016200 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801619a:	7afb      	ldrb	r3, [r7, #11]
 801619c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80161a0:	b2db      	uxtb	r3, r3
 80161a2:	4619      	mov	r1, r3
 80161a4:	68f8      	ldr	r0, [r7, #12]
 80161a6:	f000 fa37 	bl	8016618 <USBD_CoreFindEP>
 80161aa:	4603      	mov	r3, r0
 80161ac:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80161ae:	7dbb      	ldrb	r3, [r7, #22]
 80161b0:	2bff      	cmp	r3, #255	; 0xff
 80161b2:	d025      	beq.n	8016200 <USBD_LL_DataOutStage+0x15c>
 80161b4:	7dbb      	ldrb	r3, [r7, #22]
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d122      	bne.n	8016200 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80161ba:	68fb      	ldr	r3, [r7, #12]
 80161bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80161c0:	b2db      	uxtb	r3, r3
 80161c2:	2b03      	cmp	r3, #3
 80161c4:	d117      	bne.n	80161f6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80161c6:	7dba      	ldrb	r2, [r7, #22]
 80161c8:	68fb      	ldr	r3, [r7, #12]
 80161ca:	32ae      	adds	r2, #174	; 0xae
 80161cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80161d0:	699b      	ldr	r3, [r3, #24]
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d00f      	beq.n	80161f6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80161d6:	7dba      	ldrb	r2, [r7, #22]
 80161d8:	68fb      	ldr	r3, [r7, #12]
 80161da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80161de:	7dba      	ldrb	r2, [r7, #22]
 80161e0:	68fb      	ldr	r3, [r7, #12]
 80161e2:	32ae      	adds	r2, #174	; 0xae
 80161e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80161e8:	699b      	ldr	r3, [r3, #24]
 80161ea:	7afa      	ldrb	r2, [r7, #11]
 80161ec:	4611      	mov	r1, r2
 80161ee:	68f8      	ldr	r0, [r7, #12]
 80161f0:	4798      	blx	r3
 80161f2:	4603      	mov	r3, r0
 80161f4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80161f6:	7dfb      	ldrb	r3, [r7, #23]
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d001      	beq.n	8016200 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80161fc:	7dfb      	ldrb	r3, [r7, #23]
 80161fe:	e000      	b.n	8016202 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8016200:	2300      	movs	r3, #0
}
 8016202:	4618      	mov	r0, r3
 8016204:	3718      	adds	r7, #24
 8016206:	46bd      	mov	sp, r7
 8016208:	bd80      	pop	{r7, pc}

0801620a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801620a:	b580      	push	{r7, lr}
 801620c:	b086      	sub	sp, #24
 801620e:	af00      	add	r7, sp, #0
 8016210:	60f8      	str	r0, [r7, #12]
 8016212:	460b      	mov	r3, r1
 8016214:	607a      	str	r2, [r7, #4]
 8016216:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8016218:	7afb      	ldrb	r3, [r7, #11]
 801621a:	2b00      	cmp	r3, #0
 801621c:	d16f      	bne.n	80162fe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801621e:	68fb      	ldr	r3, [r7, #12]
 8016220:	3314      	adds	r3, #20
 8016222:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8016224:	68fb      	ldr	r3, [r7, #12]
 8016226:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801622a:	2b02      	cmp	r3, #2
 801622c:	d15a      	bne.n	80162e4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801622e:	693b      	ldr	r3, [r7, #16]
 8016230:	689a      	ldr	r2, [r3, #8]
 8016232:	693b      	ldr	r3, [r7, #16]
 8016234:	68db      	ldr	r3, [r3, #12]
 8016236:	429a      	cmp	r2, r3
 8016238:	d914      	bls.n	8016264 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801623a:	693b      	ldr	r3, [r7, #16]
 801623c:	689a      	ldr	r2, [r3, #8]
 801623e:	693b      	ldr	r3, [r7, #16]
 8016240:	68db      	ldr	r3, [r3, #12]
 8016242:	1ad2      	subs	r2, r2, r3
 8016244:	693b      	ldr	r3, [r7, #16]
 8016246:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8016248:	693b      	ldr	r3, [r7, #16]
 801624a:	689b      	ldr	r3, [r3, #8]
 801624c:	461a      	mov	r2, r3
 801624e:	6879      	ldr	r1, [r7, #4]
 8016250:	68f8      	ldr	r0, [r7, #12]
 8016252:	f001 f8b2 	bl	80173ba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016256:	2300      	movs	r3, #0
 8016258:	2200      	movs	r2, #0
 801625a:	2100      	movs	r1, #0
 801625c:	68f8      	ldr	r0, [r7, #12]
 801625e:	f004 fd91 	bl	801ad84 <USBD_LL_PrepareReceive>
 8016262:	e03f      	b.n	80162e4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8016264:	693b      	ldr	r3, [r7, #16]
 8016266:	68da      	ldr	r2, [r3, #12]
 8016268:	693b      	ldr	r3, [r7, #16]
 801626a:	689b      	ldr	r3, [r3, #8]
 801626c:	429a      	cmp	r2, r3
 801626e:	d11c      	bne.n	80162aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8016270:	693b      	ldr	r3, [r7, #16]
 8016272:	685a      	ldr	r2, [r3, #4]
 8016274:	693b      	ldr	r3, [r7, #16]
 8016276:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8016278:	429a      	cmp	r2, r3
 801627a:	d316      	bcc.n	80162aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801627c:	693b      	ldr	r3, [r7, #16]
 801627e:	685a      	ldr	r2, [r3, #4]
 8016280:	68fb      	ldr	r3, [r7, #12]
 8016282:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8016286:	429a      	cmp	r2, r3
 8016288:	d20f      	bcs.n	80162aa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801628a:	2200      	movs	r2, #0
 801628c:	2100      	movs	r1, #0
 801628e:	68f8      	ldr	r0, [r7, #12]
 8016290:	f001 f893 	bl	80173ba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8016294:	68fb      	ldr	r3, [r7, #12]
 8016296:	2200      	movs	r2, #0
 8016298:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801629c:	2300      	movs	r3, #0
 801629e:	2200      	movs	r2, #0
 80162a0:	2100      	movs	r1, #0
 80162a2:	68f8      	ldr	r0, [r7, #12]
 80162a4:	f004 fd6e 	bl	801ad84 <USBD_LL_PrepareReceive>
 80162a8:	e01c      	b.n	80162e4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80162aa:	68fb      	ldr	r3, [r7, #12]
 80162ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80162b0:	b2db      	uxtb	r3, r3
 80162b2:	2b03      	cmp	r3, #3
 80162b4:	d10f      	bne.n	80162d6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80162b6:	68fb      	ldr	r3, [r7, #12]
 80162b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80162bc:	68db      	ldr	r3, [r3, #12]
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d009      	beq.n	80162d6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80162c2:	68fb      	ldr	r3, [r7, #12]
 80162c4:	2200      	movs	r2, #0
 80162c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80162ca:	68fb      	ldr	r3, [r7, #12]
 80162cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80162d0:	68db      	ldr	r3, [r3, #12]
 80162d2:	68f8      	ldr	r0, [r7, #12]
 80162d4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80162d6:	2180      	movs	r1, #128	; 0x80
 80162d8:	68f8      	ldr	r0, [r7, #12]
 80162da:	f004 fca9 	bl	801ac30 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80162de:	68f8      	ldr	r0, [r7, #12]
 80162e0:	f001 f8bd 	bl	801745e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	d03a      	beq.n	8016364 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80162ee:	68f8      	ldr	r0, [r7, #12]
 80162f0:	f7ff fe42 	bl	8015f78 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80162f4:	68fb      	ldr	r3, [r7, #12]
 80162f6:	2200      	movs	r2, #0
 80162f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80162fc:	e032      	b.n	8016364 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80162fe:	7afb      	ldrb	r3, [r7, #11]
 8016300:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8016304:	b2db      	uxtb	r3, r3
 8016306:	4619      	mov	r1, r3
 8016308:	68f8      	ldr	r0, [r7, #12]
 801630a:	f000 f985 	bl	8016618 <USBD_CoreFindEP>
 801630e:	4603      	mov	r3, r0
 8016310:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016312:	7dfb      	ldrb	r3, [r7, #23]
 8016314:	2bff      	cmp	r3, #255	; 0xff
 8016316:	d025      	beq.n	8016364 <USBD_LL_DataInStage+0x15a>
 8016318:	7dfb      	ldrb	r3, [r7, #23]
 801631a:	2b00      	cmp	r3, #0
 801631c:	d122      	bne.n	8016364 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801631e:	68fb      	ldr	r3, [r7, #12]
 8016320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016324:	b2db      	uxtb	r3, r3
 8016326:	2b03      	cmp	r3, #3
 8016328:	d11c      	bne.n	8016364 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801632a:	7dfa      	ldrb	r2, [r7, #23]
 801632c:	68fb      	ldr	r3, [r7, #12]
 801632e:	32ae      	adds	r2, #174	; 0xae
 8016330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016334:	695b      	ldr	r3, [r3, #20]
 8016336:	2b00      	cmp	r3, #0
 8016338:	d014      	beq.n	8016364 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801633a:	7dfa      	ldrb	r2, [r7, #23]
 801633c:	68fb      	ldr	r3, [r7, #12]
 801633e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8016342:	7dfa      	ldrb	r2, [r7, #23]
 8016344:	68fb      	ldr	r3, [r7, #12]
 8016346:	32ae      	adds	r2, #174	; 0xae
 8016348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801634c:	695b      	ldr	r3, [r3, #20]
 801634e:	7afa      	ldrb	r2, [r7, #11]
 8016350:	4611      	mov	r1, r2
 8016352:	68f8      	ldr	r0, [r7, #12]
 8016354:	4798      	blx	r3
 8016356:	4603      	mov	r3, r0
 8016358:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801635a:	7dbb      	ldrb	r3, [r7, #22]
 801635c:	2b00      	cmp	r3, #0
 801635e:	d001      	beq.n	8016364 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8016360:	7dbb      	ldrb	r3, [r7, #22]
 8016362:	e000      	b.n	8016366 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8016364:	2300      	movs	r3, #0
}
 8016366:	4618      	mov	r0, r3
 8016368:	3718      	adds	r7, #24
 801636a:	46bd      	mov	sp, r7
 801636c:	bd80      	pop	{r7, pc}

0801636e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801636e:	b580      	push	{r7, lr}
 8016370:	b084      	sub	sp, #16
 8016372:	af00      	add	r7, sp, #0
 8016374:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8016376:	2300      	movs	r3, #0
 8016378:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	2201      	movs	r2, #1
 801637e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	2200      	movs	r2, #0
 8016386:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	2200      	movs	r2, #0
 801638e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	2200      	movs	r2, #0
 8016394:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	2200      	movs	r2, #0
 801639c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d014      	beq.n	80163d4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80163b0:	685b      	ldr	r3, [r3, #4]
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	d00e      	beq.n	80163d4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80163bc:	685b      	ldr	r3, [r3, #4]
 80163be:	687a      	ldr	r2, [r7, #4]
 80163c0:	6852      	ldr	r2, [r2, #4]
 80163c2:	b2d2      	uxtb	r2, r2
 80163c4:	4611      	mov	r1, r2
 80163c6:	6878      	ldr	r0, [r7, #4]
 80163c8:	4798      	blx	r3
 80163ca:	4603      	mov	r3, r0
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d001      	beq.n	80163d4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80163d0:	2303      	movs	r3, #3
 80163d2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80163d4:	2340      	movs	r3, #64	; 0x40
 80163d6:	2200      	movs	r2, #0
 80163d8:	2100      	movs	r1, #0
 80163da:	6878      	ldr	r0, [r7, #4]
 80163dc:	f004 fbe3 	bl	801aba6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	2201      	movs	r2, #1
 80163e4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	2240      	movs	r2, #64	; 0x40
 80163ec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80163f0:	2340      	movs	r3, #64	; 0x40
 80163f2:	2200      	movs	r2, #0
 80163f4:	2180      	movs	r1, #128	; 0x80
 80163f6:	6878      	ldr	r0, [r7, #4]
 80163f8:	f004 fbd5 	bl	801aba6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	2201      	movs	r2, #1
 8016400:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	2240      	movs	r2, #64	; 0x40
 8016406:	621a      	str	r2, [r3, #32]

  return ret;
 8016408:	7bfb      	ldrb	r3, [r7, #15]
}
 801640a:	4618      	mov	r0, r3
 801640c:	3710      	adds	r7, #16
 801640e:	46bd      	mov	sp, r7
 8016410:	bd80      	pop	{r7, pc}

08016412 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8016412:	b480      	push	{r7}
 8016414:	b083      	sub	sp, #12
 8016416:	af00      	add	r7, sp, #0
 8016418:	6078      	str	r0, [r7, #4]
 801641a:	460b      	mov	r3, r1
 801641c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	78fa      	ldrb	r2, [r7, #3]
 8016422:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8016424:	2300      	movs	r3, #0
}
 8016426:	4618      	mov	r0, r3
 8016428:	370c      	adds	r7, #12
 801642a:	46bd      	mov	sp, r7
 801642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016430:	4770      	bx	lr

08016432 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8016432:	b480      	push	{r7}
 8016434:	b083      	sub	sp, #12
 8016436:	af00      	add	r7, sp, #0
 8016438:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016440:	b2db      	uxtb	r3, r3
 8016442:	2b04      	cmp	r3, #4
 8016444:	d006      	beq.n	8016454 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801644c:	b2da      	uxtb	r2, r3
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	2204      	movs	r2, #4
 8016458:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801645c:	2300      	movs	r3, #0
}
 801645e:	4618      	mov	r0, r3
 8016460:	370c      	adds	r7, #12
 8016462:	46bd      	mov	sp, r7
 8016464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016468:	4770      	bx	lr

0801646a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801646a:	b480      	push	{r7}
 801646c:	b083      	sub	sp, #12
 801646e:	af00      	add	r7, sp, #0
 8016470:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016478:	b2db      	uxtb	r3, r3
 801647a:	2b04      	cmp	r3, #4
 801647c:	d106      	bne.n	801648c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8016484:	b2da      	uxtb	r2, r3
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801648c:	2300      	movs	r3, #0
}
 801648e:	4618      	mov	r0, r3
 8016490:	370c      	adds	r7, #12
 8016492:	46bd      	mov	sp, r7
 8016494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016498:	4770      	bx	lr

0801649a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801649a:	b580      	push	{r7, lr}
 801649c:	b082      	sub	sp, #8
 801649e:	af00      	add	r7, sp, #0
 80164a0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80164a8:	b2db      	uxtb	r3, r3
 80164aa:	2b03      	cmp	r3, #3
 80164ac:	d110      	bne.n	80164d0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d00b      	beq.n	80164d0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80164be:	69db      	ldr	r3, [r3, #28]
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d005      	beq.n	80164d0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80164ca:	69db      	ldr	r3, [r3, #28]
 80164cc:	6878      	ldr	r0, [r7, #4]
 80164ce:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80164d0:	2300      	movs	r3, #0
}
 80164d2:	4618      	mov	r0, r3
 80164d4:	3708      	adds	r7, #8
 80164d6:	46bd      	mov	sp, r7
 80164d8:	bd80      	pop	{r7, pc}

080164da <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80164da:	b580      	push	{r7, lr}
 80164dc:	b082      	sub	sp, #8
 80164de:	af00      	add	r7, sp, #0
 80164e0:	6078      	str	r0, [r7, #4]
 80164e2:	460b      	mov	r3, r1
 80164e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	32ae      	adds	r2, #174	; 0xae
 80164f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d101      	bne.n	80164fc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80164f8:	2303      	movs	r3, #3
 80164fa:	e01c      	b.n	8016536 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016502:	b2db      	uxtb	r3, r3
 8016504:	2b03      	cmp	r3, #3
 8016506:	d115      	bne.n	8016534 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	32ae      	adds	r2, #174	; 0xae
 8016512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016516:	6a1b      	ldr	r3, [r3, #32]
 8016518:	2b00      	cmp	r3, #0
 801651a:	d00b      	beq.n	8016534 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	32ae      	adds	r2, #174	; 0xae
 8016526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801652a:	6a1b      	ldr	r3, [r3, #32]
 801652c:	78fa      	ldrb	r2, [r7, #3]
 801652e:	4611      	mov	r1, r2
 8016530:	6878      	ldr	r0, [r7, #4]
 8016532:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016534:	2300      	movs	r3, #0
}
 8016536:	4618      	mov	r0, r3
 8016538:	3708      	adds	r7, #8
 801653a:	46bd      	mov	sp, r7
 801653c:	bd80      	pop	{r7, pc}

0801653e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801653e:	b580      	push	{r7, lr}
 8016540:	b082      	sub	sp, #8
 8016542:	af00      	add	r7, sp, #0
 8016544:	6078      	str	r0, [r7, #4]
 8016546:	460b      	mov	r3, r1
 8016548:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	32ae      	adds	r2, #174	; 0xae
 8016554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016558:	2b00      	cmp	r3, #0
 801655a:	d101      	bne.n	8016560 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 801655c:	2303      	movs	r3, #3
 801655e:	e01c      	b.n	801659a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016566:	b2db      	uxtb	r3, r3
 8016568:	2b03      	cmp	r3, #3
 801656a:	d115      	bne.n	8016598 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	32ae      	adds	r2, #174	; 0xae
 8016576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801657a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801657c:	2b00      	cmp	r3, #0
 801657e:	d00b      	beq.n	8016598 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	32ae      	adds	r2, #174	; 0xae
 801658a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801658e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016590:	78fa      	ldrb	r2, [r7, #3]
 8016592:	4611      	mov	r1, r2
 8016594:	6878      	ldr	r0, [r7, #4]
 8016596:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016598:	2300      	movs	r3, #0
}
 801659a:	4618      	mov	r0, r3
 801659c:	3708      	adds	r7, #8
 801659e:	46bd      	mov	sp, r7
 80165a0:	bd80      	pop	{r7, pc}

080165a2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80165a2:	b480      	push	{r7}
 80165a4:	b083      	sub	sp, #12
 80165a6:	af00      	add	r7, sp, #0
 80165a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80165aa:	2300      	movs	r3, #0
}
 80165ac:	4618      	mov	r0, r3
 80165ae:	370c      	adds	r7, #12
 80165b0:	46bd      	mov	sp, r7
 80165b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165b6:	4770      	bx	lr

080165b8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80165b8:	b580      	push	{r7, lr}
 80165ba:	b084      	sub	sp, #16
 80165bc:	af00      	add	r7, sp, #0
 80165be:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80165c0:	2300      	movs	r3, #0
 80165c2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	2201      	movs	r2, #1
 80165c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80165d2:	2b00      	cmp	r3, #0
 80165d4:	d00e      	beq.n	80165f4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80165dc:	685b      	ldr	r3, [r3, #4]
 80165de:	687a      	ldr	r2, [r7, #4]
 80165e0:	6852      	ldr	r2, [r2, #4]
 80165e2:	b2d2      	uxtb	r2, r2
 80165e4:	4611      	mov	r1, r2
 80165e6:	6878      	ldr	r0, [r7, #4]
 80165e8:	4798      	blx	r3
 80165ea:	4603      	mov	r3, r0
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d001      	beq.n	80165f4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80165f0:	2303      	movs	r3, #3
 80165f2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80165f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80165f6:	4618      	mov	r0, r3
 80165f8:	3710      	adds	r7, #16
 80165fa:	46bd      	mov	sp, r7
 80165fc:	bd80      	pop	{r7, pc}

080165fe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80165fe:	b480      	push	{r7}
 8016600:	b083      	sub	sp, #12
 8016602:	af00      	add	r7, sp, #0
 8016604:	6078      	str	r0, [r7, #4]
 8016606:	460b      	mov	r3, r1
 8016608:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801660a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801660c:	4618      	mov	r0, r3
 801660e:	370c      	adds	r7, #12
 8016610:	46bd      	mov	sp, r7
 8016612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016616:	4770      	bx	lr

08016618 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016618:	b480      	push	{r7}
 801661a:	b083      	sub	sp, #12
 801661c:	af00      	add	r7, sp, #0
 801661e:	6078      	str	r0, [r7, #4]
 8016620:	460b      	mov	r3, r1
 8016622:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016624:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016626:	4618      	mov	r0, r3
 8016628:	370c      	adds	r7, #12
 801662a:	46bd      	mov	sp, r7
 801662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016630:	4770      	bx	lr

08016632 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8016632:	b580      	push	{r7, lr}
 8016634:	b086      	sub	sp, #24
 8016636:	af00      	add	r7, sp, #0
 8016638:	6078      	str	r0, [r7, #4]
 801663a:	460b      	mov	r3, r1
 801663c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8016646:	2300      	movs	r3, #0
 8016648:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801664a:	68fb      	ldr	r3, [r7, #12]
 801664c:	885b      	ldrh	r3, [r3, #2]
 801664e:	b29a      	uxth	r2, r3
 8016650:	68fb      	ldr	r3, [r7, #12]
 8016652:	781b      	ldrb	r3, [r3, #0]
 8016654:	b29b      	uxth	r3, r3
 8016656:	429a      	cmp	r2, r3
 8016658:	d920      	bls.n	801669c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 801665a:	68fb      	ldr	r3, [r7, #12]
 801665c:	781b      	ldrb	r3, [r3, #0]
 801665e:	b29b      	uxth	r3, r3
 8016660:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8016662:	e013      	b.n	801668c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8016664:	f107 030a 	add.w	r3, r7, #10
 8016668:	4619      	mov	r1, r3
 801666a:	6978      	ldr	r0, [r7, #20]
 801666c:	f000 f81b 	bl	80166a6 <USBD_GetNextDesc>
 8016670:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8016672:	697b      	ldr	r3, [r7, #20]
 8016674:	785b      	ldrb	r3, [r3, #1]
 8016676:	2b05      	cmp	r3, #5
 8016678:	d108      	bne.n	801668c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801667a:	697b      	ldr	r3, [r7, #20]
 801667c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801667e:	693b      	ldr	r3, [r7, #16]
 8016680:	789b      	ldrb	r3, [r3, #2]
 8016682:	78fa      	ldrb	r2, [r7, #3]
 8016684:	429a      	cmp	r2, r3
 8016686:	d008      	beq.n	801669a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8016688:	2300      	movs	r3, #0
 801668a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 801668c:	68fb      	ldr	r3, [r7, #12]
 801668e:	885b      	ldrh	r3, [r3, #2]
 8016690:	b29a      	uxth	r2, r3
 8016692:	897b      	ldrh	r3, [r7, #10]
 8016694:	429a      	cmp	r2, r3
 8016696:	d8e5      	bhi.n	8016664 <USBD_GetEpDesc+0x32>
 8016698:	e000      	b.n	801669c <USBD_GetEpDesc+0x6a>
          break;
 801669a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 801669c:	693b      	ldr	r3, [r7, #16]
}
 801669e:	4618      	mov	r0, r3
 80166a0:	3718      	adds	r7, #24
 80166a2:	46bd      	mov	sp, r7
 80166a4:	bd80      	pop	{r7, pc}

080166a6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80166a6:	b480      	push	{r7}
 80166a8:	b085      	sub	sp, #20
 80166aa:	af00      	add	r7, sp, #0
 80166ac:	6078      	str	r0, [r7, #4]
 80166ae:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80166b4:	683b      	ldr	r3, [r7, #0]
 80166b6:	881a      	ldrh	r2, [r3, #0]
 80166b8:	68fb      	ldr	r3, [r7, #12]
 80166ba:	781b      	ldrb	r3, [r3, #0]
 80166bc:	b29b      	uxth	r3, r3
 80166be:	4413      	add	r3, r2
 80166c0:	b29a      	uxth	r2, r3
 80166c2:	683b      	ldr	r3, [r7, #0]
 80166c4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80166c6:	68fb      	ldr	r3, [r7, #12]
 80166c8:	781b      	ldrb	r3, [r3, #0]
 80166ca:	461a      	mov	r2, r3
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	4413      	add	r3, r2
 80166d0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80166d2:	68fb      	ldr	r3, [r7, #12]
}
 80166d4:	4618      	mov	r0, r3
 80166d6:	3714      	adds	r7, #20
 80166d8:	46bd      	mov	sp, r7
 80166da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166de:	4770      	bx	lr

080166e0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80166e0:	b480      	push	{r7}
 80166e2:	b087      	sub	sp, #28
 80166e4:	af00      	add	r7, sp, #0
 80166e6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80166ec:	697b      	ldr	r3, [r7, #20]
 80166ee:	781b      	ldrb	r3, [r3, #0]
 80166f0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80166f2:	697b      	ldr	r3, [r7, #20]
 80166f4:	3301      	adds	r3, #1
 80166f6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80166f8:	697b      	ldr	r3, [r7, #20]
 80166fa:	781b      	ldrb	r3, [r3, #0]
 80166fc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80166fe:	8a3b      	ldrh	r3, [r7, #16]
 8016700:	021b      	lsls	r3, r3, #8
 8016702:	b21a      	sxth	r2, r3
 8016704:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016708:	4313      	orrs	r3, r2
 801670a:	b21b      	sxth	r3, r3
 801670c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801670e:	89fb      	ldrh	r3, [r7, #14]
}
 8016710:	4618      	mov	r0, r3
 8016712:	371c      	adds	r7, #28
 8016714:	46bd      	mov	sp, r7
 8016716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801671a:	4770      	bx	lr

0801671c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801671c:	b580      	push	{r7, lr}
 801671e:	b084      	sub	sp, #16
 8016720:	af00      	add	r7, sp, #0
 8016722:	6078      	str	r0, [r7, #4]
 8016724:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016726:	2300      	movs	r3, #0
 8016728:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801672a:	683b      	ldr	r3, [r7, #0]
 801672c:	781b      	ldrb	r3, [r3, #0]
 801672e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016732:	2b40      	cmp	r3, #64	; 0x40
 8016734:	d005      	beq.n	8016742 <USBD_StdDevReq+0x26>
 8016736:	2b40      	cmp	r3, #64	; 0x40
 8016738:	d857      	bhi.n	80167ea <USBD_StdDevReq+0xce>
 801673a:	2b00      	cmp	r3, #0
 801673c:	d00f      	beq.n	801675e <USBD_StdDevReq+0x42>
 801673e:	2b20      	cmp	r3, #32
 8016740:	d153      	bne.n	80167ea <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	32ae      	adds	r2, #174	; 0xae
 801674c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016750:	689b      	ldr	r3, [r3, #8]
 8016752:	6839      	ldr	r1, [r7, #0]
 8016754:	6878      	ldr	r0, [r7, #4]
 8016756:	4798      	blx	r3
 8016758:	4603      	mov	r3, r0
 801675a:	73fb      	strb	r3, [r7, #15]
      break;
 801675c:	e04a      	b.n	80167f4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801675e:	683b      	ldr	r3, [r7, #0]
 8016760:	785b      	ldrb	r3, [r3, #1]
 8016762:	2b09      	cmp	r3, #9
 8016764:	d83b      	bhi.n	80167de <USBD_StdDevReq+0xc2>
 8016766:	a201      	add	r2, pc, #4	; (adr r2, 801676c <USBD_StdDevReq+0x50>)
 8016768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801676c:	080167c1 	.word	0x080167c1
 8016770:	080167d5 	.word	0x080167d5
 8016774:	080167df 	.word	0x080167df
 8016778:	080167cb 	.word	0x080167cb
 801677c:	080167df 	.word	0x080167df
 8016780:	0801679f 	.word	0x0801679f
 8016784:	08016795 	.word	0x08016795
 8016788:	080167df 	.word	0x080167df
 801678c:	080167b7 	.word	0x080167b7
 8016790:	080167a9 	.word	0x080167a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8016794:	6839      	ldr	r1, [r7, #0]
 8016796:	6878      	ldr	r0, [r7, #4]
 8016798:	f000 fa3c 	bl	8016c14 <USBD_GetDescriptor>
          break;
 801679c:	e024      	b.n	80167e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801679e:	6839      	ldr	r1, [r7, #0]
 80167a0:	6878      	ldr	r0, [r7, #4]
 80167a2:	f000 fba1 	bl	8016ee8 <USBD_SetAddress>
          break;
 80167a6:	e01f      	b.n	80167e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80167a8:	6839      	ldr	r1, [r7, #0]
 80167aa:	6878      	ldr	r0, [r7, #4]
 80167ac:	f000 fbe0 	bl	8016f70 <USBD_SetConfig>
 80167b0:	4603      	mov	r3, r0
 80167b2:	73fb      	strb	r3, [r7, #15]
          break;
 80167b4:	e018      	b.n	80167e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80167b6:	6839      	ldr	r1, [r7, #0]
 80167b8:	6878      	ldr	r0, [r7, #4]
 80167ba:	f000 fc83 	bl	80170c4 <USBD_GetConfig>
          break;
 80167be:	e013      	b.n	80167e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80167c0:	6839      	ldr	r1, [r7, #0]
 80167c2:	6878      	ldr	r0, [r7, #4]
 80167c4:	f000 fcb4 	bl	8017130 <USBD_GetStatus>
          break;
 80167c8:	e00e      	b.n	80167e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80167ca:	6839      	ldr	r1, [r7, #0]
 80167cc:	6878      	ldr	r0, [r7, #4]
 80167ce:	f000 fce3 	bl	8017198 <USBD_SetFeature>
          break;
 80167d2:	e009      	b.n	80167e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80167d4:	6839      	ldr	r1, [r7, #0]
 80167d6:	6878      	ldr	r0, [r7, #4]
 80167d8:	f000 fd07 	bl	80171ea <USBD_ClrFeature>
          break;
 80167dc:	e004      	b.n	80167e8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80167de:	6839      	ldr	r1, [r7, #0]
 80167e0:	6878      	ldr	r0, [r7, #4]
 80167e2:	f000 fd5e 	bl	80172a2 <USBD_CtlError>
          break;
 80167e6:	bf00      	nop
      }
      break;
 80167e8:	e004      	b.n	80167f4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80167ea:	6839      	ldr	r1, [r7, #0]
 80167ec:	6878      	ldr	r0, [r7, #4]
 80167ee:	f000 fd58 	bl	80172a2 <USBD_CtlError>
      break;
 80167f2:	bf00      	nop
  }

  return ret;
 80167f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80167f6:	4618      	mov	r0, r3
 80167f8:	3710      	adds	r7, #16
 80167fa:	46bd      	mov	sp, r7
 80167fc:	bd80      	pop	{r7, pc}
 80167fe:	bf00      	nop

08016800 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016800:	b580      	push	{r7, lr}
 8016802:	b084      	sub	sp, #16
 8016804:	af00      	add	r7, sp, #0
 8016806:	6078      	str	r0, [r7, #4]
 8016808:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801680a:	2300      	movs	r3, #0
 801680c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801680e:	683b      	ldr	r3, [r7, #0]
 8016810:	781b      	ldrb	r3, [r3, #0]
 8016812:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016816:	2b40      	cmp	r3, #64	; 0x40
 8016818:	d005      	beq.n	8016826 <USBD_StdItfReq+0x26>
 801681a:	2b40      	cmp	r3, #64	; 0x40
 801681c:	d852      	bhi.n	80168c4 <USBD_StdItfReq+0xc4>
 801681e:	2b00      	cmp	r3, #0
 8016820:	d001      	beq.n	8016826 <USBD_StdItfReq+0x26>
 8016822:	2b20      	cmp	r3, #32
 8016824:	d14e      	bne.n	80168c4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801682c:	b2db      	uxtb	r3, r3
 801682e:	3b01      	subs	r3, #1
 8016830:	2b02      	cmp	r3, #2
 8016832:	d840      	bhi.n	80168b6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8016834:	683b      	ldr	r3, [r7, #0]
 8016836:	889b      	ldrh	r3, [r3, #4]
 8016838:	b2db      	uxtb	r3, r3
 801683a:	2b01      	cmp	r3, #1
 801683c:	d836      	bhi.n	80168ac <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801683e:	683b      	ldr	r3, [r7, #0]
 8016840:	889b      	ldrh	r3, [r3, #4]
 8016842:	b2db      	uxtb	r3, r3
 8016844:	4619      	mov	r1, r3
 8016846:	6878      	ldr	r0, [r7, #4]
 8016848:	f7ff fed9 	bl	80165fe <USBD_CoreFindIF>
 801684c:	4603      	mov	r3, r0
 801684e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016850:	7bbb      	ldrb	r3, [r7, #14]
 8016852:	2bff      	cmp	r3, #255	; 0xff
 8016854:	d01d      	beq.n	8016892 <USBD_StdItfReq+0x92>
 8016856:	7bbb      	ldrb	r3, [r7, #14]
 8016858:	2b00      	cmp	r3, #0
 801685a:	d11a      	bne.n	8016892 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801685c:	7bba      	ldrb	r2, [r7, #14]
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	32ae      	adds	r2, #174	; 0xae
 8016862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016866:	689b      	ldr	r3, [r3, #8]
 8016868:	2b00      	cmp	r3, #0
 801686a:	d00f      	beq.n	801688c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 801686c:	7bba      	ldrb	r2, [r7, #14]
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016874:	7bba      	ldrb	r2, [r7, #14]
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	32ae      	adds	r2, #174	; 0xae
 801687a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801687e:	689b      	ldr	r3, [r3, #8]
 8016880:	6839      	ldr	r1, [r7, #0]
 8016882:	6878      	ldr	r0, [r7, #4]
 8016884:	4798      	blx	r3
 8016886:	4603      	mov	r3, r0
 8016888:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801688a:	e004      	b.n	8016896 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 801688c:	2303      	movs	r3, #3
 801688e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016890:	e001      	b.n	8016896 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8016892:	2303      	movs	r3, #3
 8016894:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8016896:	683b      	ldr	r3, [r7, #0]
 8016898:	88db      	ldrh	r3, [r3, #6]
 801689a:	2b00      	cmp	r3, #0
 801689c:	d110      	bne.n	80168c0 <USBD_StdItfReq+0xc0>
 801689e:	7bfb      	ldrb	r3, [r7, #15]
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	d10d      	bne.n	80168c0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80168a4:	6878      	ldr	r0, [r7, #4]
 80168a6:	f000 fdc7 	bl	8017438 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80168aa:	e009      	b.n	80168c0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80168ac:	6839      	ldr	r1, [r7, #0]
 80168ae:	6878      	ldr	r0, [r7, #4]
 80168b0:	f000 fcf7 	bl	80172a2 <USBD_CtlError>
          break;
 80168b4:	e004      	b.n	80168c0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80168b6:	6839      	ldr	r1, [r7, #0]
 80168b8:	6878      	ldr	r0, [r7, #4]
 80168ba:	f000 fcf2 	bl	80172a2 <USBD_CtlError>
          break;
 80168be:	e000      	b.n	80168c2 <USBD_StdItfReq+0xc2>
          break;
 80168c0:	bf00      	nop
      }
      break;
 80168c2:	e004      	b.n	80168ce <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80168c4:	6839      	ldr	r1, [r7, #0]
 80168c6:	6878      	ldr	r0, [r7, #4]
 80168c8:	f000 fceb 	bl	80172a2 <USBD_CtlError>
      break;
 80168cc:	bf00      	nop
  }

  return ret;
 80168ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80168d0:	4618      	mov	r0, r3
 80168d2:	3710      	adds	r7, #16
 80168d4:	46bd      	mov	sp, r7
 80168d6:	bd80      	pop	{r7, pc}

080168d8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80168d8:	b580      	push	{r7, lr}
 80168da:	b084      	sub	sp, #16
 80168dc:	af00      	add	r7, sp, #0
 80168de:	6078      	str	r0, [r7, #4]
 80168e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80168e2:	2300      	movs	r3, #0
 80168e4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80168e6:	683b      	ldr	r3, [r7, #0]
 80168e8:	889b      	ldrh	r3, [r3, #4]
 80168ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80168ec:	683b      	ldr	r3, [r7, #0]
 80168ee:	781b      	ldrb	r3, [r3, #0]
 80168f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80168f4:	2b40      	cmp	r3, #64	; 0x40
 80168f6:	d007      	beq.n	8016908 <USBD_StdEPReq+0x30>
 80168f8:	2b40      	cmp	r3, #64	; 0x40
 80168fa:	f200 817f 	bhi.w	8016bfc <USBD_StdEPReq+0x324>
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d02a      	beq.n	8016958 <USBD_StdEPReq+0x80>
 8016902:	2b20      	cmp	r3, #32
 8016904:	f040 817a 	bne.w	8016bfc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8016908:	7bbb      	ldrb	r3, [r7, #14]
 801690a:	4619      	mov	r1, r3
 801690c:	6878      	ldr	r0, [r7, #4]
 801690e:	f7ff fe83 	bl	8016618 <USBD_CoreFindEP>
 8016912:	4603      	mov	r3, r0
 8016914:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016916:	7b7b      	ldrb	r3, [r7, #13]
 8016918:	2bff      	cmp	r3, #255	; 0xff
 801691a:	f000 8174 	beq.w	8016c06 <USBD_StdEPReq+0x32e>
 801691e:	7b7b      	ldrb	r3, [r7, #13]
 8016920:	2b00      	cmp	r3, #0
 8016922:	f040 8170 	bne.w	8016c06 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8016926:	7b7a      	ldrb	r2, [r7, #13]
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801692e:	7b7a      	ldrb	r2, [r7, #13]
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	32ae      	adds	r2, #174	; 0xae
 8016934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016938:	689b      	ldr	r3, [r3, #8]
 801693a:	2b00      	cmp	r3, #0
 801693c:	f000 8163 	beq.w	8016c06 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8016940:	7b7a      	ldrb	r2, [r7, #13]
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	32ae      	adds	r2, #174	; 0xae
 8016946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801694a:	689b      	ldr	r3, [r3, #8]
 801694c:	6839      	ldr	r1, [r7, #0]
 801694e:	6878      	ldr	r0, [r7, #4]
 8016950:	4798      	blx	r3
 8016952:	4603      	mov	r3, r0
 8016954:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8016956:	e156      	b.n	8016c06 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016958:	683b      	ldr	r3, [r7, #0]
 801695a:	785b      	ldrb	r3, [r3, #1]
 801695c:	2b03      	cmp	r3, #3
 801695e:	d008      	beq.n	8016972 <USBD_StdEPReq+0x9a>
 8016960:	2b03      	cmp	r3, #3
 8016962:	f300 8145 	bgt.w	8016bf0 <USBD_StdEPReq+0x318>
 8016966:	2b00      	cmp	r3, #0
 8016968:	f000 809b 	beq.w	8016aa2 <USBD_StdEPReq+0x1ca>
 801696c:	2b01      	cmp	r3, #1
 801696e:	d03c      	beq.n	80169ea <USBD_StdEPReq+0x112>
 8016970:	e13e      	b.n	8016bf0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016978:	b2db      	uxtb	r3, r3
 801697a:	2b02      	cmp	r3, #2
 801697c:	d002      	beq.n	8016984 <USBD_StdEPReq+0xac>
 801697e:	2b03      	cmp	r3, #3
 8016980:	d016      	beq.n	80169b0 <USBD_StdEPReq+0xd8>
 8016982:	e02c      	b.n	80169de <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016984:	7bbb      	ldrb	r3, [r7, #14]
 8016986:	2b00      	cmp	r3, #0
 8016988:	d00d      	beq.n	80169a6 <USBD_StdEPReq+0xce>
 801698a:	7bbb      	ldrb	r3, [r7, #14]
 801698c:	2b80      	cmp	r3, #128	; 0x80
 801698e:	d00a      	beq.n	80169a6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016990:	7bbb      	ldrb	r3, [r7, #14]
 8016992:	4619      	mov	r1, r3
 8016994:	6878      	ldr	r0, [r7, #4]
 8016996:	f004 f94b 	bl	801ac30 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801699a:	2180      	movs	r1, #128	; 0x80
 801699c:	6878      	ldr	r0, [r7, #4]
 801699e:	f004 f947 	bl	801ac30 <USBD_LL_StallEP>
 80169a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80169a4:	e020      	b.n	80169e8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80169a6:	6839      	ldr	r1, [r7, #0]
 80169a8:	6878      	ldr	r0, [r7, #4]
 80169aa:	f000 fc7a 	bl	80172a2 <USBD_CtlError>
              break;
 80169ae:	e01b      	b.n	80169e8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80169b0:	683b      	ldr	r3, [r7, #0]
 80169b2:	885b      	ldrh	r3, [r3, #2]
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d10e      	bne.n	80169d6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80169b8:	7bbb      	ldrb	r3, [r7, #14]
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	d00b      	beq.n	80169d6 <USBD_StdEPReq+0xfe>
 80169be:	7bbb      	ldrb	r3, [r7, #14]
 80169c0:	2b80      	cmp	r3, #128	; 0x80
 80169c2:	d008      	beq.n	80169d6 <USBD_StdEPReq+0xfe>
 80169c4:	683b      	ldr	r3, [r7, #0]
 80169c6:	88db      	ldrh	r3, [r3, #6]
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	d104      	bne.n	80169d6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80169cc:	7bbb      	ldrb	r3, [r7, #14]
 80169ce:	4619      	mov	r1, r3
 80169d0:	6878      	ldr	r0, [r7, #4]
 80169d2:	f004 f92d 	bl	801ac30 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80169d6:	6878      	ldr	r0, [r7, #4]
 80169d8:	f000 fd2e 	bl	8017438 <USBD_CtlSendStatus>

              break;
 80169dc:	e004      	b.n	80169e8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80169de:	6839      	ldr	r1, [r7, #0]
 80169e0:	6878      	ldr	r0, [r7, #4]
 80169e2:	f000 fc5e 	bl	80172a2 <USBD_CtlError>
              break;
 80169e6:	bf00      	nop
          }
          break;
 80169e8:	e107      	b.n	8016bfa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80169f0:	b2db      	uxtb	r3, r3
 80169f2:	2b02      	cmp	r3, #2
 80169f4:	d002      	beq.n	80169fc <USBD_StdEPReq+0x124>
 80169f6:	2b03      	cmp	r3, #3
 80169f8:	d016      	beq.n	8016a28 <USBD_StdEPReq+0x150>
 80169fa:	e04b      	b.n	8016a94 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80169fc:	7bbb      	ldrb	r3, [r7, #14]
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	d00d      	beq.n	8016a1e <USBD_StdEPReq+0x146>
 8016a02:	7bbb      	ldrb	r3, [r7, #14]
 8016a04:	2b80      	cmp	r3, #128	; 0x80
 8016a06:	d00a      	beq.n	8016a1e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016a08:	7bbb      	ldrb	r3, [r7, #14]
 8016a0a:	4619      	mov	r1, r3
 8016a0c:	6878      	ldr	r0, [r7, #4]
 8016a0e:	f004 f90f 	bl	801ac30 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016a12:	2180      	movs	r1, #128	; 0x80
 8016a14:	6878      	ldr	r0, [r7, #4]
 8016a16:	f004 f90b 	bl	801ac30 <USBD_LL_StallEP>
 8016a1a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016a1c:	e040      	b.n	8016aa0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8016a1e:	6839      	ldr	r1, [r7, #0]
 8016a20:	6878      	ldr	r0, [r7, #4]
 8016a22:	f000 fc3e 	bl	80172a2 <USBD_CtlError>
              break;
 8016a26:	e03b      	b.n	8016aa0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016a28:	683b      	ldr	r3, [r7, #0]
 8016a2a:	885b      	ldrh	r3, [r3, #2]
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d136      	bne.n	8016a9e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8016a30:	7bbb      	ldrb	r3, [r7, #14]
 8016a32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	d004      	beq.n	8016a44 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8016a3a:	7bbb      	ldrb	r3, [r7, #14]
 8016a3c:	4619      	mov	r1, r3
 8016a3e:	6878      	ldr	r0, [r7, #4]
 8016a40:	f004 f915 	bl	801ac6e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8016a44:	6878      	ldr	r0, [r7, #4]
 8016a46:	f000 fcf7 	bl	8017438 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8016a4a:	7bbb      	ldrb	r3, [r7, #14]
 8016a4c:	4619      	mov	r1, r3
 8016a4e:	6878      	ldr	r0, [r7, #4]
 8016a50:	f7ff fde2 	bl	8016618 <USBD_CoreFindEP>
 8016a54:	4603      	mov	r3, r0
 8016a56:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016a58:	7b7b      	ldrb	r3, [r7, #13]
 8016a5a:	2bff      	cmp	r3, #255	; 0xff
 8016a5c:	d01f      	beq.n	8016a9e <USBD_StdEPReq+0x1c6>
 8016a5e:	7b7b      	ldrb	r3, [r7, #13]
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	d11c      	bne.n	8016a9e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8016a64:	7b7a      	ldrb	r2, [r7, #13]
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8016a6c:	7b7a      	ldrb	r2, [r7, #13]
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	32ae      	adds	r2, #174	; 0xae
 8016a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a76:	689b      	ldr	r3, [r3, #8]
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	d010      	beq.n	8016a9e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016a7c:	7b7a      	ldrb	r2, [r7, #13]
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	32ae      	adds	r2, #174	; 0xae
 8016a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a86:	689b      	ldr	r3, [r3, #8]
 8016a88:	6839      	ldr	r1, [r7, #0]
 8016a8a:	6878      	ldr	r0, [r7, #4]
 8016a8c:	4798      	blx	r3
 8016a8e:	4603      	mov	r3, r0
 8016a90:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8016a92:	e004      	b.n	8016a9e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8016a94:	6839      	ldr	r1, [r7, #0]
 8016a96:	6878      	ldr	r0, [r7, #4]
 8016a98:	f000 fc03 	bl	80172a2 <USBD_CtlError>
              break;
 8016a9c:	e000      	b.n	8016aa0 <USBD_StdEPReq+0x1c8>
              break;
 8016a9e:	bf00      	nop
          }
          break;
 8016aa0:	e0ab      	b.n	8016bfa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016aa8:	b2db      	uxtb	r3, r3
 8016aaa:	2b02      	cmp	r3, #2
 8016aac:	d002      	beq.n	8016ab4 <USBD_StdEPReq+0x1dc>
 8016aae:	2b03      	cmp	r3, #3
 8016ab0:	d032      	beq.n	8016b18 <USBD_StdEPReq+0x240>
 8016ab2:	e097      	b.n	8016be4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016ab4:	7bbb      	ldrb	r3, [r7, #14]
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d007      	beq.n	8016aca <USBD_StdEPReq+0x1f2>
 8016aba:	7bbb      	ldrb	r3, [r7, #14]
 8016abc:	2b80      	cmp	r3, #128	; 0x80
 8016abe:	d004      	beq.n	8016aca <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8016ac0:	6839      	ldr	r1, [r7, #0]
 8016ac2:	6878      	ldr	r0, [r7, #4]
 8016ac4:	f000 fbed 	bl	80172a2 <USBD_CtlError>
                break;
 8016ac8:	e091      	b.n	8016bee <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016aca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	da0b      	bge.n	8016aea <USBD_StdEPReq+0x212>
 8016ad2:	7bbb      	ldrb	r3, [r7, #14]
 8016ad4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016ad8:	4613      	mov	r3, r2
 8016ada:	009b      	lsls	r3, r3, #2
 8016adc:	4413      	add	r3, r2
 8016ade:	009b      	lsls	r3, r3, #2
 8016ae0:	3310      	adds	r3, #16
 8016ae2:	687a      	ldr	r2, [r7, #4]
 8016ae4:	4413      	add	r3, r2
 8016ae6:	3304      	adds	r3, #4
 8016ae8:	e00b      	b.n	8016b02 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016aea:	7bbb      	ldrb	r3, [r7, #14]
 8016aec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016af0:	4613      	mov	r3, r2
 8016af2:	009b      	lsls	r3, r3, #2
 8016af4:	4413      	add	r3, r2
 8016af6:	009b      	lsls	r3, r3, #2
 8016af8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016afc:	687a      	ldr	r2, [r7, #4]
 8016afe:	4413      	add	r3, r2
 8016b00:	3304      	adds	r3, #4
 8016b02:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8016b04:	68bb      	ldr	r3, [r7, #8]
 8016b06:	2200      	movs	r2, #0
 8016b08:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016b0a:	68bb      	ldr	r3, [r7, #8]
 8016b0c:	2202      	movs	r2, #2
 8016b0e:	4619      	mov	r1, r3
 8016b10:	6878      	ldr	r0, [r7, #4]
 8016b12:	f000 fc37 	bl	8017384 <USBD_CtlSendData>
              break;
 8016b16:	e06a      	b.n	8016bee <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016b18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	da11      	bge.n	8016b44 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016b20:	7bbb      	ldrb	r3, [r7, #14]
 8016b22:	f003 020f 	and.w	r2, r3, #15
 8016b26:	6879      	ldr	r1, [r7, #4]
 8016b28:	4613      	mov	r3, r2
 8016b2a:	009b      	lsls	r3, r3, #2
 8016b2c:	4413      	add	r3, r2
 8016b2e:	009b      	lsls	r3, r3, #2
 8016b30:	440b      	add	r3, r1
 8016b32:	3324      	adds	r3, #36	; 0x24
 8016b34:	881b      	ldrh	r3, [r3, #0]
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d117      	bne.n	8016b6a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016b3a:	6839      	ldr	r1, [r7, #0]
 8016b3c:	6878      	ldr	r0, [r7, #4]
 8016b3e:	f000 fbb0 	bl	80172a2 <USBD_CtlError>
                  break;
 8016b42:	e054      	b.n	8016bee <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8016b44:	7bbb      	ldrb	r3, [r7, #14]
 8016b46:	f003 020f 	and.w	r2, r3, #15
 8016b4a:	6879      	ldr	r1, [r7, #4]
 8016b4c:	4613      	mov	r3, r2
 8016b4e:	009b      	lsls	r3, r3, #2
 8016b50:	4413      	add	r3, r2
 8016b52:	009b      	lsls	r3, r3, #2
 8016b54:	440b      	add	r3, r1
 8016b56:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8016b5a:	881b      	ldrh	r3, [r3, #0]
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	d104      	bne.n	8016b6a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016b60:	6839      	ldr	r1, [r7, #0]
 8016b62:	6878      	ldr	r0, [r7, #4]
 8016b64:	f000 fb9d 	bl	80172a2 <USBD_CtlError>
                  break;
 8016b68:	e041      	b.n	8016bee <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016b6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	da0b      	bge.n	8016b8a <USBD_StdEPReq+0x2b2>
 8016b72:	7bbb      	ldrb	r3, [r7, #14]
 8016b74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016b78:	4613      	mov	r3, r2
 8016b7a:	009b      	lsls	r3, r3, #2
 8016b7c:	4413      	add	r3, r2
 8016b7e:	009b      	lsls	r3, r3, #2
 8016b80:	3310      	adds	r3, #16
 8016b82:	687a      	ldr	r2, [r7, #4]
 8016b84:	4413      	add	r3, r2
 8016b86:	3304      	adds	r3, #4
 8016b88:	e00b      	b.n	8016ba2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016b8a:	7bbb      	ldrb	r3, [r7, #14]
 8016b8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016b90:	4613      	mov	r3, r2
 8016b92:	009b      	lsls	r3, r3, #2
 8016b94:	4413      	add	r3, r2
 8016b96:	009b      	lsls	r3, r3, #2
 8016b98:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016b9c:	687a      	ldr	r2, [r7, #4]
 8016b9e:	4413      	add	r3, r2
 8016ba0:	3304      	adds	r3, #4
 8016ba2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8016ba4:	7bbb      	ldrb	r3, [r7, #14]
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	d002      	beq.n	8016bb0 <USBD_StdEPReq+0x2d8>
 8016baa:	7bbb      	ldrb	r3, [r7, #14]
 8016bac:	2b80      	cmp	r3, #128	; 0x80
 8016bae:	d103      	bne.n	8016bb8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8016bb0:	68bb      	ldr	r3, [r7, #8]
 8016bb2:	2200      	movs	r2, #0
 8016bb4:	601a      	str	r2, [r3, #0]
 8016bb6:	e00e      	b.n	8016bd6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016bb8:	7bbb      	ldrb	r3, [r7, #14]
 8016bba:	4619      	mov	r1, r3
 8016bbc:	6878      	ldr	r0, [r7, #4]
 8016bbe:	f004 f875 	bl	801acac <USBD_LL_IsStallEP>
 8016bc2:	4603      	mov	r3, r0
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d003      	beq.n	8016bd0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8016bc8:	68bb      	ldr	r3, [r7, #8]
 8016bca:	2201      	movs	r2, #1
 8016bcc:	601a      	str	r2, [r3, #0]
 8016bce:	e002      	b.n	8016bd6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8016bd0:	68bb      	ldr	r3, [r7, #8]
 8016bd2:	2200      	movs	r2, #0
 8016bd4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016bd6:	68bb      	ldr	r3, [r7, #8]
 8016bd8:	2202      	movs	r2, #2
 8016bda:	4619      	mov	r1, r3
 8016bdc:	6878      	ldr	r0, [r7, #4]
 8016bde:	f000 fbd1 	bl	8017384 <USBD_CtlSendData>
              break;
 8016be2:	e004      	b.n	8016bee <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8016be4:	6839      	ldr	r1, [r7, #0]
 8016be6:	6878      	ldr	r0, [r7, #4]
 8016be8:	f000 fb5b 	bl	80172a2 <USBD_CtlError>
              break;
 8016bec:	bf00      	nop
          }
          break;
 8016bee:	e004      	b.n	8016bfa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8016bf0:	6839      	ldr	r1, [r7, #0]
 8016bf2:	6878      	ldr	r0, [r7, #4]
 8016bf4:	f000 fb55 	bl	80172a2 <USBD_CtlError>
          break;
 8016bf8:	bf00      	nop
      }
      break;
 8016bfa:	e005      	b.n	8016c08 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8016bfc:	6839      	ldr	r1, [r7, #0]
 8016bfe:	6878      	ldr	r0, [r7, #4]
 8016c00:	f000 fb4f 	bl	80172a2 <USBD_CtlError>
      break;
 8016c04:	e000      	b.n	8016c08 <USBD_StdEPReq+0x330>
      break;
 8016c06:	bf00      	nop
  }

  return ret;
 8016c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8016c0a:	4618      	mov	r0, r3
 8016c0c:	3710      	adds	r7, #16
 8016c0e:	46bd      	mov	sp, r7
 8016c10:	bd80      	pop	{r7, pc}
	...

08016c14 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016c14:	b580      	push	{r7, lr}
 8016c16:	b084      	sub	sp, #16
 8016c18:	af00      	add	r7, sp, #0
 8016c1a:	6078      	str	r0, [r7, #4]
 8016c1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016c1e:	2300      	movs	r3, #0
 8016c20:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8016c22:	2300      	movs	r3, #0
 8016c24:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8016c26:	2300      	movs	r3, #0
 8016c28:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8016c2a:	683b      	ldr	r3, [r7, #0]
 8016c2c:	885b      	ldrh	r3, [r3, #2]
 8016c2e:	0a1b      	lsrs	r3, r3, #8
 8016c30:	b29b      	uxth	r3, r3
 8016c32:	3b01      	subs	r3, #1
 8016c34:	2b06      	cmp	r3, #6
 8016c36:	f200 8128 	bhi.w	8016e8a <USBD_GetDescriptor+0x276>
 8016c3a:	a201      	add	r2, pc, #4	; (adr r2, 8016c40 <USBD_GetDescriptor+0x2c>)
 8016c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c40:	08016c5d 	.word	0x08016c5d
 8016c44:	08016c75 	.word	0x08016c75
 8016c48:	08016cb5 	.word	0x08016cb5
 8016c4c:	08016e8b 	.word	0x08016e8b
 8016c50:	08016e8b 	.word	0x08016e8b
 8016c54:	08016e2b 	.word	0x08016e2b
 8016c58:	08016e57 	.word	0x08016e57
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016c62:	681b      	ldr	r3, [r3, #0]
 8016c64:	687a      	ldr	r2, [r7, #4]
 8016c66:	7c12      	ldrb	r2, [r2, #16]
 8016c68:	f107 0108 	add.w	r1, r7, #8
 8016c6c:	4610      	mov	r0, r2
 8016c6e:	4798      	blx	r3
 8016c70:	60f8      	str	r0, [r7, #12]
      break;
 8016c72:	e112      	b.n	8016e9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	7c1b      	ldrb	r3, [r3, #16]
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	d10d      	bne.n	8016c98 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016c84:	f107 0208 	add.w	r2, r7, #8
 8016c88:	4610      	mov	r0, r2
 8016c8a:	4798      	blx	r3
 8016c8c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016c8e:	68fb      	ldr	r3, [r7, #12]
 8016c90:	3301      	adds	r3, #1
 8016c92:	2202      	movs	r2, #2
 8016c94:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8016c96:	e100      	b.n	8016e9a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ca0:	f107 0208 	add.w	r2, r7, #8
 8016ca4:	4610      	mov	r0, r2
 8016ca6:	4798      	blx	r3
 8016ca8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016caa:	68fb      	ldr	r3, [r7, #12]
 8016cac:	3301      	adds	r3, #1
 8016cae:	2202      	movs	r2, #2
 8016cb0:	701a      	strb	r2, [r3, #0]
      break;
 8016cb2:	e0f2      	b.n	8016e9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8016cb4:	683b      	ldr	r3, [r7, #0]
 8016cb6:	885b      	ldrh	r3, [r3, #2]
 8016cb8:	b2db      	uxtb	r3, r3
 8016cba:	2b05      	cmp	r3, #5
 8016cbc:	f200 80ac 	bhi.w	8016e18 <USBD_GetDescriptor+0x204>
 8016cc0:	a201      	add	r2, pc, #4	; (adr r2, 8016cc8 <USBD_GetDescriptor+0xb4>)
 8016cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016cc6:	bf00      	nop
 8016cc8:	08016ce1 	.word	0x08016ce1
 8016ccc:	08016d15 	.word	0x08016d15
 8016cd0:	08016d49 	.word	0x08016d49
 8016cd4:	08016d7d 	.word	0x08016d7d
 8016cd8:	08016db1 	.word	0x08016db1
 8016cdc:	08016de5 	.word	0x08016de5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016ce6:	685b      	ldr	r3, [r3, #4]
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d00b      	beq.n	8016d04 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016cf2:	685b      	ldr	r3, [r3, #4]
 8016cf4:	687a      	ldr	r2, [r7, #4]
 8016cf6:	7c12      	ldrb	r2, [r2, #16]
 8016cf8:	f107 0108 	add.w	r1, r7, #8
 8016cfc:	4610      	mov	r0, r2
 8016cfe:	4798      	blx	r3
 8016d00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016d02:	e091      	b.n	8016e28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016d04:	6839      	ldr	r1, [r7, #0]
 8016d06:	6878      	ldr	r0, [r7, #4]
 8016d08:	f000 facb 	bl	80172a2 <USBD_CtlError>
            err++;
 8016d0c:	7afb      	ldrb	r3, [r7, #11]
 8016d0e:	3301      	adds	r3, #1
 8016d10:	72fb      	strb	r3, [r7, #11]
          break;
 8016d12:	e089      	b.n	8016e28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016d1a:	689b      	ldr	r3, [r3, #8]
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	d00b      	beq.n	8016d38 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016d26:	689b      	ldr	r3, [r3, #8]
 8016d28:	687a      	ldr	r2, [r7, #4]
 8016d2a:	7c12      	ldrb	r2, [r2, #16]
 8016d2c:	f107 0108 	add.w	r1, r7, #8
 8016d30:	4610      	mov	r0, r2
 8016d32:	4798      	blx	r3
 8016d34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016d36:	e077      	b.n	8016e28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016d38:	6839      	ldr	r1, [r7, #0]
 8016d3a:	6878      	ldr	r0, [r7, #4]
 8016d3c:	f000 fab1 	bl	80172a2 <USBD_CtlError>
            err++;
 8016d40:	7afb      	ldrb	r3, [r7, #11]
 8016d42:	3301      	adds	r3, #1
 8016d44:	72fb      	strb	r3, [r7, #11]
          break;
 8016d46:	e06f      	b.n	8016e28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016d4e:	68db      	ldr	r3, [r3, #12]
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	d00b      	beq.n	8016d6c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016d5a:	68db      	ldr	r3, [r3, #12]
 8016d5c:	687a      	ldr	r2, [r7, #4]
 8016d5e:	7c12      	ldrb	r2, [r2, #16]
 8016d60:	f107 0108 	add.w	r1, r7, #8
 8016d64:	4610      	mov	r0, r2
 8016d66:	4798      	blx	r3
 8016d68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016d6a:	e05d      	b.n	8016e28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016d6c:	6839      	ldr	r1, [r7, #0]
 8016d6e:	6878      	ldr	r0, [r7, #4]
 8016d70:	f000 fa97 	bl	80172a2 <USBD_CtlError>
            err++;
 8016d74:	7afb      	ldrb	r3, [r7, #11]
 8016d76:	3301      	adds	r3, #1
 8016d78:	72fb      	strb	r3, [r7, #11]
          break;
 8016d7a:	e055      	b.n	8016e28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016d82:	691b      	ldr	r3, [r3, #16]
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	d00b      	beq.n	8016da0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016d8e:	691b      	ldr	r3, [r3, #16]
 8016d90:	687a      	ldr	r2, [r7, #4]
 8016d92:	7c12      	ldrb	r2, [r2, #16]
 8016d94:	f107 0108 	add.w	r1, r7, #8
 8016d98:	4610      	mov	r0, r2
 8016d9a:	4798      	blx	r3
 8016d9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016d9e:	e043      	b.n	8016e28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016da0:	6839      	ldr	r1, [r7, #0]
 8016da2:	6878      	ldr	r0, [r7, #4]
 8016da4:	f000 fa7d 	bl	80172a2 <USBD_CtlError>
            err++;
 8016da8:	7afb      	ldrb	r3, [r7, #11]
 8016daa:	3301      	adds	r3, #1
 8016dac:	72fb      	strb	r3, [r7, #11]
          break;
 8016dae:	e03b      	b.n	8016e28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016db6:	695b      	ldr	r3, [r3, #20]
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d00b      	beq.n	8016dd4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016dc2:	695b      	ldr	r3, [r3, #20]
 8016dc4:	687a      	ldr	r2, [r7, #4]
 8016dc6:	7c12      	ldrb	r2, [r2, #16]
 8016dc8:	f107 0108 	add.w	r1, r7, #8
 8016dcc:	4610      	mov	r0, r2
 8016dce:	4798      	blx	r3
 8016dd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016dd2:	e029      	b.n	8016e28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016dd4:	6839      	ldr	r1, [r7, #0]
 8016dd6:	6878      	ldr	r0, [r7, #4]
 8016dd8:	f000 fa63 	bl	80172a2 <USBD_CtlError>
            err++;
 8016ddc:	7afb      	ldrb	r3, [r7, #11]
 8016dde:	3301      	adds	r3, #1
 8016de0:	72fb      	strb	r3, [r7, #11]
          break;
 8016de2:	e021      	b.n	8016e28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016dea:	699b      	ldr	r3, [r3, #24]
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	d00b      	beq.n	8016e08 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016df6:	699b      	ldr	r3, [r3, #24]
 8016df8:	687a      	ldr	r2, [r7, #4]
 8016dfa:	7c12      	ldrb	r2, [r2, #16]
 8016dfc:	f107 0108 	add.w	r1, r7, #8
 8016e00:	4610      	mov	r0, r2
 8016e02:	4798      	blx	r3
 8016e04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016e06:	e00f      	b.n	8016e28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016e08:	6839      	ldr	r1, [r7, #0]
 8016e0a:	6878      	ldr	r0, [r7, #4]
 8016e0c:	f000 fa49 	bl	80172a2 <USBD_CtlError>
            err++;
 8016e10:	7afb      	ldrb	r3, [r7, #11]
 8016e12:	3301      	adds	r3, #1
 8016e14:	72fb      	strb	r3, [r7, #11]
          break;
 8016e16:	e007      	b.n	8016e28 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8016e18:	6839      	ldr	r1, [r7, #0]
 8016e1a:	6878      	ldr	r0, [r7, #4]
 8016e1c:	f000 fa41 	bl	80172a2 <USBD_CtlError>
          err++;
 8016e20:	7afb      	ldrb	r3, [r7, #11]
 8016e22:	3301      	adds	r3, #1
 8016e24:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8016e26:	bf00      	nop
      }
      break;
 8016e28:	e037      	b.n	8016e9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	7c1b      	ldrb	r3, [r3, #16]
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d109      	bne.n	8016e46 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8016e32:	687b      	ldr	r3, [r7, #4]
 8016e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016e3a:	f107 0208 	add.w	r2, r7, #8
 8016e3e:	4610      	mov	r0, r2
 8016e40:	4798      	blx	r3
 8016e42:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016e44:	e029      	b.n	8016e9a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8016e46:	6839      	ldr	r1, [r7, #0]
 8016e48:	6878      	ldr	r0, [r7, #4]
 8016e4a:	f000 fa2a 	bl	80172a2 <USBD_CtlError>
        err++;
 8016e4e:	7afb      	ldrb	r3, [r7, #11]
 8016e50:	3301      	adds	r3, #1
 8016e52:	72fb      	strb	r3, [r7, #11]
      break;
 8016e54:	e021      	b.n	8016e9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	7c1b      	ldrb	r3, [r3, #16]
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	d10d      	bne.n	8016e7a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8016e5e:	687b      	ldr	r3, [r7, #4]
 8016e60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016e66:	f107 0208 	add.w	r2, r7, #8
 8016e6a:	4610      	mov	r0, r2
 8016e6c:	4798      	blx	r3
 8016e6e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8016e70:	68fb      	ldr	r3, [r7, #12]
 8016e72:	3301      	adds	r3, #1
 8016e74:	2207      	movs	r2, #7
 8016e76:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016e78:	e00f      	b.n	8016e9a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8016e7a:	6839      	ldr	r1, [r7, #0]
 8016e7c:	6878      	ldr	r0, [r7, #4]
 8016e7e:	f000 fa10 	bl	80172a2 <USBD_CtlError>
        err++;
 8016e82:	7afb      	ldrb	r3, [r7, #11]
 8016e84:	3301      	adds	r3, #1
 8016e86:	72fb      	strb	r3, [r7, #11]
      break;
 8016e88:	e007      	b.n	8016e9a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8016e8a:	6839      	ldr	r1, [r7, #0]
 8016e8c:	6878      	ldr	r0, [r7, #4]
 8016e8e:	f000 fa08 	bl	80172a2 <USBD_CtlError>
      err++;
 8016e92:	7afb      	ldrb	r3, [r7, #11]
 8016e94:	3301      	adds	r3, #1
 8016e96:	72fb      	strb	r3, [r7, #11]
      break;
 8016e98:	bf00      	nop
  }

  if (err != 0U)
 8016e9a:	7afb      	ldrb	r3, [r7, #11]
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	d11e      	bne.n	8016ede <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8016ea0:	683b      	ldr	r3, [r7, #0]
 8016ea2:	88db      	ldrh	r3, [r3, #6]
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	d016      	beq.n	8016ed6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8016ea8:	893b      	ldrh	r3, [r7, #8]
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d00e      	beq.n	8016ecc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8016eae:	683b      	ldr	r3, [r7, #0]
 8016eb0:	88da      	ldrh	r2, [r3, #6]
 8016eb2:	893b      	ldrh	r3, [r7, #8]
 8016eb4:	4293      	cmp	r3, r2
 8016eb6:	bf28      	it	cs
 8016eb8:	4613      	movcs	r3, r2
 8016eba:	b29b      	uxth	r3, r3
 8016ebc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8016ebe:	893b      	ldrh	r3, [r7, #8]
 8016ec0:	461a      	mov	r2, r3
 8016ec2:	68f9      	ldr	r1, [r7, #12]
 8016ec4:	6878      	ldr	r0, [r7, #4]
 8016ec6:	f000 fa5d 	bl	8017384 <USBD_CtlSendData>
 8016eca:	e009      	b.n	8016ee0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8016ecc:	6839      	ldr	r1, [r7, #0]
 8016ece:	6878      	ldr	r0, [r7, #4]
 8016ed0:	f000 f9e7 	bl	80172a2 <USBD_CtlError>
 8016ed4:	e004      	b.n	8016ee0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8016ed6:	6878      	ldr	r0, [r7, #4]
 8016ed8:	f000 faae 	bl	8017438 <USBD_CtlSendStatus>
 8016edc:	e000      	b.n	8016ee0 <USBD_GetDescriptor+0x2cc>
    return;
 8016ede:	bf00      	nop
  }
}
 8016ee0:	3710      	adds	r7, #16
 8016ee2:	46bd      	mov	sp, r7
 8016ee4:	bd80      	pop	{r7, pc}
 8016ee6:	bf00      	nop

08016ee8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016ee8:	b580      	push	{r7, lr}
 8016eea:	b084      	sub	sp, #16
 8016eec:	af00      	add	r7, sp, #0
 8016eee:	6078      	str	r0, [r7, #4]
 8016ef0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8016ef2:	683b      	ldr	r3, [r7, #0]
 8016ef4:	889b      	ldrh	r3, [r3, #4]
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	d131      	bne.n	8016f5e <USBD_SetAddress+0x76>
 8016efa:	683b      	ldr	r3, [r7, #0]
 8016efc:	88db      	ldrh	r3, [r3, #6]
 8016efe:	2b00      	cmp	r3, #0
 8016f00:	d12d      	bne.n	8016f5e <USBD_SetAddress+0x76>
 8016f02:	683b      	ldr	r3, [r7, #0]
 8016f04:	885b      	ldrh	r3, [r3, #2]
 8016f06:	2b7f      	cmp	r3, #127	; 0x7f
 8016f08:	d829      	bhi.n	8016f5e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8016f0a:	683b      	ldr	r3, [r7, #0]
 8016f0c:	885b      	ldrh	r3, [r3, #2]
 8016f0e:	b2db      	uxtb	r3, r3
 8016f10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016f14:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016f1c:	b2db      	uxtb	r3, r3
 8016f1e:	2b03      	cmp	r3, #3
 8016f20:	d104      	bne.n	8016f2c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8016f22:	6839      	ldr	r1, [r7, #0]
 8016f24:	6878      	ldr	r0, [r7, #4]
 8016f26:	f000 f9bc 	bl	80172a2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016f2a:	e01d      	b.n	8016f68 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	7bfa      	ldrb	r2, [r7, #15]
 8016f30:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016f34:	7bfb      	ldrb	r3, [r7, #15]
 8016f36:	4619      	mov	r1, r3
 8016f38:	6878      	ldr	r0, [r7, #4]
 8016f3a:	f003 fee3 	bl	801ad04 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8016f3e:	6878      	ldr	r0, [r7, #4]
 8016f40:	f000 fa7a 	bl	8017438 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8016f44:	7bfb      	ldrb	r3, [r7, #15]
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	d004      	beq.n	8016f54 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	2202      	movs	r2, #2
 8016f4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016f52:	e009      	b.n	8016f68 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	2201      	movs	r2, #1
 8016f58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016f5c:	e004      	b.n	8016f68 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8016f5e:	6839      	ldr	r1, [r7, #0]
 8016f60:	6878      	ldr	r0, [r7, #4]
 8016f62:	f000 f99e 	bl	80172a2 <USBD_CtlError>
  }
}
 8016f66:	bf00      	nop
 8016f68:	bf00      	nop
 8016f6a:	3710      	adds	r7, #16
 8016f6c:	46bd      	mov	sp, r7
 8016f6e:	bd80      	pop	{r7, pc}

08016f70 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016f70:	b580      	push	{r7, lr}
 8016f72:	b084      	sub	sp, #16
 8016f74:	af00      	add	r7, sp, #0
 8016f76:	6078      	str	r0, [r7, #4]
 8016f78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016f7a:	2300      	movs	r3, #0
 8016f7c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8016f7e:	683b      	ldr	r3, [r7, #0]
 8016f80:	885b      	ldrh	r3, [r3, #2]
 8016f82:	b2da      	uxtb	r2, r3
 8016f84:	4b4e      	ldr	r3, [pc, #312]	; (80170c0 <USBD_SetConfig+0x150>)
 8016f86:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8016f88:	4b4d      	ldr	r3, [pc, #308]	; (80170c0 <USBD_SetConfig+0x150>)
 8016f8a:	781b      	ldrb	r3, [r3, #0]
 8016f8c:	2b01      	cmp	r3, #1
 8016f8e:	d905      	bls.n	8016f9c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8016f90:	6839      	ldr	r1, [r7, #0]
 8016f92:	6878      	ldr	r0, [r7, #4]
 8016f94:	f000 f985 	bl	80172a2 <USBD_CtlError>
    return USBD_FAIL;
 8016f98:	2303      	movs	r3, #3
 8016f9a:	e08c      	b.n	80170b6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016fa2:	b2db      	uxtb	r3, r3
 8016fa4:	2b02      	cmp	r3, #2
 8016fa6:	d002      	beq.n	8016fae <USBD_SetConfig+0x3e>
 8016fa8:	2b03      	cmp	r3, #3
 8016faa:	d029      	beq.n	8017000 <USBD_SetConfig+0x90>
 8016fac:	e075      	b.n	801709a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8016fae:	4b44      	ldr	r3, [pc, #272]	; (80170c0 <USBD_SetConfig+0x150>)
 8016fb0:	781b      	ldrb	r3, [r3, #0]
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d020      	beq.n	8016ff8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8016fb6:	4b42      	ldr	r3, [pc, #264]	; (80170c0 <USBD_SetConfig+0x150>)
 8016fb8:	781b      	ldrb	r3, [r3, #0]
 8016fba:	461a      	mov	r2, r3
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016fc0:	4b3f      	ldr	r3, [pc, #252]	; (80170c0 <USBD_SetConfig+0x150>)
 8016fc2:	781b      	ldrb	r3, [r3, #0]
 8016fc4:	4619      	mov	r1, r3
 8016fc6:	6878      	ldr	r0, [r7, #4]
 8016fc8:	f7fe ffe1 	bl	8015f8e <USBD_SetClassConfig>
 8016fcc:	4603      	mov	r3, r0
 8016fce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8016fd0:	7bfb      	ldrb	r3, [r7, #15]
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d008      	beq.n	8016fe8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8016fd6:	6839      	ldr	r1, [r7, #0]
 8016fd8:	6878      	ldr	r0, [r7, #4]
 8016fda:	f000 f962 	bl	80172a2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	2202      	movs	r2, #2
 8016fe2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016fe6:	e065      	b.n	80170b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016fe8:	6878      	ldr	r0, [r7, #4]
 8016fea:	f000 fa25 	bl	8017438 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	2203      	movs	r2, #3
 8016ff2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016ff6:	e05d      	b.n	80170b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016ff8:	6878      	ldr	r0, [r7, #4]
 8016ffa:	f000 fa1d 	bl	8017438 <USBD_CtlSendStatus>
      break;
 8016ffe:	e059      	b.n	80170b4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8017000:	4b2f      	ldr	r3, [pc, #188]	; (80170c0 <USBD_SetConfig+0x150>)
 8017002:	781b      	ldrb	r3, [r3, #0]
 8017004:	2b00      	cmp	r3, #0
 8017006:	d112      	bne.n	801702e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	2202      	movs	r2, #2
 801700c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8017010:	4b2b      	ldr	r3, [pc, #172]	; (80170c0 <USBD_SetConfig+0x150>)
 8017012:	781b      	ldrb	r3, [r3, #0]
 8017014:	461a      	mov	r2, r3
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801701a:	4b29      	ldr	r3, [pc, #164]	; (80170c0 <USBD_SetConfig+0x150>)
 801701c:	781b      	ldrb	r3, [r3, #0]
 801701e:	4619      	mov	r1, r3
 8017020:	6878      	ldr	r0, [r7, #4]
 8017022:	f7fe ffd0 	bl	8015fc6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8017026:	6878      	ldr	r0, [r7, #4]
 8017028:	f000 fa06 	bl	8017438 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801702c:	e042      	b.n	80170b4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801702e:	4b24      	ldr	r3, [pc, #144]	; (80170c0 <USBD_SetConfig+0x150>)
 8017030:	781b      	ldrb	r3, [r3, #0]
 8017032:	461a      	mov	r2, r3
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	685b      	ldr	r3, [r3, #4]
 8017038:	429a      	cmp	r2, r3
 801703a:	d02a      	beq.n	8017092 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	685b      	ldr	r3, [r3, #4]
 8017040:	b2db      	uxtb	r3, r3
 8017042:	4619      	mov	r1, r3
 8017044:	6878      	ldr	r0, [r7, #4]
 8017046:	f7fe ffbe 	bl	8015fc6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801704a:	4b1d      	ldr	r3, [pc, #116]	; (80170c0 <USBD_SetConfig+0x150>)
 801704c:	781b      	ldrb	r3, [r3, #0]
 801704e:	461a      	mov	r2, r3
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017054:	4b1a      	ldr	r3, [pc, #104]	; (80170c0 <USBD_SetConfig+0x150>)
 8017056:	781b      	ldrb	r3, [r3, #0]
 8017058:	4619      	mov	r1, r3
 801705a:	6878      	ldr	r0, [r7, #4]
 801705c:	f7fe ff97 	bl	8015f8e <USBD_SetClassConfig>
 8017060:	4603      	mov	r3, r0
 8017062:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8017064:	7bfb      	ldrb	r3, [r7, #15]
 8017066:	2b00      	cmp	r3, #0
 8017068:	d00f      	beq.n	801708a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801706a:	6839      	ldr	r1, [r7, #0]
 801706c:	6878      	ldr	r0, [r7, #4]
 801706e:	f000 f918 	bl	80172a2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	685b      	ldr	r3, [r3, #4]
 8017076:	b2db      	uxtb	r3, r3
 8017078:	4619      	mov	r1, r3
 801707a:	6878      	ldr	r0, [r7, #4]
 801707c:	f7fe ffa3 	bl	8015fc6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	2202      	movs	r2, #2
 8017084:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8017088:	e014      	b.n	80170b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801708a:	6878      	ldr	r0, [r7, #4]
 801708c:	f000 f9d4 	bl	8017438 <USBD_CtlSendStatus>
      break;
 8017090:	e010      	b.n	80170b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8017092:	6878      	ldr	r0, [r7, #4]
 8017094:	f000 f9d0 	bl	8017438 <USBD_CtlSendStatus>
      break;
 8017098:	e00c      	b.n	80170b4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801709a:	6839      	ldr	r1, [r7, #0]
 801709c:	6878      	ldr	r0, [r7, #4]
 801709e:	f000 f900 	bl	80172a2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80170a2:	4b07      	ldr	r3, [pc, #28]	; (80170c0 <USBD_SetConfig+0x150>)
 80170a4:	781b      	ldrb	r3, [r3, #0]
 80170a6:	4619      	mov	r1, r3
 80170a8:	6878      	ldr	r0, [r7, #4]
 80170aa:	f7fe ff8c 	bl	8015fc6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80170ae:	2303      	movs	r3, #3
 80170b0:	73fb      	strb	r3, [r7, #15]
      break;
 80170b2:	bf00      	nop
  }

  return ret;
 80170b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80170b6:	4618      	mov	r0, r3
 80170b8:	3710      	adds	r7, #16
 80170ba:	46bd      	mov	sp, r7
 80170bc:	bd80      	pop	{r7, pc}
 80170be:	bf00      	nop
 80170c0:	240016a4 	.word	0x240016a4

080170c4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80170c4:	b580      	push	{r7, lr}
 80170c6:	b082      	sub	sp, #8
 80170c8:	af00      	add	r7, sp, #0
 80170ca:	6078      	str	r0, [r7, #4]
 80170cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80170ce:	683b      	ldr	r3, [r7, #0]
 80170d0:	88db      	ldrh	r3, [r3, #6]
 80170d2:	2b01      	cmp	r3, #1
 80170d4:	d004      	beq.n	80170e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80170d6:	6839      	ldr	r1, [r7, #0]
 80170d8:	6878      	ldr	r0, [r7, #4]
 80170da:	f000 f8e2 	bl	80172a2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80170de:	e023      	b.n	8017128 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80170e6:	b2db      	uxtb	r3, r3
 80170e8:	2b02      	cmp	r3, #2
 80170ea:	dc02      	bgt.n	80170f2 <USBD_GetConfig+0x2e>
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	dc03      	bgt.n	80170f8 <USBD_GetConfig+0x34>
 80170f0:	e015      	b.n	801711e <USBD_GetConfig+0x5a>
 80170f2:	2b03      	cmp	r3, #3
 80170f4:	d00b      	beq.n	801710e <USBD_GetConfig+0x4a>
 80170f6:	e012      	b.n	801711e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	2200      	movs	r2, #0
 80170fc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	3308      	adds	r3, #8
 8017102:	2201      	movs	r2, #1
 8017104:	4619      	mov	r1, r3
 8017106:	6878      	ldr	r0, [r7, #4]
 8017108:	f000 f93c 	bl	8017384 <USBD_CtlSendData>
        break;
 801710c:	e00c      	b.n	8017128 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	3304      	adds	r3, #4
 8017112:	2201      	movs	r2, #1
 8017114:	4619      	mov	r1, r3
 8017116:	6878      	ldr	r0, [r7, #4]
 8017118:	f000 f934 	bl	8017384 <USBD_CtlSendData>
        break;
 801711c:	e004      	b.n	8017128 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801711e:	6839      	ldr	r1, [r7, #0]
 8017120:	6878      	ldr	r0, [r7, #4]
 8017122:	f000 f8be 	bl	80172a2 <USBD_CtlError>
        break;
 8017126:	bf00      	nop
}
 8017128:	bf00      	nop
 801712a:	3708      	adds	r7, #8
 801712c:	46bd      	mov	sp, r7
 801712e:	bd80      	pop	{r7, pc}

08017130 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017130:	b580      	push	{r7, lr}
 8017132:	b082      	sub	sp, #8
 8017134:	af00      	add	r7, sp, #0
 8017136:	6078      	str	r0, [r7, #4]
 8017138:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017140:	b2db      	uxtb	r3, r3
 8017142:	3b01      	subs	r3, #1
 8017144:	2b02      	cmp	r3, #2
 8017146:	d81e      	bhi.n	8017186 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8017148:	683b      	ldr	r3, [r7, #0]
 801714a:	88db      	ldrh	r3, [r3, #6]
 801714c:	2b02      	cmp	r3, #2
 801714e:	d004      	beq.n	801715a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8017150:	6839      	ldr	r1, [r7, #0]
 8017152:	6878      	ldr	r0, [r7, #4]
 8017154:	f000 f8a5 	bl	80172a2 <USBD_CtlError>
        break;
 8017158:	e01a      	b.n	8017190 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	2201      	movs	r2, #1
 801715e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8017166:	2b00      	cmp	r3, #0
 8017168:	d005      	beq.n	8017176 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	68db      	ldr	r3, [r3, #12]
 801716e:	f043 0202 	orr.w	r2, r3, #2
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	330c      	adds	r3, #12
 801717a:	2202      	movs	r2, #2
 801717c:	4619      	mov	r1, r3
 801717e:	6878      	ldr	r0, [r7, #4]
 8017180:	f000 f900 	bl	8017384 <USBD_CtlSendData>
      break;
 8017184:	e004      	b.n	8017190 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8017186:	6839      	ldr	r1, [r7, #0]
 8017188:	6878      	ldr	r0, [r7, #4]
 801718a:	f000 f88a 	bl	80172a2 <USBD_CtlError>
      break;
 801718e:	bf00      	nop
  }
}
 8017190:	bf00      	nop
 8017192:	3708      	adds	r7, #8
 8017194:	46bd      	mov	sp, r7
 8017196:	bd80      	pop	{r7, pc}

08017198 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017198:	b580      	push	{r7, lr}
 801719a:	b082      	sub	sp, #8
 801719c:	af00      	add	r7, sp, #0
 801719e:	6078      	str	r0, [r7, #4]
 80171a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80171a2:	683b      	ldr	r3, [r7, #0]
 80171a4:	885b      	ldrh	r3, [r3, #2]
 80171a6:	2b01      	cmp	r3, #1
 80171a8:	d107      	bne.n	80171ba <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	2201      	movs	r2, #1
 80171ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80171b2:	6878      	ldr	r0, [r7, #4]
 80171b4:	f000 f940 	bl	8017438 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80171b8:	e013      	b.n	80171e2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80171ba:	683b      	ldr	r3, [r7, #0]
 80171bc:	885b      	ldrh	r3, [r3, #2]
 80171be:	2b02      	cmp	r3, #2
 80171c0:	d10b      	bne.n	80171da <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80171c2:	683b      	ldr	r3, [r7, #0]
 80171c4:	889b      	ldrh	r3, [r3, #4]
 80171c6:	0a1b      	lsrs	r3, r3, #8
 80171c8:	b29b      	uxth	r3, r3
 80171ca:	b2da      	uxtb	r2, r3
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80171d2:	6878      	ldr	r0, [r7, #4]
 80171d4:	f000 f930 	bl	8017438 <USBD_CtlSendStatus>
}
 80171d8:	e003      	b.n	80171e2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80171da:	6839      	ldr	r1, [r7, #0]
 80171dc:	6878      	ldr	r0, [r7, #4]
 80171de:	f000 f860 	bl	80172a2 <USBD_CtlError>
}
 80171e2:	bf00      	nop
 80171e4:	3708      	adds	r7, #8
 80171e6:	46bd      	mov	sp, r7
 80171e8:	bd80      	pop	{r7, pc}

080171ea <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80171ea:	b580      	push	{r7, lr}
 80171ec:	b082      	sub	sp, #8
 80171ee:	af00      	add	r7, sp, #0
 80171f0:	6078      	str	r0, [r7, #4]
 80171f2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80171fa:	b2db      	uxtb	r3, r3
 80171fc:	3b01      	subs	r3, #1
 80171fe:	2b02      	cmp	r3, #2
 8017200:	d80b      	bhi.n	801721a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017202:	683b      	ldr	r3, [r7, #0]
 8017204:	885b      	ldrh	r3, [r3, #2]
 8017206:	2b01      	cmp	r3, #1
 8017208:	d10c      	bne.n	8017224 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	2200      	movs	r2, #0
 801720e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8017212:	6878      	ldr	r0, [r7, #4]
 8017214:	f000 f910 	bl	8017438 <USBD_CtlSendStatus>
      }
      break;
 8017218:	e004      	b.n	8017224 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801721a:	6839      	ldr	r1, [r7, #0]
 801721c:	6878      	ldr	r0, [r7, #4]
 801721e:	f000 f840 	bl	80172a2 <USBD_CtlError>
      break;
 8017222:	e000      	b.n	8017226 <USBD_ClrFeature+0x3c>
      break;
 8017224:	bf00      	nop
  }
}
 8017226:	bf00      	nop
 8017228:	3708      	adds	r7, #8
 801722a:	46bd      	mov	sp, r7
 801722c:	bd80      	pop	{r7, pc}

0801722e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801722e:	b580      	push	{r7, lr}
 8017230:	b084      	sub	sp, #16
 8017232:	af00      	add	r7, sp, #0
 8017234:	6078      	str	r0, [r7, #4]
 8017236:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8017238:	683b      	ldr	r3, [r7, #0]
 801723a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801723c:	68fb      	ldr	r3, [r7, #12]
 801723e:	781a      	ldrb	r2, [r3, #0]
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8017244:	68fb      	ldr	r3, [r7, #12]
 8017246:	3301      	adds	r3, #1
 8017248:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801724a:	68fb      	ldr	r3, [r7, #12]
 801724c:	781a      	ldrb	r2, [r3, #0]
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8017252:	68fb      	ldr	r3, [r7, #12]
 8017254:	3301      	adds	r3, #1
 8017256:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8017258:	68f8      	ldr	r0, [r7, #12]
 801725a:	f7ff fa41 	bl	80166e0 <SWAPBYTE>
 801725e:	4603      	mov	r3, r0
 8017260:	461a      	mov	r2, r3
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8017266:	68fb      	ldr	r3, [r7, #12]
 8017268:	3301      	adds	r3, #1
 801726a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801726c:	68fb      	ldr	r3, [r7, #12]
 801726e:	3301      	adds	r3, #1
 8017270:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8017272:	68f8      	ldr	r0, [r7, #12]
 8017274:	f7ff fa34 	bl	80166e0 <SWAPBYTE>
 8017278:	4603      	mov	r3, r0
 801727a:	461a      	mov	r2, r3
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8017280:	68fb      	ldr	r3, [r7, #12]
 8017282:	3301      	adds	r3, #1
 8017284:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017286:	68fb      	ldr	r3, [r7, #12]
 8017288:	3301      	adds	r3, #1
 801728a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801728c:	68f8      	ldr	r0, [r7, #12]
 801728e:	f7ff fa27 	bl	80166e0 <SWAPBYTE>
 8017292:	4603      	mov	r3, r0
 8017294:	461a      	mov	r2, r3
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	80da      	strh	r2, [r3, #6]
}
 801729a:	bf00      	nop
 801729c:	3710      	adds	r7, #16
 801729e:	46bd      	mov	sp, r7
 80172a0:	bd80      	pop	{r7, pc}

080172a2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80172a2:	b580      	push	{r7, lr}
 80172a4:	b082      	sub	sp, #8
 80172a6:	af00      	add	r7, sp, #0
 80172a8:	6078      	str	r0, [r7, #4]
 80172aa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80172ac:	2180      	movs	r1, #128	; 0x80
 80172ae:	6878      	ldr	r0, [r7, #4]
 80172b0:	f003 fcbe 	bl	801ac30 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80172b4:	2100      	movs	r1, #0
 80172b6:	6878      	ldr	r0, [r7, #4]
 80172b8:	f003 fcba 	bl	801ac30 <USBD_LL_StallEP>
}
 80172bc:	bf00      	nop
 80172be:	3708      	adds	r7, #8
 80172c0:	46bd      	mov	sp, r7
 80172c2:	bd80      	pop	{r7, pc}

080172c4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80172c4:	b580      	push	{r7, lr}
 80172c6:	b086      	sub	sp, #24
 80172c8:	af00      	add	r7, sp, #0
 80172ca:	60f8      	str	r0, [r7, #12]
 80172cc:	60b9      	str	r1, [r7, #8]
 80172ce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80172d0:	2300      	movs	r3, #0
 80172d2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80172d4:	68fb      	ldr	r3, [r7, #12]
 80172d6:	2b00      	cmp	r3, #0
 80172d8:	d036      	beq.n	8017348 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80172da:	68fb      	ldr	r3, [r7, #12]
 80172dc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80172de:	6938      	ldr	r0, [r7, #16]
 80172e0:	f000 f836 	bl	8017350 <USBD_GetLen>
 80172e4:	4603      	mov	r3, r0
 80172e6:	3301      	adds	r3, #1
 80172e8:	b29b      	uxth	r3, r3
 80172ea:	005b      	lsls	r3, r3, #1
 80172ec:	b29a      	uxth	r2, r3
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80172f2:	7dfb      	ldrb	r3, [r7, #23]
 80172f4:	68ba      	ldr	r2, [r7, #8]
 80172f6:	4413      	add	r3, r2
 80172f8:	687a      	ldr	r2, [r7, #4]
 80172fa:	7812      	ldrb	r2, [r2, #0]
 80172fc:	701a      	strb	r2, [r3, #0]
  idx++;
 80172fe:	7dfb      	ldrb	r3, [r7, #23]
 8017300:	3301      	adds	r3, #1
 8017302:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8017304:	7dfb      	ldrb	r3, [r7, #23]
 8017306:	68ba      	ldr	r2, [r7, #8]
 8017308:	4413      	add	r3, r2
 801730a:	2203      	movs	r2, #3
 801730c:	701a      	strb	r2, [r3, #0]
  idx++;
 801730e:	7dfb      	ldrb	r3, [r7, #23]
 8017310:	3301      	adds	r3, #1
 8017312:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8017314:	e013      	b.n	801733e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8017316:	7dfb      	ldrb	r3, [r7, #23]
 8017318:	68ba      	ldr	r2, [r7, #8]
 801731a:	4413      	add	r3, r2
 801731c:	693a      	ldr	r2, [r7, #16]
 801731e:	7812      	ldrb	r2, [r2, #0]
 8017320:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8017322:	693b      	ldr	r3, [r7, #16]
 8017324:	3301      	adds	r3, #1
 8017326:	613b      	str	r3, [r7, #16]
    idx++;
 8017328:	7dfb      	ldrb	r3, [r7, #23]
 801732a:	3301      	adds	r3, #1
 801732c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801732e:	7dfb      	ldrb	r3, [r7, #23]
 8017330:	68ba      	ldr	r2, [r7, #8]
 8017332:	4413      	add	r3, r2
 8017334:	2200      	movs	r2, #0
 8017336:	701a      	strb	r2, [r3, #0]
    idx++;
 8017338:	7dfb      	ldrb	r3, [r7, #23]
 801733a:	3301      	adds	r3, #1
 801733c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801733e:	693b      	ldr	r3, [r7, #16]
 8017340:	781b      	ldrb	r3, [r3, #0]
 8017342:	2b00      	cmp	r3, #0
 8017344:	d1e7      	bne.n	8017316 <USBD_GetString+0x52>
 8017346:	e000      	b.n	801734a <USBD_GetString+0x86>
    return;
 8017348:	bf00      	nop
  }
}
 801734a:	3718      	adds	r7, #24
 801734c:	46bd      	mov	sp, r7
 801734e:	bd80      	pop	{r7, pc}

08017350 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8017350:	b480      	push	{r7}
 8017352:	b085      	sub	sp, #20
 8017354:	af00      	add	r7, sp, #0
 8017356:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8017358:	2300      	movs	r3, #0
 801735a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8017360:	e005      	b.n	801736e <USBD_GetLen+0x1e>
  {
    len++;
 8017362:	7bfb      	ldrb	r3, [r7, #15]
 8017364:	3301      	adds	r3, #1
 8017366:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8017368:	68bb      	ldr	r3, [r7, #8]
 801736a:	3301      	adds	r3, #1
 801736c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801736e:	68bb      	ldr	r3, [r7, #8]
 8017370:	781b      	ldrb	r3, [r3, #0]
 8017372:	2b00      	cmp	r3, #0
 8017374:	d1f5      	bne.n	8017362 <USBD_GetLen+0x12>
  }

  return len;
 8017376:	7bfb      	ldrb	r3, [r7, #15]
}
 8017378:	4618      	mov	r0, r3
 801737a:	3714      	adds	r7, #20
 801737c:	46bd      	mov	sp, r7
 801737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017382:	4770      	bx	lr

08017384 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8017384:	b580      	push	{r7, lr}
 8017386:	b084      	sub	sp, #16
 8017388:	af00      	add	r7, sp, #0
 801738a:	60f8      	str	r0, [r7, #12]
 801738c:	60b9      	str	r1, [r7, #8]
 801738e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8017390:	68fb      	ldr	r3, [r7, #12]
 8017392:	2202      	movs	r2, #2
 8017394:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8017398:	68fb      	ldr	r3, [r7, #12]
 801739a:	687a      	ldr	r2, [r7, #4]
 801739c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801739e:	68fb      	ldr	r3, [r7, #12]
 80173a0:	687a      	ldr	r2, [r7, #4]
 80173a2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	68ba      	ldr	r2, [r7, #8]
 80173a8:	2100      	movs	r1, #0
 80173aa:	68f8      	ldr	r0, [r7, #12]
 80173ac:	f003 fcc9 	bl	801ad42 <USBD_LL_Transmit>

  return USBD_OK;
 80173b0:	2300      	movs	r3, #0
}
 80173b2:	4618      	mov	r0, r3
 80173b4:	3710      	adds	r7, #16
 80173b6:	46bd      	mov	sp, r7
 80173b8:	bd80      	pop	{r7, pc}

080173ba <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80173ba:	b580      	push	{r7, lr}
 80173bc:	b084      	sub	sp, #16
 80173be:	af00      	add	r7, sp, #0
 80173c0:	60f8      	str	r0, [r7, #12]
 80173c2:	60b9      	str	r1, [r7, #8]
 80173c4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	68ba      	ldr	r2, [r7, #8]
 80173ca:	2100      	movs	r1, #0
 80173cc:	68f8      	ldr	r0, [r7, #12]
 80173ce:	f003 fcb8 	bl	801ad42 <USBD_LL_Transmit>

  return USBD_OK;
 80173d2:	2300      	movs	r3, #0
}
 80173d4:	4618      	mov	r0, r3
 80173d6:	3710      	adds	r7, #16
 80173d8:	46bd      	mov	sp, r7
 80173da:	bd80      	pop	{r7, pc}

080173dc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80173dc:	b580      	push	{r7, lr}
 80173de:	b084      	sub	sp, #16
 80173e0:	af00      	add	r7, sp, #0
 80173e2:	60f8      	str	r0, [r7, #12]
 80173e4:	60b9      	str	r1, [r7, #8]
 80173e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80173e8:	68fb      	ldr	r3, [r7, #12]
 80173ea:	2203      	movs	r2, #3
 80173ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	687a      	ldr	r2, [r7, #4]
 80173f4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80173f8:	68fb      	ldr	r3, [r7, #12]
 80173fa:	687a      	ldr	r2, [r7, #4]
 80173fc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	68ba      	ldr	r2, [r7, #8]
 8017404:	2100      	movs	r1, #0
 8017406:	68f8      	ldr	r0, [r7, #12]
 8017408:	f003 fcbc 	bl	801ad84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801740c:	2300      	movs	r3, #0
}
 801740e:	4618      	mov	r0, r3
 8017410:	3710      	adds	r7, #16
 8017412:	46bd      	mov	sp, r7
 8017414:	bd80      	pop	{r7, pc}

08017416 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8017416:	b580      	push	{r7, lr}
 8017418:	b084      	sub	sp, #16
 801741a:	af00      	add	r7, sp, #0
 801741c:	60f8      	str	r0, [r7, #12]
 801741e:	60b9      	str	r1, [r7, #8]
 8017420:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	68ba      	ldr	r2, [r7, #8]
 8017426:	2100      	movs	r1, #0
 8017428:	68f8      	ldr	r0, [r7, #12]
 801742a:	f003 fcab 	bl	801ad84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801742e:	2300      	movs	r3, #0
}
 8017430:	4618      	mov	r0, r3
 8017432:	3710      	adds	r7, #16
 8017434:	46bd      	mov	sp, r7
 8017436:	bd80      	pop	{r7, pc}

08017438 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8017438:	b580      	push	{r7, lr}
 801743a:	b082      	sub	sp, #8
 801743c:	af00      	add	r7, sp, #0
 801743e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	2204      	movs	r2, #4
 8017444:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8017448:	2300      	movs	r3, #0
 801744a:	2200      	movs	r2, #0
 801744c:	2100      	movs	r1, #0
 801744e:	6878      	ldr	r0, [r7, #4]
 8017450:	f003 fc77 	bl	801ad42 <USBD_LL_Transmit>

  return USBD_OK;
 8017454:	2300      	movs	r3, #0
}
 8017456:	4618      	mov	r0, r3
 8017458:	3708      	adds	r7, #8
 801745a:	46bd      	mov	sp, r7
 801745c:	bd80      	pop	{r7, pc}

0801745e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801745e:	b580      	push	{r7, lr}
 8017460:	b082      	sub	sp, #8
 8017462:	af00      	add	r7, sp, #0
 8017464:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	2205      	movs	r2, #5
 801746a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801746e:	2300      	movs	r3, #0
 8017470:	2200      	movs	r2, #0
 8017472:	2100      	movs	r1, #0
 8017474:	6878      	ldr	r0, [r7, #4]
 8017476:	f003 fc85 	bl	801ad84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801747a:	2300      	movs	r3, #0
}
 801747c:	4618      	mov	r0, r3
 801747e:	3708      	adds	r7, #8
 8017480:	46bd      	mov	sp, r7
 8017482:	bd80      	pop	{r7, pc}

08017484 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8017484:	b580      	push	{r7, lr}
 8017486:	b084      	sub	sp, #16
 8017488:	af00      	add	r7, sp, #0
 801748a:	4603      	mov	r3, r0
 801748c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801748e:	79fb      	ldrb	r3, [r7, #7]
 8017490:	4a08      	ldr	r2, [pc, #32]	; (80174b4 <disk_status+0x30>)
 8017492:	009b      	lsls	r3, r3, #2
 8017494:	4413      	add	r3, r2
 8017496:	685b      	ldr	r3, [r3, #4]
 8017498:	685b      	ldr	r3, [r3, #4]
 801749a:	79fa      	ldrb	r2, [r7, #7]
 801749c:	4905      	ldr	r1, [pc, #20]	; (80174b4 <disk_status+0x30>)
 801749e:	440a      	add	r2, r1
 80174a0:	7a12      	ldrb	r2, [r2, #8]
 80174a2:	4610      	mov	r0, r2
 80174a4:	4798      	blx	r3
 80174a6:	4603      	mov	r3, r0
 80174a8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80174aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80174ac:	4618      	mov	r0, r3
 80174ae:	3710      	adds	r7, #16
 80174b0:	46bd      	mov	sp, r7
 80174b2:	bd80      	pop	{r7, pc}
 80174b4:	240018d0 	.word	0x240018d0

080174b8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80174b8:	b580      	push	{r7, lr}
 80174ba:	b084      	sub	sp, #16
 80174bc:	af00      	add	r7, sp, #0
 80174be:	4603      	mov	r3, r0
 80174c0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80174c2:	2300      	movs	r3, #0
 80174c4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80174c6:	79fb      	ldrb	r3, [r7, #7]
 80174c8:	4a0d      	ldr	r2, [pc, #52]	; (8017500 <disk_initialize+0x48>)
 80174ca:	5cd3      	ldrb	r3, [r2, r3]
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	d111      	bne.n	80174f4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80174d0:	79fb      	ldrb	r3, [r7, #7]
 80174d2:	4a0b      	ldr	r2, [pc, #44]	; (8017500 <disk_initialize+0x48>)
 80174d4:	2101      	movs	r1, #1
 80174d6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80174d8:	79fb      	ldrb	r3, [r7, #7]
 80174da:	4a09      	ldr	r2, [pc, #36]	; (8017500 <disk_initialize+0x48>)
 80174dc:	009b      	lsls	r3, r3, #2
 80174de:	4413      	add	r3, r2
 80174e0:	685b      	ldr	r3, [r3, #4]
 80174e2:	681b      	ldr	r3, [r3, #0]
 80174e4:	79fa      	ldrb	r2, [r7, #7]
 80174e6:	4906      	ldr	r1, [pc, #24]	; (8017500 <disk_initialize+0x48>)
 80174e8:	440a      	add	r2, r1
 80174ea:	7a12      	ldrb	r2, [r2, #8]
 80174ec:	4610      	mov	r0, r2
 80174ee:	4798      	blx	r3
 80174f0:	4603      	mov	r3, r0
 80174f2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80174f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80174f6:	4618      	mov	r0, r3
 80174f8:	3710      	adds	r7, #16
 80174fa:	46bd      	mov	sp, r7
 80174fc:	bd80      	pop	{r7, pc}
 80174fe:	bf00      	nop
 8017500:	240018d0 	.word	0x240018d0

08017504 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8017504:	b590      	push	{r4, r7, lr}
 8017506:	b087      	sub	sp, #28
 8017508:	af00      	add	r7, sp, #0
 801750a:	60b9      	str	r1, [r7, #8]
 801750c:	607a      	str	r2, [r7, #4]
 801750e:	603b      	str	r3, [r7, #0]
 8017510:	4603      	mov	r3, r0
 8017512:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8017514:	7bfb      	ldrb	r3, [r7, #15]
 8017516:	4a0a      	ldr	r2, [pc, #40]	; (8017540 <disk_read+0x3c>)
 8017518:	009b      	lsls	r3, r3, #2
 801751a:	4413      	add	r3, r2
 801751c:	685b      	ldr	r3, [r3, #4]
 801751e:	689c      	ldr	r4, [r3, #8]
 8017520:	7bfb      	ldrb	r3, [r7, #15]
 8017522:	4a07      	ldr	r2, [pc, #28]	; (8017540 <disk_read+0x3c>)
 8017524:	4413      	add	r3, r2
 8017526:	7a18      	ldrb	r0, [r3, #8]
 8017528:	683b      	ldr	r3, [r7, #0]
 801752a:	687a      	ldr	r2, [r7, #4]
 801752c:	68b9      	ldr	r1, [r7, #8]
 801752e:	47a0      	blx	r4
 8017530:	4603      	mov	r3, r0
 8017532:	75fb      	strb	r3, [r7, #23]
  return res;
 8017534:	7dfb      	ldrb	r3, [r7, #23]
}
 8017536:	4618      	mov	r0, r3
 8017538:	371c      	adds	r7, #28
 801753a:	46bd      	mov	sp, r7
 801753c:	bd90      	pop	{r4, r7, pc}
 801753e:	bf00      	nop
 8017540:	240018d0 	.word	0x240018d0

08017544 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8017544:	b590      	push	{r4, r7, lr}
 8017546:	b087      	sub	sp, #28
 8017548:	af00      	add	r7, sp, #0
 801754a:	60b9      	str	r1, [r7, #8]
 801754c:	607a      	str	r2, [r7, #4]
 801754e:	603b      	str	r3, [r7, #0]
 8017550:	4603      	mov	r3, r0
 8017552:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8017554:	7bfb      	ldrb	r3, [r7, #15]
 8017556:	4a0a      	ldr	r2, [pc, #40]	; (8017580 <disk_write+0x3c>)
 8017558:	009b      	lsls	r3, r3, #2
 801755a:	4413      	add	r3, r2
 801755c:	685b      	ldr	r3, [r3, #4]
 801755e:	68dc      	ldr	r4, [r3, #12]
 8017560:	7bfb      	ldrb	r3, [r7, #15]
 8017562:	4a07      	ldr	r2, [pc, #28]	; (8017580 <disk_write+0x3c>)
 8017564:	4413      	add	r3, r2
 8017566:	7a18      	ldrb	r0, [r3, #8]
 8017568:	683b      	ldr	r3, [r7, #0]
 801756a:	687a      	ldr	r2, [r7, #4]
 801756c:	68b9      	ldr	r1, [r7, #8]
 801756e:	47a0      	blx	r4
 8017570:	4603      	mov	r3, r0
 8017572:	75fb      	strb	r3, [r7, #23]
  return res;
 8017574:	7dfb      	ldrb	r3, [r7, #23]
}
 8017576:	4618      	mov	r0, r3
 8017578:	371c      	adds	r7, #28
 801757a:	46bd      	mov	sp, r7
 801757c:	bd90      	pop	{r4, r7, pc}
 801757e:	bf00      	nop
 8017580:	240018d0 	.word	0x240018d0

08017584 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8017584:	b580      	push	{r7, lr}
 8017586:	b084      	sub	sp, #16
 8017588:	af00      	add	r7, sp, #0
 801758a:	4603      	mov	r3, r0
 801758c:	603a      	str	r2, [r7, #0]
 801758e:	71fb      	strb	r3, [r7, #7]
 8017590:	460b      	mov	r3, r1
 8017592:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8017594:	79fb      	ldrb	r3, [r7, #7]
 8017596:	4a09      	ldr	r2, [pc, #36]	; (80175bc <disk_ioctl+0x38>)
 8017598:	009b      	lsls	r3, r3, #2
 801759a:	4413      	add	r3, r2
 801759c:	685b      	ldr	r3, [r3, #4]
 801759e:	691b      	ldr	r3, [r3, #16]
 80175a0:	79fa      	ldrb	r2, [r7, #7]
 80175a2:	4906      	ldr	r1, [pc, #24]	; (80175bc <disk_ioctl+0x38>)
 80175a4:	440a      	add	r2, r1
 80175a6:	7a10      	ldrb	r0, [r2, #8]
 80175a8:	79b9      	ldrb	r1, [r7, #6]
 80175aa:	683a      	ldr	r2, [r7, #0]
 80175ac:	4798      	blx	r3
 80175ae:	4603      	mov	r3, r0
 80175b0:	73fb      	strb	r3, [r7, #15]
  return res;
 80175b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80175b4:	4618      	mov	r0, r3
 80175b6:	3710      	adds	r7, #16
 80175b8:	46bd      	mov	sp, r7
 80175ba:	bd80      	pop	{r7, pc}
 80175bc:	240018d0 	.word	0x240018d0

080175c0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80175c0:	b480      	push	{r7}
 80175c2:	b085      	sub	sp, #20
 80175c4:	af00      	add	r7, sp, #0
 80175c6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	3301      	adds	r3, #1
 80175cc:	781b      	ldrb	r3, [r3, #0]
 80175ce:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80175d0:	89fb      	ldrh	r3, [r7, #14]
 80175d2:	021b      	lsls	r3, r3, #8
 80175d4:	b21a      	sxth	r2, r3
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	781b      	ldrb	r3, [r3, #0]
 80175da:	b21b      	sxth	r3, r3
 80175dc:	4313      	orrs	r3, r2
 80175de:	b21b      	sxth	r3, r3
 80175e0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80175e2:	89fb      	ldrh	r3, [r7, #14]
}
 80175e4:	4618      	mov	r0, r3
 80175e6:	3714      	adds	r7, #20
 80175e8:	46bd      	mov	sp, r7
 80175ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175ee:	4770      	bx	lr

080175f0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80175f0:	b480      	push	{r7}
 80175f2:	b085      	sub	sp, #20
 80175f4:	af00      	add	r7, sp, #0
 80175f6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	3303      	adds	r3, #3
 80175fc:	781b      	ldrb	r3, [r3, #0]
 80175fe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8017600:	68fb      	ldr	r3, [r7, #12]
 8017602:	021b      	lsls	r3, r3, #8
 8017604:	687a      	ldr	r2, [r7, #4]
 8017606:	3202      	adds	r2, #2
 8017608:	7812      	ldrb	r2, [r2, #0]
 801760a:	4313      	orrs	r3, r2
 801760c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801760e:	68fb      	ldr	r3, [r7, #12]
 8017610:	021b      	lsls	r3, r3, #8
 8017612:	687a      	ldr	r2, [r7, #4]
 8017614:	3201      	adds	r2, #1
 8017616:	7812      	ldrb	r2, [r2, #0]
 8017618:	4313      	orrs	r3, r2
 801761a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801761c:	68fb      	ldr	r3, [r7, #12]
 801761e:	021b      	lsls	r3, r3, #8
 8017620:	687a      	ldr	r2, [r7, #4]
 8017622:	7812      	ldrb	r2, [r2, #0]
 8017624:	4313      	orrs	r3, r2
 8017626:	60fb      	str	r3, [r7, #12]
	return rv;
 8017628:	68fb      	ldr	r3, [r7, #12]
}
 801762a:	4618      	mov	r0, r3
 801762c:	3714      	adds	r7, #20
 801762e:	46bd      	mov	sp, r7
 8017630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017634:	4770      	bx	lr

08017636 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8017636:	b480      	push	{r7}
 8017638:	b083      	sub	sp, #12
 801763a:	af00      	add	r7, sp, #0
 801763c:	6078      	str	r0, [r7, #4]
 801763e:	460b      	mov	r3, r1
 8017640:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	1c5a      	adds	r2, r3, #1
 8017646:	607a      	str	r2, [r7, #4]
 8017648:	887a      	ldrh	r2, [r7, #2]
 801764a:	b2d2      	uxtb	r2, r2
 801764c:	701a      	strb	r2, [r3, #0]
 801764e:	887b      	ldrh	r3, [r7, #2]
 8017650:	0a1b      	lsrs	r3, r3, #8
 8017652:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	1c5a      	adds	r2, r3, #1
 8017658:	607a      	str	r2, [r7, #4]
 801765a:	887a      	ldrh	r2, [r7, #2]
 801765c:	b2d2      	uxtb	r2, r2
 801765e:	701a      	strb	r2, [r3, #0]
}
 8017660:	bf00      	nop
 8017662:	370c      	adds	r7, #12
 8017664:	46bd      	mov	sp, r7
 8017666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801766a:	4770      	bx	lr

0801766c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801766c:	b480      	push	{r7}
 801766e:	b083      	sub	sp, #12
 8017670:	af00      	add	r7, sp, #0
 8017672:	6078      	str	r0, [r7, #4]
 8017674:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	1c5a      	adds	r2, r3, #1
 801767a:	607a      	str	r2, [r7, #4]
 801767c:	683a      	ldr	r2, [r7, #0]
 801767e:	b2d2      	uxtb	r2, r2
 8017680:	701a      	strb	r2, [r3, #0]
 8017682:	683b      	ldr	r3, [r7, #0]
 8017684:	0a1b      	lsrs	r3, r3, #8
 8017686:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	1c5a      	adds	r2, r3, #1
 801768c:	607a      	str	r2, [r7, #4]
 801768e:	683a      	ldr	r2, [r7, #0]
 8017690:	b2d2      	uxtb	r2, r2
 8017692:	701a      	strb	r2, [r3, #0]
 8017694:	683b      	ldr	r3, [r7, #0]
 8017696:	0a1b      	lsrs	r3, r3, #8
 8017698:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	1c5a      	adds	r2, r3, #1
 801769e:	607a      	str	r2, [r7, #4]
 80176a0:	683a      	ldr	r2, [r7, #0]
 80176a2:	b2d2      	uxtb	r2, r2
 80176a4:	701a      	strb	r2, [r3, #0]
 80176a6:	683b      	ldr	r3, [r7, #0]
 80176a8:	0a1b      	lsrs	r3, r3, #8
 80176aa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	1c5a      	adds	r2, r3, #1
 80176b0:	607a      	str	r2, [r7, #4]
 80176b2:	683a      	ldr	r2, [r7, #0]
 80176b4:	b2d2      	uxtb	r2, r2
 80176b6:	701a      	strb	r2, [r3, #0]
}
 80176b8:	bf00      	nop
 80176ba:	370c      	adds	r7, #12
 80176bc:	46bd      	mov	sp, r7
 80176be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176c2:	4770      	bx	lr

080176c4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80176c4:	b480      	push	{r7}
 80176c6:	b087      	sub	sp, #28
 80176c8:	af00      	add	r7, sp, #0
 80176ca:	60f8      	str	r0, [r7, #12]
 80176cc:	60b9      	str	r1, [r7, #8]
 80176ce:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80176d0:	68fb      	ldr	r3, [r7, #12]
 80176d2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80176d4:	68bb      	ldr	r3, [r7, #8]
 80176d6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	2b00      	cmp	r3, #0
 80176dc:	d00d      	beq.n	80176fa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80176de:	693a      	ldr	r2, [r7, #16]
 80176e0:	1c53      	adds	r3, r2, #1
 80176e2:	613b      	str	r3, [r7, #16]
 80176e4:	697b      	ldr	r3, [r7, #20]
 80176e6:	1c59      	adds	r1, r3, #1
 80176e8:	6179      	str	r1, [r7, #20]
 80176ea:	7812      	ldrb	r2, [r2, #0]
 80176ec:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	3b01      	subs	r3, #1
 80176f2:	607b      	str	r3, [r7, #4]
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	2b00      	cmp	r3, #0
 80176f8:	d1f1      	bne.n	80176de <mem_cpy+0x1a>
	}
}
 80176fa:	bf00      	nop
 80176fc:	371c      	adds	r7, #28
 80176fe:	46bd      	mov	sp, r7
 8017700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017704:	4770      	bx	lr

08017706 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8017706:	b480      	push	{r7}
 8017708:	b087      	sub	sp, #28
 801770a:	af00      	add	r7, sp, #0
 801770c:	60f8      	str	r0, [r7, #12]
 801770e:	60b9      	str	r1, [r7, #8]
 8017710:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8017712:	68fb      	ldr	r3, [r7, #12]
 8017714:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8017716:	697b      	ldr	r3, [r7, #20]
 8017718:	1c5a      	adds	r2, r3, #1
 801771a:	617a      	str	r2, [r7, #20]
 801771c:	68ba      	ldr	r2, [r7, #8]
 801771e:	b2d2      	uxtb	r2, r2
 8017720:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8017722:	687b      	ldr	r3, [r7, #4]
 8017724:	3b01      	subs	r3, #1
 8017726:	607b      	str	r3, [r7, #4]
 8017728:	687b      	ldr	r3, [r7, #4]
 801772a:	2b00      	cmp	r3, #0
 801772c:	d1f3      	bne.n	8017716 <mem_set+0x10>
}
 801772e:	bf00      	nop
 8017730:	bf00      	nop
 8017732:	371c      	adds	r7, #28
 8017734:	46bd      	mov	sp, r7
 8017736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801773a:	4770      	bx	lr

0801773c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801773c:	b480      	push	{r7}
 801773e:	b089      	sub	sp, #36	; 0x24
 8017740:	af00      	add	r7, sp, #0
 8017742:	60f8      	str	r0, [r7, #12]
 8017744:	60b9      	str	r1, [r7, #8]
 8017746:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8017748:	68fb      	ldr	r3, [r7, #12]
 801774a:	61fb      	str	r3, [r7, #28]
 801774c:	68bb      	ldr	r3, [r7, #8]
 801774e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8017750:	2300      	movs	r3, #0
 8017752:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8017754:	69fb      	ldr	r3, [r7, #28]
 8017756:	1c5a      	adds	r2, r3, #1
 8017758:	61fa      	str	r2, [r7, #28]
 801775a:	781b      	ldrb	r3, [r3, #0]
 801775c:	4619      	mov	r1, r3
 801775e:	69bb      	ldr	r3, [r7, #24]
 8017760:	1c5a      	adds	r2, r3, #1
 8017762:	61ba      	str	r2, [r7, #24]
 8017764:	781b      	ldrb	r3, [r3, #0]
 8017766:	1acb      	subs	r3, r1, r3
 8017768:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	3b01      	subs	r3, #1
 801776e:	607b      	str	r3, [r7, #4]
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	2b00      	cmp	r3, #0
 8017774:	d002      	beq.n	801777c <mem_cmp+0x40>
 8017776:	697b      	ldr	r3, [r7, #20]
 8017778:	2b00      	cmp	r3, #0
 801777a:	d0eb      	beq.n	8017754 <mem_cmp+0x18>

	return r;
 801777c:	697b      	ldr	r3, [r7, #20]
}
 801777e:	4618      	mov	r0, r3
 8017780:	3724      	adds	r7, #36	; 0x24
 8017782:	46bd      	mov	sp, r7
 8017784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017788:	4770      	bx	lr

0801778a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801778a:	b480      	push	{r7}
 801778c:	b083      	sub	sp, #12
 801778e:	af00      	add	r7, sp, #0
 8017790:	6078      	str	r0, [r7, #4]
 8017792:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8017794:	e002      	b.n	801779c <chk_chr+0x12>
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	3301      	adds	r3, #1
 801779a:	607b      	str	r3, [r7, #4]
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	781b      	ldrb	r3, [r3, #0]
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	d005      	beq.n	80177b0 <chk_chr+0x26>
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	781b      	ldrb	r3, [r3, #0]
 80177a8:	461a      	mov	r2, r3
 80177aa:	683b      	ldr	r3, [r7, #0]
 80177ac:	4293      	cmp	r3, r2
 80177ae:	d1f2      	bne.n	8017796 <chk_chr+0xc>
	return *str;
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	781b      	ldrb	r3, [r3, #0]
}
 80177b4:	4618      	mov	r0, r3
 80177b6:	370c      	adds	r7, #12
 80177b8:	46bd      	mov	sp, r7
 80177ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177be:	4770      	bx	lr

080177c0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80177c0:	b480      	push	{r7}
 80177c2:	b085      	sub	sp, #20
 80177c4:	af00      	add	r7, sp, #0
 80177c6:	6078      	str	r0, [r7, #4]
 80177c8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80177ca:	2300      	movs	r3, #0
 80177cc:	60bb      	str	r3, [r7, #8]
 80177ce:	68bb      	ldr	r3, [r7, #8]
 80177d0:	60fb      	str	r3, [r7, #12]
 80177d2:	e029      	b.n	8017828 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80177d4:	4a27      	ldr	r2, [pc, #156]	; (8017874 <chk_lock+0xb4>)
 80177d6:	68fb      	ldr	r3, [r7, #12]
 80177d8:	011b      	lsls	r3, r3, #4
 80177da:	4413      	add	r3, r2
 80177dc:	681b      	ldr	r3, [r3, #0]
 80177de:	2b00      	cmp	r3, #0
 80177e0:	d01d      	beq.n	801781e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80177e2:	4a24      	ldr	r2, [pc, #144]	; (8017874 <chk_lock+0xb4>)
 80177e4:	68fb      	ldr	r3, [r7, #12]
 80177e6:	011b      	lsls	r3, r3, #4
 80177e8:	4413      	add	r3, r2
 80177ea:	681a      	ldr	r2, [r3, #0]
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	681b      	ldr	r3, [r3, #0]
 80177f0:	429a      	cmp	r2, r3
 80177f2:	d116      	bne.n	8017822 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80177f4:	4a1f      	ldr	r2, [pc, #124]	; (8017874 <chk_lock+0xb4>)
 80177f6:	68fb      	ldr	r3, [r7, #12]
 80177f8:	011b      	lsls	r3, r3, #4
 80177fa:	4413      	add	r3, r2
 80177fc:	3304      	adds	r3, #4
 80177fe:	681a      	ldr	r2, [r3, #0]
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8017804:	429a      	cmp	r2, r3
 8017806:	d10c      	bne.n	8017822 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8017808:	4a1a      	ldr	r2, [pc, #104]	; (8017874 <chk_lock+0xb4>)
 801780a:	68fb      	ldr	r3, [r7, #12]
 801780c:	011b      	lsls	r3, r3, #4
 801780e:	4413      	add	r3, r2
 8017810:	3308      	adds	r3, #8
 8017812:	681a      	ldr	r2, [r3, #0]
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8017818:	429a      	cmp	r2, r3
 801781a:	d102      	bne.n	8017822 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801781c:	e007      	b.n	801782e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801781e:	2301      	movs	r3, #1
 8017820:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8017822:	68fb      	ldr	r3, [r7, #12]
 8017824:	3301      	adds	r3, #1
 8017826:	60fb      	str	r3, [r7, #12]
 8017828:	68fb      	ldr	r3, [r7, #12]
 801782a:	2b01      	cmp	r3, #1
 801782c:	d9d2      	bls.n	80177d4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801782e:	68fb      	ldr	r3, [r7, #12]
 8017830:	2b02      	cmp	r3, #2
 8017832:	d109      	bne.n	8017848 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8017834:	68bb      	ldr	r3, [r7, #8]
 8017836:	2b00      	cmp	r3, #0
 8017838:	d102      	bne.n	8017840 <chk_lock+0x80>
 801783a:	683b      	ldr	r3, [r7, #0]
 801783c:	2b02      	cmp	r3, #2
 801783e:	d101      	bne.n	8017844 <chk_lock+0x84>
 8017840:	2300      	movs	r3, #0
 8017842:	e010      	b.n	8017866 <chk_lock+0xa6>
 8017844:	2312      	movs	r3, #18
 8017846:	e00e      	b.n	8017866 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8017848:	683b      	ldr	r3, [r7, #0]
 801784a:	2b00      	cmp	r3, #0
 801784c:	d108      	bne.n	8017860 <chk_lock+0xa0>
 801784e:	4a09      	ldr	r2, [pc, #36]	; (8017874 <chk_lock+0xb4>)
 8017850:	68fb      	ldr	r3, [r7, #12]
 8017852:	011b      	lsls	r3, r3, #4
 8017854:	4413      	add	r3, r2
 8017856:	330c      	adds	r3, #12
 8017858:	881b      	ldrh	r3, [r3, #0]
 801785a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801785e:	d101      	bne.n	8017864 <chk_lock+0xa4>
 8017860:	2310      	movs	r3, #16
 8017862:	e000      	b.n	8017866 <chk_lock+0xa6>
 8017864:	2300      	movs	r3, #0
}
 8017866:	4618      	mov	r0, r3
 8017868:	3714      	adds	r7, #20
 801786a:	46bd      	mov	sp, r7
 801786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017870:	4770      	bx	lr
 8017872:	bf00      	nop
 8017874:	240016b0 	.word	0x240016b0

08017878 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8017878:	b480      	push	{r7}
 801787a:	b083      	sub	sp, #12
 801787c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801787e:	2300      	movs	r3, #0
 8017880:	607b      	str	r3, [r7, #4]
 8017882:	e002      	b.n	801788a <enq_lock+0x12>
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	3301      	adds	r3, #1
 8017888:	607b      	str	r3, [r7, #4]
 801788a:	687b      	ldr	r3, [r7, #4]
 801788c:	2b01      	cmp	r3, #1
 801788e:	d806      	bhi.n	801789e <enq_lock+0x26>
 8017890:	4a09      	ldr	r2, [pc, #36]	; (80178b8 <enq_lock+0x40>)
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	011b      	lsls	r3, r3, #4
 8017896:	4413      	add	r3, r2
 8017898:	681b      	ldr	r3, [r3, #0]
 801789a:	2b00      	cmp	r3, #0
 801789c:	d1f2      	bne.n	8017884 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	2b02      	cmp	r3, #2
 80178a2:	bf14      	ite	ne
 80178a4:	2301      	movne	r3, #1
 80178a6:	2300      	moveq	r3, #0
 80178a8:	b2db      	uxtb	r3, r3
}
 80178aa:	4618      	mov	r0, r3
 80178ac:	370c      	adds	r7, #12
 80178ae:	46bd      	mov	sp, r7
 80178b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178b4:	4770      	bx	lr
 80178b6:	bf00      	nop
 80178b8:	240016b0 	.word	0x240016b0

080178bc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80178bc:	b480      	push	{r7}
 80178be:	b085      	sub	sp, #20
 80178c0:	af00      	add	r7, sp, #0
 80178c2:	6078      	str	r0, [r7, #4]
 80178c4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80178c6:	2300      	movs	r3, #0
 80178c8:	60fb      	str	r3, [r7, #12]
 80178ca:	e01f      	b.n	801790c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80178cc:	4a41      	ldr	r2, [pc, #260]	; (80179d4 <inc_lock+0x118>)
 80178ce:	68fb      	ldr	r3, [r7, #12]
 80178d0:	011b      	lsls	r3, r3, #4
 80178d2:	4413      	add	r3, r2
 80178d4:	681a      	ldr	r2, [r3, #0]
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	681b      	ldr	r3, [r3, #0]
 80178da:	429a      	cmp	r2, r3
 80178dc:	d113      	bne.n	8017906 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80178de:	4a3d      	ldr	r2, [pc, #244]	; (80179d4 <inc_lock+0x118>)
 80178e0:	68fb      	ldr	r3, [r7, #12]
 80178e2:	011b      	lsls	r3, r3, #4
 80178e4:	4413      	add	r3, r2
 80178e6:	3304      	adds	r3, #4
 80178e8:	681a      	ldr	r2, [r3, #0]
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80178ee:	429a      	cmp	r2, r3
 80178f0:	d109      	bne.n	8017906 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80178f2:	4a38      	ldr	r2, [pc, #224]	; (80179d4 <inc_lock+0x118>)
 80178f4:	68fb      	ldr	r3, [r7, #12]
 80178f6:	011b      	lsls	r3, r3, #4
 80178f8:	4413      	add	r3, r2
 80178fa:	3308      	adds	r3, #8
 80178fc:	681a      	ldr	r2, [r3, #0]
 80178fe:	687b      	ldr	r3, [r7, #4]
 8017900:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8017902:	429a      	cmp	r2, r3
 8017904:	d006      	beq.n	8017914 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8017906:	68fb      	ldr	r3, [r7, #12]
 8017908:	3301      	adds	r3, #1
 801790a:	60fb      	str	r3, [r7, #12]
 801790c:	68fb      	ldr	r3, [r7, #12]
 801790e:	2b01      	cmp	r3, #1
 8017910:	d9dc      	bls.n	80178cc <inc_lock+0x10>
 8017912:	e000      	b.n	8017916 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8017914:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8017916:	68fb      	ldr	r3, [r7, #12]
 8017918:	2b02      	cmp	r3, #2
 801791a:	d132      	bne.n	8017982 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801791c:	2300      	movs	r3, #0
 801791e:	60fb      	str	r3, [r7, #12]
 8017920:	e002      	b.n	8017928 <inc_lock+0x6c>
 8017922:	68fb      	ldr	r3, [r7, #12]
 8017924:	3301      	adds	r3, #1
 8017926:	60fb      	str	r3, [r7, #12]
 8017928:	68fb      	ldr	r3, [r7, #12]
 801792a:	2b01      	cmp	r3, #1
 801792c:	d806      	bhi.n	801793c <inc_lock+0x80>
 801792e:	4a29      	ldr	r2, [pc, #164]	; (80179d4 <inc_lock+0x118>)
 8017930:	68fb      	ldr	r3, [r7, #12]
 8017932:	011b      	lsls	r3, r3, #4
 8017934:	4413      	add	r3, r2
 8017936:	681b      	ldr	r3, [r3, #0]
 8017938:	2b00      	cmp	r3, #0
 801793a:	d1f2      	bne.n	8017922 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801793c:	68fb      	ldr	r3, [r7, #12]
 801793e:	2b02      	cmp	r3, #2
 8017940:	d101      	bne.n	8017946 <inc_lock+0x8a>
 8017942:	2300      	movs	r3, #0
 8017944:	e040      	b.n	80179c8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	681a      	ldr	r2, [r3, #0]
 801794a:	4922      	ldr	r1, [pc, #136]	; (80179d4 <inc_lock+0x118>)
 801794c:	68fb      	ldr	r3, [r7, #12]
 801794e:	011b      	lsls	r3, r3, #4
 8017950:	440b      	add	r3, r1
 8017952:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	689a      	ldr	r2, [r3, #8]
 8017958:	491e      	ldr	r1, [pc, #120]	; (80179d4 <inc_lock+0x118>)
 801795a:	68fb      	ldr	r3, [r7, #12]
 801795c:	011b      	lsls	r3, r3, #4
 801795e:	440b      	add	r3, r1
 8017960:	3304      	adds	r3, #4
 8017962:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	695a      	ldr	r2, [r3, #20]
 8017968:	491a      	ldr	r1, [pc, #104]	; (80179d4 <inc_lock+0x118>)
 801796a:	68fb      	ldr	r3, [r7, #12]
 801796c:	011b      	lsls	r3, r3, #4
 801796e:	440b      	add	r3, r1
 8017970:	3308      	adds	r3, #8
 8017972:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8017974:	4a17      	ldr	r2, [pc, #92]	; (80179d4 <inc_lock+0x118>)
 8017976:	68fb      	ldr	r3, [r7, #12]
 8017978:	011b      	lsls	r3, r3, #4
 801797a:	4413      	add	r3, r2
 801797c:	330c      	adds	r3, #12
 801797e:	2200      	movs	r2, #0
 8017980:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8017982:	683b      	ldr	r3, [r7, #0]
 8017984:	2b00      	cmp	r3, #0
 8017986:	d009      	beq.n	801799c <inc_lock+0xe0>
 8017988:	4a12      	ldr	r2, [pc, #72]	; (80179d4 <inc_lock+0x118>)
 801798a:	68fb      	ldr	r3, [r7, #12]
 801798c:	011b      	lsls	r3, r3, #4
 801798e:	4413      	add	r3, r2
 8017990:	330c      	adds	r3, #12
 8017992:	881b      	ldrh	r3, [r3, #0]
 8017994:	2b00      	cmp	r3, #0
 8017996:	d001      	beq.n	801799c <inc_lock+0xe0>
 8017998:	2300      	movs	r3, #0
 801799a:	e015      	b.n	80179c8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801799c:	683b      	ldr	r3, [r7, #0]
 801799e:	2b00      	cmp	r3, #0
 80179a0:	d108      	bne.n	80179b4 <inc_lock+0xf8>
 80179a2:	4a0c      	ldr	r2, [pc, #48]	; (80179d4 <inc_lock+0x118>)
 80179a4:	68fb      	ldr	r3, [r7, #12]
 80179a6:	011b      	lsls	r3, r3, #4
 80179a8:	4413      	add	r3, r2
 80179aa:	330c      	adds	r3, #12
 80179ac:	881b      	ldrh	r3, [r3, #0]
 80179ae:	3301      	adds	r3, #1
 80179b0:	b29a      	uxth	r2, r3
 80179b2:	e001      	b.n	80179b8 <inc_lock+0xfc>
 80179b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80179b8:	4906      	ldr	r1, [pc, #24]	; (80179d4 <inc_lock+0x118>)
 80179ba:	68fb      	ldr	r3, [r7, #12]
 80179bc:	011b      	lsls	r3, r3, #4
 80179be:	440b      	add	r3, r1
 80179c0:	330c      	adds	r3, #12
 80179c2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80179c4:	68fb      	ldr	r3, [r7, #12]
 80179c6:	3301      	adds	r3, #1
}
 80179c8:	4618      	mov	r0, r3
 80179ca:	3714      	adds	r7, #20
 80179cc:	46bd      	mov	sp, r7
 80179ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179d2:	4770      	bx	lr
 80179d4:	240016b0 	.word	0x240016b0

080179d8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80179d8:	b480      	push	{r7}
 80179da:	b085      	sub	sp, #20
 80179dc:	af00      	add	r7, sp, #0
 80179de:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	3b01      	subs	r3, #1
 80179e4:	607b      	str	r3, [r7, #4]
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	2b01      	cmp	r3, #1
 80179ea:	d825      	bhi.n	8017a38 <dec_lock+0x60>
		n = Files[i].ctr;
 80179ec:	4a17      	ldr	r2, [pc, #92]	; (8017a4c <dec_lock+0x74>)
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	011b      	lsls	r3, r3, #4
 80179f2:	4413      	add	r3, r2
 80179f4:	330c      	adds	r3, #12
 80179f6:	881b      	ldrh	r3, [r3, #0]
 80179f8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80179fa:	89fb      	ldrh	r3, [r7, #14]
 80179fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017a00:	d101      	bne.n	8017a06 <dec_lock+0x2e>
 8017a02:	2300      	movs	r3, #0
 8017a04:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8017a06:	89fb      	ldrh	r3, [r7, #14]
 8017a08:	2b00      	cmp	r3, #0
 8017a0a:	d002      	beq.n	8017a12 <dec_lock+0x3a>
 8017a0c:	89fb      	ldrh	r3, [r7, #14]
 8017a0e:	3b01      	subs	r3, #1
 8017a10:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8017a12:	4a0e      	ldr	r2, [pc, #56]	; (8017a4c <dec_lock+0x74>)
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	011b      	lsls	r3, r3, #4
 8017a18:	4413      	add	r3, r2
 8017a1a:	330c      	adds	r3, #12
 8017a1c:	89fa      	ldrh	r2, [r7, #14]
 8017a1e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8017a20:	89fb      	ldrh	r3, [r7, #14]
 8017a22:	2b00      	cmp	r3, #0
 8017a24:	d105      	bne.n	8017a32 <dec_lock+0x5a>
 8017a26:	4a09      	ldr	r2, [pc, #36]	; (8017a4c <dec_lock+0x74>)
 8017a28:	687b      	ldr	r3, [r7, #4]
 8017a2a:	011b      	lsls	r3, r3, #4
 8017a2c:	4413      	add	r3, r2
 8017a2e:	2200      	movs	r2, #0
 8017a30:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8017a32:	2300      	movs	r3, #0
 8017a34:	737b      	strb	r3, [r7, #13]
 8017a36:	e001      	b.n	8017a3c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8017a38:	2302      	movs	r3, #2
 8017a3a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8017a3c:	7b7b      	ldrb	r3, [r7, #13]
}
 8017a3e:	4618      	mov	r0, r3
 8017a40:	3714      	adds	r7, #20
 8017a42:	46bd      	mov	sp, r7
 8017a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a48:	4770      	bx	lr
 8017a4a:	bf00      	nop
 8017a4c:	240016b0 	.word	0x240016b0

08017a50 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8017a50:	b480      	push	{r7}
 8017a52:	b085      	sub	sp, #20
 8017a54:	af00      	add	r7, sp, #0
 8017a56:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8017a58:	2300      	movs	r3, #0
 8017a5a:	60fb      	str	r3, [r7, #12]
 8017a5c:	e010      	b.n	8017a80 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8017a5e:	4a0d      	ldr	r2, [pc, #52]	; (8017a94 <clear_lock+0x44>)
 8017a60:	68fb      	ldr	r3, [r7, #12]
 8017a62:	011b      	lsls	r3, r3, #4
 8017a64:	4413      	add	r3, r2
 8017a66:	681b      	ldr	r3, [r3, #0]
 8017a68:	687a      	ldr	r2, [r7, #4]
 8017a6a:	429a      	cmp	r2, r3
 8017a6c:	d105      	bne.n	8017a7a <clear_lock+0x2a>
 8017a6e:	4a09      	ldr	r2, [pc, #36]	; (8017a94 <clear_lock+0x44>)
 8017a70:	68fb      	ldr	r3, [r7, #12]
 8017a72:	011b      	lsls	r3, r3, #4
 8017a74:	4413      	add	r3, r2
 8017a76:	2200      	movs	r2, #0
 8017a78:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8017a7a:	68fb      	ldr	r3, [r7, #12]
 8017a7c:	3301      	adds	r3, #1
 8017a7e:	60fb      	str	r3, [r7, #12]
 8017a80:	68fb      	ldr	r3, [r7, #12]
 8017a82:	2b01      	cmp	r3, #1
 8017a84:	d9eb      	bls.n	8017a5e <clear_lock+0xe>
	}
}
 8017a86:	bf00      	nop
 8017a88:	bf00      	nop
 8017a8a:	3714      	adds	r7, #20
 8017a8c:	46bd      	mov	sp, r7
 8017a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a92:	4770      	bx	lr
 8017a94:	240016b0 	.word	0x240016b0

08017a98 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8017a98:	b580      	push	{r7, lr}
 8017a9a:	b086      	sub	sp, #24
 8017a9c:	af00      	add	r7, sp, #0
 8017a9e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8017aa0:	2300      	movs	r3, #0
 8017aa2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8017aa4:	687b      	ldr	r3, [r7, #4]
 8017aa6:	78db      	ldrb	r3, [r3, #3]
 8017aa8:	2b00      	cmp	r3, #0
 8017aaa:	d034      	beq.n	8017b16 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017ab0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	7858      	ldrb	r0, [r3, #1]
 8017ab6:	687b      	ldr	r3, [r7, #4]
 8017ab8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017abc:	2301      	movs	r3, #1
 8017abe:	697a      	ldr	r2, [r7, #20]
 8017ac0:	f7ff fd40 	bl	8017544 <disk_write>
 8017ac4:	4603      	mov	r3, r0
 8017ac6:	2b00      	cmp	r3, #0
 8017ac8:	d002      	beq.n	8017ad0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8017aca:	2301      	movs	r3, #1
 8017acc:	73fb      	strb	r3, [r7, #15]
 8017ace:	e022      	b.n	8017b16 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	2200      	movs	r2, #0
 8017ad4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017ada:	697a      	ldr	r2, [r7, #20]
 8017adc:	1ad2      	subs	r2, r2, r3
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	6a1b      	ldr	r3, [r3, #32]
 8017ae2:	429a      	cmp	r2, r3
 8017ae4:	d217      	bcs.n	8017b16 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	789b      	ldrb	r3, [r3, #2]
 8017aea:	613b      	str	r3, [r7, #16]
 8017aec:	e010      	b.n	8017b10 <sync_window+0x78>
					wsect += fs->fsize;
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	6a1b      	ldr	r3, [r3, #32]
 8017af2:	697a      	ldr	r2, [r7, #20]
 8017af4:	4413      	add	r3, r2
 8017af6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	7858      	ldrb	r0, [r3, #1]
 8017afc:	687b      	ldr	r3, [r7, #4]
 8017afe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017b02:	2301      	movs	r3, #1
 8017b04:	697a      	ldr	r2, [r7, #20]
 8017b06:	f7ff fd1d 	bl	8017544 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017b0a:	693b      	ldr	r3, [r7, #16]
 8017b0c:	3b01      	subs	r3, #1
 8017b0e:	613b      	str	r3, [r7, #16]
 8017b10:	693b      	ldr	r3, [r7, #16]
 8017b12:	2b01      	cmp	r3, #1
 8017b14:	d8eb      	bhi.n	8017aee <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8017b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8017b18:	4618      	mov	r0, r3
 8017b1a:	3718      	adds	r7, #24
 8017b1c:	46bd      	mov	sp, r7
 8017b1e:	bd80      	pop	{r7, pc}

08017b20 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8017b20:	b580      	push	{r7, lr}
 8017b22:	b084      	sub	sp, #16
 8017b24:	af00      	add	r7, sp, #0
 8017b26:	6078      	str	r0, [r7, #4]
 8017b28:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8017b2a:	2300      	movs	r3, #0
 8017b2c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017b32:	683a      	ldr	r2, [r7, #0]
 8017b34:	429a      	cmp	r2, r3
 8017b36:	d01b      	beq.n	8017b70 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8017b38:	6878      	ldr	r0, [r7, #4]
 8017b3a:	f7ff ffad 	bl	8017a98 <sync_window>
 8017b3e:	4603      	mov	r3, r0
 8017b40:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8017b42:	7bfb      	ldrb	r3, [r7, #15]
 8017b44:	2b00      	cmp	r3, #0
 8017b46:	d113      	bne.n	8017b70 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	7858      	ldrb	r0, [r3, #1]
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017b52:	2301      	movs	r3, #1
 8017b54:	683a      	ldr	r2, [r7, #0]
 8017b56:	f7ff fcd5 	bl	8017504 <disk_read>
 8017b5a:	4603      	mov	r3, r0
 8017b5c:	2b00      	cmp	r3, #0
 8017b5e:	d004      	beq.n	8017b6a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8017b60:	f04f 33ff 	mov.w	r3, #4294967295
 8017b64:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8017b66:	2301      	movs	r3, #1
 8017b68:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	683a      	ldr	r2, [r7, #0]
 8017b6e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8017b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8017b72:	4618      	mov	r0, r3
 8017b74:	3710      	adds	r7, #16
 8017b76:	46bd      	mov	sp, r7
 8017b78:	bd80      	pop	{r7, pc}
	...

08017b7c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8017b7c:	b580      	push	{r7, lr}
 8017b7e:	b084      	sub	sp, #16
 8017b80:	af00      	add	r7, sp, #0
 8017b82:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8017b84:	6878      	ldr	r0, [r7, #4]
 8017b86:	f7ff ff87 	bl	8017a98 <sync_window>
 8017b8a:	4603      	mov	r3, r0
 8017b8c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8017b8e:	7bfb      	ldrb	r3, [r7, #15]
 8017b90:	2b00      	cmp	r3, #0
 8017b92:	d159      	bne.n	8017c48 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	781b      	ldrb	r3, [r3, #0]
 8017b98:	2b03      	cmp	r3, #3
 8017b9a:	d149      	bne.n	8017c30 <sync_fs+0xb4>
 8017b9c:	687b      	ldr	r3, [r7, #4]
 8017b9e:	791b      	ldrb	r3, [r3, #4]
 8017ba0:	2b01      	cmp	r3, #1
 8017ba2:	d145      	bne.n	8017c30 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	899b      	ldrh	r3, [r3, #12]
 8017bae:	461a      	mov	r2, r3
 8017bb0:	2100      	movs	r1, #0
 8017bb2:	f7ff fda8 	bl	8017706 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8017bb6:	687b      	ldr	r3, [r7, #4]
 8017bb8:	3338      	adds	r3, #56	; 0x38
 8017bba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017bbe:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8017bc2:	4618      	mov	r0, r3
 8017bc4:	f7ff fd37 	bl	8017636 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	3338      	adds	r3, #56	; 0x38
 8017bcc:	4921      	ldr	r1, [pc, #132]	; (8017c54 <sync_fs+0xd8>)
 8017bce:	4618      	mov	r0, r3
 8017bd0:	f7ff fd4c 	bl	801766c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	3338      	adds	r3, #56	; 0x38
 8017bd8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8017bdc:	491e      	ldr	r1, [pc, #120]	; (8017c58 <sync_fs+0xdc>)
 8017bde:	4618      	mov	r0, r3
 8017be0:	f7ff fd44 	bl	801766c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	3338      	adds	r3, #56	; 0x38
 8017be8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	699b      	ldr	r3, [r3, #24]
 8017bf0:	4619      	mov	r1, r3
 8017bf2:	4610      	mov	r0, r2
 8017bf4:	f7ff fd3a 	bl	801766c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8017bf8:	687b      	ldr	r3, [r7, #4]
 8017bfa:	3338      	adds	r3, #56	; 0x38
 8017bfc:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	695b      	ldr	r3, [r3, #20]
 8017c04:	4619      	mov	r1, r3
 8017c06:	4610      	mov	r0, r2
 8017c08:	f7ff fd30 	bl	801766c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8017c0c:	687b      	ldr	r3, [r7, #4]
 8017c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c10:	1c5a      	adds	r2, r3, #1
 8017c12:	687b      	ldr	r3, [r7, #4]
 8017c14:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8017c16:	687b      	ldr	r3, [r7, #4]
 8017c18:	7858      	ldrb	r0, [r3, #1]
 8017c1a:	687b      	ldr	r3, [r7, #4]
 8017c1c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017c24:	2301      	movs	r3, #1
 8017c26:	f7ff fc8d 	bl	8017544 <disk_write>
			fs->fsi_flag = 0;
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	2200      	movs	r2, #0
 8017c2e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	785b      	ldrb	r3, [r3, #1]
 8017c34:	2200      	movs	r2, #0
 8017c36:	2100      	movs	r1, #0
 8017c38:	4618      	mov	r0, r3
 8017c3a:	f7ff fca3 	bl	8017584 <disk_ioctl>
 8017c3e:	4603      	mov	r3, r0
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	d001      	beq.n	8017c48 <sync_fs+0xcc>
 8017c44:	2301      	movs	r3, #1
 8017c46:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8017c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8017c4a:	4618      	mov	r0, r3
 8017c4c:	3710      	adds	r7, #16
 8017c4e:	46bd      	mov	sp, r7
 8017c50:	bd80      	pop	{r7, pc}
 8017c52:	bf00      	nop
 8017c54:	41615252 	.word	0x41615252
 8017c58:	61417272 	.word	0x61417272

08017c5c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8017c5c:	b480      	push	{r7}
 8017c5e:	b083      	sub	sp, #12
 8017c60:	af00      	add	r7, sp, #0
 8017c62:	6078      	str	r0, [r7, #4]
 8017c64:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8017c66:	683b      	ldr	r3, [r7, #0]
 8017c68:	3b02      	subs	r3, #2
 8017c6a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017c6c:	687b      	ldr	r3, [r7, #4]
 8017c6e:	69db      	ldr	r3, [r3, #28]
 8017c70:	3b02      	subs	r3, #2
 8017c72:	683a      	ldr	r2, [r7, #0]
 8017c74:	429a      	cmp	r2, r3
 8017c76:	d301      	bcc.n	8017c7c <clust2sect+0x20>
 8017c78:	2300      	movs	r3, #0
 8017c7a:	e008      	b.n	8017c8e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	895b      	ldrh	r3, [r3, #10]
 8017c80:	461a      	mov	r2, r3
 8017c82:	683b      	ldr	r3, [r7, #0]
 8017c84:	fb03 f202 	mul.w	r2, r3, r2
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017c8c:	4413      	add	r3, r2
}
 8017c8e:	4618      	mov	r0, r3
 8017c90:	370c      	adds	r7, #12
 8017c92:	46bd      	mov	sp, r7
 8017c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c98:	4770      	bx	lr

08017c9a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8017c9a:	b580      	push	{r7, lr}
 8017c9c:	b086      	sub	sp, #24
 8017c9e:	af00      	add	r7, sp, #0
 8017ca0:	6078      	str	r0, [r7, #4]
 8017ca2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	681b      	ldr	r3, [r3, #0]
 8017ca8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8017caa:	683b      	ldr	r3, [r7, #0]
 8017cac:	2b01      	cmp	r3, #1
 8017cae:	d904      	bls.n	8017cba <get_fat+0x20>
 8017cb0:	693b      	ldr	r3, [r7, #16]
 8017cb2:	69db      	ldr	r3, [r3, #28]
 8017cb4:	683a      	ldr	r2, [r7, #0]
 8017cb6:	429a      	cmp	r2, r3
 8017cb8:	d302      	bcc.n	8017cc0 <get_fat+0x26>
		val = 1;	/* Internal error */
 8017cba:	2301      	movs	r3, #1
 8017cbc:	617b      	str	r3, [r7, #20]
 8017cbe:	e0bb      	b.n	8017e38 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8017cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8017cc4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8017cc6:	693b      	ldr	r3, [r7, #16]
 8017cc8:	781b      	ldrb	r3, [r3, #0]
 8017cca:	2b03      	cmp	r3, #3
 8017ccc:	f000 8083 	beq.w	8017dd6 <get_fat+0x13c>
 8017cd0:	2b03      	cmp	r3, #3
 8017cd2:	f300 80a7 	bgt.w	8017e24 <get_fat+0x18a>
 8017cd6:	2b01      	cmp	r3, #1
 8017cd8:	d002      	beq.n	8017ce0 <get_fat+0x46>
 8017cda:	2b02      	cmp	r3, #2
 8017cdc:	d056      	beq.n	8017d8c <get_fat+0xf2>
 8017cde:	e0a1      	b.n	8017e24 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8017ce0:	683b      	ldr	r3, [r7, #0]
 8017ce2:	60fb      	str	r3, [r7, #12]
 8017ce4:	68fb      	ldr	r3, [r7, #12]
 8017ce6:	085b      	lsrs	r3, r3, #1
 8017ce8:	68fa      	ldr	r2, [r7, #12]
 8017cea:	4413      	add	r3, r2
 8017cec:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017cee:	693b      	ldr	r3, [r7, #16]
 8017cf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017cf2:	693b      	ldr	r3, [r7, #16]
 8017cf4:	899b      	ldrh	r3, [r3, #12]
 8017cf6:	4619      	mov	r1, r3
 8017cf8:	68fb      	ldr	r3, [r7, #12]
 8017cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8017cfe:	4413      	add	r3, r2
 8017d00:	4619      	mov	r1, r3
 8017d02:	6938      	ldr	r0, [r7, #16]
 8017d04:	f7ff ff0c 	bl	8017b20 <move_window>
 8017d08:	4603      	mov	r3, r0
 8017d0a:	2b00      	cmp	r3, #0
 8017d0c:	f040 808d 	bne.w	8017e2a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8017d10:	68fb      	ldr	r3, [r7, #12]
 8017d12:	1c5a      	adds	r2, r3, #1
 8017d14:	60fa      	str	r2, [r7, #12]
 8017d16:	693a      	ldr	r2, [r7, #16]
 8017d18:	8992      	ldrh	r2, [r2, #12]
 8017d1a:	fbb3 f1f2 	udiv	r1, r3, r2
 8017d1e:	fb01 f202 	mul.w	r2, r1, r2
 8017d22:	1a9b      	subs	r3, r3, r2
 8017d24:	693a      	ldr	r2, [r7, #16]
 8017d26:	4413      	add	r3, r2
 8017d28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017d2c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017d2e:	693b      	ldr	r3, [r7, #16]
 8017d30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017d32:	693b      	ldr	r3, [r7, #16]
 8017d34:	899b      	ldrh	r3, [r3, #12]
 8017d36:	4619      	mov	r1, r3
 8017d38:	68fb      	ldr	r3, [r7, #12]
 8017d3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8017d3e:	4413      	add	r3, r2
 8017d40:	4619      	mov	r1, r3
 8017d42:	6938      	ldr	r0, [r7, #16]
 8017d44:	f7ff feec 	bl	8017b20 <move_window>
 8017d48:	4603      	mov	r3, r0
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d16f      	bne.n	8017e2e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8017d4e:	693b      	ldr	r3, [r7, #16]
 8017d50:	899b      	ldrh	r3, [r3, #12]
 8017d52:	461a      	mov	r2, r3
 8017d54:	68fb      	ldr	r3, [r7, #12]
 8017d56:	fbb3 f1f2 	udiv	r1, r3, r2
 8017d5a:	fb01 f202 	mul.w	r2, r1, r2
 8017d5e:	1a9b      	subs	r3, r3, r2
 8017d60:	693a      	ldr	r2, [r7, #16]
 8017d62:	4413      	add	r3, r2
 8017d64:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017d68:	021b      	lsls	r3, r3, #8
 8017d6a:	461a      	mov	r2, r3
 8017d6c:	68bb      	ldr	r3, [r7, #8]
 8017d6e:	4313      	orrs	r3, r2
 8017d70:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8017d72:	683b      	ldr	r3, [r7, #0]
 8017d74:	f003 0301 	and.w	r3, r3, #1
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	d002      	beq.n	8017d82 <get_fat+0xe8>
 8017d7c:	68bb      	ldr	r3, [r7, #8]
 8017d7e:	091b      	lsrs	r3, r3, #4
 8017d80:	e002      	b.n	8017d88 <get_fat+0xee>
 8017d82:	68bb      	ldr	r3, [r7, #8]
 8017d84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017d88:	617b      	str	r3, [r7, #20]
			break;
 8017d8a:	e055      	b.n	8017e38 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8017d8c:	693b      	ldr	r3, [r7, #16]
 8017d8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017d90:	693b      	ldr	r3, [r7, #16]
 8017d92:	899b      	ldrh	r3, [r3, #12]
 8017d94:	085b      	lsrs	r3, r3, #1
 8017d96:	b29b      	uxth	r3, r3
 8017d98:	4619      	mov	r1, r3
 8017d9a:	683b      	ldr	r3, [r7, #0]
 8017d9c:	fbb3 f3f1 	udiv	r3, r3, r1
 8017da0:	4413      	add	r3, r2
 8017da2:	4619      	mov	r1, r3
 8017da4:	6938      	ldr	r0, [r7, #16]
 8017da6:	f7ff febb 	bl	8017b20 <move_window>
 8017daa:	4603      	mov	r3, r0
 8017dac:	2b00      	cmp	r3, #0
 8017dae:	d140      	bne.n	8017e32 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8017db0:	693b      	ldr	r3, [r7, #16]
 8017db2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017db6:	683b      	ldr	r3, [r7, #0]
 8017db8:	005b      	lsls	r3, r3, #1
 8017dba:	693a      	ldr	r2, [r7, #16]
 8017dbc:	8992      	ldrh	r2, [r2, #12]
 8017dbe:	fbb3 f0f2 	udiv	r0, r3, r2
 8017dc2:	fb00 f202 	mul.w	r2, r0, r2
 8017dc6:	1a9b      	subs	r3, r3, r2
 8017dc8:	440b      	add	r3, r1
 8017dca:	4618      	mov	r0, r3
 8017dcc:	f7ff fbf8 	bl	80175c0 <ld_word>
 8017dd0:	4603      	mov	r3, r0
 8017dd2:	617b      	str	r3, [r7, #20]
			break;
 8017dd4:	e030      	b.n	8017e38 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017dd6:	693b      	ldr	r3, [r7, #16]
 8017dd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017dda:	693b      	ldr	r3, [r7, #16]
 8017ddc:	899b      	ldrh	r3, [r3, #12]
 8017dde:	089b      	lsrs	r3, r3, #2
 8017de0:	b29b      	uxth	r3, r3
 8017de2:	4619      	mov	r1, r3
 8017de4:	683b      	ldr	r3, [r7, #0]
 8017de6:	fbb3 f3f1 	udiv	r3, r3, r1
 8017dea:	4413      	add	r3, r2
 8017dec:	4619      	mov	r1, r3
 8017dee:	6938      	ldr	r0, [r7, #16]
 8017df0:	f7ff fe96 	bl	8017b20 <move_window>
 8017df4:	4603      	mov	r3, r0
 8017df6:	2b00      	cmp	r3, #0
 8017df8:	d11d      	bne.n	8017e36 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8017dfa:	693b      	ldr	r3, [r7, #16]
 8017dfc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017e00:	683b      	ldr	r3, [r7, #0]
 8017e02:	009b      	lsls	r3, r3, #2
 8017e04:	693a      	ldr	r2, [r7, #16]
 8017e06:	8992      	ldrh	r2, [r2, #12]
 8017e08:	fbb3 f0f2 	udiv	r0, r3, r2
 8017e0c:	fb00 f202 	mul.w	r2, r0, r2
 8017e10:	1a9b      	subs	r3, r3, r2
 8017e12:	440b      	add	r3, r1
 8017e14:	4618      	mov	r0, r3
 8017e16:	f7ff fbeb 	bl	80175f0 <ld_dword>
 8017e1a:	4603      	mov	r3, r0
 8017e1c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8017e20:	617b      	str	r3, [r7, #20]
			break;
 8017e22:	e009      	b.n	8017e38 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8017e24:	2301      	movs	r3, #1
 8017e26:	617b      	str	r3, [r7, #20]
 8017e28:	e006      	b.n	8017e38 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017e2a:	bf00      	nop
 8017e2c:	e004      	b.n	8017e38 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017e2e:	bf00      	nop
 8017e30:	e002      	b.n	8017e38 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8017e32:	bf00      	nop
 8017e34:	e000      	b.n	8017e38 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017e36:	bf00      	nop
		}
	}

	return val;
 8017e38:	697b      	ldr	r3, [r7, #20]
}
 8017e3a:	4618      	mov	r0, r3
 8017e3c:	3718      	adds	r7, #24
 8017e3e:	46bd      	mov	sp, r7
 8017e40:	bd80      	pop	{r7, pc}

08017e42 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8017e42:	b590      	push	{r4, r7, lr}
 8017e44:	b089      	sub	sp, #36	; 0x24
 8017e46:	af00      	add	r7, sp, #0
 8017e48:	60f8      	str	r0, [r7, #12]
 8017e4a:	60b9      	str	r1, [r7, #8]
 8017e4c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8017e4e:	2302      	movs	r3, #2
 8017e50:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8017e52:	68bb      	ldr	r3, [r7, #8]
 8017e54:	2b01      	cmp	r3, #1
 8017e56:	f240 8109 	bls.w	801806c <put_fat+0x22a>
 8017e5a:	68fb      	ldr	r3, [r7, #12]
 8017e5c:	69db      	ldr	r3, [r3, #28]
 8017e5e:	68ba      	ldr	r2, [r7, #8]
 8017e60:	429a      	cmp	r2, r3
 8017e62:	f080 8103 	bcs.w	801806c <put_fat+0x22a>
		switch (fs->fs_type) {
 8017e66:	68fb      	ldr	r3, [r7, #12]
 8017e68:	781b      	ldrb	r3, [r3, #0]
 8017e6a:	2b03      	cmp	r3, #3
 8017e6c:	f000 80b6 	beq.w	8017fdc <put_fat+0x19a>
 8017e70:	2b03      	cmp	r3, #3
 8017e72:	f300 80fb 	bgt.w	801806c <put_fat+0x22a>
 8017e76:	2b01      	cmp	r3, #1
 8017e78:	d003      	beq.n	8017e82 <put_fat+0x40>
 8017e7a:	2b02      	cmp	r3, #2
 8017e7c:	f000 8083 	beq.w	8017f86 <put_fat+0x144>
 8017e80:	e0f4      	b.n	801806c <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8017e82:	68bb      	ldr	r3, [r7, #8]
 8017e84:	61bb      	str	r3, [r7, #24]
 8017e86:	69bb      	ldr	r3, [r7, #24]
 8017e88:	085b      	lsrs	r3, r3, #1
 8017e8a:	69ba      	ldr	r2, [r7, #24]
 8017e8c:	4413      	add	r3, r2
 8017e8e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017e90:	68fb      	ldr	r3, [r7, #12]
 8017e92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017e94:	68fb      	ldr	r3, [r7, #12]
 8017e96:	899b      	ldrh	r3, [r3, #12]
 8017e98:	4619      	mov	r1, r3
 8017e9a:	69bb      	ldr	r3, [r7, #24]
 8017e9c:	fbb3 f3f1 	udiv	r3, r3, r1
 8017ea0:	4413      	add	r3, r2
 8017ea2:	4619      	mov	r1, r3
 8017ea4:	68f8      	ldr	r0, [r7, #12]
 8017ea6:	f7ff fe3b 	bl	8017b20 <move_window>
 8017eaa:	4603      	mov	r3, r0
 8017eac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017eae:	7ffb      	ldrb	r3, [r7, #31]
 8017eb0:	2b00      	cmp	r3, #0
 8017eb2:	f040 80d4 	bne.w	801805e <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8017eb6:	68fb      	ldr	r3, [r7, #12]
 8017eb8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017ebc:	69bb      	ldr	r3, [r7, #24]
 8017ebe:	1c5a      	adds	r2, r3, #1
 8017ec0:	61ba      	str	r2, [r7, #24]
 8017ec2:	68fa      	ldr	r2, [r7, #12]
 8017ec4:	8992      	ldrh	r2, [r2, #12]
 8017ec6:	fbb3 f0f2 	udiv	r0, r3, r2
 8017eca:	fb00 f202 	mul.w	r2, r0, r2
 8017ece:	1a9b      	subs	r3, r3, r2
 8017ed0:	440b      	add	r3, r1
 8017ed2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8017ed4:	68bb      	ldr	r3, [r7, #8]
 8017ed6:	f003 0301 	and.w	r3, r3, #1
 8017eda:	2b00      	cmp	r3, #0
 8017edc:	d00d      	beq.n	8017efa <put_fat+0xb8>
 8017ede:	697b      	ldr	r3, [r7, #20]
 8017ee0:	781b      	ldrb	r3, [r3, #0]
 8017ee2:	b25b      	sxtb	r3, r3
 8017ee4:	f003 030f 	and.w	r3, r3, #15
 8017ee8:	b25a      	sxtb	r2, r3
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	b2db      	uxtb	r3, r3
 8017eee:	011b      	lsls	r3, r3, #4
 8017ef0:	b25b      	sxtb	r3, r3
 8017ef2:	4313      	orrs	r3, r2
 8017ef4:	b25b      	sxtb	r3, r3
 8017ef6:	b2db      	uxtb	r3, r3
 8017ef8:	e001      	b.n	8017efe <put_fat+0xbc>
 8017efa:	687b      	ldr	r3, [r7, #4]
 8017efc:	b2db      	uxtb	r3, r3
 8017efe:	697a      	ldr	r2, [r7, #20]
 8017f00:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8017f02:	68fb      	ldr	r3, [r7, #12]
 8017f04:	2201      	movs	r2, #1
 8017f06:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017f08:	68fb      	ldr	r3, [r7, #12]
 8017f0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017f0c:	68fb      	ldr	r3, [r7, #12]
 8017f0e:	899b      	ldrh	r3, [r3, #12]
 8017f10:	4619      	mov	r1, r3
 8017f12:	69bb      	ldr	r3, [r7, #24]
 8017f14:	fbb3 f3f1 	udiv	r3, r3, r1
 8017f18:	4413      	add	r3, r2
 8017f1a:	4619      	mov	r1, r3
 8017f1c:	68f8      	ldr	r0, [r7, #12]
 8017f1e:	f7ff fdff 	bl	8017b20 <move_window>
 8017f22:	4603      	mov	r3, r0
 8017f24:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017f26:	7ffb      	ldrb	r3, [r7, #31]
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	f040 809a 	bne.w	8018062 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8017f2e:	68fb      	ldr	r3, [r7, #12]
 8017f30:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017f34:	68fb      	ldr	r3, [r7, #12]
 8017f36:	899b      	ldrh	r3, [r3, #12]
 8017f38:	461a      	mov	r2, r3
 8017f3a:	69bb      	ldr	r3, [r7, #24]
 8017f3c:	fbb3 f0f2 	udiv	r0, r3, r2
 8017f40:	fb00 f202 	mul.w	r2, r0, r2
 8017f44:	1a9b      	subs	r3, r3, r2
 8017f46:	440b      	add	r3, r1
 8017f48:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8017f4a:	68bb      	ldr	r3, [r7, #8]
 8017f4c:	f003 0301 	and.w	r3, r3, #1
 8017f50:	2b00      	cmp	r3, #0
 8017f52:	d003      	beq.n	8017f5c <put_fat+0x11a>
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	091b      	lsrs	r3, r3, #4
 8017f58:	b2db      	uxtb	r3, r3
 8017f5a:	e00e      	b.n	8017f7a <put_fat+0x138>
 8017f5c:	697b      	ldr	r3, [r7, #20]
 8017f5e:	781b      	ldrb	r3, [r3, #0]
 8017f60:	b25b      	sxtb	r3, r3
 8017f62:	f023 030f 	bic.w	r3, r3, #15
 8017f66:	b25a      	sxtb	r2, r3
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	0a1b      	lsrs	r3, r3, #8
 8017f6c:	b25b      	sxtb	r3, r3
 8017f6e:	f003 030f 	and.w	r3, r3, #15
 8017f72:	b25b      	sxtb	r3, r3
 8017f74:	4313      	orrs	r3, r2
 8017f76:	b25b      	sxtb	r3, r3
 8017f78:	b2db      	uxtb	r3, r3
 8017f7a:	697a      	ldr	r2, [r7, #20]
 8017f7c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8017f7e:	68fb      	ldr	r3, [r7, #12]
 8017f80:	2201      	movs	r2, #1
 8017f82:	70da      	strb	r2, [r3, #3]
			break;
 8017f84:	e072      	b.n	801806c <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8017f86:	68fb      	ldr	r3, [r7, #12]
 8017f88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017f8a:	68fb      	ldr	r3, [r7, #12]
 8017f8c:	899b      	ldrh	r3, [r3, #12]
 8017f8e:	085b      	lsrs	r3, r3, #1
 8017f90:	b29b      	uxth	r3, r3
 8017f92:	4619      	mov	r1, r3
 8017f94:	68bb      	ldr	r3, [r7, #8]
 8017f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8017f9a:	4413      	add	r3, r2
 8017f9c:	4619      	mov	r1, r3
 8017f9e:	68f8      	ldr	r0, [r7, #12]
 8017fa0:	f7ff fdbe 	bl	8017b20 <move_window>
 8017fa4:	4603      	mov	r3, r0
 8017fa6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017fa8:	7ffb      	ldrb	r3, [r7, #31]
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	d15b      	bne.n	8018066 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8017fae:	68fb      	ldr	r3, [r7, #12]
 8017fb0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017fb4:	68bb      	ldr	r3, [r7, #8]
 8017fb6:	005b      	lsls	r3, r3, #1
 8017fb8:	68fa      	ldr	r2, [r7, #12]
 8017fba:	8992      	ldrh	r2, [r2, #12]
 8017fbc:	fbb3 f0f2 	udiv	r0, r3, r2
 8017fc0:	fb00 f202 	mul.w	r2, r0, r2
 8017fc4:	1a9b      	subs	r3, r3, r2
 8017fc6:	440b      	add	r3, r1
 8017fc8:	687a      	ldr	r2, [r7, #4]
 8017fca:	b292      	uxth	r2, r2
 8017fcc:	4611      	mov	r1, r2
 8017fce:	4618      	mov	r0, r3
 8017fd0:	f7ff fb31 	bl	8017636 <st_word>
			fs->wflag = 1;
 8017fd4:	68fb      	ldr	r3, [r7, #12]
 8017fd6:	2201      	movs	r2, #1
 8017fd8:	70da      	strb	r2, [r3, #3]
			break;
 8017fda:	e047      	b.n	801806c <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8017fdc:	68fb      	ldr	r3, [r7, #12]
 8017fde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017fe0:	68fb      	ldr	r3, [r7, #12]
 8017fe2:	899b      	ldrh	r3, [r3, #12]
 8017fe4:	089b      	lsrs	r3, r3, #2
 8017fe6:	b29b      	uxth	r3, r3
 8017fe8:	4619      	mov	r1, r3
 8017fea:	68bb      	ldr	r3, [r7, #8]
 8017fec:	fbb3 f3f1 	udiv	r3, r3, r1
 8017ff0:	4413      	add	r3, r2
 8017ff2:	4619      	mov	r1, r3
 8017ff4:	68f8      	ldr	r0, [r7, #12]
 8017ff6:	f7ff fd93 	bl	8017b20 <move_window>
 8017ffa:	4603      	mov	r3, r0
 8017ffc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017ffe:	7ffb      	ldrb	r3, [r7, #31]
 8018000:	2b00      	cmp	r3, #0
 8018002:	d132      	bne.n	801806a <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801800a:	68fb      	ldr	r3, [r7, #12]
 801800c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8018010:	68bb      	ldr	r3, [r7, #8]
 8018012:	009b      	lsls	r3, r3, #2
 8018014:	68fa      	ldr	r2, [r7, #12]
 8018016:	8992      	ldrh	r2, [r2, #12]
 8018018:	fbb3 f0f2 	udiv	r0, r3, r2
 801801c:	fb00 f202 	mul.w	r2, r0, r2
 8018020:	1a9b      	subs	r3, r3, r2
 8018022:	440b      	add	r3, r1
 8018024:	4618      	mov	r0, r3
 8018026:	f7ff fae3 	bl	80175f0 <ld_dword>
 801802a:	4603      	mov	r3, r0
 801802c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8018030:	4323      	orrs	r3, r4
 8018032:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8018034:	68fb      	ldr	r3, [r7, #12]
 8018036:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801803a:	68bb      	ldr	r3, [r7, #8]
 801803c:	009b      	lsls	r3, r3, #2
 801803e:	68fa      	ldr	r2, [r7, #12]
 8018040:	8992      	ldrh	r2, [r2, #12]
 8018042:	fbb3 f0f2 	udiv	r0, r3, r2
 8018046:	fb00 f202 	mul.w	r2, r0, r2
 801804a:	1a9b      	subs	r3, r3, r2
 801804c:	440b      	add	r3, r1
 801804e:	6879      	ldr	r1, [r7, #4]
 8018050:	4618      	mov	r0, r3
 8018052:	f7ff fb0b 	bl	801766c <st_dword>
			fs->wflag = 1;
 8018056:	68fb      	ldr	r3, [r7, #12]
 8018058:	2201      	movs	r2, #1
 801805a:	70da      	strb	r2, [r3, #3]
			break;
 801805c:	e006      	b.n	801806c <put_fat+0x22a>
			if (res != FR_OK) break;
 801805e:	bf00      	nop
 8018060:	e004      	b.n	801806c <put_fat+0x22a>
			if (res != FR_OK) break;
 8018062:	bf00      	nop
 8018064:	e002      	b.n	801806c <put_fat+0x22a>
			if (res != FR_OK) break;
 8018066:	bf00      	nop
 8018068:	e000      	b.n	801806c <put_fat+0x22a>
			if (res != FR_OK) break;
 801806a:	bf00      	nop
		}
	}
	return res;
 801806c:	7ffb      	ldrb	r3, [r7, #31]
}
 801806e:	4618      	mov	r0, r3
 8018070:	3724      	adds	r7, #36	; 0x24
 8018072:	46bd      	mov	sp, r7
 8018074:	bd90      	pop	{r4, r7, pc}

08018076 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8018076:	b580      	push	{r7, lr}
 8018078:	b088      	sub	sp, #32
 801807a:	af00      	add	r7, sp, #0
 801807c:	60f8      	str	r0, [r7, #12]
 801807e:	60b9      	str	r1, [r7, #8]
 8018080:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8018082:	2300      	movs	r3, #0
 8018084:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8018086:	68fb      	ldr	r3, [r7, #12]
 8018088:	681b      	ldr	r3, [r3, #0]
 801808a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801808c:	68bb      	ldr	r3, [r7, #8]
 801808e:	2b01      	cmp	r3, #1
 8018090:	d904      	bls.n	801809c <remove_chain+0x26>
 8018092:	69bb      	ldr	r3, [r7, #24]
 8018094:	69db      	ldr	r3, [r3, #28]
 8018096:	68ba      	ldr	r2, [r7, #8]
 8018098:	429a      	cmp	r2, r3
 801809a:	d301      	bcc.n	80180a0 <remove_chain+0x2a>
 801809c:	2302      	movs	r3, #2
 801809e:	e04b      	b.n	8018138 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	2b00      	cmp	r3, #0
 80180a4:	d00c      	beq.n	80180c0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80180a6:	f04f 32ff 	mov.w	r2, #4294967295
 80180aa:	6879      	ldr	r1, [r7, #4]
 80180ac:	69b8      	ldr	r0, [r7, #24]
 80180ae:	f7ff fec8 	bl	8017e42 <put_fat>
 80180b2:	4603      	mov	r3, r0
 80180b4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80180b6:	7ffb      	ldrb	r3, [r7, #31]
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	d001      	beq.n	80180c0 <remove_chain+0x4a>
 80180bc:	7ffb      	ldrb	r3, [r7, #31]
 80180be:	e03b      	b.n	8018138 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80180c0:	68b9      	ldr	r1, [r7, #8]
 80180c2:	68f8      	ldr	r0, [r7, #12]
 80180c4:	f7ff fde9 	bl	8017c9a <get_fat>
 80180c8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80180ca:	697b      	ldr	r3, [r7, #20]
 80180cc:	2b00      	cmp	r3, #0
 80180ce:	d031      	beq.n	8018134 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80180d0:	697b      	ldr	r3, [r7, #20]
 80180d2:	2b01      	cmp	r3, #1
 80180d4:	d101      	bne.n	80180da <remove_chain+0x64>
 80180d6:	2302      	movs	r3, #2
 80180d8:	e02e      	b.n	8018138 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80180da:	697b      	ldr	r3, [r7, #20]
 80180dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80180e0:	d101      	bne.n	80180e6 <remove_chain+0x70>
 80180e2:	2301      	movs	r3, #1
 80180e4:	e028      	b.n	8018138 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80180e6:	2200      	movs	r2, #0
 80180e8:	68b9      	ldr	r1, [r7, #8]
 80180ea:	69b8      	ldr	r0, [r7, #24]
 80180ec:	f7ff fea9 	bl	8017e42 <put_fat>
 80180f0:	4603      	mov	r3, r0
 80180f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80180f4:	7ffb      	ldrb	r3, [r7, #31]
 80180f6:	2b00      	cmp	r3, #0
 80180f8:	d001      	beq.n	80180fe <remove_chain+0x88>
 80180fa:	7ffb      	ldrb	r3, [r7, #31]
 80180fc:	e01c      	b.n	8018138 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80180fe:	69bb      	ldr	r3, [r7, #24]
 8018100:	699a      	ldr	r2, [r3, #24]
 8018102:	69bb      	ldr	r3, [r7, #24]
 8018104:	69db      	ldr	r3, [r3, #28]
 8018106:	3b02      	subs	r3, #2
 8018108:	429a      	cmp	r2, r3
 801810a:	d20b      	bcs.n	8018124 <remove_chain+0xae>
			fs->free_clst++;
 801810c:	69bb      	ldr	r3, [r7, #24]
 801810e:	699b      	ldr	r3, [r3, #24]
 8018110:	1c5a      	adds	r2, r3, #1
 8018112:	69bb      	ldr	r3, [r7, #24]
 8018114:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8018116:	69bb      	ldr	r3, [r7, #24]
 8018118:	791b      	ldrb	r3, [r3, #4]
 801811a:	f043 0301 	orr.w	r3, r3, #1
 801811e:	b2da      	uxtb	r2, r3
 8018120:	69bb      	ldr	r3, [r7, #24]
 8018122:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8018124:	697b      	ldr	r3, [r7, #20]
 8018126:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8018128:	69bb      	ldr	r3, [r7, #24]
 801812a:	69db      	ldr	r3, [r3, #28]
 801812c:	68ba      	ldr	r2, [r7, #8]
 801812e:	429a      	cmp	r2, r3
 8018130:	d3c6      	bcc.n	80180c0 <remove_chain+0x4a>
 8018132:	e000      	b.n	8018136 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8018134:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8018136:	2300      	movs	r3, #0
}
 8018138:	4618      	mov	r0, r3
 801813a:	3720      	adds	r7, #32
 801813c:	46bd      	mov	sp, r7
 801813e:	bd80      	pop	{r7, pc}

08018140 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8018140:	b580      	push	{r7, lr}
 8018142:	b088      	sub	sp, #32
 8018144:	af00      	add	r7, sp, #0
 8018146:	6078      	str	r0, [r7, #4]
 8018148:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801814a:	687b      	ldr	r3, [r7, #4]
 801814c:	681b      	ldr	r3, [r3, #0]
 801814e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8018150:	683b      	ldr	r3, [r7, #0]
 8018152:	2b00      	cmp	r3, #0
 8018154:	d10d      	bne.n	8018172 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8018156:	693b      	ldr	r3, [r7, #16]
 8018158:	695b      	ldr	r3, [r3, #20]
 801815a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801815c:	69bb      	ldr	r3, [r7, #24]
 801815e:	2b00      	cmp	r3, #0
 8018160:	d004      	beq.n	801816c <create_chain+0x2c>
 8018162:	693b      	ldr	r3, [r7, #16]
 8018164:	69db      	ldr	r3, [r3, #28]
 8018166:	69ba      	ldr	r2, [r7, #24]
 8018168:	429a      	cmp	r2, r3
 801816a:	d31b      	bcc.n	80181a4 <create_chain+0x64>
 801816c:	2301      	movs	r3, #1
 801816e:	61bb      	str	r3, [r7, #24]
 8018170:	e018      	b.n	80181a4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8018172:	6839      	ldr	r1, [r7, #0]
 8018174:	6878      	ldr	r0, [r7, #4]
 8018176:	f7ff fd90 	bl	8017c9a <get_fat>
 801817a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801817c:	68fb      	ldr	r3, [r7, #12]
 801817e:	2b01      	cmp	r3, #1
 8018180:	d801      	bhi.n	8018186 <create_chain+0x46>
 8018182:	2301      	movs	r3, #1
 8018184:	e070      	b.n	8018268 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8018186:	68fb      	ldr	r3, [r7, #12]
 8018188:	f1b3 3fff 	cmp.w	r3, #4294967295
 801818c:	d101      	bne.n	8018192 <create_chain+0x52>
 801818e:	68fb      	ldr	r3, [r7, #12]
 8018190:	e06a      	b.n	8018268 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8018192:	693b      	ldr	r3, [r7, #16]
 8018194:	69db      	ldr	r3, [r3, #28]
 8018196:	68fa      	ldr	r2, [r7, #12]
 8018198:	429a      	cmp	r2, r3
 801819a:	d201      	bcs.n	80181a0 <create_chain+0x60>
 801819c:	68fb      	ldr	r3, [r7, #12]
 801819e:	e063      	b.n	8018268 <create_chain+0x128>
		scl = clst;
 80181a0:	683b      	ldr	r3, [r7, #0]
 80181a2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80181a4:	69bb      	ldr	r3, [r7, #24]
 80181a6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80181a8:	69fb      	ldr	r3, [r7, #28]
 80181aa:	3301      	adds	r3, #1
 80181ac:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80181ae:	693b      	ldr	r3, [r7, #16]
 80181b0:	69db      	ldr	r3, [r3, #28]
 80181b2:	69fa      	ldr	r2, [r7, #28]
 80181b4:	429a      	cmp	r2, r3
 80181b6:	d307      	bcc.n	80181c8 <create_chain+0x88>
				ncl = 2;
 80181b8:	2302      	movs	r3, #2
 80181ba:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80181bc:	69fa      	ldr	r2, [r7, #28]
 80181be:	69bb      	ldr	r3, [r7, #24]
 80181c0:	429a      	cmp	r2, r3
 80181c2:	d901      	bls.n	80181c8 <create_chain+0x88>
 80181c4:	2300      	movs	r3, #0
 80181c6:	e04f      	b.n	8018268 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80181c8:	69f9      	ldr	r1, [r7, #28]
 80181ca:	6878      	ldr	r0, [r7, #4]
 80181cc:	f7ff fd65 	bl	8017c9a <get_fat>
 80181d0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80181d2:	68fb      	ldr	r3, [r7, #12]
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	d00e      	beq.n	80181f6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80181d8:	68fb      	ldr	r3, [r7, #12]
 80181da:	2b01      	cmp	r3, #1
 80181dc:	d003      	beq.n	80181e6 <create_chain+0xa6>
 80181de:	68fb      	ldr	r3, [r7, #12]
 80181e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80181e4:	d101      	bne.n	80181ea <create_chain+0xaa>
 80181e6:	68fb      	ldr	r3, [r7, #12]
 80181e8:	e03e      	b.n	8018268 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80181ea:	69fa      	ldr	r2, [r7, #28]
 80181ec:	69bb      	ldr	r3, [r7, #24]
 80181ee:	429a      	cmp	r2, r3
 80181f0:	d1da      	bne.n	80181a8 <create_chain+0x68>
 80181f2:	2300      	movs	r3, #0
 80181f4:	e038      	b.n	8018268 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80181f6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80181f8:	f04f 32ff 	mov.w	r2, #4294967295
 80181fc:	69f9      	ldr	r1, [r7, #28]
 80181fe:	6938      	ldr	r0, [r7, #16]
 8018200:	f7ff fe1f 	bl	8017e42 <put_fat>
 8018204:	4603      	mov	r3, r0
 8018206:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8018208:	7dfb      	ldrb	r3, [r7, #23]
 801820a:	2b00      	cmp	r3, #0
 801820c:	d109      	bne.n	8018222 <create_chain+0xe2>
 801820e:	683b      	ldr	r3, [r7, #0]
 8018210:	2b00      	cmp	r3, #0
 8018212:	d006      	beq.n	8018222 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8018214:	69fa      	ldr	r2, [r7, #28]
 8018216:	6839      	ldr	r1, [r7, #0]
 8018218:	6938      	ldr	r0, [r7, #16]
 801821a:	f7ff fe12 	bl	8017e42 <put_fat>
 801821e:	4603      	mov	r3, r0
 8018220:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8018222:	7dfb      	ldrb	r3, [r7, #23]
 8018224:	2b00      	cmp	r3, #0
 8018226:	d116      	bne.n	8018256 <create_chain+0x116>
		fs->last_clst = ncl;
 8018228:	693b      	ldr	r3, [r7, #16]
 801822a:	69fa      	ldr	r2, [r7, #28]
 801822c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801822e:	693b      	ldr	r3, [r7, #16]
 8018230:	699a      	ldr	r2, [r3, #24]
 8018232:	693b      	ldr	r3, [r7, #16]
 8018234:	69db      	ldr	r3, [r3, #28]
 8018236:	3b02      	subs	r3, #2
 8018238:	429a      	cmp	r2, r3
 801823a:	d804      	bhi.n	8018246 <create_chain+0x106>
 801823c:	693b      	ldr	r3, [r7, #16]
 801823e:	699b      	ldr	r3, [r3, #24]
 8018240:	1e5a      	subs	r2, r3, #1
 8018242:	693b      	ldr	r3, [r7, #16]
 8018244:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8018246:	693b      	ldr	r3, [r7, #16]
 8018248:	791b      	ldrb	r3, [r3, #4]
 801824a:	f043 0301 	orr.w	r3, r3, #1
 801824e:	b2da      	uxtb	r2, r3
 8018250:	693b      	ldr	r3, [r7, #16]
 8018252:	711a      	strb	r2, [r3, #4]
 8018254:	e007      	b.n	8018266 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8018256:	7dfb      	ldrb	r3, [r7, #23]
 8018258:	2b01      	cmp	r3, #1
 801825a:	d102      	bne.n	8018262 <create_chain+0x122>
 801825c:	f04f 33ff 	mov.w	r3, #4294967295
 8018260:	e000      	b.n	8018264 <create_chain+0x124>
 8018262:	2301      	movs	r3, #1
 8018264:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8018266:	69fb      	ldr	r3, [r7, #28]
}
 8018268:	4618      	mov	r0, r3
 801826a:	3720      	adds	r7, #32
 801826c:	46bd      	mov	sp, r7
 801826e:	bd80      	pop	{r7, pc}

08018270 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8018270:	b480      	push	{r7}
 8018272:	b087      	sub	sp, #28
 8018274:	af00      	add	r7, sp, #0
 8018276:	6078      	str	r0, [r7, #4]
 8018278:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	681b      	ldr	r3, [r3, #0]
 801827e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018284:	3304      	adds	r3, #4
 8018286:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8018288:	68fb      	ldr	r3, [r7, #12]
 801828a:	899b      	ldrh	r3, [r3, #12]
 801828c:	461a      	mov	r2, r3
 801828e:	683b      	ldr	r3, [r7, #0]
 8018290:	fbb3 f3f2 	udiv	r3, r3, r2
 8018294:	68fa      	ldr	r2, [r7, #12]
 8018296:	8952      	ldrh	r2, [r2, #10]
 8018298:	fbb3 f3f2 	udiv	r3, r3, r2
 801829c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801829e:	693b      	ldr	r3, [r7, #16]
 80182a0:	1d1a      	adds	r2, r3, #4
 80182a2:	613a      	str	r2, [r7, #16]
 80182a4:	681b      	ldr	r3, [r3, #0]
 80182a6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80182a8:	68bb      	ldr	r3, [r7, #8]
 80182aa:	2b00      	cmp	r3, #0
 80182ac:	d101      	bne.n	80182b2 <clmt_clust+0x42>
 80182ae:	2300      	movs	r3, #0
 80182b0:	e010      	b.n	80182d4 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80182b2:	697a      	ldr	r2, [r7, #20]
 80182b4:	68bb      	ldr	r3, [r7, #8]
 80182b6:	429a      	cmp	r2, r3
 80182b8:	d307      	bcc.n	80182ca <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80182ba:	697a      	ldr	r2, [r7, #20]
 80182bc:	68bb      	ldr	r3, [r7, #8]
 80182be:	1ad3      	subs	r3, r2, r3
 80182c0:	617b      	str	r3, [r7, #20]
 80182c2:	693b      	ldr	r3, [r7, #16]
 80182c4:	3304      	adds	r3, #4
 80182c6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80182c8:	e7e9      	b.n	801829e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80182ca:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80182cc:	693b      	ldr	r3, [r7, #16]
 80182ce:	681a      	ldr	r2, [r3, #0]
 80182d0:	697b      	ldr	r3, [r7, #20]
 80182d2:	4413      	add	r3, r2
}
 80182d4:	4618      	mov	r0, r3
 80182d6:	371c      	adds	r7, #28
 80182d8:	46bd      	mov	sp, r7
 80182da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182de:	4770      	bx	lr

080182e0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80182e0:	b580      	push	{r7, lr}
 80182e2:	b086      	sub	sp, #24
 80182e4:	af00      	add	r7, sp, #0
 80182e6:	6078      	str	r0, [r7, #4]
 80182e8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	681b      	ldr	r3, [r3, #0]
 80182ee:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80182f0:	683b      	ldr	r3, [r7, #0]
 80182f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80182f6:	d204      	bcs.n	8018302 <dir_sdi+0x22>
 80182f8:	683b      	ldr	r3, [r7, #0]
 80182fa:	f003 031f 	and.w	r3, r3, #31
 80182fe:	2b00      	cmp	r3, #0
 8018300:	d001      	beq.n	8018306 <dir_sdi+0x26>
		return FR_INT_ERR;
 8018302:	2302      	movs	r3, #2
 8018304:	e071      	b.n	80183ea <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8018306:	687b      	ldr	r3, [r7, #4]
 8018308:	683a      	ldr	r2, [r7, #0]
 801830a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	689b      	ldr	r3, [r3, #8]
 8018310:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8018312:	697b      	ldr	r3, [r7, #20]
 8018314:	2b00      	cmp	r3, #0
 8018316:	d106      	bne.n	8018326 <dir_sdi+0x46>
 8018318:	693b      	ldr	r3, [r7, #16]
 801831a:	781b      	ldrb	r3, [r3, #0]
 801831c:	2b02      	cmp	r3, #2
 801831e:	d902      	bls.n	8018326 <dir_sdi+0x46>
		clst = fs->dirbase;
 8018320:	693b      	ldr	r3, [r7, #16]
 8018322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018324:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8018326:	697b      	ldr	r3, [r7, #20]
 8018328:	2b00      	cmp	r3, #0
 801832a:	d10c      	bne.n	8018346 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801832c:	683b      	ldr	r3, [r7, #0]
 801832e:	095b      	lsrs	r3, r3, #5
 8018330:	693a      	ldr	r2, [r7, #16]
 8018332:	8912      	ldrh	r2, [r2, #8]
 8018334:	4293      	cmp	r3, r2
 8018336:	d301      	bcc.n	801833c <dir_sdi+0x5c>
 8018338:	2302      	movs	r3, #2
 801833a:	e056      	b.n	80183ea <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801833c:	693b      	ldr	r3, [r7, #16]
 801833e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	61da      	str	r2, [r3, #28]
 8018344:	e02d      	b.n	80183a2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8018346:	693b      	ldr	r3, [r7, #16]
 8018348:	895b      	ldrh	r3, [r3, #10]
 801834a:	461a      	mov	r2, r3
 801834c:	693b      	ldr	r3, [r7, #16]
 801834e:	899b      	ldrh	r3, [r3, #12]
 8018350:	fb02 f303 	mul.w	r3, r2, r3
 8018354:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8018356:	e019      	b.n	801838c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	6979      	ldr	r1, [r7, #20]
 801835c:	4618      	mov	r0, r3
 801835e:	f7ff fc9c 	bl	8017c9a <get_fat>
 8018362:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8018364:	697b      	ldr	r3, [r7, #20]
 8018366:	f1b3 3fff 	cmp.w	r3, #4294967295
 801836a:	d101      	bne.n	8018370 <dir_sdi+0x90>
 801836c:	2301      	movs	r3, #1
 801836e:	e03c      	b.n	80183ea <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8018370:	697b      	ldr	r3, [r7, #20]
 8018372:	2b01      	cmp	r3, #1
 8018374:	d904      	bls.n	8018380 <dir_sdi+0xa0>
 8018376:	693b      	ldr	r3, [r7, #16]
 8018378:	69db      	ldr	r3, [r3, #28]
 801837a:	697a      	ldr	r2, [r7, #20]
 801837c:	429a      	cmp	r2, r3
 801837e:	d301      	bcc.n	8018384 <dir_sdi+0xa4>
 8018380:	2302      	movs	r3, #2
 8018382:	e032      	b.n	80183ea <dir_sdi+0x10a>
			ofs -= csz;
 8018384:	683a      	ldr	r2, [r7, #0]
 8018386:	68fb      	ldr	r3, [r7, #12]
 8018388:	1ad3      	subs	r3, r2, r3
 801838a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801838c:	683a      	ldr	r2, [r7, #0]
 801838e:	68fb      	ldr	r3, [r7, #12]
 8018390:	429a      	cmp	r2, r3
 8018392:	d2e1      	bcs.n	8018358 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8018394:	6979      	ldr	r1, [r7, #20]
 8018396:	6938      	ldr	r0, [r7, #16]
 8018398:	f7ff fc60 	bl	8017c5c <clust2sect>
 801839c:	4602      	mov	r2, r0
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	697a      	ldr	r2, [r7, #20]
 80183a6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	69db      	ldr	r3, [r3, #28]
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	d101      	bne.n	80183b4 <dir_sdi+0xd4>
 80183b0:	2302      	movs	r3, #2
 80183b2:	e01a      	b.n	80183ea <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	69da      	ldr	r2, [r3, #28]
 80183b8:	693b      	ldr	r3, [r7, #16]
 80183ba:	899b      	ldrh	r3, [r3, #12]
 80183bc:	4619      	mov	r1, r3
 80183be:	683b      	ldr	r3, [r7, #0]
 80183c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80183c4:	441a      	add	r2, r3
 80183c6:	687b      	ldr	r3, [r7, #4]
 80183c8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80183ca:	693b      	ldr	r3, [r7, #16]
 80183cc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80183d0:	693b      	ldr	r3, [r7, #16]
 80183d2:	899b      	ldrh	r3, [r3, #12]
 80183d4:	461a      	mov	r2, r3
 80183d6:	683b      	ldr	r3, [r7, #0]
 80183d8:	fbb3 f0f2 	udiv	r0, r3, r2
 80183dc:	fb00 f202 	mul.w	r2, r0, r2
 80183e0:	1a9b      	subs	r3, r3, r2
 80183e2:	18ca      	adds	r2, r1, r3
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80183e8:	2300      	movs	r3, #0
}
 80183ea:	4618      	mov	r0, r3
 80183ec:	3718      	adds	r7, #24
 80183ee:	46bd      	mov	sp, r7
 80183f0:	bd80      	pop	{r7, pc}

080183f2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80183f2:	b580      	push	{r7, lr}
 80183f4:	b086      	sub	sp, #24
 80183f6:	af00      	add	r7, sp, #0
 80183f8:	6078      	str	r0, [r7, #4]
 80183fa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	681b      	ldr	r3, [r3, #0]
 8018400:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8018402:	687b      	ldr	r3, [r7, #4]
 8018404:	695b      	ldr	r3, [r3, #20]
 8018406:	3320      	adds	r3, #32
 8018408:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	69db      	ldr	r3, [r3, #28]
 801840e:	2b00      	cmp	r3, #0
 8018410:	d003      	beq.n	801841a <dir_next+0x28>
 8018412:	68bb      	ldr	r3, [r7, #8]
 8018414:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8018418:	d301      	bcc.n	801841e <dir_next+0x2c>
 801841a:	2304      	movs	r3, #4
 801841c:	e0bb      	b.n	8018596 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801841e:	68fb      	ldr	r3, [r7, #12]
 8018420:	899b      	ldrh	r3, [r3, #12]
 8018422:	461a      	mov	r2, r3
 8018424:	68bb      	ldr	r3, [r7, #8]
 8018426:	fbb3 f1f2 	udiv	r1, r3, r2
 801842a:	fb01 f202 	mul.w	r2, r1, r2
 801842e:	1a9b      	subs	r3, r3, r2
 8018430:	2b00      	cmp	r3, #0
 8018432:	f040 809d 	bne.w	8018570 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8018436:	687b      	ldr	r3, [r7, #4]
 8018438:	69db      	ldr	r3, [r3, #28]
 801843a:	1c5a      	adds	r2, r3, #1
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	699b      	ldr	r3, [r3, #24]
 8018444:	2b00      	cmp	r3, #0
 8018446:	d10b      	bne.n	8018460 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8018448:	68bb      	ldr	r3, [r7, #8]
 801844a:	095b      	lsrs	r3, r3, #5
 801844c:	68fa      	ldr	r2, [r7, #12]
 801844e:	8912      	ldrh	r2, [r2, #8]
 8018450:	4293      	cmp	r3, r2
 8018452:	f0c0 808d 	bcc.w	8018570 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	2200      	movs	r2, #0
 801845a:	61da      	str	r2, [r3, #28]
 801845c:	2304      	movs	r3, #4
 801845e:	e09a      	b.n	8018596 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8018460:	68fb      	ldr	r3, [r7, #12]
 8018462:	899b      	ldrh	r3, [r3, #12]
 8018464:	461a      	mov	r2, r3
 8018466:	68bb      	ldr	r3, [r7, #8]
 8018468:	fbb3 f3f2 	udiv	r3, r3, r2
 801846c:	68fa      	ldr	r2, [r7, #12]
 801846e:	8952      	ldrh	r2, [r2, #10]
 8018470:	3a01      	subs	r2, #1
 8018472:	4013      	ands	r3, r2
 8018474:	2b00      	cmp	r3, #0
 8018476:	d17b      	bne.n	8018570 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8018478:	687a      	ldr	r2, [r7, #4]
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	699b      	ldr	r3, [r3, #24]
 801847e:	4619      	mov	r1, r3
 8018480:	4610      	mov	r0, r2
 8018482:	f7ff fc0a 	bl	8017c9a <get_fat>
 8018486:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8018488:	697b      	ldr	r3, [r7, #20]
 801848a:	2b01      	cmp	r3, #1
 801848c:	d801      	bhi.n	8018492 <dir_next+0xa0>
 801848e:	2302      	movs	r3, #2
 8018490:	e081      	b.n	8018596 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8018492:	697b      	ldr	r3, [r7, #20]
 8018494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018498:	d101      	bne.n	801849e <dir_next+0xac>
 801849a:	2301      	movs	r3, #1
 801849c:	e07b      	b.n	8018596 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801849e:	68fb      	ldr	r3, [r7, #12]
 80184a0:	69db      	ldr	r3, [r3, #28]
 80184a2:	697a      	ldr	r2, [r7, #20]
 80184a4:	429a      	cmp	r2, r3
 80184a6:	d359      	bcc.n	801855c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80184a8:	683b      	ldr	r3, [r7, #0]
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d104      	bne.n	80184b8 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80184ae:	687b      	ldr	r3, [r7, #4]
 80184b0:	2200      	movs	r2, #0
 80184b2:	61da      	str	r2, [r3, #28]
 80184b4:	2304      	movs	r3, #4
 80184b6:	e06e      	b.n	8018596 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80184b8:	687a      	ldr	r2, [r7, #4]
 80184ba:	687b      	ldr	r3, [r7, #4]
 80184bc:	699b      	ldr	r3, [r3, #24]
 80184be:	4619      	mov	r1, r3
 80184c0:	4610      	mov	r0, r2
 80184c2:	f7ff fe3d 	bl	8018140 <create_chain>
 80184c6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80184c8:	697b      	ldr	r3, [r7, #20]
 80184ca:	2b00      	cmp	r3, #0
 80184cc:	d101      	bne.n	80184d2 <dir_next+0xe0>
 80184ce:	2307      	movs	r3, #7
 80184d0:	e061      	b.n	8018596 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80184d2:	697b      	ldr	r3, [r7, #20]
 80184d4:	2b01      	cmp	r3, #1
 80184d6:	d101      	bne.n	80184dc <dir_next+0xea>
 80184d8:	2302      	movs	r3, #2
 80184da:	e05c      	b.n	8018596 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80184dc:	697b      	ldr	r3, [r7, #20]
 80184de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80184e2:	d101      	bne.n	80184e8 <dir_next+0xf6>
 80184e4:	2301      	movs	r3, #1
 80184e6:	e056      	b.n	8018596 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80184e8:	68f8      	ldr	r0, [r7, #12]
 80184ea:	f7ff fad5 	bl	8017a98 <sync_window>
 80184ee:	4603      	mov	r3, r0
 80184f0:	2b00      	cmp	r3, #0
 80184f2:	d001      	beq.n	80184f8 <dir_next+0x106>
 80184f4:	2301      	movs	r3, #1
 80184f6:	e04e      	b.n	8018596 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80184f8:	68fb      	ldr	r3, [r7, #12]
 80184fa:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80184fe:	68fb      	ldr	r3, [r7, #12]
 8018500:	899b      	ldrh	r3, [r3, #12]
 8018502:	461a      	mov	r2, r3
 8018504:	2100      	movs	r1, #0
 8018506:	f7ff f8fe 	bl	8017706 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801850a:	2300      	movs	r3, #0
 801850c:	613b      	str	r3, [r7, #16]
 801850e:	6979      	ldr	r1, [r7, #20]
 8018510:	68f8      	ldr	r0, [r7, #12]
 8018512:	f7ff fba3 	bl	8017c5c <clust2sect>
 8018516:	4602      	mov	r2, r0
 8018518:	68fb      	ldr	r3, [r7, #12]
 801851a:	635a      	str	r2, [r3, #52]	; 0x34
 801851c:	e012      	b.n	8018544 <dir_next+0x152>
						fs->wflag = 1;
 801851e:	68fb      	ldr	r3, [r7, #12]
 8018520:	2201      	movs	r2, #1
 8018522:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8018524:	68f8      	ldr	r0, [r7, #12]
 8018526:	f7ff fab7 	bl	8017a98 <sync_window>
 801852a:	4603      	mov	r3, r0
 801852c:	2b00      	cmp	r3, #0
 801852e:	d001      	beq.n	8018534 <dir_next+0x142>
 8018530:	2301      	movs	r3, #1
 8018532:	e030      	b.n	8018596 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8018534:	693b      	ldr	r3, [r7, #16]
 8018536:	3301      	adds	r3, #1
 8018538:	613b      	str	r3, [r7, #16]
 801853a:	68fb      	ldr	r3, [r7, #12]
 801853c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801853e:	1c5a      	adds	r2, r3, #1
 8018540:	68fb      	ldr	r3, [r7, #12]
 8018542:	635a      	str	r2, [r3, #52]	; 0x34
 8018544:	68fb      	ldr	r3, [r7, #12]
 8018546:	895b      	ldrh	r3, [r3, #10]
 8018548:	461a      	mov	r2, r3
 801854a:	693b      	ldr	r3, [r7, #16]
 801854c:	4293      	cmp	r3, r2
 801854e:	d3e6      	bcc.n	801851e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8018550:	68fb      	ldr	r3, [r7, #12]
 8018552:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8018554:	693b      	ldr	r3, [r7, #16]
 8018556:	1ad2      	subs	r2, r2, r3
 8018558:	68fb      	ldr	r3, [r7, #12]
 801855a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	697a      	ldr	r2, [r7, #20]
 8018560:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8018562:	6979      	ldr	r1, [r7, #20]
 8018564:	68f8      	ldr	r0, [r7, #12]
 8018566:	f7ff fb79 	bl	8017c5c <clust2sect>
 801856a:	4602      	mov	r2, r0
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	68ba      	ldr	r2, [r7, #8]
 8018574:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8018576:	68fb      	ldr	r3, [r7, #12]
 8018578:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801857c:	68fb      	ldr	r3, [r7, #12]
 801857e:	899b      	ldrh	r3, [r3, #12]
 8018580:	461a      	mov	r2, r3
 8018582:	68bb      	ldr	r3, [r7, #8]
 8018584:	fbb3 f0f2 	udiv	r0, r3, r2
 8018588:	fb00 f202 	mul.w	r2, r0, r2
 801858c:	1a9b      	subs	r3, r3, r2
 801858e:	18ca      	adds	r2, r1, r3
 8018590:	687b      	ldr	r3, [r7, #4]
 8018592:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8018594:	2300      	movs	r3, #0
}
 8018596:	4618      	mov	r0, r3
 8018598:	3718      	adds	r7, #24
 801859a:	46bd      	mov	sp, r7
 801859c:	bd80      	pop	{r7, pc}

0801859e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801859e:	b580      	push	{r7, lr}
 80185a0:	b086      	sub	sp, #24
 80185a2:	af00      	add	r7, sp, #0
 80185a4:	6078      	str	r0, [r7, #4]
 80185a6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80185a8:	687b      	ldr	r3, [r7, #4]
 80185aa:	681b      	ldr	r3, [r3, #0]
 80185ac:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80185ae:	2100      	movs	r1, #0
 80185b0:	6878      	ldr	r0, [r7, #4]
 80185b2:	f7ff fe95 	bl	80182e0 <dir_sdi>
 80185b6:	4603      	mov	r3, r0
 80185b8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80185ba:	7dfb      	ldrb	r3, [r7, #23]
 80185bc:	2b00      	cmp	r3, #0
 80185be:	d12b      	bne.n	8018618 <dir_alloc+0x7a>
		n = 0;
 80185c0:	2300      	movs	r3, #0
 80185c2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	69db      	ldr	r3, [r3, #28]
 80185c8:	4619      	mov	r1, r3
 80185ca:	68f8      	ldr	r0, [r7, #12]
 80185cc:	f7ff faa8 	bl	8017b20 <move_window>
 80185d0:	4603      	mov	r3, r0
 80185d2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80185d4:	7dfb      	ldrb	r3, [r7, #23]
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	d11d      	bne.n	8018616 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	6a1b      	ldr	r3, [r3, #32]
 80185de:	781b      	ldrb	r3, [r3, #0]
 80185e0:	2be5      	cmp	r3, #229	; 0xe5
 80185e2:	d004      	beq.n	80185ee <dir_alloc+0x50>
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	6a1b      	ldr	r3, [r3, #32]
 80185e8:	781b      	ldrb	r3, [r3, #0]
 80185ea:	2b00      	cmp	r3, #0
 80185ec:	d107      	bne.n	80185fe <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80185ee:	693b      	ldr	r3, [r7, #16]
 80185f0:	3301      	adds	r3, #1
 80185f2:	613b      	str	r3, [r7, #16]
 80185f4:	693a      	ldr	r2, [r7, #16]
 80185f6:	683b      	ldr	r3, [r7, #0]
 80185f8:	429a      	cmp	r2, r3
 80185fa:	d102      	bne.n	8018602 <dir_alloc+0x64>
 80185fc:	e00c      	b.n	8018618 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80185fe:	2300      	movs	r3, #0
 8018600:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8018602:	2101      	movs	r1, #1
 8018604:	6878      	ldr	r0, [r7, #4]
 8018606:	f7ff fef4 	bl	80183f2 <dir_next>
 801860a:	4603      	mov	r3, r0
 801860c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801860e:	7dfb      	ldrb	r3, [r7, #23]
 8018610:	2b00      	cmp	r3, #0
 8018612:	d0d7      	beq.n	80185c4 <dir_alloc+0x26>
 8018614:	e000      	b.n	8018618 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8018616:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8018618:	7dfb      	ldrb	r3, [r7, #23]
 801861a:	2b04      	cmp	r3, #4
 801861c:	d101      	bne.n	8018622 <dir_alloc+0x84>
 801861e:	2307      	movs	r3, #7
 8018620:	75fb      	strb	r3, [r7, #23]
	return res;
 8018622:	7dfb      	ldrb	r3, [r7, #23]
}
 8018624:	4618      	mov	r0, r3
 8018626:	3718      	adds	r7, #24
 8018628:	46bd      	mov	sp, r7
 801862a:	bd80      	pop	{r7, pc}

0801862c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801862c:	b580      	push	{r7, lr}
 801862e:	b084      	sub	sp, #16
 8018630:	af00      	add	r7, sp, #0
 8018632:	6078      	str	r0, [r7, #4]
 8018634:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8018636:	683b      	ldr	r3, [r7, #0]
 8018638:	331a      	adds	r3, #26
 801863a:	4618      	mov	r0, r3
 801863c:	f7fe ffc0 	bl	80175c0 <ld_word>
 8018640:	4603      	mov	r3, r0
 8018642:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	781b      	ldrb	r3, [r3, #0]
 8018648:	2b03      	cmp	r3, #3
 801864a:	d109      	bne.n	8018660 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801864c:	683b      	ldr	r3, [r7, #0]
 801864e:	3314      	adds	r3, #20
 8018650:	4618      	mov	r0, r3
 8018652:	f7fe ffb5 	bl	80175c0 <ld_word>
 8018656:	4603      	mov	r3, r0
 8018658:	041b      	lsls	r3, r3, #16
 801865a:	68fa      	ldr	r2, [r7, #12]
 801865c:	4313      	orrs	r3, r2
 801865e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8018660:	68fb      	ldr	r3, [r7, #12]
}
 8018662:	4618      	mov	r0, r3
 8018664:	3710      	adds	r7, #16
 8018666:	46bd      	mov	sp, r7
 8018668:	bd80      	pop	{r7, pc}

0801866a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801866a:	b580      	push	{r7, lr}
 801866c:	b084      	sub	sp, #16
 801866e:	af00      	add	r7, sp, #0
 8018670:	60f8      	str	r0, [r7, #12]
 8018672:	60b9      	str	r1, [r7, #8]
 8018674:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8018676:	68bb      	ldr	r3, [r7, #8]
 8018678:	331a      	adds	r3, #26
 801867a:	687a      	ldr	r2, [r7, #4]
 801867c:	b292      	uxth	r2, r2
 801867e:	4611      	mov	r1, r2
 8018680:	4618      	mov	r0, r3
 8018682:	f7fe ffd8 	bl	8017636 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8018686:	68fb      	ldr	r3, [r7, #12]
 8018688:	781b      	ldrb	r3, [r3, #0]
 801868a:	2b03      	cmp	r3, #3
 801868c:	d109      	bne.n	80186a2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801868e:	68bb      	ldr	r3, [r7, #8]
 8018690:	f103 0214 	add.w	r2, r3, #20
 8018694:	687b      	ldr	r3, [r7, #4]
 8018696:	0c1b      	lsrs	r3, r3, #16
 8018698:	b29b      	uxth	r3, r3
 801869a:	4619      	mov	r1, r3
 801869c:	4610      	mov	r0, r2
 801869e:	f7fe ffca 	bl	8017636 <st_word>
	}
}
 80186a2:	bf00      	nop
 80186a4:	3710      	adds	r7, #16
 80186a6:	46bd      	mov	sp, r7
 80186a8:	bd80      	pop	{r7, pc}
	...

080186ac <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80186ac:	b590      	push	{r4, r7, lr}
 80186ae:	b087      	sub	sp, #28
 80186b0:	af00      	add	r7, sp, #0
 80186b2:	6078      	str	r0, [r7, #4]
 80186b4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80186b6:	683b      	ldr	r3, [r7, #0]
 80186b8:	331a      	adds	r3, #26
 80186ba:	4618      	mov	r0, r3
 80186bc:	f7fe ff80 	bl	80175c0 <ld_word>
 80186c0:	4603      	mov	r3, r0
 80186c2:	2b00      	cmp	r3, #0
 80186c4:	d001      	beq.n	80186ca <cmp_lfn+0x1e>
 80186c6:	2300      	movs	r3, #0
 80186c8:	e059      	b.n	801877e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80186ca:	683b      	ldr	r3, [r7, #0]
 80186cc:	781b      	ldrb	r3, [r3, #0]
 80186ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80186d2:	1e5a      	subs	r2, r3, #1
 80186d4:	4613      	mov	r3, r2
 80186d6:	005b      	lsls	r3, r3, #1
 80186d8:	4413      	add	r3, r2
 80186da:	009b      	lsls	r3, r3, #2
 80186dc:	4413      	add	r3, r2
 80186de:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80186e0:	2301      	movs	r3, #1
 80186e2:	81fb      	strh	r3, [r7, #14]
 80186e4:	2300      	movs	r3, #0
 80186e6:	613b      	str	r3, [r7, #16]
 80186e8:	e033      	b.n	8018752 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80186ea:	4a27      	ldr	r2, [pc, #156]	; (8018788 <cmp_lfn+0xdc>)
 80186ec:	693b      	ldr	r3, [r7, #16]
 80186ee:	4413      	add	r3, r2
 80186f0:	781b      	ldrb	r3, [r3, #0]
 80186f2:	461a      	mov	r2, r3
 80186f4:	683b      	ldr	r3, [r7, #0]
 80186f6:	4413      	add	r3, r2
 80186f8:	4618      	mov	r0, r3
 80186fa:	f7fe ff61 	bl	80175c0 <ld_word>
 80186fe:	4603      	mov	r3, r0
 8018700:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8018702:	89fb      	ldrh	r3, [r7, #14]
 8018704:	2b00      	cmp	r3, #0
 8018706:	d01a      	beq.n	801873e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8018708:	697b      	ldr	r3, [r7, #20]
 801870a:	2bfe      	cmp	r3, #254	; 0xfe
 801870c:	d812      	bhi.n	8018734 <cmp_lfn+0x88>
 801870e:	89bb      	ldrh	r3, [r7, #12]
 8018710:	4618      	mov	r0, r3
 8018712:	f001 fe11 	bl	801a338 <ff_wtoupper>
 8018716:	4603      	mov	r3, r0
 8018718:	461c      	mov	r4, r3
 801871a:	697b      	ldr	r3, [r7, #20]
 801871c:	1c5a      	adds	r2, r3, #1
 801871e:	617a      	str	r2, [r7, #20]
 8018720:	005b      	lsls	r3, r3, #1
 8018722:	687a      	ldr	r2, [r7, #4]
 8018724:	4413      	add	r3, r2
 8018726:	881b      	ldrh	r3, [r3, #0]
 8018728:	4618      	mov	r0, r3
 801872a:	f001 fe05 	bl	801a338 <ff_wtoupper>
 801872e:	4603      	mov	r3, r0
 8018730:	429c      	cmp	r4, r3
 8018732:	d001      	beq.n	8018738 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8018734:	2300      	movs	r3, #0
 8018736:	e022      	b.n	801877e <cmp_lfn+0xd2>
			}
			wc = uc;
 8018738:	89bb      	ldrh	r3, [r7, #12]
 801873a:	81fb      	strh	r3, [r7, #14]
 801873c:	e006      	b.n	801874c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801873e:	89bb      	ldrh	r3, [r7, #12]
 8018740:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018744:	4293      	cmp	r3, r2
 8018746:	d001      	beq.n	801874c <cmp_lfn+0xa0>
 8018748:	2300      	movs	r3, #0
 801874a:	e018      	b.n	801877e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801874c:	693b      	ldr	r3, [r7, #16]
 801874e:	3301      	adds	r3, #1
 8018750:	613b      	str	r3, [r7, #16]
 8018752:	693b      	ldr	r3, [r7, #16]
 8018754:	2b0c      	cmp	r3, #12
 8018756:	d9c8      	bls.n	80186ea <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8018758:	683b      	ldr	r3, [r7, #0]
 801875a:	781b      	ldrb	r3, [r3, #0]
 801875c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018760:	2b00      	cmp	r3, #0
 8018762:	d00b      	beq.n	801877c <cmp_lfn+0xd0>
 8018764:	89fb      	ldrh	r3, [r7, #14]
 8018766:	2b00      	cmp	r3, #0
 8018768:	d008      	beq.n	801877c <cmp_lfn+0xd0>
 801876a:	697b      	ldr	r3, [r7, #20]
 801876c:	005b      	lsls	r3, r3, #1
 801876e:	687a      	ldr	r2, [r7, #4]
 8018770:	4413      	add	r3, r2
 8018772:	881b      	ldrh	r3, [r3, #0]
 8018774:	2b00      	cmp	r3, #0
 8018776:	d001      	beq.n	801877c <cmp_lfn+0xd0>
 8018778:	2300      	movs	r3, #0
 801877a:	e000      	b.n	801877e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801877c:	2301      	movs	r3, #1
}
 801877e:	4618      	mov	r0, r3
 8018780:	371c      	adds	r7, #28
 8018782:	46bd      	mov	sp, r7
 8018784:	bd90      	pop	{r4, r7, pc}
 8018786:	bf00      	nop
 8018788:	08020048 	.word	0x08020048

0801878c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 801878c:	b580      	push	{r7, lr}
 801878e:	b088      	sub	sp, #32
 8018790:	af00      	add	r7, sp, #0
 8018792:	60f8      	str	r0, [r7, #12]
 8018794:	60b9      	str	r1, [r7, #8]
 8018796:	4611      	mov	r1, r2
 8018798:	461a      	mov	r2, r3
 801879a:	460b      	mov	r3, r1
 801879c:	71fb      	strb	r3, [r7, #7]
 801879e:	4613      	mov	r3, r2
 80187a0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80187a2:	68bb      	ldr	r3, [r7, #8]
 80187a4:	330d      	adds	r3, #13
 80187a6:	79ba      	ldrb	r2, [r7, #6]
 80187a8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80187aa:	68bb      	ldr	r3, [r7, #8]
 80187ac:	330b      	adds	r3, #11
 80187ae:	220f      	movs	r2, #15
 80187b0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80187b2:	68bb      	ldr	r3, [r7, #8]
 80187b4:	330c      	adds	r3, #12
 80187b6:	2200      	movs	r2, #0
 80187b8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80187ba:	68bb      	ldr	r3, [r7, #8]
 80187bc:	331a      	adds	r3, #26
 80187be:	2100      	movs	r1, #0
 80187c0:	4618      	mov	r0, r3
 80187c2:	f7fe ff38 	bl	8017636 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80187c6:	79fb      	ldrb	r3, [r7, #7]
 80187c8:	1e5a      	subs	r2, r3, #1
 80187ca:	4613      	mov	r3, r2
 80187cc:	005b      	lsls	r3, r3, #1
 80187ce:	4413      	add	r3, r2
 80187d0:	009b      	lsls	r3, r3, #2
 80187d2:	4413      	add	r3, r2
 80187d4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80187d6:	2300      	movs	r3, #0
 80187d8:	82fb      	strh	r3, [r7, #22]
 80187da:	2300      	movs	r3, #0
 80187dc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80187de:	8afb      	ldrh	r3, [r7, #22]
 80187e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80187e4:	4293      	cmp	r3, r2
 80187e6:	d007      	beq.n	80187f8 <put_lfn+0x6c>
 80187e8:	69fb      	ldr	r3, [r7, #28]
 80187ea:	1c5a      	adds	r2, r3, #1
 80187ec:	61fa      	str	r2, [r7, #28]
 80187ee:	005b      	lsls	r3, r3, #1
 80187f0:	68fa      	ldr	r2, [r7, #12]
 80187f2:	4413      	add	r3, r2
 80187f4:	881b      	ldrh	r3, [r3, #0]
 80187f6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80187f8:	4a17      	ldr	r2, [pc, #92]	; (8018858 <put_lfn+0xcc>)
 80187fa:	69bb      	ldr	r3, [r7, #24]
 80187fc:	4413      	add	r3, r2
 80187fe:	781b      	ldrb	r3, [r3, #0]
 8018800:	461a      	mov	r2, r3
 8018802:	68bb      	ldr	r3, [r7, #8]
 8018804:	4413      	add	r3, r2
 8018806:	8afa      	ldrh	r2, [r7, #22]
 8018808:	4611      	mov	r1, r2
 801880a:	4618      	mov	r0, r3
 801880c:	f7fe ff13 	bl	8017636 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8018810:	8afb      	ldrh	r3, [r7, #22]
 8018812:	2b00      	cmp	r3, #0
 8018814:	d102      	bne.n	801881c <put_lfn+0x90>
 8018816:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801881a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801881c:	69bb      	ldr	r3, [r7, #24]
 801881e:	3301      	adds	r3, #1
 8018820:	61bb      	str	r3, [r7, #24]
 8018822:	69bb      	ldr	r3, [r7, #24]
 8018824:	2b0c      	cmp	r3, #12
 8018826:	d9da      	bls.n	80187de <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8018828:	8afb      	ldrh	r3, [r7, #22]
 801882a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801882e:	4293      	cmp	r3, r2
 8018830:	d006      	beq.n	8018840 <put_lfn+0xb4>
 8018832:	69fb      	ldr	r3, [r7, #28]
 8018834:	005b      	lsls	r3, r3, #1
 8018836:	68fa      	ldr	r2, [r7, #12]
 8018838:	4413      	add	r3, r2
 801883a:	881b      	ldrh	r3, [r3, #0]
 801883c:	2b00      	cmp	r3, #0
 801883e:	d103      	bne.n	8018848 <put_lfn+0xbc>
 8018840:	79fb      	ldrb	r3, [r7, #7]
 8018842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018846:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8018848:	68bb      	ldr	r3, [r7, #8]
 801884a:	79fa      	ldrb	r2, [r7, #7]
 801884c:	701a      	strb	r2, [r3, #0]
}
 801884e:	bf00      	nop
 8018850:	3720      	adds	r7, #32
 8018852:	46bd      	mov	sp, r7
 8018854:	bd80      	pop	{r7, pc}
 8018856:	bf00      	nop
 8018858:	08020048 	.word	0x08020048

0801885c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801885c:	b580      	push	{r7, lr}
 801885e:	b08c      	sub	sp, #48	; 0x30
 8018860:	af00      	add	r7, sp, #0
 8018862:	60f8      	str	r0, [r7, #12]
 8018864:	60b9      	str	r1, [r7, #8]
 8018866:	607a      	str	r2, [r7, #4]
 8018868:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801886a:	220b      	movs	r2, #11
 801886c:	68b9      	ldr	r1, [r7, #8]
 801886e:	68f8      	ldr	r0, [r7, #12]
 8018870:	f7fe ff28 	bl	80176c4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8018874:	683b      	ldr	r3, [r7, #0]
 8018876:	2b05      	cmp	r3, #5
 8018878:	d929      	bls.n	80188ce <gen_numname+0x72>
		sr = seq;
 801887a:	683b      	ldr	r3, [r7, #0]
 801887c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801887e:	e020      	b.n	80188c2 <gen_numname+0x66>
			wc = *lfn++;
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	1c9a      	adds	r2, r3, #2
 8018884:	607a      	str	r2, [r7, #4]
 8018886:	881b      	ldrh	r3, [r3, #0]
 8018888:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 801888a:	2300      	movs	r3, #0
 801888c:	62bb      	str	r3, [r7, #40]	; 0x28
 801888e:	e015      	b.n	80188bc <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8018890:	69fb      	ldr	r3, [r7, #28]
 8018892:	005a      	lsls	r2, r3, #1
 8018894:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018896:	f003 0301 	and.w	r3, r3, #1
 801889a:	4413      	add	r3, r2
 801889c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801889e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80188a0:	085b      	lsrs	r3, r3, #1
 80188a2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80188a4:	69fb      	ldr	r3, [r7, #28]
 80188a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80188aa:	2b00      	cmp	r3, #0
 80188ac:	d003      	beq.n	80188b6 <gen_numname+0x5a>
 80188ae:	69fa      	ldr	r2, [r7, #28]
 80188b0:	4b30      	ldr	r3, [pc, #192]	; (8018974 <gen_numname+0x118>)
 80188b2:	4053      	eors	r3, r2
 80188b4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80188b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188b8:	3301      	adds	r3, #1
 80188ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80188bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188be:	2b0f      	cmp	r3, #15
 80188c0:	d9e6      	bls.n	8018890 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80188c2:	687b      	ldr	r3, [r7, #4]
 80188c4:	881b      	ldrh	r3, [r3, #0]
 80188c6:	2b00      	cmp	r3, #0
 80188c8:	d1da      	bne.n	8018880 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80188ca:	69fb      	ldr	r3, [r7, #28]
 80188cc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80188ce:	2307      	movs	r3, #7
 80188d0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80188d2:	683b      	ldr	r3, [r7, #0]
 80188d4:	b2db      	uxtb	r3, r3
 80188d6:	f003 030f 	and.w	r3, r3, #15
 80188da:	b2db      	uxtb	r3, r3
 80188dc:	3330      	adds	r3, #48	; 0x30
 80188de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80188e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80188e6:	2b39      	cmp	r3, #57	; 0x39
 80188e8:	d904      	bls.n	80188f4 <gen_numname+0x98>
 80188ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80188ee:	3307      	adds	r3, #7
 80188f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80188f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188f6:	1e5a      	subs	r2, r3, #1
 80188f8:	62ba      	str	r2, [r7, #40]	; 0x28
 80188fa:	3330      	adds	r3, #48	; 0x30
 80188fc:	443b      	add	r3, r7
 80188fe:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8018902:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8018906:	683b      	ldr	r3, [r7, #0]
 8018908:	091b      	lsrs	r3, r3, #4
 801890a:	603b      	str	r3, [r7, #0]
	} while (seq);
 801890c:	683b      	ldr	r3, [r7, #0]
 801890e:	2b00      	cmp	r3, #0
 8018910:	d1df      	bne.n	80188d2 <gen_numname+0x76>
	ns[i] = '~';
 8018912:	f107 0214 	add.w	r2, r7, #20
 8018916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018918:	4413      	add	r3, r2
 801891a:	227e      	movs	r2, #126	; 0x7e
 801891c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801891e:	2300      	movs	r3, #0
 8018920:	627b      	str	r3, [r7, #36]	; 0x24
 8018922:	e002      	b.n	801892a <gen_numname+0xce>
 8018924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018926:	3301      	adds	r3, #1
 8018928:	627b      	str	r3, [r7, #36]	; 0x24
 801892a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801892c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801892e:	429a      	cmp	r2, r3
 8018930:	d205      	bcs.n	801893e <gen_numname+0xe2>
 8018932:	68fa      	ldr	r2, [r7, #12]
 8018934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018936:	4413      	add	r3, r2
 8018938:	781b      	ldrb	r3, [r3, #0]
 801893a:	2b20      	cmp	r3, #32
 801893c:	d1f2      	bne.n	8018924 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801893e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018940:	2b07      	cmp	r3, #7
 8018942:	d807      	bhi.n	8018954 <gen_numname+0xf8>
 8018944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018946:	1c5a      	adds	r2, r3, #1
 8018948:	62ba      	str	r2, [r7, #40]	; 0x28
 801894a:	3330      	adds	r3, #48	; 0x30
 801894c:	443b      	add	r3, r7
 801894e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8018952:	e000      	b.n	8018956 <gen_numname+0xfa>
 8018954:	2120      	movs	r1, #32
 8018956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018958:	1c5a      	adds	r2, r3, #1
 801895a:	627a      	str	r2, [r7, #36]	; 0x24
 801895c:	68fa      	ldr	r2, [r7, #12]
 801895e:	4413      	add	r3, r2
 8018960:	460a      	mov	r2, r1
 8018962:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8018964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018966:	2b07      	cmp	r3, #7
 8018968:	d9e9      	bls.n	801893e <gen_numname+0xe2>
}
 801896a:	bf00      	nop
 801896c:	bf00      	nop
 801896e:	3730      	adds	r7, #48	; 0x30
 8018970:	46bd      	mov	sp, r7
 8018972:	bd80      	pop	{r7, pc}
 8018974:	00011021 	.word	0x00011021

08018978 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8018978:	b480      	push	{r7}
 801897a:	b085      	sub	sp, #20
 801897c:	af00      	add	r7, sp, #0
 801897e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8018980:	2300      	movs	r3, #0
 8018982:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8018984:	230b      	movs	r3, #11
 8018986:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8018988:	7bfb      	ldrb	r3, [r7, #15]
 801898a:	b2da      	uxtb	r2, r3
 801898c:	0852      	lsrs	r2, r2, #1
 801898e:	01db      	lsls	r3, r3, #7
 8018990:	4313      	orrs	r3, r2
 8018992:	b2da      	uxtb	r2, r3
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	1c59      	adds	r1, r3, #1
 8018998:	6079      	str	r1, [r7, #4]
 801899a:	781b      	ldrb	r3, [r3, #0]
 801899c:	4413      	add	r3, r2
 801899e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80189a0:	68bb      	ldr	r3, [r7, #8]
 80189a2:	3b01      	subs	r3, #1
 80189a4:	60bb      	str	r3, [r7, #8]
 80189a6:	68bb      	ldr	r3, [r7, #8]
 80189a8:	2b00      	cmp	r3, #0
 80189aa:	d1ed      	bne.n	8018988 <sum_sfn+0x10>
	return sum;
 80189ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80189ae:	4618      	mov	r0, r3
 80189b0:	3714      	adds	r7, #20
 80189b2:	46bd      	mov	sp, r7
 80189b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189b8:	4770      	bx	lr

080189ba <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80189ba:	b580      	push	{r7, lr}
 80189bc:	b086      	sub	sp, #24
 80189be:	af00      	add	r7, sp, #0
 80189c0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	681b      	ldr	r3, [r3, #0]
 80189c6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80189c8:	2100      	movs	r1, #0
 80189ca:	6878      	ldr	r0, [r7, #4]
 80189cc:	f7ff fc88 	bl	80182e0 <dir_sdi>
 80189d0:	4603      	mov	r3, r0
 80189d2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80189d4:	7dfb      	ldrb	r3, [r7, #23]
 80189d6:	2b00      	cmp	r3, #0
 80189d8:	d001      	beq.n	80189de <dir_find+0x24>
 80189da:	7dfb      	ldrb	r3, [r7, #23]
 80189dc:	e0a9      	b.n	8018b32 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80189de:	23ff      	movs	r3, #255	; 0xff
 80189e0:	753b      	strb	r3, [r7, #20]
 80189e2:	7d3b      	ldrb	r3, [r7, #20]
 80189e4:	757b      	strb	r3, [r7, #21]
 80189e6:	687b      	ldr	r3, [r7, #4]
 80189e8:	f04f 32ff 	mov.w	r2, #4294967295
 80189ec:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	69db      	ldr	r3, [r3, #28]
 80189f2:	4619      	mov	r1, r3
 80189f4:	6938      	ldr	r0, [r7, #16]
 80189f6:	f7ff f893 	bl	8017b20 <move_window>
 80189fa:	4603      	mov	r3, r0
 80189fc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80189fe:	7dfb      	ldrb	r3, [r7, #23]
 8018a00:	2b00      	cmp	r3, #0
 8018a02:	f040 8090 	bne.w	8018b26 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	6a1b      	ldr	r3, [r3, #32]
 8018a0a:	781b      	ldrb	r3, [r3, #0]
 8018a0c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8018a0e:	7dbb      	ldrb	r3, [r7, #22]
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	d102      	bne.n	8018a1a <dir_find+0x60>
 8018a14:	2304      	movs	r3, #4
 8018a16:	75fb      	strb	r3, [r7, #23]
 8018a18:	e08a      	b.n	8018b30 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	6a1b      	ldr	r3, [r3, #32]
 8018a1e:	330b      	adds	r3, #11
 8018a20:	781b      	ldrb	r3, [r3, #0]
 8018a22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018a26:	73fb      	strb	r3, [r7, #15]
 8018a28:	687b      	ldr	r3, [r7, #4]
 8018a2a:	7bfa      	ldrb	r2, [r7, #15]
 8018a2c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8018a2e:	7dbb      	ldrb	r3, [r7, #22]
 8018a30:	2be5      	cmp	r3, #229	; 0xe5
 8018a32:	d007      	beq.n	8018a44 <dir_find+0x8a>
 8018a34:	7bfb      	ldrb	r3, [r7, #15]
 8018a36:	f003 0308 	and.w	r3, r3, #8
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	d009      	beq.n	8018a52 <dir_find+0x98>
 8018a3e:	7bfb      	ldrb	r3, [r7, #15]
 8018a40:	2b0f      	cmp	r3, #15
 8018a42:	d006      	beq.n	8018a52 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8018a44:	23ff      	movs	r3, #255	; 0xff
 8018a46:	757b      	strb	r3, [r7, #21]
 8018a48:	687b      	ldr	r3, [r7, #4]
 8018a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8018a4e:	631a      	str	r2, [r3, #48]	; 0x30
 8018a50:	e05e      	b.n	8018b10 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8018a52:	7bfb      	ldrb	r3, [r7, #15]
 8018a54:	2b0f      	cmp	r3, #15
 8018a56:	d136      	bne.n	8018ac6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8018a58:	687b      	ldr	r3, [r7, #4]
 8018a5a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018a62:	2b00      	cmp	r3, #0
 8018a64:	d154      	bne.n	8018b10 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8018a66:	7dbb      	ldrb	r3, [r7, #22]
 8018a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018a6c:	2b00      	cmp	r3, #0
 8018a6e:	d00d      	beq.n	8018a8c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	6a1b      	ldr	r3, [r3, #32]
 8018a74:	7b5b      	ldrb	r3, [r3, #13]
 8018a76:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8018a78:	7dbb      	ldrb	r3, [r7, #22]
 8018a7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8018a7e:	75bb      	strb	r3, [r7, #22]
 8018a80:	7dbb      	ldrb	r3, [r7, #22]
 8018a82:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8018a84:	687b      	ldr	r3, [r7, #4]
 8018a86:	695a      	ldr	r2, [r3, #20]
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8018a8c:	7dba      	ldrb	r2, [r7, #22]
 8018a8e:	7d7b      	ldrb	r3, [r7, #21]
 8018a90:	429a      	cmp	r2, r3
 8018a92:	d115      	bne.n	8018ac0 <dir_find+0x106>
 8018a94:	687b      	ldr	r3, [r7, #4]
 8018a96:	6a1b      	ldr	r3, [r3, #32]
 8018a98:	330d      	adds	r3, #13
 8018a9a:	781b      	ldrb	r3, [r3, #0]
 8018a9c:	7d3a      	ldrb	r2, [r7, #20]
 8018a9e:	429a      	cmp	r2, r3
 8018aa0:	d10e      	bne.n	8018ac0 <dir_find+0x106>
 8018aa2:	693b      	ldr	r3, [r7, #16]
 8018aa4:	691a      	ldr	r2, [r3, #16]
 8018aa6:	687b      	ldr	r3, [r7, #4]
 8018aa8:	6a1b      	ldr	r3, [r3, #32]
 8018aaa:	4619      	mov	r1, r3
 8018aac:	4610      	mov	r0, r2
 8018aae:	f7ff fdfd 	bl	80186ac <cmp_lfn>
 8018ab2:	4603      	mov	r3, r0
 8018ab4:	2b00      	cmp	r3, #0
 8018ab6:	d003      	beq.n	8018ac0 <dir_find+0x106>
 8018ab8:	7d7b      	ldrb	r3, [r7, #21]
 8018aba:	3b01      	subs	r3, #1
 8018abc:	b2db      	uxtb	r3, r3
 8018abe:	e000      	b.n	8018ac2 <dir_find+0x108>
 8018ac0:	23ff      	movs	r3, #255	; 0xff
 8018ac2:	757b      	strb	r3, [r7, #21]
 8018ac4:	e024      	b.n	8018b10 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8018ac6:	7d7b      	ldrb	r3, [r7, #21]
 8018ac8:	2b00      	cmp	r3, #0
 8018aca:	d109      	bne.n	8018ae0 <dir_find+0x126>
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	6a1b      	ldr	r3, [r3, #32]
 8018ad0:	4618      	mov	r0, r3
 8018ad2:	f7ff ff51 	bl	8018978 <sum_sfn>
 8018ad6:	4603      	mov	r3, r0
 8018ad8:	461a      	mov	r2, r3
 8018ada:	7d3b      	ldrb	r3, [r7, #20]
 8018adc:	4293      	cmp	r3, r2
 8018ade:	d024      	beq.n	8018b2a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018ae6:	f003 0301 	and.w	r3, r3, #1
 8018aea:	2b00      	cmp	r3, #0
 8018aec:	d10a      	bne.n	8018b04 <dir_find+0x14a>
 8018aee:	687b      	ldr	r3, [r7, #4]
 8018af0:	6a18      	ldr	r0, [r3, #32]
 8018af2:	687b      	ldr	r3, [r7, #4]
 8018af4:	3324      	adds	r3, #36	; 0x24
 8018af6:	220b      	movs	r2, #11
 8018af8:	4619      	mov	r1, r3
 8018afa:	f7fe fe1f 	bl	801773c <mem_cmp>
 8018afe:	4603      	mov	r3, r0
 8018b00:	2b00      	cmp	r3, #0
 8018b02:	d014      	beq.n	8018b2e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8018b04:	23ff      	movs	r3, #255	; 0xff
 8018b06:	757b      	strb	r3, [r7, #21]
 8018b08:	687b      	ldr	r3, [r7, #4]
 8018b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8018b0e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8018b10:	2100      	movs	r1, #0
 8018b12:	6878      	ldr	r0, [r7, #4]
 8018b14:	f7ff fc6d 	bl	80183f2 <dir_next>
 8018b18:	4603      	mov	r3, r0
 8018b1a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8018b1c:	7dfb      	ldrb	r3, [r7, #23]
 8018b1e:	2b00      	cmp	r3, #0
 8018b20:	f43f af65 	beq.w	80189ee <dir_find+0x34>
 8018b24:	e004      	b.n	8018b30 <dir_find+0x176>
		if (res != FR_OK) break;
 8018b26:	bf00      	nop
 8018b28:	e002      	b.n	8018b30 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8018b2a:	bf00      	nop
 8018b2c:	e000      	b.n	8018b30 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8018b2e:	bf00      	nop

	return res;
 8018b30:	7dfb      	ldrb	r3, [r7, #23]
}
 8018b32:	4618      	mov	r0, r3
 8018b34:	3718      	adds	r7, #24
 8018b36:	46bd      	mov	sp, r7
 8018b38:	bd80      	pop	{r7, pc}
	...

08018b3c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8018b3c:	b580      	push	{r7, lr}
 8018b3e:	b08c      	sub	sp, #48	; 0x30
 8018b40:	af00      	add	r7, sp, #0
 8018b42:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	681b      	ldr	r3, [r3, #0]
 8018b48:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8018b4a:	687b      	ldr	r3, [r7, #4]
 8018b4c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018b50:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8018b54:	2b00      	cmp	r3, #0
 8018b56:	d001      	beq.n	8018b5c <dir_register+0x20>
 8018b58:	2306      	movs	r3, #6
 8018b5a:	e0e0      	b.n	8018d1e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8018b5c:	2300      	movs	r3, #0
 8018b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8018b60:	e002      	b.n	8018b68 <dir_register+0x2c>
 8018b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b64:	3301      	adds	r3, #1
 8018b66:	627b      	str	r3, [r7, #36]	; 0x24
 8018b68:	69fb      	ldr	r3, [r7, #28]
 8018b6a:	691a      	ldr	r2, [r3, #16]
 8018b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b6e:	005b      	lsls	r3, r3, #1
 8018b70:	4413      	add	r3, r2
 8018b72:	881b      	ldrh	r3, [r3, #0]
 8018b74:	2b00      	cmp	r3, #0
 8018b76:	d1f4      	bne.n	8018b62 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8018b78:	687b      	ldr	r3, [r7, #4]
 8018b7a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8018b7e:	f107 030c 	add.w	r3, r7, #12
 8018b82:	220c      	movs	r2, #12
 8018b84:	4618      	mov	r0, r3
 8018b86:	f7fe fd9d 	bl	80176c4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8018b8a:	7dfb      	ldrb	r3, [r7, #23]
 8018b8c:	f003 0301 	and.w	r3, r3, #1
 8018b90:	2b00      	cmp	r3, #0
 8018b92:	d032      	beq.n	8018bfa <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	2240      	movs	r2, #64	; 0x40
 8018b98:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8018b9c:	2301      	movs	r3, #1
 8018b9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8018ba0:	e016      	b.n	8018bd0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8018ba2:	687b      	ldr	r3, [r7, #4]
 8018ba4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8018ba8:	69fb      	ldr	r3, [r7, #28]
 8018baa:	691a      	ldr	r2, [r3, #16]
 8018bac:	f107 010c 	add.w	r1, r7, #12
 8018bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bb2:	f7ff fe53 	bl	801885c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8018bb6:	6878      	ldr	r0, [r7, #4]
 8018bb8:	f7ff feff 	bl	80189ba <dir_find>
 8018bbc:	4603      	mov	r3, r0
 8018bbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8018bc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018bc6:	2b00      	cmp	r3, #0
 8018bc8:	d106      	bne.n	8018bd8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8018bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bcc:	3301      	adds	r3, #1
 8018bce:	62bb      	str	r3, [r7, #40]	; 0x28
 8018bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bd2:	2b63      	cmp	r3, #99	; 0x63
 8018bd4:	d9e5      	bls.n	8018ba2 <dir_register+0x66>
 8018bd6:	e000      	b.n	8018bda <dir_register+0x9e>
			if (res != FR_OK) break;
 8018bd8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8018bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bdc:	2b64      	cmp	r3, #100	; 0x64
 8018bde:	d101      	bne.n	8018be4 <dir_register+0xa8>
 8018be0:	2307      	movs	r3, #7
 8018be2:	e09c      	b.n	8018d1e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8018be4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018be8:	2b04      	cmp	r3, #4
 8018bea:	d002      	beq.n	8018bf2 <dir_register+0xb6>
 8018bec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018bf0:	e095      	b.n	8018d1e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8018bf2:	7dfa      	ldrb	r2, [r7, #23]
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8018bfa:	7dfb      	ldrb	r3, [r7, #23]
 8018bfc:	f003 0302 	and.w	r3, r3, #2
 8018c00:	2b00      	cmp	r3, #0
 8018c02:	d007      	beq.n	8018c14 <dir_register+0xd8>
 8018c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c06:	330c      	adds	r3, #12
 8018c08:	4a47      	ldr	r2, [pc, #284]	; (8018d28 <dir_register+0x1ec>)
 8018c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8018c0e:	089b      	lsrs	r3, r3, #2
 8018c10:	3301      	adds	r3, #1
 8018c12:	e000      	b.n	8018c16 <dir_register+0xda>
 8018c14:	2301      	movs	r3, #1
 8018c16:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8018c18:	6a39      	ldr	r1, [r7, #32]
 8018c1a:	6878      	ldr	r0, [r7, #4]
 8018c1c:	f7ff fcbf 	bl	801859e <dir_alloc>
 8018c20:	4603      	mov	r3, r0
 8018c22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8018c26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	d148      	bne.n	8018cc0 <dir_register+0x184>
 8018c2e:	6a3b      	ldr	r3, [r7, #32]
 8018c30:	3b01      	subs	r3, #1
 8018c32:	623b      	str	r3, [r7, #32]
 8018c34:	6a3b      	ldr	r3, [r7, #32]
 8018c36:	2b00      	cmp	r3, #0
 8018c38:	d042      	beq.n	8018cc0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	695a      	ldr	r2, [r3, #20]
 8018c3e:	6a3b      	ldr	r3, [r7, #32]
 8018c40:	015b      	lsls	r3, r3, #5
 8018c42:	1ad3      	subs	r3, r2, r3
 8018c44:	4619      	mov	r1, r3
 8018c46:	6878      	ldr	r0, [r7, #4]
 8018c48:	f7ff fb4a 	bl	80182e0 <dir_sdi>
 8018c4c:	4603      	mov	r3, r0
 8018c4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8018c52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018c56:	2b00      	cmp	r3, #0
 8018c58:	d132      	bne.n	8018cc0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	3324      	adds	r3, #36	; 0x24
 8018c5e:	4618      	mov	r0, r3
 8018c60:	f7ff fe8a 	bl	8018978 <sum_sfn>
 8018c64:	4603      	mov	r3, r0
 8018c66:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	69db      	ldr	r3, [r3, #28]
 8018c6c:	4619      	mov	r1, r3
 8018c6e:	69f8      	ldr	r0, [r7, #28]
 8018c70:	f7fe ff56 	bl	8017b20 <move_window>
 8018c74:	4603      	mov	r3, r0
 8018c76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8018c7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018c7e:	2b00      	cmp	r3, #0
 8018c80:	d11d      	bne.n	8018cbe <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8018c82:	69fb      	ldr	r3, [r7, #28]
 8018c84:	6918      	ldr	r0, [r3, #16]
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	6a19      	ldr	r1, [r3, #32]
 8018c8a:	6a3b      	ldr	r3, [r7, #32]
 8018c8c:	b2da      	uxtb	r2, r3
 8018c8e:	7efb      	ldrb	r3, [r7, #27]
 8018c90:	f7ff fd7c 	bl	801878c <put_lfn>
				fs->wflag = 1;
 8018c94:	69fb      	ldr	r3, [r7, #28]
 8018c96:	2201      	movs	r2, #1
 8018c98:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8018c9a:	2100      	movs	r1, #0
 8018c9c:	6878      	ldr	r0, [r7, #4]
 8018c9e:	f7ff fba8 	bl	80183f2 <dir_next>
 8018ca2:	4603      	mov	r3, r0
 8018ca4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8018ca8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018cac:	2b00      	cmp	r3, #0
 8018cae:	d107      	bne.n	8018cc0 <dir_register+0x184>
 8018cb0:	6a3b      	ldr	r3, [r7, #32]
 8018cb2:	3b01      	subs	r3, #1
 8018cb4:	623b      	str	r3, [r7, #32]
 8018cb6:	6a3b      	ldr	r3, [r7, #32]
 8018cb8:	2b00      	cmp	r3, #0
 8018cba:	d1d5      	bne.n	8018c68 <dir_register+0x12c>
 8018cbc:	e000      	b.n	8018cc0 <dir_register+0x184>
				if (res != FR_OK) break;
 8018cbe:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8018cc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018cc4:	2b00      	cmp	r3, #0
 8018cc6:	d128      	bne.n	8018d1a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	69db      	ldr	r3, [r3, #28]
 8018ccc:	4619      	mov	r1, r3
 8018cce:	69f8      	ldr	r0, [r7, #28]
 8018cd0:	f7fe ff26 	bl	8017b20 <move_window>
 8018cd4:	4603      	mov	r3, r0
 8018cd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8018cda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018cde:	2b00      	cmp	r3, #0
 8018ce0:	d11b      	bne.n	8018d1a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	6a1b      	ldr	r3, [r3, #32]
 8018ce6:	2220      	movs	r2, #32
 8018ce8:	2100      	movs	r1, #0
 8018cea:	4618      	mov	r0, r3
 8018cec:	f7fe fd0b 	bl	8017706 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	6a18      	ldr	r0, [r3, #32]
 8018cf4:	687b      	ldr	r3, [r7, #4]
 8018cf6:	3324      	adds	r3, #36	; 0x24
 8018cf8:	220b      	movs	r2, #11
 8018cfa:	4619      	mov	r1, r3
 8018cfc:	f7fe fce2 	bl	80176c4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8018d00:	687b      	ldr	r3, [r7, #4]
 8018d02:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8018d06:	687b      	ldr	r3, [r7, #4]
 8018d08:	6a1b      	ldr	r3, [r3, #32]
 8018d0a:	330c      	adds	r3, #12
 8018d0c:	f002 0218 	and.w	r2, r2, #24
 8018d10:	b2d2      	uxtb	r2, r2
 8018d12:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8018d14:	69fb      	ldr	r3, [r7, #28]
 8018d16:	2201      	movs	r2, #1
 8018d18:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8018d1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8018d1e:	4618      	mov	r0, r3
 8018d20:	3730      	adds	r7, #48	; 0x30
 8018d22:	46bd      	mov	sp, r7
 8018d24:	bd80      	pop	{r7, pc}
 8018d26:	bf00      	nop
 8018d28:	4ec4ec4f 	.word	0x4ec4ec4f

08018d2c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8018d2c:	b580      	push	{r7, lr}
 8018d2e:	b08a      	sub	sp, #40	; 0x28
 8018d30:	af00      	add	r7, sp, #0
 8018d32:	6078      	str	r0, [r7, #4]
 8018d34:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8018d36:	683b      	ldr	r3, [r7, #0]
 8018d38:	681b      	ldr	r3, [r3, #0]
 8018d3a:	613b      	str	r3, [r7, #16]
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	681b      	ldr	r3, [r3, #0]
 8018d40:	691b      	ldr	r3, [r3, #16]
 8018d42:	60fb      	str	r3, [r7, #12]
 8018d44:	2300      	movs	r3, #0
 8018d46:	617b      	str	r3, [r7, #20]
 8018d48:	697b      	ldr	r3, [r7, #20]
 8018d4a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8018d4c:	69bb      	ldr	r3, [r7, #24]
 8018d4e:	1c5a      	adds	r2, r3, #1
 8018d50:	61ba      	str	r2, [r7, #24]
 8018d52:	693a      	ldr	r2, [r7, #16]
 8018d54:	4413      	add	r3, r2
 8018d56:	781b      	ldrb	r3, [r3, #0]
 8018d58:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8018d5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018d5c:	2b1f      	cmp	r3, #31
 8018d5e:	d940      	bls.n	8018de2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8018d60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018d62:	2b2f      	cmp	r3, #47	; 0x2f
 8018d64:	d006      	beq.n	8018d74 <create_name+0x48>
 8018d66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018d68:	2b5c      	cmp	r3, #92	; 0x5c
 8018d6a:	d110      	bne.n	8018d8e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8018d6c:	e002      	b.n	8018d74 <create_name+0x48>
 8018d6e:	69bb      	ldr	r3, [r7, #24]
 8018d70:	3301      	adds	r3, #1
 8018d72:	61bb      	str	r3, [r7, #24]
 8018d74:	693a      	ldr	r2, [r7, #16]
 8018d76:	69bb      	ldr	r3, [r7, #24]
 8018d78:	4413      	add	r3, r2
 8018d7a:	781b      	ldrb	r3, [r3, #0]
 8018d7c:	2b2f      	cmp	r3, #47	; 0x2f
 8018d7e:	d0f6      	beq.n	8018d6e <create_name+0x42>
 8018d80:	693a      	ldr	r2, [r7, #16]
 8018d82:	69bb      	ldr	r3, [r7, #24]
 8018d84:	4413      	add	r3, r2
 8018d86:	781b      	ldrb	r3, [r3, #0]
 8018d88:	2b5c      	cmp	r3, #92	; 0x5c
 8018d8a:	d0f0      	beq.n	8018d6e <create_name+0x42>
			break;
 8018d8c:	e02a      	b.n	8018de4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8018d8e:	697b      	ldr	r3, [r7, #20]
 8018d90:	2bfe      	cmp	r3, #254	; 0xfe
 8018d92:	d901      	bls.n	8018d98 <create_name+0x6c>
 8018d94:	2306      	movs	r3, #6
 8018d96:	e17d      	b.n	8019094 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8018d98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018d9a:	b2db      	uxtb	r3, r3
 8018d9c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8018d9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018da0:	2101      	movs	r1, #1
 8018da2:	4618      	mov	r0, r3
 8018da4:	f001 fa8c 	bl	801a2c0 <ff_convert>
 8018da8:	4603      	mov	r3, r0
 8018daa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8018dac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018dae:	2b00      	cmp	r3, #0
 8018db0:	d101      	bne.n	8018db6 <create_name+0x8a>
 8018db2:	2306      	movs	r3, #6
 8018db4:	e16e      	b.n	8019094 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8018db6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018db8:	2b7f      	cmp	r3, #127	; 0x7f
 8018dba:	d809      	bhi.n	8018dd0 <create_name+0xa4>
 8018dbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018dbe:	4619      	mov	r1, r3
 8018dc0:	488d      	ldr	r0, [pc, #564]	; (8018ff8 <create_name+0x2cc>)
 8018dc2:	f7fe fce2 	bl	801778a <chk_chr>
 8018dc6:	4603      	mov	r3, r0
 8018dc8:	2b00      	cmp	r3, #0
 8018dca:	d001      	beq.n	8018dd0 <create_name+0xa4>
 8018dcc:	2306      	movs	r3, #6
 8018dce:	e161      	b.n	8019094 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8018dd0:	697b      	ldr	r3, [r7, #20]
 8018dd2:	1c5a      	adds	r2, r3, #1
 8018dd4:	617a      	str	r2, [r7, #20]
 8018dd6:	005b      	lsls	r3, r3, #1
 8018dd8:	68fa      	ldr	r2, [r7, #12]
 8018dda:	4413      	add	r3, r2
 8018ddc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018dde:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8018de0:	e7b4      	b.n	8018d4c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8018de2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8018de4:	693a      	ldr	r2, [r7, #16]
 8018de6:	69bb      	ldr	r3, [r7, #24]
 8018de8:	441a      	add	r2, r3
 8018dea:	683b      	ldr	r3, [r7, #0]
 8018dec:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8018dee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018df0:	2b1f      	cmp	r3, #31
 8018df2:	d801      	bhi.n	8018df8 <create_name+0xcc>
 8018df4:	2304      	movs	r3, #4
 8018df6:	e000      	b.n	8018dfa <create_name+0xce>
 8018df8:	2300      	movs	r3, #0
 8018dfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8018dfe:	e011      	b.n	8018e24 <create_name+0xf8>
		w = lfn[di - 1];
 8018e00:	697a      	ldr	r2, [r7, #20]
 8018e02:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018e06:	4413      	add	r3, r2
 8018e08:	005b      	lsls	r3, r3, #1
 8018e0a:	68fa      	ldr	r2, [r7, #12]
 8018e0c:	4413      	add	r3, r2
 8018e0e:	881b      	ldrh	r3, [r3, #0]
 8018e10:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8018e12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e14:	2b20      	cmp	r3, #32
 8018e16:	d002      	beq.n	8018e1e <create_name+0xf2>
 8018e18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e1a:	2b2e      	cmp	r3, #46	; 0x2e
 8018e1c:	d106      	bne.n	8018e2c <create_name+0x100>
		di--;
 8018e1e:	697b      	ldr	r3, [r7, #20]
 8018e20:	3b01      	subs	r3, #1
 8018e22:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8018e24:	697b      	ldr	r3, [r7, #20]
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	d1ea      	bne.n	8018e00 <create_name+0xd4>
 8018e2a:	e000      	b.n	8018e2e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8018e2c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8018e2e:	697b      	ldr	r3, [r7, #20]
 8018e30:	005b      	lsls	r3, r3, #1
 8018e32:	68fa      	ldr	r2, [r7, #12]
 8018e34:	4413      	add	r3, r2
 8018e36:	2200      	movs	r2, #0
 8018e38:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8018e3a:	697b      	ldr	r3, [r7, #20]
 8018e3c:	2b00      	cmp	r3, #0
 8018e3e:	d101      	bne.n	8018e44 <create_name+0x118>
 8018e40:	2306      	movs	r3, #6
 8018e42:	e127      	b.n	8019094 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	3324      	adds	r3, #36	; 0x24
 8018e48:	220b      	movs	r2, #11
 8018e4a:	2120      	movs	r1, #32
 8018e4c:	4618      	mov	r0, r3
 8018e4e:	f7fe fc5a 	bl	8017706 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8018e52:	2300      	movs	r3, #0
 8018e54:	61bb      	str	r3, [r7, #24]
 8018e56:	e002      	b.n	8018e5e <create_name+0x132>
 8018e58:	69bb      	ldr	r3, [r7, #24]
 8018e5a:	3301      	adds	r3, #1
 8018e5c:	61bb      	str	r3, [r7, #24]
 8018e5e:	69bb      	ldr	r3, [r7, #24]
 8018e60:	005b      	lsls	r3, r3, #1
 8018e62:	68fa      	ldr	r2, [r7, #12]
 8018e64:	4413      	add	r3, r2
 8018e66:	881b      	ldrh	r3, [r3, #0]
 8018e68:	2b20      	cmp	r3, #32
 8018e6a:	d0f5      	beq.n	8018e58 <create_name+0x12c>
 8018e6c:	69bb      	ldr	r3, [r7, #24]
 8018e6e:	005b      	lsls	r3, r3, #1
 8018e70:	68fa      	ldr	r2, [r7, #12]
 8018e72:	4413      	add	r3, r2
 8018e74:	881b      	ldrh	r3, [r3, #0]
 8018e76:	2b2e      	cmp	r3, #46	; 0x2e
 8018e78:	d0ee      	beq.n	8018e58 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8018e7a:	69bb      	ldr	r3, [r7, #24]
 8018e7c:	2b00      	cmp	r3, #0
 8018e7e:	d009      	beq.n	8018e94 <create_name+0x168>
 8018e80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018e84:	f043 0303 	orr.w	r3, r3, #3
 8018e88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8018e8c:	e002      	b.n	8018e94 <create_name+0x168>
 8018e8e:	697b      	ldr	r3, [r7, #20]
 8018e90:	3b01      	subs	r3, #1
 8018e92:	617b      	str	r3, [r7, #20]
 8018e94:	697b      	ldr	r3, [r7, #20]
 8018e96:	2b00      	cmp	r3, #0
 8018e98:	d009      	beq.n	8018eae <create_name+0x182>
 8018e9a:	697a      	ldr	r2, [r7, #20]
 8018e9c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018ea0:	4413      	add	r3, r2
 8018ea2:	005b      	lsls	r3, r3, #1
 8018ea4:	68fa      	ldr	r2, [r7, #12]
 8018ea6:	4413      	add	r3, r2
 8018ea8:	881b      	ldrh	r3, [r3, #0]
 8018eaa:	2b2e      	cmp	r3, #46	; 0x2e
 8018eac:	d1ef      	bne.n	8018e8e <create_name+0x162>

	i = b = 0; ni = 8;
 8018eae:	2300      	movs	r3, #0
 8018eb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018eb4:	2300      	movs	r3, #0
 8018eb6:	623b      	str	r3, [r7, #32]
 8018eb8:	2308      	movs	r3, #8
 8018eba:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8018ebc:	69bb      	ldr	r3, [r7, #24]
 8018ebe:	1c5a      	adds	r2, r3, #1
 8018ec0:	61ba      	str	r2, [r7, #24]
 8018ec2:	005b      	lsls	r3, r3, #1
 8018ec4:	68fa      	ldr	r2, [r7, #12]
 8018ec6:	4413      	add	r3, r2
 8018ec8:	881b      	ldrh	r3, [r3, #0]
 8018eca:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8018ecc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018ece:	2b00      	cmp	r3, #0
 8018ed0:	f000 8090 	beq.w	8018ff4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8018ed4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018ed6:	2b20      	cmp	r3, #32
 8018ed8:	d006      	beq.n	8018ee8 <create_name+0x1bc>
 8018eda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018edc:	2b2e      	cmp	r3, #46	; 0x2e
 8018ede:	d10a      	bne.n	8018ef6 <create_name+0x1ca>
 8018ee0:	69ba      	ldr	r2, [r7, #24]
 8018ee2:	697b      	ldr	r3, [r7, #20]
 8018ee4:	429a      	cmp	r2, r3
 8018ee6:	d006      	beq.n	8018ef6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8018ee8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018eec:	f043 0303 	orr.w	r3, r3, #3
 8018ef0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018ef4:	e07d      	b.n	8018ff2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8018ef6:	6a3a      	ldr	r2, [r7, #32]
 8018ef8:	69fb      	ldr	r3, [r7, #28]
 8018efa:	429a      	cmp	r2, r3
 8018efc:	d203      	bcs.n	8018f06 <create_name+0x1da>
 8018efe:	69ba      	ldr	r2, [r7, #24]
 8018f00:	697b      	ldr	r3, [r7, #20]
 8018f02:	429a      	cmp	r2, r3
 8018f04:	d123      	bne.n	8018f4e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8018f06:	69fb      	ldr	r3, [r7, #28]
 8018f08:	2b0b      	cmp	r3, #11
 8018f0a:	d106      	bne.n	8018f1a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8018f0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018f10:	f043 0303 	orr.w	r3, r3, #3
 8018f14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018f18:	e075      	b.n	8019006 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8018f1a:	69ba      	ldr	r2, [r7, #24]
 8018f1c:	697b      	ldr	r3, [r7, #20]
 8018f1e:	429a      	cmp	r2, r3
 8018f20:	d005      	beq.n	8018f2e <create_name+0x202>
 8018f22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018f26:	f043 0303 	orr.w	r3, r3, #3
 8018f2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8018f2e:	69ba      	ldr	r2, [r7, #24]
 8018f30:	697b      	ldr	r3, [r7, #20]
 8018f32:	429a      	cmp	r2, r3
 8018f34:	d866      	bhi.n	8019004 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8018f36:	697b      	ldr	r3, [r7, #20]
 8018f38:	61bb      	str	r3, [r7, #24]
 8018f3a:	2308      	movs	r3, #8
 8018f3c:	623b      	str	r3, [r7, #32]
 8018f3e:	230b      	movs	r3, #11
 8018f40:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8018f42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018f46:	009b      	lsls	r3, r3, #2
 8018f48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018f4c:	e051      	b.n	8018ff2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8018f4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018f50:	2b7f      	cmp	r3, #127	; 0x7f
 8018f52:	d914      	bls.n	8018f7e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8018f54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018f56:	2100      	movs	r1, #0
 8018f58:	4618      	mov	r0, r3
 8018f5a:	f001 f9b1 	bl	801a2c0 <ff_convert>
 8018f5e:	4603      	mov	r3, r0
 8018f60:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8018f62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018f64:	2b00      	cmp	r3, #0
 8018f66:	d004      	beq.n	8018f72 <create_name+0x246>
 8018f68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018f6a:	3b80      	subs	r3, #128	; 0x80
 8018f6c:	4a23      	ldr	r2, [pc, #140]	; (8018ffc <create_name+0x2d0>)
 8018f6e:	5cd3      	ldrb	r3, [r2, r3]
 8018f70:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8018f72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018f76:	f043 0302 	orr.w	r3, r3, #2
 8018f7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8018f7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018f80:	2b00      	cmp	r3, #0
 8018f82:	d007      	beq.n	8018f94 <create_name+0x268>
 8018f84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018f86:	4619      	mov	r1, r3
 8018f88:	481d      	ldr	r0, [pc, #116]	; (8019000 <create_name+0x2d4>)
 8018f8a:	f7fe fbfe 	bl	801778a <chk_chr>
 8018f8e:	4603      	mov	r3, r0
 8018f90:	2b00      	cmp	r3, #0
 8018f92:	d008      	beq.n	8018fa6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8018f94:	235f      	movs	r3, #95	; 0x5f
 8018f96:	84bb      	strh	r3, [r7, #36]	; 0x24
 8018f98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018f9c:	f043 0303 	orr.w	r3, r3, #3
 8018fa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018fa4:	e01b      	b.n	8018fde <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8018fa6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018fa8:	2b40      	cmp	r3, #64	; 0x40
 8018faa:	d909      	bls.n	8018fc0 <create_name+0x294>
 8018fac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018fae:	2b5a      	cmp	r3, #90	; 0x5a
 8018fb0:	d806      	bhi.n	8018fc0 <create_name+0x294>
					b |= 2;
 8018fb2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018fb6:	f043 0302 	orr.w	r3, r3, #2
 8018fba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018fbe:	e00e      	b.n	8018fde <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8018fc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018fc2:	2b60      	cmp	r3, #96	; 0x60
 8018fc4:	d90b      	bls.n	8018fde <create_name+0x2b2>
 8018fc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018fc8:	2b7a      	cmp	r3, #122	; 0x7a
 8018fca:	d808      	bhi.n	8018fde <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8018fcc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018fd0:	f043 0301 	orr.w	r3, r3, #1
 8018fd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018fd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018fda:	3b20      	subs	r3, #32
 8018fdc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8018fde:	6a3b      	ldr	r3, [r7, #32]
 8018fe0:	1c5a      	adds	r2, r3, #1
 8018fe2:	623a      	str	r2, [r7, #32]
 8018fe4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018fe6:	b2d1      	uxtb	r1, r2
 8018fe8:	687a      	ldr	r2, [r7, #4]
 8018fea:	4413      	add	r3, r2
 8018fec:	460a      	mov	r2, r1
 8018fee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8018ff2:	e763      	b.n	8018ebc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8018ff4:	bf00      	nop
 8018ff6:	e006      	b.n	8019006 <create_name+0x2da>
 8018ff8:	0801fe74 	.word	0x0801fe74
 8018ffc:	0801ffc8 	.word	0x0801ffc8
 8019000:	0801fe80 	.word	0x0801fe80
			if (si > di) break;			/* No extension */
 8019004:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8019006:	687b      	ldr	r3, [r7, #4]
 8019008:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801900c:	2be5      	cmp	r3, #229	; 0xe5
 801900e:	d103      	bne.n	8019018 <create_name+0x2ec>
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	2205      	movs	r2, #5
 8019014:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8019018:	69fb      	ldr	r3, [r7, #28]
 801901a:	2b08      	cmp	r3, #8
 801901c:	d104      	bne.n	8019028 <create_name+0x2fc>
 801901e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019022:	009b      	lsls	r3, r3, #2
 8019024:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8019028:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801902c:	f003 030c 	and.w	r3, r3, #12
 8019030:	2b0c      	cmp	r3, #12
 8019032:	d005      	beq.n	8019040 <create_name+0x314>
 8019034:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019038:	f003 0303 	and.w	r3, r3, #3
 801903c:	2b03      	cmp	r3, #3
 801903e:	d105      	bne.n	801904c <create_name+0x320>
 8019040:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019044:	f043 0302 	orr.w	r3, r3, #2
 8019048:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801904c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019050:	f003 0302 	and.w	r3, r3, #2
 8019054:	2b00      	cmp	r3, #0
 8019056:	d117      	bne.n	8019088 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8019058:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801905c:	f003 0303 	and.w	r3, r3, #3
 8019060:	2b01      	cmp	r3, #1
 8019062:	d105      	bne.n	8019070 <create_name+0x344>
 8019064:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019068:	f043 0310 	orr.w	r3, r3, #16
 801906c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8019070:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019074:	f003 030c 	and.w	r3, r3, #12
 8019078:	2b04      	cmp	r3, #4
 801907a:	d105      	bne.n	8019088 <create_name+0x35c>
 801907c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019080:	f043 0308 	orr.w	r3, r3, #8
 8019084:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801908e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8019092:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8019094:	4618      	mov	r0, r3
 8019096:	3728      	adds	r7, #40	; 0x28
 8019098:	46bd      	mov	sp, r7
 801909a:	bd80      	pop	{r7, pc}

0801909c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801909c:	b580      	push	{r7, lr}
 801909e:	b086      	sub	sp, #24
 80190a0:	af00      	add	r7, sp, #0
 80190a2:	6078      	str	r0, [r7, #4]
 80190a4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80190a6:	687b      	ldr	r3, [r7, #4]
 80190a8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80190aa:	693b      	ldr	r3, [r7, #16]
 80190ac:	681b      	ldr	r3, [r3, #0]
 80190ae:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80190b0:	e002      	b.n	80190b8 <follow_path+0x1c>
 80190b2:	683b      	ldr	r3, [r7, #0]
 80190b4:	3301      	adds	r3, #1
 80190b6:	603b      	str	r3, [r7, #0]
 80190b8:	683b      	ldr	r3, [r7, #0]
 80190ba:	781b      	ldrb	r3, [r3, #0]
 80190bc:	2b2f      	cmp	r3, #47	; 0x2f
 80190be:	d0f8      	beq.n	80190b2 <follow_path+0x16>
 80190c0:	683b      	ldr	r3, [r7, #0]
 80190c2:	781b      	ldrb	r3, [r3, #0]
 80190c4:	2b5c      	cmp	r3, #92	; 0x5c
 80190c6:	d0f4      	beq.n	80190b2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80190c8:	693b      	ldr	r3, [r7, #16]
 80190ca:	2200      	movs	r2, #0
 80190cc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80190ce:	683b      	ldr	r3, [r7, #0]
 80190d0:	781b      	ldrb	r3, [r3, #0]
 80190d2:	2b1f      	cmp	r3, #31
 80190d4:	d80a      	bhi.n	80190ec <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80190d6:	687b      	ldr	r3, [r7, #4]
 80190d8:	2280      	movs	r2, #128	; 0x80
 80190da:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80190de:	2100      	movs	r1, #0
 80190e0:	6878      	ldr	r0, [r7, #4]
 80190e2:	f7ff f8fd 	bl	80182e0 <dir_sdi>
 80190e6:	4603      	mov	r3, r0
 80190e8:	75fb      	strb	r3, [r7, #23]
 80190ea:	e048      	b.n	801917e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80190ec:	463b      	mov	r3, r7
 80190ee:	4619      	mov	r1, r3
 80190f0:	6878      	ldr	r0, [r7, #4]
 80190f2:	f7ff fe1b 	bl	8018d2c <create_name>
 80190f6:	4603      	mov	r3, r0
 80190f8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80190fa:	7dfb      	ldrb	r3, [r7, #23]
 80190fc:	2b00      	cmp	r3, #0
 80190fe:	d139      	bne.n	8019174 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8019100:	6878      	ldr	r0, [r7, #4]
 8019102:	f7ff fc5a 	bl	80189ba <dir_find>
 8019106:	4603      	mov	r3, r0
 8019108:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801910a:	687b      	ldr	r3, [r7, #4]
 801910c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8019110:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8019112:	7dfb      	ldrb	r3, [r7, #23]
 8019114:	2b00      	cmp	r3, #0
 8019116:	d00a      	beq.n	801912e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8019118:	7dfb      	ldrb	r3, [r7, #23]
 801911a:	2b04      	cmp	r3, #4
 801911c:	d12c      	bne.n	8019178 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801911e:	7afb      	ldrb	r3, [r7, #11]
 8019120:	f003 0304 	and.w	r3, r3, #4
 8019124:	2b00      	cmp	r3, #0
 8019126:	d127      	bne.n	8019178 <follow_path+0xdc>
 8019128:	2305      	movs	r3, #5
 801912a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801912c:	e024      	b.n	8019178 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801912e:	7afb      	ldrb	r3, [r7, #11]
 8019130:	f003 0304 	and.w	r3, r3, #4
 8019134:	2b00      	cmp	r3, #0
 8019136:	d121      	bne.n	801917c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8019138:	693b      	ldr	r3, [r7, #16]
 801913a:	799b      	ldrb	r3, [r3, #6]
 801913c:	f003 0310 	and.w	r3, r3, #16
 8019140:	2b00      	cmp	r3, #0
 8019142:	d102      	bne.n	801914a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8019144:	2305      	movs	r3, #5
 8019146:	75fb      	strb	r3, [r7, #23]
 8019148:	e019      	b.n	801917e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801914a:	68fb      	ldr	r3, [r7, #12]
 801914c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8019150:	687b      	ldr	r3, [r7, #4]
 8019152:	695b      	ldr	r3, [r3, #20]
 8019154:	68fa      	ldr	r2, [r7, #12]
 8019156:	8992      	ldrh	r2, [r2, #12]
 8019158:	fbb3 f0f2 	udiv	r0, r3, r2
 801915c:	fb00 f202 	mul.w	r2, r0, r2
 8019160:	1a9b      	subs	r3, r3, r2
 8019162:	440b      	add	r3, r1
 8019164:	4619      	mov	r1, r3
 8019166:	68f8      	ldr	r0, [r7, #12]
 8019168:	f7ff fa60 	bl	801862c <ld_clust>
 801916c:	4602      	mov	r2, r0
 801916e:	693b      	ldr	r3, [r7, #16]
 8019170:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8019172:	e7bb      	b.n	80190ec <follow_path+0x50>
			if (res != FR_OK) break;
 8019174:	bf00      	nop
 8019176:	e002      	b.n	801917e <follow_path+0xe2>
				break;
 8019178:	bf00      	nop
 801917a:	e000      	b.n	801917e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801917c:	bf00      	nop
			}
		}
	}

	return res;
 801917e:	7dfb      	ldrb	r3, [r7, #23]
}
 8019180:	4618      	mov	r0, r3
 8019182:	3718      	adds	r7, #24
 8019184:	46bd      	mov	sp, r7
 8019186:	bd80      	pop	{r7, pc}

08019188 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8019188:	b480      	push	{r7}
 801918a:	b087      	sub	sp, #28
 801918c:	af00      	add	r7, sp, #0
 801918e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8019190:	f04f 33ff 	mov.w	r3, #4294967295
 8019194:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8019196:	687b      	ldr	r3, [r7, #4]
 8019198:	681b      	ldr	r3, [r3, #0]
 801919a:	2b00      	cmp	r3, #0
 801919c:	d031      	beq.n	8019202 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801919e:	687b      	ldr	r3, [r7, #4]
 80191a0:	681b      	ldr	r3, [r3, #0]
 80191a2:	617b      	str	r3, [r7, #20]
 80191a4:	e002      	b.n	80191ac <get_ldnumber+0x24>
 80191a6:	697b      	ldr	r3, [r7, #20]
 80191a8:	3301      	adds	r3, #1
 80191aa:	617b      	str	r3, [r7, #20]
 80191ac:	697b      	ldr	r3, [r7, #20]
 80191ae:	781b      	ldrb	r3, [r3, #0]
 80191b0:	2b1f      	cmp	r3, #31
 80191b2:	d903      	bls.n	80191bc <get_ldnumber+0x34>
 80191b4:	697b      	ldr	r3, [r7, #20]
 80191b6:	781b      	ldrb	r3, [r3, #0]
 80191b8:	2b3a      	cmp	r3, #58	; 0x3a
 80191ba:	d1f4      	bne.n	80191a6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80191bc:	697b      	ldr	r3, [r7, #20]
 80191be:	781b      	ldrb	r3, [r3, #0]
 80191c0:	2b3a      	cmp	r3, #58	; 0x3a
 80191c2:	d11c      	bne.n	80191fe <get_ldnumber+0x76>
			tp = *path;
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	681b      	ldr	r3, [r3, #0]
 80191c8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80191ca:	68fb      	ldr	r3, [r7, #12]
 80191cc:	1c5a      	adds	r2, r3, #1
 80191ce:	60fa      	str	r2, [r7, #12]
 80191d0:	781b      	ldrb	r3, [r3, #0]
 80191d2:	3b30      	subs	r3, #48	; 0x30
 80191d4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80191d6:	68bb      	ldr	r3, [r7, #8]
 80191d8:	2b09      	cmp	r3, #9
 80191da:	d80e      	bhi.n	80191fa <get_ldnumber+0x72>
 80191dc:	68fa      	ldr	r2, [r7, #12]
 80191de:	697b      	ldr	r3, [r7, #20]
 80191e0:	429a      	cmp	r2, r3
 80191e2:	d10a      	bne.n	80191fa <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80191e4:	68bb      	ldr	r3, [r7, #8]
 80191e6:	2b00      	cmp	r3, #0
 80191e8:	d107      	bne.n	80191fa <get_ldnumber+0x72>
					vol = (int)i;
 80191ea:	68bb      	ldr	r3, [r7, #8]
 80191ec:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80191ee:	697b      	ldr	r3, [r7, #20]
 80191f0:	3301      	adds	r3, #1
 80191f2:	617b      	str	r3, [r7, #20]
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	697a      	ldr	r2, [r7, #20]
 80191f8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80191fa:	693b      	ldr	r3, [r7, #16]
 80191fc:	e002      	b.n	8019204 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80191fe:	2300      	movs	r3, #0
 8019200:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8019202:	693b      	ldr	r3, [r7, #16]
}
 8019204:	4618      	mov	r0, r3
 8019206:	371c      	adds	r7, #28
 8019208:	46bd      	mov	sp, r7
 801920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801920e:	4770      	bx	lr

08019210 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8019210:	b580      	push	{r7, lr}
 8019212:	b082      	sub	sp, #8
 8019214:	af00      	add	r7, sp, #0
 8019216:	6078      	str	r0, [r7, #4]
 8019218:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	2200      	movs	r2, #0
 801921e:	70da      	strb	r2, [r3, #3]
 8019220:	687b      	ldr	r3, [r7, #4]
 8019222:	f04f 32ff 	mov.w	r2, #4294967295
 8019226:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8019228:	6839      	ldr	r1, [r7, #0]
 801922a:	6878      	ldr	r0, [r7, #4]
 801922c:	f7fe fc78 	bl	8017b20 <move_window>
 8019230:	4603      	mov	r3, r0
 8019232:	2b00      	cmp	r3, #0
 8019234:	d001      	beq.n	801923a <check_fs+0x2a>
 8019236:	2304      	movs	r3, #4
 8019238:	e038      	b.n	80192ac <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801923a:	687b      	ldr	r3, [r7, #4]
 801923c:	3338      	adds	r3, #56	; 0x38
 801923e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8019242:	4618      	mov	r0, r3
 8019244:	f7fe f9bc 	bl	80175c0 <ld_word>
 8019248:	4603      	mov	r3, r0
 801924a:	461a      	mov	r2, r3
 801924c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8019250:	429a      	cmp	r2, r3
 8019252:	d001      	beq.n	8019258 <check_fs+0x48>
 8019254:	2303      	movs	r3, #3
 8019256:	e029      	b.n	80192ac <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8019258:	687b      	ldr	r3, [r7, #4]
 801925a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801925e:	2be9      	cmp	r3, #233	; 0xe9
 8019260:	d009      	beq.n	8019276 <check_fs+0x66>
 8019262:	687b      	ldr	r3, [r7, #4]
 8019264:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8019268:	2beb      	cmp	r3, #235	; 0xeb
 801926a:	d11e      	bne.n	80192aa <check_fs+0x9a>
 801926c:	687b      	ldr	r3, [r7, #4]
 801926e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8019272:	2b90      	cmp	r3, #144	; 0x90
 8019274:	d119      	bne.n	80192aa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8019276:	687b      	ldr	r3, [r7, #4]
 8019278:	3338      	adds	r3, #56	; 0x38
 801927a:	3336      	adds	r3, #54	; 0x36
 801927c:	4618      	mov	r0, r3
 801927e:	f7fe f9b7 	bl	80175f0 <ld_dword>
 8019282:	4603      	mov	r3, r0
 8019284:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8019288:	4a0a      	ldr	r2, [pc, #40]	; (80192b4 <check_fs+0xa4>)
 801928a:	4293      	cmp	r3, r2
 801928c:	d101      	bne.n	8019292 <check_fs+0x82>
 801928e:	2300      	movs	r3, #0
 8019290:	e00c      	b.n	80192ac <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	3338      	adds	r3, #56	; 0x38
 8019296:	3352      	adds	r3, #82	; 0x52
 8019298:	4618      	mov	r0, r3
 801929a:	f7fe f9a9 	bl	80175f0 <ld_dword>
 801929e:	4603      	mov	r3, r0
 80192a0:	4a05      	ldr	r2, [pc, #20]	; (80192b8 <check_fs+0xa8>)
 80192a2:	4293      	cmp	r3, r2
 80192a4:	d101      	bne.n	80192aa <check_fs+0x9a>
 80192a6:	2300      	movs	r3, #0
 80192a8:	e000      	b.n	80192ac <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80192aa:	2302      	movs	r3, #2
}
 80192ac:	4618      	mov	r0, r3
 80192ae:	3708      	adds	r7, #8
 80192b0:	46bd      	mov	sp, r7
 80192b2:	bd80      	pop	{r7, pc}
 80192b4:	00544146 	.word	0x00544146
 80192b8:	33544146 	.word	0x33544146

080192bc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80192bc:	b580      	push	{r7, lr}
 80192be:	b096      	sub	sp, #88	; 0x58
 80192c0:	af00      	add	r7, sp, #0
 80192c2:	60f8      	str	r0, [r7, #12]
 80192c4:	60b9      	str	r1, [r7, #8]
 80192c6:	4613      	mov	r3, r2
 80192c8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80192ca:	68bb      	ldr	r3, [r7, #8]
 80192cc:	2200      	movs	r2, #0
 80192ce:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80192d0:	68f8      	ldr	r0, [r7, #12]
 80192d2:	f7ff ff59 	bl	8019188 <get_ldnumber>
 80192d6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80192d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80192da:	2b00      	cmp	r3, #0
 80192dc:	da01      	bge.n	80192e2 <find_volume+0x26>
 80192de:	230b      	movs	r3, #11
 80192e0:	e265      	b.n	80197ae <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80192e2:	4a9f      	ldr	r2, [pc, #636]	; (8019560 <find_volume+0x2a4>)
 80192e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80192e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80192ea:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80192ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	d101      	bne.n	80192f6 <find_volume+0x3a>
 80192f2:	230c      	movs	r3, #12
 80192f4:	e25b      	b.n	80197ae <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80192f6:	68bb      	ldr	r3, [r7, #8]
 80192f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80192fa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80192fc:	79fb      	ldrb	r3, [r7, #7]
 80192fe:	f023 0301 	bic.w	r3, r3, #1
 8019302:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8019304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019306:	781b      	ldrb	r3, [r3, #0]
 8019308:	2b00      	cmp	r3, #0
 801930a:	d01a      	beq.n	8019342 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801930c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801930e:	785b      	ldrb	r3, [r3, #1]
 8019310:	4618      	mov	r0, r3
 8019312:	f7fe f8b7 	bl	8017484 <disk_status>
 8019316:	4603      	mov	r3, r0
 8019318:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801931c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8019320:	f003 0301 	and.w	r3, r3, #1
 8019324:	2b00      	cmp	r3, #0
 8019326:	d10c      	bne.n	8019342 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8019328:	79fb      	ldrb	r3, [r7, #7]
 801932a:	2b00      	cmp	r3, #0
 801932c:	d007      	beq.n	801933e <find_volume+0x82>
 801932e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8019332:	f003 0304 	and.w	r3, r3, #4
 8019336:	2b00      	cmp	r3, #0
 8019338:	d001      	beq.n	801933e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801933a:	230a      	movs	r3, #10
 801933c:	e237      	b.n	80197ae <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 801933e:	2300      	movs	r3, #0
 8019340:	e235      	b.n	80197ae <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8019342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019344:	2200      	movs	r2, #0
 8019346:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8019348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801934a:	b2da      	uxtb	r2, r3
 801934c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801934e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8019350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019352:	785b      	ldrb	r3, [r3, #1]
 8019354:	4618      	mov	r0, r3
 8019356:	f7fe f8af 	bl	80174b8 <disk_initialize>
 801935a:	4603      	mov	r3, r0
 801935c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8019360:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8019364:	f003 0301 	and.w	r3, r3, #1
 8019368:	2b00      	cmp	r3, #0
 801936a:	d001      	beq.n	8019370 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801936c:	2303      	movs	r3, #3
 801936e:	e21e      	b.n	80197ae <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8019370:	79fb      	ldrb	r3, [r7, #7]
 8019372:	2b00      	cmp	r3, #0
 8019374:	d007      	beq.n	8019386 <find_volume+0xca>
 8019376:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801937a:	f003 0304 	and.w	r3, r3, #4
 801937e:	2b00      	cmp	r3, #0
 8019380:	d001      	beq.n	8019386 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8019382:	230a      	movs	r3, #10
 8019384:	e213      	b.n	80197ae <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8019386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019388:	7858      	ldrb	r0, [r3, #1]
 801938a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801938c:	330c      	adds	r3, #12
 801938e:	461a      	mov	r2, r3
 8019390:	2102      	movs	r1, #2
 8019392:	f7fe f8f7 	bl	8017584 <disk_ioctl>
 8019396:	4603      	mov	r3, r0
 8019398:	2b00      	cmp	r3, #0
 801939a:	d001      	beq.n	80193a0 <find_volume+0xe4>
 801939c:	2301      	movs	r3, #1
 801939e:	e206      	b.n	80197ae <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80193a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193a2:	899b      	ldrh	r3, [r3, #12]
 80193a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80193a8:	d80d      	bhi.n	80193c6 <find_volume+0x10a>
 80193aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193ac:	899b      	ldrh	r3, [r3, #12]
 80193ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80193b2:	d308      	bcc.n	80193c6 <find_volume+0x10a>
 80193b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193b6:	899b      	ldrh	r3, [r3, #12]
 80193b8:	461a      	mov	r2, r3
 80193ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193bc:	899b      	ldrh	r3, [r3, #12]
 80193be:	3b01      	subs	r3, #1
 80193c0:	4013      	ands	r3, r2
 80193c2:	2b00      	cmp	r3, #0
 80193c4:	d001      	beq.n	80193ca <find_volume+0x10e>
 80193c6:	2301      	movs	r3, #1
 80193c8:	e1f1      	b.n	80197ae <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80193ca:	2300      	movs	r3, #0
 80193cc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80193ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80193d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80193d2:	f7ff ff1d 	bl	8019210 <check_fs>
 80193d6:	4603      	mov	r3, r0
 80193d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80193dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80193e0:	2b02      	cmp	r3, #2
 80193e2:	d149      	bne.n	8019478 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80193e4:	2300      	movs	r3, #0
 80193e6:	643b      	str	r3, [r7, #64]	; 0x40
 80193e8:	e01e      	b.n	8019428 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80193ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193ec:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80193f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80193f2:	011b      	lsls	r3, r3, #4
 80193f4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80193f8:	4413      	add	r3, r2
 80193fa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80193fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193fe:	3304      	adds	r3, #4
 8019400:	781b      	ldrb	r3, [r3, #0]
 8019402:	2b00      	cmp	r3, #0
 8019404:	d006      	beq.n	8019414 <find_volume+0x158>
 8019406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019408:	3308      	adds	r3, #8
 801940a:	4618      	mov	r0, r3
 801940c:	f7fe f8f0 	bl	80175f0 <ld_dword>
 8019410:	4602      	mov	r2, r0
 8019412:	e000      	b.n	8019416 <find_volume+0x15a>
 8019414:	2200      	movs	r2, #0
 8019416:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019418:	009b      	lsls	r3, r3, #2
 801941a:	3358      	adds	r3, #88	; 0x58
 801941c:	443b      	add	r3, r7
 801941e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8019422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019424:	3301      	adds	r3, #1
 8019426:	643b      	str	r3, [r7, #64]	; 0x40
 8019428:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801942a:	2b03      	cmp	r3, #3
 801942c:	d9dd      	bls.n	80193ea <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801942e:	2300      	movs	r3, #0
 8019430:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8019432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019434:	2b00      	cmp	r3, #0
 8019436:	d002      	beq.n	801943e <find_volume+0x182>
 8019438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801943a:	3b01      	subs	r3, #1
 801943c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801943e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019440:	009b      	lsls	r3, r3, #2
 8019442:	3358      	adds	r3, #88	; 0x58
 8019444:	443b      	add	r3, r7
 8019446:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801944a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801944c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801944e:	2b00      	cmp	r3, #0
 8019450:	d005      	beq.n	801945e <find_volume+0x1a2>
 8019452:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8019454:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019456:	f7ff fedb 	bl	8019210 <check_fs>
 801945a:	4603      	mov	r3, r0
 801945c:	e000      	b.n	8019460 <find_volume+0x1a4>
 801945e:	2303      	movs	r3, #3
 8019460:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8019464:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019468:	2b01      	cmp	r3, #1
 801946a:	d905      	bls.n	8019478 <find_volume+0x1bc>
 801946c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801946e:	3301      	adds	r3, #1
 8019470:	643b      	str	r3, [r7, #64]	; 0x40
 8019472:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019474:	2b03      	cmp	r3, #3
 8019476:	d9e2      	bls.n	801943e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8019478:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801947c:	2b04      	cmp	r3, #4
 801947e:	d101      	bne.n	8019484 <find_volume+0x1c8>
 8019480:	2301      	movs	r3, #1
 8019482:	e194      	b.n	80197ae <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8019484:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019488:	2b01      	cmp	r3, #1
 801948a:	d901      	bls.n	8019490 <find_volume+0x1d4>
 801948c:	230d      	movs	r3, #13
 801948e:	e18e      	b.n	80197ae <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8019490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019492:	3338      	adds	r3, #56	; 0x38
 8019494:	330b      	adds	r3, #11
 8019496:	4618      	mov	r0, r3
 8019498:	f7fe f892 	bl	80175c0 <ld_word>
 801949c:	4603      	mov	r3, r0
 801949e:	461a      	mov	r2, r3
 80194a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194a2:	899b      	ldrh	r3, [r3, #12]
 80194a4:	429a      	cmp	r2, r3
 80194a6:	d001      	beq.n	80194ac <find_volume+0x1f0>
 80194a8:	230d      	movs	r3, #13
 80194aa:	e180      	b.n	80197ae <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80194ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194ae:	3338      	adds	r3, #56	; 0x38
 80194b0:	3316      	adds	r3, #22
 80194b2:	4618      	mov	r0, r3
 80194b4:	f7fe f884 	bl	80175c0 <ld_word>
 80194b8:	4603      	mov	r3, r0
 80194ba:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80194bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80194be:	2b00      	cmp	r3, #0
 80194c0:	d106      	bne.n	80194d0 <find_volume+0x214>
 80194c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194c4:	3338      	adds	r3, #56	; 0x38
 80194c6:	3324      	adds	r3, #36	; 0x24
 80194c8:	4618      	mov	r0, r3
 80194ca:	f7fe f891 	bl	80175f0 <ld_dword>
 80194ce:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80194d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80194d4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80194d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194d8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80194dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194de:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80194e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194e2:	789b      	ldrb	r3, [r3, #2]
 80194e4:	2b01      	cmp	r3, #1
 80194e6:	d005      	beq.n	80194f4 <find_volume+0x238>
 80194e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194ea:	789b      	ldrb	r3, [r3, #2]
 80194ec:	2b02      	cmp	r3, #2
 80194ee:	d001      	beq.n	80194f4 <find_volume+0x238>
 80194f0:	230d      	movs	r3, #13
 80194f2:	e15c      	b.n	80197ae <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80194f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194f6:	789b      	ldrb	r3, [r3, #2]
 80194f8:	461a      	mov	r2, r3
 80194fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80194fc:	fb02 f303 	mul.w	r3, r2, r3
 8019500:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8019502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019504:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019508:	b29a      	uxth	r2, r3
 801950a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801950c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801950e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019510:	895b      	ldrh	r3, [r3, #10]
 8019512:	2b00      	cmp	r3, #0
 8019514:	d008      	beq.n	8019528 <find_volume+0x26c>
 8019516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019518:	895b      	ldrh	r3, [r3, #10]
 801951a:	461a      	mov	r2, r3
 801951c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801951e:	895b      	ldrh	r3, [r3, #10]
 8019520:	3b01      	subs	r3, #1
 8019522:	4013      	ands	r3, r2
 8019524:	2b00      	cmp	r3, #0
 8019526:	d001      	beq.n	801952c <find_volume+0x270>
 8019528:	230d      	movs	r3, #13
 801952a:	e140      	b.n	80197ae <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801952c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801952e:	3338      	adds	r3, #56	; 0x38
 8019530:	3311      	adds	r3, #17
 8019532:	4618      	mov	r0, r3
 8019534:	f7fe f844 	bl	80175c0 <ld_word>
 8019538:	4603      	mov	r3, r0
 801953a:	461a      	mov	r2, r3
 801953c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801953e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8019540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019542:	891b      	ldrh	r3, [r3, #8]
 8019544:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019546:	8992      	ldrh	r2, [r2, #12]
 8019548:	0952      	lsrs	r2, r2, #5
 801954a:	b292      	uxth	r2, r2
 801954c:	fbb3 f1f2 	udiv	r1, r3, r2
 8019550:	fb01 f202 	mul.w	r2, r1, r2
 8019554:	1a9b      	subs	r3, r3, r2
 8019556:	b29b      	uxth	r3, r3
 8019558:	2b00      	cmp	r3, #0
 801955a:	d003      	beq.n	8019564 <find_volume+0x2a8>
 801955c:	230d      	movs	r3, #13
 801955e:	e126      	b.n	80197ae <find_volume+0x4f2>
 8019560:	240016a8 	.word	0x240016a8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8019564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019566:	3338      	adds	r3, #56	; 0x38
 8019568:	3313      	adds	r3, #19
 801956a:	4618      	mov	r0, r3
 801956c:	f7fe f828 	bl	80175c0 <ld_word>
 8019570:	4603      	mov	r3, r0
 8019572:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8019574:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019576:	2b00      	cmp	r3, #0
 8019578:	d106      	bne.n	8019588 <find_volume+0x2cc>
 801957a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801957c:	3338      	adds	r3, #56	; 0x38
 801957e:	3320      	adds	r3, #32
 8019580:	4618      	mov	r0, r3
 8019582:	f7fe f835 	bl	80175f0 <ld_dword>
 8019586:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8019588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801958a:	3338      	adds	r3, #56	; 0x38
 801958c:	330e      	adds	r3, #14
 801958e:	4618      	mov	r0, r3
 8019590:	f7fe f816 	bl	80175c0 <ld_word>
 8019594:	4603      	mov	r3, r0
 8019596:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8019598:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801959a:	2b00      	cmp	r3, #0
 801959c:	d101      	bne.n	80195a2 <find_volume+0x2e6>
 801959e:	230d      	movs	r3, #13
 80195a0:	e105      	b.n	80197ae <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80195a2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80195a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80195a6:	4413      	add	r3, r2
 80195a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80195aa:	8911      	ldrh	r1, [r2, #8]
 80195ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80195ae:	8992      	ldrh	r2, [r2, #12]
 80195b0:	0952      	lsrs	r2, r2, #5
 80195b2:	b292      	uxth	r2, r2
 80195b4:	fbb1 f2f2 	udiv	r2, r1, r2
 80195b8:	b292      	uxth	r2, r2
 80195ba:	4413      	add	r3, r2
 80195bc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80195be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80195c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195c2:	429a      	cmp	r2, r3
 80195c4:	d201      	bcs.n	80195ca <find_volume+0x30e>
 80195c6:	230d      	movs	r3, #13
 80195c8:	e0f1      	b.n	80197ae <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80195ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80195cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195ce:	1ad3      	subs	r3, r2, r3
 80195d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80195d2:	8952      	ldrh	r2, [r2, #10]
 80195d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80195d8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80195da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195dc:	2b00      	cmp	r3, #0
 80195de:	d101      	bne.n	80195e4 <find_volume+0x328>
 80195e0:	230d      	movs	r3, #13
 80195e2:	e0e4      	b.n	80197ae <find_volume+0x4f2>
		fmt = FS_FAT32;
 80195e4:	2303      	movs	r3, #3
 80195e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80195ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195ec:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80195f0:	4293      	cmp	r3, r2
 80195f2:	d802      	bhi.n	80195fa <find_volume+0x33e>
 80195f4:	2302      	movs	r3, #2
 80195f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80195fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195fc:	f640 72f5 	movw	r2, #4085	; 0xff5
 8019600:	4293      	cmp	r3, r2
 8019602:	d802      	bhi.n	801960a <find_volume+0x34e>
 8019604:	2301      	movs	r3, #1
 8019606:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801960a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801960c:	1c9a      	adds	r2, r3, #2
 801960e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019610:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8019612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019614:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019616:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8019618:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801961a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801961c:	441a      	add	r2, r3
 801961e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019620:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8019622:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019626:	441a      	add	r2, r3
 8019628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801962a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 801962c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019630:	2b03      	cmp	r3, #3
 8019632:	d11e      	bne.n	8019672 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8019634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019636:	3338      	adds	r3, #56	; 0x38
 8019638:	332a      	adds	r3, #42	; 0x2a
 801963a:	4618      	mov	r0, r3
 801963c:	f7fd ffc0 	bl	80175c0 <ld_word>
 8019640:	4603      	mov	r3, r0
 8019642:	2b00      	cmp	r3, #0
 8019644:	d001      	beq.n	801964a <find_volume+0x38e>
 8019646:	230d      	movs	r3, #13
 8019648:	e0b1      	b.n	80197ae <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801964a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801964c:	891b      	ldrh	r3, [r3, #8]
 801964e:	2b00      	cmp	r3, #0
 8019650:	d001      	beq.n	8019656 <find_volume+0x39a>
 8019652:	230d      	movs	r3, #13
 8019654:	e0ab      	b.n	80197ae <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8019656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019658:	3338      	adds	r3, #56	; 0x38
 801965a:	332c      	adds	r3, #44	; 0x2c
 801965c:	4618      	mov	r0, r3
 801965e:	f7fd ffc7 	bl	80175f0 <ld_dword>
 8019662:	4602      	mov	r2, r0
 8019664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019666:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8019668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801966a:	69db      	ldr	r3, [r3, #28]
 801966c:	009b      	lsls	r3, r3, #2
 801966e:	647b      	str	r3, [r7, #68]	; 0x44
 8019670:	e01f      	b.n	80196b2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8019672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019674:	891b      	ldrh	r3, [r3, #8]
 8019676:	2b00      	cmp	r3, #0
 8019678:	d101      	bne.n	801967e <find_volume+0x3c2>
 801967a:	230d      	movs	r3, #13
 801967c:	e097      	b.n	80197ae <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801967e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019680:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8019682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019684:	441a      	add	r2, r3
 8019686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019688:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801968a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801968e:	2b02      	cmp	r3, #2
 8019690:	d103      	bne.n	801969a <find_volume+0x3de>
 8019692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019694:	69db      	ldr	r3, [r3, #28]
 8019696:	005b      	lsls	r3, r3, #1
 8019698:	e00a      	b.n	80196b0 <find_volume+0x3f4>
 801969a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801969c:	69da      	ldr	r2, [r3, #28]
 801969e:	4613      	mov	r3, r2
 80196a0:	005b      	lsls	r3, r3, #1
 80196a2:	4413      	add	r3, r2
 80196a4:	085a      	lsrs	r2, r3, #1
 80196a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196a8:	69db      	ldr	r3, [r3, #28]
 80196aa:	f003 0301 	and.w	r3, r3, #1
 80196ae:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80196b0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80196b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196b4:	6a1a      	ldr	r2, [r3, #32]
 80196b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196b8:	899b      	ldrh	r3, [r3, #12]
 80196ba:	4619      	mov	r1, r3
 80196bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80196be:	440b      	add	r3, r1
 80196c0:	3b01      	subs	r3, #1
 80196c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80196c4:	8989      	ldrh	r1, [r1, #12]
 80196c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80196ca:	429a      	cmp	r2, r3
 80196cc:	d201      	bcs.n	80196d2 <find_volume+0x416>
 80196ce:	230d      	movs	r3, #13
 80196d0:	e06d      	b.n	80197ae <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80196d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196d4:	f04f 32ff 	mov.w	r2, #4294967295
 80196d8:	619a      	str	r2, [r3, #24]
 80196da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196dc:	699a      	ldr	r2, [r3, #24]
 80196de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196e0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80196e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196e4:	2280      	movs	r2, #128	; 0x80
 80196e6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80196e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80196ec:	2b03      	cmp	r3, #3
 80196ee:	d149      	bne.n	8019784 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80196f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196f2:	3338      	adds	r3, #56	; 0x38
 80196f4:	3330      	adds	r3, #48	; 0x30
 80196f6:	4618      	mov	r0, r3
 80196f8:	f7fd ff62 	bl	80175c0 <ld_word>
 80196fc:	4603      	mov	r3, r0
 80196fe:	2b01      	cmp	r3, #1
 8019700:	d140      	bne.n	8019784 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8019702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019704:	3301      	adds	r3, #1
 8019706:	4619      	mov	r1, r3
 8019708:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801970a:	f7fe fa09 	bl	8017b20 <move_window>
 801970e:	4603      	mov	r3, r0
 8019710:	2b00      	cmp	r3, #0
 8019712:	d137      	bne.n	8019784 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8019714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019716:	2200      	movs	r2, #0
 8019718:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801971a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801971c:	3338      	adds	r3, #56	; 0x38
 801971e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8019722:	4618      	mov	r0, r3
 8019724:	f7fd ff4c 	bl	80175c0 <ld_word>
 8019728:	4603      	mov	r3, r0
 801972a:	461a      	mov	r2, r3
 801972c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8019730:	429a      	cmp	r2, r3
 8019732:	d127      	bne.n	8019784 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8019734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019736:	3338      	adds	r3, #56	; 0x38
 8019738:	4618      	mov	r0, r3
 801973a:	f7fd ff59 	bl	80175f0 <ld_dword>
 801973e:	4603      	mov	r3, r0
 8019740:	4a1d      	ldr	r2, [pc, #116]	; (80197b8 <find_volume+0x4fc>)
 8019742:	4293      	cmp	r3, r2
 8019744:	d11e      	bne.n	8019784 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8019746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019748:	3338      	adds	r3, #56	; 0x38
 801974a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801974e:	4618      	mov	r0, r3
 8019750:	f7fd ff4e 	bl	80175f0 <ld_dword>
 8019754:	4603      	mov	r3, r0
 8019756:	4a19      	ldr	r2, [pc, #100]	; (80197bc <find_volume+0x500>)
 8019758:	4293      	cmp	r3, r2
 801975a:	d113      	bne.n	8019784 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801975c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801975e:	3338      	adds	r3, #56	; 0x38
 8019760:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8019764:	4618      	mov	r0, r3
 8019766:	f7fd ff43 	bl	80175f0 <ld_dword>
 801976a:	4602      	mov	r2, r0
 801976c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801976e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8019770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019772:	3338      	adds	r3, #56	; 0x38
 8019774:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8019778:	4618      	mov	r0, r3
 801977a:	f7fd ff39 	bl	80175f0 <ld_dword>
 801977e:	4602      	mov	r2, r0
 8019780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019782:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8019784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019786:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801978a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801978c:	4b0c      	ldr	r3, [pc, #48]	; (80197c0 <find_volume+0x504>)
 801978e:	881b      	ldrh	r3, [r3, #0]
 8019790:	3301      	adds	r3, #1
 8019792:	b29a      	uxth	r2, r3
 8019794:	4b0a      	ldr	r3, [pc, #40]	; (80197c0 <find_volume+0x504>)
 8019796:	801a      	strh	r2, [r3, #0]
 8019798:	4b09      	ldr	r3, [pc, #36]	; (80197c0 <find_volume+0x504>)
 801979a:	881a      	ldrh	r2, [r3, #0]
 801979c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801979e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80197a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197a2:	4a08      	ldr	r2, [pc, #32]	; (80197c4 <find_volume+0x508>)
 80197a4:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80197a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80197a8:	f7fe f952 	bl	8017a50 <clear_lock>
#endif
	return FR_OK;
 80197ac:	2300      	movs	r3, #0
}
 80197ae:	4618      	mov	r0, r3
 80197b0:	3758      	adds	r7, #88	; 0x58
 80197b2:	46bd      	mov	sp, r7
 80197b4:	bd80      	pop	{r7, pc}
 80197b6:	bf00      	nop
 80197b8:	41615252 	.word	0x41615252
 80197bc:	61417272 	.word	0x61417272
 80197c0:	240016ac 	.word	0x240016ac
 80197c4:	240016d0 	.word	0x240016d0

080197c8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80197c8:	b580      	push	{r7, lr}
 80197ca:	b084      	sub	sp, #16
 80197cc:	af00      	add	r7, sp, #0
 80197ce:	6078      	str	r0, [r7, #4]
 80197d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80197d2:	2309      	movs	r3, #9
 80197d4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80197d6:	687b      	ldr	r3, [r7, #4]
 80197d8:	2b00      	cmp	r3, #0
 80197da:	d01c      	beq.n	8019816 <validate+0x4e>
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	681b      	ldr	r3, [r3, #0]
 80197e0:	2b00      	cmp	r3, #0
 80197e2:	d018      	beq.n	8019816 <validate+0x4e>
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	681b      	ldr	r3, [r3, #0]
 80197e8:	781b      	ldrb	r3, [r3, #0]
 80197ea:	2b00      	cmp	r3, #0
 80197ec:	d013      	beq.n	8019816 <validate+0x4e>
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	889a      	ldrh	r2, [r3, #4]
 80197f2:	687b      	ldr	r3, [r7, #4]
 80197f4:	681b      	ldr	r3, [r3, #0]
 80197f6:	88db      	ldrh	r3, [r3, #6]
 80197f8:	429a      	cmp	r2, r3
 80197fa:	d10c      	bne.n	8019816 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	681b      	ldr	r3, [r3, #0]
 8019800:	785b      	ldrb	r3, [r3, #1]
 8019802:	4618      	mov	r0, r3
 8019804:	f7fd fe3e 	bl	8017484 <disk_status>
 8019808:	4603      	mov	r3, r0
 801980a:	f003 0301 	and.w	r3, r3, #1
 801980e:	2b00      	cmp	r3, #0
 8019810:	d101      	bne.n	8019816 <validate+0x4e>
			res = FR_OK;
 8019812:	2300      	movs	r3, #0
 8019814:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8019816:	7bfb      	ldrb	r3, [r7, #15]
 8019818:	2b00      	cmp	r3, #0
 801981a:	d102      	bne.n	8019822 <validate+0x5a>
 801981c:	687b      	ldr	r3, [r7, #4]
 801981e:	681b      	ldr	r3, [r3, #0]
 8019820:	e000      	b.n	8019824 <validate+0x5c>
 8019822:	2300      	movs	r3, #0
 8019824:	683a      	ldr	r2, [r7, #0]
 8019826:	6013      	str	r3, [r2, #0]
	return res;
 8019828:	7bfb      	ldrb	r3, [r7, #15]
}
 801982a:	4618      	mov	r0, r3
 801982c:	3710      	adds	r7, #16
 801982e:	46bd      	mov	sp, r7
 8019830:	bd80      	pop	{r7, pc}
	...

08019834 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8019834:	b580      	push	{r7, lr}
 8019836:	b088      	sub	sp, #32
 8019838:	af00      	add	r7, sp, #0
 801983a:	60f8      	str	r0, [r7, #12]
 801983c:	60b9      	str	r1, [r7, #8]
 801983e:	4613      	mov	r3, r2
 8019840:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8019842:	68bb      	ldr	r3, [r7, #8]
 8019844:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8019846:	f107 0310 	add.w	r3, r7, #16
 801984a:	4618      	mov	r0, r3
 801984c:	f7ff fc9c 	bl	8019188 <get_ldnumber>
 8019850:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8019852:	69fb      	ldr	r3, [r7, #28]
 8019854:	2b00      	cmp	r3, #0
 8019856:	da01      	bge.n	801985c <f_mount+0x28>
 8019858:	230b      	movs	r3, #11
 801985a:	e02b      	b.n	80198b4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801985c:	4a17      	ldr	r2, [pc, #92]	; (80198bc <f_mount+0x88>)
 801985e:	69fb      	ldr	r3, [r7, #28]
 8019860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019864:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8019866:	69bb      	ldr	r3, [r7, #24]
 8019868:	2b00      	cmp	r3, #0
 801986a:	d005      	beq.n	8019878 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801986c:	69b8      	ldr	r0, [r7, #24]
 801986e:	f7fe f8ef 	bl	8017a50 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8019872:	69bb      	ldr	r3, [r7, #24]
 8019874:	2200      	movs	r2, #0
 8019876:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8019878:	68fb      	ldr	r3, [r7, #12]
 801987a:	2b00      	cmp	r3, #0
 801987c:	d002      	beq.n	8019884 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801987e:	68fb      	ldr	r3, [r7, #12]
 8019880:	2200      	movs	r2, #0
 8019882:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8019884:	68fa      	ldr	r2, [r7, #12]
 8019886:	490d      	ldr	r1, [pc, #52]	; (80198bc <f_mount+0x88>)
 8019888:	69fb      	ldr	r3, [r7, #28]
 801988a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801988e:	68fb      	ldr	r3, [r7, #12]
 8019890:	2b00      	cmp	r3, #0
 8019892:	d002      	beq.n	801989a <f_mount+0x66>
 8019894:	79fb      	ldrb	r3, [r7, #7]
 8019896:	2b01      	cmp	r3, #1
 8019898:	d001      	beq.n	801989e <f_mount+0x6a>
 801989a:	2300      	movs	r3, #0
 801989c:	e00a      	b.n	80198b4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801989e:	f107 010c 	add.w	r1, r7, #12
 80198a2:	f107 0308 	add.w	r3, r7, #8
 80198a6:	2200      	movs	r2, #0
 80198a8:	4618      	mov	r0, r3
 80198aa:	f7ff fd07 	bl	80192bc <find_volume>
 80198ae:	4603      	mov	r3, r0
 80198b0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80198b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80198b4:	4618      	mov	r0, r3
 80198b6:	3720      	adds	r7, #32
 80198b8:	46bd      	mov	sp, r7
 80198ba:	bd80      	pop	{r7, pc}
 80198bc:	240016a8 	.word	0x240016a8

080198c0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80198c0:	b580      	push	{r7, lr}
 80198c2:	b09a      	sub	sp, #104	; 0x68
 80198c4:	af00      	add	r7, sp, #0
 80198c6:	60f8      	str	r0, [r7, #12]
 80198c8:	60b9      	str	r1, [r7, #8]
 80198ca:	4613      	mov	r3, r2
 80198cc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80198ce:	68fb      	ldr	r3, [r7, #12]
 80198d0:	2b00      	cmp	r3, #0
 80198d2:	d101      	bne.n	80198d8 <f_open+0x18>
 80198d4:	2309      	movs	r3, #9
 80198d6:	e1bb      	b.n	8019c50 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80198d8:	79fb      	ldrb	r3, [r7, #7]
 80198da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80198de:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80198e0:	79fa      	ldrb	r2, [r7, #7]
 80198e2:	f107 0114 	add.w	r1, r7, #20
 80198e6:	f107 0308 	add.w	r3, r7, #8
 80198ea:	4618      	mov	r0, r3
 80198ec:	f7ff fce6 	bl	80192bc <find_volume>
 80198f0:	4603      	mov	r3, r0
 80198f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80198f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80198fa:	2b00      	cmp	r3, #0
 80198fc:	f040 819f 	bne.w	8019c3e <f_open+0x37e>
		dj.obj.fs = fs;
 8019900:	697b      	ldr	r3, [r7, #20]
 8019902:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8019904:	68ba      	ldr	r2, [r7, #8]
 8019906:	f107 0318 	add.w	r3, r7, #24
 801990a:	4611      	mov	r1, r2
 801990c:	4618      	mov	r0, r3
 801990e:	f7ff fbc5 	bl	801909c <follow_path>
 8019912:	4603      	mov	r3, r0
 8019914:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8019918:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801991c:	2b00      	cmp	r3, #0
 801991e:	d11a      	bne.n	8019956 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8019920:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019924:	b25b      	sxtb	r3, r3
 8019926:	2b00      	cmp	r3, #0
 8019928:	da03      	bge.n	8019932 <f_open+0x72>
				res = FR_INVALID_NAME;
 801992a:	2306      	movs	r3, #6
 801992c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8019930:	e011      	b.n	8019956 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8019932:	79fb      	ldrb	r3, [r7, #7]
 8019934:	f023 0301 	bic.w	r3, r3, #1
 8019938:	2b00      	cmp	r3, #0
 801993a:	bf14      	ite	ne
 801993c:	2301      	movne	r3, #1
 801993e:	2300      	moveq	r3, #0
 8019940:	b2db      	uxtb	r3, r3
 8019942:	461a      	mov	r2, r3
 8019944:	f107 0318 	add.w	r3, r7, #24
 8019948:	4611      	mov	r1, r2
 801994a:	4618      	mov	r0, r3
 801994c:	f7fd ff38 	bl	80177c0 <chk_lock>
 8019950:	4603      	mov	r3, r0
 8019952:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8019956:	79fb      	ldrb	r3, [r7, #7]
 8019958:	f003 031c 	and.w	r3, r3, #28
 801995c:	2b00      	cmp	r3, #0
 801995e:	d07f      	beq.n	8019a60 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8019960:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019964:	2b00      	cmp	r3, #0
 8019966:	d017      	beq.n	8019998 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8019968:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801996c:	2b04      	cmp	r3, #4
 801996e:	d10e      	bne.n	801998e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8019970:	f7fd ff82 	bl	8017878 <enq_lock>
 8019974:	4603      	mov	r3, r0
 8019976:	2b00      	cmp	r3, #0
 8019978:	d006      	beq.n	8019988 <f_open+0xc8>
 801997a:	f107 0318 	add.w	r3, r7, #24
 801997e:	4618      	mov	r0, r3
 8019980:	f7ff f8dc 	bl	8018b3c <dir_register>
 8019984:	4603      	mov	r3, r0
 8019986:	e000      	b.n	801998a <f_open+0xca>
 8019988:	2312      	movs	r3, #18
 801998a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801998e:	79fb      	ldrb	r3, [r7, #7]
 8019990:	f043 0308 	orr.w	r3, r3, #8
 8019994:	71fb      	strb	r3, [r7, #7]
 8019996:	e010      	b.n	80199ba <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8019998:	7fbb      	ldrb	r3, [r7, #30]
 801999a:	f003 0311 	and.w	r3, r3, #17
 801999e:	2b00      	cmp	r3, #0
 80199a0:	d003      	beq.n	80199aa <f_open+0xea>
					res = FR_DENIED;
 80199a2:	2307      	movs	r3, #7
 80199a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80199a8:	e007      	b.n	80199ba <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80199aa:	79fb      	ldrb	r3, [r7, #7]
 80199ac:	f003 0304 	and.w	r3, r3, #4
 80199b0:	2b00      	cmp	r3, #0
 80199b2:	d002      	beq.n	80199ba <f_open+0xfa>
 80199b4:	2308      	movs	r3, #8
 80199b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80199ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80199be:	2b00      	cmp	r3, #0
 80199c0:	d168      	bne.n	8019a94 <f_open+0x1d4>
 80199c2:	79fb      	ldrb	r3, [r7, #7]
 80199c4:	f003 0308 	and.w	r3, r3, #8
 80199c8:	2b00      	cmp	r3, #0
 80199ca:	d063      	beq.n	8019a94 <f_open+0x1d4>
				dw = GET_FATTIME();
 80199cc:	f7fb fb70 	bl	80150b0 <get_fattime>
 80199d0:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80199d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80199d4:	330e      	adds	r3, #14
 80199d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80199d8:	4618      	mov	r0, r3
 80199da:	f7fd fe47 	bl	801766c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80199de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80199e0:	3316      	adds	r3, #22
 80199e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80199e4:	4618      	mov	r0, r3
 80199e6:	f7fd fe41 	bl	801766c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80199ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80199ec:	330b      	adds	r3, #11
 80199ee:	2220      	movs	r2, #32
 80199f0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80199f2:	697b      	ldr	r3, [r7, #20]
 80199f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80199f6:	4611      	mov	r1, r2
 80199f8:	4618      	mov	r0, r3
 80199fa:	f7fe fe17 	bl	801862c <ld_clust>
 80199fe:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8019a00:	697b      	ldr	r3, [r7, #20]
 8019a02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019a04:	2200      	movs	r2, #0
 8019a06:	4618      	mov	r0, r3
 8019a08:	f7fe fe2f 	bl	801866a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8019a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a0e:	331c      	adds	r3, #28
 8019a10:	2100      	movs	r1, #0
 8019a12:	4618      	mov	r0, r3
 8019a14:	f7fd fe2a 	bl	801766c <st_dword>
					fs->wflag = 1;
 8019a18:	697b      	ldr	r3, [r7, #20]
 8019a1a:	2201      	movs	r2, #1
 8019a1c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8019a1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019a20:	2b00      	cmp	r3, #0
 8019a22:	d037      	beq.n	8019a94 <f_open+0x1d4>
						dw = fs->winsect;
 8019a24:	697b      	ldr	r3, [r7, #20]
 8019a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019a28:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8019a2a:	f107 0318 	add.w	r3, r7, #24
 8019a2e:	2200      	movs	r2, #0
 8019a30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8019a32:	4618      	mov	r0, r3
 8019a34:	f7fe fb1f 	bl	8018076 <remove_chain>
 8019a38:	4603      	mov	r3, r0
 8019a3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8019a3e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019a42:	2b00      	cmp	r3, #0
 8019a44:	d126      	bne.n	8019a94 <f_open+0x1d4>
							res = move_window(fs, dw);
 8019a46:	697b      	ldr	r3, [r7, #20]
 8019a48:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8019a4a:	4618      	mov	r0, r3
 8019a4c:	f7fe f868 	bl	8017b20 <move_window>
 8019a50:	4603      	mov	r3, r0
 8019a52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8019a56:	697b      	ldr	r3, [r7, #20]
 8019a58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019a5a:	3a01      	subs	r2, #1
 8019a5c:	615a      	str	r2, [r3, #20]
 8019a5e:	e019      	b.n	8019a94 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8019a60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019a64:	2b00      	cmp	r3, #0
 8019a66:	d115      	bne.n	8019a94 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8019a68:	7fbb      	ldrb	r3, [r7, #30]
 8019a6a:	f003 0310 	and.w	r3, r3, #16
 8019a6e:	2b00      	cmp	r3, #0
 8019a70:	d003      	beq.n	8019a7a <f_open+0x1ba>
					res = FR_NO_FILE;
 8019a72:	2304      	movs	r3, #4
 8019a74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8019a78:	e00c      	b.n	8019a94 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8019a7a:	79fb      	ldrb	r3, [r7, #7]
 8019a7c:	f003 0302 	and.w	r3, r3, #2
 8019a80:	2b00      	cmp	r3, #0
 8019a82:	d007      	beq.n	8019a94 <f_open+0x1d4>
 8019a84:	7fbb      	ldrb	r3, [r7, #30]
 8019a86:	f003 0301 	and.w	r3, r3, #1
 8019a8a:	2b00      	cmp	r3, #0
 8019a8c:	d002      	beq.n	8019a94 <f_open+0x1d4>
						res = FR_DENIED;
 8019a8e:	2307      	movs	r3, #7
 8019a90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8019a94:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019a98:	2b00      	cmp	r3, #0
 8019a9a:	d128      	bne.n	8019aee <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8019a9c:	79fb      	ldrb	r3, [r7, #7]
 8019a9e:	f003 0308 	and.w	r3, r3, #8
 8019aa2:	2b00      	cmp	r3, #0
 8019aa4:	d003      	beq.n	8019aae <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8019aa6:	79fb      	ldrb	r3, [r7, #7]
 8019aa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019aac:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8019aae:	697b      	ldr	r3, [r7, #20]
 8019ab0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8019ab2:	68fb      	ldr	r3, [r7, #12]
 8019ab4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8019ab6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019ab8:	68fb      	ldr	r3, [r7, #12]
 8019aba:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8019abc:	79fb      	ldrb	r3, [r7, #7]
 8019abe:	f023 0301 	bic.w	r3, r3, #1
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	bf14      	ite	ne
 8019ac6:	2301      	movne	r3, #1
 8019ac8:	2300      	moveq	r3, #0
 8019aca:	b2db      	uxtb	r3, r3
 8019acc:	461a      	mov	r2, r3
 8019ace:	f107 0318 	add.w	r3, r7, #24
 8019ad2:	4611      	mov	r1, r2
 8019ad4:	4618      	mov	r0, r3
 8019ad6:	f7fd fef1 	bl	80178bc <inc_lock>
 8019ada:	4602      	mov	r2, r0
 8019adc:	68fb      	ldr	r3, [r7, #12]
 8019ade:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8019ae0:	68fb      	ldr	r3, [r7, #12]
 8019ae2:	691b      	ldr	r3, [r3, #16]
 8019ae4:	2b00      	cmp	r3, #0
 8019ae6:	d102      	bne.n	8019aee <f_open+0x22e>
 8019ae8:	2302      	movs	r3, #2
 8019aea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8019aee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019af2:	2b00      	cmp	r3, #0
 8019af4:	f040 80a3 	bne.w	8019c3e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8019af8:	697b      	ldr	r3, [r7, #20]
 8019afa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019afc:	4611      	mov	r1, r2
 8019afe:	4618      	mov	r0, r3
 8019b00:	f7fe fd94 	bl	801862c <ld_clust>
 8019b04:	4602      	mov	r2, r0
 8019b06:	68fb      	ldr	r3, [r7, #12]
 8019b08:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8019b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b0c:	331c      	adds	r3, #28
 8019b0e:	4618      	mov	r0, r3
 8019b10:	f7fd fd6e 	bl	80175f0 <ld_dword>
 8019b14:	4602      	mov	r2, r0
 8019b16:	68fb      	ldr	r3, [r7, #12]
 8019b18:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8019b1a:	68fb      	ldr	r3, [r7, #12]
 8019b1c:	2200      	movs	r2, #0
 8019b1e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8019b20:	697a      	ldr	r2, [r7, #20]
 8019b22:	68fb      	ldr	r3, [r7, #12]
 8019b24:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8019b26:	697b      	ldr	r3, [r7, #20]
 8019b28:	88da      	ldrh	r2, [r3, #6]
 8019b2a:	68fb      	ldr	r3, [r7, #12]
 8019b2c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8019b2e:	68fb      	ldr	r3, [r7, #12]
 8019b30:	79fa      	ldrb	r2, [r7, #7]
 8019b32:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8019b34:	68fb      	ldr	r3, [r7, #12]
 8019b36:	2200      	movs	r2, #0
 8019b38:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8019b3a:	68fb      	ldr	r3, [r7, #12]
 8019b3c:	2200      	movs	r2, #0
 8019b3e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8019b40:	68fb      	ldr	r3, [r7, #12]
 8019b42:	2200      	movs	r2, #0
 8019b44:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8019b46:	68fb      	ldr	r3, [r7, #12]
 8019b48:	3330      	adds	r3, #48	; 0x30
 8019b4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8019b4e:	2100      	movs	r1, #0
 8019b50:	4618      	mov	r0, r3
 8019b52:	f7fd fdd8 	bl	8017706 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8019b56:	79fb      	ldrb	r3, [r7, #7]
 8019b58:	f003 0320 	and.w	r3, r3, #32
 8019b5c:	2b00      	cmp	r3, #0
 8019b5e:	d06e      	beq.n	8019c3e <f_open+0x37e>
 8019b60:	68fb      	ldr	r3, [r7, #12]
 8019b62:	68db      	ldr	r3, [r3, #12]
 8019b64:	2b00      	cmp	r3, #0
 8019b66:	d06a      	beq.n	8019c3e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8019b68:	68fb      	ldr	r3, [r7, #12]
 8019b6a:	68da      	ldr	r2, [r3, #12]
 8019b6c:	68fb      	ldr	r3, [r7, #12]
 8019b6e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8019b70:	697b      	ldr	r3, [r7, #20]
 8019b72:	895b      	ldrh	r3, [r3, #10]
 8019b74:	461a      	mov	r2, r3
 8019b76:	697b      	ldr	r3, [r7, #20]
 8019b78:	899b      	ldrh	r3, [r3, #12]
 8019b7a:	fb02 f303 	mul.w	r3, r2, r3
 8019b7e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8019b80:	68fb      	ldr	r3, [r7, #12]
 8019b82:	689b      	ldr	r3, [r3, #8]
 8019b84:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8019b86:	68fb      	ldr	r3, [r7, #12]
 8019b88:	68db      	ldr	r3, [r3, #12]
 8019b8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8019b8c:	e016      	b.n	8019bbc <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8019b8e:	68fb      	ldr	r3, [r7, #12]
 8019b90:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8019b92:	4618      	mov	r0, r3
 8019b94:	f7fe f881 	bl	8017c9a <get_fat>
 8019b98:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8019b9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019b9c:	2b01      	cmp	r3, #1
 8019b9e:	d802      	bhi.n	8019ba6 <f_open+0x2e6>
 8019ba0:	2302      	movs	r3, #2
 8019ba2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8019ba6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019bac:	d102      	bne.n	8019bb4 <f_open+0x2f4>
 8019bae:	2301      	movs	r3, #1
 8019bb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8019bb4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8019bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019bb8:	1ad3      	subs	r3, r2, r3
 8019bba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8019bbc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019bc0:	2b00      	cmp	r3, #0
 8019bc2:	d103      	bne.n	8019bcc <f_open+0x30c>
 8019bc4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8019bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019bc8:	429a      	cmp	r2, r3
 8019bca:	d8e0      	bhi.n	8019b8e <f_open+0x2ce>
				}
				fp->clust = clst;
 8019bcc:	68fb      	ldr	r3, [r7, #12]
 8019bce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8019bd0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8019bd2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019bd6:	2b00      	cmp	r3, #0
 8019bd8:	d131      	bne.n	8019c3e <f_open+0x37e>
 8019bda:	697b      	ldr	r3, [r7, #20]
 8019bdc:	899b      	ldrh	r3, [r3, #12]
 8019bde:	461a      	mov	r2, r3
 8019be0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019be2:	fbb3 f1f2 	udiv	r1, r3, r2
 8019be6:	fb01 f202 	mul.w	r2, r1, r2
 8019bea:	1a9b      	subs	r3, r3, r2
 8019bec:	2b00      	cmp	r3, #0
 8019bee:	d026      	beq.n	8019c3e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8019bf0:	697b      	ldr	r3, [r7, #20]
 8019bf2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8019bf4:	4618      	mov	r0, r3
 8019bf6:	f7fe f831 	bl	8017c5c <clust2sect>
 8019bfa:	64f8      	str	r0, [r7, #76]	; 0x4c
 8019bfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019bfe:	2b00      	cmp	r3, #0
 8019c00:	d103      	bne.n	8019c0a <f_open+0x34a>
						res = FR_INT_ERR;
 8019c02:	2302      	movs	r3, #2
 8019c04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8019c08:	e019      	b.n	8019c3e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8019c0a:	697b      	ldr	r3, [r7, #20]
 8019c0c:	899b      	ldrh	r3, [r3, #12]
 8019c0e:	461a      	mov	r2, r3
 8019c10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019c12:	fbb3 f2f2 	udiv	r2, r3, r2
 8019c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019c18:	441a      	add	r2, r3
 8019c1a:	68fb      	ldr	r3, [r7, #12]
 8019c1c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8019c1e:	697b      	ldr	r3, [r7, #20]
 8019c20:	7858      	ldrb	r0, [r3, #1]
 8019c22:	68fb      	ldr	r3, [r7, #12]
 8019c24:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019c28:	68fb      	ldr	r3, [r7, #12]
 8019c2a:	6a1a      	ldr	r2, [r3, #32]
 8019c2c:	2301      	movs	r3, #1
 8019c2e:	f7fd fc69 	bl	8017504 <disk_read>
 8019c32:	4603      	mov	r3, r0
 8019c34:	2b00      	cmp	r3, #0
 8019c36:	d002      	beq.n	8019c3e <f_open+0x37e>
 8019c38:	2301      	movs	r3, #1
 8019c3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8019c3e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019c42:	2b00      	cmp	r3, #0
 8019c44:	d002      	beq.n	8019c4c <f_open+0x38c>
 8019c46:	68fb      	ldr	r3, [r7, #12]
 8019c48:	2200      	movs	r2, #0
 8019c4a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8019c4c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8019c50:	4618      	mov	r0, r3
 8019c52:	3768      	adds	r7, #104	; 0x68
 8019c54:	46bd      	mov	sp, r7
 8019c56:	bd80      	pop	{r7, pc}

08019c58 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8019c58:	b580      	push	{r7, lr}
 8019c5a:	b08c      	sub	sp, #48	; 0x30
 8019c5c:	af00      	add	r7, sp, #0
 8019c5e:	60f8      	str	r0, [r7, #12]
 8019c60:	60b9      	str	r1, [r7, #8]
 8019c62:	607a      	str	r2, [r7, #4]
 8019c64:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8019c66:	68bb      	ldr	r3, [r7, #8]
 8019c68:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8019c6a:	683b      	ldr	r3, [r7, #0]
 8019c6c:	2200      	movs	r2, #0
 8019c6e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8019c70:	68fb      	ldr	r3, [r7, #12]
 8019c72:	f107 0210 	add.w	r2, r7, #16
 8019c76:	4611      	mov	r1, r2
 8019c78:	4618      	mov	r0, r3
 8019c7a:	f7ff fda5 	bl	80197c8 <validate>
 8019c7e:	4603      	mov	r3, r0
 8019c80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8019c84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	d107      	bne.n	8019c9c <f_write+0x44>
 8019c8c:	68fb      	ldr	r3, [r7, #12]
 8019c8e:	7d5b      	ldrb	r3, [r3, #21]
 8019c90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8019c94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019c98:	2b00      	cmp	r3, #0
 8019c9a:	d002      	beq.n	8019ca2 <f_write+0x4a>
 8019c9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019ca0:	e16a      	b.n	8019f78 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8019ca2:	68fb      	ldr	r3, [r7, #12]
 8019ca4:	7d1b      	ldrb	r3, [r3, #20]
 8019ca6:	f003 0302 	and.w	r3, r3, #2
 8019caa:	2b00      	cmp	r3, #0
 8019cac:	d101      	bne.n	8019cb2 <f_write+0x5a>
 8019cae:	2307      	movs	r3, #7
 8019cb0:	e162      	b.n	8019f78 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8019cb2:	68fb      	ldr	r3, [r7, #12]
 8019cb4:	699a      	ldr	r2, [r3, #24]
 8019cb6:	687b      	ldr	r3, [r7, #4]
 8019cb8:	441a      	add	r2, r3
 8019cba:	68fb      	ldr	r3, [r7, #12]
 8019cbc:	699b      	ldr	r3, [r3, #24]
 8019cbe:	429a      	cmp	r2, r3
 8019cc0:	f080 814c 	bcs.w	8019f5c <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8019cc4:	68fb      	ldr	r3, [r7, #12]
 8019cc6:	699b      	ldr	r3, [r3, #24]
 8019cc8:	43db      	mvns	r3, r3
 8019cca:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8019ccc:	e146      	b.n	8019f5c <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8019cce:	68fb      	ldr	r3, [r7, #12]
 8019cd0:	699b      	ldr	r3, [r3, #24]
 8019cd2:	693a      	ldr	r2, [r7, #16]
 8019cd4:	8992      	ldrh	r2, [r2, #12]
 8019cd6:	fbb3 f1f2 	udiv	r1, r3, r2
 8019cda:	fb01 f202 	mul.w	r2, r1, r2
 8019cde:	1a9b      	subs	r3, r3, r2
 8019ce0:	2b00      	cmp	r3, #0
 8019ce2:	f040 80f1 	bne.w	8019ec8 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8019ce6:	68fb      	ldr	r3, [r7, #12]
 8019ce8:	699b      	ldr	r3, [r3, #24]
 8019cea:	693a      	ldr	r2, [r7, #16]
 8019cec:	8992      	ldrh	r2, [r2, #12]
 8019cee:	fbb3 f3f2 	udiv	r3, r3, r2
 8019cf2:	693a      	ldr	r2, [r7, #16]
 8019cf4:	8952      	ldrh	r2, [r2, #10]
 8019cf6:	3a01      	subs	r2, #1
 8019cf8:	4013      	ands	r3, r2
 8019cfa:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8019cfc:	69bb      	ldr	r3, [r7, #24]
 8019cfe:	2b00      	cmp	r3, #0
 8019d00:	d143      	bne.n	8019d8a <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8019d02:	68fb      	ldr	r3, [r7, #12]
 8019d04:	699b      	ldr	r3, [r3, #24]
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	d10c      	bne.n	8019d24 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8019d0a:	68fb      	ldr	r3, [r7, #12]
 8019d0c:	689b      	ldr	r3, [r3, #8]
 8019d0e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8019d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d12:	2b00      	cmp	r3, #0
 8019d14:	d11a      	bne.n	8019d4c <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8019d16:	68fb      	ldr	r3, [r7, #12]
 8019d18:	2100      	movs	r1, #0
 8019d1a:	4618      	mov	r0, r3
 8019d1c:	f7fe fa10 	bl	8018140 <create_chain>
 8019d20:	62b8      	str	r0, [r7, #40]	; 0x28
 8019d22:	e013      	b.n	8019d4c <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8019d24:	68fb      	ldr	r3, [r7, #12]
 8019d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019d28:	2b00      	cmp	r3, #0
 8019d2a:	d007      	beq.n	8019d3c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8019d2c:	68fb      	ldr	r3, [r7, #12]
 8019d2e:	699b      	ldr	r3, [r3, #24]
 8019d30:	4619      	mov	r1, r3
 8019d32:	68f8      	ldr	r0, [r7, #12]
 8019d34:	f7fe fa9c 	bl	8018270 <clmt_clust>
 8019d38:	62b8      	str	r0, [r7, #40]	; 0x28
 8019d3a:	e007      	b.n	8019d4c <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8019d3c:	68fa      	ldr	r2, [r7, #12]
 8019d3e:	68fb      	ldr	r3, [r7, #12]
 8019d40:	69db      	ldr	r3, [r3, #28]
 8019d42:	4619      	mov	r1, r3
 8019d44:	4610      	mov	r0, r2
 8019d46:	f7fe f9fb 	bl	8018140 <create_chain>
 8019d4a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8019d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d4e:	2b00      	cmp	r3, #0
 8019d50:	f000 8109 	beq.w	8019f66 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8019d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d56:	2b01      	cmp	r3, #1
 8019d58:	d104      	bne.n	8019d64 <f_write+0x10c>
 8019d5a:	68fb      	ldr	r3, [r7, #12]
 8019d5c:	2202      	movs	r2, #2
 8019d5e:	755a      	strb	r2, [r3, #21]
 8019d60:	2302      	movs	r3, #2
 8019d62:	e109      	b.n	8019f78 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8019d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019d6a:	d104      	bne.n	8019d76 <f_write+0x11e>
 8019d6c:	68fb      	ldr	r3, [r7, #12]
 8019d6e:	2201      	movs	r2, #1
 8019d70:	755a      	strb	r2, [r3, #21]
 8019d72:	2301      	movs	r3, #1
 8019d74:	e100      	b.n	8019f78 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8019d76:	68fb      	ldr	r3, [r7, #12]
 8019d78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019d7a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8019d7c:	68fb      	ldr	r3, [r7, #12]
 8019d7e:	689b      	ldr	r3, [r3, #8]
 8019d80:	2b00      	cmp	r3, #0
 8019d82:	d102      	bne.n	8019d8a <f_write+0x132>
 8019d84:	68fb      	ldr	r3, [r7, #12]
 8019d86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019d88:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8019d8a:	68fb      	ldr	r3, [r7, #12]
 8019d8c:	7d1b      	ldrb	r3, [r3, #20]
 8019d8e:	b25b      	sxtb	r3, r3
 8019d90:	2b00      	cmp	r3, #0
 8019d92:	da18      	bge.n	8019dc6 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8019d94:	693b      	ldr	r3, [r7, #16]
 8019d96:	7858      	ldrb	r0, [r3, #1]
 8019d98:	68fb      	ldr	r3, [r7, #12]
 8019d9a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019d9e:	68fb      	ldr	r3, [r7, #12]
 8019da0:	6a1a      	ldr	r2, [r3, #32]
 8019da2:	2301      	movs	r3, #1
 8019da4:	f7fd fbce 	bl	8017544 <disk_write>
 8019da8:	4603      	mov	r3, r0
 8019daa:	2b00      	cmp	r3, #0
 8019dac:	d004      	beq.n	8019db8 <f_write+0x160>
 8019dae:	68fb      	ldr	r3, [r7, #12]
 8019db0:	2201      	movs	r2, #1
 8019db2:	755a      	strb	r2, [r3, #21]
 8019db4:	2301      	movs	r3, #1
 8019db6:	e0df      	b.n	8019f78 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8019db8:	68fb      	ldr	r3, [r7, #12]
 8019dba:	7d1b      	ldrb	r3, [r3, #20]
 8019dbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019dc0:	b2da      	uxtb	r2, r3
 8019dc2:	68fb      	ldr	r3, [r7, #12]
 8019dc4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8019dc6:	693a      	ldr	r2, [r7, #16]
 8019dc8:	68fb      	ldr	r3, [r7, #12]
 8019dca:	69db      	ldr	r3, [r3, #28]
 8019dcc:	4619      	mov	r1, r3
 8019dce:	4610      	mov	r0, r2
 8019dd0:	f7fd ff44 	bl	8017c5c <clust2sect>
 8019dd4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8019dd6:	697b      	ldr	r3, [r7, #20]
 8019dd8:	2b00      	cmp	r3, #0
 8019dda:	d104      	bne.n	8019de6 <f_write+0x18e>
 8019ddc:	68fb      	ldr	r3, [r7, #12]
 8019dde:	2202      	movs	r2, #2
 8019de0:	755a      	strb	r2, [r3, #21]
 8019de2:	2302      	movs	r3, #2
 8019de4:	e0c8      	b.n	8019f78 <f_write+0x320>
			sect += csect;
 8019de6:	697a      	ldr	r2, [r7, #20]
 8019de8:	69bb      	ldr	r3, [r7, #24]
 8019dea:	4413      	add	r3, r2
 8019dec:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8019dee:	693b      	ldr	r3, [r7, #16]
 8019df0:	899b      	ldrh	r3, [r3, #12]
 8019df2:	461a      	mov	r2, r3
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	fbb3 f3f2 	udiv	r3, r3, r2
 8019dfa:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8019dfc:	6a3b      	ldr	r3, [r7, #32]
 8019dfe:	2b00      	cmp	r3, #0
 8019e00:	d043      	beq.n	8019e8a <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8019e02:	69ba      	ldr	r2, [r7, #24]
 8019e04:	6a3b      	ldr	r3, [r7, #32]
 8019e06:	4413      	add	r3, r2
 8019e08:	693a      	ldr	r2, [r7, #16]
 8019e0a:	8952      	ldrh	r2, [r2, #10]
 8019e0c:	4293      	cmp	r3, r2
 8019e0e:	d905      	bls.n	8019e1c <f_write+0x1c4>
					cc = fs->csize - csect;
 8019e10:	693b      	ldr	r3, [r7, #16]
 8019e12:	895b      	ldrh	r3, [r3, #10]
 8019e14:	461a      	mov	r2, r3
 8019e16:	69bb      	ldr	r3, [r7, #24]
 8019e18:	1ad3      	subs	r3, r2, r3
 8019e1a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8019e1c:	693b      	ldr	r3, [r7, #16]
 8019e1e:	7858      	ldrb	r0, [r3, #1]
 8019e20:	6a3b      	ldr	r3, [r7, #32]
 8019e22:	697a      	ldr	r2, [r7, #20]
 8019e24:	69f9      	ldr	r1, [r7, #28]
 8019e26:	f7fd fb8d 	bl	8017544 <disk_write>
 8019e2a:	4603      	mov	r3, r0
 8019e2c:	2b00      	cmp	r3, #0
 8019e2e:	d004      	beq.n	8019e3a <f_write+0x1e2>
 8019e30:	68fb      	ldr	r3, [r7, #12]
 8019e32:	2201      	movs	r2, #1
 8019e34:	755a      	strb	r2, [r3, #21]
 8019e36:	2301      	movs	r3, #1
 8019e38:	e09e      	b.n	8019f78 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8019e3a:	68fb      	ldr	r3, [r7, #12]
 8019e3c:	6a1a      	ldr	r2, [r3, #32]
 8019e3e:	697b      	ldr	r3, [r7, #20]
 8019e40:	1ad3      	subs	r3, r2, r3
 8019e42:	6a3a      	ldr	r2, [r7, #32]
 8019e44:	429a      	cmp	r2, r3
 8019e46:	d918      	bls.n	8019e7a <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8019e48:	68fb      	ldr	r3, [r7, #12]
 8019e4a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8019e4e:	68fb      	ldr	r3, [r7, #12]
 8019e50:	6a1a      	ldr	r2, [r3, #32]
 8019e52:	697b      	ldr	r3, [r7, #20]
 8019e54:	1ad3      	subs	r3, r2, r3
 8019e56:	693a      	ldr	r2, [r7, #16]
 8019e58:	8992      	ldrh	r2, [r2, #12]
 8019e5a:	fb02 f303 	mul.w	r3, r2, r3
 8019e5e:	69fa      	ldr	r2, [r7, #28]
 8019e60:	18d1      	adds	r1, r2, r3
 8019e62:	693b      	ldr	r3, [r7, #16]
 8019e64:	899b      	ldrh	r3, [r3, #12]
 8019e66:	461a      	mov	r2, r3
 8019e68:	f7fd fc2c 	bl	80176c4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8019e6c:	68fb      	ldr	r3, [r7, #12]
 8019e6e:	7d1b      	ldrb	r3, [r3, #20]
 8019e70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019e74:	b2da      	uxtb	r2, r3
 8019e76:	68fb      	ldr	r3, [r7, #12]
 8019e78:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8019e7a:	693b      	ldr	r3, [r7, #16]
 8019e7c:	899b      	ldrh	r3, [r3, #12]
 8019e7e:	461a      	mov	r2, r3
 8019e80:	6a3b      	ldr	r3, [r7, #32]
 8019e82:	fb02 f303 	mul.w	r3, r2, r3
 8019e86:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8019e88:	e04b      	b.n	8019f22 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8019e8a:	68fb      	ldr	r3, [r7, #12]
 8019e8c:	6a1b      	ldr	r3, [r3, #32]
 8019e8e:	697a      	ldr	r2, [r7, #20]
 8019e90:	429a      	cmp	r2, r3
 8019e92:	d016      	beq.n	8019ec2 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8019e94:	68fb      	ldr	r3, [r7, #12]
 8019e96:	699a      	ldr	r2, [r3, #24]
 8019e98:	68fb      	ldr	r3, [r7, #12]
 8019e9a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8019e9c:	429a      	cmp	r2, r3
 8019e9e:	d210      	bcs.n	8019ec2 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8019ea0:	693b      	ldr	r3, [r7, #16]
 8019ea2:	7858      	ldrb	r0, [r3, #1]
 8019ea4:	68fb      	ldr	r3, [r7, #12]
 8019ea6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019eaa:	2301      	movs	r3, #1
 8019eac:	697a      	ldr	r2, [r7, #20]
 8019eae:	f7fd fb29 	bl	8017504 <disk_read>
 8019eb2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8019eb4:	2b00      	cmp	r3, #0
 8019eb6:	d004      	beq.n	8019ec2 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8019eb8:	68fb      	ldr	r3, [r7, #12]
 8019eba:	2201      	movs	r2, #1
 8019ebc:	755a      	strb	r2, [r3, #21]
 8019ebe:	2301      	movs	r3, #1
 8019ec0:	e05a      	b.n	8019f78 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8019ec2:	68fb      	ldr	r3, [r7, #12]
 8019ec4:	697a      	ldr	r2, [r7, #20]
 8019ec6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8019ec8:	693b      	ldr	r3, [r7, #16]
 8019eca:	899b      	ldrh	r3, [r3, #12]
 8019ecc:	4618      	mov	r0, r3
 8019ece:	68fb      	ldr	r3, [r7, #12]
 8019ed0:	699b      	ldr	r3, [r3, #24]
 8019ed2:	693a      	ldr	r2, [r7, #16]
 8019ed4:	8992      	ldrh	r2, [r2, #12]
 8019ed6:	fbb3 f1f2 	udiv	r1, r3, r2
 8019eda:	fb01 f202 	mul.w	r2, r1, r2
 8019ede:	1a9b      	subs	r3, r3, r2
 8019ee0:	1ac3      	subs	r3, r0, r3
 8019ee2:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8019ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019ee6:	687b      	ldr	r3, [r7, #4]
 8019ee8:	429a      	cmp	r2, r3
 8019eea:	d901      	bls.n	8019ef0 <f_write+0x298>
 8019eec:	687b      	ldr	r3, [r7, #4]
 8019eee:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8019ef0:	68fb      	ldr	r3, [r7, #12]
 8019ef2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019ef6:	68fb      	ldr	r3, [r7, #12]
 8019ef8:	699b      	ldr	r3, [r3, #24]
 8019efa:	693a      	ldr	r2, [r7, #16]
 8019efc:	8992      	ldrh	r2, [r2, #12]
 8019efe:	fbb3 f0f2 	udiv	r0, r3, r2
 8019f02:	fb00 f202 	mul.w	r2, r0, r2
 8019f06:	1a9b      	subs	r3, r3, r2
 8019f08:	440b      	add	r3, r1
 8019f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f0c:	69f9      	ldr	r1, [r7, #28]
 8019f0e:	4618      	mov	r0, r3
 8019f10:	f7fd fbd8 	bl	80176c4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8019f14:	68fb      	ldr	r3, [r7, #12]
 8019f16:	7d1b      	ldrb	r3, [r3, #20]
 8019f18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8019f1c:	b2da      	uxtb	r2, r3
 8019f1e:	68fb      	ldr	r3, [r7, #12]
 8019f20:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8019f22:	69fa      	ldr	r2, [r7, #28]
 8019f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f26:	4413      	add	r3, r2
 8019f28:	61fb      	str	r3, [r7, #28]
 8019f2a:	68fb      	ldr	r3, [r7, #12]
 8019f2c:	699a      	ldr	r2, [r3, #24]
 8019f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f30:	441a      	add	r2, r3
 8019f32:	68fb      	ldr	r3, [r7, #12]
 8019f34:	619a      	str	r2, [r3, #24]
 8019f36:	68fb      	ldr	r3, [r7, #12]
 8019f38:	68da      	ldr	r2, [r3, #12]
 8019f3a:	68fb      	ldr	r3, [r7, #12]
 8019f3c:	699b      	ldr	r3, [r3, #24]
 8019f3e:	429a      	cmp	r2, r3
 8019f40:	bf38      	it	cc
 8019f42:	461a      	movcc	r2, r3
 8019f44:	68fb      	ldr	r3, [r7, #12]
 8019f46:	60da      	str	r2, [r3, #12]
 8019f48:	683b      	ldr	r3, [r7, #0]
 8019f4a:	681a      	ldr	r2, [r3, #0]
 8019f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f4e:	441a      	add	r2, r3
 8019f50:	683b      	ldr	r3, [r7, #0]
 8019f52:	601a      	str	r2, [r3, #0]
 8019f54:	687a      	ldr	r2, [r7, #4]
 8019f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f58:	1ad3      	subs	r3, r2, r3
 8019f5a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8019f5c:	687b      	ldr	r3, [r7, #4]
 8019f5e:	2b00      	cmp	r3, #0
 8019f60:	f47f aeb5 	bne.w	8019cce <f_write+0x76>
 8019f64:	e000      	b.n	8019f68 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8019f66:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8019f68:	68fb      	ldr	r3, [r7, #12]
 8019f6a:	7d1b      	ldrb	r3, [r3, #20]
 8019f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019f70:	b2da      	uxtb	r2, r3
 8019f72:	68fb      	ldr	r3, [r7, #12]
 8019f74:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8019f76:	2300      	movs	r3, #0
}
 8019f78:	4618      	mov	r0, r3
 8019f7a:	3730      	adds	r7, #48	; 0x30
 8019f7c:	46bd      	mov	sp, r7
 8019f7e:	bd80      	pop	{r7, pc}

08019f80 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8019f80:	b580      	push	{r7, lr}
 8019f82:	b086      	sub	sp, #24
 8019f84:	af00      	add	r7, sp, #0
 8019f86:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8019f88:	687b      	ldr	r3, [r7, #4]
 8019f8a:	f107 0208 	add.w	r2, r7, #8
 8019f8e:	4611      	mov	r1, r2
 8019f90:	4618      	mov	r0, r3
 8019f92:	f7ff fc19 	bl	80197c8 <validate>
 8019f96:	4603      	mov	r3, r0
 8019f98:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8019f9a:	7dfb      	ldrb	r3, [r7, #23]
 8019f9c:	2b00      	cmp	r3, #0
 8019f9e:	d168      	bne.n	801a072 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8019fa0:	687b      	ldr	r3, [r7, #4]
 8019fa2:	7d1b      	ldrb	r3, [r3, #20]
 8019fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019fa8:	2b00      	cmp	r3, #0
 8019faa:	d062      	beq.n	801a072 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8019fac:	687b      	ldr	r3, [r7, #4]
 8019fae:	7d1b      	ldrb	r3, [r3, #20]
 8019fb0:	b25b      	sxtb	r3, r3
 8019fb2:	2b00      	cmp	r3, #0
 8019fb4:	da15      	bge.n	8019fe2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8019fb6:	68bb      	ldr	r3, [r7, #8]
 8019fb8:	7858      	ldrb	r0, [r3, #1]
 8019fba:	687b      	ldr	r3, [r7, #4]
 8019fbc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019fc0:	687b      	ldr	r3, [r7, #4]
 8019fc2:	6a1a      	ldr	r2, [r3, #32]
 8019fc4:	2301      	movs	r3, #1
 8019fc6:	f7fd fabd 	bl	8017544 <disk_write>
 8019fca:	4603      	mov	r3, r0
 8019fcc:	2b00      	cmp	r3, #0
 8019fce:	d001      	beq.n	8019fd4 <f_sync+0x54>
 8019fd0:	2301      	movs	r3, #1
 8019fd2:	e04f      	b.n	801a074 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8019fd4:	687b      	ldr	r3, [r7, #4]
 8019fd6:	7d1b      	ldrb	r3, [r3, #20]
 8019fd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019fdc:	b2da      	uxtb	r2, r3
 8019fde:	687b      	ldr	r3, [r7, #4]
 8019fe0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8019fe2:	f7fb f865 	bl	80150b0 <get_fattime>
 8019fe6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8019fe8:	68ba      	ldr	r2, [r7, #8]
 8019fea:	687b      	ldr	r3, [r7, #4]
 8019fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019fee:	4619      	mov	r1, r3
 8019ff0:	4610      	mov	r0, r2
 8019ff2:	f7fd fd95 	bl	8017b20 <move_window>
 8019ff6:	4603      	mov	r3, r0
 8019ff8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8019ffa:	7dfb      	ldrb	r3, [r7, #23]
 8019ffc:	2b00      	cmp	r3, #0
 8019ffe:	d138      	bne.n	801a072 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801a000:	687b      	ldr	r3, [r7, #4]
 801a002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a004:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801a006:	68fb      	ldr	r3, [r7, #12]
 801a008:	330b      	adds	r3, #11
 801a00a:	781a      	ldrb	r2, [r3, #0]
 801a00c:	68fb      	ldr	r3, [r7, #12]
 801a00e:	330b      	adds	r3, #11
 801a010:	f042 0220 	orr.w	r2, r2, #32
 801a014:	b2d2      	uxtb	r2, r2
 801a016:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801a018:	687b      	ldr	r3, [r7, #4]
 801a01a:	6818      	ldr	r0, [r3, #0]
 801a01c:	687b      	ldr	r3, [r7, #4]
 801a01e:	689b      	ldr	r3, [r3, #8]
 801a020:	461a      	mov	r2, r3
 801a022:	68f9      	ldr	r1, [r7, #12]
 801a024:	f7fe fb21 	bl	801866a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801a028:	68fb      	ldr	r3, [r7, #12]
 801a02a:	f103 021c 	add.w	r2, r3, #28
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	68db      	ldr	r3, [r3, #12]
 801a032:	4619      	mov	r1, r3
 801a034:	4610      	mov	r0, r2
 801a036:	f7fd fb19 	bl	801766c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801a03a:	68fb      	ldr	r3, [r7, #12]
 801a03c:	3316      	adds	r3, #22
 801a03e:	6939      	ldr	r1, [r7, #16]
 801a040:	4618      	mov	r0, r3
 801a042:	f7fd fb13 	bl	801766c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801a046:	68fb      	ldr	r3, [r7, #12]
 801a048:	3312      	adds	r3, #18
 801a04a:	2100      	movs	r1, #0
 801a04c:	4618      	mov	r0, r3
 801a04e:	f7fd faf2 	bl	8017636 <st_word>
					fs->wflag = 1;
 801a052:	68bb      	ldr	r3, [r7, #8]
 801a054:	2201      	movs	r2, #1
 801a056:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801a058:	68bb      	ldr	r3, [r7, #8]
 801a05a:	4618      	mov	r0, r3
 801a05c:	f7fd fd8e 	bl	8017b7c <sync_fs>
 801a060:	4603      	mov	r3, r0
 801a062:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801a064:	687b      	ldr	r3, [r7, #4]
 801a066:	7d1b      	ldrb	r3, [r3, #20]
 801a068:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801a06c:	b2da      	uxtb	r2, r3
 801a06e:	687b      	ldr	r3, [r7, #4]
 801a070:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801a072:	7dfb      	ldrb	r3, [r7, #23]
}
 801a074:	4618      	mov	r0, r3
 801a076:	3718      	adds	r7, #24
 801a078:	46bd      	mov	sp, r7
 801a07a:	bd80      	pop	{r7, pc}

0801a07c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801a07c:	b580      	push	{r7, lr}
 801a07e:	b084      	sub	sp, #16
 801a080:	af00      	add	r7, sp, #0
 801a082:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801a084:	6878      	ldr	r0, [r7, #4]
 801a086:	f7ff ff7b 	bl	8019f80 <f_sync>
 801a08a:	4603      	mov	r3, r0
 801a08c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801a08e:	7bfb      	ldrb	r3, [r7, #15]
 801a090:	2b00      	cmp	r3, #0
 801a092:	d118      	bne.n	801a0c6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801a094:	687b      	ldr	r3, [r7, #4]
 801a096:	f107 0208 	add.w	r2, r7, #8
 801a09a:	4611      	mov	r1, r2
 801a09c:	4618      	mov	r0, r3
 801a09e:	f7ff fb93 	bl	80197c8 <validate>
 801a0a2:	4603      	mov	r3, r0
 801a0a4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801a0a6:	7bfb      	ldrb	r3, [r7, #15]
 801a0a8:	2b00      	cmp	r3, #0
 801a0aa:	d10c      	bne.n	801a0c6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801a0ac:	687b      	ldr	r3, [r7, #4]
 801a0ae:	691b      	ldr	r3, [r3, #16]
 801a0b0:	4618      	mov	r0, r3
 801a0b2:	f7fd fc91 	bl	80179d8 <dec_lock>
 801a0b6:	4603      	mov	r3, r0
 801a0b8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801a0ba:	7bfb      	ldrb	r3, [r7, #15]
 801a0bc:	2b00      	cmp	r3, #0
 801a0be:	d102      	bne.n	801a0c6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801a0c0:	687b      	ldr	r3, [r7, #4]
 801a0c2:	2200      	movs	r2, #0
 801a0c4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801a0c6:	7bfb      	ldrb	r3, [r7, #15]
}
 801a0c8:	4618      	mov	r0, r3
 801a0ca:	3710      	adds	r7, #16
 801a0cc:	46bd      	mov	sp, r7
 801a0ce:	bd80      	pop	{r7, pc}

0801a0d0 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 801a0d0:	b580      	push	{r7, lr}
 801a0d2:	b084      	sub	sp, #16
 801a0d4:	af00      	add	r7, sp, #0
 801a0d6:	6078      	str	r0, [r7, #4]
 801a0d8:	460b      	mov	r3, r1
 801a0da:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 801a0dc:	78fb      	ldrb	r3, [r7, #3]
 801a0de:	2b0a      	cmp	r3, #10
 801a0e0:	d103      	bne.n	801a0ea <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 801a0e2:	210d      	movs	r1, #13
 801a0e4:	6878      	ldr	r0, [r7, #4]
 801a0e6:	f7ff fff3 	bl	801a0d0 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 801a0ea:	687b      	ldr	r3, [r7, #4]
 801a0ec:	685b      	ldr	r3, [r3, #4]
 801a0ee:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 801a0f0:	68fb      	ldr	r3, [r7, #12]
 801a0f2:	2b00      	cmp	r3, #0
 801a0f4:	db25      	blt.n	801a142 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 801a0f6:	68fb      	ldr	r3, [r7, #12]
 801a0f8:	1c5a      	adds	r2, r3, #1
 801a0fa:	60fa      	str	r2, [r7, #12]
 801a0fc:	687a      	ldr	r2, [r7, #4]
 801a0fe:	4413      	add	r3, r2
 801a100:	78fa      	ldrb	r2, [r7, #3]
 801a102:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801a104:	68fb      	ldr	r3, [r7, #12]
 801a106:	2b3c      	cmp	r3, #60	; 0x3c
 801a108:	dd12      	ble.n	801a130 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801a10a:	687b      	ldr	r3, [r7, #4]
 801a10c:	6818      	ldr	r0, [r3, #0]
 801a10e:	687b      	ldr	r3, [r7, #4]
 801a110:	f103 010c 	add.w	r1, r3, #12
 801a114:	68fa      	ldr	r2, [r7, #12]
 801a116:	f107 0308 	add.w	r3, r7, #8
 801a11a:	f7ff fd9d 	bl	8019c58 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801a11e:	68ba      	ldr	r2, [r7, #8]
 801a120:	68fb      	ldr	r3, [r7, #12]
 801a122:	429a      	cmp	r2, r3
 801a124:	d101      	bne.n	801a12a <putc_bfd+0x5a>
 801a126:	2300      	movs	r3, #0
 801a128:	e001      	b.n	801a12e <putc_bfd+0x5e>
 801a12a:	f04f 33ff 	mov.w	r3, #4294967295
 801a12e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 801a130:	687b      	ldr	r3, [r7, #4]
 801a132:	68fa      	ldr	r2, [r7, #12]
 801a134:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 801a136:	687b      	ldr	r3, [r7, #4]
 801a138:	689b      	ldr	r3, [r3, #8]
 801a13a:	1c5a      	adds	r2, r3, #1
 801a13c:	687b      	ldr	r3, [r7, #4]
 801a13e:	609a      	str	r2, [r3, #8]
 801a140:	e000      	b.n	801a144 <putc_bfd+0x74>
	if (i < 0) return;
 801a142:	bf00      	nop
}
 801a144:	3710      	adds	r7, #16
 801a146:	46bd      	mov	sp, r7
 801a148:	bd80      	pop	{r7, pc}

0801a14a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 801a14a:	b580      	push	{r7, lr}
 801a14c:	b084      	sub	sp, #16
 801a14e:	af00      	add	r7, sp, #0
 801a150:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 801a152:	687b      	ldr	r3, [r7, #4]
 801a154:	685b      	ldr	r3, [r3, #4]
 801a156:	2b00      	cmp	r3, #0
 801a158:	db16      	blt.n	801a188 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	6818      	ldr	r0, [r3, #0]
 801a15e:	687b      	ldr	r3, [r7, #4]
 801a160:	f103 010c 	add.w	r1, r3, #12
 801a164:	687b      	ldr	r3, [r7, #4]
 801a166:	685b      	ldr	r3, [r3, #4]
 801a168:	461a      	mov	r2, r3
 801a16a:	f107 030c 	add.w	r3, r7, #12
 801a16e:	f7ff fd73 	bl	8019c58 <f_write>
 801a172:	4603      	mov	r3, r0
 801a174:	2b00      	cmp	r3, #0
 801a176:	d107      	bne.n	801a188 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 801a178:	687b      	ldr	r3, [r7, #4]
 801a17a:	685b      	ldr	r3, [r3, #4]
 801a17c:	68fa      	ldr	r2, [r7, #12]
 801a17e:	4293      	cmp	r3, r2
 801a180:	d102      	bne.n	801a188 <putc_flush+0x3e>
 801a182:	687b      	ldr	r3, [r7, #4]
 801a184:	689b      	ldr	r3, [r3, #8]
 801a186:	e001      	b.n	801a18c <putc_flush+0x42>
	return EOF;
 801a188:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a18c:	4618      	mov	r0, r3
 801a18e:	3710      	adds	r7, #16
 801a190:	46bd      	mov	sp, r7
 801a192:	bd80      	pop	{r7, pc}

0801a194 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 801a194:	b480      	push	{r7}
 801a196:	b083      	sub	sp, #12
 801a198:	af00      	add	r7, sp, #0
 801a19a:	6078      	str	r0, [r7, #4]
 801a19c:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 801a19e:	687b      	ldr	r3, [r7, #4]
 801a1a0:	683a      	ldr	r2, [r7, #0]
 801a1a2:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 801a1a4:	687b      	ldr	r3, [r7, #4]
 801a1a6:	2200      	movs	r2, #0
 801a1a8:	605a      	str	r2, [r3, #4]
 801a1aa:	687b      	ldr	r3, [r7, #4]
 801a1ac:	685a      	ldr	r2, [r3, #4]
 801a1ae:	687b      	ldr	r3, [r7, #4]
 801a1b0:	609a      	str	r2, [r3, #8]
}
 801a1b2:	bf00      	nop
 801a1b4:	370c      	adds	r7, #12
 801a1b6:	46bd      	mov	sp, r7
 801a1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1bc:	4770      	bx	lr

0801a1be <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 801a1be:	b580      	push	{r7, lr}
 801a1c0:	b096      	sub	sp, #88	; 0x58
 801a1c2:	af00      	add	r7, sp, #0
 801a1c4:	6078      	str	r0, [r7, #4]
 801a1c6:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 801a1c8:	f107 030c 	add.w	r3, r7, #12
 801a1cc:	6839      	ldr	r1, [r7, #0]
 801a1ce:	4618      	mov	r0, r3
 801a1d0:	f7ff ffe0 	bl	801a194 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 801a1d4:	e009      	b.n	801a1ea <f_puts+0x2c>
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	1c5a      	adds	r2, r3, #1
 801a1da:	607a      	str	r2, [r7, #4]
 801a1dc:	781a      	ldrb	r2, [r3, #0]
 801a1de:	f107 030c 	add.w	r3, r7, #12
 801a1e2:	4611      	mov	r1, r2
 801a1e4:	4618      	mov	r0, r3
 801a1e6:	f7ff ff73 	bl	801a0d0 <putc_bfd>
 801a1ea:	687b      	ldr	r3, [r7, #4]
 801a1ec:	781b      	ldrb	r3, [r3, #0]
 801a1ee:	2b00      	cmp	r3, #0
 801a1f0:	d1f1      	bne.n	801a1d6 <f_puts+0x18>
	return putc_flush(&pb);
 801a1f2:	f107 030c 	add.w	r3, r7, #12
 801a1f6:	4618      	mov	r0, r3
 801a1f8:	f7ff ffa7 	bl	801a14a <putc_flush>
 801a1fc:	4603      	mov	r3, r0
}
 801a1fe:	4618      	mov	r0, r3
 801a200:	3758      	adds	r7, #88	; 0x58
 801a202:	46bd      	mov	sp, r7
 801a204:	bd80      	pop	{r7, pc}
	...

0801a208 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801a208:	b480      	push	{r7}
 801a20a:	b087      	sub	sp, #28
 801a20c:	af00      	add	r7, sp, #0
 801a20e:	60f8      	str	r0, [r7, #12]
 801a210:	60b9      	str	r1, [r7, #8]
 801a212:	4613      	mov	r3, r2
 801a214:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801a216:	2301      	movs	r3, #1
 801a218:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801a21a:	2300      	movs	r3, #0
 801a21c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801a21e:	4b1f      	ldr	r3, [pc, #124]	; (801a29c <FATFS_LinkDriverEx+0x94>)
 801a220:	7a5b      	ldrb	r3, [r3, #9]
 801a222:	b2db      	uxtb	r3, r3
 801a224:	2b00      	cmp	r3, #0
 801a226:	d131      	bne.n	801a28c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801a228:	4b1c      	ldr	r3, [pc, #112]	; (801a29c <FATFS_LinkDriverEx+0x94>)
 801a22a:	7a5b      	ldrb	r3, [r3, #9]
 801a22c:	b2db      	uxtb	r3, r3
 801a22e:	461a      	mov	r2, r3
 801a230:	4b1a      	ldr	r3, [pc, #104]	; (801a29c <FATFS_LinkDriverEx+0x94>)
 801a232:	2100      	movs	r1, #0
 801a234:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801a236:	4b19      	ldr	r3, [pc, #100]	; (801a29c <FATFS_LinkDriverEx+0x94>)
 801a238:	7a5b      	ldrb	r3, [r3, #9]
 801a23a:	b2db      	uxtb	r3, r3
 801a23c:	4a17      	ldr	r2, [pc, #92]	; (801a29c <FATFS_LinkDriverEx+0x94>)
 801a23e:	009b      	lsls	r3, r3, #2
 801a240:	4413      	add	r3, r2
 801a242:	68fa      	ldr	r2, [r7, #12]
 801a244:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801a246:	4b15      	ldr	r3, [pc, #84]	; (801a29c <FATFS_LinkDriverEx+0x94>)
 801a248:	7a5b      	ldrb	r3, [r3, #9]
 801a24a:	b2db      	uxtb	r3, r3
 801a24c:	461a      	mov	r2, r3
 801a24e:	4b13      	ldr	r3, [pc, #76]	; (801a29c <FATFS_LinkDriverEx+0x94>)
 801a250:	4413      	add	r3, r2
 801a252:	79fa      	ldrb	r2, [r7, #7]
 801a254:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801a256:	4b11      	ldr	r3, [pc, #68]	; (801a29c <FATFS_LinkDriverEx+0x94>)
 801a258:	7a5b      	ldrb	r3, [r3, #9]
 801a25a:	b2db      	uxtb	r3, r3
 801a25c:	1c5a      	adds	r2, r3, #1
 801a25e:	b2d1      	uxtb	r1, r2
 801a260:	4a0e      	ldr	r2, [pc, #56]	; (801a29c <FATFS_LinkDriverEx+0x94>)
 801a262:	7251      	strb	r1, [r2, #9]
 801a264:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801a266:	7dbb      	ldrb	r3, [r7, #22]
 801a268:	3330      	adds	r3, #48	; 0x30
 801a26a:	b2da      	uxtb	r2, r3
 801a26c:	68bb      	ldr	r3, [r7, #8]
 801a26e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801a270:	68bb      	ldr	r3, [r7, #8]
 801a272:	3301      	adds	r3, #1
 801a274:	223a      	movs	r2, #58	; 0x3a
 801a276:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801a278:	68bb      	ldr	r3, [r7, #8]
 801a27a:	3302      	adds	r3, #2
 801a27c:	222f      	movs	r2, #47	; 0x2f
 801a27e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801a280:	68bb      	ldr	r3, [r7, #8]
 801a282:	3303      	adds	r3, #3
 801a284:	2200      	movs	r2, #0
 801a286:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801a288:	2300      	movs	r3, #0
 801a28a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801a28c:	7dfb      	ldrb	r3, [r7, #23]
}
 801a28e:	4618      	mov	r0, r3
 801a290:	371c      	adds	r7, #28
 801a292:	46bd      	mov	sp, r7
 801a294:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a298:	4770      	bx	lr
 801a29a:	bf00      	nop
 801a29c:	240018d0 	.word	0x240018d0

0801a2a0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801a2a0:	b580      	push	{r7, lr}
 801a2a2:	b082      	sub	sp, #8
 801a2a4:	af00      	add	r7, sp, #0
 801a2a6:	6078      	str	r0, [r7, #4]
 801a2a8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801a2aa:	2200      	movs	r2, #0
 801a2ac:	6839      	ldr	r1, [r7, #0]
 801a2ae:	6878      	ldr	r0, [r7, #4]
 801a2b0:	f7ff ffaa 	bl	801a208 <FATFS_LinkDriverEx>
 801a2b4:	4603      	mov	r3, r0
}
 801a2b6:	4618      	mov	r0, r3
 801a2b8:	3708      	adds	r7, #8
 801a2ba:	46bd      	mov	sp, r7
 801a2bc:	bd80      	pop	{r7, pc}
	...

0801a2c0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801a2c0:	b480      	push	{r7}
 801a2c2:	b085      	sub	sp, #20
 801a2c4:	af00      	add	r7, sp, #0
 801a2c6:	4603      	mov	r3, r0
 801a2c8:	6039      	str	r1, [r7, #0]
 801a2ca:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801a2cc:	88fb      	ldrh	r3, [r7, #6]
 801a2ce:	2b7f      	cmp	r3, #127	; 0x7f
 801a2d0:	d802      	bhi.n	801a2d8 <ff_convert+0x18>
		c = chr;
 801a2d2:	88fb      	ldrh	r3, [r7, #6]
 801a2d4:	81fb      	strh	r3, [r7, #14]
 801a2d6:	e025      	b.n	801a324 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801a2d8:	683b      	ldr	r3, [r7, #0]
 801a2da:	2b00      	cmp	r3, #0
 801a2dc:	d00b      	beq.n	801a2f6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801a2de:	88fb      	ldrh	r3, [r7, #6]
 801a2e0:	2bff      	cmp	r3, #255	; 0xff
 801a2e2:	d805      	bhi.n	801a2f0 <ff_convert+0x30>
 801a2e4:	88fb      	ldrh	r3, [r7, #6]
 801a2e6:	3b80      	subs	r3, #128	; 0x80
 801a2e8:	4a12      	ldr	r2, [pc, #72]	; (801a334 <ff_convert+0x74>)
 801a2ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a2ee:	e000      	b.n	801a2f2 <ff_convert+0x32>
 801a2f0:	2300      	movs	r3, #0
 801a2f2:	81fb      	strh	r3, [r7, #14]
 801a2f4:	e016      	b.n	801a324 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801a2f6:	2300      	movs	r3, #0
 801a2f8:	81fb      	strh	r3, [r7, #14]
 801a2fa:	e009      	b.n	801a310 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801a2fc:	89fb      	ldrh	r3, [r7, #14]
 801a2fe:	4a0d      	ldr	r2, [pc, #52]	; (801a334 <ff_convert+0x74>)
 801a300:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a304:	88fa      	ldrh	r2, [r7, #6]
 801a306:	429a      	cmp	r2, r3
 801a308:	d006      	beq.n	801a318 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801a30a:	89fb      	ldrh	r3, [r7, #14]
 801a30c:	3301      	adds	r3, #1
 801a30e:	81fb      	strh	r3, [r7, #14]
 801a310:	89fb      	ldrh	r3, [r7, #14]
 801a312:	2b7f      	cmp	r3, #127	; 0x7f
 801a314:	d9f2      	bls.n	801a2fc <ff_convert+0x3c>
 801a316:	e000      	b.n	801a31a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801a318:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801a31a:	89fb      	ldrh	r3, [r7, #14]
 801a31c:	3380      	adds	r3, #128	; 0x80
 801a31e:	b29b      	uxth	r3, r3
 801a320:	b2db      	uxtb	r3, r3
 801a322:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801a324:	89fb      	ldrh	r3, [r7, #14]
}
 801a326:	4618      	mov	r0, r3
 801a328:	3714      	adds	r7, #20
 801a32a:	46bd      	mov	sp, r7
 801a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a330:	4770      	bx	lr
 801a332:	bf00      	nop
 801a334:	08020058 	.word	0x08020058

0801a338 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801a338:	b480      	push	{r7}
 801a33a:	b087      	sub	sp, #28
 801a33c:	af00      	add	r7, sp, #0
 801a33e:	4603      	mov	r3, r0
 801a340:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801a342:	88fb      	ldrh	r3, [r7, #6]
 801a344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a348:	d201      	bcs.n	801a34e <ff_wtoupper+0x16>
 801a34a:	4b3e      	ldr	r3, [pc, #248]	; (801a444 <ff_wtoupper+0x10c>)
 801a34c:	e000      	b.n	801a350 <ff_wtoupper+0x18>
 801a34e:	4b3e      	ldr	r3, [pc, #248]	; (801a448 <ff_wtoupper+0x110>)
 801a350:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801a352:	697b      	ldr	r3, [r7, #20]
 801a354:	1c9a      	adds	r2, r3, #2
 801a356:	617a      	str	r2, [r7, #20]
 801a358:	881b      	ldrh	r3, [r3, #0]
 801a35a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801a35c:	8a7b      	ldrh	r3, [r7, #18]
 801a35e:	2b00      	cmp	r3, #0
 801a360:	d068      	beq.n	801a434 <ff_wtoupper+0xfc>
 801a362:	88fa      	ldrh	r2, [r7, #6]
 801a364:	8a7b      	ldrh	r3, [r7, #18]
 801a366:	429a      	cmp	r2, r3
 801a368:	d364      	bcc.n	801a434 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801a36a:	697b      	ldr	r3, [r7, #20]
 801a36c:	1c9a      	adds	r2, r3, #2
 801a36e:	617a      	str	r2, [r7, #20]
 801a370:	881b      	ldrh	r3, [r3, #0]
 801a372:	823b      	strh	r3, [r7, #16]
 801a374:	8a3b      	ldrh	r3, [r7, #16]
 801a376:	0a1b      	lsrs	r3, r3, #8
 801a378:	81fb      	strh	r3, [r7, #14]
 801a37a:	8a3b      	ldrh	r3, [r7, #16]
 801a37c:	b2db      	uxtb	r3, r3
 801a37e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801a380:	88fa      	ldrh	r2, [r7, #6]
 801a382:	8a79      	ldrh	r1, [r7, #18]
 801a384:	8a3b      	ldrh	r3, [r7, #16]
 801a386:	440b      	add	r3, r1
 801a388:	429a      	cmp	r2, r3
 801a38a:	da49      	bge.n	801a420 <ff_wtoupper+0xe8>
			switch (cmd) {
 801a38c:	89fb      	ldrh	r3, [r7, #14]
 801a38e:	2b08      	cmp	r3, #8
 801a390:	d84f      	bhi.n	801a432 <ff_wtoupper+0xfa>
 801a392:	a201      	add	r2, pc, #4	; (adr r2, 801a398 <ff_wtoupper+0x60>)
 801a394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a398:	0801a3bd 	.word	0x0801a3bd
 801a39c:	0801a3cf 	.word	0x0801a3cf
 801a3a0:	0801a3e5 	.word	0x0801a3e5
 801a3a4:	0801a3ed 	.word	0x0801a3ed
 801a3a8:	0801a3f5 	.word	0x0801a3f5
 801a3ac:	0801a3fd 	.word	0x0801a3fd
 801a3b0:	0801a405 	.word	0x0801a405
 801a3b4:	0801a40d 	.word	0x0801a40d
 801a3b8:	0801a415 	.word	0x0801a415
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801a3bc:	88fa      	ldrh	r2, [r7, #6]
 801a3be:	8a7b      	ldrh	r3, [r7, #18]
 801a3c0:	1ad3      	subs	r3, r2, r3
 801a3c2:	005b      	lsls	r3, r3, #1
 801a3c4:	697a      	ldr	r2, [r7, #20]
 801a3c6:	4413      	add	r3, r2
 801a3c8:	881b      	ldrh	r3, [r3, #0]
 801a3ca:	80fb      	strh	r3, [r7, #6]
 801a3cc:	e027      	b.n	801a41e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801a3ce:	88fa      	ldrh	r2, [r7, #6]
 801a3d0:	8a7b      	ldrh	r3, [r7, #18]
 801a3d2:	1ad3      	subs	r3, r2, r3
 801a3d4:	b29b      	uxth	r3, r3
 801a3d6:	f003 0301 	and.w	r3, r3, #1
 801a3da:	b29b      	uxth	r3, r3
 801a3dc:	88fa      	ldrh	r2, [r7, #6]
 801a3de:	1ad3      	subs	r3, r2, r3
 801a3e0:	80fb      	strh	r3, [r7, #6]
 801a3e2:	e01c      	b.n	801a41e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801a3e4:	88fb      	ldrh	r3, [r7, #6]
 801a3e6:	3b10      	subs	r3, #16
 801a3e8:	80fb      	strh	r3, [r7, #6]
 801a3ea:	e018      	b.n	801a41e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801a3ec:	88fb      	ldrh	r3, [r7, #6]
 801a3ee:	3b20      	subs	r3, #32
 801a3f0:	80fb      	strh	r3, [r7, #6]
 801a3f2:	e014      	b.n	801a41e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801a3f4:	88fb      	ldrh	r3, [r7, #6]
 801a3f6:	3b30      	subs	r3, #48	; 0x30
 801a3f8:	80fb      	strh	r3, [r7, #6]
 801a3fa:	e010      	b.n	801a41e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801a3fc:	88fb      	ldrh	r3, [r7, #6]
 801a3fe:	3b1a      	subs	r3, #26
 801a400:	80fb      	strh	r3, [r7, #6]
 801a402:	e00c      	b.n	801a41e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801a404:	88fb      	ldrh	r3, [r7, #6]
 801a406:	3308      	adds	r3, #8
 801a408:	80fb      	strh	r3, [r7, #6]
 801a40a:	e008      	b.n	801a41e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801a40c:	88fb      	ldrh	r3, [r7, #6]
 801a40e:	3b50      	subs	r3, #80	; 0x50
 801a410:	80fb      	strh	r3, [r7, #6]
 801a412:	e004      	b.n	801a41e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801a414:	88fb      	ldrh	r3, [r7, #6]
 801a416:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801a41a:	80fb      	strh	r3, [r7, #6]
 801a41c:	bf00      	nop
			}
			break;
 801a41e:	e008      	b.n	801a432 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801a420:	89fb      	ldrh	r3, [r7, #14]
 801a422:	2b00      	cmp	r3, #0
 801a424:	d195      	bne.n	801a352 <ff_wtoupper+0x1a>
 801a426:	8a3b      	ldrh	r3, [r7, #16]
 801a428:	005b      	lsls	r3, r3, #1
 801a42a:	697a      	ldr	r2, [r7, #20]
 801a42c:	4413      	add	r3, r2
 801a42e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801a430:	e78f      	b.n	801a352 <ff_wtoupper+0x1a>
			break;
 801a432:	bf00      	nop
	}

	return chr;
 801a434:	88fb      	ldrh	r3, [r7, #6]
}
 801a436:	4618      	mov	r0, r3
 801a438:	371c      	adds	r7, #28
 801a43a:	46bd      	mov	sp, r7
 801a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a440:	4770      	bx	lr
 801a442:	bf00      	nop
 801a444:	08020158 	.word	0x08020158
 801a448:	0802034c 	.word	0x0802034c

0801a44c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801a44c:	b580      	push	{r7, lr}
 801a44e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 801a450:	2201      	movs	r2, #1
 801a452:	4913      	ldr	r1, [pc, #76]	; (801a4a0 <MX_USB_DEVICE_Init+0x54>)
 801a454:	4813      	ldr	r0, [pc, #76]	; (801a4a4 <MX_USB_DEVICE_Init+0x58>)
 801a456:	f7fb fd1d 	bl	8015e94 <USBD_Init>
 801a45a:	4603      	mov	r3, r0
 801a45c:	2b00      	cmp	r3, #0
 801a45e:	d001      	beq.n	801a464 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801a460:	f7e8 fd1e 	bl	8002ea0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 801a464:	4910      	ldr	r1, [pc, #64]	; (801a4a8 <MX_USB_DEVICE_Init+0x5c>)
 801a466:	480f      	ldr	r0, [pc, #60]	; (801a4a4 <MX_USB_DEVICE_Init+0x58>)
 801a468:	f7fb fd44 	bl	8015ef4 <USBD_RegisterClass>
 801a46c:	4603      	mov	r3, r0
 801a46e:	2b00      	cmp	r3, #0
 801a470:	d001      	beq.n	801a476 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801a472:	f7e8 fd15 	bl	8002ea0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 801a476:	490d      	ldr	r1, [pc, #52]	; (801a4ac <MX_USB_DEVICE_Init+0x60>)
 801a478:	480a      	ldr	r0, [pc, #40]	; (801a4a4 <MX_USB_DEVICE_Init+0x58>)
 801a47a:	f7fb fc3b 	bl	8015cf4 <USBD_CDC_RegisterInterface>
 801a47e:	4603      	mov	r3, r0
 801a480:	2b00      	cmp	r3, #0
 801a482:	d001      	beq.n	801a488 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801a484:	f7e8 fd0c 	bl	8002ea0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 801a488:	4806      	ldr	r0, [pc, #24]	; (801a4a4 <MX_USB_DEVICE_Init+0x58>)
 801a48a:	f7fb fd69 	bl	8015f60 <USBD_Start>
 801a48e:	4603      	mov	r3, r0
 801a490:	2b00      	cmp	r3, #0
 801a492:	d001      	beq.n	801a498 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801a494:	f7e8 fd04 	bl	8002ea0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801a498:	f7f0 f994 	bl	800a7c4 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801a49c:	bf00      	nop
 801a49e:	bd80      	pop	{r7, pc}
 801a4a0:	240000b0 	.word	0x240000b0
 801a4a4:	240018dc 	.word	0x240018dc
 801a4a8:	2400001c 	.word	0x2400001c
 801a4ac:	2400009c 	.word	0x2400009c

0801a4b0 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 801a4b0:	b580      	push	{r7, lr}
 801a4b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 801a4b4:	2200      	movs	r2, #0
 801a4b6:	4905      	ldr	r1, [pc, #20]	; (801a4cc <CDC_Init_HS+0x1c>)
 801a4b8:	4805      	ldr	r0, [pc, #20]	; (801a4d0 <CDC_Init_HS+0x20>)
 801a4ba:	f7fb fc35 	bl	8015d28 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 801a4be:	4905      	ldr	r1, [pc, #20]	; (801a4d4 <CDC_Init_HS+0x24>)
 801a4c0:	4803      	ldr	r0, [pc, #12]	; (801a4d0 <CDC_Init_HS+0x20>)
 801a4c2:	f7fb fc53 	bl	8015d6c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801a4c6:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801a4c8:	4618      	mov	r0, r3
 801a4ca:	bd80      	pop	{r7, pc}
 801a4cc:	240023b8 	.word	0x240023b8
 801a4d0:	240018dc 	.word	0x240018dc
 801a4d4:	24001bb8 	.word	0x24001bb8

0801a4d8 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 801a4d8:	b480      	push	{r7}
 801a4da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 801a4dc:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 801a4de:	4618      	mov	r0, r3
 801a4e0:	46bd      	mov	sp, r7
 801a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4e6:	4770      	bx	lr

0801a4e8 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801a4e8:	b480      	push	{r7}
 801a4ea:	b083      	sub	sp, #12
 801a4ec:	af00      	add	r7, sp, #0
 801a4ee:	4603      	mov	r3, r0
 801a4f0:	6039      	str	r1, [r7, #0]
 801a4f2:	71fb      	strb	r3, [r7, #7]
 801a4f4:	4613      	mov	r3, r2
 801a4f6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 801a4f8:	79fb      	ldrb	r3, [r7, #7]
 801a4fa:	2b23      	cmp	r3, #35	; 0x23
 801a4fc:	d84a      	bhi.n	801a594 <CDC_Control_HS+0xac>
 801a4fe:	a201      	add	r2, pc, #4	; (adr r2, 801a504 <CDC_Control_HS+0x1c>)
 801a500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a504:	0801a595 	.word	0x0801a595
 801a508:	0801a595 	.word	0x0801a595
 801a50c:	0801a595 	.word	0x0801a595
 801a510:	0801a595 	.word	0x0801a595
 801a514:	0801a595 	.word	0x0801a595
 801a518:	0801a595 	.word	0x0801a595
 801a51c:	0801a595 	.word	0x0801a595
 801a520:	0801a595 	.word	0x0801a595
 801a524:	0801a595 	.word	0x0801a595
 801a528:	0801a595 	.word	0x0801a595
 801a52c:	0801a595 	.word	0x0801a595
 801a530:	0801a595 	.word	0x0801a595
 801a534:	0801a595 	.word	0x0801a595
 801a538:	0801a595 	.word	0x0801a595
 801a53c:	0801a595 	.word	0x0801a595
 801a540:	0801a595 	.word	0x0801a595
 801a544:	0801a595 	.word	0x0801a595
 801a548:	0801a595 	.word	0x0801a595
 801a54c:	0801a595 	.word	0x0801a595
 801a550:	0801a595 	.word	0x0801a595
 801a554:	0801a595 	.word	0x0801a595
 801a558:	0801a595 	.word	0x0801a595
 801a55c:	0801a595 	.word	0x0801a595
 801a560:	0801a595 	.word	0x0801a595
 801a564:	0801a595 	.word	0x0801a595
 801a568:	0801a595 	.word	0x0801a595
 801a56c:	0801a595 	.word	0x0801a595
 801a570:	0801a595 	.word	0x0801a595
 801a574:	0801a595 	.word	0x0801a595
 801a578:	0801a595 	.word	0x0801a595
 801a57c:	0801a595 	.word	0x0801a595
 801a580:	0801a595 	.word	0x0801a595
 801a584:	0801a595 	.word	0x0801a595
 801a588:	0801a595 	.word	0x0801a595
 801a58c:	0801a595 	.word	0x0801a595
 801a590:	0801a595 	.word	0x0801a595
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 801a594:	bf00      	nop
  }

  return (USBD_OK);
 801a596:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 801a598:	4618      	mov	r0, r3
 801a59a:	370c      	adds	r7, #12
 801a59c:	46bd      	mov	sp, r7
 801a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5a2:	4770      	bx	lr

0801a5a4 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 801a5a4:	b580      	push	{r7, lr}
 801a5a6:	b082      	sub	sp, #8
 801a5a8:	af00      	add	r7, sp, #0
 801a5aa:	6078      	str	r0, [r7, #4]
 801a5ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 801a5ae:	6879      	ldr	r1, [r7, #4]
 801a5b0:	4805      	ldr	r0, [pc, #20]	; (801a5c8 <CDC_Receive_HS+0x24>)
 801a5b2:	f7fb fbdb 	bl	8015d6c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 801a5b6:	4804      	ldr	r0, [pc, #16]	; (801a5c8 <CDC_Receive_HS+0x24>)
 801a5b8:	f7fb fc36 	bl	8015e28 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801a5bc:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 801a5be:	4618      	mov	r0, r3
 801a5c0:	3708      	adds	r7, #8
 801a5c2:	46bd      	mov	sp, r7
 801a5c4:	bd80      	pop	{r7, pc}
 801a5c6:	bf00      	nop
 801a5c8:	240018dc 	.word	0x240018dc

0801a5cc <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 801a5cc:	b580      	push	{r7, lr}
 801a5ce:	b084      	sub	sp, #16
 801a5d0:	af00      	add	r7, sp, #0
 801a5d2:	6078      	str	r0, [r7, #4]
 801a5d4:	460b      	mov	r3, r1
 801a5d6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801a5d8:	2300      	movs	r3, #0
 801a5da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 801a5dc:	4b0d      	ldr	r3, [pc, #52]	; (801a614 <CDC_Transmit_HS+0x48>)
 801a5de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801a5e2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801a5e4:	68bb      	ldr	r3, [r7, #8]
 801a5e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801a5ea:	2b00      	cmp	r3, #0
 801a5ec:	d001      	beq.n	801a5f2 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 801a5ee:	2301      	movs	r3, #1
 801a5f0:	e00b      	b.n	801a60a <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 801a5f2:	887b      	ldrh	r3, [r7, #2]
 801a5f4:	461a      	mov	r2, r3
 801a5f6:	6879      	ldr	r1, [r7, #4]
 801a5f8:	4806      	ldr	r0, [pc, #24]	; (801a614 <CDC_Transmit_HS+0x48>)
 801a5fa:	f7fb fb95 	bl	8015d28 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 801a5fe:	4805      	ldr	r0, [pc, #20]	; (801a614 <CDC_Transmit_HS+0x48>)
 801a600:	f7fb fbd2 	bl	8015da8 <USBD_CDC_TransmitPacket>
 801a604:	4603      	mov	r3, r0
 801a606:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 801a608:	7bfb      	ldrb	r3, [r7, #15]
}
 801a60a:	4618      	mov	r0, r3
 801a60c:	3710      	adds	r7, #16
 801a60e:	46bd      	mov	sp, r7
 801a610:	bd80      	pop	{r7, pc}
 801a612:	bf00      	nop
 801a614:	240018dc 	.word	0x240018dc

0801a618 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801a618:	b480      	push	{r7}
 801a61a:	b087      	sub	sp, #28
 801a61c:	af00      	add	r7, sp, #0
 801a61e:	60f8      	str	r0, [r7, #12]
 801a620:	60b9      	str	r1, [r7, #8]
 801a622:	4613      	mov	r3, r2
 801a624:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801a626:	2300      	movs	r3, #0
 801a628:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801a62a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a62e:	4618      	mov	r0, r3
 801a630:	371c      	adds	r7, #28
 801a632:	46bd      	mov	sp, r7
 801a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a638:	4770      	bx	lr
	...

0801a63c <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a63c:	b480      	push	{r7}
 801a63e:	b083      	sub	sp, #12
 801a640:	af00      	add	r7, sp, #0
 801a642:	4603      	mov	r3, r0
 801a644:	6039      	str	r1, [r7, #0]
 801a646:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 801a648:	683b      	ldr	r3, [r7, #0]
 801a64a:	2212      	movs	r2, #18
 801a64c:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 801a64e:	4b03      	ldr	r3, [pc, #12]	; (801a65c <USBD_HS_DeviceDescriptor+0x20>)
}
 801a650:	4618      	mov	r0, r3
 801a652:	370c      	adds	r7, #12
 801a654:	46bd      	mov	sp, r7
 801a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a65a:	4770      	bx	lr
 801a65c:	240000cc 	.word	0x240000cc

0801a660 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a660:	b480      	push	{r7}
 801a662:	b083      	sub	sp, #12
 801a664:	af00      	add	r7, sp, #0
 801a666:	4603      	mov	r3, r0
 801a668:	6039      	str	r1, [r7, #0]
 801a66a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801a66c:	683b      	ldr	r3, [r7, #0]
 801a66e:	2204      	movs	r2, #4
 801a670:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801a672:	4b03      	ldr	r3, [pc, #12]	; (801a680 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 801a674:	4618      	mov	r0, r3
 801a676:	370c      	adds	r7, #12
 801a678:	46bd      	mov	sp, r7
 801a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a67e:	4770      	bx	lr
 801a680:	240000e0 	.word	0x240000e0

0801a684 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a684:	b580      	push	{r7, lr}
 801a686:	b082      	sub	sp, #8
 801a688:	af00      	add	r7, sp, #0
 801a68a:	4603      	mov	r3, r0
 801a68c:	6039      	str	r1, [r7, #0]
 801a68e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a690:	79fb      	ldrb	r3, [r7, #7]
 801a692:	2b00      	cmp	r3, #0
 801a694:	d105      	bne.n	801a6a2 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801a696:	683a      	ldr	r2, [r7, #0]
 801a698:	4907      	ldr	r1, [pc, #28]	; (801a6b8 <USBD_HS_ProductStrDescriptor+0x34>)
 801a69a:	4808      	ldr	r0, [pc, #32]	; (801a6bc <USBD_HS_ProductStrDescriptor+0x38>)
 801a69c:	f7fc fe12 	bl	80172c4 <USBD_GetString>
 801a6a0:	e004      	b.n	801a6ac <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801a6a2:	683a      	ldr	r2, [r7, #0]
 801a6a4:	4904      	ldr	r1, [pc, #16]	; (801a6b8 <USBD_HS_ProductStrDescriptor+0x34>)
 801a6a6:	4805      	ldr	r0, [pc, #20]	; (801a6bc <USBD_HS_ProductStrDescriptor+0x38>)
 801a6a8:	f7fc fe0c 	bl	80172c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a6ac:	4b02      	ldr	r3, [pc, #8]	; (801a6b8 <USBD_HS_ProductStrDescriptor+0x34>)
}
 801a6ae:	4618      	mov	r0, r3
 801a6b0:	3708      	adds	r7, #8
 801a6b2:	46bd      	mov	sp, r7
 801a6b4:	bd80      	pop	{r7, pc}
 801a6b6:	bf00      	nop
 801a6b8:	24002bb8 	.word	0x24002bb8
 801a6bc:	0801febc 	.word	0x0801febc

0801a6c0 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a6c0:	b580      	push	{r7, lr}
 801a6c2:	b082      	sub	sp, #8
 801a6c4:	af00      	add	r7, sp, #0
 801a6c6:	4603      	mov	r3, r0
 801a6c8:	6039      	str	r1, [r7, #0]
 801a6ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801a6cc:	683a      	ldr	r2, [r7, #0]
 801a6ce:	4904      	ldr	r1, [pc, #16]	; (801a6e0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 801a6d0:	4804      	ldr	r0, [pc, #16]	; (801a6e4 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 801a6d2:	f7fc fdf7 	bl	80172c4 <USBD_GetString>
  return USBD_StrDesc;
 801a6d6:	4b02      	ldr	r3, [pc, #8]	; (801a6e0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 801a6d8:	4618      	mov	r0, r3
 801a6da:	3708      	adds	r7, #8
 801a6dc:	46bd      	mov	sp, r7
 801a6de:	bd80      	pop	{r7, pc}
 801a6e0:	24002bb8 	.word	0x24002bb8
 801a6e4:	0801fed8 	.word	0x0801fed8

0801a6e8 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a6e8:	b580      	push	{r7, lr}
 801a6ea:	b082      	sub	sp, #8
 801a6ec:	af00      	add	r7, sp, #0
 801a6ee:	4603      	mov	r3, r0
 801a6f0:	6039      	str	r1, [r7, #0]
 801a6f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801a6f4:	683b      	ldr	r3, [r7, #0]
 801a6f6:	221a      	movs	r2, #26
 801a6f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801a6fa:	f000 f843 	bl	801a784 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801a6fe:	4b02      	ldr	r3, [pc, #8]	; (801a708 <USBD_HS_SerialStrDescriptor+0x20>)
}
 801a700:	4618      	mov	r0, r3
 801a702:	3708      	adds	r7, #8
 801a704:	46bd      	mov	sp, r7
 801a706:	bd80      	pop	{r7, pc}
 801a708:	240000e4 	.word	0x240000e4

0801a70c <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a70c:	b580      	push	{r7, lr}
 801a70e:	b082      	sub	sp, #8
 801a710:	af00      	add	r7, sp, #0
 801a712:	4603      	mov	r3, r0
 801a714:	6039      	str	r1, [r7, #0]
 801a716:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801a718:	79fb      	ldrb	r3, [r7, #7]
 801a71a:	2b00      	cmp	r3, #0
 801a71c:	d105      	bne.n	801a72a <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801a71e:	683a      	ldr	r2, [r7, #0]
 801a720:	4907      	ldr	r1, [pc, #28]	; (801a740 <USBD_HS_ConfigStrDescriptor+0x34>)
 801a722:	4808      	ldr	r0, [pc, #32]	; (801a744 <USBD_HS_ConfigStrDescriptor+0x38>)
 801a724:	f7fc fdce 	bl	80172c4 <USBD_GetString>
 801a728:	e004      	b.n	801a734 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801a72a:	683a      	ldr	r2, [r7, #0]
 801a72c:	4904      	ldr	r1, [pc, #16]	; (801a740 <USBD_HS_ConfigStrDescriptor+0x34>)
 801a72e:	4805      	ldr	r0, [pc, #20]	; (801a744 <USBD_HS_ConfigStrDescriptor+0x38>)
 801a730:	f7fc fdc8 	bl	80172c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a734:	4b02      	ldr	r3, [pc, #8]	; (801a740 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801a736:	4618      	mov	r0, r3
 801a738:	3708      	adds	r7, #8
 801a73a:	46bd      	mov	sp, r7
 801a73c:	bd80      	pop	{r7, pc}
 801a73e:	bf00      	nop
 801a740:	24002bb8 	.word	0x24002bb8
 801a744:	0801fedc 	.word	0x0801fedc

0801a748 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a748:	b580      	push	{r7, lr}
 801a74a:	b082      	sub	sp, #8
 801a74c:	af00      	add	r7, sp, #0
 801a74e:	4603      	mov	r3, r0
 801a750:	6039      	str	r1, [r7, #0]
 801a752:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a754:	79fb      	ldrb	r3, [r7, #7]
 801a756:	2b00      	cmp	r3, #0
 801a758:	d105      	bne.n	801a766 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801a75a:	683a      	ldr	r2, [r7, #0]
 801a75c:	4907      	ldr	r1, [pc, #28]	; (801a77c <USBD_HS_InterfaceStrDescriptor+0x34>)
 801a75e:	4808      	ldr	r0, [pc, #32]	; (801a780 <USBD_HS_InterfaceStrDescriptor+0x38>)
 801a760:	f7fc fdb0 	bl	80172c4 <USBD_GetString>
 801a764:	e004      	b.n	801a770 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801a766:	683a      	ldr	r2, [r7, #0]
 801a768:	4904      	ldr	r1, [pc, #16]	; (801a77c <USBD_HS_InterfaceStrDescriptor+0x34>)
 801a76a:	4805      	ldr	r0, [pc, #20]	; (801a780 <USBD_HS_InterfaceStrDescriptor+0x38>)
 801a76c:	f7fc fdaa 	bl	80172c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a770:	4b02      	ldr	r3, [pc, #8]	; (801a77c <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 801a772:	4618      	mov	r0, r3
 801a774:	3708      	adds	r7, #8
 801a776:	46bd      	mov	sp, r7
 801a778:	bd80      	pop	{r7, pc}
 801a77a:	bf00      	nop
 801a77c:	24002bb8 	.word	0x24002bb8
 801a780:	0801fee8 	.word	0x0801fee8

0801a784 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801a784:	b580      	push	{r7, lr}
 801a786:	b084      	sub	sp, #16
 801a788:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801a78a:	4b0f      	ldr	r3, [pc, #60]	; (801a7c8 <Get_SerialNum+0x44>)
 801a78c:	681b      	ldr	r3, [r3, #0]
 801a78e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801a790:	4b0e      	ldr	r3, [pc, #56]	; (801a7cc <Get_SerialNum+0x48>)
 801a792:	681b      	ldr	r3, [r3, #0]
 801a794:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801a796:	4b0e      	ldr	r3, [pc, #56]	; (801a7d0 <Get_SerialNum+0x4c>)
 801a798:	681b      	ldr	r3, [r3, #0]
 801a79a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801a79c:	68fa      	ldr	r2, [r7, #12]
 801a79e:	687b      	ldr	r3, [r7, #4]
 801a7a0:	4413      	add	r3, r2
 801a7a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801a7a4:	68fb      	ldr	r3, [r7, #12]
 801a7a6:	2b00      	cmp	r3, #0
 801a7a8:	d009      	beq.n	801a7be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801a7aa:	2208      	movs	r2, #8
 801a7ac:	4909      	ldr	r1, [pc, #36]	; (801a7d4 <Get_SerialNum+0x50>)
 801a7ae:	68f8      	ldr	r0, [r7, #12]
 801a7b0:	f000 f814 	bl	801a7dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801a7b4:	2204      	movs	r2, #4
 801a7b6:	4908      	ldr	r1, [pc, #32]	; (801a7d8 <Get_SerialNum+0x54>)
 801a7b8:	68b8      	ldr	r0, [r7, #8]
 801a7ba:	f000 f80f 	bl	801a7dc <IntToUnicode>
  }
}
 801a7be:	bf00      	nop
 801a7c0:	3710      	adds	r7, #16
 801a7c2:	46bd      	mov	sp, r7
 801a7c4:	bd80      	pop	{r7, pc}
 801a7c6:	bf00      	nop
 801a7c8:	1ff1e800 	.word	0x1ff1e800
 801a7cc:	1ff1e804 	.word	0x1ff1e804
 801a7d0:	1ff1e808 	.word	0x1ff1e808
 801a7d4:	240000e6 	.word	0x240000e6
 801a7d8:	240000f6 	.word	0x240000f6

0801a7dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801a7dc:	b480      	push	{r7}
 801a7de:	b087      	sub	sp, #28
 801a7e0:	af00      	add	r7, sp, #0
 801a7e2:	60f8      	str	r0, [r7, #12]
 801a7e4:	60b9      	str	r1, [r7, #8]
 801a7e6:	4613      	mov	r3, r2
 801a7e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801a7ea:	2300      	movs	r3, #0
 801a7ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801a7ee:	2300      	movs	r3, #0
 801a7f0:	75fb      	strb	r3, [r7, #23]
 801a7f2:	e027      	b.n	801a844 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801a7f4:	68fb      	ldr	r3, [r7, #12]
 801a7f6:	0f1b      	lsrs	r3, r3, #28
 801a7f8:	2b09      	cmp	r3, #9
 801a7fa:	d80b      	bhi.n	801a814 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801a7fc:	68fb      	ldr	r3, [r7, #12]
 801a7fe:	0f1b      	lsrs	r3, r3, #28
 801a800:	b2da      	uxtb	r2, r3
 801a802:	7dfb      	ldrb	r3, [r7, #23]
 801a804:	005b      	lsls	r3, r3, #1
 801a806:	4619      	mov	r1, r3
 801a808:	68bb      	ldr	r3, [r7, #8]
 801a80a:	440b      	add	r3, r1
 801a80c:	3230      	adds	r2, #48	; 0x30
 801a80e:	b2d2      	uxtb	r2, r2
 801a810:	701a      	strb	r2, [r3, #0]
 801a812:	e00a      	b.n	801a82a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801a814:	68fb      	ldr	r3, [r7, #12]
 801a816:	0f1b      	lsrs	r3, r3, #28
 801a818:	b2da      	uxtb	r2, r3
 801a81a:	7dfb      	ldrb	r3, [r7, #23]
 801a81c:	005b      	lsls	r3, r3, #1
 801a81e:	4619      	mov	r1, r3
 801a820:	68bb      	ldr	r3, [r7, #8]
 801a822:	440b      	add	r3, r1
 801a824:	3237      	adds	r2, #55	; 0x37
 801a826:	b2d2      	uxtb	r2, r2
 801a828:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801a82a:	68fb      	ldr	r3, [r7, #12]
 801a82c:	011b      	lsls	r3, r3, #4
 801a82e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801a830:	7dfb      	ldrb	r3, [r7, #23]
 801a832:	005b      	lsls	r3, r3, #1
 801a834:	3301      	adds	r3, #1
 801a836:	68ba      	ldr	r2, [r7, #8]
 801a838:	4413      	add	r3, r2
 801a83a:	2200      	movs	r2, #0
 801a83c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801a83e:	7dfb      	ldrb	r3, [r7, #23]
 801a840:	3301      	adds	r3, #1
 801a842:	75fb      	strb	r3, [r7, #23]
 801a844:	7dfa      	ldrb	r2, [r7, #23]
 801a846:	79fb      	ldrb	r3, [r7, #7]
 801a848:	429a      	cmp	r2, r3
 801a84a:	d3d3      	bcc.n	801a7f4 <IntToUnicode+0x18>
  }
}
 801a84c:	bf00      	nop
 801a84e:	bf00      	nop
 801a850:	371c      	adds	r7, #28
 801a852:	46bd      	mov	sp, r7
 801a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a858:	4770      	bx	lr
	...

0801a85c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801a85c:	b580      	push	{r7, lr}
 801a85e:	b0b2      	sub	sp, #200	; 0xc8
 801a860:	af00      	add	r7, sp, #0
 801a862:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801a864:	f107 0310 	add.w	r3, r7, #16
 801a868:	22b8      	movs	r2, #184	; 0xb8
 801a86a:	2100      	movs	r1, #0
 801a86c:	4618      	mov	r0, r3
 801a86e:	f001 fa94 	bl	801bd9a <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 801a872:	687b      	ldr	r3, [r7, #4]
 801a874:	681b      	ldr	r3, [r3, #0]
 801a876:	4a1a      	ldr	r2, [pc, #104]	; (801a8e0 <HAL_PCD_MspInit+0x84>)
 801a878:	4293      	cmp	r3, r2
 801a87a:	d12c      	bne.n	801a8d6 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801a87c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 801a880:	f04f 0300 	mov.w	r3, #0
 801a884:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801a888:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 801a88c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801a890:	f107 0310 	add.w	r3, r7, #16
 801a894:	4618      	mov	r0, r3
 801a896:	f7f0 ff75 	bl	800b784 <HAL_RCCEx_PeriphCLKConfig>
 801a89a:	4603      	mov	r3, r0
 801a89c:	2b00      	cmp	r3, #0
 801a89e:	d001      	beq.n	801a8a4 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 801a8a0:	f7e8 fafe 	bl	8002ea0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801a8a4:	f7ef ff8e 	bl	800a7c4 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 801a8a8:	4b0e      	ldr	r3, [pc, #56]	; (801a8e4 <HAL_PCD_MspInit+0x88>)
 801a8aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801a8ae:	4a0d      	ldr	r2, [pc, #52]	; (801a8e4 <HAL_PCD_MspInit+0x88>)
 801a8b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801a8b4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801a8b8:	4b0a      	ldr	r3, [pc, #40]	; (801a8e4 <HAL_PCD_MspInit+0x88>)
 801a8ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801a8be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a8c2:	60fb      	str	r3, [r7, #12]
 801a8c4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 801a8c6:	2200      	movs	r2, #0
 801a8c8:	2100      	movs	r1, #0
 801a8ca:	204d      	movs	r0, #77	; 0x4d
 801a8cc:	f7eb fcff 	bl	80062ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 801a8d0:	204d      	movs	r0, #77	; 0x4d
 801a8d2:	f7eb fd16 	bl	8006302 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801a8d6:	bf00      	nop
 801a8d8:	37c8      	adds	r7, #200	; 0xc8
 801a8da:	46bd      	mov	sp, r7
 801a8dc:	bd80      	pop	{r7, pc}
 801a8de:	bf00      	nop
 801a8e0:	40040000 	.word	0x40040000
 801a8e4:	58024400 	.word	0x58024400

0801a8e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a8e8:	b580      	push	{r7, lr}
 801a8ea:	b082      	sub	sp, #8
 801a8ec:	af00      	add	r7, sp, #0
 801a8ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801a8f0:	687b      	ldr	r3, [r7, #4]
 801a8f2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801a8f6:	687b      	ldr	r3, [r7, #4]
 801a8f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801a8fc:	4619      	mov	r1, r3
 801a8fe:	4610      	mov	r0, r2
 801a900:	f7fb fb7b 	bl	8015ffa <USBD_LL_SetupStage>
}
 801a904:	bf00      	nop
 801a906:	3708      	adds	r7, #8
 801a908:	46bd      	mov	sp, r7
 801a90a:	bd80      	pop	{r7, pc}

0801a90c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a90c:	b580      	push	{r7, lr}
 801a90e:	b082      	sub	sp, #8
 801a910:	af00      	add	r7, sp, #0
 801a912:	6078      	str	r0, [r7, #4]
 801a914:	460b      	mov	r3, r1
 801a916:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801a918:	687b      	ldr	r3, [r7, #4]
 801a91a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801a91e:	78fa      	ldrb	r2, [r7, #3]
 801a920:	6879      	ldr	r1, [r7, #4]
 801a922:	4613      	mov	r3, r2
 801a924:	00db      	lsls	r3, r3, #3
 801a926:	4413      	add	r3, r2
 801a928:	009b      	lsls	r3, r3, #2
 801a92a:	440b      	add	r3, r1
 801a92c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801a930:	681a      	ldr	r2, [r3, #0]
 801a932:	78fb      	ldrb	r3, [r7, #3]
 801a934:	4619      	mov	r1, r3
 801a936:	f7fb fbb5 	bl	80160a4 <USBD_LL_DataOutStage>
}
 801a93a:	bf00      	nop
 801a93c:	3708      	adds	r7, #8
 801a93e:	46bd      	mov	sp, r7
 801a940:	bd80      	pop	{r7, pc}

0801a942 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a942:	b580      	push	{r7, lr}
 801a944:	b082      	sub	sp, #8
 801a946:	af00      	add	r7, sp, #0
 801a948:	6078      	str	r0, [r7, #4]
 801a94a:	460b      	mov	r3, r1
 801a94c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801a94e:	687b      	ldr	r3, [r7, #4]
 801a950:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801a954:	78fa      	ldrb	r2, [r7, #3]
 801a956:	6879      	ldr	r1, [r7, #4]
 801a958:	4613      	mov	r3, r2
 801a95a:	00db      	lsls	r3, r3, #3
 801a95c:	4413      	add	r3, r2
 801a95e:	009b      	lsls	r3, r3, #2
 801a960:	440b      	add	r3, r1
 801a962:	3348      	adds	r3, #72	; 0x48
 801a964:	681a      	ldr	r2, [r3, #0]
 801a966:	78fb      	ldrb	r3, [r7, #3]
 801a968:	4619      	mov	r1, r3
 801a96a:	f7fb fc4e 	bl	801620a <USBD_LL_DataInStage>
}
 801a96e:	bf00      	nop
 801a970:	3708      	adds	r7, #8
 801a972:	46bd      	mov	sp, r7
 801a974:	bd80      	pop	{r7, pc}

0801a976 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a976:	b580      	push	{r7, lr}
 801a978:	b082      	sub	sp, #8
 801a97a:	af00      	add	r7, sp, #0
 801a97c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a984:	4618      	mov	r0, r3
 801a986:	f7fb fd88 	bl	801649a <USBD_LL_SOF>
}
 801a98a:	bf00      	nop
 801a98c:	3708      	adds	r7, #8
 801a98e:	46bd      	mov	sp, r7
 801a990:	bd80      	pop	{r7, pc}

0801a992 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a992:	b580      	push	{r7, lr}
 801a994:	b084      	sub	sp, #16
 801a996:	af00      	add	r7, sp, #0
 801a998:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801a99a:	2301      	movs	r3, #1
 801a99c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801a99e:	687b      	ldr	r3, [r7, #4]
 801a9a0:	691b      	ldr	r3, [r3, #16]
 801a9a2:	2b00      	cmp	r3, #0
 801a9a4:	d102      	bne.n	801a9ac <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801a9a6:	2300      	movs	r3, #0
 801a9a8:	73fb      	strb	r3, [r7, #15]
 801a9aa:	e008      	b.n	801a9be <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801a9ac:	687b      	ldr	r3, [r7, #4]
 801a9ae:	691b      	ldr	r3, [r3, #16]
 801a9b0:	2b02      	cmp	r3, #2
 801a9b2:	d102      	bne.n	801a9ba <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801a9b4:	2301      	movs	r3, #1
 801a9b6:	73fb      	strb	r3, [r7, #15]
 801a9b8:	e001      	b.n	801a9be <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801a9ba:	f7e8 fa71 	bl	8002ea0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801a9be:	687b      	ldr	r3, [r7, #4]
 801a9c0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a9c4:	7bfa      	ldrb	r2, [r7, #15]
 801a9c6:	4611      	mov	r1, r2
 801a9c8:	4618      	mov	r0, r3
 801a9ca:	f7fb fd22 	bl	8016412 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801a9ce:	687b      	ldr	r3, [r7, #4]
 801a9d0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a9d4:	4618      	mov	r0, r3
 801a9d6:	f7fb fcca 	bl	801636e <USBD_LL_Reset>
}
 801a9da:	bf00      	nop
 801a9dc:	3710      	adds	r7, #16
 801a9de:	46bd      	mov	sp, r7
 801a9e0:	bd80      	pop	{r7, pc}
	...

0801a9e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a9e4:	b580      	push	{r7, lr}
 801a9e6:	b082      	sub	sp, #8
 801a9e8:	af00      	add	r7, sp, #0
 801a9ea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a9f2:	4618      	mov	r0, r3
 801a9f4:	f7fb fd1d 	bl	8016432 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801a9f8:	687b      	ldr	r3, [r7, #4]
 801a9fa:	681b      	ldr	r3, [r3, #0]
 801a9fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801aa00:	681b      	ldr	r3, [r3, #0]
 801aa02:	687a      	ldr	r2, [r7, #4]
 801aa04:	6812      	ldr	r2, [r2, #0]
 801aa06:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801aa0a:	f043 0301 	orr.w	r3, r3, #1
 801aa0e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801aa10:	687b      	ldr	r3, [r7, #4]
 801aa12:	6a1b      	ldr	r3, [r3, #32]
 801aa14:	2b00      	cmp	r3, #0
 801aa16:	d005      	beq.n	801aa24 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801aa18:	4b04      	ldr	r3, [pc, #16]	; (801aa2c <HAL_PCD_SuspendCallback+0x48>)
 801aa1a:	691b      	ldr	r3, [r3, #16]
 801aa1c:	4a03      	ldr	r2, [pc, #12]	; (801aa2c <HAL_PCD_SuspendCallback+0x48>)
 801aa1e:	f043 0306 	orr.w	r3, r3, #6
 801aa22:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801aa24:	bf00      	nop
 801aa26:	3708      	adds	r7, #8
 801aa28:	46bd      	mov	sp, r7
 801aa2a:	bd80      	pop	{r7, pc}
 801aa2c:	e000ed00 	.word	0xe000ed00

0801aa30 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aa30:	b580      	push	{r7, lr}
 801aa32:	b082      	sub	sp, #8
 801aa34:	af00      	add	r7, sp, #0
 801aa36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801aa38:	687b      	ldr	r3, [r7, #4]
 801aa3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aa3e:	4618      	mov	r0, r3
 801aa40:	f7fb fd13 	bl	801646a <USBD_LL_Resume>
}
 801aa44:	bf00      	nop
 801aa46:	3708      	adds	r7, #8
 801aa48:	46bd      	mov	sp, r7
 801aa4a:	bd80      	pop	{r7, pc}

0801aa4c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aa4c:	b580      	push	{r7, lr}
 801aa4e:	b082      	sub	sp, #8
 801aa50:	af00      	add	r7, sp, #0
 801aa52:	6078      	str	r0, [r7, #4]
 801aa54:	460b      	mov	r3, r1
 801aa56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801aa58:	687b      	ldr	r3, [r7, #4]
 801aa5a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aa5e:	78fa      	ldrb	r2, [r7, #3]
 801aa60:	4611      	mov	r1, r2
 801aa62:	4618      	mov	r0, r3
 801aa64:	f7fb fd6b 	bl	801653e <USBD_LL_IsoOUTIncomplete>
}
 801aa68:	bf00      	nop
 801aa6a:	3708      	adds	r7, #8
 801aa6c:	46bd      	mov	sp, r7
 801aa6e:	bd80      	pop	{r7, pc}

0801aa70 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aa70:	b580      	push	{r7, lr}
 801aa72:	b082      	sub	sp, #8
 801aa74:	af00      	add	r7, sp, #0
 801aa76:	6078      	str	r0, [r7, #4]
 801aa78:	460b      	mov	r3, r1
 801aa7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801aa7c:	687b      	ldr	r3, [r7, #4]
 801aa7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aa82:	78fa      	ldrb	r2, [r7, #3]
 801aa84:	4611      	mov	r1, r2
 801aa86:	4618      	mov	r0, r3
 801aa88:	f7fb fd27 	bl	80164da <USBD_LL_IsoINIncomplete>
}
 801aa8c:	bf00      	nop
 801aa8e:	3708      	adds	r7, #8
 801aa90:	46bd      	mov	sp, r7
 801aa92:	bd80      	pop	{r7, pc}

0801aa94 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aa94:	b580      	push	{r7, lr}
 801aa96:	b082      	sub	sp, #8
 801aa98:	af00      	add	r7, sp, #0
 801aa9a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801aa9c:	687b      	ldr	r3, [r7, #4]
 801aa9e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aaa2:	4618      	mov	r0, r3
 801aaa4:	f7fb fd7d 	bl	80165a2 <USBD_LL_DevConnected>
}
 801aaa8:	bf00      	nop
 801aaaa:	3708      	adds	r7, #8
 801aaac:	46bd      	mov	sp, r7
 801aaae:	bd80      	pop	{r7, pc}

0801aab0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aab0:	b580      	push	{r7, lr}
 801aab2:	b082      	sub	sp, #8
 801aab4:	af00      	add	r7, sp, #0
 801aab6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801aab8:	687b      	ldr	r3, [r7, #4]
 801aaba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aabe:	4618      	mov	r0, r3
 801aac0:	f7fb fd7a 	bl	80165b8 <USBD_LL_DevDisconnected>
}
 801aac4:	bf00      	nop
 801aac6:	3708      	adds	r7, #8
 801aac8:	46bd      	mov	sp, r7
 801aaca:	bd80      	pop	{r7, pc}

0801aacc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801aacc:	b580      	push	{r7, lr}
 801aace:	b082      	sub	sp, #8
 801aad0:	af00      	add	r7, sp, #0
 801aad2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 801aad4:	687b      	ldr	r3, [r7, #4]
 801aad6:	781b      	ldrb	r3, [r3, #0]
 801aad8:	2b01      	cmp	r3, #1
 801aada:	d140      	bne.n	801ab5e <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 801aadc:	4a22      	ldr	r2, [pc, #136]	; (801ab68 <USBD_LL_Init+0x9c>)
 801aade:	687b      	ldr	r3, [r7, #4]
 801aae0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 801aae4:	687b      	ldr	r3, [r7, #4]
 801aae6:	4a20      	ldr	r2, [pc, #128]	; (801ab68 <USBD_LL_Init+0x9c>)
 801aae8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 801aaec:	4b1e      	ldr	r3, [pc, #120]	; (801ab68 <USBD_LL_Init+0x9c>)
 801aaee:	4a1f      	ldr	r2, [pc, #124]	; (801ab6c <USBD_LL_Init+0xa0>)
 801aaf0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 801aaf2:	4b1d      	ldr	r3, [pc, #116]	; (801ab68 <USBD_LL_Init+0x9c>)
 801aaf4:	2209      	movs	r2, #9
 801aaf6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 801aaf8:	4b1b      	ldr	r3, [pc, #108]	; (801ab68 <USBD_LL_Init+0x9c>)
 801aafa:	2202      	movs	r2, #2
 801aafc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801aafe:	4b1a      	ldr	r3, [pc, #104]	; (801ab68 <USBD_LL_Init+0x9c>)
 801ab00:	2200      	movs	r2, #0
 801ab02:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 801ab04:	4b18      	ldr	r3, [pc, #96]	; (801ab68 <USBD_LL_Init+0x9c>)
 801ab06:	2202      	movs	r2, #2
 801ab08:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801ab0a:	4b17      	ldr	r3, [pc, #92]	; (801ab68 <USBD_LL_Init+0x9c>)
 801ab0c:	2200      	movs	r2, #0
 801ab0e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 801ab10:	4b15      	ldr	r3, [pc, #84]	; (801ab68 <USBD_LL_Init+0x9c>)
 801ab12:	2200      	movs	r2, #0
 801ab14:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 801ab16:	4b14      	ldr	r3, [pc, #80]	; (801ab68 <USBD_LL_Init+0x9c>)
 801ab18:	2200      	movs	r2, #0
 801ab1a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 801ab1c:	4b12      	ldr	r3, [pc, #72]	; (801ab68 <USBD_LL_Init+0x9c>)
 801ab1e:	2200      	movs	r2, #0
 801ab20:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 801ab22:	4b11      	ldr	r3, [pc, #68]	; (801ab68 <USBD_LL_Init+0x9c>)
 801ab24:	2200      	movs	r2, #0
 801ab26:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 801ab28:	4b0f      	ldr	r3, [pc, #60]	; (801ab68 <USBD_LL_Init+0x9c>)
 801ab2a:	2200      	movs	r2, #0
 801ab2c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 801ab2e:	480e      	ldr	r0, [pc, #56]	; (801ab68 <USBD_LL_Init+0x9c>)
 801ab30:	f7ee fb55 	bl	80091de <HAL_PCD_Init>
 801ab34:	4603      	mov	r3, r0
 801ab36:	2b00      	cmp	r3, #0
 801ab38:	d001      	beq.n	801ab3e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801ab3a:	f7e8 f9b1 	bl	8002ea0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 801ab3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 801ab42:	4809      	ldr	r0, [pc, #36]	; (801ab68 <USBD_LL_Init+0x9c>)
 801ab44:	f7ef fdc3 	bl	800a6ce <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 801ab48:	2280      	movs	r2, #128	; 0x80
 801ab4a:	2100      	movs	r1, #0
 801ab4c:	4806      	ldr	r0, [pc, #24]	; (801ab68 <USBD_LL_Init+0x9c>)
 801ab4e:	f7ef fd77 	bl	800a640 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 801ab52:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801ab56:	2101      	movs	r1, #1
 801ab58:	4803      	ldr	r0, [pc, #12]	; (801ab68 <USBD_LL_Init+0x9c>)
 801ab5a:	f7ef fd71 	bl	800a640 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 801ab5e:	2300      	movs	r3, #0
}
 801ab60:	4618      	mov	r0, r3
 801ab62:	3708      	adds	r7, #8
 801ab64:	46bd      	mov	sp, r7
 801ab66:	bd80      	pop	{r7, pc}
 801ab68:	24002db8 	.word	0x24002db8
 801ab6c:	40040000 	.word	0x40040000

0801ab70 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801ab70:	b580      	push	{r7, lr}
 801ab72:	b084      	sub	sp, #16
 801ab74:	af00      	add	r7, sp, #0
 801ab76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ab78:	2300      	movs	r3, #0
 801ab7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ab7c:	2300      	movs	r3, #0
 801ab7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801ab80:	687b      	ldr	r3, [r7, #4]
 801ab82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ab86:	4618      	mov	r0, r3
 801ab88:	f7ee fc4d 	bl	8009426 <HAL_PCD_Start>
 801ab8c:	4603      	mov	r3, r0
 801ab8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ab90:	7bfb      	ldrb	r3, [r7, #15]
 801ab92:	4618      	mov	r0, r3
 801ab94:	f000 f942 	bl	801ae1c <USBD_Get_USB_Status>
 801ab98:	4603      	mov	r3, r0
 801ab9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ab9c:	7bbb      	ldrb	r3, [r7, #14]
}
 801ab9e:	4618      	mov	r0, r3
 801aba0:	3710      	adds	r7, #16
 801aba2:	46bd      	mov	sp, r7
 801aba4:	bd80      	pop	{r7, pc}

0801aba6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801aba6:	b580      	push	{r7, lr}
 801aba8:	b084      	sub	sp, #16
 801abaa:	af00      	add	r7, sp, #0
 801abac:	6078      	str	r0, [r7, #4]
 801abae:	4608      	mov	r0, r1
 801abb0:	4611      	mov	r1, r2
 801abb2:	461a      	mov	r2, r3
 801abb4:	4603      	mov	r3, r0
 801abb6:	70fb      	strb	r3, [r7, #3]
 801abb8:	460b      	mov	r3, r1
 801abba:	70bb      	strb	r3, [r7, #2]
 801abbc:	4613      	mov	r3, r2
 801abbe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801abc0:	2300      	movs	r3, #0
 801abc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801abc4:	2300      	movs	r3, #0
 801abc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801abc8:	687b      	ldr	r3, [r7, #4]
 801abca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801abce:	78bb      	ldrb	r3, [r7, #2]
 801abd0:	883a      	ldrh	r2, [r7, #0]
 801abd2:	78f9      	ldrb	r1, [r7, #3]
 801abd4:	f7ef f94d 	bl	8009e72 <HAL_PCD_EP_Open>
 801abd8:	4603      	mov	r3, r0
 801abda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801abdc:	7bfb      	ldrb	r3, [r7, #15]
 801abde:	4618      	mov	r0, r3
 801abe0:	f000 f91c 	bl	801ae1c <USBD_Get_USB_Status>
 801abe4:	4603      	mov	r3, r0
 801abe6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801abe8:	7bbb      	ldrb	r3, [r7, #14]
}
 801abea:	4618      	mov	r0, r3
 801abec:	3710      	adds	r7, #16
 801abee:	46bd      	mov	sp, r7
 801abf0:	bd80      	pop	{r7, pc}

0801abf2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801abf2:	b580      	push	{r7, lr}
 801abf4:	b084      	sub	sp, #16
 801abf6:	af00      	add	r7, sp, #0
 801abf8:	6078      	str	r0, [r7, #4]
 801abfa:	460b      	mov	r3, r1
 801abfc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801abfe:	2300      	movs	r3, #0
 801ac00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ac02:	2300      	movs	r3, #0
 801ac04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801ac06:	687b      	ldr	r3, [r7, #4]
 801ac08:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ac0c:	78fa      	ldrb	r2, [r7, #3]
 801ac0e:	4611      	mov	r1, r2
 801ac10:	4618      	mov	r0, r3
 801ac12:	f7ef f996 	bl	8009f42 <HAL_PCD_EP_Close>
 801ac16:	4603      	mov	r3, r0
 801ac18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ac1a:	7bfb      	ldrb	r3, [r7, #15]
 801ac1c:	4618      	mov	r0, r3
 801ac1e:	f000 f8fd 	bl	801ae1c <USBD_Get_USB_Status>
 801ac22:	4603      	mov	r3, r0
 801ac24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ac26:	7bbb      	ldrb	r3, [r7, #14]
}
 801ac28:	4618      	mov	r0, r3
 801ac2a:	3710      	adds	r7, #16
 801ac2c:	46bd      	mov	sp, r7
 801ac2e:	bd80      	pop	{r7, pc}

0801ac30 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ac30:	b580      	push	{r7, lr}
 801ac32:	b084      	sub	sp, #16
 801ac34:	af00      	add	r7, sp, #0
 801ac36:	6078      	str	r0, [r7, #4]
 801ac38:	460b      	mov	r3, r1
 801ac3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ac3c:	2300      	movs	r3, #0
 801ac3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ac40:	2300      	movs	r3, #0
 801ac42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801ac44:	687b      	ldr	r3, [r7, #4]
 801ac46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ac4a:	78fa      	ldrb	r2, [r7, #3]
 801ac4c:	4611      	mov	r1, r2
 801ac4e:	4618      	mov	r0, r3
 801ac50:	f7ef fa50 	bl	800a0f4 <HAL_PCD_EP_SetStall>
 801ac54:	4603      	mov	r3, r0
 801ac56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ac58:	7bfb      	ldrb	r3, [r7, #15]
 801ac5a:	4618      	mov	r0, r3
 801ac5c:	f000 f8de 	bl	801ae1c <USBD_Get_USB_Status>
 801ac60:	4603      	mov	r3, r0
 801ac62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ac64:	7bbb      	ldrb	r3, [r7, #14]
}
 801ac66:	4618      	mov	r0, r3
 801ac68:	3710      	adds	r7, #16
 801ac6a:	46bd      	mov	sp, r7
 801ac6c:	bd80      	pop	{r7, pc}

0801ac6e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ac6e:	b580      	push	{r7, lr}
 801ac70:	b084      	sub	sp, #16
 801ac72:	af00      	add	r7, sp, #0
 801ac74:	6078      	str	r0, [r7, #4]
 801ac76:	460b      	mov	r3, r1
 801ac78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ac7a:	2300      	movs	r3, #0
 801ac7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ac7e:	2300      	movs	r3, #0
 801ac80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801ac82:	687b      	ldr	r3, [r7, #4]
 801ac84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ac88:	78fa      	ldrb	r2, [r7, #3]
 801ac8a:	4611      	mov	r1, r2
 801ac8c:	4618      	mov	r0, r3
 801ac8e:	f7ef fa95 	bl	800a1bc <HAL_PCD_EP_ClrStall>
 801ac92:	4603      	mov	r3, r0
 801ac94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ac96:	7bfb      	ldrb	r3, [r7, #15]
 801ac98:	4618      	mov	r0, r3
 801ac9a:	f000 f8bf 	bl	801ae1c <USBD_Get_USB_Status>
 801ac9e:	4603      	mov	r3, r0
 801aca0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801aca2:	7bbb      	ldrb	r3, [r7, #14]
}
 801aca4:	4618      	mov	r0, r3
 801aca6:	3710      	adds	r7, #16
 801aca8:	46bd      	mov	sp, r7
 801acaa:	bd80      	pop	{r7, pc}

0801acac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801acac:	b480      	push	{r7}
 801acae:	b085      	sub	sp, #20
 801acb0:	af00      	add	r7, sp, #0
 801acb2:	6078      	str	r0, [r7, #4]
 801acb4:	460b      	mov	r3, r1
 801acb6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801acb8:	687b      	ldr	r3, [r7, #4]
 801acba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801acbe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801acc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801acc4:	2b00      	cmp	r3, #0
 801acc6:	da0b      	bge.n	801ace0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801acc8:	78fb      	ldrb	r3, [r7, #3]
 801acca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801acce:	68f9      	ldr	r1, [r7, #12]
 801acd0:	4613      	mov	r3, r2
 801acd2:	00db      	lsls	r3, r3, #3
 801acd4:	4413      	add	r3, r2
 801acd6:	009b      	lsls	r3, r3, #2
 801acd8:	440b      	add	r3, r1
 801acda:	333e      	adds	r3, #62	; 0x3e
 801acdc:	781b      	ldrb	r3, [r3, #0]
 801acde:	e00b      	b.n	801acf8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801ace0:	78fb      	ldrb	r3, [r7, #3]
 801ace2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801ace6:	68f9      	ldr	r1, [r7, #12]
 801ace8:	4613      	mov	r3, r2
 801acea:	00db      	lsls	r3, r3, #3
 801acec:	4413      	add	r3, r2
 801acee:	009b      	lsls	r3, r3, #2
 801acf0:	440b      	add	r3, r1
 801acf2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801acf6:	781b      	ldrb	r3, [r3, #0]
  }
}
 801acf8:	4618      	mov	r0, r3
 801acfa:	3714      	adds	r7, #20
 801acfc:	46bd      	mov	sp, r7
 801acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad02:	4770      	bx	lr

0801ad04 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801ad04:	b580      	push	{r7, lr}
 801ad06:	b084      	sub	sp, #16
 801ad08:	af00      	add	r7, sp, #0
 801ad0a:	6078      	str	r0, [r7, #4]
 801ad0c:	460b      	mov	r3, r1
 801ad0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ad10:	2300      	movs	r3, #0
 801ad12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ad14:	2300      	movs	r3, #0
 801ad16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801ad18:	687b      	ldr	r3, [r7, #4]
 801ad1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ad1e:	78fa      	ldrb	r2, [r7, #3]
 801ad20:	4611      	mov	r1, r2
 801ad22:	4618      	mov	r0, r3
 801ad24:	f7ef f880 	bl	8009e28 <HAL_PCD_SetAddress>
 801ad28:	4603      	mov	r3, r0
 801ad2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ad2c:	7bfb      	ldrb	r3, [r7, #15]
 801ad2e:	4618      	mov	r0, r3
 801ad30:	f000 f874 	bl	801ae1c <USBD_Get_USB_Status>
 801ad34:	4603      	mov	r3, r0
 801ad36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ad38:	7bbb      	ldrb	r3, [r7, #14]
}
 801ad3a:	4618      	mov	r0, r3
 801ad3c:	3710      	adds	r7, #16
 801ad3e:	46bd      	mov	sp, r7
 801ad40:	bd80      	pop	{r7, pc}

0801ad42 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801ad42:	b580      	push	{r7, lr}
 801ad44:	b086      	sub	sp, #24
 801ad46:	af00      	add	r7, sp, #0
 801ad48:	60f8      	str	r0, [r7, #12]
 801ad4a:	607a      	str	r2, [r7, #4]
 801ad4c:	603b      	str	r3, [r7, #0]
 801ad4e:	460b      	mov	r3, r1
 801ad50:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ad52:	2300      	movs	r3, #0
 801ad54:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ad56:	2300      	movs	r3, #0
 801ad58:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801ad5a:	68fb      	ldr	r3, [r7, #12]
 801ad5c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801ad60:	7af9      	ldrb	r1, [r7, #11]
 801ad62:	683b      	ldr	r3, [r7, #0]
 801ad64:	687a      	ldr	r2, [r7, #4]
 801ad66:	f7ef f98a 	bl	800a07e <HAL_PCD_EP_Transmit>
 801ad6a:	4603      	mov	r3, r0
 801ad6c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ad6e:	7dfb      	ldrb	r3, [r7, #23]
 801ad70:	4618      	mov	r0, r3
 801ad72:	f000 f853 	bl	801ae1c <USBD_Get_USB_Status>
 801ad76:	4603      	mov	r3, r0
 801ad78:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801ad7a:	7dbb      	ldrb	r3, [r7, #22]
}
 801ad7c:	4618      	mov	r0, r3
 801ad7e:	3718      	adds	r7, #24
 801ad80:	46bd      	mov	sp, r7
 801ad82:	bd80      	pop	{r7, pc}

0801ad84 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801ad84:	b580      	push	{r7, lr}
 801ad86:	b086      	sub	sp, #24
 801ad88:	af00      	add	r7, sp, #0
 801ad8a:	60f8      	str	r0, [r7, #12]
 801ad8c:	607a      	str	r2, [r7, #4]
 801ad8e:	603b      	str	r3, [r7, #0]
 801ad90:	460b      	mov	r3, r1
 801ad92:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ad94:	2300      	movs	r3, #0
 801ad96:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ad98:	2300      	movs	r3, #0
 801ad9a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801ad9c:	68fb      	ldr	r3, [r7, #12]
 801ad9e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801ada2:	7af9      	ldrb	r1, [r7, #11]
 801ada4:	683b      	ldr	r3, [r7, #0]
 801ada6:	687a      	ldr	r2, [r7, #4]
 801ada8:	f7ef f915 	bl	8009fd6 <HAL_PCD_EP_Receive>
 801adac:	4603      	mov	r3, r0
 801adae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801adb0:	7dfb      	ldrb	r3, [r7, #23]
 801adb2:	4618      	mov	r0, r3
 801adb4:	f000 f832 	bl	801ae1c <USBD_Get_USB_Status>
 801adb8:	4603      	mov	r3, r0
 801adba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801adbc:	7dbb      	ldrb	r3, [r7, #22]
}
 801adbe:	4618      	mov	r0, r3
 801adc0:	3718      	adds	r7, #24
 801adc2:	46bd      	mov	sp, r7
 801adc4:	bd80      	pop	{r7, pc}

0801adc6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801adc6:	b580      	push	{r7, lr}
 801adc8:	b082      	sub	sp, #8
 801adca:	af00      	add	r7, sp, #0
 801adcc:	6078      	str	r0, [r7, #4]
 801adce:	460b      	mov	r3, r1
 801add0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801add2:	687b      	ldr	r3, [r7, #4]
 801add4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801add8:	78fa      	ldrb	r2, [r7, #3]
 801adda:	4611      	mov	r1, r2
 801addc:	4618      	mov	r0, r3
 801adde:	f7ef f936 	bl	800a04e <HAL_PCD_EP_GetRxCount>
 801ade2:	4603      	mov	r3, r0
}
 801ade4:	4618      	mov	r0, r3
 801ade6:	3708      	adds	r7, #8
 801ade8:	46bd      	mov	sp, r7
 801adea:	bd80      	pop	{r7, pc}

0801adec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801adec:	b480      	push	{r7}
 801adee:	b083      	sub	sp, #12
 801adf0:	af00      	add	r7, sp, #0
 801adf2:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801adf4:	4b03      	ldr	r3, [pc, #12]	; (801ae04 <USBD_static_malloc+0x18>)
}
 801adf6:	4618      	mov	r0, r3
 801adf8:	370c      	adds	r7, #12
 801adfa:	46bd      	mov	sp, r7
 801adfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae00:	4770      	bx	lr
 801ae02:	bf00      	nop
 801ae04:	240032c4 	.word	0x240032c4

0801ae08 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801ae08:	b480      	push	{r7}
 801ae0a:	b083      	sub	sp, #12
 801ae0c:	af00      	add	r7, sp, #0
 801ae0e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 801ae10:	bf00      	nop
 801ae12:	370c      	adds	r7, #12
 801ae14:	46bd      	mov	sp, r7
 801ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae1a:	4770      	bx	lr

0801ae1c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801ae1c:	b480      	push	{r7}
 801ae1e:	b085      	sub	sp, #20
 801ae20:	af00      	add	r7, sp, #0
 801ae22:	4603      	mov	r3, r0
 801ae24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ae26:	2300      	movs	r3, #0
 801ae28:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801ae2a:	79fb      	ldrb	r3, [r7, #7]
 801ae2c:	2b03      	cmp	r3, #3
 801ae2e:	d817      	bhi.n	801ae60 <USBD_Get_USB_Status+0x44>
 801ae30:	a201      	add	r2, pc, #4	; (adr r2, 801ae38 <USBD_Get_USB_Status+0x1c>)
 801ae32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ae36:	bf00      	nop
 801ae38:	0801ae49 	.word	0x0801ae49
 801ae3c:	0801ae4f 	.word	0x0801ae4f
 801ae40:	0801ae55 	.word	0x0801ae55
 801ae44:	0801ae5b 	.word	0x0801ae5b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801ae48:	2300      	movs	r3, #0
 801ae4a:	73fb      	strb	r3, [r7, #15]
    break;
 801ae4c:	e00b      	b.n	801ae66 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801ae4e:	2303      	movs	r3, #3
 801ae50:	73fb      	strb	r3, [r7, #15]
    break;
 801ae52:	e008      	b.n	801ae66 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801ae54:	2301      	movs	r3, #1
 801ae56:	73fb      	strb	r3, [r7, #15]
    break;
 801ae58:	e005      	b.n	801ae66 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801ae5a:	2303      	movs	r3, #3
 801ae5c:	73fb      	strb	r3, [r7, #15]
    break;
 801ae5e:	e002      	b.n	801ae66 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801ae60:	2303      	movs	r3, #3
 801ae62:	73fb      	strb	r3, [r7, #15]
    break;
 801ae64:	bf00      	nop
  }
  return usb_status;
 801ae66:	7bfb      	ldrb	r3, [r7, #15]
}
 801ae68:	4618      	mov	r0, r3
 801ae6a:	3714      	adds	r7, #20
 801ae6c:	46bd      	mov	sp, r7
 801ae6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae72:	4770      	bx	lr

0801ae74 <__cvt>:
 801ae74:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ae76:	ed2d 8b02 	vpush	{d8}
 801ae7a:	eeb0 8b40 	vmov.f64	d8, d0
 801ae7e:	b085      	sub	sp, #20
 801ae80:	4617      	mov	r7, r2
 801ae82:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801ae84:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801ae86:	ee18 2a90 	vmov	r2, s17
 801ae8a:	f025 0520 	bic.w	r5, r5, #32
 801ae8e:	2a00      	cmp	r2, #0
 801ae90:	bfb6      	itet	lt
 801ae92:	222d      	movlt	r2, #45	; 0x2d
 801ae94:	2200      	movge	r2, #0
 801ae96:	eeb1 8b40 	vneglt.f64	d8, d0
 801ae9a:	2d46      	cmp	r5, #70	; 0x46
 801ae9c:	460c      	mov	r4, r1
 801ae9e:	701a      	strb	r2, [r3, #0]
 801aea0:	d004      	beq.n	801aeac <__cvt+0x38>
 801aea2:	2d45      	cmp	r5, #69	; 0x45
 801aea4:	d100      	bne.n	801aea8 <__cvt+0x34>
 801aea6:	3401      	adds	r4, #1
 801aea8:	2102      	movs	r1, #2
 801aeaa:	e000      	b.n	801aeae <__cvt+0x3a>
 801aeac:	2103      	movs	r1, #3
 801aeae:	ab03      	add	r3, sp, #12
 801aeb0:	9301      	str	r3, [sp, #4]
 801aeb2:	ab02      	add	r3, sp, #8
 801aeb4:	9300      	str	r3, [sp, #0]
 801aeb6:	4622      	mov	r2, r4
 801aeb8:	4633      	mov	r3, r6
 801aeba:	eeb0 0b48 	vmov.f64	d0, d8
 801aebe:	f001 f893 	bl	801bfe8 <_dtoa_r>
 801aec2:	2d47      	cmp	r5, #71	; 0x47
 801aec4:	d101      	bne.n	801aeca <__cvt+0x56>
 801aec6:	07fb      	lsls	r3, r7, #31
 801aec8:	d51a      	bpl.n	801af00 <__cvt+0x8c>
 801aeca:	2d46      	cmp	r5, #70	; 0x46
 801aecc:	eb00 0204 	add.w	r2, r0, r4
 801aed0:	d10c      	bne.n	801aeec <__cvt+0x78>
 801aed2:	7803      	ldrb	r3, [r0, #0]
 801aed4:	2b30      	cmp	r3, #48	; 0x30
 801aed6:	d107      	bne.n	801aee8 <__cvt+0x74>
 801aed8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801aedc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aee0:	bf1c      	itt	ne
 801aee2:	f1c4 0401 	rsbne	r4, r4, #1
 801aee6:	6034      	strne	r4, [r6, #0]
 801aee8:	6833      	ldr	r3, [r6, #0]
 801aeea:	441a      	add	r2, r3
 801aeec:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801aef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aef4:	bf08      	it	eq
 801aef6:	9203      	streq	r2, [sp, #12]
 801aef8:	2130      	movs	r1, #48	; 0x30
 801aefa:	9b03      	ldr	r3, [sp, #12]
 801aefc:	4293      	cmp	r3, r2
 801aefe:	d307      	bcc.n	801af10 <__cvt+0x9c>
 801af00:	9b03      	ldr	r3, [sp, #12]
 801af02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801af04:	1a1b      	subs	r3, r3, r0
 801af06:	6013      	str	r3, [r2, #0]
 801af08:	b005      	add	sp, #20
 801af0a:	ecbd 8b02 	vpop	{d8}
 801af0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801af10:	1c5c      	adds	r4, r3, #1
 801af12:	9403      	str	r4, [sp, #12]
 801af14:	7019      	strb	r1, [r3, #0]
 801af16:	e7f0      	b.n	801aefa <__cvt+0x86>

0801af18 <__exponent>:
 801af18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801af1a:	4603      	mov	r3, r0
 801af1c:	2900      	cmp	r1, #0
 801af1e:	bfb8      	it	lt
 801af20:	4249      	neglt	r1, r1
 801af22:	f803 2b02 	strb.w	r2, [r3], #2
 801af26:	bfb4      	ite	lt
 801af28:	222d      	movlt	r2, #45	; 0x2d
 801af2a:	222b      	movge	r2, #43	; 0x2b
 801af2c:	2909      	cmp	r1, #9
 801af2e:	7042      	strb	r2, [r0, #1]
 801af30:	dd2a      	ble.n	801af88 <__exponent+0x70>
 801af32:	f10d 0207 	add.w	r2, sp, #7
 801af36:	4617      	mov	r7, r2
 801af38:	260a      	movs	r6, #10
 801af3a:	4694      	mov	ip, r2
 801af3c:	fb91 f5f6 	sdiv	r5, r1, r6
 801af40:	fb06 1415 	mls	r4, r6, r5, r1
 801af44:	3430      	adds	r4, #48	; 0x30
 801af46:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801af4a:	460c      	mov	r4, r1
 801af4c:	2c63      	cmp	r4, #99	; 0x63
 801af4e:	f102 32ff 	add.w	r2, r2, #4294967295
 801af52:	4629      	mov	r1, r5
 801af54:	dcf1      	bgt.n	801af3a <__exponent+0x22>
 801af56:	3130      	adds	r1, #48	; 0x30
 801af58:	f1ac 0402 	sub.w	r4, ip, #2
 801af5c:	f802 1c01 	strb.w	r1, [r2, #-1]
 801af60:	1c41      	adds	r1, r0, #1
 801af62:	4622      	mov	r2, r4
 801af64:	42ba      	cmp	r2, r7
 801af66:	d30a      	bcc.n	801af7e <__exponent+0x66>
 801af68:	f10d 0209 	add.w	r2, sp, #9
 801af6c:	eba2 020c 	sub.w	r2, r2, ip
 801af70:	42bc      	cmp	r4, r7
 801af72:	bf88      	it	hi
 801af74:	2200      	movhi	r2, #0
 801af76:	4413      	add	r3, r2
 801af78:	1a18      	subs	r0, r3, r0
 801af7a:	b003      	add	sp, #12
 801af7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801af7e:	f812 5b01 	ldrb.w	r5, [r2], #1
 801af82:	f801 5f01 	strb.w	r5, [r1, #1]!
 801af86:	e7ed      	b.n	801af64 <__exponent+0x4c>
 801af88:	2330      	movs	r3, #48	; 0x30
 801af8a:	3130      	adds	r1, #48	; 0x30
 801af8c:	7083      	strb	r3, [r0, #2]
 801af8e:	70c1      	strb	r1, [r0, #3]
 801af90:	1d03      	adds	r3, r0, #4
 801af92:	e7f1      	b.n	801af78 <__exponent+0x60>
 801af94:	0000      	movs	r0, r0
	...

0801af98 <_printf_float>:
 801af98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af9c:	b08b      	sub	sp, #44	; 0x2c
 801af9e:	460c      	mov	r4, r1
 801afa0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801afa4:	4616      	mov	r6, r2
 801afa6:	461f      	mov	r7, r3
 801afa8:	4605      	mov	r5, r0
 801afaa:	f000 feff 	bl	801bdac <_localeconv_r>
 801afae:	f8d0 b000 	ldr.w	fp, [r0]
 801afb2:	4658      	mov	r0, fp
 801afb4:	f7e5 fa0c 	bl	80003d0 <strlen>
 801afb8:	2300      	movs	r3, #0
 801afba:	9308      	str	r3, [sp, #32]
 801afbc:	f8d8 3000 	ldr.w	r3, [r8]
 801afc0:	f894 9018 	ldrb.w	r9, [r4, #24]
 801afc4:	6822      	ldr	r2, [r4, #0]
 801afc6:	3307      	adds	r3, #7
 801afc8:	f023 0307 	bic.w	r3, r3, #7
 801afcc:	f103 0108 	add.w	r1, r3, #8
 801afd0:	f8c8 1000 	str.w	r1, [r8]
 801afd4:	ed93 0b00 	vldr	d0, [r3]
 801afd8:	ed9f 6b97 	vldr	d6, [pc, #604]	; 801b238 <_printf_float+0x2a0>
 801afdc:	eeb0 7bc0 	vabs.f64	d7, d0
 801afe0:	eeb4 7b46 	vcmp.f64	d7, d6
 801afe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afe8:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 801afec:	4682      	mov	sl, r0
 801afee:	dd24      	ble.n	801b03a <_printf_float+0xa2>
 801aff0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801aff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aff8:	d502      	bpl.n	801b000 <_printf_float+0x68>
 801affa:	232d      	movs	r3, #45	; 0x2d
 801affc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b000:	498f      	ldr	r1, [pc, #572]	; (801b240 <_printf_float+0x2a8>)
 801b002:	4b90      	ldr	r3, [pc, #576]	; (801b244 <_printf_float+0x2ac>)
 801b004:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801b008:	bf94      	ite	ls
 801b00a:	4688      	movls	r8, r1
 801b00c:	4698      	movhi	r8, r3
 801b00e:	2303      	movs	r3, #3
 801b010:	6123      	str	r3, [r4, #16]
 801b012:	f022 0204 	bic.w	r2, r2, #4
 801b016:	2300      	movs	r3, #0
 801b018:	6022      	str	r2, [r4, #0]
 801b01a:	9304      	str	r3, [sp, #16]
 801b01c:	9700      	str	r7, [sp, #0]
 801b01e:	4633      	mov	r3, r6
 801b020:	aa09      	add	r2, sp, #36	; 0x24
 801b022:	4621      	mov	r1, r4
 801b024:	4628      	mov	r0, r5
 801b026:	f000 f9d1 	bl	801b3cc <_printf_common>
 801b02a:	3001      	adds	r0, #1
 801b02c:	f040 808a 	bne.w	801b144 <_printf_float+0x1ac>
 801b030:	f04f 30ff 	mov.w	r0, #4294967295
 801b034:	b00b      	add	sp, #44	; 0x2c
 801b036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b03a:	eeb4 0b40 	vcmp.f64	d0, d0
 801b03e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b042:	d709      	bvc.n	801b058 <_printf_float+0xc0>
 801b044:	ee10 3a90 	vmov	r3, s1
 801b048:	2b00      	cmp	r3, #0
 801b04a:	bfbc      	itt	lt
 801b04c:	232d      	movlt	r3, #45	; 0x2d
 801b04e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801b052:	497d      	ldr	r1, [pc, #500]	; (801b248 <_printf_float+0x2b0>)
 801b054:	4b7d      	ldr	r3, [pc, #500]	; (801b24c <_printf_float+0x2b4>)
 801b056:	e7d5      	b.n	801b004 <_printf_float+0x6c>
 801b058:	6863      	ldr	r3, [r4, #4]
 801b05a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801b05e:	9104      	str	r1, [sp, #16]
 801b060:	1c59      	adds	r1, r3, #1
 801b062:	d13c      	bne.n	801b0de <_printf_float+0x146>
 801b064:	2306      	movs	r3, #6
 801b066:	6063      	str	r3, [r4, #4]
 801b068:	2300      	movs	r3, #0
 801b06a:	9303      	str	r3, [sp, #12]
 801b06c:	ab08      	add	r3, sp, #32
 801b06e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801b072:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801b076:	ab07      	add	r3, sp, #28
 801b078:	6861      	ldr	r1, [r4, #4]
 801b07a:	9300      	str	r3, [sp, #0]
 801b07c:	6022      	str	r2, [r4, #0]
 801b07e:	f10d 031b 	add.w	r3, sp, #27
 801b082:	4628      	mov	r0, r5
 801b084:	f7ff fef6 	bl	801ae74 <__cvt>
 801b088:	9b04      	ldr	r3, [sp, #16]
 801b08a:	9907      	ldr	r1, [sp, #28]
 801b08c:	2b47      	cmp	r3, #71	; 0x47
 801b08e:	4680      	mov	r8, r0
 801b090:	d108      	bne.n	801b0a4 <_printf_float+0x10c>
 801b092:	1cc8      	adds	r0, r1, #3
 801b094:	db02      	blt.n	801b09c <_printf_float+0x104>
 801b096:	6863      	ldr	r3, [r4, #4]
 801b098:	4299      	cmp	r1, r3
 801b09a:	dd41      	ble.n	801b120 <_printf_float+0x188>
 801b09c:	f1a9 0902 	sub.w	r9, r9, #2
 801b0a0:	fa5f f989 	uxtb.w	r9, r9
 801b0a4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801b0a8:	d820      	bhi.n	801b0ec <_printf_float+0x154>
 801b0aa:	3901      	subs	r1, #1
 801b0ac:	464a      	mov	r2, r9
 801b0ae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801b0b2:	9107      	str	r1, [sp, #28]
 801b0b4:	f7ff ff30 	bl	801af18 <__exponent>
 801b0b8:	9a08      	ldr	r2, [sp, #32]
 801b0ba:	9004      	str	r0, [sp, #16]
 801b0bc:	1813      	adds	r3, r2, r0
 801b0be:	2a01      	cmp	r2, #1
 801b0c0:	6123      	str	r3, [r4, #16]
 801b0c2:	dc02      	bgt.n	801b0ca <_printf_float+0x132>
 801b0c4:	6822      	ldr	r2, [r4, #0]
 801b0c6:	07d2      	lsls	r2, r2, #31
 801b0c8:	d501      	bpl.n	801b0ce <_printf_float+0x136>
 801b0ca:	3301      	adds	r3, #1
 801b0cc:	6123      	str	r3, [r4, #16]
 801b0ce:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801b0d2:	2b00      	cmp	r3, #0
 801b0d4:	d0a2      	beq.n	801b01c <_printf_float+0x84>
 801b0d6:	232d      	movs	r3, #45	; 0x2d
 801b0d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b0dc:	e79e      	b.n	801b01c <_printf_float+0x84>
 801b0de:	9904      	ldr	r1, [sp, #16]
 801b0e0:	2947      	cmp	r1, #71	; 0x47
 801b0e2:	d1c1      	bne.n	801b068 <_printf_float+0xd0>
 801b0e4:	2b00      	cmp	r3, #0
 801b0e6:	d1bf      	bne.n	801b068 <_printf_float+0xd0>
 801b0e8:	2301      	movs	r3, #1
 801b0ea:	e7bc      	b.n	801b066 <_printf_float+0xce>
 801b0ec:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801b0f0:	d118      	bne.n	801b124 <_printf_float+0x18c>
 801b0f2:	2900      	cmp	r1, #0
 801b0f4:	6863      	ldr	r3, [r4, #4]
 801b0f6:	dd0b      	ble.n	801b110 <_printf_float+0x178>
 801b0f8:	6121      	str	r1, [r4, #16]
 801b0fa:	b913      	cbnz	r3, 801b102 <_printf_float+0x16a>
 801b0fc:	6822      	ldr	r2, [r4, #0]
 801b0fe:	07d0      	lsls	r0, r2, #31
 801b100:	d502      	bpl.n	801b108 <_printf_float+0x170>
 801b102:	3301      	adds	r3, #1
 801b104:	440b      	add	r3, r1
 801b106:	6123      	str	r3, [r4, #16]
 801b108:	2300      	movs	r3, #0
 801b10a:	65a1      	str	r1, [r4, #88]	; 0x58
 801b10c:	9304      	str	r3, [sp, #16]
 801b10e:	e7de      	b.n	801b0ce <_printf_float+0x136>
 801b110:	b913      	cbnz	r3, 801b118 <_printf_float+0x180>
 801b112:	6822      	ldr	r2, [r4, #0]
 801b114:	07d2      	lsls	r2, r2, #31
 801b116:	d501      	bpl.n	801b11c <_printf_float+0x184>
 801b118:	3302      	adds	r3, #2
 801b11a:	e7f4      	b.n	801b106 <_printf_float+0x16e>
 801b11c:	2301      	movs	r3, #1
 801b11e:	e7f2      	b.n	801b106 <_printf_float+0x16e>
 801b120:	f04f 0967 	mov.w	r9, #103	; 0x67
 801b124:	9b08      	ldr	r3, [sp, #32]
 801b126:	4299      	cmp	r1, r3
 801b128:	db05      	blt.n	801b136 <_printf_float+0x19e>
 801b12a:	6823      	ldr	r3, [r4, #0]
 801b12c:	6121      	str	r1, [r4, #16]
 801b12e:	07d8      	lsls	r0, r3, #31
 801b130:	d5ea      	bpl.n	801b108 <_printf_float+0x170>
 801b132:	1c4b      	adds	r3, r1, #1
 801b134:	e7e7      	b.n	801b106 <_printf_float+0x16e>
 801b136:	2900      	cmp	r1, #0
 801b138:	bfd4      	ite	le
 801b13a:	f1c1 0202 	rsble	r2, r1, #2
 801b13e:	2201      	movgt	r2, #1
 801b140:	4413      	add	r3, r2
 801b142:	e7e0      	b.n	801b106 <_printf_float+0x16e>
 801b144:	6823      	ldr	r3, [r4, #0]
 801b146:	055a      	lsls	r2, r3, #21
 801b148:	d407      	bmi.n	801b15a <_printf_float+0x1c2>
 801b14a:	6923      	ldr	r3, [r4, #16]
 801b14c:	4642      	mov	r2, r8
 801b14e:	4631      	mov	r1, r6
 801b150:	4628      	mov	r0, r5
 801b152:	47b8      	blx	r7
 801b154:	3001      	adds	r0, #1
 801b156:	d12a      	bne.n	801b1ae <_printf_float+0x216>
 801b158:	e76a      	b.n	801b030 <_printf_float+0x98>
 801b15a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801b15e:	f240 80e0 	bls.w	801b322 <_printf_float+0x38a>
 801b162:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801b166:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b16a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b16e:	d133      	bne.n	801b1d8 <_printf_float+0x240>
 801b170:	4a37      	ldr	r2, [pc, #220]	; (801b250 <_printf_float+0x2b8>)
 801b172:	2301      	movs	r3, #1
 801b174:	4631      	mov	r1, r6
 801b176:	4628      	mov	r0, r5
 801b178:	47b8      	blx	r7
 801b17a:	3001      	adds	r0, #1
 801b17c:	f43f af58 	beq.w	801b030 <_printf_float+0x98>
 801b180:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b184:	429a      	cmp	r2, r3
 801b186:	db02      	blt.n	801b18e <_printf_float+0x1f6>
 801b188:	6823      	ldr	r3, [r4, #0]
 801b18a:	07d8      	lsls	r0, r3, #31
 801b18c:	d50f      	bpl.n	801b1ae <_printf_float+0x216>
 801b18e:	4653      	mov	r3, sl
 801b190:	465a      	mov	r2, fp
 801b192:	4631      	mov	r1, r6
 801b194:	4628      	mov	r0, r5
 801b196:	47b8      	blx	r7
 801b198:	3001      	adds	r0, #1
 801b19a:	f43f af49 	beq.w	801b030 <_printf_float+0x98>
 801b19e:	f04f 0800 	mov.w	r8, #0
 801b1a2:	f104 091a 	add.w	r9, r4, #26
 801b1a6:	9b08      	ldr	r3, [sp, #32]
 801b1a8:	3b01      	subs	r3, #1
 801b1aa:	4543      	cmp	r3, r8
 801b1ac:	dc09      	bgt.n	801b1c2 <_printf_float+0x22a>
 801b1ae:	6823      	ldr	r3, [r4, #0]
 801b1b0:	079b      	lsls	r3, r3, #30
 801b1b2:	f100 8106 	bmi.w	801b3c2 <_printf_float+0x42a>
 801b1b6:	68e0      	ldr	r0, [r4, #12]
 801b1b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b1ba:	4298      	cmp	r0, r3
 801b1bc:	bfb8      	it	lt
 801b1be:	4618      	movlt	r0, r3
 801b1c0:	e738      	b.n	801b034 <_printf_float+0x9c>
 801b1c2:	2301      	movs	r3, #1
 801b1c4:	464a      	mov	r2, r9
 801b1c6:	4631      	mov	r1, r6
 801b1c8:	4628      	mov	r0, r5
 801b1ca:	47b8      	blx	r7
 801b1cc:	3001      	adds	r0, #1
 801b1ce:	f43f af2f 	beq.w	801b030 <_printf_float+0x98>
 801b1d2:	f108 0801 	add.w	r8, r8, #1
 801b1d6:	e7e6      	b.n	801b1a6 <_printf_float+0x20e>
 801b1d8:	9b07      	ldr	r3, [sp, #28]
 801b1da:	2b00      	cmp	r3, #0
 801b1dc:	dc3a      	bgt.n	801b254 <_printf_float+0x2bc>
 801b1de:	4a1c      	ldr	r2, [pc, #112]	; (801b250 <_printf_float+0x2b8>)
 801b1e0:	2301      	movs	r3, #1
 801b1e2:	4631      	mov	r1, r6
 801b1e4:	4628      	mov	r0, r5
 801b1e6:	47b8      	blx	r7
 801b1e8:	3001      	adds	r0, #1
 801b1ea:	f43f af21 	beq.w	801b030 <_printf_float+0x98>
 801b1ee:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801b1f2:	4313      	orrs	r3, r2
 801b1f4:	d102      	bne.n	801b1fc <_printf_float+0x264>
 801b1f6:	6823      	ldr	r3, [r4, #0]
 801b1f8:	07d9      	lsls	r1, r3, #31
 801b1fa:	d5d8      	bpl.n	801b1ae <_printf_float+0x216>
 801b1fc:	4653      	mov	r3, sl
 801b1fe:	465a      	mov	r2, fp
 801b200:	4631      	mov	r1, r6
 801b202:	4628      	mov	r0, r5
 801b204:	47b8      	blx	r7
 801b206:	3001      	adds	r0, #1
 801b208:	f43f af12 	beq.w	801b030 <_printf_float+0x98>
 801b20c:	f04f 0900 	mov.w	r9, #0
 801b210:	f104 0a1a 	add.w	sl, r4, #26
 801b214:	9b07      	ldr	r3, [sp, #28]
 801b216:	425b      	negs	r3, r3
 801b218:	454b      	cmp	r3, r9
 801b21a:	dc01      	bgt.n	801b220 <_printf_float+0x288>
 801b21c:	9b08      	ldr	r3, [sp, #32]
 801b21e:	e795      	b.n	801b14c <_printf_float+0x1b4>
 801b220:	2301      	movs	r3, #1
 801b222:	4652      	mov	r2, sl
 801b224:	4631      	mov	r1, r6
 801b226:	4628      	mov	r0, r5
 801b228:	47b8      	blx	r7
 801b22a:	3001      	adds	r0, #1
 801b22c:	f43f af00 	beq.w	801b030 <_printf_float+0x98>
 801b230:	f109 0901 	add.w	r9, r9, #1
 801b234:	e7ee      	b.n	801b214 <_printf_float+0x27c>
 801b236:	bf00      	nop
 801b238:	ffffffff 	.word	0xffffffff
 801b23c:	7fefffff 	.word	0x7fefffff
 801b240:	08020408 	.word	0x08020408
 801b244:	0802040c 	.word	0x0802040c
 801b248:	08020410 	.word	0x08020410
 801b24c:	08020414 	.word	0x08020414
 801b250:	080207a0 	.word	0x080207a0
 801b254:	9a08      	ldr	r2, [sp, #32]
 801b256:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b258:	429a      	cmp	r2, r3
 801b25a:	bfa8      	it	ge
 801b25c:	461a      	movge	r2, r3
 801b25e:	2a00      	cmp	r2, #0
 801b260:	4691      	mov	r9, r2
 801b262:	dc38      	bgt.n	801b2d6 <_printf_float+0x33e>
 801b264:	2300      	movs	r3, #0
 801b266:	9305      	str	r3, [sp, #20]
 801b268:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b26c:	f104 021a 	add.w	r2, r4, #26
 801b270:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b272:	9905      	ldr	r1, [sp, #20]
 801b274:	9304      	str	r3, [sp, #16]
 801b276:	eba3 0309 	sub.w	r3, r3, r9
 801b27a:	428b      	cmp	r3, r1
 801b27c:	dc33      	bgt.n	801b2e6 <_printf_float+0x34e>
 801b27e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b282:	429a      	cmp	r2, r3
 801b284:	db3c      	blt.n	801b300 <_printf_float+0x368>
 801b286:	6823      	ldr	r3, [r4, #0]
 801b288:	07da      	lsls	r2, r3, #31
 801b28a:	d439      	bmi.n	801b300 <_printf_float+0x368>
 801b28c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801b290:	eba2 0903 	sub.w	r9, r2, r3
 801b294:	9b04      	ldr	r3, [sp, #16]
 801b296:	1ad2      	subs	r2, r2, r3
 801b298:	4591      	cmp	r9, r2
 801b29a:	bfa8      	it	ge
 801b29c:	4691      	movge	r9, r2
 801b29e:	f1b9 0f00 	cmp.w	r9, #0
 801b2a2:	dc35      	bgt.n	801b310 <_printf_float+0x378>
 801b2a4:	f04f 0800 	mov.w	r8, #0
 801b2a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b2ac:	f104 0a1a 	add.w	sl, r4, #26
 801b2b0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b2b4:	1a9b      	subs	r3, r3, r2
 801b2b6:	eba3 0309 	sub.w	r3, r3, r9
 801b2ba:	4543      	cmp	r3, r8
 801b2bc:	f77f af77 	ble.w	801b1ae <_printf_float+0x216>
 801b2c0:	2301      	movs	r3, #1
 801b2c2:	4652      	mov	r2, sl
 801b2c4:	4631      	mov	r1, r6
 801b2c6:	4628      	mov	r0, r5
 801b2c8:	47b8      	blx	r7
 801b2ca:	3001      	adds	r0, #1
 801b2cc:	f43f aeb0 	beq.w	801b030 <_printf_float+0x98>
 801b2d0:	f108 0801 	add.w	r8, r8, #1
 801b2d4:	e7ec      	b.n	801b2b0 <_printf_float+0x318>
 801b2d6:	4613      	mov	r3, r2
 801b2d8:	4631      	mov	r1, r6
 801b2da:	4642      	mov	r2, r8
 801b2dc:	4628      	mov	r0, r5
 801b2de:	47b8      	blx	r7
 801b2e0:	3001      	adds	r0, #1
 801b2e2:	d1bf      	bne.n	801b264 <_printf_float+0x2cc>
 801b2e4:	e6a4      	b.n	801b030 <_printf_float+0x98>
 801b2e6:	2301      	movs	r3, #1
 801b2e8:	4631      	mov	r1, r6
 801b2ea:	4628      	mov	r0, r5
 801b2ec:	9204      	str	r2, [sp, #16]
 801b2ee:	47b8      	blx	r7
 801b2f0:	3001      	adds	r0, #1
 801b2f2:	f43f ae9d 	beq.w	801b030 <_printf_float+0x98>
 801b2f6:	9b05      	ldr	r3, [sp, #20]
 801b2f8:	9a04      	ldr	r2, [sp, #16]
 801b2fa:	3301      	adds	r3, #1
 801b2fc:	9305      	str	r3, [sp, #20]
 801b2fe:	e7b7      	b.n	801b270 <_printf_float+0x2d8>
 801b300:	4653      	mov	r3, sl
 801b302:	465a      	mov	r2, fp
 801b304:	4631      	mov	r1, r6
 801b306:	4628      	mov	r0, r5
 801b308:	47b8      	blx	r7
 801b30a:	3001      	adds	r0, #1
 801b30c:	d1be      	bne.n	801b28c <_printf_float+0x2f4>
 801b30e:	e68f      	b.n	801b030 <_printf_float+0x98>
 801b310:	9a04      	ldr	r2, [sp, #16]
 801b312:	464b      	mov	r3, r9
 801b314:	4442      	add	r2, r8
 801b316:	4631      	mov	r1, r6
 801b318:	4628      	mov	r0, r5
 801b31a:	47b8      	blx	r7
 801b31c:	3001      	adds	r0, #1
 801b31e:	d1c1      	bne.n	801b2a4 <_printf_float+0x30c>
 801b320:	e686      	b.n	801b030 <_printf_float+0x98>
 801b322:	9a08      	ldr	r2, [sp, #32]
 801b324:	2a01      	cmp	r2, #1
 801b326:	dc01      	bgt.n	801b32c <_printf_float+0x394>
 801b328:	07db      	lsls	r3, r3, #31
 801b32a:	d537      	bpl.n	801b39c <_printf_float+0x404>
 801b32c:	2301      	movs	r3, #1
 801b32e:	4642      	mov	r2, r8
 801b330:	4631      	mov	r1, r6
 801b332:	4628      	mov	r0, r5
 801b334:	47b8      	blx	r7
 801b336:	3001      	adds	r0, #1
 801b338:	f43f ae7a 	beq.w	801b030 <_printf_float+0x98>
 801b33c:	4653      	mov	r3, sl
 801b33e:	465a      	mov	r2, fp
 801b340:	4631      	mov	r1, r6
 801b342:	4628      	mov	r0, r5
 801b344:	47b8      	blx	r7
 801b346:	3001      	adds	r0, #1
 801b348:	f43f ae72 	beq.w	801b030 <_printf_float+0x98>
 801b34c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801b350:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b358:	9b08      	ldr	r3, [sp, #32]
 801b35a:	d01a      	beq.n	801b392 <_printf_float+0x3fa>
 801b35c:	3b01      	subs	r3, #1
 801b35e:	f108 0201 	add.w	r2, r8, #1
 801b362:	4631      	mov	r1, r6
 801b364:	4628      	mov	r0, r5
 801b366:	47b8      	blx	r7
 801b368:	3001      	adds	r0, #1
 801b36a:	d10e      	bne.n	801b38a <_printf_float+0x3f2>
 801b36c:	e660      	b.n	801b030 <_printf_float+0x98>
 801b36e:	2301      	movs	r3, #1
 801b370:	464a      	mov	r2, r9
 801b372:	4631      	mov	r1, r6
 801b374:	4628      	mov	r0, r5
 801b376:	47b8      	blx	r7
 801b378:	3001      	adds	r0, #1
 801b37a:	f43f ae59 	beq.w	801b030 <_printf_float+0x98>
 801b37e:	f108 0801 	add.w	r8, r8, #1
 801b382:	9b08      	ldr	r3, [sp, #32]
 801b384:	3b01      	subs	r3, #1
 801b386:	4543      	cmp	r3, r8
 801b388:	dcf1      	bgt.n	801b36e <_printf_float+0x3d6>
 801b38a:	9b04      	ldr	r3, [sp, #16]
 801b38c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801b390:	e6dd      	b.n	801b14e <_printf_float+0x1b6>
 801b392:	f04f 0800 	mov.w	r8, #0
 801b396:	f104 091a 	add.w	r9, r4, #26
 801b39a:	e7f2      	b.n	801b382 <_printf_float+0x3ea>
 801b39c:	2301      	movs	r3, #1
 801b39e:	4642      	mov	r2, r8
 801b3a0:	e7df      	b.n	801b362 <_printf_float+0x3ca>
 801b3a2:	2301      	movs	r3, #1
 801b3a4:	464a      	mov	r2, r9
 801b3a6:	4631      	mov	r1, r6
 801b3a8:	4628      	mov	r0, r5
 801b3aa:	47b8      	blx	r7
 801b3ac:	3001      	adds	r0, #1
 801b3ae:	f43f ae3f 	beq.w	801b030 <_printf_float+0x98>
 801b3b2:	f108 0801 	add.w	r8, r8, #1
 801b3b6:	68e3      	ldr	r3, [r4, #12]
 801b3b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b3ba:	1a5b      	subs	r3, r3, r1
 801b3bc:	4543      	cmp	r3, r8
 801b3be:	dcf0      	bgt.n	801b3a2 <_printf_float+0x40a>
 801b3c0:	e6f9      	b.n	801b1b6 <_printf_float+0x21e>
 801b3c2:	f04f 0800 	mov.w	r8, #0
 801b3c6:	f104 0919 	add.w	r9, r4, #25
 801b3ca:	e7f4      	b.n	801b3b6 <_printf_float+0x41e>

0801b3cc <_printf_common>:
 801b3cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b3d0:	4616      	mov	r6, r2
 801b3d2:	4699      	mov	r9, r3
 801b3d4:	688a      	ldr	r2, [r1, #8]
 801b3d6:	690b      	ldr	r3, [r1, #16]
 801b3d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b3dc:	4293      	cmp	r3, r2
 801b3de:	bfb8      	it	lt
 801b3e0:	4613      	movlt	r3, r2
 801b3e2:	6033      	str	r3, [r6, #0]
 801b3e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b3e8:	4607      	mov	r7, r0
 801b3ea:	460c      	mov	r4, r1
 801b3ec:	b10a      	cbz	r2, 801b3f2 <_printf_common+0x26>
 801b3ee:	3301      	adds	r3, #1
 801b3f0:	6033      	str	r3, [r6, #0]
 801b3f2:	6823      	ldr	r3, [r4, #0]
 801b3f4:	0699      	lsls	r1, r3, #26
 801b3f6:	bf42      	ittt	mi
 801b3f8:	6833      	ldrmi	r3, [r6, #0]
 801b3fa:	3302      	addmi	r3, #2
 801b3fc:	6033      	strmi	r3, [r6, #0]
 801b3fe:	6825      	ldr	r5, [r4, #0]
 801b400:	f015 0506 	ands.w	r5, r5, #6
 801b404:	d106      	bne.n	801b414 <_printf_common+0x48>
 801b406:	f104 0a19 	add.w	sl, r4, #25
 801b40a:	68e3      	ldr	r3, [r4, #12]
 801b40c:	6832      	ldr	r2, [r6, #0]
 801b40e:	1a9b      	subs	r3, r3, r2
 801b410:	42ab      	cmp	r3, r5
 801b412:	dc26      	bgt.n	801b462 <_printf_common+0x96>
 801b414:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b418:	1e13      	subs	r3, r2, #0
 801b41a:	6822      	ldr	r2, [r4, #0]
 801b41c:	bf18      	it	ne
 801b41e:	2301      	movne	r3, #1
 801b420:	0692      	lsls	r2, r2, #26
 801b422:	d42b      	bmi.n	801b47c <_printf_common+0xb0>
 801b424:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b428:	4649      	mov	r1, r9
 801b42a:	4638      	mov	r0, r7
 801b42c:	47c0      	blx	r8
 801b42e:	3001      	adds	r0, #1
 801b430:	d01e      	beq.n	801b470 <_printf_common+0xa4>
 801b432:	6823      	ldr	r3, [r4, #0]
 801b434:	6922      	ldr	r2, [r4, #16]
 801b436:	f003 0306 	and.w	r3, r3, #6
 801b43a:	2b04      	cmp	r3, #4
 801b43c:	bf02      	ittt	eq
 801b43e:	68e5      	ldreq	r5, [r4, #12]
 801b440:	6833      	ldreq	r3, [r6, #0]
 801b442:	1aed      	subeq	r5, r5, r3
 801b444:	68a3      	ldr	r3, [r4, #8]
 801b446:	bf0c      	ite	eq
 801b448:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b44c:	2500      	movne	r5, #0
 801b44e:	4293      	cmp	r3, r2
 801b450:	bfc4      	itt	gt
 801b452:	1a9b      	subgt	r3, r3, r2
 801b454:	18ed      	addgt	r5, r5, r3
 801b456:	2600      	movs	r6, #0
 801b458:	341a      	adds	r4, #26
 801b45a:	42b5      	cmp	r5, r6
 801b45c:	d11a      	bne.n	801b494 <_printf_common+0xc8>
 801b45e:	2000      	movs	r0, #0
 801b460:	e008      	b.n	801b474 <_printf_common+0xa8>
 801b462:	2301      	movs	r3, #1
 801b464:	4652      	mov	r2, sl
 801b466:	4649      	mov	r1, r9
 801b468:	4638      	mov	r0, r7
 801b46a:	47c0      	blx	r8
 801b46c:	3001      	adds	r0, #1
 801b46e:	d103      	bne.n	801b478 <_printf_common+0xac>
 801b470:	f04f 30ff 	mov.w	r0, #4294967295
 801b474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b478:	3501      	adds	r5, #1
 801b47a:	e7c6      	b.n	801b40a <_printf_common+0x3e>
 801b47c:	18e1      	adds	r1, r4, r3
 801b47e:	1c5a      	adds	r2, r3, #1
 801b480:	2030      	movs	r0, #48	; 0x30
 801b482:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b486:	4422      	add	r2, r4
 801b488:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b48c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b490:	3302      	adds	r3, #2
 801b492:	e7c7      	b.n	801b424 <_printf_common+0x58>
 801b494:	2301      	movs	r3, #1
 801b496:	4622      	mov	r2, r4
 801b498:	4649      	mov	r1, r9
 801b49a:	4638      	mov	r0, r7
 801b49c:	47c0      	blx	r8
 801b49e:	3001      	adds	r0, #1
 801b4a0:	d0e6      	beq.n	801b470 <_printf_common+0xa4>
 801b4a2:	3601      	adds	r6, #1
 801b4a4:	e7d9      	b.n	801b45a <_printf_common+0x8e>
	...

0801b4a8 <_printf_i>:
 801b4a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b4ac:	7e0f      	ldrb	r7, [r1, #24]
 801b4ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b4b0:	2f78      	cmp	r7, #120	; 0x78
 801b4b2:	4691      	mov	r9, r2
 801b4b4:	4680      	mov	r8, r0
 801b4b6:	460c      	mov	r4, r1
 801b4b8:	469a      	mov	sl, r3
 801b4ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b4be:	d807      	bhi.n	801b4d0 <_printf_i+0x28>
 801b4c0:	2f62      	cmp	r7, #98	; 0x62
 801b4c2:	d80a      	bhi.n	801b4da <_printf_i+0x32>
 801b4c4:	2f00      	cmp	r7, #0
 801b4c6:	f000 80d4 	beq.w	801b672 <_printf_i+0x1ca>
 801b4ca:	2f58      	cmp	r7, #88	; 0x58
 801b4cc:	f000 80c0 	beq.w	801b650 <_printf_i+0x1a8>
 801b4d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b4d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b4d8:	e03a      	b.n	801b550 <_printf_i+0xa8>
 801b4da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b4de:	2b15      	cmp	r3, #21
 801b4e0:	d8f6      	bhi.n	801b4d0 <_printf_i+0x28>
 801b4e2:	a101      	add	r1, pc, #4	; (adr r1, 801b4e8 <_printf_i+0x40>)
 801b4e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b4e8:	0801b541 	.word	0x0801b541
 801b4ec:	0801b555 	.word	0x0801b555
 801b4f0:	0801b4d1 	.word	0x0801b4d1
 801b4f4:	0801b4d1 	.word	0x0801b4d1
 801b4f8:	0801b4d1 	.word	0x0801b4d1
 801b4fc:	0801b4d1 	.word	0x0801b4d1
 801b500:	0801b555 	.word	0x0801b555
 801b504:	0801b4d1 	.word	0x0801b4d1
 801b508:	0801b4d1 	.word	0x0801b4d1
 801b50c:	0801b4d1 	.word	0x0801b4d1
 801b510:	0801b4d1 	.word	0x0801b4d1
 801b514:	0801b659 	.word	0x0801b659
 801b518:	0801b581 	.word	0x0801b581
 801b51c:	0801b613 	.word	0x0801b613
 801b520:	0801b4d1 	.word	0x0801b4d1
 801b524:	0801b4d1 	.word	0x0801b4d1
 801b528:	0801b67b 	.word	0x0801b67b
 801b52c:	0801b4d1 	.word	0x0801b4d1
 801b530:	0801b581 	.word	0x0801b581
 801b534:	0801b4d1 	.word	0x0801b4d1
 801b538:	0801b4d1 	.word	0x0801b4d1
 801b53c:	0801b61b 	.word	0x0801b61b
 801b540:	682b      	ldr	r3, [r5, #0]
 801b542:	1d1a      	adds	r2, r3, #4
 801b544:	681b      	ldr	r3, [r3, #0]
 801b546:	602a      	str	r2, [r5, #0]
 801b548:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b54c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b550:	2301      	movs	r3, #1
 801b552:	e09f      	b.n	801b694 <_printf_i+0x1ec>
 801b554:	6820      	ldr	r0, [r4, #0]
 801b556:	682b      	ldr	r3, [r5, #0]
 801b558:	0607      	lsls	r7, r0, #24
 801b55a:	f103 0104 	add.w	r1, r3, #4
 801b55e:	6029      	str	r1, [r5, #0]
 801b560:	d501      	bpl.n	801b566 <_printf_i+0xbe>
 801b562:	681e      	ldr	r6, [r3, #0]
 801b564:	e003      	b.n	801b56e <_printf_i+0xc6>
 801b566:	0646      	lsls	r6, r0, #25
 801b568:	d5fb      	bpl.n	801b562 <_printf_i+0xba>
 801b56a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b56e:	2e00      	cmp	r6, #0
 801b570:	da03      	bge.n	801b57a <_printf_i+0xd2>
 801b572:	232d      	movs	r3, #45	; 0x2d
 801b574:	4276      	negs	r6, r6
 801b576:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b57a:	485a      	ldr	r0, [pc, #360]	; (801b6e4 <_printf_i+0x23c>)
 801b57c:	230a      	movs	r3, #10
 801b57e:	e012      	b.n	801b5a6 <_printf_i+0xfe>
 801b580:	682b      	ldr	r3, [r5, #0]
 801b582:	6820      	ldr	r0, [r4, #0]
 801b584:	1d19      	adds	r1, r3, #4
 801b586:	6029      	str	r1, [r5, #0]
 801b588:	0605      	lsls	r5, r0, #24
 801b58a:	d501      	bpl.n	801b590 <_printf_i+0xe8>
 801b58c:	681e      	ldr	r6, [r3, #0]
 801b58e:	e002      	b.n	801b596 <_printf_i+0xee>
 801b590:	0641      	lsls	r1, r0, #25
 801b592:	d5fb      	bpl.n	801b58c <_printf_i+0xe4>
 801b594:	881e      	ldrh	r6, [r3, #0]
 801b596:	4853      	ldr	r0, [pc, #332]	; (801b6e4 <_printf_i+0x23c>)
 801b598:	2f6f      	cmp	r7, #111	; 0x6f
 801b59a:	bf0c      	ite	eq
 801b59c:	2308      	moveq	r3, #8
 801b59e:	230a      	movne	r3, #10
 801b5a0:	2100      	movs	r1, #0
 801b5a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b5a6:	6865      	ldr	r5, [r4, #4]
 801b5a8:	60a5      	str	r5, [r4, #8]
 801b5aa:	2d00      	cmp	r5, #0
 801b5ac:	bfa2      	ittt	ge
 801b5ae:	6821      	ldrge	r1, [r4, #0]
 801b5b0:	f021 0104 	bicge.w	r1, r1, #4
 801b5b4:	6021      	strge	r1, [r4, #0]
 801b5b6:	b90e      	cbnz	r6, 801b5bc <_printf_i+0x114>
 801b5b8:	2d00      	cmp	r5, #0
 801b5ba:	d04b      	beq.n	801b654 <_printf_i+0x1ac>
 801b5bc:	4615      	mov	r5, r2
 801b5be:	fbb6 f1f3 	udiv	r1, r6, r3
 801b5c2:	fb03 6711 	mls	r7, r3, r1, r6
 801b5c6:	5dc7      	ldrb	r7, [r0, r7]
 801b5c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b5cc:	4637      	mov	r7, r6
 801b5ce:	42bb      	cmp	r3, r7
 801b5d0:	460e      	mov	r6, r1
 801b5d2:	d9f4      	bls.n	801b5be <_printf_i+0x116>
 801b5d4:	2b08      	cmp	r3, #8
 801b5d6:	d10b      	bne.n	801b5f0 <_printf_i+0x148>
 801b5d8:	6823      	ldr	r3, [r4, #0]
 801b5da:	07de      	lsls	r6, r3, #31
 801b5dc:	d508      	bpl.n	801b5f0 <_printf_i+0x148>
 801b5de:	6923      	ldr	r3, [r4, #16]
 801b5e0:	6861      	ldr	r1, [r4, #4]
 801b5e2:	4299      	cmp	r1, r3
 801b5e4:	bfde      	ittt	le
 801b5e6:	2330      	movle	r3, #48	; 0x30
 801b5e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b5ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b5f0:	1b52      	subs	r2, r2, r5
 801b5f2:	6122      	str	r2, [r4, #16]
 801b5f4:	f8cd a000 	str.w	sl, [sp]
 801b5f8:	464b      	mov	r3, r9
 801b5fa:	aa03      	add	r2, sp, #12
 801b5fc:	4621      	mov	r1, r4
 801b5fe:	4640      	mov	r0, r8
 801b600:	f7ff fee4 	bl	801b3cc <_printf_common>
 801b604:	3001      	adds	r0, #1
 801b606:	d14a      	bne.n	801b69e <_printf_i+0x1f6>
 801b608:	f04f 30ff 	mov.w	r0, #4294967295
 801b60c:	b004      	add	sp, #16
 801b60e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b612:	6823      	ldr	r3, [r4, #0]
 801b614:	f043 0320 	orr.w	r3, r3, #32
 801b618:	6023      	str	r3, [r4, #0]
 801b61a:	4833      	ldr	r0, [pc, #204]	; (801b6e8 <_printf_i+0x240>)
 801b61c:	2778      	movs	r7, #120	; 0x78
 801b61e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b622:	6823      	ldr	r3, [r4, #0]
 801b624:	6829      	ldr	r1, [r5, #0]
 801b626:	061f      	lsls	r7, r3, #24
 801b628:	f851 6b04 	ldr.w	r6, [r1], #4
 801b62c:	d402      	bmi.n	801b634 <_printf_i+0x18c>
 801b62e:	065f      	lsls	r7, r3, #25
 801b630:	bf48      	it	mi
 801b632:	b2b6      	uxthmi	r6, r6
 801b634:	07df      	lsls	r7, r3, #31
 801b636:	bf48      	it	mi
 801b638:	f043 0320 	orrmi.w	r3, r3, #32
 801b63c:	6029      	str	r1, [r5, #0]
 801b63e:	bf48      	it	mi
 801b640:	6023      	strmi	r3, [r4, #0]
 801b642:	b91e      	cbnz	r6, 801b64c <_printf_i+0x1a4>
 801b644:	6823      	ldr	r3, [r4, #0]
 801b646:	f023 0320 	bic.w	r3, r3, #32
 801b64a:	6023      	str	r3, [r4, #0]
 801b64c:	2310      	movs	r3, #16
 801b64e:	e7a7      	b.n	801b5a0 <_printf_i+0xf8>
 801b650:	4824      	ldr	r0, [pc, #144]	; (801b6e4 <_printf_i+0x23c>)
 801b652:	e7e4      	b.n	801b61e <_printf_i+0x176>
 801b654:	4615      	mov	r5, r2
 801b656:	e7bd      	b.n	801b5d4 <_printf_i+0x12c>
 801b658:	682b      	ldr	r3, [r5, #0]
 801b65a:	6826      	ldr	r6, [r4, #0]
 801b65c:	6961      	ldr	r1, [r4, #20]
 801b65e:	1d18      	adds	r0, r3, #4
 801b660:	6028      	str	r0, [r5, #0]
 801b662:	0635      	lsls	r5, r6, #24
 801b664:	681b      	ldr	r3, [r3, #0]
 801b666:	d501      	bpl.n	801b66c <_printf_i+0x1c4>
 801b668:	6019      	str	r1, [r3, #0]
 801b66a:	e002      	b.n	801b672 <_printf_i+0x1ca>
 801b66c:	0670      	lsls	r0, r6, #25
 801b66e:	d5fb      	bpl.n	801b668 <_printf_i+0x1c0>
 801b670:	8019      	strh	r1, [r3, #0]
 801b672:	2300      	movs	r3, #0
 801b674:	6123      	str	r3, [r4, #16]
 801b676:	4615      	mov	r5, r2
 801b678:	e7bc      	b.n	801b5f4 <_printf_i+0x14c>
 801b67a:	682b      	ldr	r3, [r5, #0]
 801b67c:	1d1a      	adds	r2, r3, #4
 801b67e:	602a      	str	r2, [r5, #0]
 801b680:	681d      	ldr	r5, [r3, #0]
 801b682:	6862      	ldr	r2, [r4, #4]
 801b684:	2100      	movs	r1, #0
 801b686:	4628      	mov	r0, r5
 801b688:	f7e4 fe52 	bl	8000330 <memchr>
 801b68c:	b108      	cbz	r0, 801b692 <_printf_i+0x1ea>
 801b68e:	1b40      	subs	r0, r0, r5
 801b690:	6060      	str	r0, [r4, #4]
 801b692:	6863      	ldr	r3, [r4, #4]
 801b694:	6123      	str	r3, [r4, #16]
 801b696:	2300      	movs	r3, #0
 801b698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b69c:	e7aa      	b.n	801b5f4 <_printf_i+0x14c>
 801b69e:	6923      	ldr	r3, [r4, #16]
 801b6a0:	462a      	mov	r2, r5
 801b6a2:	4649      	mov	r1, r9
 801b6a4:	4640      	mov	r0, r8
 801b6a6:	47d0      	blx	sl
 801b6a8:	3001      	adds	r0, #1
 801b6aa:	d0ad      	beq.n	801b608 <_printf_i+0x160>
 801b6ac:	6823      	ldr	r3, [r4, #0]
 801b6ae:	079b      	lsls	r3, r3, #30
 801b6b0:	d413      	bmi.n	801b6da <_printf_i+0x232>
 801b6b2:	68e0      	ldr	r0, [r4, #12]
 801b6b4:	9b03      	ldr	r3, [sp, #12]
 801b6b6:	4298      	cmp	r0, r3
 801b6b8:	bfb8      	it	lt
 801b6ba:	4618      	movlt	r0, r3
 801b6bc:	e7a6      	b.n	801b60c <_printf_i+0x164>
 801b6be:	2301      	movs	r3, #1
 801b6c0:	4632      	mov	r2, r6
 801b6c2:	4649      	mov	r1, r9
 801b6c4:	4640      	mov	r0, r8
 801b6c6:	47d0      	blx	sl
 801b6c8:	3001      	adds	r0, #1
 801b6ca:	d09d      	beq.n	801b608 <_printf_i+0x160>
 801b6cc:	3501      	adds	r5, #1
 801b6ce:	68e3      	ldr	r3, [r4, #12]
 801b6d0:	9903      	ldr	r1, [sp, #12]
 801b6d2:	1a5b      	subs	r3, r3, r1
 801b6d4:	42ab      	cmp	r3, r5
 801b6d6:	dcf2      	bgt.n	801b6be <_printf_i+0x216>
 801b6d8:	e7eb      	b.n	801b6b2 <_printf_i+0x20a>
 801b6da:	2500      	movs	r5, #0
 801b6dc:	f104 0619 	add.w	r6, r4, #25
 801b6e0:	e7f5      	b.n	801b6ce <_printf_i+0x226>
 801b6e2:	bf00      	nop
 801b6e4:	08020418 	.word	0x08020418
 801b6e8:	08020429 	.word	0x08020429

0801b6ec <_scanf_float>:
 801b6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6f0:	b087      	sub	sp, #28
 801b6f2:	4617      	mov	r7, r2
 801b6f4:	9303      	str	r3, [sp, #12]
 801b6f6:	688b      	ldr	r3, [r1, #8]
 801b6f8:	1e5a      	subs	r2, r3, #1
 801b6fa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801b6fe:	bf83      	ittte	hi
 801b700:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801b704:	195b      	addhi	r3, r3, r5
 801b706:	9302      	strhi	r3, [sp, #8]
 801b708:	2300      	movls	r3, #0
 801b70a:	bf86      	itte	hi
 801b70c:	f240 135d 	movwhi	r3, #349	; 0x15d
 801b710:	608b      	strhi	r3, [r1, #8]
 801b712:	9302      	strls	r3, [sp, #8]
 801b714:	680b      	ldr	r3, [r1, #0]
 801b716:	468b      	mov	fp, r1
 801b718:	2500      	movs	r5, #0
 801b71a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801b71e:	f84b 3b1c 	str.w	r3, [fp], #28
 801b722:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801b726:	4680      	mov	r8, r0
 801b728:	460c      	mov	r4, r1
 801b72a:	465e      	mov	r6, fp
 801b72c:	46aa      	mov	sl, r5
 801b72e:	46a9      	mov	r9, r5
 801b730:	9501      	str	r5, [sp, #4]
 801b732:	68a2      	ldr	r2, [r4, #8]
 801b734:	b152      	cbz	r2, 801b74c <_scanf_float+0x60>
 801b736:	683b      	ldr	r3, [r7, #0]
 801b738:	781b      	ldrb	r3, [r3, #0]
 801b73a:	2b4e      	cmp	r3, #78	; 0x4e
 801b73c:	d864      	bhi.n	801b808 <_scanf_float+0x11c>
 801b73e:	2b40      	cmp	r3, #64	; 0x40
 801b740:	d83c      	bhi.n	801b7bc <_scanf_float+0xd0>
 801b742:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801b746:	b2c8      	uxtb	r0, r1
 801b748:	280e      	cmp	r0, #14
 801b74a:	d93a      	bls.n	801b7c2 <_scanf_float+0xd6>
 801b74c:	f1b9 0f00 	cmp.w	r9, #0
 801b750:	d003      	beq.n	801b75a <_scanf_float+0x6e>
 801b752:	6823      	ldr	r3, [r4, #0]
 801b754:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b758:	6023      	str	r3, [r4, #0]
 801b75a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b75e:	f1ba 0f01 	cmp.w	sl, #1
 801b762:	f200 8113 	bhi.w	801b98c <_scanf_float+0x2a0>
 801b766:	455e      	cmp	r6, fp
 801b768:	f200 8105 	bhi.w	801b976 <_scanf_float+0x28a>
 801b76c:	2501      	movs	r5, #1
 801b76e:	4628      	mov	r0, r5
 801b770:	b007      	add	sp, #28
 801b772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b776:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801b77a:	2a0d      	cmp	r2, #13
 801b77c:	d8e6      	bhi.n	801b74c <_scanf_float+0x60>
 801b77e:	a101      	add	r1, pc, #4	; (adr r1, 801b784 <_scanf_float+0x98>)
 801b780:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801b784:	0801b8c3 	.word	0x0801b8c3
 801b788:	0801b74d 	.word	0x0801b74d
 801b78c:	0801b74d 	.word	0x0801b74d
 801b790:	0801b74d 	.word	0x0801b74d
 801b794:	0801b923 	.word	0x0801b923
 801b798:	0801b8fb 	.word	0x0801b8fb
 801b79c:	0801b74d 	.word	0x0801b74d
 801b7a0:	0801b74d 	.word	0x0801b74d
 801b7a4:	0801b8d1 	.word	0x0801b8d1
 801b7a8:	0801b74d 	.word	0x0801b74d
 801b7ac:	0801b74d 	.word	0x0801b74d
 801b7b0:	0801b74d 	.word	0x0801b74d
 801b7b4:	0801b74d 	.word	0x0801b74d
 801b7b8:	0801b889 	.word	0x0801b889
 801b7bc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801b7c0:	e7db      	b.n	801b77a <_scanf_float+0x8e>
 801b7c2:	290e      	cmp	r1, #14
 801b7c4:	d8c2      	bhi.n	801b74c <_scanf_float+0x60>
 801b7c6:	a001      	add	r0, pc, #4	; (adr r0, 801b7cc <_scanf_float+0xe0>)
 801b7c8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801b7cc:	0801b87b 	.word	0x0801b87b
 801b7d0:	0801b74d 	.word	0x0801b74d
 801b7d4:	0801b87b 	.word	0x0801b87b
 801b7d8:	0801b90f 	.word	0x0801b90f
 801b7dc:	0801b74d 	.word	0x0801b74d
 801b7e0:	0801b829 	.word	0x0801b829
 801b7e4:	0801b865 	.word	0x0801b865
 801b7e8:	0801b865 	.word	0x0801b865
 801b7ec:	0801b865 	.word	0x0801b865
 801b7f0:	0801b865 	.word	0x0801b865
 801b7f4:	0801b865 	.word	0x0801b865
 801b7f8:	0801b865 	.word	0x0801b865
 801b7fc:	0801b865 	.word	0x0801b865
 801b800:	0801b865 	.word	0x0801b865
 801b804:	0801b865 	.word	0x0801b865
 801b808:	2b6e      	cmp	r3, #110	; 0x6e
 801b80a:	d809      	bhi.n	801b820 <_scanf_float+0x134>
 801b80c:	2b60      	cmp	r3, #96	; 0x60
 801b80e:	d8b2      	bhi.n	801b776 <_scanf_float+0x8a>
 801b810:	2b54      	cmp	r3, #84	; 0x54
 801b812:	d077      	beq.n	801b904 <_scanf_float+0x218>
 801b814:	2b59      	cmp	r3, #89	; 0x59
 801b816:	d199      	bne.n	801b74c <_scanf_float+0x60>
 801b818:	2d07      	cmp	r5, #7
 801b81a:	d197      	bne.n	801b74c <_scanf_float+0x60>
 801b81c:	2508      	movs	r5, #8
 801b81e:	e029      	b.n	801b874 <_scanf_float+0x188>
 801b820:	2b74      	cmp	r3, #116	; 0x74
 801b822:	d06f      	beq.n	801b904 <_scanf_float+0x218>
 801b824:	2b79      	cmp	r3, #121	; 0x79
 801b826:	e7f6      	b.n	801b816 <_scanf_float+0x12a>
 801b828:	6821      	ldr	r1, [r4, #0]
 801b82a:	05c8      	lsls	r0, r1, #23
 801b82c:	d51a      	bpl.n	801b864 <_scanf_float+0x178>
 801b82e:	9b02      	ldr	r3, [sp, #8]
 801b830:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801b834:	6021      	str	r1, [r4, #0]
 801b836:	f109 0901 	add.w	r9, r9, #1
 801b83a:	b11b      	cbz	r3, 801b844 <_scanf_float+0x158>
 801b83c:	3b01      	subs	r3, #1
 801b83e:	3201      	adds	r2, #1
 801b840:	9302      	str	r3, [sp, #8]
 801b842:	60a2      	str	r2, [r4, #8]
 801b844:	68a3      	ldr	r3, [r4, #8]
 801b846:	3b01      	subs	r3, #1
 801b848:	60a3      	str	r3, [r4, #8]
 801b84a:	6923      	ldr	r3, [r4, #16]
 801b84c:	3301      	adds	r3, #1
 801b84e:	6123      	str	r3, [r4, #16]
 801b850:	687b      	ldr	r3, [r7, #4]
 801b852:	3b01      	subs	r3, #1
 801b854:	2b00      	cmp	r3, #0
 801b856:	607b      	str	r3, [r7, #4]
 801b858:	f340 8084 	ble.w	801b964 <_scanf_float+0x278>
 801b85c:	683b      	ldr	r3, [r7, #0]
 801b85e:	3301      	adds	r3, #1
 801b860:	603b      	str	r3, [r7, #0]
 801b862:	e766      	b.n	801b732 <_scanf_float+0x46>
 801b864:	eb1a 0f05 	cmn.w	sl, r5
 801b868:	f47f af70 	bne.w	801b74c <_scanf_float+0x60>
 801b86c:	6822      	ldr	r2, [r4, #0]
 801b86e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801b872:	6022      	str	r2, [r4, #0]
 801b874:	f806 3b01 	strb.w	r3, [r6], #1
 801b878:	e7e4      	b.n	801b844 <_scanf_float+0x158>
 801b87a:	6822      	ldr	r2, [r4, #0]
 801b87c:	0610      	lsls	r0, r2, #24
 801b87e:	f57f af65 	bpl.w	801b74c <_scanf_float+0x60>
 801b882:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801b886:	e7f4      	b.n	801b872 <_scanf_float+0x186>
 801b888:	f1ba 0f00 	cmp.w	sl, #0
 801b88c:	d10e      	bne.n	801b8ac <_scanf_float+0x1c0>
 801b88e:	f1b9 0f00 	cmp.w	r9, #0
 801b892:	d10e      	bne.n	801b8b2 <_scanf_float+0x1c6>
 801b894:	6822      	ldr	r2, [r4, #0]
 801b896:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801b89a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801b89e:	d108      	bne.n	801b8b2 <_scanf_float+0x1c6>
 801b8a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b8a4:	6022      	str	r2, [r4, #0]
 801b8a6:	f04f 0a01 	mov.w	sl, #1
 801b8aa:	e7e3      	b.n	801b874 <_scanf_float+0x188>
 801b8ac:	f1ba 0f02 	cmp.w	sl, #2
 801b8b0:	d055      	beq.n	801b95e <_scanf_float+0x272>
 801b8b2:	2d01      	cmp	r5, #1
 801b8b4:	d002      	beq.n	801b8bc <_scanf_float+0x1d0>
 801b8b6:	2d04      	cmp	r5, #4
 801b8b8:	f47f af48 	bne.w	801b74c <_scanf_float+0x60>
 801b8bc:	3501      	adds	r5, #1
 801b8be:	b2ed      	uxtb	r5, r5
 801b8c0:	e7d8      	b.n	801b874 <_scanf_float+0x188>
 801b8c2:	f1ba 0f01 	cmp.w	sl, #1
 801b8c6:	f47f af41 	bne.w	801b74c <_scanf_float+0x60>
 801b8ca:	f04f 0a02 	mov.w	sl, #2
 801b8ce:	e7d1      	b.n	801b874 <_scanf_float+0x188>
 801b8d0:	b97d      	cbnz	r5, 801b8f2 <_scanf_float+0x206>
 801b8d2:	f1b9 0f00 	cmp.w	r9, #0
 801b8d6:	f47f af3c 	bne.w	801b752 <_scanf_float+0x66>
 801b8da:	6822      	ldr	r2, [r4, #0]
 801b8dc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801b8e0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801b8e4:	f47f af39 	bne.w	801b75a <_scanf_float+0x6e>
 801b8e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b8ec:	6022      	str	r2, [r4, #0]
 801b8ee:	2501      	movs	r5, #1
 801b8f0:	e7c0      	b.n	801b874 <_scanf_float+0x188>
 801b8f2:	2d03      	cmp	r5, #3
 801b8f4:	d0e2      	beq.n	801b8bc <_scanf_float+0x1d0>
 801b8f6:	2d05      	cmp	r5, #5
 801b8f8:	e7de      	b.n	801b8b8 <_scanf_float+0x1cc>
 801b8fa:	2d02      	cmp	r5, #2
 801b8fc:	f47f af26 	bne.w	801b74c <_scanf_float+0x60>
 801b900:	2503      	movs	r5, #3
 801b902:	e7b7      	b.n	801b874 <_scanf_float+0x188>
 801b904:	2d06      	cmp	r5, #6
 801b906:	f47f af21 	bne.w	801b74c <_scanf_float+0x60>
 801b90a:	2507      	movs	r5, #7
 801b90c:	e7b2      	b.n	801b874 <_scanf_float+0x188>
 801b90e:	6822      	ldr	r2, [r4, #0]
 801b910:	0591      	lsls	r1, r2, #22
 801b912:	f57f af1b 	bpl.w	801b74c <_scanf_float+0x60>
 801b916:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801b91a:	6022      	str	r2, [r4, #0]
 801b91c:	f8cd 9004 	str.w	r9, [sp, #4]
 801b920:	e7a8      	b.n	801b874 <_scanf_float+0x188>
 801b922:	6822      	ldr	r2, [r4, #0]
 801b924:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801b928:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801b92c:	d006      	beq.n	801b93c <_scanf_float+0x250>
 801b92e:	0550      	lsls	r0, r2, #21
 801b930:	f57f af0c 	bpl.w	801b74c <_scanf_float+0x60>
 801b934:	f1b9 0f00 	cmp.w	r9, #0
 801b938:	f43f af0f 	beq.w	801b75a <_scanf_float+0x6e>
 801b93c:	0591      	lsls	r1, r2, #22
 801b93e:	bf58      	it	pl
 801b940:	9901      	ldrpl	r1, [sp, #4]
 801b942:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b946:	bf58      	it	pl
 801b948:	eba9 0101 	subpl.w	r1, r9, r1
 801b94c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801b950:	bf58      	it	pl
 801b952:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801b956:	6022      	str	r2, [r4, #0]
 801b958:	f04f 0900 	mov.w	r9, #0
 801b95c:	e78a      	b.n	801b874 <_scanf_float+0x188>
 801b95e:	f04f 0a03 	mov.w	sl, #3
 801b962:	e787      	b.n	801b874 <_scanf_float+0x188>
 801b964:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801b968:	4639      	mov	r1, r7
 801b96a:	4640      	mov	r0, r8
 801b96c:	4798      	blx	r3
 801b96e:	2800      	cmp	r0, #0
 801b970:	f43f aedf 	beq.w	801b732 <_scanf_float+0x46>
 801b974:	e6ea      	b.n	801b74c <_scanf_float+0x60>
 801b976:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b97a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b97e:	463a      	mov	r2, r7
 801b980:	4640      	mov	r0, r8
 801b982:	4798      	blx	r3
 801b984:	6923      	ldr	r3, [r4, #16]
 801b986:	3b01      	subs	r3, #1
 801b988:	6123      	str	r3, [r4, #16]
 801b98a:	e6ec      	b.n	801b766 <_scanf_float+0x7a>
 801b98c:	1e6b      	subs	r3, r5, #1
 801b98e:	2b06      	cmp	r3, #6
 801b990:	d825      	bhi.n	801b9de <_scanf_float+0x2f2>
 801b992:	2d02      	cmp	r5, #2
 801b994:	d836      	bhi.n	801ba04 <_scanf_float+0x318>
 801b996:	455e      	cmp	r6, fp
 801b998:	f67f aee8 	bls.w	801b76c <_scanf_float+0x80>
 801b99c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b9a0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b9a4:	463a      	mov	r2, r7
 801b9a6:	4640      	mov	r0, r8
 801b9a8:	4798      	blx	r3
 801b9aa:	6923      	ldr	r3, [r4, #16]
 801b9ac:	3b01      	subs	r3, #1
 801b9ae:	6123      	str	r3, [r4, #16]
 801b9b0:	e7f1      	b.n	801b996 <_scanf_float+0x2aa>
 801b9b2:	9802      	ldr	r0, [sp, #8]
 801b9b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b9b8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801b9bc:	9002      	str	r0, [sp, #8]
 801b9be:	463a      	mov	r2, r7
 801b9c0:	4640      	mov	r0, r8
 801b9c2:	4798      	blx	r3
 801b9c4:	6923      	ldr	r3, [r4, #16]
 801b9c6:	3b01      	subs	r3, #1
 801b9c8:	6123      	str	r3, [r4, #16]
 801b9ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b9ce:	fa5f fa8a 	uxtb.w	sl, sl
 801b9d2:	f1ba 0f02 	cmp.w	sl, #2
 801b9d6:	d1ec      	bne.n	801b9b2 <_scanf_float+0x2c6>
 801b9d8:	3d03      	subs	r5, #3
 801b9da:	b2ed      	uxtb	r5, r5
 801b9dc:	1b76      	subs	r6, r6, r5
 801b9de:	6823      	ldr	r3, [r4, #0]
 801b9e0:	05da      	lsls	r2, r3, #23
 801b9e2:	d52f      	bpl.n	801ba44 <_scanf_float+0x358>
 801b9e4:	055b      	lsls	r3, r3, #21
 801b9e6:	d510      	bpl.n	801ba0a <_scanf_float+0x31e>
 801b9e8:	455e      	cmp	r6, fp
 801b9ea:	f67f aebf 	bls.w	801b76c <_scanf_float+0x80>
 801b9ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b9f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b9f6:	463a      	mov	r2, r7
 801b9f8:	4640      	mov	r0, r8
 801b9fa:	4798      	blx	r3
 801b9fc:	6923      	ldr	r3, [r4, #16]
 801b9fe:	3b01      	subs	r3, #1
 801ba00:	6123      	str	r3, [r4, #16]
 801ba02:	e7f1      	b.n	801b9e8 <_scanf_float+0x2fc>
 801ba04:	46aa      	mov	sl, r5
 801ba06:	9602      	str	r6, [sp, #8]
 801ba08:	e7df      	b.n	801b9ca <_scanf_float+0x2de>
 801ba0a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801ba0e:	6923      	ldr	r3, [r4, #16]
 801ba10:	2965      	cmp	r1, #101	; 0x65
 801ba12:	f103 33ff 	add.w	r3, r3, #4294967295
 801ba16:	f106 35ff 	add.w	r5, r6, #4294967295
 801ba1a:	6123      	str	r3, [r4, #16]
 801ba1c:	d00c      	beq.n	801ba38 <_scanf_float+0x34c>
 801ba1e:	2945      	cmp	r1, #69	; 0x45
 801ba20:	d00a      	beq.n	801ba38 <_scanf_float+0x34c>
 801ba22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ba26:	463a      	mov	r2, r7
 801ba28:	4640      	mov	r0, r8
 801ba2a:	4798      	blx	r3
 801ba2c:	6923      	ldr	r3, [r4, #16]
 801ba2e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801ba32:	3b01      	subs	r3, #1
 801ba34:	1eb5      	subs	r5, r6, #2
 801ba36:	6123      	str	r3, [r4, #16]
 801ba38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ba3c:	463a      	mov	r2, r7
 801ba3e:	4640      	mov	r0, r8
 801ba40:	4798      	blx	r3
 801ba42:	462e      	mov	r6, r5
 801ba44:	6825      	ldr	r5, [r4, #0]
 801ba46:	f015 0510 	ands.w	r5, r5, #16
 801ba4a:	d14d      	bne.n	801bae8 <_scanf_float+0x3fc>
 801ba4c:	7035      	strb	r5, [r6, #0]
 801ba4e:	6823      	ldr	r3, [r4, #0]
 801ba50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801ba54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ba58:	d11a      	bne.n	801ba90 <_scanf_float+0x3a4>
 801ba5a:	9b01      	ldr	r3, [sp, #4]
 801ba5c:	454b      	cmp	r3, r9
 801ba5e:	eba3 0209 	sub.w	r2, r3, r9
 801ba62:	d122      	bne.n	801baaa <_scanf_float+0x3be>
 801ba64:	2200      	movs	r2, #0
 801ba66:	4659      	mov	r1, fp
 801ba68:	4640      	mov	r0, r8
 801ba6a:	f002 fb9f 	bl	801e1ac <_strtod_r>
 801ba6e:	9b03      	ldr	r3, [sp, #12]
 801ba70:	6821      	ldr	r1, [r4, #0]
 801ba72:	681b      	ldr	r3, [r3, #0]
 801ba74:	f011 0f02 	tst.w	r1, #2
 801ba78:	f103 0204 	add.w	r2, r3, #4
 801ba7c:	d020      	beq.n	801bac0 <_scanf_float+0x3d4>
 801ba7e:	9903      	ldr	r1, [sp, #12]
 801ba80:	600a      	str	r2, [r1, #0]
 801ba82:	681b      	ldr	r3, [r3, #0]
 801ba84:	ed83 0b00 	vstr	d0, [r3]
 801ba88:	68e3      	ldr	r3, [r4, #12]
 801ba8a:	3301      	adds	r3, #1
 801ba8c:	60e3      	str	r3, [r4, #12]
 801ba8e:	e66e      	b.n	801b76e <_scanf_float+0x82>
 801ba90:	9b04      	ldr	r3, [sp, #16]
 801ba92:	2b00      	cmp	r3, #0
 801ba94:	d0e6      	beq.n	801ba64 <_scanf_float+0x378>
 801ba96:	9905      	ldr	r1, [sp, #20]
 801ba98:	230a      	movs	r3, #10
 801ba9a:	462a      	mov	r2, r5
 801ba9c:	3101      	adds	r1, #1
 801ba9e:	4640      	mov	r0, r8
 801baa0:	f002 fc0c 	bl	801e2bc <_strtol_r>
 801baa4:	9b04      	ldr	r3, [sp, #16]
 801baa6:	9e05      	ldr	r6, [sp, #20]
 801baa8:	1ac2      	subs	r2, r0, r3
 801baaa:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801baae:	429e      	cmp	r6, r3
 801bab0:	bf28      	it	cs
 801bab2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801bab6:	490d      	ldr	r1, [pc, #52]	; (801baec <_scanf_float+0x400>)
 801bab8:	4630      	mov	r0, r6
 801baba:	f000 f8dd 	bl	801bc78 <siprintf>
 801babe:	e7d1      	b.n	801ba64 <_scanf_float+0x378>
 801bac0:	f011 0f04 	tst.w	r1, #4
 801bac4:	9903      	ldr	r1, [sp, #12]
 801bac6:	600a      	str	r2, [r1, #0]
 801bac8:	d1db      	bne.n	801ba82 <_scanf_float+0x396>
 801baca:	eeb4 0b40 	vcmp.f64	d0, d0
 801bace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bad2:	681e      	ldr	r6, [r3, #0]
 801bad4:	d705      	bvc.n	801bae2 <_scanf_float+0x3f6>
 801bad6:	4806      	ldr	r0, [pc, #24]	; (801baf0 <_scanf_float+0x404>)
 801bad8:	f000 f9f6 	bl	801bec8 <nanf>
 801badc:	ed86 0a00 	vstr	s0, [r6]
 801bae0:	e7d2      	b.n	801ba88 <_scanf_float+0x39c>
 801bae2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801bae6:	e7f9      	b.n	801badc <_scanf_float+0x3f0>
 801bae8:	2500      	movs	r5, #0
 801baea:	e640      	b.n	801b76e <_scanf_float+0x82>
 801baec:	0802043a 	.word	0x0802043a
 801baf0:	080207e8 	.word	0x080207e8

0801baf4 <std>:
 801baf4:	2300      	movs	r3, #0
 801baf6:	b510      	push	{r4, lr}
 801baf8:	4604      	mov	r4, r0
 801bafa:	e9c0 3300 	strd	r3, r3, [r0]
 801bafe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801bb02:	6083      	str	r3, [r0, #8]
 801bb04:	8181      	strh	r1, [r0, #12]
 801bb06:	6643      	str	r3, [r0, #100]	; 0x64
 801bb08:	81c2      	strh	r2, [r0, #14]
 801bb0a:	6183      	str	r3, [r0, #24]
 801bb0c:	4619      	mov	r1, r3
 801bb0e:	2208      	movs	r2, #8
 801bb10:	305c      	adds	r0, #92	; 0x5c
 801bb12:	f000 f942 	bl	801bd9a <memset>
 801bb16:	4b0d      	ldr	r3, [pc, #52]	; (801bb4c <std+0x58>)
 801bb18:	6263      	str	r3, [r4, #36]	; 0x24
 801bb1a:	4b0d      	ldr	r3, [pc, #52]	; (801bb50 <std+0x5c>)
 801bb1c:	62a3      	str	r3, [r4, #40]	; 0x28
 801bb1e:	4b0d      	ldr	r3, [pc, #52]	; (801bb54 <std+0x60>)
 801bb20:	62e3      	str	r3, [r4, #44]	; 0x2c
 801bb22:	4b0d      	ldr	r3, [pc, #52]	; (801bb58 <std+0x64>)
 801bb24:	6323      	str	r3, [r4, #48]	; 0x30
 801bb26:	4b0d      	ldr	r3, [pc, #52]	; (801bb5c <std+0x68>)
 801bb28:	6224      	str	r4, [r4, #32]
 801bb2a:	429c      	cmp	r4, r3
 801bb2c:	d006      	beq.n	801bb3c <std+0x48>
 801bb2e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801bb32:	4294      	cmp	r4, r2
 801bb34:	d002      	beq.n	801bb3c <std+0x48>
 801bb36:	33d0      	adds	r3, #208	; 0xd0
 801bb38:	429c      	cmp	r4, r3
 801bb3a:	d105      	bne.n	801bb48 <std+0x54>
 801bb3c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801bb40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bb44:	f000 b9a6 	b.w	801be94 <__retarget_lock_init_recursive>
 801bb48:	bd10      	pop	{r4, pc}
 801bb4a:	bf00      	nop
 801bb4c:	0801bd11 	.word	0x0801bd11
 801bb50:	0801bd37 	.word	0x0801bd37
 801bb54:	0801bd6f 	.word	0x0801bd6f
 801bb58:	0801bd93 	.word	0x0801bd93
 801bb5c:	240034e4 	.word	0x240034e4

0801bb60 <stdio_exit_handler>:
 801bb60:	4a02      	ldr	r2, [pc, #8]	; (801bb6c <stdio_exit_handler+0xc>)
 801bb62:	4903      	ldr	r1, [pc, #12]	; (801bb70 <stdio_exit_handler+0x10>)
 801bb64:	4803      	ldr	r0, [pc, #12]	; (801bb74 <stdio_exit_handler+0x14>)
 801bb66:	f000 b869 	b.w	801bc3c <_fwalk_sglue>
 801bb6a:	bf00      	nop
 801bb6c:	24000100 	.word	0x24000100
 801bb70:	0801ecbd 	.word	0x0801ecbd
 801bb74:	2400010c 	.word	0x2400010c

0801bb78 <cleanup_stdio>:
 801bb78:	6841      	ldr	r1, [r0, #4]
 801bb7a:	4b0c      	ldr	r3, [pc, #48]	; (801bbac <cleanup_stdio+0x34>)
 801bb7c:	4299      	cmp	r1, r3
 801bb7e:	b510      	push	{r4, lr}
 801bb80:	4604      	mov	r4, r0
 801bb82:	d001      	beq.n	801bb88 <cleanup_stdio+0x10>
 801bb84:	f003 f89a 	bl	801ecbc <_fflush_r>
 801bb88:	68a1      	ldr	r1, [r4, #8]
 801bb8a:	4b09      	ldr	r3, [pc, #36]	; (801bbb0 <cleanup_stdio+0x38>)
 801bb8c:	4299      	cmp	r1, r3
 801bb8e:	d002      	beq.n	801bb96 <cleanup_stdio+0x1e>
 801bb90:	4620      	mov	r0, r4
 801bb92:	f003 f893 	bl	801ecbc <_fflush_r>
 801bb96:	68e1      	ldr	r1, [r4, #12]
 801bb98:	4b06      	ldr	r3, [pc, #24]	; (801bbb4 <cleanup_stdio+0x3c>)
 801bb9a:	4299      	cmp	r1, r3
 801bb9c:	d004      	beq.n	801bba8 <cleanup_stdio+0x30>
 801bb9e:	4620      	mov	r0, r4
 801bba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bba4:	f003 b88a 	b.w	801ecbc <_fflush_r>
 801bba8:	bd10      	pop	{r4, pc}
 801bbaa:	bf00      	nop
 801bbac:	240034e4 	.word	0x240034e4
 801bbb0:	2400354c 	.word	0x2400354c
 801bbb4:	240035b4 	.word	0x240035b4

0801bbb8 <global_stdio_init.part.0>:
 801bbb8:	b510      	push	{r4, lr}
 801bbba:	4b0b      	ldr	r3, [pc, #44]	; (801bbe8 <global_stdio_init.part.0+0x30>)
 801bbbc:	4c0b      	ldr	r4, [pc, #44]	; (801bbec <global_stdio_init.part.0+0x34>)
 801bbbe:	4a0c      	ldr	r2, [pc, #48]	; (801bbf0 <global_stdio_init.part.0+0x38>)
 801bbc0:	601a      	str	r2, [r3, #0]
 801bbc2:	4620      	mov	r0, r4
 801bbc4:	2200      	movs	r2, #0
 801bbc6:	2104      	movs	r1, #4
 801bbc8:	f7ff ff94 	bl	801baf4 <std>
 801bbcc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801bbd0:	2201      	movs	r2, #1
 801bbd2:	2109      	movs	r1, #9
 801bbd4:	f7ff ff8e 	bl	801baf4 <std>
 801bbd8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801bbdc:	2202      	movs	r2, #2
 801bbde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bbe2:	2112      	movs	r1, #18
 801bbe4:	f7ff bf86 	b.w	801baf4 <std>
 801bbe8:	2400361c 	.word	0x2400361c
 801bbec:	240034e4 	.word	0x240034e4
 801bbf0:	0801bb61 	.word	0x0801bb61

0801bbf4 <__sfp_lock_acquire>:
 801bbf4:	4801      	ldr	r0, [pc, #4]	; (801bbfc <__sfp_lock_acquire+0x8>)
 801bbf6:	f000 b94e 	b.w	801be96 <__retarget_lock_acquire_recursive>
 801bbfa:	bf00      	nop
 801bbfc:	24003625 	.word	0x24003625

0801bc00 <__sfp_lock_release>:
 801bc00:	4801      	ldr	r0, [pc, #4]	; (801bc08 <__sfp_lock_release+0x8>)
 801bc02:	f000 b949 	b.w	801be98 <__retarget_lock_release_recursive>
 801bc06:	bf00      	nop
 801bc08:	24003625 	.word	0x24003625

0801bc0c <__sinit>:
 801bc0c:	b510      	push	{r4, lr}
 801bc0e:	4604      	mov	r4, r0
 801bc10:	f7ff fff0 	bl	801bbf4 <__sfp_lock_acquire>
 801bc14:	6a23      	ldr	r3, [r4, #32]
 801bc16:	b11b      	cbz	r3, 801bc20 <__sinit+0x14>
 801bc18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bc1c:	f7ff bff0 	b.w	801bc00 <__sfp_lock_release>
 801bc20:	4b04      	ldr	r3, [pc, #16]	; (801bc34 <__sinit+0x28>)
 801bc22:	6223      	str	r3, [r4, #32]
 801bc24:	4b04      	ldr	r3, [pc, #16]	; (801bc38 <__sinit+0x2c>)
 801bc26:	681b      	ldr	r3, [r3, #0]
 801bc28:	2b00      	cmp	r3, #0
 801bc2a:	d1f5      	bne.n	801bc18 <__sinit+0xc>
 801bc2c:	f7ff ffc4 	bl	801bbb8 <global_stdio_init.part.0>
 801bc30:	e7f2      	b.n	801bc18 <__sinit+0xc>
 801bc32:	bf00      	nop
 801bc34:	0801bb79 	.word	0x0801bb79
 801bc38:	2400361c 	.word	0x2400361c

0801bc3c <_fwalk_sglue>:
 801bc3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bc40:	4607      	mov	r7, r0
 801bc42:	4688      	mov	r8, r1
 801bc44:	4614      	mov	r4, r2
 801bc46:	2600      	movs	r6, #0
 801bc48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801bc4c:	f1b9 0901 	subs.w	r9, r9, #1
 801bc50:	d505      	bpl.n	801bc5e <_fwalk_sglue+0x22>
 801bc52:	6824      	ldr	r4, [r4, #0]
 801bc54:	2c00      	cmp	r4, #0
 801bc56:	d1f7      	bne.n	801bc48 <_fwalk_sglue+0xc>
 801bc58:	4630      	mov	r0, r6
 801bc5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bc5e:	89ab      	ldrh	r3, [r5, #12]
 801bc60:	2b01      	cmp	r3, #1
 801bc62:	d907      	bls.n	801bc74 <_fwalk_sglue+0x38>
 801bc64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801bc68:	3301      	adds	r3, #1
 801bc6a:	d003      	beq.n	801bc74 <_fwalk_sglue+0x38>
 801bc6c:	4629      	mov	r1, r5
 801bc6e:	4638      	mov	r0, r7
 801bc70:	47c0      	blx	r8
 801bc72:	4306      	orrs	r6, r0
 801bc74:	3568      	adds	r5, #104	; 0x68
 801bc76:	e7e9      	b.n	801bc4c <_fwalk_sglue+0x10>

0801bc78 <siprintf>:
 801bc78:	b40e      	push	{r1, r2, r3}
 801bc7a:	b500      	push	{lr}
 801bc7c:	b09c      	sub	sp, #112	; 0x70
 801bc7e:	ab1d      	add	r3, sp, #116	; 0x74
 801bc80:	9002      	str	r0, [sp, #8]
 801bc82:	9006      	str	r0, [sp, #24]
 801bc84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801bc88:	4809      	ldr	r0, [pc, #36]	; (801bcb0 <siprintf+0x38>)
 801bc8a:	9107      	str	r1, [sp, #28]
 801bc8c:	9104      	str	r1, [sp, #16]
 801bc8e:	4909      	ldr	r1, [pc, #36]	; (801bcb4 <siprintf+0x3c>)
 801bc90:	f853 2b04 	ldr.w	r2, [r3], #4
 801bc94:	9105      	str	r1, [sp, #20]
 801bc96:	6800      	ldr	r0, [r0, #0]
 801bc98:	9301      	str	r3, [sp, #4]
 801bc9a:	a902      	add	r1, sp, #8
 801bc9c:	f002 fb6a 	bl	801e374 <_svfiprintf_r>
 801bca0:	9b02      	ldr	r3, [sp, #8]
 801bca2:	2200      	movs	r2, #0
 801bca4:	701a      	strb	r2, [r3, #0]
 801bca6:	b01c      	add	sp, #112	; 0x70
 801bca8:	f85d eb04 	ldr.w	lr, [sp], #4
 801bcac:	b003      	add	sp, #12
 801bcae:	4770      	bx	lr
 801bcb0:	24000158 	.word	0x24000158
 801bcb4:	ffff0208 	.word	0xffff0208

0801bcb8 <siscanf>:
 801bcb8:	b40e      	push	{r1, r2, r3}
 801bcba:	b510      	push	{r4, lr}
 801bcbc:	b09f      	sub	sp, #124	; 0x7c
 801bcbe:	ac21      	add	r4, sp, #132	; 0x84
 801bcc0:	f44f 7101 	mov.w	r1, #516	; 0x204
 801bcc4:	f854 2b04 	ldr.w	r2, [r4], #4
 801bcc8:	9201      	str	r2, [sp, #4]
 801bcca:	f8ad 101c 	strh.w	r1, [sp, #28]
 801bcce:	9004      	str	r0, [sp, #16]
 801bcd0:	9008      	str	r0, [sp, #32]
 801bcd2:	f7e4 fb7d 	bl	80003d0 <strlen>
 801bcd6:	4b0c      	ldr	r3, [pc, #48]	; (801bd08 <siscanf+0x50>)
 801bcd8:	9005      	str	r0, [sp, #20]
 801bcda:	9009      	str	r0, [sp, #36]	; 0x24
 801bcdc:	930d      	str	r3, [sp, #52]	; 0x34
 801bcde:	480b      	ldr	r0, [pc, #44]	; (801bd0c <siscanf+0x54>)
 801bce0:	9a01      	ldr	r2, [sp, #4]
 801bce2:	6800      	ldr	r0, [r0, #0]
 801bce4:	9403      	str	r4, [sp, #12]
 801bce6:	2300      	movs	r3, #0
 801bce8:	9311      	str	r3, [sp, #68]	; 0x44
 801bcea:	9316      	str	r3, [sp, #88]	; 0x58
 801bcec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bcf0:	f8ad 301e 	strh.w	r3, [sp, #30]
 801bcf4:	a904      	add	r1, sp, #16
 801bcf6:	4623      	mov	r3, r4
 801bcf8:	f002 fc94 	bl	801e624 <__ssvfiscanf_r>
 801bcfc:	b01f      	add	sp, #124	; 0x7c
 801bcfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bd02:	b003      	add	sp, #12
 801bd04:	4770      	bx	lr
 801bd06:	bf00      	nop
 801bd08:	0801bd33 	.word	0x0801bd33
 801bd0c:	24000158 	.word	0x24000158

0801bd10 <__sread>:
 801bd10:	b510      	push	{r4, lr}
 801bd12:	460c      	mov	r4, r1
 801bd14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bd18:	f000 f86e 	bl	801bdf8 <_read_r>
 801bd1c:	2800      	cmp	r0, #0
 801bd1e:	bfab      	itete	ge
 801bd20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801bd22:	89a3      	ldrhlt	r3, [r4, #12]
 801bd24:	181b      	addge	r3, r3, r0
 801bd26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801bd2a:	bfac      	ite	ge
 801bd2c:	6563      	strge	r3, [r4, #84]	; 0x54
 801bd2e:	81a3      	strhlt	r3, [r4, #12]
 801bd30:	bd10      	pop	{r4, pc}

0801bd32 <__seofread>:
 801bd32:	2000      	movs	r0, #0
 801bd34:	4770      	bx	lr

0801bd36 <__swrite>:
 801bd36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd3a:	461f      	mov	r7, r3
 801bd3c:	898b      	ldrh	r3, [r1, #12]
 801bd3e:	05db      	lsls	r3, r3, #23
 801bd40:	4605      	mov	r5, r0
 801bd42:	460c      	mov	r4, r1
 801bd44:	4616      	mov	r6, r2
 801bd46:	d505      	bpl.n	801bd54 <__swrite+0x1e>
 801bd48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bd4c:	2302      	movs	r3, #2
 801bd4e:	2200      	movs	r2, #0
 801bd50:	f000 f840 	bl	801bdd4 <_lseek_r>
 801bd54:	89a3      	ldrh	r3, [r4, #12]
 801bd56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bd5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801bd5e:	81a3      	strh	r3, [r4, #12]
 801bd60:	4632      	mov	r2, r6
 801bd62:	463b      	mov	r3, r7
 801bd64:	4628      	mov	r0, r5
 801bd66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bd6a:	f000 b857 	b.w	801be1c <_write_r>

0801bd6e <__sseek>:
 801bd6e:	b510      	push	{r4, lr}
 801bd70:	460c      	mov	r4, r1
 801bd72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bd76:	f000 f82d 	bl	801bdd4 <_lseek_r>
 801bd7a:	1c43      	adds	r3, r0, #1
 801bd7c:	89a3      	ldrh	r3, [r4, #12]
 801bd7e:	bf15      	itete	ne
 801bd80:	6560      	strne	r0, [r4, #84]	; 0x54
 801bd82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801bd86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801bd8a:	81a3      	strheq	r3, [r4, #12]
 801bd8c:	bf18      	it	ne
 801bd8e:	81a3      	strhne	r3, [r4, #12]
 801bd90:	bd10      	pop	{r4, pc}

0801bd92 <__sclose>:
 801bd92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bd96:	f000 b80d 	b.w	801bdb4 <_close_r>

0801bd9a <memset>:
 801bd9a:	4402      	add	r2, r0
 801bd9c:	4603      	mov	r3, r0
 801bd9e:	4293      	cmp	r3, r2
 801bda0:	d100      	bne.n	801bda4 <memset+0xa>
 801bda2:	4770      	bx	lr
 801bda4:	f803 1b01 	strb.w	r1, [r3], #1
 801bda8:	e7f9      	b.n	801bd9e <memset+0x4>
	...

0801bdac <_localeconv_r>:
 801bdac:	4800      	ldr	r0, [pc, #0]	; (801bdb0 <_localeconv_r+0x4>)
 801bdae:	4770      	bx	lr
 801bdb0:	2400024c 	.word	0x2400024c

0801bdb4 <_close_r>:
 801bdb4:	b538      	push	{r3, r4, r5, lr}
 801bdb6:	4d06      	ldr	r5, [pc, #24]	; (801bdd0 <_close_r+0x1c>)
 801bdb8:	2300      	movs	r3, #0
 801bdba:	4604      	mov	r4, r0
 801bdbc:	4608      	mov	r0, r1
 801bdbe:	602b      	str	r3, [r5, #0]
 801bdc0:	f7e8 f815 	bl	8003dee <_close>
 801bdc4:	1c43      	adds	r3, r0, #1
 801bdc6:	d102      	bne.n	801bdce <_close_r+0x1a>
 801bdc8:	682b      	ldr	r3, [r5, #0]
 801bdca:	b103      	cbz	r3, 801bdce <_close_r+0x1a>
 801bdcc:	6023      	str	r3, [r4, #0]
 801bdce:	bd38      	pop	{r3, r4, r5, pc}
 801bdd0:	24003620 	.word	0x24003620

0801bdd4 <_lseek_r>:
 801bdd4:	b538      	push	{r3, r4, r5, lr}
 801bdd6:	4d07      	ldr	r5, [pc, #28]	; (801bdf4 <_lseek_r+0x20>)
 801bdd8:	4604      	mov	r4, r0
 801bdda:	4608      	mov	r0, r1
 801bddc:	4611      	mov	r1, r2
 801bdde:	2200      	movs	r2, #0
 801bde0:	602a      	str	r2, [r5, #0]
 801bde2:	461a      	mov	r2, r3
 801bde4:	f7e8 f82a 	bl	8003e3c <_lseek>
 801bde8:	1c43      	adds	r3, r0, #1
 801bdea:	d102      	bne.n	801bdf2 <_lseek_r+0x1e>
 801bdec:	682b      	ldr	r3, [r5, #0]
 801bdee:	b103      	cbz	r3, 801bdf2 <_lseek_r+0x1e>
 801bdf0:	6023      	str	r3, [r4, #0]
 801bdf2:	bd38      	pop	{r3, r4, r5, pc}
 801bdf4:	24003620 	.word	0x24003620

0801bdf8 <_read_r>:
 801bdf8:	b538      	push	{r3, r4, r5, lr}
 801bdfa:	4d07      	ldr	r5, [pc, #28]	; (801be18 <_read_r+0x20>)
 801bdfc:	4604      	mov	r4, r0
 801bdfe:	4608      	mov	r0, r1
 801be00:	4611      	mov	r1, r2
 801be02:	2200      	movs	r2, #0
 801be04:	602a      	str	r2, [r5, #0]
 801be06:	461a      	mov	r2, r3
 801be08:	f7e7 ffb8 	bl	8003d7c <_read>
 801be0c:	1c43      	adds	r3, r0, #1
 801be0e:	d102      	bne.n	801be16 <_read_r+0x1e>
 801be10:	682b      	ldr	r3, [r5, #0]
 801be12:	b103      	cbz	r3, 801be16 <_read_r+0x1e>
 801be14:	6023      	str	r3, [r4, #0]
 801be16:	bd38      	pop	{r3, r4, r5, pc}
 801be18:	24003620 	.word	0x24003620

0801be1c <_write_r>:
 801be1c:	b538      	push	{r3, r4, r5, lr}
 801be1e:	4d07      	ldr	r5, [pc, #28]	; (801be3c <_write_r+0x20>)
 801be20:	4604      	mov	r4, r0
 801be22:	4608      	mov	r0, r1
 801be24:	4611      	mov	r1, r2
 801be26:	2200      	movs	r2, #0
 801be28:	602a      	str	r2, [r5, #0]
 801be2a:	461a      	mov	r2, r3
 801be2c:	f7e7 ffc3 	bl	8003db6 <_write>
 801be30:	1c43      	adds	r3, r0, #1
 801be32:	d102      	bne.n	801be3a <_write_r+0x1e>
 801be34:	682b      	ldr	r3, [r5, #0]
 801be36:	b103      	cbz	r3, 801be3a <_write_r+0x1e>
 801be38:	6023      	str	r3, [r4, #0]
 801be3a:	bd38      	pop	{r3, r4, r5, pc}
 801be3c:	24003620 	.word	0x24003620

0801be40 <__errno>:
 801be40:	4b01      	ldr	r3, [pc, #4]	; (801be48 <__errno+0x8>)
 801be42:	6818      	ldr	r0, [r3, #0]
 801be44:	4770      	bx	lr
 801be46:	bf00      	nop
 801be48:	24000158 	.word	0x24000158

0801be4c <__libc_init_array>:
 801be4c:	b570      	push	{r4, r5, r6, lr}
 801be4e:	4d0d      	ldr	r5, [pc, #52]	; (801be84 <__libc_init_array+0x38>)
 801be50:	4c0d      	ldr	r4, [pc, #52]	; (801be88 <__libc_init_array+0x3c>)
 801be52:	1b64      	subs	r4, r4, r5
 801be54:	10a4      	asrs	r4, r4, #2
 801be56:	2600      	movs	r6, #0
 801be58:	42a6      	cmp	r6, r4
 801be5a:	d109      	bne.n	801be70 <__libc_init_array+0x24>
 801be5c:	4d0b      	ldr	r5, [pc, #44]	; (801be8c <__libc_init_array+0x40>)
 801be5e:	4c0c      	ldr	r4, [pc, #48]	; (801be90 <__libc_init_array+0x44>)
 801be60:	f003 ff1e 	bl	801fca0 <_init>
 801be64:	1b64      	subs	r4, r4, r5
 801be66:	10a4      	asrs	r4, r4, #2
 801be68:	2600      	movs	r6, #0
 801be6a:	42a6      	cmp	r6, r4
 801be6c:	d105      	bne.n	801be7a <__libc_init_array+0x2e>
 801be6e:	bd70      	pop	{r4, r5, r6, pc}
 801be70:	f855 3b04 	ldr.w	r3, [r5], #4
 801be74:	4798      	blx	r3
 801be76:	3601      	adds	r6, #1
 801be78:	e7ee      	b.n	801be58 <__libc_init_array+0xc>
 801be7a:	f855 3b04 	ldr.w	r3, [r5], #4
 801be7e:	4798      	blx	r3
 801be80:	3601      	adds	r6, #1
 801be82:	e7f2      	b.n	801be6a <__libc_init_array+0x1e>
 801be84:	08020854 	.word	0x08020854
 801be88:	08020854 	.word	0x08020854
 801be8c:	08020854 	.word	0x08020854
 801be90:	08020858 	.word	0x08020858

0801be94 <__retarget_lock_init_recursive>:
 801be94:	4770      	bx	lr

0801be96 <__retarget_lock_acquire_recursive>:
 801be96:	4770      	bx	lr

0801be98 <__retarget_lock_release_recursive>:
 801be98:	4770      	bx	lr

0801be9a <strcpy>:
 801be9a:	4603      	mov	r3, r0
 801be9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bea0:	f803 2b01 	strb.w	r2, [r3], #1
 801bea4:	2a00      	cmp	r2, #0
 801bea6:	d1f9      	bne.n	801be9c <strcpy+0x2>
 801bea8:	4770      	bx	lr

0801beaa <memcpy>:
 801beaa:	440a      	add	r2, r1
 801beac:	4291      	cmp	r1, r2
 801beae:	f100 33ff 	add.w	r3, r0, #4294967295
 801beb2:	d100      	bne.n	801beb6 <memcpy+0xc>
 801beb4:	4770      	bx	lr
 801beb6:	b510      	push	{r4, lr}
 801beb8:	f811 4b01 	ldrb.w	r4, [r1], #1
 801bebc:	f803 4f01 	strb.w	r4, [r3, #1]!
 801bec0:	4291      	cmp	r1, r2
 801bec2:	d1f9      	bne.n	801beb8 <memcpy+0xe>
 801bec4:	bd10      	pop	{r4, pc}
	...

0801bec8 <nanf>:
 801bec8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801bed0 <nanf+0x8>
 801becc:	4770      	bx	lr
 801bece:	bf00      	nop
 801bed0:	7fc00000 	.word	0x7fc00000

0801bed4 <quorem>:
 801bed4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bed8:	6903      	ldr	r3, [r0, #16]
 801beda:	690c      	ldr	r4, [r1, #16]
 801bedc:	42a3      	cmp	r3, r4
 801bede:	4607      	mov	r7, r0
 801bee0:	db7e      	blt.n	801bfe0 <quorem+0x10c>
 801bee2:	3c01      	subs	r4, #1
 801bee4:	f101 0814 	add.w	r8, r1, #20
 801bee8:	f100 0514 	add.w	r5, r0, #20
 801beec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801bef0:	9301      	str	r3, [sp, #4]
 801bef2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801bef6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801befa:	3301      	adds	r3, #1
 801befc:	429a      	cmp	r2, r3
 801befe:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801bf02:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801bf06:	fbb2 f6f3 	udiv	r6, r2, r3
 801bf0a:	d331      	bcc.n	801bf70 <quorem+0x9c>
 801bf0c:	f04f 0e00 	mov.w	lr, #0
 801bf10:	4640      	mov	r0, r8
 801bf12:	46ac      	mov	ip, r5
 801bf14:	46f2      	mov	sl, lr
 801bf16:	f850 2b04 	ldr.w	r2, [r0], #4
 801bf1a:	b293      	uxth	r3, r2
 801bf1c:	fb06 e303 	mla	r3, r6, r3, lr
 801bf20:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801bf24:	0c1a      	lsrs	r2, r3, #16
 801bf26:	b29b      	uxth	r3, r3
 801bf28:	ebaa 0303 	sub.w	r3, sl, r3
 801bf2c:	f8dc a000 	ldr.w	sl, [ip]
 801bf30:	fa13 f38a 	uxtah	r3, r3, sl
 801bf34:	fb06 220e 	mla	r2, r6, lr, r2
 801bf38:	9300      	str	r3, [sp, #0]
 801bf3a:	9b00      	ldr	r3, [sp, #0]
 801bf3c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801bf40:	b292      	uxth	r2, r2
 801bf42:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801bf46:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801bf4a:	f8bd 3000 	ldrh.w	r3, [sp]
 801bf4e:	4581      	cmp	r9, r0
 801bf50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801bf54:	f84c 3b04 	str.w	r3, [ip], #4
 801bf58:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801bf5c:	d2db      	bcs.n	801bf16 <quorem+0x42>
 801bf5e:	f855 300b 	ldr.w	r3, [r5, fp]
 801bf62:	b92b      	cbnz	r3, 801bf70 <quorem+0x9c>
 801bf64:	9b01      	ldr	r3, [sp, #4]
 801bf66:	3b04      	subs	r3, #4
 801bf68:	429d      	cmp	r5, r3
 801bf6a:	461a      	mov	r2, r3
 801bf6c:	d32c      	bcc.n	801bfc8 <quorem+0xf4>
 801bf6e:	613c      	str	r4, [r7, #16]
 801bf70:	4638      	mov	r0, r7
 801bf72:	f001 f96b 	bl	801d24c <__mcmp>
 801bf76:	2800      	cmp	r0, #0
 801bf78:	db22      	blt.n	801bfc0 <quorem+0xec>
 801bf7a:	3601      	adds	r6, #1
 801bf7c:	4629      	mov	r1, r5
 801bf7e:	2000      	movs	r0, #0
 801bf80:	f858 2b04 	ldr.w	r2, [r8], #4
 801bf84:	f8d1 c000 	ldr.w	ip, [r1]
 801bf88:	b293      	uxth	r3, r2
 801bf8a:	1ac3      	subs	r3, r0, r3
 801bf8c:	0c12      	lsrs	r2, r2, #16
 801bf8e:	fa13 f38c 	uxtah	r3, r3, ip
 801bf92:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801bf96:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801bf9a:	b29b      	uxth	r3, r3
 801bf9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801bfa0:	45c1      	cmp	r9, r8
 801bfa2:	f841 3b04 	str.w	r3, [r1], #4
 801bfa6:	ea4f 4022 	mov.w	r0, r2, asr #16
 801bfaa:	d2e9      	bcs.n	801bf80 <quorem+0xac>
 801bfac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801bfb0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801bfb4:	b922      	cbnz	r2, 801bfc0 <quorem+0xec>
 801bfb6:	3b04      	subs	r3, #4
 801bfb8:	429d      	cmp	r5, r3
 801bfba:	461a      	mov	r2, r3
 801bfbc:	d30a      	bcc.n	801bfd4 <quorem+0x100>
 801bfbe:	613c      	str	r4, [r7, #16]
 801bfc0:	4630      	mov	r0, r6
 801bfc2:	b003      	add	sp, #12
 801bfc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bfc8:	6812      	ldr	r2, [r2, #0]
 801bfca:	3b04      	subs	r3, #4
 801bfcc:	2a00      	cmp	r2, #0
 801bfce:	d1ce      	bne.n	801bf6e <quorem+0x9a>
 801bfd0:	3c01      	subs	r4, #1
 801bfd2:	e7c9      	b.n	801bf68 <quorem+0x94>
 801bfd4:	6812      	ldr	r2, [r2, #0]
 801bfd6:	3b04      	subs	r3, #4
 801bfd8:	2a00      	cmp	r2, #0
 801bfda:	d1f0      	bne.n	801bfbe <quorem+0xea>
 801bfdc:	3c01      	subs	r4, #1
 801bfde:	e7eb      	b.n	801bfb8 <quorem+0xe4>
 801bfe0:	2000      	movs	r0, #0
 801bfe2:	e7ee      	b.n	801bfc2 <quorem+0xee>
 801bfe4:	0000      	movs	r0, r0
	...

0801bfe8 <_dtoa_r>:
 801bfe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfec:	ed2d 8b02 	vpush	{d8}
 801bff0:	69c5      	ldr	r5, [r0, #28]
 801bff2:	b091      	sub	sp, #68	; 0x44
 801bff4:	ed8d 0b02 	vstr	d0, [sp, #8]
 801bff8:	ec59 8b10 	vmov	r8, r9, d0
 801bffc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801bffe:	9106      	str	r1, [sp, #24]
 801c000:	4606      	mov	r6, r0
 801c002:	9208      	str	r2, [sp, #32]
 801c004:	930c      	str	r3, [sp, #48]	; 0x30
 801c006:	b975      	cbnz	r5, 801c026 <_dtoa_r+0x3e>
 801c008:	2010      	movs	r0, #16
 801c00a:	f000 fda5 	bl	801cb58 <malloc>
 801c00e:	4602      	mov	r2, r0
 801c010:	61f0      	str	r0, [r6, #28]
 801c012:	b920      	cbnz	r0, 801c01e <_dtoa_r+0x36>
 801c014:	4ba6      	ldr	r3, [pc, #664]	; (801c2b0 <_dtoa_r+0x2c8>)
 801c016:	21ef      	movs	r1, #239	; 0xef
 801c018:	48a6      	ldr	r0, [pc, #664]	; (801c2b4 <_dtoa_r+0x2cc>)
 801c01a:	f002 ff31 	bl	801ee80 <__assert_func>
 801c01e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801c022:	6005      	str	r5, [r0, #0]
 801c024:	60c5      	str	r5, [r0, #12]
 801c026:	69f3      	ldr	r3, [r6, #28]
 801c028:	6819      	ldr	r1, [r3, #0]
 801c02a:	b151      	cbz	r1, 801c042 <_dtoa_r+0x5a>
 801c02c:	685a      	ldr	r2, [r3, #4]
 801c02e:	604a      	str	r2, [r1, #4]
 801c030:	2301      	movs	r3, #1
 801c032:	4093      	lsls	r3, r2
 801c034:	608b      	str	r3, [r1, #8]
 801c036:	4630      	mov	r0, r6
 801c038:	f000 fe82 	bl	801cd40 <_Bfree>
 801c03c:	69f3      	ldr	r3, [r6, #28]
 801c03e:	2200      	movs	r2, #0
 801c040:	601a      	str	r2, [r3, #0]
 801c042:	f1b9 0300 	subs.w	r3, r9, #0
 801c046:	bfbb      	ittet	lt
 801c048:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801c04c:	9303      	strlt	r3, [sp, #12]
 801c04e:	2300      	movge	r3, #0
 801c050:	2201      	movlt	r2, #1
 801c052:	bfac      	ite	ge
 801c054:	6023      	strge	r3, [r4, #0]
 801c056:	6022      	strlt	r2, [r4, #0]
 801c058:	4b97      	ldr	r3, [pc, #604]	; (801c2b8 <_dtoa_r+0x2d0>)
 801c05a:	9c03      	ldr	r4, [sp, #12]
 801c05c:	43a3      	bics	r3, r4
 801c05e:	d11c      	bne.n	801c09a <_dtoa_r+0xb2>
 801c060:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c062:	f242 730f 	movw	r3, #9999	; 0x270f
 801c066:	6013      	str	r3, [r2, #0]
 801c068:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801c06c:	ea53 0308 	orrs.w	r3, r3, r8
 801c070:	f000 84fb 	beq.w	801ca6a <_dtoa_r+0xa82>
 801c074:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c076:	b963      	cbnz	r3, 801c092 <_dtoa_r+0xaa>
 801c078:	4b90      	ldr	r3, [pc, #576]	; (801c2bc <_dtoa_r+0x2d4>)
 801c07a:	e020      	b.n	801c0be <_dtoa_r+0xd6>
 801c07c:	4b90      	ldr	r3, [pc, #576]	; (801c2c0 <_dtoa_r+0x2d8>)
 801c07e:	9301      	str	r3, [sp, #4]
 801c080:	3308      	adds	r3, #8
 801c082:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801c084:	6013      	str	r3, [r2, #0]
 801c086:	9801      	ldr	r0, [sp, #4]
 801c088:	b011      	add	sp, #68	; 0x44
 801c08a:	ecbd 8b02 	vpop	{d8}
 801c08e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c092:	4b8a      	ldr	r3, [pc, #552]	; (801c2bc <_dtoa_r+0x2d4>)
 801c094:	9301      	str	r3, [sp, #4]
 801c096:	3303      	adds	r3, #3
 801c098:	e7f3      	b.n	801c082 <_dtoa_r+0x9a>
 801c09a:	ed9d 8b02 	vldr	d8, [sp, #8]
 801c09e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801c0a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c0a6:	d10c      	bne.n	801c0c2 <_dtoa_r+0xda>
 801c0a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c0aa:	2301      	movs	r3, #1
 801c0ac:	6013      	str	r3, [r2, #0]
 801c0ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c0b0:	2b00      	cmp	r3, #0
 801c0b2:	f000 84d7 	beq.w	801ca64 <_dtoa_r+0xa7c>
 801c0b6:	4b83      	ldr	r3, [pc, #524]	; (801c2c4 <_dtoa_r+0x2dc>)
 801c0b8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801c0ba:	6013      	str	r3, [r2, #0]
 801c0bc:	3b01      	subs	r3, #1
 801c0be:	9301      	str	r3, [sp, #4]
 801c0c0:	e7e1      	b.n	801c086 <_dtoa_r+0x9e>
 801c0c2:	aa0e      	add	r2, sp, #56	; 0x38
 801c0c4:	a90f      	add	r1, sp, #60	; 0x3c
 801c0c6:	4630      	mov	r0, r6
 801c0c8:	eeb0 0b48 	vmov.f64	d0, d8
 801c0cc:	f001 f9d4 	bl	801d478 <__d2b>
 801c0d0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801c0d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c0d6:	4605      	mov	r5, r0
 801c0d8:	2b00      	cmp	r3, #0
 801c0da:	d046      	beq.n	801c16a <_dtoa_r+0x182>
 801c0dc:	eeb0 7b48 	vmov.f64	d7, d8
 801c0e0:	ee18 1a90 	vmov	r1, s17
 801c0e4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801c0e8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801c0ec:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801c0f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801c0f4:	2000      	movs	r0, #0
 801c0f6:	ee07 1a90 	vmov	s15, r1
 801c0fa:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 801c0fe:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801c298 <_dtoa_r+0x2b0>
 801c102:	ee37 7b46 	vsub.f64	d7, d7, d6
 801c106:	ed9f 6b66 	vldr	d6, [pc, #408]	; 801c2a0 <_dtoa_r+0x2b8>
 801c10a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801c10e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801c2a8 <_dtoa_r+0x2c0>
 801c112:	ee07 3a90 	vmov	s15, r3
 801c116:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801c11a:	eeb0 7b46 	vmov.f64	d7, d6
 801c11e:	eea4 7b05 	vfma.f64	d7, d4, d5
 801c122:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801c126:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801c12a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c12e:	ee16 ba90 	vmov	fp, s13
 801c132:	9009      	str	r0, [sp, #36]	; 0x24
 801c134:	d508      	bpl.n	801c148 <_dtoa_r+0x160>
 801c136:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801c13a:	eeb4 6b47 	vcmp.f64	d6, d7
 801c13e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c142:	bf18      	it	ne
 801c144:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801c148:	f1bb 0f16 	cmp.w	fp, #22
 801c14c:	d82b      	bhi.n	801c1a6 <_dtoa_r+0x1be>
 801c14e:	495e      	ldr	r1, [pc, #376]	; (801c2c8 <_dtoa_r+0x2e0>)
 801c150:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 801c154:	ed91 7b00 	vldr	d7, [r1]
 801c158:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801c15c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c160:	d501      	bpl.n	801c166 <_dtoa_r+0x17e>
 801c162:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c166:	2100      	movs	r1, #0
 801c168:	e01e      	b.n	801c1a8 <_dtoa_r+0x1c0>
 801c16a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c16c:	4413      	add	r3, r2
 801c16e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 801c172:	2920      	cmp	r1, #32
 801c174:	bfc1      	itttt	gt
 801c176:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 801c17a:	408c      	lslgt	r4, r1
 801c17c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 801c180:	fa28 f101 	lsrgt.w	r1, r8, r1
 801c184:	bfd6      	itet	le
 801c186:	f1c1 0120 	rsble	r1, r1, #32
 801c18a:	4321      	orrgt	r1, r4
 801c18c:	fa08 f101 	lslle.w	r1, r8, r1
 801c190:	ee07 1a90 	vmov	s15, r1
 801c194:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801c198:	3b01      	subs	r3, #1
 801c19a:	ee17 1a90 	vmov	r1, s15
 801c19e:	2001      	movs	r0, #1
 801c1a0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801c1a4:	e7a7      	b.n	801c0f6 <_dtoa_r+0x10e>
 801c1a6:	2101      	movs	r1, #1
 801c1a8:	1ad2      	subs	r2, r2, r3
 801c1aa:	1e53      	subs	r3, r2, #1
 801c1ac:	9305      	str	r3, [sp, #20]
 801c1ae:	bf45      	ittet	mi
 801c1b0:	f1c2 0301 	rsbmi	r3, r2, #1
 801c1b4:	9304      	strmi	r3, [sp, #16]
 801c1b6:	2300      	movpl	r3, #0
 801c1b8:	2300      	movmi	r3, #0
 801c1ba:	bf4c      	ite	mi
 801c1bc:	9305      	strmi	r3, [sp, #20]
 801c1be:	9304      	strpl	r3, [sp, #16]
 801c1c0:	f1bb 0f00 	cmp.w	fp, #0
 801c1c4:	910b      	str	r1, [sp, #44]	; 0x2c
 801c1c6:	db18      	blt.n	801c1fa <_dtoa_r+0x212>
 801c1c8:	9b05      	ldr	r3, [sp, #20]
 801c1ca:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801c1ce:	445b      	add	r3, fp
 801c1d0:	9305      	str	r3, [sp, #20]
 801c1d2:	2300      	movs	r3, #0
 801c1d4:	9a06      	ldr	r2, [sp, #24]
 801c1d6:	2a09      	cmp	r2, #9
 801c1d8:	d848      	bhi.n	801c26c <_dtoa_r+0x284>
 801c1da:	2a05      	cmp	r2, #5
 801c1dc:	bfc4      	itt	gt
 801c1de:	3a04      	subgt	r2, #4
 801c1e0:	9206      	strgt	r2, [sp, #24]
 801c1e2:	9a06      	ldr	r2, [sp, #24]
 801c1e4:	f1a2 0202 	sub.w	r2, r2, #2
 801c1e8:	bfcc      	ite	gt
 801c1ea:	2400      	movgt	r4, #0
 801c1ec:	2401      	movle	r4, #1
 801c1ee:	2a03      	cmp	r2, #3
 801c1f0:	d847      	bhi.n	801c282 <_dtoa_r+0x29a>
 801c1f2:	e8df f002 	tbb	[pc, r2]
 801c1f6:	2d0b      	.short	0x2d0b
 801c1f8:	392b      	.short	0x392b
 801c1fa:	9b04      	ldr	r3, [sp, #16]
 801c1fc:	2200      	movs	r2, #0
 801c1fe:	eba3 030b 	sub.w	r3, r3, fp
 801c202:	9304      	str	r3, [sp, #16]
 801c204:	920a      	str	r2, [sp, #40]	; 0x28
 801c206:	f1cb 0300 	rsb	r3, fp, #0
 801c20a:	e7e3      	b.n	801c1d4 <_dtoa_r+0x1ec>
 801c20c:	2200      	movs	r2, #0
 801c20e:	9207      	str	r2, [sp, #28]
 801c210:	9a08      	ldr	r2, [sp, #32]
 801c212:	2a00      	cmp	r2, #0
 801c214:	dc38      	bgt.n	801c288 <_dtoa_r+0x2a0>
 801c216:	f04f 0a01 	mov.w	sl, #1
 801c21a:	46d1      	mov	r9, sl
 801c21c:	4652      	mov	r2, sl
 801c21e:	f8cd a020 	str.w	sl, [sp, #32]
 801c222:	69f7      	ldr	r7, [r6, #28]
 801c224:	2100      	movs	r1, #0
 801c226:	2004      	movs	r0, #4
 801c228:	f100 0c14 	add.w	ip, r0, #20
 801c22c:	4594      	cmp	ip, r2
 801c22e:	d930      	bls.n	801c292 <_dtoa_r+0x2aa>
 801c230:	6079      	str	r1, [r7, #4]
 801c232:	4630      	mov	r0, r6
 801c234:	930d      	str	r3, [sp, #52]	; 0x34
 801c236:	f000 fd43 	bl	801ccc0 <_Balloc>
 801c23a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c23c:	9001      	str	r0, [sp, #4]
 801c23e:	4602      	mov	r2, r0
 801c240:	2800      	cmp	r0, #0
 801c242:	d145      	bne.n	801c2d0 <_dtoa_r+0x2e8>
 801c244:	4b21      	ldr	r3, [pc, #132]	; (801c2cc <_dtoa_r+0x2e4>)
 801c246:	f240 11af 	movw	r1, #431	; 0x1af
 801c24a:	e6e5      	b.n	801c018 <_dtoa_r+0x30>
 801c24c:	2201      	movs	r2, #1
 801c24e:	e7de      	b.n	801c20e <_dtoa_r+0x226>
 801c250:	2200      	movs	r2, #0
 801c252:	9207      	str	r2, [sp, #28]
 801c254:	9a08      	ldr	r2, [sp, #32]
 801c256:	eb0b 0a02 	add.w	sl, fp, r2
 801c25a:	f10a 0901 	add.w	r9, sl, #1
 801c25e:	464a      	mov	r2, r9
 801c260:	2a01      	cmp	r2, #1
 801c262:	bfb8      	it	lt
 801c264:	2201      	movlt	r2, #1
 801c266:	e7dc      	b.n	801c222 <_dtoa_r+0x23a>
 801c268:	2201      	movs	r2, #1
 801c26a:	e7f2      	b.n	801c252 <_dtoa_r+0x26a>
 801c26c:	2401      	movs	r4, #1
 801c26e:	2200      	movs	r2, #0
 801c270:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801c274:	f04f 3aff 	mov.w	sl, #4294967295
 801c278:	2100      	movs	r1, #0
 801c27a:	46d1      	mov	r9, sl
 801c27c:	2212      	movs	r2, #18
 801c27e:	9108      	str	r1, [sp, #32]
 801c280:	e7cf      	b.n	801c222 <_dtoa_r+0x23a>
 801c282:	2201      	movs	r2, #1
 801c284:	9207      	str	r2, [sp, #28]
 801c286:	e7f5      	b.n	801c274 <_dtoa_r+0x28c>
 801c288:	f8dd a020 	ldr.w	sl, [sp, #32]
 801c28c:	46d1      	mov	r9, sl
 801c28e:	4652      	mov	r2, sl
 801c290:	e7c7      	b.n	801c222 <_dtoa_r+0x23a>
 801c292:	3101      	adds	r1, #1
 801c294:	0040      	lsls	r0, r0, #1
 801c296:	e7c7      	b.n	801c228 <_dtoa_r+0x240>
 801c298:	636f4361 	.word	0x636f4361
 801c29c:	3fd287a7 	.word	0x3fd287a7
 801c2a0:	8b60c8b3 	.word	0x8b60c8b3
 801c2a4:	3fc68a28 	.word	0x3fc68a28
 801c2a8:	509f79fb 	.word	0x509f79fb
 801c2ac:	3fd34413 	.word	0x3fd34413
 801c2b0:	0802044c 	.word	0x0802044c
 801c2b4:	08020463 	.word	0x08020463
 801c2b8:	7ff00000 	.word	0x7ff00000
 801c2bc:	08020448 	.word	0x08020448
 801c2c0:	0802043f 	.word	0x0802043f
 801c2c4:	080207a1 	.word	0x080207a1
 801c2c8:	08020550 	.word	0x08020550
 801c2cc:	080204bb 	.word	0x080204bb
 801c2d0:	69f2      	ldr	r2, [r6, #28]
 801c2d2:	9901      	ldr	r1, [sp, #4]
 801c2d4:	6011      	str	r1, [r2, #0]
 801c2d6:	f1b9 0f0e 	cmp.w	r9, #14
 801c2da:	d86c      	bhi.n	801c3b6 <_dtoa_r+0x3ce>
 801c2dc:	2c00      	cmp	r4, #0
 801c2de:	d06a      	beq.n	801c3b6 <_dtoa_r+0x3ce>
 801c2e0:	f1bb 0f00 	cmp.w	fp, #0
 801c2e4:	f340 80a0 	ble.w	801c428 <_dtoa_r+0x440>
 801c2e8:	4ac1      	ldr	r2, [pc, #772]	; (801c5f0 <_dtoa_r+0x608>)
 801c2ea:	f00b 010f 	and.w	r1, fp, #15
 801c2ee:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801c2f2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801c2f6:	ed92 7b00 	vldr	d7, [r2]
 801c2fa:	ea4f 122b 	mov.w	r2, fp, asr #4
 801c2fe:	f000 8087 	beq.w	801c410 <_dtoa_r+0x428>
 801c302:	49bc      	ldr	r1, [pc, #752]	; (801c5f4 <_dtoa_r+0x60c>)
 801c304:	ed91 6b08 	vldr	d6, [r1, #32]
 801c308:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801c30c:	ed8d 6b02 	vstr	d6, [sp, #8]
 801c310:	f002 020f 	and.w	r2, r2, #15
 801c314:	2103      	movs	r1, #3
 801c316:	48b7      	ldr	r0, [pc, #732]	; (801c5f4 <_dtoa_r+0x60c>)
 801c318:	2a00      	cmp	r2, #0
 801c31a:	d17b      	bne.n	801c414 <_dtoa_r+0x42c>
 801c31c:	ed9d 6b02 	vldr	d6, [sp, #8]
 801c320:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801c324:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c328:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c32a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c32e:	2a00      	cmp	r2, #0
 801c330:	f000 80a0 	beq.w	801c474 <_dtoa_r+0x48c>
 801c334:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801c338:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801c33c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c340:	f140 8098 	bpl.w	801c474 <_dtoa_r+0x48c>
 801c344:	f1b9 0f00 	cmp.w	r9, #0
 801c348:	f000 8094 	beq.w	801c474 <_dtoa_r+0x48c>
 801c34c:	f1ba 0f00 	cmp.w	sl, #0
 801c350:	dd2f      	ble.n	801c3b2 <_dtoa_r+0x3ca>
 801c352:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801c356:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c35a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c35e:	f10b 32ff 	add.w	r2, fp, #4294967295
 801c362:	3101      	adds	r1, #1
 801c364:	4654      	mov	r4, sl
 801c366:	ed9d 6b02 	vldr	d6, [sp, #8]
 801c36a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801c36e:	ee07 1a90 	vmov	s15, r1
 801c372:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801c376:	eea7 5b06 	vfma.f64	d5, d7, d6
 801c37a:	ee15 7a90 	vmov	r7, s11
 801c37e:	ec51 0b15 	vmov	r0, r1, d5
 801c382:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 801c386:	2c00      	cmp	r4, #0
 801c388:	d177      	bne.n	801c47a <_dtoa_r+0x492>
 801c38a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801c38e:	ee36 6b47 	vsub.f64	d6, d6, d7
 801c392:	ec41 0b17 	vmov	d7, r0, r1
 801c396:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c39a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c39e:	f300 826a 	bgt.w	801c876 <_dtoa_r+0x88e>
 801c3a2:	eeb1 7b47 	vneg.f64	d7, d7
 801c3a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c3aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c3ae:	f100 8260 	bmi.w	801c872 <_dtoa_r+0x88a>
 801c3b2:	ed8d 8b02 	vstr	d8, [sp, #8]
 801c3b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c3b8:	2a00      	cmp	r2, #0
 801c3ba:	f2c0 811d 	blt.w	801c5f8 <_dtoa_r+0x610>
 801c3be:	f1bb 0f0e 	cmp.w	fp, #14
 801c3c2:	f300 8119 	bgt.w	801c5f8 <_dtoa_r+0x610>
 801c3c6:	4b8a      	ldr	r3, [pc, #552]	; (801c5f0 <_dtoa_r+0x608>)
 801c3c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801c3cc:	ed93 6b00 	vldr	d6, [r3]
 801c3d0:	9b08      	ldr	r3, [sp, #32]
 801c3d2:	2b00      	cmp	r3, #0
 801c3d4:	f280 80b7 	bge.w	801c546 <_dtoa_r+0x55e>
 801c3d8:	f1b9 0f00 	cmp.w	r9, #0
 801c3dc:	f300 80b3 	bgt.w	801c546 <_dtoa_r+0x55e>
 801c3e0:	f040 8246 	bne.w	801c870 <_dtoa_r+0x888>
 801c3e4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801c3e8:	ee26 6b07 	vmul.f64	d6, d6, d7
 801c3ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c3f0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c3f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c3f8:	464c      	mov	r4, r9
 801c3fa:	464f      	mov	r7, r9
 801c3fc:	f280 821c 	bge.w	801c838 <_dtoa_r+0x850>
 801c400:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c404:	2331      	movs	r3, #49	; 0x31
 801c406:	f808 3b01 	strb.w	r3, [r8], #1
 801c40a:	f10b 0b01 	add.w	fp, fp, #1
 801c40e:	e218      	b.n	801c842 <_dtoa_r+0x85a>
 801c410:	2102      	movs	r1, #2
 801c412:	e780      	b.n	801c316 <_dtoa_r+0x32e>
 801c414:	07d4      	lsls	r4, r2, #31
 801c416:	d504      	bpl.n	801c422 <_dtoa_r+0x43a>
 801c418:	ed90 6b00 	vldr	d6, [r0]
 801c41c:	3101      	adds	r1, #1
 801c41e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c422:	1052      	asrs	r2, r2, #1
 801c424:	3008      	adds	r0, #8
 801c426:	e777      	b.n	801c318 <_dtoa_r+0x330>
 801c428:	d022      	beq.n	801c470 <_dtoa_r+0x488>
 801c42a:	f1cb 0200 	rsb	r2, fp, #0
 801c42e:	4970      	ldr	r1, [pc, #448]	; (801c5f0 <_dtoa_r+0x608>)
 801c430:	f002 000f 	and.w	r0, r2, #15
 801c434:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801c438:	ed91 7b00 	vldr	d7, [r1]
 801c43c:	ee28 7b07 	vmul.f64	d7, d8, d7
 801c440:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c444:	486b      	ldr	r0, [pc, #428]	; (801c5f4 <_dtoa_r+0x60c>)
 801c446:	1112      	asrs	r2, r2, #4
 801c448:	2400      	movs	r4, #0
 801c44a:	2102      	movs	r1, #2
 801c44c:	b92a      	cbnz	r2, 801c45a <_dtoa_r+0x472>
 801c44e:	2c00      	cmp	r4, #0
 801c450:	f43f af6a 	beq.w	801c328 <_dtoa_r+0x340>
 801c454:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c458:	e766      	b.n	801c328 <_dtoa_r+0x340>
 801c45a:	07d7      	lsls	r7, r2, #31
 801c45c:	d505      	bpl.n	801c46a <_dtoa_r+0x482>
 801c45e:	ed90 6b00 	vldr	d6, [r0]
 801c462:	3101      	adds	r1, #1
 801c464:	2401      	movs	r4, #1
 801c466:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c46a:	1052      	asrs	r2, r2, #1
 801c46c:	3008      	adds	r0, #8
 801c46e:	e7ed      	b.n	801c44c <_dtoa_r+0x464>
 801c470:	2102      	movs	r1, #2
 801c472:	e759      	b.n	801c328 <_dtoa_r+0x340>
 801c474:	465a      	mov	r2, fp
 801c476:	464c      	mov	r4, r9
 801c478:	e775      	b.n	801c366 <_dtoa_r+0x37e>
 801c47a:	ec41 0b17 	vmov	d7, r0, r1
 801c47e:	495c      	ldr	r1, [pc, #368]	; (801c5f0 <_dtoa_r+0x608>)
 801c480:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 801c484:	ed11 4b02 	vldr	d4, [r1, #-8]
 801c488:	9901      	ldr	r1, [sp, #4]
 801c48a:	440c      	add	r4, r1
 801c48c:	9907      	ldr	r1, [sp, #28]
 801c48e:	b351      	cbz	r1, 801c4e6 <_dtoa_r+0x4fe>
 801c490:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801c494:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801c498:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c49c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801c4a0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801c4a4:	ee35 7b47 	vsub.f64	d7, d5, d7
 801c4a8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801c4ac:	ee14 1a90 	vmov	r1, s9
 801c4b0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801c4b4:	3130      	adds	r1, #48	; 0x30
 801c4b6:	ee36 6b45 	vsub.f64	d6, d6, d5
 801c4ba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c4be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4c2:	f808 1b01 	strb.w	r1, [r8], #1
 801c4c6:	d439      	bmi.n	801c53c <_dtoa_r+0x554>
 801c4c8:	ee32 5b46 	vsub.f64	d5, d2, d6
 801c4cc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801c4d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4d4:	d472      	bmi.n	801c5bc <_dtoa_r+0x5d4>
 801c4d6:	45a0      	cmp	r8, r4
 801c4d8:	f43f af6b 	beq.w	801c3b2 <_dtoa_r+0x3ca>
 801c4dc:	ee27 7b03 	vmul.f64	d7, d7, d3
 801c4e0:	ee26 6b03 	vmul.f64	d6, d6, d3
 801c4e4:	e7e0      	b.n	801c4a8 <_dtoa_r+0x4c0>
 801c4e6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c4ea:	ee27 7b04 	vmul.f64	d7, d7, d4
 801c4ee:	4620      	mov	r0, r4
 801c4f0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801c4f4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801c4f8:	ee14 1a90 	vmov	r1, s9
 801c4fc:	3130      	adds	r1, #48	; 0x30
 801c4fe:	f808 1b01 	strb.w	r1, [r8], #1
 801c502:	45a0      	cmp	r8, r4
 801c504:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801c508:	ee36 6b45 	vsub.f64	d6, d6, d5
 801c50c:	d118      	bne.n	801c540 <_dtoa_r+0x558>
 801c50e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801c512:	ee37 4b05 	vadd.f64	d4, d7, d5
 801c516:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801c51a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c51e:	dc4d      	bgt.n	801c5bc <_dtoa_r+0x5d4>
 801c520:	ee35 5b47 	vsub.f64	d5, d5, d7
 801c524:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801c528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c52c:	f57f af41 	bpl.w	801c3b2 <_dtoa_r+0x3ca>
 801c530:	4680      	mov	r8, r0
 801c532:	3801      	subs	r0, #1
 801c534:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801c538:	2b30      	cmp	r3, #48	; 0x30
 801c53a:	d0f9      	beq.n	801c530 <_dtoa_r+0x548>
 801c53c:	4693      	mov	fp, r2
 801c53e:	e02a      	b.n	801c596 <_dtoa_r+0x5ae>
 801c540:	ee26 6b03 	vmul.f64	d6, d6, d3
 801c544:	e7d6      	b.n	801c4f4 <_dtoa_r+0x50c>
 801c546:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c54a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801c54e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c552:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801c556:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801c55a:	ee15 3a10 	vmov	r3, s10
 801c55e:	3330      	adds	r3, #48	; 0x30
 801c560:	f808 3b01 	strb.w	r3, [r8], #1
 801c564:	9b01      	ldr	r3, [sp, #4]
 801c566:	eba8 0303 	sub.w	r3, r8, r3
 801c56a:	4599      	cmp	r9, r3
 801c56c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801c570:	eea3 7b46 	vfms.f64	d7, d3, d6
 801c574:	d133      	bne.n	801c5de <_dtoa_r+0x5f6>
 801c576:	ee37 7b07 	vadd.f64	d7, d7, d7
 801c57a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801c57e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c582:	dc1a      	bgt.n	801c5ba <_dtoa_r+0x5d2>
 801c584:	eeb4 7b46 	vcmp.f64	d7, d6
 801c588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c58c:	d103      	bne.n	801c596 <_dtoa_r+0x5ae>
 801c58e:	ee15 3a10 	vmov	r3, s10
 801c592:	07d9      	lsls	r1, r3, #31
 801c594:	d411      	bmi.n	801c5ba <_dtoa_r+0x5d2>
 801c596:	4629      	mov	r1, r5
 801c598:	4630      	mov	r0, r6
 801c59a:	f000 fbd1 	bl	801cd40 <_Bfree>
 801c59e:	2300      	movs	r3, #0
 801c5a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c5a2:	f888 3000 	strb.w	r3, [r8]
 801c5a6:	f10b 0301 	add.w	r3, fp, #1
 801c5aa:	6013      	str	r3, [r2, #0]
 801c5ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c5ae:	2b00      	cmp	r3, #0
 801c5b0:	f43f ad69 	beq.w	801c086 <_dtoa_r+0x9e>
 801c5b4:	f8c3 8000 	str.w	r8, [r3]
 801c5b8:	e565      	b.n	801c086 <_dtoa_r+0x9e>
 801c5ba:	465a      	mov	r2, fp
 801c5bc:	4643      	mov	r3, r8
 801c5be:	4698      	mov	r8, r3
 801c5c0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 801c5c4:	2939      	cmp	r1, #57	; 0x39
 801c5c6:	d106      	bne.n	801c5d6 <_dtoa_r+0x5ee>
 801c5c8:	9901      	ldr	r1, [sp, #4]
 801c5ca:	4299      	cmp	r1, r3
 801c5cc:	d1f7      	bne.n	801c5be <_dtoa_r+0x5d6>
 801c5ce:	9801      	ldr	r0, [sp, #4]
 801c5d0:	2130      	movs	r1, #48	; 0x30
 801c5d2:	3201      	adds	r2, #1
 801c5d4:	7001      	strb	r1, [r0, #0]
 801c5d6:	7819      	ldrb	r1, [r3, #0]
 801c5d8:	3101      	adds	r1, #1
 801c5da:	7019      	strb	r1, [r3, #0]
 801c5dc:	e7ae      	b.n	801c53c <_dtoa_r+0x554>
 801c5de:	ee27 7b04 	vmul.f64	d7, d7, d4
 801c5e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801c5e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c5ea:	d1b2      	bne.n	801c552 <_dtoa_r+0x56a>
 801c5ec:	e7d3      	b.n	801c596 <_dtoa_r+0x5ae>
 801c5ee:	bf00      	nop
 801c5f0:	08020550 	.word	0x08020550
 801c5f4:	08020528 	.word	0x08020528
 801c5f8:	9907      	ldr	r1, [sp, #28]
 801c5fa:	2900      	cmp	r1, #0
 801c5fc:	f000 80d0 	beq.w	801c7a0 <_dtoa_r+0x7b8>
 801c600:	9906      	ldr	r1, [sp, #24]
 801c602:	2901      	cmp	r1, #1
 801c604:	f300 80b4 	bgt.w	801c770 <_dtoa_r+0x788>
 801c608:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c60a:	2900      	cmp	r1, #0
 801c60c:	f000 80ac 	beq.w	801c768 <_dtoa_r+0x780>
 801c610:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801c614:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801c618:	461c      	mov	r4, r3
 801c61a:	9309      	str	r3, [sp, #36]	; 0x24
 801c61c:	9b04      	ldr	r3, [sp, #16]
 801c61e:	4413      	add	r3, r2
 801c620:	9304      	str	r3, [sp, #16]
 801c622:	9b05      	ldr	r3, [sp, #20]
 801c624:	2101      	movs	r1, #1
 801c626:	4413      	add	r3, r2
 801c628:	4630      	mov	r0, r6
 801c62a:	9305      	str	r3, [sp, #20]
 801c62c:	f000 fc88 	bl	801cf40 <__i2b>
 801c630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c632:	4607      	mov	r7, r0
 801c634:	f1b8 0f00 	cmp.w	r8, #0
 801c638:	d00d      	beq.n	801c656 <_dtoa_r+0x66e>
 801c63a:	9a05      	ldr	r2, [sp, #20]
 801c63c:	2a00      	cmp	r2, #0
 801c63e:	dd0a      	ble.n	801c656 <_dtoa_r+0x66e>
 801c640:	4542      	cmp	r2, r8
 801c642:	9904      	ldr	r1, [sp, #16]
 801c644:	bfa8      	it	ge
 801c646:	4642      	movge	r2, r8
 801c648:	1a89      	subs	r1, r1, r2
 801c64a:	9104      	str	r1, [sp, #16]
 801c64c:	9905      	ldr	r1, [sp, #20]
 801c64e:	eba8 0802 	sub.w	r8, r8, r2
 801c652:	1a8a      	subs	r2, r1, r2
 801c654:	9205      	str	r2, [sp, #20]
 801c656:	b303      	cbz	r3, 801c69a <_dtoa_r+0x6b2>
 801c658:	9a07      	ldr	r2, [sp, #28]
 801c65a:	2a00      	cmp	r2, #0
 801c65c:	f000 80a5 	beq.w	801c7aa <_dtoa_r+0x7c2>
 801c660:	2c00      	cmp	r4, #0
 801c662:	dd13      	ble.n	801c68c <_dtoa_r+0x6a4>
 801c664:	4639      	mov	r1, r7
 801c666:	4622      	mov	r2, r4
 801c668:	4630      	mov	r0, r6
 801c66a:	930d      	str	r3, [sp, #52]	; 0x34
 801c66c:	f000 fd28 	bl	801d0c0 <__pow5mult>
 801c670:	462a      	mov	r2, r5
 801c672:	4601      	mov	r1, r0
 801c674:	4607      	mov	r7, r0
 801c676:	4630      	mov	r0, r6
 801c678:	f000 fc78 	bl	801cf6c <__multiply>
 801c67c:	4629      	mov	r1, r5
 801c67e:	9009      	str	r0, [sp, #36]	; 0x24
 801c680:	4630      	mov	r0, r6
 801c682:	f000 fb5d 	bl	801cd40 <_Bfree>
 801c686:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c688:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c68a:	4615      	mov	r5, r2
 801c68c:	1b1a      	subs	r2, r3, r4
 801c68e:	d004      	beq.n	801c69a <_dtoa_r+0x6b2>
 801c690:	4629      	mov	r1, r5
 801c692:	4630      	mov	r0, r6
 801c694:	f000 fd14 	bl	801d0c0 <__pow5mult>
 801c698:	4605      	mov	r5, r0
 801c69a:	2101      	movs	r1, #1
 801c69c:	4630      	mov	r0, r6
 801c69e:	f000 fc4f 	bl	801cf40 <__i2b>
 801c6a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c6a4:	2b00      	cmp	r3, #0
 801c6a6:	4604      	mov	r4, r0
 801c6a8:	f340 8081 	ble.w	801c7ae <_dtoa_r+0x7c6>
 801c6ac:	461a      	mov	r2, r3
 801c6ae:	4601      	mov	r1, r0
 801c6b0:	4630      	mov	r0, r6
 801c6b2:	f000 fd05 	bl	801d0c0 <__pow5mult>
 801c6b6:	9b06      	ldr	r3, [sp, #24]
 801c6b8:	2b01      	cmp	r3, #1
 801c6ba:	4604      	mov	r4, r0
 801c6bc:	dd7a      	ble.n	801c7b4 <_dtoa_r+0x7cc>
 801c6be:	2300      	movs	r3, #0
 801c6c0:	9309      	str	r3, [sp, #36]	; 0x24
 801c6c2:	6922      	ldr	r2, [r4, #16]
 801c6c4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801c6c8:	6910      	ldr	r0, [r2, #16]
 801c6ca:	f000 fbeb 	bl	801cea4 <__hi0bits>
 801c6ce:	f1c0 0020 	rsb	r0, r0, #32
 801c6d2:	9b05      	ldr	r3, [sp, #20]
 801c6d4:	4418      	add	r0, r3
 801c6d6:	f010 001f 	ands.w	r0, r0, #31
 801c6da:	f000 8093 	beq.w	801c804 <_dtoa_r+0x81c>
 801c6de:	f1c0 0220 	rsb	r2, r0, #32
 801c6e2:	2a04      	cmp	r2, #4
 801c6e4:	f340 8085 	ble.w	801c7f2 <_dtoa_r+0x80a>
 801c6e8:	9b04      	ldr	r3, [sp, #16]
 801c6ea:	f1c0 001c 	rsb	r0, r0, #28
 801c6ee:	4403      	add	r3, r0
 801c6f0:	9304      	str	r3, [sp, #16]
 801c6f2:	9b05      	ldr	r3, [sp, #20]
 801c6f4:	4480      	add	r8, r0
 801c6f6:	4403      	add	r3, r0
 801c6f8:	9305      	str	r3, [sp, #20]
 801c6fa:	9b04      	ldr	r3, [sp, #16]
 801c6fc:	2b00      	cmp	r3, #0
 801c6fe:	dd05      	ble.n	801c70c <_dtoa_r+0x724>
 801c700:	4629      	mov	r1, r5
 801c702:	461a      	mov	r2, r3
 801c704:	4630      	mov	r0, r6
 801c706:	f000 fd35 	bl	801d174 <__lshift>
 801c70a:	4605      	mov	r5, r0
 801c70c:	9b05      	ldr	r3, [sp, #20]
 801c70e:	2b00      	cmp	r3, #0
 801c710:	dd05      	ble.n	801c71e <_dtoa_r+0x736>
 801c712:	4621      	mov	r1, r4
 801c714:	461a      	mov	r2, r3
 801c716:	4630      	mov	r0, r6
 801c718:	f000 fd2c 	bl	801d174 <__lshift>
 801c71c:	4604      	mov	r4, r0
 801c71e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c720:	2b00      	cmp	r3, #0
 801c722:	d071      	beq.n	801c808 <_dtoa_r+0x820>
 801c724:	4621      	mov	r1, r4
 801c726:	4628      	mov	r0, r5
 801c728:	f000 fd90 	bl	801d24c <__mcmp>
 801c72c:	2800      	cmp	r0, #0
 801c72e:	da6b      	bge.n	801c808 <_dtoa_r+0x820>
 801c730:	2300      	movs	r3, #0
 801c732:	4629      	mov	r1, r5
 801c734:	220a      	movs	r2, #10
 801c736:	4630      	mov	r0, r6
 801c738:	f000 fb24 	bl	801cd84 <__multadd>
 801c73c:	9b07      	ldr	r3, [sp, #28]
 801c73e:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c742:	4605      	mov	r5, r0
 801c744:	2b00      	cmp	r3, #0
 801c746:	f000 8197 	beq.w	801ca78 <_dtoa_r+0xa90>
 801c74a:	4639      	mov	r1, r7
 801c74c:	2300      	movs	r3, #0
 801c74e:	220a      	movs	r2, #10
 801c750:	4630      	mov	r0, r6
 801c752:	f000 fb17 	bl	801cd84 <__multadd>
 801c756:	f1ba 0f00 	cmp.w	sl, #0
 801c75a:	4607      	mov	r7, r0
 801c75c:	f300 8093 	bgt.w	801c886 <_dtoa_r+0x89e>
 801c760:	9b06      	ldr	r3, [sp, #24]
 801c762:	2b02      	cmp	r3, #2
 801c764:	dc57      	bgt.n	801c816 <_dtoa_r+0x82e>
 801c766:	e08e      	b.n	801c886 <_dtoa_r+0x89e>
 801c768:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c76a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801c76e:	e751      	b.n	801c614 <_dtoa_r+0x62c>
 801c770:	f109 34ff 	add.w	r4, r9, #4294967295
 801c774:	42a3      	cmp	r3, r4
 801c776:	bfbf      	itttt	lt
 801c778:	1ae2      	sublt	r2, r4, r3
 801c77a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801c77c:	189b      	addlt	r3, r3, r2
 801c77e:	930a      	strlt	r3, [sp, #40]	; 0x28
 801c780:	bfae      	itee	ge
 801c782:	1b1c      	subge	r4, r3, r4
 801c784:	4623      	movlt	r3, r4
 801c786:	2400      	movlt	r4, #0
 801c788:	f1b9 0f00 	cmp.w	r9, #0
 801c78c:	bfb5      	itete	lt
 801c78e:	9a04      	ldrlt	r2, [sp, #16]
 801c790:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801c794:	eba2 0809 	sublt.w	r8, r2, r9
 801c798:	464a      	movge	r2, r9
 801c79a:	bfb8      	it	lt
 801c79c:	2200      	movlt	r2, #0
 801c79e:	e73c      	b.n	801c61a <_dtoa_r+0x632>
 801c7a0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801c7a4:	9f07      	ldr	r7, [sp, #28]
 801c7a6:	461c      	mov	r4, r3
 801c7a8:	e744      	b.n	801c634 <_dtoa_r+0x64c>
 801c7aa:	461a      	mov	r2, r3
 801c7ac:	e770      	b.n	801c690 <_dtoa_r+0x6a8>
 801c7ae:	9b06      	ldr	r3, [sp, #24]
 801c7b0:	2b01      	cmp	r3, #1
 801c7b2:	dc18      	bgt.n	801c7e6 <_dtoa_r+0x7fe>
 801c7b4:	9b02      	ldr	r3, [sp, #8]
 801c7b6:	b9b3      	cbnz	r3, 801c7e6 <_dtoa_r+0x7fe>
 801c7b8:	9b03      	ldr	r3, [sp, #12]
 801c7ba:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801c7be:	b9a2      	cbnz	r2, 801c7ea <_dtoa_r+0x802>
 801c7c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801c7c4:	0d12      	lsrs	r2, r2, #20
 801c7c6:	0512      	lsls	r2, r2, #20
 801c7c8:	b18a      	cbz	r2, 801c7ee <_dtoa_r+0x806>
 801c7ca:	9b04      	ldr	r3, [sp, #16]
 801c7cc:	3301      	adds	r3, #1
 801c7ce:	9304      	str	r3, [sp, #16]
 801c7d0:	9b05      	ldr	r3, [sp, #20]
 801c7d2:	3301      	adds	r3, #1
 801c7d4:	9305      	str	r3, [sp, #20]
 801c7d6:	2301      	movs	r3, #1
 801c7d8:	9309      	str	r3, [sp, #36]	; 0x24
 801c7da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c7dc:	2b00      	cmp	r3, #0
 801c7de:	f47f af70 	bne.w	801c6c2 <_dtoa_r+0x6da>
 801c7e2:	2001      	movs	r0, #1
 801c7e4:	e775      	b.n	801c6d2 <_dtoa_r+0x6ea>
 801c7e6:	2300      	movs	r3, #0
 801c7e8:	e7f6      	b.n	801c7d8 <_dtoa_r+0x7f0>
 801c7ea:	9b02      	ldr	r3, [sp, #8]
 801c7ec:	e7f4      	b.n	801c7d8 <_dtoa_r+0x7f0>
 801c7ee:	9209      	str	r2, [sp, #36]	; 0x24
 801c7f0:	e7f3      	b.n	801c7da <_dtoa_r+0x7f2>
 801c7f2:	d082      	beq.n	801c6fa <_dtoa_r+0x712>
 801c7f4:	9b04      	ldr	r3, [sp, #16]
 801c7f6:	321c      	adds	r2, #28
 801c7f8:	4413      	add	r3, r2
 801c7fa:	9304      	str	r3, [sp, #16]
 801c7fc:	9b05      	ldr	r3, [sp, #20]
 801c7fe:	4490      	add	r8, r2
 801c800:	4413      	add	r3, r2
 801c802:	e779      	b.n	801c6f8 <_dtoa_r+0x710>
 801c804:	4602      	mov	r2, r0
 801c806:	e7f5      	b.n	801c7f4 <_dtoa_r+0x80c>
 801c808:	f1b9 0f00 	cmp.w	r9, #0
 801c80c:	dc36      	bgt.n	801c87c <_dtoa_r+0x894>
 801c80e:	9b06      	ldr	r3, [sp, #24]
 801c810:	2b02      	cmp	r3, #2
 801c812:	dd33      	ble.n	801c87c <_dtoa_r+0x894>
 801c814:	46ca      	mov	sl, r9
 801c816:	f1ba 0f00 	cmp.w	sl, #0
 801c81a:	d10d      	bne.n	801c838 <_dtoa_r+0x850>
 801c81c:	4621      	mov	r1, r4
 801c81e:	4653      	mov	r3, sl
 801c820:	2205      	movs	r2, #5
 801c822:	4630      	mov	r0, r6
 801c824:	f000 faae 	bl	801cd84 <__multadd>
 801c828:	4601      	mov	r1, r0
 801c82a:	4604      	mov	r4, r0
 801c82c:	4628      	mov	r0, r5
 801c82e:	f000 fd0d 	bl	801d24c <__mcmp>
 801c832:	2800      	cmp	r0, #0
 801c834:	f73f ade4 	bgt.w	801c400 <_dtoa_r+0x418>
 801c838:	9b08      	ldr	r3, [sp, #32]
 801c83a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c83e:	ea6f 0b03 	mvn.w	fp, r3
 801c842:	f04f 0900 	mov.w	r9, #0
 801c846:	4621      	mov	r1, r4
 801c848:	4630      	mov	r0, r6
 801c84a:	f000 fa79 	bl	801cd40 <_Bfree>
 801c84e:	2f00      	cmp	r7, #0
 801c850:	f43f aea1 	beq.w	801c596 <_dtoa_r+0x5ae>
 801c854:	f1b9 0f00 	cmp.w	r9, #0
 801c858:	d005      	beq.n	801c866 <_dtoa_r+0x87e>
 801c85a:	45b9      	cmp	r9, r7
 801c85c:	d003      	beq.n	801c866 <_dtoa_r+0x87e>
 801c85e:	4649      	mov	r1, r9
 801c860:	4630      	mov	r0, r6
 801c862:	f000 fa6d 	bl	801cd40 <_Bfree>
 801c866:	4639      	mov	r1, r7
 801c868:	4630      	mov	r0, r6
 801c86a:	f000 fa69 	bl	801cd40 <_Bfree>
 801c86e:	e692      	b.n	801c596 <_dtoa_r+0x5ae>
 801c870:	2400      	movs	r4, #0
 801c872:	4627      	mov	r7, r4
 801c874:	e7e0      	b.n	801c838 <_dtoa_r+0x850>
 801c876:	4693      	mov	fp, r2
 801c878:	4627      	mov	r7, r4
 801c87a:	e5c1      	b.n	801c400 <_dtoa_r+0x418>
 801c87c:	9b07      	ldr	r3, [sp, #28]
 801c87e:	46ca      	mov	sl, r9
 801c880:	2b00      	cmp	r3, #0
 801c882:	f000 8100 	beq.w	801ca86 <_dtoa_r+0xa9e>
 801c886:	f1b8 0f00 	cmp.w	r8, #0
 801c88a:	dd05      	ble.n	801c898 <_dtoa_r+0x8b0>
 801c88c:	4639      	mov	r1, r7
 801c88e:	4642      	mov	r2, r8
 801c890:	4630      	mov	r0, r6
 801c892:	f000 fc6f 	bl	801d174 <__lshift>
 801c896:	4607      	mov	r7, r0
 801c898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c89a:	2b00      	cmp	r3, #0
 801c89c:	d05d      	beq.n	801c95a <_dtoa_r+0x972>
 801c89e:	6879      	ldr	r1, [r7, #4]
 801c8a0:	4630      	mov	r0, r6
 801c8a2:	f000 fa0d 	bl	801ccc0 <_Balloc>
 801c8a6:	4680      	mov	r8, r0
 801c8a8:	b928      	cbnz	r0, 801c8b6 <_dtoa_r+0x8ce>
 801c8aa:	4b82      	ldr	r3, [pc, #520]	; (801cab4 <_dtoa_r+0xacc>)
 801c8ac:	4602      	mov	r2, r0
 801c8ae:	f240 21ef 	movw	r1, #751	; 0x2ef
 801c8b2:	f7ff bbb1 	b.w	801c018 <_dtoa_r+0x30>
 801c8b6:	693a      	ldr	r2, [r7, #16]
 801c8b8:	3202      	adds	r2, #2
 801c8ba:	0092      	lsls	r2, r2, #2
 801c8bc:	f107 010c 	add.w	r1, r7, #12
 801c8c0:	300c      	adds	r0, #12
 801c8c2:	f7ff faf2 	bl	801beaa <memcpy>
 801c8c6:	2201      	movs	r2, #1
 801c8c8:	4641      	mov	r1, r8
 801c8ca:	4630      	mov	r0, r6
 801c8cc:	f000 fc52 	bl	801d174 <__lshift>
 801c8d0:	9b01      	ldr	r3, [sp, #4]
 801c8d2:	3301      	adds	r3, #1
 801c8d4:	9304      	str	r3, [sp, #16]
 801c8d6:	9b01      	ldr	r3, [sp, #4]
 801c8d8:	4453      	add	r3, sl
 801c8da:	9308      	str	r3, [sp, #32]
 801c8dc:	9b02      	ldr	r3, [sp, #8]
 801c8de:	f003 0301 	and.w	r3, r3, #1
 801c8e2:	46b9      	mov	r9, r7
 801c8e4:	9307      	str	r3, [sp, #28]
 801c8e6:	4607      	mov	r7, r0
 801c8e8:	9b04      	ldr	r3, [sp, #16]
 801c8ea:	4621      	mov	r1, r4
 801c8ec:	3b01      	subs	r3, #1
 801c8ee:	4628      	mov	r0, r5
 801c8f0:	9302      	str	r3, [sp, #8]
 801c8f2:	f7ff faef 	bl	801bed4 <quorem>
 801c8f6:	4603      	mov	r3, r0
 801c8f8:	3330      	adds	r3, #48	; 0x30
 801c8fa:	9005      	str	r0, [sp, #20]
 801c8fc:	4649      	mov	r1, r9
 801c8fe:	4628      	mov	r0, r5
 801c900:	9309      	str	r3, [sp, #36]	; 0x24
 801c902:	f000 fca3 	bl	801d24c <__mcmp>
 801c906:	463a      	mov	r2, r7
 801c908:	4682      	mov	sl, r0
 801c90a:	4621      	mov	r1, r4
 801c90c:	4630      	mov	r0, r6
 801c90e:	f000 fcb9 	bl	801d284 <__mdiff>
 801c912:	68c2      	ldr	r2, [r0, #12]
 801c914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c916:	4680      	mov	r8, r0
 801c918:	bb0a      	cbnz	r2, 801c95e <_dtoa_r+0x976>
 801c91a:	4601      	mov	r1, r0
 801c91c:	4628      	mov	r0, r5
 801c91e:	f000 fc95 	bl	801d24c <__mcmp>
 801c922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c924:	4602      	mov	r2, r0
 801c926:	4641      	mov	r1, r8
 801c928:	4630      	mov	r0, r6
 801c92a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801c92e:	f000 fa07 	bl	801cd40 <_Bfree>
 801c932:	9b06      	ldr	r3, [sp, #24]
 801c934:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c936:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801c93a:	ea43 0102 	orr.w	r1, r3, r2
 801c93e:	9b07      	ldr	r3, [sp, #28]
 801c940:	4319      	orrs	r1, r3
 801c942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c944:	d10d      	bne.n	801c962 <_dtoa_r+0x97a>
 801c946:	2b39      	cmp	r3, #57	; 0x39
 801c948:	d029      	beq.n	801c99e <_dtoa_r+0x9b6>
 801c94a:	f1ba 0f00 	cmp.w	sl, #0
 801c94e:	dd01      	ble.n	801c954 <_dtoa_r+0x96c>
 801c950:	9b05      	ldr	r3, [sp, #20]
 801c952:	3331      	adds	r3, #49	; 0x31
 801c954:	9a02      	ldr	r2, [sp, #8]
 801c956:	7013      	strb	r3, [r2, #0]
 801c958:	e775      	b.n	801c846 <_dtoa_r+0x85e>
 801c95a:	4638      	mov	r0, r7
 801c95c:	e7b8      	b.n	801c8d0 <_dtoa_r+0x8e8>
 801c95e:	2201      	movs	r2, #1
 801c960:	e7e1      	b.n	801c926 <_dtoa_r+0x93e>
 801c962:	f1ba 0f00 	cmp.w	sl, #0
 801c966:	db06      	blt.n	801c976 <_dtoa_r+0x98e>
 801c968:	9906      	ldr	r1, [sp, #24]
 801c96a:	ea41 0a0a 	orr.w	sl, r1, sl
 801c96e:	9907      	ldr	r1, [sp, #28]
 801c970:	ea5a 0a01 	orrs.w	sl, sl, r1
 801c974:	d120      	bne.n	801c9b8 <_dtoa_r+0x9d0>
 801c976:	2a00      	cmp	r2, #0
 801c978:	ddec      	ble.n	801c954 <_dtoa_r+0x96c>
 801c97a:	4629      	mov	r1, r5
 801c97c:	2201      	movs	r2, #1
 801c97e:	4630      	mov	r0, r6
 801c980:	9304      	str	r3, [sp, #16]
 801c982:	f000 fbf7 	bl	801d174 <__lshift>
 801c986:	4621      	mov	r1, r4
 801c988:	4605      	mov	r5, r0
 801c98a:	f000 fc5f 	bl	801d24c <__mcmp>
 801c98e:	2800      	cmp	r0, #0
 801c990:	9b04      	ldr	r3, [sp, #16]
 801c992:	dc02      	bgt.n	801c99a <_dtoa_r+0x9b2>
 801c994:	d1de      	bne.n	801c954 <_dtoa_r+0x96c>
 801c996:	07da      	lsls	r2, r3, #31
 801c998:	d5dc      	bpl.n	801c954 <_dtoa_r+0x96c>
 801c99a:	2b39      	cmp	r3, #57	; 0x39
 801c99c:	d1d8      	bne.n	801c950 <_dtoa_r+0x968>
 801c99e:	9a02      	ldr	r2, [sp, #8]
 801c9a0:	2339      	movs	r3, #57	; 0x39
 801c9a2:	7013      	strb	r3, [r2, #0]
 801c9a4:	4643      	mov	r3, r8
 801c9a6:	4698      	mov	r8, r3
 801c9a8:	3b01      	subs	r3, #1
 801c9aa:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801c9ae:	2a39      	cmp	r2, #57	; 0x39
 801c9b0:	d051      	beq.n	801ca56 <_dtoa_r+0xa6e>
 801c9b2:	3201      	adds	r2, #1
 801c9b4:	701a      	strb	r2, [r3, #0]
 801c9b6:	e746      	b.n	801c846 <_dtoa_r+0x85e>
 801c9b8:	2a00      	cmp	r2, #0
 801c9ba:	dd03      	ble.n	801c9c4 <_dtoa_r+0x9dc>
 801c9bc:	2b39      	cmp	r3, #57	; 0x39
 801c9be:	d0ee      	beq.n	801c99e <_dtoa_r+0x9b6>
 801c9c0:	3301      	adds	r3, #1
 801c9c2:	e7c7      	b.n	801c954 <_dtoa_r+0x96c>
 801c9c4:	9a04      	ldr	r2, [sp, #16]
 801c9c6:	9908      	ldr	r1, [sp, #32]
 801c9c8:	f802 3c01 	strb.w	r3, [r2, #-1]
 801c9cc:	428a      	cmp	r2, r1
 801c9ce:	d02b      	beq.n	801ca28 <_dtoa_r+0xa40>
 801c9d0:	4629      	mov	r1, r5
 801c9d2:	2300      	movs	r3, #0
 801c9d4:	220a      	movs	r2, #10
 801c9d6:	4630      	mov	r0, r6
 801c9d8:	f000 f9d4 	bl	801cd84 <__multadd>
 801c9dc:	45b9      	cmp	r9, r7
 801c9de:	4605      	mov	r5, r0
 801c9e0:	f04f 0300 	mov.w	r3, #0
 801c9e4:	f04f 020a 	mov.w	r2, #10
 801c9e8:	4649      	mov	r1, r9
 801c9ea:	4630      	mov	r0, r6
 801c9ec:	d107      	bne.n	801c9fe <_dtoa_r+0xa16>
 801c9ee:	f000 f9c9 	bl	801cd84 <__multadd>
 801c9f2:	4681      	mov	r9, r0
 801c9f4:	4607      	mov	r7, r0
 801c9f6:	9b04      	ldr	r3, [sp, #16]
 801c9f8:	3301      	adds	r3, #1
 801c9fa:	9304      	str	r3, [sp, #16]
 801c9fc:	e774      	b.n	801c8e8 <_dtoa_r+0x900>
 801c9fe:	f000 f9c1 	bl	801cd84 <__multadd>
 801ca02:	4639      	mov	r1, r7
 801ca04:	4681      	mov	r9, r0
 801ca06:	2300      	movs	r3, #0
 801ca08:	220a      	movs	r2, #10
 801ca0a:	4630      	mov	r0, r6
 801ca0c:	f000 f9ba 	bl	801cd84 <__multadd>
 801ca10:	4607      	mov	r7, r0
 801ca12:	e7f0      	b.n	801c9f6 <_dtoa_r+0xa0e>
 801ca14:	f1ba 0f00 	cmp.w	sl, #0
 801ca18:	9a01      	ldr	r2, [sp, #4]
 801ca1a:	bfcc      	ite	gt
 801ca1c:	46d0      	movgt	r8, sl
 801ca1e:	f04f 0801 	movle.w	r8, #1
 801ca22:	4490      	add	r8, r2
 801ca24:	f04f 0900 	mov.w	r9, #0
 801ca28:	4629      	mov	r1, r5
 801ca2a:	2201      	movs	r2, #1
 801ca2c:	4630      	mov	r0, r6
 801ca2e:	9302      	str	r3, [sp, #8]
 801ca30:	f000 fba0 	bl	801d174 <__lshift>
 801ca34:	4621      	mov	r1, r4
 801ca36:	4605      	mov	r5, r0
 801ca38:	f000 fc08 	bl	801d24c <__mcmp>
 801ca3c:	2800      	cmp	r0, #0
 801ca3e:	dcb1      	bgt.n	801c9a4 <_dtoa_r+0x9bc>
 801ca40:	d102      	bne.n	801ca48 <_dtoa_r+0xa60>
 801ca42:	9b02      	ldr	r3, [sp, #8]
 801ca44:	07db      	lsls	r3, r3, #31
 801ca46:	d4ad      	bmi.n	801c9a4 <_dtoa_r+0x9bc>
 801ca48:	4643      	mov	r3, r8
 801ca4a:	4698      	mov	r8, r3
 801ca4c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ca50:	2a30      	cmp	r2, #48	; 0x30
 801ca52:	d0fa      	beq.n	801ca4a <_dtoa_r+0xa62>
 801ca54:	e6f7      	b.n	801c846 <_dtoa_r+0x85e>
 801ca56:	9a01      	ldr	r2, [sp, #4]
 801ca58:	429a      	cmp	r2, r3
 801ca5a:	d1a4      	bne.n	801c9a6 <_dtoa_r+0x9be>
 801ca5c:	f10b 0b01 	add.w	fp, fp, #1
 801ca60:	2331      	movs	r3, #49	; 0x31
 801ca62:	e778      	b.n	801c956 <_dtoa_r+0x96e>
 801ca64:	4b14      	ldr	r3, [pc, #80]	; (801cab8 <_dtoa_r+0xad0>)
 801ca66:	f7ff bb2a 	b.w	801c0be <_dtoa_r+0xd6>
 801ca6a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ca6c:	2b00      	cmp	r3, #0
 801ca6e:	f47f ab05 	bne.w	801c07c <_dtoa_r+0x94>
 801ca72:	4b12      	ldr	r3, [pc, #72]	; (801cabc <_dtoa_r+0xad4>)
 801ca74:	f7ff bb23 	b.w	801c0be <_dtoa_r+0xd6>
 801ca78:	f1ba 0f00 	cmp.w	sl, #0
 801ca7c:	dc03      	bgt.n	801ca86 <_dtoa_r+0xa9e>
 801ca7e:	9b06      	ldr	r3, [sp, #24]
 801ca80:	2b02      	cmp	r3, #2
 801ca82:	f73f aec8 	bgt.w	801c816 <_dtoa_r+0x82e>
 801ca86:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801ca8a:	4621      	mov	r1, r4
 801ca8c:	4628      	mov	r0, r5
 801ca8e:	f7ff fa21 	bl	801bed4 <quorem>
 801ca92:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801ca96:	f808 3b01 	strb.w	r3, [r8], #1
 801ca9a:	9a01      	ldr	r2, [sp, #4]
 801ca9c:	eba8 0202 	sub.w	r2, r8, r2
 801caa0:	4592      	cmp	sl, r2
 801caa2:	ddb7      	ble.n	801ca14 <_dtoa_r+0xa2c>
 801caa4:	4629      	mov	r1, r5
 801caa6:	2300      	movs	r3, #0
 801caa8:	220a      	movs	r2, #10
 801caaa:	4630      	mov	r0, r6
 801caac:	f000 f96a 	bl	801cd84 <__multadd>
 801cab0:	4605      	mov	r5, r0
 801cab2:	e7ea      	b.n	801ca8a <_dtoa_r+0xaa2>
 801cab4:	080204bb 	.word	0x080204bb
 801cab8:	080207a0 	.word	0x080207a0
 801cabc:	0802043f 	.word	0x0802043f

0801cac0 <_free_r>:
 801cac0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cac2:	2900      	cmp	r1, #0
 801cac4:	d044      	beq.n	801cb50 <_free_r+0x90>
 801cac6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801caca:	9001      	str	r0, [sp, #4]
 801cacc:	2b00      	cmp	r3, #0
 801cace:	f1a1 0404 	sub.w	r4, r1, #4
 801cad2:	bfb8      	it	lt
 801cad4:	18e4      	addlt	r4, r4, r3
 801cad6:	f000 f8e7 	bl	801cca8 <__malloc_lock>
 801cada:	4a1e      	ldr	r2, [pc, #120]	; (801cb54 <_free_r+0x94>)
 801cadc:	9801      	ldr	r0, [sp, #4]
 801cade:	6813      	ldr	r3, [r2, #0]
 801cae0:	b933      	cbnz	r3, 801caf0 <_free_r+0x30>
 801cae2:	6063      	str	r3, [r4, #4]
 801cae4:	6014      	str	r4, [r2, #0]
 801cae6:	b003      	add	sp, #12
 801cae8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801caec:	f000 b8e2 	b.w	801ccb4 <__malloc_unlock>
 801caf0:	42a3      	cmp	r3, r4
 801caf2:	d908      	bls.n	801cb06 <_free_r+0x46>
 801caf4:	6825      	ldr	r5, [r4, #0]
 801caf6:	1961      	adds	r1, r4, r5
 801caf8:	428b      	cmp	r3, r1
 801cafa:	bf01      	itttt	eq
 801cafc:	6819      	ldreq	r1, [r3, #0]
 801cafe:	685b      	ldreq	r3, [r3, #4]
 801cb00:	1949      	addeq	r1, r1, r5
 801cb02:	6021      	streq	r1, [r4, #0]
 801cb04:	e7ed      	b.n	801cae2 <_free_r+0x22>
 801cb06:	461a      	mov	r2, r3
 801cb08:	685b      	ldr	r3, [r3, #4]
 801cb0a:	b10b      	cbz	r3, 801cb10 <_free_r+0x50>
 801cb0c:	42a3      	cmp	r3, r4
 801cb0e:	d9fa      	bls.n	801cb06 <_free_r+0x46>
 801cb10:	6811      	ldr	r1, [r2, #0]
 801cb12:	1855      	adds	r5, r2, r1
 801cb14:	42a5      	cmp	r5, r4
 801cb16:	d10b      	bne.n	801cb30 <_free_r+0x70>
 801cb18:	6824      	ldr	r4, [r4, #0]
 801cb1a:	4421      	add	r1, r4
 801cb1c:	1854      	adds	r4, r2, r1
 801cb1e:	42a3      	cmp	r3, r4
 801cb20:	6011      	str	r1, [r2, #0]
 801cb22:	d1e0      	bne.n	801cae6 <_free_r+0x26>
 801cb24:	681c      	ldr	r4, [r3, #0]
 801cb26:	685b      	ldr	r3, [r3, #4]
 801cb28:	6053      	str	r3, [r2, #4]
 801cb2a:	440c      	add	r4, r1
 801cb2c:	6014      	str	r4, [r2, #0]
 801cb2e:	e7da      	b.n	801cae6 <_free_r+0x26>
 801cb30:	d902      	bls.n	801cb38 <_free_r+0x78>
 801cb32:	230c      	movs	r3, #12
 801cb34:	6003      	str	r3, [r0, #0]
 801cb36:	e7d6      	b.n	801cae6 <_free_r+0x26>
 801cb38:	6825      	ldr	r5, [r4, #0]
 801cb3a:	1961      	adds	r1, r4, r5
 801cb3c:	428b      	cmp	r3, r1
 801cb3e:	bf04      	itt	eq
 801cb40:	6819      	ldreq	r1, [r3, #0]
 801cb42:	685b      	ldreq	r3, [r3, #4]
 801cb44:	6063      	str	r3, [r4, #4]
 801cb46:	bf04      	itt	eq
 801cb48:	1949      	addeq	r1, r1, r5
 801cb4a:	6021      	streq	r1, [r4, #0]
 801cb4c:	6054      	str	r4, [r2, #4]
 801cb4e:	e7ca      	b.n	801cae6 <_free_r+0x26>
 801cb50:	b003      	add	sp, #12
 801cb52:	bd30      	pop	{r4, r5, pc}
 801cb54:	24003628 	.word	0x24003628

0801cb58 <malloc>:
 801cb58:	4b02      	ldr	r3, [pc, #8]	; (801cb64 <malloc+0xc>)
 801cb5a:	4601      	mov	r1, r0
 801cb5c:	6818      	ldr	r0, [r3, #0]
 801cb5e:	f000 b823 	b.w	801cba8 <_malloc_r>
 801cb62:	bf00      	nop
 801cb64:	24000158 	.word	0x24000158

0801cb68 <sbrk_aligned>:
 801cb68:	b570      	push	{r4, r5, r6, lr}
 801cb6a:	4e0e      	ldr	r6, [pc, #56]	; (801cba4 <sbrk_aligned+0x3c>)
 801cb6c:	460c      	mov	r4, r1
 801cb6e:	6831      	ldr	r1, [r6, #0]
 801cb70:	4605      	mov	r5, r0
 801cb72:	b911      	cbnz	r1, 801cb7a <sbrk_aligned+0x12>
 801cb74:	f002 f96a 	bl	801ee4c <_sbrk_r>
 801cb78:	6030      	str	r0, [r6, #0]
 801cb7a:	4621      	mov	r1, r4
 801cb7c:	4628      	mov	r0, r5
 801cb7e:	f002 f965 	bl	801ee4c <_sbrk_r>
 801cb82:	1c43      	adds	r3, r0, #1
 801cb84:	d00a      	beq.n	801cb9c <sbrk_aligned+0x34>
 801cb86:	1cc4      	adds	r4, r0, #3
 801cb88:	f024 0403 	bic.w	r4, r4, #3
 801cb8c:	42a0      	cmp	r0, r4
 801cb8e:	d007      	beq.n	801cba0 <sbrk_aligned+0x38>
 801cb90:	1a21      	subs	r1, r4, r0
 801cb92:	4628      	mov	r0, r5
 801cb94:	f002 f95a 	bl	801ee4c <_sbrk_r>
 801cb98:	3001      	adds	r0, #1
 801cb9a:	d101      	bne.n	801cba0 <sbrk_aligned+0x38>
 801cb9c:	f04f 34ff 	mov.w	r4, #4294967295
 801cba0:	4620      	mov	r0, r4
 801cba2:	bd70      	pop	{r4, r5, r6, pc}
 801cba4:	2400362c 	.word	0x2400362c

0801cba8 <_malloc_r>:
 801cba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cbac:	1ccd      	adds	r5, r1, #3
 801cbae:	f025 0503 	bic.w	r5, r5, #3
 801cbb2:	3508      	adds	r5, #8
 801cbb4:	2d0c      	cmp	r5, #12
 801cbb6:	bf38      	it	cc
 801cbb8:	250c      	movcc	r5, #12
 801cbba:	2d00      	cmp	r5, #0
 801cbbc:	4607      	mov	r7, r0
 801cbbe:	db01      	blt.n	801cbc4 <_malloc_r+0x1c>
 801cbc0:	42a9      	cmp	r1, r5
 801cbc2:	d905      	bls.n	801cbd0 <_malloc_r+0x28>
 801cbc4:	230c      	movs	r3, #12
 801cbc6:	603b      	str	r3, [r7, #0]
 801cbc8:	2600      	movs	r6, #0
 801cbca:	4630      	mov	r0, r6
 801cbcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cbd0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801cca4 <_malloc_r+0xfc>
 801cbd4:	f000 f868 	bl	801cca8 <__malloc_lock>
 801cbd8:	f8d8 3000 	ldr.w	r3, [r8]
 801cbdc:	461c      	mov	r4, r3
 801cbde:	bb5c      	cbnz	r4, 801cc38 <_malloc_r+0x90>
 801cbe0:	4629      	mov	r1, r5
 801cbe2:	4638      	mov	r0, r7
 801cbe4:	f7ff ffc0 	bl	801cb68 <sbrk_aligned>
 801cbe8:	1c43      	adds	r3, r0, #1
 801cbea:	4604      	mov	r4, r0
 801cbec:	d155      	bne.n	801cc9a <_malloc_r+0xf2>
 801cbee:	f8d8 4000 	ldr.w	r4, [r8]
 801cbf2:	4626      	mov	r6, r4
 801cbf4:	2e00      	cmp	r6, #0
 801cbf6:	d145      	bne.n	801cc84 <_malloc_r+0xdc>
 801cbf8:	2c00      	cmp	r4, #0
 801cbfa:	d048      	beq.n	801cc8e <_malloc_r+0xe6>
 801cbfc:	6823      	ldr	r3, [r4, #0]
 801cbfe:	4631      	mov	r1, r6
 801cc00:	4638      	mov	r0, r7
 801cc02:	eb04 0903 	add.w	r9, r4, r3
 801cc06:	f002 f921 	bl	801ee4c <_sbrk_r>
 801cc0a:	4581      	cmp	r9, r0
 801cc0c:	d13f      	bne.n	801cc8e <_malloc_r+0xe6>
 801cc0e:	6821      	ldr	r1, [r4, #0]
 801cc10:	1a6d      	subs	r5, r5, r1
 801cc12:	4629      	mov	r1, r5
 801cc14:	4638      	mov	r0, r7
 801cc16:	f7ff ffa7 	bl	801cb68 <sbrk_aligned>
 801cc1a:	3001      	adds	r0, #1
 801cc1c:	d037      	beq.n	801cc8e <_malloc_r+0xe6>
 801cc1e:	6823      	ldr	r3, [r4, #0]
 801cc20:	442b      	add	r3, r5
 801cc22:	6023      	str	r3, [r4, #0]
 801cc24:	f8d8 3000 	ldr.w	r3, [r8]
 801cc28:	2b00      	cmp	r3, #0
 801cc2a:	d038      	beq.n	801cc9e <_malloc_r+0xf6>
 801cc2c:	685a      	ldr	r2, [r3, #4]
 801cc2e:	42a2      	cmp	r2, r4
 801cc30:	d12b      	bne.n	801cc8a <_malloc_r+0xe2>
 801cc32:	2200      	movs	r2, #0
 801cc34:	605a      	str	r2, [r3, #4]
 801cc36:	e00f      	b.n	801cc58 <_malloc_r+0xb0>
 801cc38:	6822      	ldr	r2, [r4, #0]
 801cc3a:	1b52      	subs	r2, r2, r5
 801cc3c:	d41f      	bmi.n	801cc7e <_malloc_r+0xd6>
 801cc3e:	2a0b      	cmp	r2, #11
 801cc40:	d917      	bls.n	801cc72 <_malloc_r+0xca>
 801cc42:	1961      	adds	r1, r4, r5
 801cc44:	42a3      	cmp	r3, r4
 801cc46:	6025      	str	r5, [r4, #0]
 801cc48:	bf18      	it	ne
 801cc4a:	6059      	strne	r1, [r3, #4]
 801cc4c:	6863      	ldr	r3, [r4, #4]
 801cc4e:	bf08      	it	eq
 801cc50:	f8c8 1000 	streq.w	r1, [r8]
 801cc54:	5162      	str	r2, [r4, r5]
 801cc56:	604b      	str	r3, [r1, #4]
 801cc58:	4638      	mov	r0, r7
 801cc5a:	f104 060b 	add.w	r6, r4, #11
 801cc5e:	f000 f829 	bl	801ccb4 <__malloc_unlock>
 801cc62:	f026 0607 	bic.w	r6, r6, #7
 801cc66:	1d23      	adds	r3, r4, #4
 801cc68:	1af2      	subs	r2, r6, r3
 801cc6a:	d0ae      	beq.n	801cbca <_malloc_r+0x22>
 801cc6c:	1b9b      	subs	r3, r3, r6
 801cc6e:	50a3      	str	r3, [r4, r2]
 801cc70:	e7ab      	b.n	801cbca <_malloc_r+0x22>
 801cc72:	42a3      	cmp	r3, r4
 801cc74:	6862      	ldr	r2, [r4, #4]
 801cc76:	d1dd      	bne.n	801cc34 <_malloc_r+0x8c>
 801cc78:	f8c8 2000 	str.w	r2, [r8]
 801cc7c:	e7ec      	b.n	801cc58 <_malloc_r+0xb0>
 801cc7e:	4623      	mov	r3, r4
 801cc80:	6864      	ldr	r4, [r4, #4]
 801cc82:	e7ac      	b.n	801cbde <_malloc_r+0x36>
 801cc84:	4634      	mov	r4, r6
 801cc86:	6876      	ldr	r6, [r6, #4]
 801cc88:	e7b4      	b.n	801cbf4 <_malloc_r+0x4c>
 801cc8a:	4613      	mov	r3, r2
 801cc8c:	e7cc      	b.n	801cc28 <_malloc_r+0x80>
 801cc8e:	230c      	movs	r3, #12
 801cc90:	603b      	str	r3, [r7, #0]
 801cc92:	4638      	mov	r0, r7
 801cc94:	f000 f80e 	bl	801ccb4 <__malloc_unlock>
 801cc98:	e797      	b.n	801cbca <_malloc_r+0x22>
 801cc9a:	6025      	str	r5, [r4, #0]
 801cc9c:	e7dc      	b.n	801cc58 <_malloc_r+0xb0>
 801cc9e:	605b      	str	r3, [r3, #4]
 801cca0:	deff      	udf	#255	; 0xff
 801cca2:	bf00      	nop
 801cca4:	24003628 	.word	0x24003628

0801cca8 <__malloc_lock>:
 801cca8:	4801      	ldr	r0, [pc, #4]	; (801ccb0 <__malloc_lock+0x8>)
 801ccaa:	f7ff b8f4 	b.w	801be96 <__retarget_lock_acquire_recursive>
 801ccae:	bf00      	nop
 801ccb0:	24003624 	.word	0x24003624

0801ccb4 <__malloc_unlock>:
 801ccb4:	4801      	ldr	r0, [pc, #4]	; (801ccbc <__malloc_unlock+0x8>)
 801ccb6:	f7ff b8ef 	b.w	801be98 <__retarget_lock_release_recursive>
 801ccba:	bf00      	nop
 801ccbc:	24003624 	.word	0x24003624

0801ccc0 <_Balloc>:
 801ccc0:	b570      	push	{r4, r5, r6, lr}
 801ccc2:	69c6      	ldr	r6, [r0, #28]
 801ccc4:	4604      	mov	r4, r0
 801ccc6:	460d      	mov	r5, r1
 801ccc8:	b976      	cbnz	r6, 801cce8 <_Balloc+0x28>
 801ccca:	2010      	movs	r0, #16
 801cccc:	f7ff ff44 	bl	801cb58 <malloc>
 801ccd0:	4602      	mov	r2, r0
 801ccd2:	61e0      	str	r0, [r4, #28]
 801ccd4:	b920      	cbnz	r0, 801cce0 <_Balloc+0x20>
 801ccd6:	4b18      	ldr	r3, [pc, #96]	; (801cd38 <_Balloc+0x78>)
 801ccd8:	4818      	ldr	r0, [pc, #96]	; (801cd3c <_Balloc+0x7c>)
 801ccda:	216b      	movs	r1, #107	; 0x6b
 801ccdc:	f002 f8d0 	bl	801ee80 <__assert_func>
 801cce0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801cce4:	6006      	str	r6, [r0, #0]
 801cce6:	60c6      	str	r6, [r0, #12]
 801cce8:	69e6      	ldr	r6, [r4, #28]
 801ccea:	68f3      	ldr	r3, [r6, #12]
 801ccec:	b183      	cbz	r3, 801cd10 <_Balloc+0x50>
 801ccee:	69e3      	ldr	r3, [r4, #28]
 801ccf0:	68db      	ldr	r3, [r3, #12]
 801ccf2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801ccf6:	b9b8      	cbnz	r0, 801cd28 <_Balloc+0x68>
 801ccf8:	2101      	movs	r1, #1
 801ccfa:	fa01 f605 	lsl.w	r6, r1, r5
 801ccfe:	1d72      	adds	r2, r6, #5
 801cd00:	0092      	lsls	r2, r2, #2
 801cd02:	4620      	mov	r0, r4
 801cd04:	f002 f8da 	bl	801eebc <_calloc_r>
 801cd08:	b160      	cbz	r0, 801cd24 <_Balloc+0x64>
 801cd0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801cd0e:	e00e      	b.n	801cd2e <_Balloc+0x6e>
 801cd10:	2221      	movs	r2, #33	; 0x21
 801cd12:	2104      	movs	r1, #4
 801cd14:	4620      	mov	r0, r4
 801cd16:	f002 f8d1 	bl	801eebc <_calloc_r>
 801cd1a:	69e3      	ldr	r3, [r4, #28]
 801cd1c:	60f0      	str	r0, [r6, #12]
 801cd1e:	68db      	ldr	r3, [r3, #12]
 801cd20:	2b00      	cmp	r3, #0
 801cd22:	d1e4      	bne.n	801ccee <_Balloc+0x2e>
 801cd24:	2000      	movs	r0, #0
 801cd26:	bd70      	pop	{r4, r5, r6, pc}
 801cd28:	6802      	ldr	r2, [r0, #0]
 801cd2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cd2e:	2300      	movs	r3, #0
 801cd30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801cd34:	e7f7      	b.n	801cd26 <_Balloc+0x66>
 801cd36:	bf00      	nop
 801cd38:	0802044c 	.word	0x0802044c
 801cd3c:	080204cc 	.word	0x080204cc

0801cd40 <_Bfree>:
 801cd40:	b570      	push	{r4, r5, r6, lr}
 801cd42:	69c6      	ldr	r6, [r0, #28]
 801cd44:	4605      	mov	r5, r0
 801cd46:	460c      	mov	r4, r1
 801cd48:	b976      	cbnz	r6, 801cd68 <_Bfree+0x28>
 801cd4a:	2010      	movs	r0, #16
 801cd4c:	f7ff ff04 	bl	801cb58 <malloc>
 801cd50:	4602      	mov	r2, r0
 801cd52:	61e8      	str	r0, [r5, #28]
 801cd54:	b920      	cbnz	r0, 801cd60 <_Bfree+0x20>
 801cd56:	4b09      	ldr	r3, [pc, #36]	; (801cd7c <_Bfree+0x3c>)
 801cd58:	4809      	ldr	r0, [pc, #36]	; (801cd80 <_Bfree+0x40>)
 801cd5a:	218f      	movs	r1, #143	; 0x8f
 801cd5c:	f002 f890 	bl	801ee80 <__assert_func>
 801cd60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801cd64:	6006      	str	r6, [r0, #0]
 801cd66:	60c6      	str	r6, [r0, #12]
 801cd68:	b13c      	cbz	r4, 801cd7a <_Bfree+0x3a>
 801cd6a:	69eb      	ldr	r3, [r5, #28]
 801cd6c:	6862      	ldr	r2, [r4, #4]
 801cd6e:	68db      	ldr	r3, [r3, #12]
 801cd70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801cd74:	6021      	str	r1, [r4, #0]
 801cd76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801cd7a:	bd70      	pop	{r4, r5, r6, pc}
 801cd7c:	0802044c 	.word	0x0802044c
 801cd80:	080204cc 	.word	0x080204cc

0801cd84 <__multadd>:
 801cd84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cd88:	690d      	ldr	r5, [r1, #16]
 801cd8a:	4607      	mov	r7, r0
 801cd8c:	460c      	mov	r4, r1
 801cd8e:	461e      	mov	r6, r3
 801cd90:	f101 0c14 	add.w	ip, r1, #20
 801cd94:	2000      	movs	r0, #0
 801cd96:	f8dc 3000 	ldr.w	r3, [ip]
 801cd9a:	b299      	uxth	r1, r3
 801cd9c:	fb02 6101 	mla	r1, r2, r1, r6
 801cda0:	0c1e      	lsrs	r6, r3, #16
 801cda2:	0c0b      	lsrs	r3, r1, #16
 801cda4:	fb02 3306 	mla	r3, r2, r6, r3
 801cda8:	b289      	uxth	r1, r1
 801cdaa:	3001      	adds	r0, #1
 801cdac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801cdb0:	4285      	cmp	r5, r0
 801cdb2:	f84c 1b04 	str.w	r1, [ip], #4
 801cdb6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801cdba:	dcec      	bgt.n	801cd96 <__multadd+0x12>
 801cdbc:	b30e      	cbz	r6, 801ce02 <__multadd+0x7e>
 801cdbe:	68a3      	ldr	r3, [r4, #8]
 801cdc0:	42ab      	cmp	r3, r5
 801cdc2:	dc19      	bgt.n	801cdf8 <__multadd+0x74>
 801cdc4:	6861      	ldr	r1, [r4, #4]
 801cdc6:	4638      	mov	r0, r7
 801cdc8:	3101      	adds	r1, #1
 801cdca:	f7ff ff79 	bl	801ccc0 <_Balloc>
 801cdce:	4680      	mov	r8, r0
 801cdd0:	b928      	cbnz	r0, 801cdde <__multadd+0x5a>
 801cdd2:	4602      	mov	r2, r0
 801cdd4:	4b0c      	ldr	r3, [pc, #48]	; (801ce08 <__multadd+0x84>)
 801cdd6:	480d      	ldr	r0, [pc, #52]	; (801ce0c <__multadd+0x88>)
 801cdd8:	21ba      	movs	r1, #186	; 0xba
 801cdda:	f002 f851 	bl	801ee80 <__assert_func>
 801cdde:	6922      	ldr	r2, [r4, #16]
 801cde0:	3202      	adds	r2, #2
 801cde2:	f104 010c 	add.w	r1, r4, #12
 801cde6:	0092      	lsls	r2, r2, #2
 801cde8:	300c      	adds	r0, #12
 801cdea:	f7ff f85e 	bl	801beaa <memcpy>
 801cdee:	4621      	mov	r1, r4
 801cdf0:	4638      	mov	r0, r7
 801cdf2:	f7ff ffa5 	bl	801cd40 <_Bfree>
 801cdf6:	4644      	mov	r4, r8
 801cdf8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801cdfc:	3501      	adds	r5, #1
 801cdfe:	615e      	str	r6, [r3, #20]
 801ce00:	6125      	str	r5, [r4, #16]
 801ce02:	4620      	mov	r0, r4
 801ce04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ce08:	080204bb 	.word	0x080204bb
 801ce0c:	080204cc 	.word	0x080204cc

0801ce10 <__s2b>:
 801ce10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ce14:	460c      	mov	r4, r1
 801ce16:	4615      	mov	r5, r2
 801ce18:	461f      	mov	r7, r3
 801ce1a:	2209      	movs	r2, #9
 801ce1c:	3308      	adds	r3, #8
 801ce1e:	4606      	mov	r6, r0
 801ce20:	fb93 f3f2 	sdiv	r3, r3, r2
 801ce24:	2100      	movs	r1, #0
 801ce26:	2201      	movs	r2, #1
 801ce28:	429a      	cmp	r2, r3
 801ce2a:	db09      	blt.n	801ce40 <__s2b+0x30>
 801ce2c:	4630      	mov	r0, r6
 801ce2e:	f7ff ff47 	bl	801ccc0 <_Balloc>
 801ce32:	b940      	cbnz	r0, 801ce46 <__s2b+0x36>
 801ce34:	4602      	mov	r2, r0
 801ce36:	4b19      	ldr	r3, [pc, #100]	; (801ce9c <__s2b+0x8c>)
 801ce38:	4819      	ldr	r0, [pc, #100]	; (801cea0 <__s2b+0x90>)
 801ce3a:	21d3      	movs	r1, #211	; 0xd3
 801ce3c:	f002 f820 	bl	801ee80 <__assert_func>
 801ce40:	0052      	lsls	r2, r2, #1
 801ce42:	3101      	adds	r1, #1
 801ce44:	e7f0      	b.n	801ce28 <__s2b+0x18>
 801ce46:	9b08      	ldr	r3, [sp, #32]
 801ce48:	6143      	str	r3, [r0, #20]
 801ce4a:	2d09      	cmp	r5, #9
 801ce4c:	f04f 0301 	mov.w	r3, #1
 801ce50:	6103      	str	r3, [r0, #16]
 801ce52:	dd16      	ble.n	801ce82 <__s2b+0x72>
 801ce54:	f104 0909 	add.w	r9, r4, #9
 801ce58:	46c8      	mov	r8, r9
 801ce5a:	442c      	add	r4, r5
 801ce5c:	f818 3b01 	ldrb.w	r3, [r8], #1
 801ce60:	4601      	mov	r1, r0
 801ce62:	3b30      	subs	r3, #48	; 0x30
 801ce64:	220a      	movs	r2, #10
 801ce66:	4630      	mov	r0, r6
 801ce68:	f7ff ff8c 	bl	801cd84 <__multadd>
 801ce6c:	45a0      	cmp	r8, r4
 801ce6e:	d1f5      	bne.n	801ce5c <__s2b+0x4c>
 801ce70:	f1a5 0408 	sub.w	r4, r5, #8
 801ce74:	444c      	add	r4, r9
 801ce76:	1b2d      	subs	r5, r5, r4
 801ce78:	1963      	adds	r3, r4, r5
 801ce7a:	42bb      	cmp	r3, r7
 801ce7c:	db04      	blt.n	801ce88 <__s2b+0x78>
 801ce7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ce82:	340a      	adds	r4, #10
 801ce84:	2509      	movs	r5, #9
 801ce86:	e7f6      	b.n	801ce76 <__s2b+0x66>
 801ce88:	f814 3b01 	ldrb.w	r3, [r4], #1
 801ce8c:	4601      	mov	r1, r0
 801ce8e:	3b30      	subs	r3, #48	; 0x30
 801ce90:	220a      	movs	r2, #10
 801ce92:	4630      	mov	r0, r6
 801ce94:	f7ff ff76 	bl	801cd84 <__multadd>
 801ce98:	e7ee      	b.n	801ce78 <__s2b+0x68>
 801ce9a:	bf00      	nop
 801ce9c:	080204bb 	.word	0x080204bb
 801cea0:	080204cc 	.word	0x080204cc

0801cea4 <__hi0bits>:
 801cea4:	0c03      	lsrs	r3, r0, #16
 801cea6:	041b      	lsls	r3, r3, #16
 801cea8:	b9d3      	cbnz	r3, 801cee0 <__hi0bits+0x3c>
 801ceaa:	0400      	lsls	r0, r0, #16
 801ceac:	2310      	movs	r3, #16
 801ceae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801ceb2:	bf04      	itt	eq
 801ceb4:	0200      	lsleq	r0, r0, #8
 801ceb6:	3308      	addeq	r3, #8
 801ceb8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801cebc:	bf04      	itt	eq
 801cebe:	0100      	lsleq	r0, r0, #4
 801cec0:	3304      	addeq	r3, #4
 801cec2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801cec6:	bf04      	itt	eq
 801cec8:	0080      	lsleq	r0, r0, #2
 801ceca:	3302      	addeq	r3, #2
 801cecc:	2800      	cmp	r0, #0
 801cece:	db05      	blt.n	801cedc <__hi0bits+0x38>
 801ced0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801ced4:	f103 0301 	add.w	r3, r3, #1
 801ced8:	bf08      	it	eq
 801ceda:	2320      	moveq	r3, #32
 801cedc:	4618      	mov	r0, r3
 801cede:	4770      	bx	lr
 801cee0:	2300      	movs	r3, #0
 801cee2:	e7e4      	b.n	801ceae <__hi0bits+0xa>

0801cee4 <__lo0bits>:
 801cee4:	6803      	ldr	r3, [r0, #0]
 801cee6:	f013 0207 	ands.w	r2, r3, #7
 801ceea:	d00c      	beq.n	801cf06 <__lo0bits+0x22>
 801ceec:	07d9      	lsls	r1, r3, #31
 801ceee:	d422      	bmi.n	801cf36 <__lo0bits+0x52>
 801cef0:	079a      	lsls	r2, r3, #30
 801cef2:	bf49      	itett	mi
 801cef4:	085b      	lsrmi	r3, r3, #1
 801cef6:	089b      	lsrpl	r3, r3, #2
 801cef8:	6003      	strmi	r3, [r0, #0]
 801cefa:	2201      	movmi	r2, #1
 801cefc:	bf5c      	itt	pl
 801cefe:	6003      	strpl	r3, [r0, #0]
 801cf00:	2202      	movpl	r2, #2
 801cf02:	4610      	mov	r0, r2
 801cf04:	4770      	bx	lr
 801cf06:	b299      	uxth	r1, r3
 801cf08:	b909      	cbnz	r1, 801cf0e <__lo0bits+0x2a>
 801cf0a:	0c1b      	lsrs	r3, r3, #16
 801cf0c:	2210      	movs	r2, #16
 801cf0e:	b2d9      	uxtb	r1, r3
 801cf10:	b909      	cbnz	r1, 801cf16 <__lo0bits+0x32>
 801cf12:	3208      	adds	r2, #8
 801cf14:	0a1b      	lsrs	r3, r3, #8
 801cf16:	0719      	lsls	r1, r3, #28
 801cf18:	bf04      	itt	eq
 801cf1a:	091b      	lsreq	r3, r3, #4
 801cf1c:	3204      	addeq	r2, #4
 801cf1e:	0799      	lsls	r1, r3, #30
 801cf20:	bf04      	itt	eq
 801cf22:	089b      	lsreq	r3, r3, #2
 801cf24:	3202      	addeq	r2, #2
 801cf26:	07d9      	lsls	r1, r3, #31
 801cf28:	d403      	bmi.n	801cf32 <__lo0bits+0x4e>
 801cf2a:	085b      	lsrs	r3, r3, #1
 801cf2c:	f102 0201 	add.w	r2, r2, #1
 801cf30:	d003      	beq.n	801cf3a <__lo0bits+0x56>
 801cf32:	6003      	str	r3, [r0, #0]
 801cf34:	e7e5      	b.n	801cf02 <__lo0bits+0x1e>
 801cf36:	2200      	movs	r2, #0
 801cf38:	e7e3      	b.n	801cf02 <__lo0bits+0x1e>
 801cf3a:	2220      	movs	r2, #32
 801cf3c:	e7e1      	b.n	801cf02 <__lo0bits+0x1e>
	...

0801cf40 <__i2b>:
 801cf40:	b510      	push	{r4, lr}
 801cf42:	460c      	mov	r4, r1
 801cf44:	2101      	movs	r1, #1
 801cf46:	f7ff febb 	bl	801ccc0 <_Balloc>
 801cf4a:	4602      	mov	r2, r0
 801cf4c:	b928      	cbnz	r0, 801cf5a <__i2b+0x1a>
 801cf4e:	4b05      	ldr	r3, [pc, #20]	; (801cf64 <__i2b+0x24>)
 801cf50:	4805      	ldr	r0, [pc, #20]	; (801cf68 <__i2b+0x28>)
 801cf52:	f240 1145 	movw	r1, #325	; 0x145
 801cf56:	f001 ff93 	bl	801ee80 <__assert_func>
 801cf5a:	2301      	movs	r3, #1
 801cf5c:	6144      	str	r4, [r0, #20]
 801cf5e:	6103      	str	r3, [r0, #16]
 801cf60:	bd10      	pop	{r4, pc}
 801cf62:	bf00      	nop
 801cf64:	080204bb 	.word	0x080204bb
 801cf68:	080204cc 	.word	0x080204cc

0801cf6c <__multiply>:
 801cf6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf70:	4691      	mov	r9, r2
 801cf72:	690a      	ldr	r2, [r1, #16]
 801cf74:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801cf78:	429a      	cmp	r2, r3
 801cf7a:	bfb8      	it	lt
 801cf7c:	460b      	movlt	r3, r1
 801cf7e:	460c      	mov	r4, r1
 801cf80:	bfbc      	itt	lt
 801cf82:	464c      	movlt	r4, r9
 801cf84:	4699      	movlt	r9, r3
 801cf86:	6927      	ldr	r7, [r4, #16]
 801cf88:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801cf8c:	68a3      	ldr	r3, [r4, #8]
 801cf8e:	6861      	ldr	r1, [r4, #4]
 801cf90:	eb07 060a 	add.w	r6, r7, sl
 801cf94:	42b3      	cmp	r3, r6
 801cf96:	b085      	sub	sp, #20
 801cf98:	bfb8      	it	lt
 801cf9a:	3101      	addlt	r1, #1
 801cf9c:	f7ff fe90 	bl	801ccc0 <_Balloc>
 801cfa0:	b930      	cbnz	r0, 801cfb0 <__multiply+0x44>
 801cfa2:	4602      	mov	r2, r0
 801cfa4:	4b44      	ldr	r3, [pc, #272]	; (801d0b8 <__multiply+0x14c>)
 801cfa6:	4845      	ldr	r0, [pc, #276]	; (801d0bc <__multiply+0x150>)
 801cfa8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801cfac:	f001 ff68 	bl	801ee80 <__assert_func>
 801cfb0:	f100 0514 	add.w	r5, r0, #20
 801cfb4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801cfb8:	462b      	mov	r3, r5
 801cfba:	2200      	movs	r2, #0
 801cfbc:	4543      	cmp	r3, r8
 801cfbe:	d321      	bcc.n	801d004 <__multiply+0x98>
 801cfc0:	f104 0314 	add.w	r3, r4, #20
 801cfc4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801cfc8:	f109 0314 	add.w	r3, r9, #20
 801cfcc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801cfd0:	9202      	str	r2, [sp, #8]
 801cfd2:	1b3a      	subs	r2, r7, r4
 801cfd4:	3a15      	subs	r2, #21
 801cfd6:	f022 0203 	bic.w	r2, r2, #3
 801cfda:	3204      	adds	r2, #4
 801cfdc:	f104 0115 	add.w	r1, r4, #21
 801cfe0:	428f      	cmp	r7, r1
 801cfe2:	bf38      	it	cc
 801cfe4:	2204      	movcc	r2, #4
 801cfe6:	9201      	str	r2, [sp, #4]
 801cfe8:	9a02      	ldr	r2, [sp, #8]
 801cfea:	9303      	str	r3, [sp, #12]
 801cfec:	429a      	cmp	r2, r3
 801cfee:	d80c      	bhi.n	801d00a <__multiply+0x9e>
 801cff0:	2e00      	cmp	r6, #0
 801cff2:	dd03      	ble.n	801cffc <__multiply+0x90>
 801cff4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801cff8:	2b00      	cmp	r3, #0
 801cffa:	d05b      	beq.n	801d0b4 <__multiply+0x148>
 801cffc:	6106      	str	r6, [r0, #16]
 801cffe:	b005      	add	sp, #20
 801d000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d004:	f843 2b04 	str.w	r2, [r3], #4
 801d008:	e7d8      	b.n	801cfbc <__multiply+0x50>
 801d00a:	f8b3 a000 	ldrh.w	sl, [r3]
 801d00e:	f1ba 0f00 	cmp.w	sl, #0
 801d012:	d024      	beq.n	801d05e <__multiply+0xf2>
 801d014:	f104 0e14 	add.w	lr, r4, #20
 801d018:	46a9      	mov	r9, r5
 801d01a:	f04f 0c00 	mov.w	ip, #0
 801d01e:	f85e 2b04 	ldr.w	r2, [lr], #4
 801d022:	f8d9 1000 	ldr.w	r1, [r9]
 801d026:	fa1f fb82 	uxth.w	fp, r2
 801d02a:	b289      	uxth	r1, r1
 801d02c:	fb0a 110b 	mla	r1, sl, fp, r1
 801d030:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801d034:	f8d9 2000 	ldr.w	r2, [r9]
 801d038:	4461      	add	r1, ip
 801d03a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801d03e:	fb0a c20b 	mla	r2, sl, fp, ip
 801d042:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801d046:	b289      	uxth	r1, r1
 801d048:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801d04c:	4577      	cmp	r7, lr
 801d04e:	f849 1b04 	str.w	r1, [r9], #4
 801d052:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801d056:	d8e2      	bhi.n	801d01e <__multiply+0xb2>
 801d058:	9a01      	ldr	r2, [sp, #4]
 801d05a:	f845 c002 	str.w	ip, [r5, r2]
 801d05e:	9a03      	ldr	r2, [sp, #12]
 801d060:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801d064:	3304      	adds	r3, #4
 801d066:	f1b9 0f00 	cmp.w	r9, #0
 801d06a:	d021      	beq.n	801d0b0 <__multiply+0x144>
 801d06c:	6829      	ldr	r1, [r5, #0]
 801d06e:	f104 0c14 	add.w	ip, r4, #20
 801d072:	46ae      	mov	lr, r5
 801d074:	f04f 0a00 	mov.w	sl, #0
 801d078:	f8bc b000 	ldrh.w	fp, [ip]
 801d07c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801d080:	fb09 220b 	mla	r2, r9, fp, r2
 801d084:	4452      	add	r2, sl
 801d086:	b289      	uxth	r1, r1
 801d088:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801d08c:	f84e 1b04 	str.w	r1, [lr], #4
 801d090:	f85c 1b04 	ldr.w	r1, [ip], #4
 801d094:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801d098:	f8be 1000 	ldrh.w	r1, [lr]
 801d09c:	fb09 110a 	mla	r1, r9, sl, r1
 801d0a0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801d0a4:	4567      	cmp	r7, ip
 801d0a6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801d0aa:	d8e5      	bhi.n	801d078 <__multiply+0x10c>
 801d0ac:	9a01      	ldr	r2, [sp, #4]
 801d0ae:	50a9      	str	r1, [r5, r2]
 801d0b0:	3504      	adds	r5, #4
 801d0b2:	e799      	b.n	801cfe8 <__multiply+0x7c>
 801d0b4:	3e01      	subs	r6, #1
 801d0b6:	e79b      	b.n	801cff0 <__multiply+0x84>
 801d0b8:	080204bb 	.word	0x080204bb
 801d0bc:	080204cc 	.word	0x080204cc

0801d0c0 <__pow5mult>:
 801d0c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d0c4:	4615      	mov	r5, r2
 801d0c6:	f012 0203 	ands.w	r2, r2, #3
 801d0ca:	4606      	mov	r6, r0
 801d0cc:	460f      	mov	r7, r1
 801d0ce:	d007      	beq.n	801d0e0 <__pow5mult+0x20>
 801d0d0:	4c25      	ldr	r4, [pc, #148]	; (801d168 <__pow5mult+0xa8>)
 801d0d2:	3a01      	subs	r2, #1
 801d0d4:	2300      	movs	r3, #0
 801d0d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d0da:	f7ff fe53 	bl	801cd84 <__multadd>
 801d0de:	4607      	mov	r7, r0
 801d0e0:	10ad      	asrs	r5, r5, #2
 801d0e2:	d03d      	beq.n	801d160 <__pow5mult+0xa0>
 801d0e4:	69f4      	ldr	r4, [r6, #28]
 801d0e6:	b97c      	cbnz	r4, 801d108 <__pow5mult+0x48>
 801d0e8:	2010      	movs	r0, #16
 801d0ea:	f7ff fd35 	bl	801cb58 <malloc>
 801d0ee:	4602      	mov	r2, r0
 801d0f0:	61f0      	str	r0, [r6, #28]
 801d0f2:	b928      	cbnz	r0, 801d100 <__pow5mult+0x40>
 801d0f4:	4b1d      	ldr	r3, [pc, #116]	; (801d16c <__pow5mult+0xac>)
 801d0f6:	481e      	ldr	r0, [pc, #120]	; (801d170 <__pow5mult+0xb0>)
 801d0f8:	f240 11b3 	movw	r1, #435	; 0x1b3
 801d0fc:	f001 fec0 	bl	801ee80 <__assert_func>
 801d100:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d104:	6004      	str	r4, [r0, #0]
 801d106:	60c4      	str	r4, [r0, #12]
 801d108:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801d10c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d110:	b94c      	cbnz	r4, 801d126 <__pow5mult+0x66>
 801d112:	f240 2171 	movw	r1, #625	; 0x271
 801d116:	4630      	mov	r0, r6
 801d118:	f7ff ff12 	bl	801cf40 <__i2b>
 801d11c:	2300      	movs	r3, #0
 801d11e:	f8c8 0008 	str.w	r0, [r8, #8]
 801d122:	4604      	mov	r4, r0
 801d124:	6003      	str	r3, [r0, #0]
 801d126:	f04f 0900 	mov.w	r9, #0
 801d12a:	07eb      	lsls	r3, r5, #31
 801d12c:	d50a      	bpl.n	801d144 <__pow5mult+0x84>
 801d12e:	4639      	mov	r1, r7
 801d130:	4622      	mov	r2, r4
 801d132:	4630      	mov	r0, r6
 801d134:	f7ff ff1a 	bl	801cf6c <__multiply>
 801d138:	4639      	mov	r1, r7
 801d13a:	4680      	mov	r8, r0
 801d13c:	4630      	mov	r0, r6
 801d13e:	f7ff fdff 	bl	801cd40 <_Bfree>
 801d142:	4647      	mov	r7, r8
 801d144:	106d      	asrs	r5, r5, #1
 801d146:	d00b      	beq.n	801d160 <__pow5mult+0xa0>
 801d148:	6820      	ldr	r0, [r4, #0]
 801d14a:	b938      	cbnz	r0, 801d15c <__pow5mult+0x9c>
 801d14c:	4622      	mov	r2, r4
 801d14e:	4621      	mov	r1, r4
 801d150:	4630      	mov	r0, r6
 801d152:	f7ff ff0b 	bl	801cf6c <__multiply>
 801d156:	6020      	str	r0, [r4, #0]
 801d158:	f8c0 9000 	str.w	r9, [r0]
 801d15c:	4604      	mov	r4, r0
 801d15e:	e7e4      	b.n	801d12a <__pow5mult+0x6a>
 801d160:	4638      	mov	r0, r7
 801d162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d166:	bf00      	nop
 801d168:	08020618 	.word	0x08020618
 801d16c:	0802044c 	.word	0x0802044c
 801d170:	080204cc 	.word	0x080204cc

0801d174 <__lshift>:
 801d174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d178:	460c      	mov	r4, r1
 801d17a:	6849      	ldr	r1, [r1, #4]
 801d17c:	6923      	ldr	r3, [r4, #16]
 801d17e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801d182:	68a3      	ldr	r3, [r4, #8]
 801d184:	4607      	mov	r7, r0
 801d186:	4691      	mov	r9, r2
 801d188:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d18c:	f108 0601 	add.w	r6, r8, #1
 801d190:	42b3      	cmp	r3, r6
 801d192:	db0b      	blt.n	801d1ac <__lshift+0x38>
 801d194:	4638      	mov	r0, r7
 801d196:	f7ff fd93 	bl	801ccc0 <_Balloc>
 801d19a:	4605      	mov	r5, r0
 801d19c:	b948      	cbnz	r0, 801d1b2 <__lshift+0x3e>
 801d19e:	4602      	mov	r2, r0
 801d1a0:	4b28      	ldr	r3, [pc, #160]	; (801d244 <__lshift+0xd0>)
 801d1a2:	4829      	ldr	r0, [pc, #164]	; (801d248 <__lshift+0xd4>)
 801d1a4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801d1a8:	f001 fe6a 	bl	801ee80 <__assert_func>
 801d1ac:	3101      	adds	r1, #1
 801d1ae:	005b      	lsls	r3, r3, #1
 801d1b0:	e7ee      	b.n	801d190 <__lshift+0x1c>
 801d1b2:	2300      	movs	r3, #0
 801d1b4:	f100 0114 	add.w	r1, r0, #20
 801d1b8:	f100 0210 	add.w	r2, r0, #16
 801d1bc:	4618      	mov	r0, r3
 801d1be:	4553      	cmp	r3, sl
 801d1c0:	db33      	blt.n	801d22a <__lshift+0xb6>
 801d1c2:	6920      	ldr	r0, [r4, #16]
 801d1c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d1c8:	f104 0314 	add.w	r3, r4, #20
 801d1cc:	f019 091f 	ands.w	r9, r9, #31
 801d1d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d1d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801d1d8:	d02b      	beq.n	801d232 <__lshift+0xbe>
 801d1da:	f1c9 0e20 	rsb	lr, r9, #32
 801d1de:	468a      	mov	sl, r1
 801d1e0:	2200      	movs	r2, #0
 801d1e2:	6818      	ldr	r0, [r3, #0]
 801d1e4:	fa00 f009 	lsl.w	r0, r0, r9
 801d1e8:	4310      	orrs	r0, r2
 801d1ea:	f84a 0b04 	str.w	r0, [sl], #4
 801d1ee:	f853 2b04 	ldr.w	r2, [r3], #4
 801d1f2:	459c      	cmp	ip, r3
 801d1f4:	fa22 f20e 	lsr.w	r2, r2, lr
 801d1f8:	d8f3      	bhi.n	801d1e2 <__lshift+0x6e>
 801d1fa:	ebac 0304 	sub.w	r3, ip, r4
 801d1fe:	3b15      	subs	r3, #21
 801d200:	f023 0303 	bic.w	r3, r3, #3
 801d204:	3304      	adds	r3, #4
 801d206:	f104 0015 	add.w	r0, r4, #21
 801d20a:	4584      	cmp	ip, r0
 801d20c:	bf38      	it	cc
 801d20e:	2304      	movcc	r3, #4
 801d210:	50ca      	str	r2, [r1, r3]
 801d212:	b10a      	cbz	r2, 801d218 <__lshift+0xa4>
 801d214:	f108 0602 	add.w	r6, r8, #2
 801d218:	3e01      	subs	r6, #1
 801d21a:	4638      	mov	r0, r7
 801d21c:	612e      	str	r6, [r5, #16]
 801d21e:	4621      	mov	r1, r4
 801d220:	f7ff fd8e 	bl	801cd40 <_Bfree>
 801d224:	4628      	mov	r0, r5
 801d226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d22a:	f842 0f04 	str.w	r0, [r2, #4]!
 801d22e:	3301      	adds	r3, #1
 801d230:	e7c5      	b.n	801d1be <__lshift+0x4a>
 801d232:	3904      	subs	r1, #4
 801d234:	f853 2b04 	ldr.w	r2, [r3], #4
 801d238:	f841 2f04 	str.w	r2, [r1, #4]!
 801d23c:	459c      	cmp	ip, r3
 801d23e:	d8f9      	bhi.n	801d234 <__lshift+0xc0>
 801d240:	e7ea      	b.n	801d218 <__lshift+0xa4>
 801d242:	bf00      	nop
 801d244:	080204bb 	.word	0x080204bb
 801d248:	080204cc 	.word	0x080204cc

0801d24c <__mcmp>:
 801d24c:	b530      	push	{r4, r5, lr}
 801d24e:	6902      	ldr	r2, [r0, #16]
 801d250:	690c      	ldr	r4, [r1, #16]
 801d252:	1b12      	subs	r2, r2, r4
 801d254:	d10e      	bne.n	801d274 <__mcmp+0x28>
 801d256:	f100 0314 	add.w	r3, r0, #20
 801d25a:	3114      	adds	r1, #20
 801d25c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801d260:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801d264:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801d268:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801d26c:	42a5      	cmp	r5, r4
 801d26e:	d003      	beq.n	801d278 <__mcmp+0x2c>
 801d270:	d305      	bcc.n	801d27e <__mcmp+0x32>
 801d272:	2201      	movs	r2, #1
 801d274:	4610      	mov	r0, r2
 801d276:	bd30      	pop	{r4, r5, pc}
 801d278:	4283      	cmp	r3, r0
 801d27a:	d3f3      	bcc.n	801d264 <__mcmp+0x18>
 801d27c:	e7fa      	b.n	801d274 <__mcmp+0x28>
 801d27e:	f04f 32ff 	mov.w	r2, #4294967295
 801d282:	e7f7      	b.n	801d274 <__mcmp+0x28>

0801d284 <__mdiff>:
 801d284:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d288:	460c      	mov	r4, r1
 801d28a:	4606      	mov	r6, r0
 801d28c:	4611      	mov	r1, r2
 801d28e:	4620      	mov	r0, r4
 801d290:	4690      	mov	r8, r2
 801d292:	f7ff ffdb 	bl	801d24c <__mcmp>
 801d296:	1e05      	subs	r5, r0, #0
 801d298:	d110      	bne.n	801d2bc <__mdiff+0x38>
 801d29a:	4629      	mov	r1, r5
 801d29c:	4630      	mov	r0, r6
 801d29e:	f7ff fd0f 	bl	801ccc0 <_Balloc>
 801d2a2:	b930      	cbnz	r0, 801d2b2 <__mdiff+0x2e>
 801d2a4:	4b3a      	ldr	r3, [pc, #232]	; (801d390 <__mdiff+0x10c>)
 801d2a6:	4602      	mov	r2, r0
 801d2a8:	f240 2137 	movw	r1, #567	; 0x237
 801d2ac:	4839      	ldr	r0, [pc, #228]	; (801d394 <__mdiff+0x110>)
 801d2ae:	f001 fde7 	bl	801ee80 <__assert_func>
 801d2b2:	2301      	movs	r3, #1
 801d2b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801d2b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2bc:	bfa4      	itt	ge
 801d2be:	4643      	movge	r3, r8
 801d2c0:	46a0      	movge	r8, r4
 801d2c2:	4630      	mov	r0, r6
 801d2c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801d2c8:	bfa6      	itte	ge
 801d2ca:	461c      	movge	r4, r3
 801d2cc:	2500      	movge	r5, #0
 801d2ce:	2501      	movlt	r5, #1
 801d2d0:	f7ff fcf6 	bl	801ccc0 <_Balloc>
 801d2d4:	b920      	cbnz	r0, 801d2e0 <__mdiff+0x5c>
 801d2d6:	4b2e      	ldr	r3, [pc, #184]	; (801d390 <__mdiff+0x10c>)
 801d2d8:	4602      	mov	r2, r0
 801d2da:	f240 2145 	movw	r1, #581	; 0x245
 801d2de:	e7e5      	b.n	801d2ac <__mdiff+0x28>
 801d2e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801d2e4:	6926      	ldr	r6, [r4, #16]
 801d2e6:	60c5      	str	r5, [r0, #12]
 801d2e8:	f104 0914 	add.w	r9, r4, #20
 801d2ec:	f108 0514 	add.w	r5, r8, #20
 801d2f0:	f100 0e14 	add.w	lr, r0, #20
 801d2f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801d2f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801d2fc:	f108 0210 	add.w	r2, r8, #16
 801d300:	46f2      	mov	sl, lr
 801d302:	2100      	movs	r1, #0
 801d304:	f859 3b04 	ldr.w	r3, [r9], #4
 801d308:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801d30c:	fa11 f88b 	uxtah	r8, r1, fp
 801d310:	b299      	uxth	r1, r3
 801d312:	0c1b      	lsrs	r3, r3, #16
 801d314:	eba8 0801 	sub.w	r8, r8, r1
 801d318:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801d31c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801d320:	fa1f f888 	uxth.w	r8, r8
 801d324:	1419      	asrs	r1, r3, #16
 801d326:	454e      	cmp	r6, r9
 801d328:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801d32c:	f84a 3b04 	str.w	r3, [sl], #4
 801d330:	d8e8      	bhi.n	801d304 <__mdiff+0x80>
 801d332:	1b33      	subs	r3, r6, r4
 801d334:	3b15      	subs	r3, #21
 801d336:	f023 0303 	bic.w	r3, r3, #3
 801d33a:	3304      	adds	r3, #4
 801d33c:	3415      	adds	r4, #21
 801d33e:	42a6      	cmp	r6, r4
 801d340:	bf38      	it	cc
 801d342:	2304      	movcc	r3, #4
 801d344:	441d      	add	r5, r3
 801d346:	4473      	add	r3, lr
 801d348:	469e      	mov	lr, r3
 801d34a:	462e      	mov	r6, r5
 801d34c:	4566      	cmp	r6, ip
 801d34e:	d30e      	bcc.n	801d36e <__mdiff+0xea>
 801d350:	f10c 0203 	add.w	r2, ip, #3
 801d354:	1b52      	subs	r2, r2, r5
 801d356:	f022 0203 	bic.w	r2, r2, #3
 801d35a:	3d03      	subs	r5, #3
 801d35c:	45ac      	cmp	ip, r5
 801d35e:	bf38      	it	cc
 801d360:	2200      	movcc	r2, #0
 801d362:	4413      	add	r3, r2
 801d364:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801d368:	b17a      	cbz	r2, 801d38a <__mdiff+0x106>
 801d36a:	6107      	str	r7, [r0, #16]
 801d36c:	e7a4      	b.n	801d2b8 <__mdiff+0x34>
 801d36e:	f856 8b04 	ldr.w	r8, [r6], #4
 801d372:	fa11 f288 	uxtah	r2, r1, r8
 801d376:	1414      	asrs	r4, r2, #16
 801d378:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801d37c:	b292      	uxth	r2, r2
 801d37e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801d382:	f84e 2b04 	str.w	r2, [lr], #4
 801d386:	1421      	asrs	r1, r4, #16
 801d388:	e7e0      	b.n	801d34c <__mdiff+0xc8>
 801d38a:	3f01      	subs	r7, #1
 801d38c:	e7ea      	b.n	801d364 <__mdiff+0xe0>
 801d38e:	bf00      	nop
 801d390:	080204bb 	.word	0x080204bb
 801d394:	080204cc 	.word	0x080204cc

0801d398 <__ulp>:
 801d398:	b082      	sub	sp, #8
 801d39a:	ed8d 0b00 	vstr	d0, [sp]
 801d39e:	9a01      	ldr	r2, [sp, #4]
 801d3a0:	4b0f      	ldr	r3, [pc, #60]	; (801d3e0 <__ulp+0x48>)
 801d3a2:	4013      	ands	r3, r2
 801d3a4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801d3a8:	2b00      	cmp	r3, #0
 801d3aa:	dc08      	bgt.n	801d3be <__ulp+0x26>
 801d3ac:	425b      	negs	r3, r3
 801d3ae:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801d3b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 801d3b6:	da04      	bge.n	801d3c2 <__ulp+0x2a>
 801d3b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801d3bc:	4113      	asrs	r3, r2
 801d3be:	2200      	movs	r2, #0
 801d3c0:	e008      	b.n	801d3d4 <__ulp+0x3c>
 801d3c2:	f1a2 0314 	sub.w	r3, r2, #20
 801d3c6:	2b1e      	cmp	r3, #30
 801d3c8:	bfda      	itte	le
 801d3ca:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801d3ce:	40da      	lsrle	r2, r3
 801d3d0:	2201      	movgt	r2, #1
 801d3d2:	2300      	movs	r3, #0
 801d3d4:	4619      	mov	r1, r3
 801d3d6:	4610      	mov	r0, r2
 801d3d8:	ec41 0b10 	vmov	d0, r0, r1
 801d3dc:	b002      	add	sp, #8
 801d3de:	4770      	bx	lr
 801d3e0:	7ff00000 	.word	0x7ff00000

0801d3e4 <__b2d>:
 801d3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d3e8:	6906      	ldr	r6, [r0, #16]
 801d3ea:	f100 0814 	add.w	r8, r0, #20
 801d3ee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801d3f2:	1f37      	subs	r7, r6, #4
 801d3f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801d3f8:	4610      	mov	r0, r2
 801d3fa:	f7ff fd53 	bl	801cea4 <__hi0bits>
 801d3fe:	f1c0 0320 	rsb	r3, r0, #32
 801d402:	280a      	cmp	r0, #10
 801d404:	600b      	str	r3, [r1, #0]
 801d406:	491b      	ldr	r1, [pc, #108]	; (801d474 <__b2d+0x90>)
 801d408:	dc15      	bgt.n	801d436 <__b2d+0x52>
 801d40a:	f1c0 0c0b 	rsb	ip, r0, #11
 801d40e:	fa22 f30c 	lsr.w	r3, r2, ip
 801d412:	45b8      	cmp	r8, r7
 801d414:	ea43 0501 	orr.w	r5, r3, r1
 801d418:	bf34      	ite	cc
 801d41a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d41e:	2300      	movcs	r3, #0
 801d420:	3015      	adds	r0, #21
 801d422:	fa02 f000 	lsl.w	r0, r2, r0
 801d426:	fa23 f30c 	lsr.w	r3, r3, ip
 801d42a:	4303      	orrs	r3, r0
 801d42c:	461c      	mov	r4, r3
 801d42e:	ec45 4b10 	vmov	d0, r4, r5
 801d432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d436:	45b8      	cmp	r8, r7
 801d438:	bf3a      	itte	cc
 801d43a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d43e:	f1a6 0708 	subcc.w	r7, r6, #8
 801d442:	2300      	movcs	r3, #0
 801d444:	380b      	subs	r0, #11
 801d446:	d012      	beq.n	801d46e <__b2d+0x8a>
 801d448:	f1c0 0120 	rsb	r1, r0, #32
 801d44c:	fa23 f401 	lsr.w	r4, r3, r1
 801d450:	4082      	lsls	r2, r0
 801d452:	4322      	orrs	r2, r4
 801d454:	4547      	cmp	r7, r8
 801d456:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801d45a:	bf8c      	ite	hi
 801d45c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801d460:	2200      	movls	r2, #0
 801d462:	4083      	lsls	r3, r0
 801d464:	40ca      	lsrs	r2, r1
 801d466:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801d46a:	4313      	orrs	r3, r2
 801d46c:	e7de      	b.n	801d42c <__b2d+0x48>
 801d46e:	ea42 0501 	orr.w	r5, r2, r1
 801d472:	e7db      	b.n	801d42c <__b2d+0x48>
 801d474:	3ff00000 	.word	0x3ff00000

0801d478 <__d2b>:
 801d478:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d47c:	460f      	mov	r7, r1
 801d47e:	2101      	movs	r1, #1
 801d480:	ec59 8b10 	vmov	r8, r9, d0
 801d484:	4616      	mov	r6, r2
 801d486:	f7ff fc1b 	bl	801ccc0 <_Balloc>
 801d48a:	4604      	mov	r4, r0
 801d48c:	b930      	cbnz	r0, 801d49c <__d2b+0x24>
 801d48e:	4602      	mov	r2, r0
 801d490:	4b24      	ldr	r3, [pc, #144]	; (801d524 <__d2b+0xac>)
 801d492:	4825      	ldr	r0, [pc, #148]	; (801d528 <__d2b+0xb0>)
 801d494:	f240 310f 	movw	r1, #783	; 0x30f
 801d498:	f001 fcf2 	bl	801ee80 <__assert_func>
 801d49c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801d4a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d4a4:	bb2d      	cbnz	r5, 801d4f2 <__d2b+0x7a>
 801d4a6:	9301      	str	r3, [sp, #4]
 801d4a8:	f1b8 0300 	subs.w	r3, r8, #0
 801d4ac:	d026      	beq.n	801d4fc <__d2b+0x84>
 801d4ae:	4668      	mov	r0, sp
 801d4b0:	9300      	str	r3, [sp, #0]
 801d4b2:	f7ff fd17 	bl	801cee4 <__lo0bits>
 801d4b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 801d4ba:	b1e8      	cbz	r0, 801d4f8 <__d2b+0x80>
 801d4bc:	f1c0 0320 	rsb	r3, r0, #32
 801d4c0:	fa02 f303 	lsl.w	r3, r2, r3
 801d4c4:	430b      	orrs	r3, r1
 801d4c6:	40c2      	lsrs	r2, r0
 801d4c8:	6163      	str	r3, [r4, #20]
 801d4ca:	9201      	str	r2, [sp, #4]
 801d4cc:	9b01      	ldr	r3, [sp, #4]
 801d4ce:	61a3      	str	r3, [r4, #24]
 801d4d0:	2b00      	cmp	r3, #0
 801d4d2:	bf14      	ite	ne
 801d4d4:	2202      	movne	r2, #2
 801d4d6:	2201      	moveq	r2, #1
 801d4d8:	6122      	str	r2, [r4, #16]
 801d4da:	b1bd      	cbz	r5, 801d50c <__d2b+0x94>
 801d4dc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801d4e0:	4405      	add	r5, r0
 801d4e2:	603d      	str	r5, [r7, #0]
 801d4e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801d4e8:	6030      	str	r0, [r6, #0]
 801d4ea:	4620      	mov	r0, r4
 801d4ec:	b003      	add	sp, #12
 801d4ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d4f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d4f6:	e7d6      	b.n	801d4a6 <__d2b+0x2e>
 801d4f8:	6161      	str	r1, [r4, #20]
 801d4fa:	e7e7      	b.n	801d4cc <__d2b+0x54>
 801d4fc:	a801      	add	r0, sp, #4
 801d4fe:	f7ff fcf1 	bl	801cee4 <__lo0bits>
 801d502:	9b01      	ldr	r3, [sp, #4]
 801d504:	6163      	str	r3, [r4, #20]
 801d506:	3020      	adds	r0, #32
 801d508:	2201      	movs	r2, #1
 801d50a:	e7e5      	b.n	801d4d8 <__d2b+0x60>
 801d50c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d510:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d514:	6038      	str	r0, [r7, #0]
 801d516:	6918      	ldr	r0, [r3, #16]
 801d518:	f7ff fcc4 	bl	801cea4 <__hi0bits>
 801d51c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d520:	e7e2      	b.n	801d4e8 <__d2b+0x70>
 801d522:	bf00      	nop
 801d524:	080204bb 	.word	0x080204bb
 801d528:	080204cc 	.word	0x080204cc

0801d52c <__ratio>:
 801d52c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d530:	4688      	mov	r8, r1
 801d532:	4669      	mov	r1, sp
 801d534:	4681      	mov	r9, r0
 801d536:	f7ff ff55 	bl	801d3e4 <__b2d>
 801d53a:	a901      	add	r1, sp, #4
 801d53c:	4640      	mov	r0, r8
 801d53e:	ec55 4b10 	vmov	r4, r5, d0
 801d542:	ee10 aa10 	vmov	sl, s0
 801d546:	f7ff ff4d 	bl	801d3e4 <__b2d>
 801d54a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801d54e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801d552:	1ad2      	subs	r2, r2, r3
 801d554:	e9dd 3100 	ldrd	r3, r1, [sp]
 801d558:	1a5b      	subs	r3, r3, r1
 801d55a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801d55e:	ec57 6b10 	vmov	r6, r7, d0
 801d562:	2b00      	cmp	r3, #0
 801d564:	bfd6      	itet	le
 801d566:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801d56a:	462a      	movgt	r2, r5
 801d56c:	463a      	movle	r2, r7
 801d56e:	46ab      	mov	fp, r5
 801d570:	bfd6      	itet	le
 801d572:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801d576:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801d57a:	ee00 3a90 	vmovle	s1, r3
 801d57e:	ec4b ab17 	vmov	d7, sl, fp
 801d582:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801d586:	b003      	add	sp, #12
 801d588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d58c <__copybits>:
 801d58c:	3901      	subs	r1, #1
 801d58e:	b570      	push	{r4, r5, r6, lr}
 801d590:	1149      	asrs	r1, r1, #5
 801d592:	6914      	ldr	r4, [r2, #16]
 801d594:	3101      	adds	r1, #1
 801d596:	f102 0314 	add.w	r3, r2, #20
 801d59a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d59e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d5a2:	1f05      	subs	r5, r0, #4
 801d5a4:	42a3      	cmp	r3, r4
 801d5a6:	d30c      	bcc.n	801d5c2 <__copybits+0x36>
 801d5a8:	1aa3      	subs	r3, r4, r2
 801d5aa:	3b11      	subs	r3, #17
 801d5ac:	f023 0303 	bic.w	r3, r3, #3
 801d5b0:	3211      	adds	r2, #17
 801d5b2:	42a2      	cmp	r2, r4
 801d5b4:	bf88      	it	hi
 801d5b6:	2300      	movhi	r3, #0
 801d5b8:	4418      	add	r0, r3
 801d5ba:	2300      	movs	r3, #0
 801d5bc:	4288      	cmp	r0, r1
 801d5be:	d305      	bcc.n	801d5cc <__copybits+0x40>
 801d5c0:	bd70      	pop	{r4, r5, r6, pc}
 801d5c2:	f853 6b04 	ldr.w	r6, [r3], #4
 801d5c6:	f845 6f04 	str.w	r6, [r5, #4]!
 801d5ca:	e7eb      	b.n	801d5a4 <__copybits+0x18>
 801d5cc:	f840 3b04 	str.w	r3, [r0], #4
 801d5d0:	e7f4      	b.n	801d5bc <__copybits+0x30>

0801d5d2 <__any_on>:
 801d5d2:	f100 0214 	add.w	r2, r0, #20
 801d5d6:	6900      	ldr	r0, [r0, #16]
 801d5d8:	114b      	asrs	r3, r1, #5
 801d5da:	4298      	cmp	r0, r3
 801d5dc:	b510      	push	{r4, lr}
 801d5de:	db11      	blt.n	801d604 <__any_on+0x32>
 801d5e0:	dd0a      	ble.n	801d5f8 <__any_on+0x26>
 801d5e2:	f011 011f 	ands.w	r1, r1, #31
 801d5e6:	d007      	beq.n	801d5f8 <__any_on+0x26>
 801d5e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801d5ec:	fa24 f001 	lsr.w	r0, r4, r1
 801d5f0:	fa00 f101 	lsl.w	r1, r0, r1
 801d5f4:	428c      	cmp	r4, r1
 801d5f6:	d10b      	bne.n	801d610 <__any_on+0x3e>
 801d5f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d5fc:	4293      	cmp	r3, r2
 801d5fe:	d803      	bhi.n	801d608 <__any_on+0x36>
 801d600:	2000      	movs	r0, #0
 801d602:	bd10      	pop	{r4, pc}
 801d604:	4603      	mov	r3, r0
 801d606:	e7f7      	b.n	801d5f8 <__any_on+0x26>
 801d608:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d60c:	2900      	cmp	r1, #0
 801d60e:	d0f5      	beq.n	801d5fc <__any_on+0x2a>
 801d610:	2001      	movs	r0, #1
 801d612:	e7f6      	b.n	801d602 <__any_on+0x30>

0801d614 <sulp>:
 801d614:	b570      	push	{r4, r5, r6, lr}
 801d616:	4604      	mov	r4, r0
 801d618:	460d      	mov	r5, r1
 801d61a:	4616      	mov	r6, r2
 801d61c:	ec45 4b10 	vmov	d0, r4, r5
 801d620:	f7ff feba 	bl	801d398 <__ulp>
 801d624:	b17e      	cbz	r6, 801d646 <sulp+0x32>
 801d626:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801d62a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801d62e:	2b00      	cmp	r3, #0
 801d630:	dd09      	ble.n	801d646 <sulp+0x32>
 801d632:	051b      	lsls	r3, r3, #20
 801d634:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801d638:	2000      	movs	r0, #0
 801d63a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 801d63e:	ec41 0b17 	vmov	d7, r0, r1
 801d642:	ee20 0b07 	vmul.f64	d0, d0, d7
 801d646:	bd70      	pop	{r4, r5, r6, pc}

0801d648 <_strtod_l>:
 801d648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d64c:	ed2d 8b0e 	vpush	{d8-d14}
 801d650:	b097      	sub	sp, #92	; 0x5c
 801d652:	4604      	mov	r4, r0
 801d654:	920d      	str	r2, [sp, #52]	; 0x34
 801d656:	2200      	movs	r2, #0
 801d658:	9212      	str	r2, [sp, #72]	; 0x48
 801d65a:	468a      	mov	sl, r1
 801d65c:	f04f 0800 	mov.w	r8, #0
 801d660:	f04f 0900 	mov.w	r9, #0
 801d664:	460a      	mov	r2, r1
 801d666:	9211      	str	r2, [sp, #68]	; 0x44
 801d668:	7811      	ldrb	r1, [r2, #0]
 801d66a:	292b      	cmp	r1, #43	; 0x2b
 801d66c:	d04c      	beq.n	801d708 <_strtod_l+0xc0>
 801d66e:	d839      	bhi.n	801d6e4 <_strtod_l+0x9c>
 801d670:	290d      	cmp	r1, #13
 801d672:	d833      	bhi.n	801d6dc <_strtod_l+0x94>
 801d674:	2908      	cmp	r1, #8
 801d676:	d833      	bhi.n	801d6e0 <_strtod_l+0x98>
 801d678:	2900      	cmp	r1, #0
 801d67a:	d03c      	beq.n	801d6f6 <_strtod_l+0xae>
 801d67c:	2200      	movs	r2, #0
 801d67e:	9208      	str	r2, [sp, #32]
 801d680:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801d682:	7832      	ldrb	r2, [r6, #0]
 801d684:	2a30      	cmp	r2, #48	; 0x30
 801d686:	f040 80b8 	bne.w	801d7fa <_strtod_l+0x1b2>
 801d68a:	7872      	ldrb	r2, [r6, #1]
 801d68c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 801d690:	2a58      	cmp	r2, #88	; 0x58
 801d692:	d170      	bne.n	801d776 <_strtod_l+0x12e>
 801d694:	9302      	str	r3, [sp, #8]
 801d696:	9b08      	ldr	r3, [sp, #32]
 801d698:	9301      	str	r3, [sp, #4]
 801d69a:	ab12      	add	r3, sp, #72	; 0x48
 801d69c:	9300      	str	r3, [sp, #0]
 801d69e:	4a91      	ldr	r2, [pc, #580]	; (801d8e4 <_strtod_l+0x29c>)
 801d6a0:	ab13      	add	r3, sp, #76	; 0x4c
 801d6a2:	a911      	add	r1, sp, #68	; 0x44
 801d6a4:	4620      	mov	r0, r4
 801d6a6:	f001 fc87 	bl	801efb8 <__gethex>
 801d6aa:	f010 070f 	ands.w	r7, r0, #15
 801d6ae:	4605      	mov	r5, r0
 801d6b0:	d005      	beq.n	801d6be <_strtod_l+0x76>
 801d6b2:	2f06      	cmp	r7, #6
 801d6b4:	d12a      	bne.n	801d70c <_strtod_l+0xc4>
 801d6b6:	3601      	adds	r6, #1
 801d6b8:	2300      	movs	r3, #0
 801d6ba:	9611      	str	r6, [sp, #68]	; 0x44
 801d6bc:	9308      	str	r3, [sp, #32]
 801d6be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d6c0:	2b00      	cmp	r3, #0
 801d6c2:	f040 8555 	bne.w	801e170 <_strtod_l+0xb28>
 801d6c6:	9b08      	ldr	r3, [sp, #32]
 801d6c8:	ec49 8b10 	vmov	d0, r8, r9
 801d6cc:	b1cb      	cbz	r3, 801d702 <_strtod_l+0xba>
 801d6ce:	eeb1 0b40 	vneg.f64	d0, d0
 801d6d2:	b017      	add	sp, #92	; 0x5c
 801d6d4:	ecbd 8b0e 	vpop	{d8-d14}
 801d6d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d6dc:	2920      	cmp	r1, #32
 801d6de:	d1cd      	bne.n	801d67c <_strtod_l+0x34>
 801d6e0:	3201      	adds	r2, #1
 801d6e2:	e7c0      	b.n	801d666 <_strtod_l+0x1e>
 801d6e4:	292d      	cmp	r1, #45	; 0x2d
 801d6e6:	d1c9      	bne.n	801d67c <_strtod_l+0x34>
 801d6e8:	2101      	movs	r1, #1
 801d6ea:	9108      	str	r1, [sp, #32]
 801d6ec:	1c51      	adds	r1, r2, #1
 801d6ee:	9111      	str	r1, [sp, #68]	; 0x44
 801d6f0:	7852      	ldrb	r2, [r2, #1]
 801d6f2:	2a00      	cmp	r2, #0
 801d6f4:	d1c4      	bne.n	801d680 <_strtod_l+0x38>
 801d6f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d6f8:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 801d6fc:	2b00      	cmp	r3, #0
 801d6fe:	f040 8535 	bne.w	801e16c <_strtod_l+0xb24>
 801d702:	ec49 8b10 	vmov	d0, r8, r9
 801d706:	e7e4      	b.n	801d6d2 <_strtod_l+0x8a>
 801d708:	2100      	movs	r1, #0
 801d70a:	e7ee      	b.n	801d6ea <_strtod_l+0xa2>
 801d70c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d70e:	b13a      	cbz	r2, 801d720 <_strtod_l+0xd8>
 801d710:	2135      	movs	r1, #53	; 0x35
 801d712:	a814      	add	r0, sp, #80	; 0x50
 801d714:	f7ff ff3a 	bl	801d58c <__copybits>
 801d718:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d71a:	4620      	mov	r0, r4
 801d71c:	f7ff fb10 	bl	801cd40 <_Bfree>
 801d720:	1e7b      	subs	r3, r7, #1
 801d722:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d724:	2b04      	cmp	r3, #4
 801d726:	d806      	bhi.n	801d736 <_strtod_l+0xee>
 801d728:	e8df f003 	tbb	[pc, r3]
 801d72c:	201d0314 	.word	0x201d0314
 801d730:	14          	.byte	0x14
 801d731:	00          	.byte	0x00
 801d732:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 801d736:	05eb      	lsls	r3, r5, #23
 801d738:	bf48      	it	mi
 801d73a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801d73e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801d742:	0d1b      	lsrs	r3, r3, #20
 801d744:	051b      	lsls	r3, r3, #20
 801d746:	2b00      	cmp	r3, #0
 801d748:	d1b9      	bne.n	801d6be <_strtod_l+0x76>
 801d74a:	f7fe fb79 	bl	801be40 <__errno>
 801d74e:	2322      	movs	r3, #34	; 0x22
 801d750:	6003      	str	r3, [r0, #0]
 801d752:	e7b4      	b.n	801d6be <_strtod_l+0x76>
 801d754:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 801d758:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801d75c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801d760:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801d764:	e7e7      	b.n	801d736 <_strtod_l+0xee>
 801d766:	f8df 9184 	ldr.w	r9, [pc, #388]	; 801d8ec <_strtod_l+0x2a4>
 801d76a:	e7e4      	b.n	801d736 <_strtod_l+0xee>
 801d76c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801d770:	f04f 38ff 	mov.w	r8, #4294967295
 801d774:	e7df      	b.n	801d736 <_strtod_l+0xee>
 801d776:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d778:	1c5a      	adds	r2, r3, #1
 801d77a:	9211      	str	r2, [sp, #68]	; 0x44
 801d77c:	785b      	ldrb	r3, [r3, #1]
 801d77e:	2b30      	cmp	r3, #48	; 0x30
 801d780:	d0f9      	beq.n	801d776 <_strtod_l+0x12e>
 801d782:	2b00      	cmp	r3, #0
 801d784:	d09b      	beq.n	801d6be <_strtod_l+0x76>
 801d786:	2301      	movs	r3, #1
 801d788:	9306      	str	r3, [sp, #24]
 801d78a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d78c:	9309      	str	r3, [sp, #36]	; 0x24
 801d78e:	2300      	movs	r3, #0
 801d790:	9305      	str	r3, [sp, #20]
 801d792:	9307      	str	r3, [sp, #28]
 801d794:	461e      	mov	r6, r3
 801d796:	220a      	movs	r2, #10
 801d798:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d79a:	7805      	ldrb	r5, [r0, #0]
 801d79c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 801d7a0:	b2d9      	uxtb	r1, r3
 801d7a2:	2909      	cmp	r1, #9
 801d7a4:	d92b      	bls.n	801d7fe <_strtod_l+0x1b6>
 801d7a6:	4950      	ldr	r1, [pc, #320]	; (801d8e8 <_strtod_l+0x2a0>)
 801d7a8:	2201      	movs	r2, #1
 801d7aa:	f001 fb3c 	bl	801ee26 <strncmp>
 801d7ae:	2800      	cmp	r0, #0
 801d7b0:	d035      	beq.n	801d81e <_strtod_l+0x1d6>
 801d7b2:	2000      	movs	r0, #0
 801d7b4:	462a      	mov	r2, r5
 801d7b6:	4633      	mov	r3, r6
 801d7b8:	4683      	mov	fp, r0
 801d7ba:	4601      	mov	r1, r0
 801d7bc:	2a65      	cmp	r2, #101	; 0x65
 801d7be:	d001      	beq.n	801d7c4 <_strtod_l+0x17c>
 801d7c0:	2a45      	cmp	r2, #69	; 0x45
 801d7c2:	d118      	bne.n	801d7f6 <_strtod_l+0x1ae>
 801d7c4:	b91b      	cbnz	r3, 801d7ce <_strtod_l+0x186>
 801d7c6:	9b06      	ldr	r3, [sp, #24]
 801d7c8:	4303      	orrs	r3, r0
 801d7ca:	d094      	beq.n	801d6f6 <_strtod_l+0xae>
 801d7cc:	2300      	movs	r3, #0
 801d7ce:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 801d7d2:	f10a 0201 	add.w	r2, sl, #1
 801d7d6:	9211      	str	r2, [sp, #68]	; 0x44
 801d7d8:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801d7dc:	2a2b      	cmp	r2, #43	; 0x2b
 801d7de:	d075      	beq.n	801d8cc <_strtod_l+0x284>
 801d7e0:	2a2d      	cmp	r2, #45	; 0x2d
 801d7e2:	d07b      	beq.n	801d8dc <_strtod_l+0x294>
 801d7e4:	f04f 0e00 	mov.w	lr, #0
 801d7e8:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 801d7ec:	2d09      	cmp	r5, #9
 801d7ee:	f240 8083 	bls.w	801d8f8 <_strtod_l+0x2b0>
 801d7f2:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 801d7f6:	2500      	movs	r5, #0
 801d7f8:	e09e      	b.n	801d938 <_strtod_l+0x2f0>
 801d7fa:	2300      	movs	r3, #0
 801d7fc:	e7c4      	b.n	801d788 <_strtod_l+0x140>
 801d7fe:	2e08      	cmp	r6, #8
 801d800:	bfd5      	itete	le
 801d802:	9907      	ldrle	r1, [sp, #28]
 801d804:	9905      	ldrgt	r1, [sp, #20]
 801d806:	fb02 3301 	mlale	r3, r2, r1, r3
 801d80a:	fb02 3301 	mlagt	r3, r2, r1, r3
 801d80e:	f100 0001 	add.w	r0, r0, #1
 801d812:	bfd4      	ite	le
 801d814:	9307      	strle	r3, [sp, #28]
 801d816:	9305      	strgt	r3, [sp, #20]
 801d818:	3601      	adds	r6, #1
 801d81a:	9011      	str	r0, [sp, #68]	; 0x44
 801d81c:	e7bc      	b.n	801d798 <_strtod_l+0x150>
 801d81e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d820:	1c5a      	adds	r2, r3, #1
 801d822:	9211      	str	r2, [sp, #68]	; 0x44
 801d824:	785a      	ldrb	r2, [r3, #1]
 801d826:	b3ae      	cbz	r6, 801d894 <_strtod_l+0x24c>
 801d828:	4683      	mov	fp, r0
 801d82a:	4633      	mov	r3, r6
 801d82c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801d830:	2909      	cmp	r1, #9
 801d832:	d912      	bls.n	801d85a <_strtod_l+0x212>
 801d834:	2101      	movs	r1, #1
 801d836:	e7c1      	b.n	801d7bc <_strtod_l+0x174>
 801d838:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d83a:	1c5a      	adds	r2, r3, #1
 801d83c:	9211      	str	r2, [sp, #68]	; 0x44
 801d83e:	785a      	ldrb	r2, [r3, #1]
 801d840:	3001      	adds	r0, #1
 801d842:	2a30      	cmp	r2, #48	; 0x30
 801d844:	d0f8      	beq.n	801d838 <_strtod_l+0x1f0>
 801d846:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801d84a:	2b08      	cmp	r3, #8
 801d84c:	f200 8495 	bhi.w	801e17a <_strtod_l+0xb32>
 801d850:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d852:	9309      	str	r3, [sp, #36]	; 0x24
 801d854:	4683      	mov	fp, r0
 801d856:	2000      	movs	r0, #0
 801d858:	4603      	mov	r3, r0
 801d85a:	3a30      	subs	r2, #48	; 0x30
 801d85c:	f100 0101 	add.w	r1, r0, #1
 801d860:	d012      	beq.n	801d888 <_strtod_l+0x240>
 801d862:	448b      	add	fp, r1
 801d864:	eb00 0c03 	add.w	ip, r0, r3
 801d868:	4619      	mov	r1, r3
 801d86a:	250a      	movs	r5, #10
 801d86c:	4561      	cmp	r1, ip
 801d86e:	d113      	bne.n	801d898 <_strtod_l+0x250>
 801d870:	1819      	adds	r1, r3, r0
 801d872:	2908      	cmp	r1, #8
 801d874:	f103 0301 	add.w	r3, r3, #1
 801d878:	4403      	add	r3, r0
 801d87a:	dc1b      	bgt.n	801d8b4 <_strtod_l+0x26c>
 801d87c:	9807      	ldr	r0, [sp, #28]
 801d87e:	210a      	movs	r1, #10
 801d880:	fb01 2200 	mla	r2, r1, r0, r2
 801d884:	9207      	str	r2, [sp, #28]
 801d886:	2100      	movs	r1, #0
 801d888:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d88a:	1c50      	adds	r0, r2, #1
 801d88c:	9011      	str	r0, [sp, #68]	; 0x44
 801d88e:	7852      	ldrb	r2, [r2, #1]
 801d890:	4608      	mov	r0, r1
 801d892:	e7cb      	b.n	801d82c <_strtod_l+0x1e4>
 801d894:	4630      	mov	r0, r6
 801d896:	e7d4      	b.n	801d842 <_strtod_l+0x1fa>
 801d898:	2908      	cmp	r1, #8
 801d89a:	f101 0101 	add.w	r1, r1, #1
 801d89e:	dc03      	bgt.n	801d8a8 <_strtod_l+0x260>
 801d8a0:	9f07      	ldr	r7, [sp, #28]
 801d8a2:	436f      	muls	r7, r5
 801d8a4:	9707      	str	r7, [sp, #28]
 801d8a6:	e7e1      	b.n	801d86c <_strtod_l+0x224>
 801d8a8:	2910      	cmp	r1, #16
 801d8aa:	bfde      	ittt	le
 801d8ac:	9f05      	ldrle	r7, [sp, #20]
 801d8ae:	436f      	mulle	r7, r5
 801d8b0:	9705      	strle	r7, [sp, #20]
 801d8b2:	e7db      	b.n	801d86c <_strtod_l+0x224>
 801d8b4:	2b10      	cmp	r3, #16
 801d8b6:	bfdf      	itttt	le
 801d8b8:	9805      	ldrle	r0, [sp, #20]
 801d8ba:	210a      	movle	r1, #10
 801d8bc:	fb01 2200 	mlale	r2, r1, r0, r2
 801d8c0:	9205      	strle	r2, [sp, #20]
 801d8c2:	e7e0      	b.n	801d886 <_strtod_l+0x23e>
 801d8c4:	f04f 0b00 	mov.w	fp, #0
 801d8c8:	2101      	movs	r1, #1
 801d8ca:	e77c      	b.n	801d7c6 <_strtod_l+0x17e>
 801d8cc:	f04f 0e00 	mov.w	lr, #0
 801d8d0:	f10a 0202 	add.w	r2, sl, #2
 801d8d4:	9211      	str	r2, [sp, #68]	; 0x44
 801d8d6:	f89a 2002 	ldrb.w	r2, [sl, #2]
 801d8da:	e785      	b.n	801d7e8 <_strtod_l+0x1a0>
 801d8dc:	f04f 0e01 	mov.w	lr, #1
 801d8e0:	e7f6      	b.n	801d8d0 <_strtod_l+0x288>
 801d8e2:	bf00      	nop
 801d8e4:	08020628 	.word	0x08020628
 801d8e8:	08020624 	.word	0x08020624
 801d8ec:	7ff00000 	.word	0x7ff00000
 801d8f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d8f2:	1c55      	adds	r5, r2, #1
 801d8f4:	9511      	str	r5, [sp, #68]	; 0x44
 801d8f6:	7852      	ldrb	r2, [r2, #1]
 801d8f8:	2a30      	cmp	r2, #48	; 0x30
 801d8fa:	d0f9      	beq.n	801d8f0 <_strtod_l+0x2a8>
 801d8fc:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 801d900:	2d08      	cmp	r5, #8
 801d902:	f63f af78 	bhi.w	801d7f6 <_strtod_l+0x1ae>
 801d906:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 801d90a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d90c:	920a      	str	r2, [sp, #40]	; 0x28
 801d90e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d910:	1c55      	adds	r5, r2, #1
 801d912:	9511      	str	r5, [sp, #68]	; 0x44
 801d914:	7852      	ldrb	r2, [r2, #1]
 801d916:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 801d91a:	2f09      	cmp	r7, #9
 801d91c:	d937      	bls.n	801d98e <_strtod_l+0x346>
 801d91e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801d920:	1bed      	subs	r5, r5, r7
 801d922:	2d08      	cmp	r5, #8
 801d924:	f644 651f 	movw	r5, #19999	; 0x4e1f
 801d928:	dc02      	bgt.n	801d930 <_strtod_l+0x2e8>
 801d92a:	4565      	cmp	r5, ip
 801d92c:	bfa8      	it	ge
 801d92e:	4665      	movge	r5, ip
 801d930:	f1be 0f00 	cmp.w	lr, #0
 801d934:	d000      	beq.n	801d938 <_strtod_l+0x2f0>
 801d936:	426d      	negs	r5, r5
 801d938:	2b00      	cmp	r3, #0
 801d93a:	d14d      	bne.n	801d9d8 <_strtod_l+0x390>
 801d93c:	9b06      	ldr	r3, [sp, #24]
 801d93e:	4303      	orrs	r3, r0
 801d940:	f47f aebd 	bne.w	801d6be <_strtod_l+0x76>
 801d944:	2900      	cmp	r1, #0
 801d946:	f47f aed6 	bne.w	801d6f6 <_strtod_l+0xae>
 801d94a:	2a69      	cmp	r2, #105	; 0x69
 801d94c:	d027      	beq.n	801d99e <_strtod_l+0x356>
 801d94e:	dc24      	bgt.n	801d99a <_strtod_l+0x352>
 801d950:	2a49      	cmp	r2, #73	; 0x49
 801d952:	d024      	beq.n	801d99e <_strtod_l+0x356>
 801d954:	2a4e      	cmp	r2, #78	; 0x4e
 801d956:	f47f aece 	bne.w	801d6f6 <_strtod_l+0xae>
 801d95a:	4995      	ldr	r1, [pc, #596]	; (801dbb0 <_strtod_l+0x568>)
 801d95c:	a811      	add	r0, sp, #68	; 0x44
 801d95e:	f001 fd6b 	bl	801f438 <__match>
 801d962:	2800      	cmp	r0, #0
 801d964:	f43f aec7 	beq.w	801d6f6 <_strtod_l+0xae>
 801d968:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d96a:	781b      	ldrb	r3, [r3, #0]
 801d96c:	2b28      	cmp	r3, #40	; 0x28
 801d96e:	d12d      	bne.n	801d9cc <_strtod_l+0x384>
 801d970:	4990      	ldr	r1, [pc, #576]	; (801dbb4 <_strtod_l+0x56c>)
 801d972:	aa14      	add	r2, sp, #80	; 0x50
 801d974:	a811      	add	r0, sp, #68	; 0x44
 801d976:	f001 fd73 	bl	801f460 <__hexnan>
 801d97a:	2805      	cmp	r0, #5
 801d97c:	d126      	bne.n	801d9cc <_strtod_l+0x384>
 801d97e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d980:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801d984:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801d988:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801d98c:	e697      	b.n	801d6be <_strtod_l+0x76>
 801d98e:	250a      	movs	r5, #10
 801d990:	fb05 2c0c 	mla	ip, r5, ip, r2
 801d994:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 801d998:	e7b9      	b.n	801d90e <_strtod_l+0x2c6>
 801d99a:	2a6e      	cmp	r2, #110	; 0x6e
 801d99c:	e7db      	b.n	801d956 <_strtod_l+0x30e>
 801d99e:	4986      	ldr	r1, [pc, #536]	; (801dbb8 <_strtod_l+0x570>)
 801d9a0:	a811      	add	r0, sp, #68	; 0x44
 801d9a2:	f001 fd49 	bl	801f438 <__match>
 801d9a6:	2800      	cmp	r0, #0
 801d9a8:	f43f aea5 	beq.w	801d6f6 <_strtod_l+0xae>
 801d9ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d9ae:	4983      	ldr	r1, [pc, #524]	; (801dbbc <_strtod_l+0x574>)
 801d9b0:	3b01      	subs	r3, #1
 801d9b2:	a811      	add	r0, sp, #68	; 0x44
 801d9b4:	9311      	str	r3, [sp, #68]	; 0x44
 801d9b6:	f001 fd3f 	bl	801f438 <__match>
 801d9ba:	b910      	cbnz	r0, 801d9c2 <_strtod_l+0x37a>
 801d9bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d9be:	3301      	adds	r3, #1
 801d9c0:	9311      	str	r3, [sp, #68]	; 0x44
 801d9c2:	f8df 920c 	ldr.w	r9, [pc, #524]	; 801dbd0 <_strtod_l+0x588>
 801d9c6:	f04f 0800 	mov.w	r8, #0
 801d9ca:	e678      	b.n	801d6be <_strtod_l+0x76>
 801d9cc:	487c      	ldr	r0, [pc, #496]	; (801dbc0 <_strtod_l+0x578>)
 801d9ce:	f001 fa4f 	bl	801ee70 <nan>
 801d9d2:	ec59 8b10 	vmov	r8, r9, d0
 801d9d6:	e672      	b.n	801d6be <_strtod_l+0x76>
 801d9d8:	eddd 7a07 	vldr	s15, [sp, #28]
 801d9dc:	eba5 020b 	sub.w	r2, r5, fp
 801d9e0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801d9e4:	2e00      	cmp	r6, #0
 801d9e6:	bf08      	it	eq
 801d9e8:	461e      	moveq	r6, r3
 801d9ea:	2b10      	cmp	r3, #16
 801d9ec:	9206      	str	r2, [sp, #24]
 801d9ee:	461a      	mov	r2, r3
 801d9f0:	bfa8      	it	ge
 801d9f2:	2210      	movge	r2, #16
 801d9f4:	2b09      	cmp	r3, #9
 801d9f6:	ec59 8b17 	vmov	r8, r9, d7
 801d9fa:	dd0c      	ble.n	801da16 <_strtod_l+0x3ce>
 801d9fc:	4971      	ldr	r1, [pc, #452]	; (801dbc4 <_strtod_l+0x57c>)
 801d9fe:	eddd 6a05 	vldr	s13, [sp, #20]
 801da02:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801da06:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 801da0a:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801da0e:	eea7 6b05 	vfma.f64	d6, d7, d5
 801da12:	ec59 8b16 	vmov	r8, r9, d6
 801da16:	2b0f      	cmp	r3, #15
 801da18:	dc37      	bgt.n	801da8a <_strtod_l+0x442>
 801da1a:	9906      	ldr	r1, [sp, #24]
 801da1c:	2900      	cmp	r1, #0
 801da1e:	f43f ae4e 	beq.w	801d6be <_strtod_l+0x76>
 801da22:	dd23      	ble.n	801da6c <_strtod_l+0x424>
 801da24:	2916      	cmp	r1, #22
 801da26:	dc0b      	bgt.n	801da40 <_strtod_l+0x3f8>
 801da28:	4b66      	ldr	r3, [pc, #408]	; (801dbc4 <_strtod_l+0x57c>)
 801da2a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801da2e:	ed93 7b00 	vldr	d7, [r3]
 801da32:	ec49 8b16 	vmov	d6, r8, r9
 801da36:	ee27 7b06 	vmul.f64	d7, d7, d6
 801da3a:	ec59 8b17 	vmov	r8, r9, d7
 801da3e:	e63e      	b.n	801d6be <_strtod_l+0x76>
 801da40:	9806      	ldr	r0, [sp, #24]
 801da42:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801da46:	4281      	cmp	r1, r0
 801da48:	db1f      	blt.n	801da8a <_strtod_l+0x442>
 801da4a:	4a5e      	ldr	r2, [pc, #376]	; (801dbc4 <_strtod_l+0x57c>)
 801da4c:	f1c3 030f 	rsb	r3, r3, #15
 801da50:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801da54:	ed91 7b00 	vldr	d7, [r1]
 801da58:	ec49 8b16 	vmov	d6, r8, r9
 801da5c:	1ac3      	subs	r3, r0, r3
 801da5e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801da62:	ee27 7b06 	vmul.f64	d7, d7, d6
 801da66:	ed92 6b00 	vldr	d6, [r2]
 801da6a:	e7e4      	b.n	801da36 <_strtod_l+0x3ee>
 801da6c:	9906      	ldr	r1, [sp, #24]
 801da6e:	3116      	adds	r1, #22
 801da70:	db0b      	blt.n	801da8a <_strtod_l+0x442>
 801da72:	4b54      	ldr	r3, [pc, #336]	; (801dbc4 <_strtod_l+0x57c>)
 801da74:	ebab 0505 	sub.w	r5, fp, r5
 801da78:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801da7c:	ed95 7b00 	vldr	d7, [r5]
 801da80:	ec49 8b16 	vmov	d6, r8, r9
 801da84:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801da88:	e7d7      	b.n	801da3a <_strtod_l+0x3f2>
 801da8a:	9906      	ldr	r1, [sp, #24]
 801da8c:	1a9a      	subs	r2, r3, r2
 801da8e:	440a      	add	r2, r1
 801da90:	2a00      	cmp	r2, #0
 801da92:	dd6e      	ble.n	801db72 <_strtod_l+0x52a>
 801da94:	f012 000f 	ands.w	r0, r2, #15
 801da98:	d00a      	beq.n	801dab0 <_strtod_l+0x468>
 801da9a:	494a      	ldr	r1, [pc, #296]	; (801dbc4 <_strtod_l+0x57c>)
 801da9c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801daa0:	ed91 7b00 	vldr	d7, [r1]
 801daa4:	ec49 8b16 	vmov	d6, r8, r9
 801daa8:	ee27 7b06 	vmul.f64	d7, d7, d6
 801daac:	ec59 8b17 	vmov	r8, r9, d7
 801dab0:	f032 020f 	bics.w	r2, r2, #15
 801dab4:	d04e      	beq.n	801db54 <_strtod_l+0x50c>
 801dab6:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801daba:	dd22      	ble.n	801db02 <_strtod_l+0x4ba>
 801dabc:	2500      	movs	r5, #0
 801dabe:	462e      	mov	r6, r5
 801dac0:	9507      	str	r5, [sp, #28]
 801dac2:	462f      	mov	r7, r5
 801dac4:	2322      	movs	r3, #34	; 0x22
 801dac6:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801dbd0 <_strtod_l+0x588>
 801daca:	6023      	str	r3, [r4, #0]
 801dacc:	f04f 0800 	mov.w	r8, #0
 801dad0:	9b07      	ldr	r3, [sp, #28]
 801dad2:	2b00      	cmp	r3, #0
 801dad4:	f43f adf3 	beq.w	801d6be <_strtod_l+0x76>
 801dad8:	9912      	ldr	r1, [sp, #72]	; 0x48
 801dada:	4620      	mov	r0, r4
 801dadc:	f7ff f930 	bl	801cd40 <_Bfree>
 801dae0:	4639      	mov	r1, r7
 801dae2:	4620      	mov	r0, r4
 801dae4:	f7ff f92c 	bl	801cd40 <_Bfree>
 801dae8:	4631      	mov	r1, r6
 801daea:	4620      	mov	r0, r4
 801daec:	f7ff f928 	bl	801cd40 <_Bfree>
 801daf0:	9907      	ldr	r1, [sp, #28]
 801daf2:	4620      	mov	r0, r4
 801daf4:	f7ff f924 	bl	801cd40 <_Bfree>
 801daf8:	4629      	mov	r1, r5
 801dafa:	4620      	mov	r0, r4
 801dafc:	f7ff f920 	bl	801cd40 <_Bfree>
 801db00:	e5dd      	b.n	801d6be <_strtod_l+0x76>
 801db02:	2000      	movs	r0, #0
 801db04:	ec49 8b17 	vmov	d7, r8, r9
 801db08:	4f2f      	ldr	r7, [pc, #188]	; (801dbc8 <_strtod_l+0x580>)
 801db0a:	1112      	asrs	r2, r2, #4
 801db0c:	4601      	mov	r1, r0
 801db0e:	2a01      	cmp	r2, #1
 801db10:	dc23      	bgt.n	801db5a <_strtod_l+0x512>
 801db12:	b108      	cbz	r0, 801db18 <_strtod_l+0x4d0>
 801db14:	ec59 8b17 	vmov	r8, r9, d7
 801db18:	4a2b      	ldr	r2, [pc, #172]	; (801dbc8 <_strtod_l+0x580>)
 801db1a:	482c      	ldr	r0, [pc, #176]	; (801dbcc <_strtod_l+0x584>)
 801db1c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801db20:	ed92 7b00 	vldr	d7, [r2]
 801db24:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801db28:	ec49 8b16 	vmov	d6, r8, r9
 801db2c:	4a28      	ldr	r2, [pc, #160]	; (801dbd0 <_strtod_l+0x588>)
 801db2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801db32:	ee17 1a90 	vmov	r1, s15
 801db36:	400a      	ands	r2, r1
 801db38:	4282      	cmp	r2, r0
 801db3a:	ec59 8b17 	vmov	r8, r9, d7
 801db3e:	d8bd      	bhi.n	801dabc <_strtod_l+0x474>
 801db40:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801db44:	4282      	cmp	r2, r0
 801db46:	bf86      	itte	hi
 801db48:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 801dbd4 <_strtod_l+0x58c>
 801db4c:	f04f 38ff 	movhi.w	r8, #4294967295
 801db50:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801db54:	2200      	movs	r2, #0
 801db56:	9205      	str	r2, [sp, #20]
 801db58:	e076      	b.n	801dc48 <_strtod_l+0x600>
 801db5a:	f012 0f01 	tst.w	r2, #1
 801db5e:	d004      	beq.n	801db6a <_strtod_l+0x522>
 801db60:	ed97 6b00 	vldr	d6, [r7]
 801db64:	2001      	movs	r0, #1
 801db66:	ee27 7b06 	vmul.f64	d7, d7, d6
 801db6a:	3101      	adds	r1, #1
 801db6c:	1052      	asrs	r2, r2, #1
 801db6e:	3708      	adds	r7, #8
 801db70:	e7cd      	b.n	801db0e <_strtod_l+0x4c6>
 801db72:	d0ef      	beq.n	801db54 <_strtod_l+0x50c>
 801db74:	4252      	negs	r2, r2
 801db76:	f012 000f 	ands.w	r0, r2, #15
 801db7a:	d00a      	beq.n	801db92 <_strtod_l+0x54a>
 801db7c:	4911      	ldr	r1, [pc, #68]	; (801dbc4 <_strtod_l+0x57c>)
 801db7e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801db82:	ed91 7b00 	vldr	d7, [r1]
 801db86:	ec49 8b16 	vmov	d6, r8, r9
 801db8a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801db8e:	ec59 8b17 	vmov	r8, r9, d7
 801db92:	1112      	asrs	r2, r2, #4
 801db94:	d0de      	beq.n	801db54 <_strtod_l+0x50c>
 801db96:	2a1f      	cmp	r2, #31
 801db98:	dd1e      	ble.n	801dbd8 <_strtod_l+0x590>
 801db9a:	2500      	movs	r5, #0
 801db9c:	462e      	mov	r6, r5
 801db9e:	9507      	str	r5, [sp, #28]
 801dba0:	462f      	mov	r7, r5
 801dba2:	2322      	movs	r3, #34	; 0x22
 801dba4:	f04f 0800 	mov.w	r8, #0
 801dba8:	f04f 0900 	mov.w	r9, #0
 801dbac:	6023      	str	r3, [r4, #0]
 801dbae:	e78f      	b.n	801dad0 <_strtod_l+0x488>
 801dbb0:	08020415 	.word	0x08020415
 801dbb4:	0802063c 	.word	0x0802063c
 801dbb8:	0802040d 	.word	0x0802040d
 801dbbc:	08020442 	.word	0x08020442
 801dbc0:	080207e8 	.word	0x080207e8
 801dbc4:	08020550 	.word	0x08020550
 801dbc8:	08020528 	.word	0x08020528
 801dbcc:	7ca00000 	.word	0x7ca00000
 801dbd0:	7ff00000 	.word	0x7ff00000
 801dbd4:	7fefffff 	.word	0x7fefffff
 801dbd8:	f012 0110 	ands.w	r1, r2, #16
 801dbdc:	bf18      	it	ne
 801dbde:	216a      	movne	r1, #106	; 0x6a
 801dbe0:	9105      	str	r1, [sp, #20]
 801dbe2:	ec49 8b17 	vmov	d7, r8, r9
 801dbe6:	49be      	ldr	r1, [pc, #760]	; (801dee0 <_strtod_l+0x898>)
 801dbe8:	2000      	movs	r0, #0
 801dbea:	07d7      	lsls	r7, r2, #31
 801dbec:	d504      	bpl.n	801dbf8 <_strtod_l+0x5b0>
 801dbee:	ed91 6b00 	vldr	d6, [r1]
 801dbf2:	2001      	movs	r0, #1
 801dbf4:	ee27 7b06 	vmul.f64	d7, d7, d6
 801dbf8:	1052      	asrs	r2, r2, #1
 801dbfa:	f101 0108 	add.w	r1, r1, #8
 801dbfe:	d1f4      	bne.n	801dbea <_strtod_l+0x5a2>
 801dc00:	b108      	cbz	r0, 801dc06 <_strtod_l+0x5be>
 801dc02:	ec59 8b17 	vmov	r8, r9, d7
 801dc06:	9a05      	ldr	r2, [sp, #20]
 801dc08:	b1ba      	cbz	r2, 801dc3a <_strtod_l+0x5f2>
 801dc0a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 801dc0e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 801dc12:	2a00      	cmp	r2, #0
 801dc14:	4648      	mov	r0, r9
 801dc16:	dd10      	ble.n	801dc3a <_strtod_l+0x5f2>
 801dc18:	2a1f      	cmp	r2, #31
 801dc1a:	f340 812c 	ble.w	801de76 <_strtod_l+0x82e>
 801dc1e:	2a34      	cmp	r2, #52	; 0x34
 801dc20:	bfde      	ittt	le
 801dc22:	f04f 32ff 	movle.w	r2, #4294967295
 801dc26:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 801dc2a:	408a      	lslle	r2, r1
 801dc2c:	f04f 0800 	mov.w	r8, #0
 801dc30:	bfcc      	ite	gt
 801dc32:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801dc36:	ea02 0900 	andle.w	r9, r2, r0
 801dc3a:	ec49 8b17 	vmov	d7, r8, r9
 801dc3e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801dc42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dc46:	d0a8      	beq.n	801db9a <_strtod_l+0x552>
 801dc48:	9a07      	ldr	r2, [sp, #28]
 801dc4a:	9200      	str	r2, [sp, #0]
 801dc4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801dc4e:	4632      	mov	r2, r6
 801dc50:	4620      	mov	r0, r4
 801dc52:	f7ff f8dd 	bl	801ce10 <__s2b>
 801dc56:	9007      	str	r0, [sp, #28]
 801dc58:	2800      	cmp	r0, #0
 801dc5a:	f43f af2f 	beq.w	801dabc <_strtod_l+0x474>
 801dc5e:	9a06      	ldr	r2, [sp, #24]
 801dc60:	2a00      	cmp	r2, #0
 801dc62:	ebab 0305 	sub.w	r3, fp, r5
 801dc66:	ed9f 9b96 	vldr	d9, [pc, #600]	; 801dec0 <_strtod_l+0x878>
 801dc6a:	bfa8      	it	ge
 801dc6c:	2300      	movge	r3, #0
 801dc6e:	ed9f ab96 	vldr	d10, [pc, #600]	; 801dec8 <_strtod_l+0x880>
 801dc72:	ed9f bb97 	vldr	d11, [pc, #604]	; 801ded0 <_strtod_l+0x888>
 801dc76:	9309      	str	r3, [sp, #36]	; 0x24
 801dc78:	2500      	movs	r5, #0
 801dc7a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801dc7e:	930c      	str	r3, [sp, #48]	; 0x30
 801dc80:	462e      	mov	r6, r5
 801dc82:	9b07      	ldr	r3, [sp, #28]
 801dc84:	4620      	mov	r0, r4
 801dc86:	6859      	ldr	r1, [r3, #4]
 801dc88:	f7ff f81a 	bl	801ccc0 <_Balloc>
 801dc8c:	4607      	mov	r7, r0
 801dc8e:	2800      	cmp	r0, #0
 801dc90:	f43f af18 	beq.w	801dac4 <_strtod_l+0x47c>
 801dc94:	9b07      	ldr	r3, [sp, #28]
 801dc96:	691a      	ldr	r2, [r3, #16]
 801dc98:	3202      	adds	r2, #2
 801dc9a:	f103 010c 	add.w	r1, r3, #12
 801dc9e:	0092      	lsls	r2, r2, #2
 801dca0:	300c      	adds	r0, #12
 801dca2:	f7fe f902 	bl	801beaa <memcpy>
 801dca6:	ec49 8b10 	vmov	d0, r8, r9
 801dcaa:	aa14      	add	r2, sp, #80	; 0x50
 801dcac:	a913      	add	r1, sp, #76	; 0x4c
 801dcae:	4620      	mov	r0, r4
 801dcb0:	f7ff fbe2 	bl	801d478 <__d2b>
 801dcb4:	ec49 8b18 	vmov	d8, r8, r9
 801dcb8:	9012      	str	r0, [sp, #72]	; 0x48
 801dcba:	2800      	cmp	r0, #0
 801dcbc:	f43f af02 	beq.w	801dac4 <_strtod_l+0x47c>
 801dcc0:	2101      	movs	r1, #1
 801dcc2:	4620      	mov	r0, r4
 801dcc4:	f7ff f93c 	bl	801cf40 <__i2b>
 801dcc8:	4606      	mov	r6, r0
 801dcca:	2800      	cmp	r0, #0
 801dccc:	f43f aefa 	beq.w	801dac4 <_strtod_l+0x47c>
 801dcd0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801dcd2:	9914      	ldr	r1, [sp, #80]	; 0x50
 801dcd4:	2b00      	cmp	r3, #0
 801dcd6:	bfab      	itete	ge
 801dcd8:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 801dcda:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 801dcdc:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 801dce0:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 801dce4:	bfac      	ite	ge
 801dce6:	eb03 0b02 	addge.w	fp, r3, r2
 801dcea:	eba2 0a03 	sublt.w	sl, r2, r3
 801dcee:	9a05      	ldr	r2, [sp, #20]
 801dcf0:	1a9b      	subs	r3, r3, r2
 801dcf2:	440b      	add	r3, r1
 801dcf4:	4a7b      	ldr	r2, [pc, #492]	; (801dee4 <_strtod_l+0x89c>)
 801dcf6:	3b01      	subs	r3, #1
 801dcf8:	4293      	cmp	r3, r2
 801dcfa:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 801dcfe:	f280 80cd 	bge.w	801de9c <_strtod_l+0x854>
 801dd02:	1ad2      	subs	r2, r2, r3
 801dd04:	2a1f      	cmp	r2, #31
 801dd06:	eba1 0102 	sub.w	r1, r1, r2
 801dd0a:	f04f 0001 	mov.w	r0, #1
 801dd0e:	f300 80b9 	bgt.w	801de84 <_strtod_l+0x83c>
 801dd12:	fa00 f302 	lsl.w	r3, r0, r2
 801dd16:	930b      	str	r3, [sp, #44]	; 0x2c
 801dd18:	2300      	movs	r3, #0
 801dd1a:	930a      	str	r3, [sp, #40]	; 0x28
 801dd1c:	eb0b 0301 	add.w	r3, fp, r1
 801dd20:	9a05      	ldr	r2, [sp, #20]
 801dd22:	459b      	cmp	fp, r3
 801dd24:	448a      	add	sl, r1
 801dd26:	4492      	add	sl, r2
 801dd28:	465a      	mov	r2, fp
 801dd2a:	bfa8      	it	ge
 801dd2c:	461a      	movge	r2, r3
 801dd2e:	4552      	cmp	r2, sl
 801dd30:	bfa8      	it	ge
 801dd32:	4652      	movge	r2, sl
 801dd34:	2a00      	cmp	r2, #0
 801dd36:	bfc2      	ittt	gt
 801dd38:	1a9b      	subgt	r3, r3, r2
 801dd3a:	ebaa 0a02 	subgt.w	sl, sl, r2
 801dd3e:	ebab 0b02 	subgt.w	fp, fp, r2
 801dd42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dd44:	2a00      	cmp	r2, #0
 801dd46:	dd18      	ble.n	801dd7a <_strtod_l+0x732>
 801dd48:	4631      	mov	r1, r6
 801dd4a:	4620      	mov	r0, r4
 801dd4c:	930f      	str	r3, [sp, #60]	; 0x3c
 801dd4e:	f7ff f9b7 	bl	801d0c0 <__pow5mult>
 801dd52:	4606      	mov	r6, r0
 801dd54:	2800      	cmp	r0, #0
 801dd56:	f43f aeb5 	beq.w	801dac4 <_strtod_l+0x47c>
 801dd5a:	4601      	mov	r1, r0
 801dd5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801dd5e:	4620      	mov	r0, r4
 801dd60:	f7ff f904 	bl	801cf6c <__multiply>
 801dd64:	900e      	str	r0, [sp, #56]	; 0x38
 801dd66:	2800      	cmp	r0, #0
 801dd68:	f43f aeac 	beq.w	801dac4 <_strtod_l+0x47c>
 801dd6c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801dd6e:	4620      	mov	r0, r4
 801dd70:	f7fe ffe6 	bl	801cd40 <_Bfree>
 801dd74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801dd76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801dd78:	9212      	str	r2, [sp, #72]	; 0x48
 801dd7a:	2b00      	cmp	r3, #0
 801dd7c:	f300 8093 	bgt.w	801dea6 <_strtod_l+0x85e>
 801dd80:	9b06      	ldr	r3, [sp, #24]
 801dd82:	2b00      	cmp	r3, #0
 801dd84:	dd08      	ble.n	801dd98 <_strtod_l+0x750>
 801dd86:	4639      	mov	r1, r7
 801dd88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801dd8a:	4620      	mov	r0, r4
 801dd8c:	f7ff f998 	bl	801d0c0 <__pow5mult>
 801dd90:	4607      	mov	r7, r0
 801dd92:	2800      	cmp	r0, #0
 801dd94:	f43f ae96 	beq.w	801dac4 <_strtod_l+0x47c>
 801dd98:	f1ba 0f00 	cmp.w	sl, #0
 801dd9c:	dd08      	ble.n	801ddb0 <_strtod_l+0x768>
 801dd9e:	4639      	mov	r1, r7
 801dda0:	4652      	mov	r2, sl
 801dda2:	4620      	mov	r0, r4
 801dda4:	f7ff f9e6 	bl	801d174 <__lshift>
 801dda8:	4607      	mov	r7, r0
 801ddaa:	2800      	cmp	r0, #0
 801ddac:	f43f ae8a 	beq.w	801dac4 <_strtod_l+0x47c>
 801ddb0:	f1bb 0f00 	cmp.w	fp, #0
 801ddb4:	dd08      	ble.n	801ddc8 <_strtod_l+0x780>
 801ddb6:	4631      	mov	r1, r6
 801ddb8:	465a      	mov	r2, fp
 801ddba:	4620      	mov	r0, r4
 801ddbc:	f7ff f9da 	bl	801d174 <__lshift>
 801ddc0:	4606      	mov	r6, r0
 801ddc2:	2800      	cmp	r0, #0
 801ddc4:	f43f ae7e 	beq.w	801dac4 <_strtod_l+0x47c>
 801ddc8:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ddca:	463a      	mov	r2, r7
 801ddcc:	4620      	mov	r0, r4
 801ddce:	f7ff fa59 	bl	801d284 <__mdiff>
 801ddd2:	4605      	mov	r5, r0
 801ddd4:	2800      	cmp	r0, #0
 801ddd6:	f43f ae75 	beq.w	801dac4 <_strtod_l+0x47c>
 801ddda:	2300      	movs	r3, #0
 801dddc:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 801dde0:	60c3      	str	r3, [r0, #12]
 801dde2:	4631      	mov	r1, r6
 801dde4:	f7ff fa32 	bl	801d24c <__mcmp>
 801dde8:	2800      	cmp	r0, #0
 801ddea:	da7f      	bge.n	801deec <_strtod_l+0x8a4>
 801ddec:	ea5a 0a08 	orrs.w	sl, sl, r8
 801ddf0:	f040 80a5 	bne.w	801df3e <_strtod_l+0x8f6>
 801ddf4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801ddf8:	2b00      	cmp	r3, #0
 801ddfa:	f040 80a0 	bne.w	801df3e <_strtod_l+0x8f6>
 801ddfe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801de02:	0d1b      	lsrs	r3, r3, #20
 801de04:	051b      	lsls	r3, r3, #20
 801de06:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801de0a:	f240 8098 	bls.w	801df3e <_strtod_l+0x8f6>
 801de0e:	696b      	ldr	r3, [r5, #20]
 801de10:	b91b      	cbnz	r3, 801de1a <_strtod_l+0x7d2>
 801de12:	692b      	ldr	r3, [r5, #16]
 801de14:	2b01      	cmp	r3, #1
 801de16:	f340 8092 	ble.w	801df3e <_strtod_l+0x8f6>
 801de1a:	4629      	mov	r1, r5
 801de1c:	2201      	movs	r2, #1
 801de1e:	4620      	mov	r0, r4
 801de20:	f7ff f9a8 	bl	801d174 <__lshift>
 801de24:	4631      	mov	r1, r6
 801de26:	4605      	mov	r5, r0
 801de28:	f7ff fa10 	bl	801d24c <__mcmp>
 801de2c:	2800      	cmp	r0, #0
 801de2e:	f340 8086 	ble.w	801df3e <_strtod_l+0x8f6>
 801de32:	9905      	ldr	r1, [sp, #20]
 801de34:	4a2c      	ldr	r2, [pc, #176]	; (801dee8 <_strtod_l+0x8a0>)
 801de36:	464b      	mov	r3, r9
 801de38:	2900      	cmp	r1, #0
 801de3a:	f000 809f 	beq.w	801df7c <_strtod_l+0x934>
 801de3e:	ea02 0109 	and.w	r1, r2, r9
 801de42:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801de46:	f300 8099 	bgt.w	801df7c <_strtod_l+0x934>
 801de4a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801de4e:	f77f aea8 	ble.w	801dba2 <_strtod_l+0x55a>
 801de52:	ed9f 7b21 	vldr	d7, [pc, #132]	; 801ded8 <_strtod_l+0x890>
 801de56:	ec49 8b16 	vmov	d6, r8, r9
 801de5a:	4b23      	ldr	r3, [pc, #140]	; (801dee8 <_strtod_l+0x8a0>)
 801de5c:	ee26 7b07 	vmul.f64	d7, d6, d7
 801de60:	ee17 2a90 	vmov	r2, s15
 801de64:	4013      	ands	r3, r2
 801de66:	ec59 8b17 	vmov	r8, r9, d7
 801de6a:	2b00      	cmp	r3, #0
 801de6c:	f47f ae34 	bne.w	801dad8 <_strtod_l+0x490>
 801de70:	2322      	movs	r3, #34	; 0x22
 801de72:	6023      	str	r3, [r4, #0]
 801de74:	e630      	b.n	801dad8 <_strtod_l+0x490>
 801de76:	f04f 31ff 	mov.w	r1, #4294967295
 801de7a:	fa01 f202 	lsl.w	r2, r1, r2
 801de7e:	ea02 0808 	and.w	r8, r2, r8
 801de82:	e6da      	b.n	801dc3a <_strtod_l+0x5f2>
 801de84:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 801de88:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801de8c:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801de90:	33e2      	adds	r3, #226	; 0xe2
 801de92:	fa00 f303 	lsl.w	r3, r0, r3
 801de96:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 801de9a:	e73f      	b.n	801dd1c <_strtod_l+0x6d4>
 801de9c:	2200      	movs	r2, #0
 801de9e:	2301      	movs	r3, #1
 801dea0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801dea4:	e73a      	b.n	801dd1c <_strtod_l+0x6d4>
 801dea6:	9912      	ldr	r1, [sp, #72]	; 0x48
 801dea8:	461a      	mov	r2, r3
 801deaa:	4620      	mov	r0, r4
 801deac:	f7ff f962 	bl	801d174 <__lshift>
 801deb0:	9012      	str	r0, [sp, #72]	; 0x48
 801deb2:	2800      	cmp	r0, #0
 801deb4:	f47f af64 	bne.w	801dd80 <_strtod_l+0x738>
 801deb8:	e604      	b.n	801dac4 <_strtod_l+0x47c>
 801deba:	bf00      	nop
 801debc:	f3af 8000 	nop.w
 801dec0:	94a03595 	.word	0x94a03595
 801dec4:	3fcfffff 	.word	0x3fcfffff
 801dec8:	94a03595 	.word	0x94a03595
 801decc:	3fdfffff 	.word	0x3fdfffff
 801ded0:	35afe535 	.word	0x35afe535
 801ded4:	3fe00000 	.word	0x3fe00000
 801ded8:	00000000 	.word	0x00000000
 801dedc:	39500000 	.word	0x39500000
 801dee0:	08020650 	.word	0x08020650
 801dee4:	fffffc02 	.word	0xfffffc02
 801dee8:	7ff00000 	.word	0x7ff00000
 801deec:	46cb      	mov	fp, r9
 801deee:	d15f      	bne.n	801dfb0 <_strtod_l+0x968>
 801def0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801def4:	f1ba 0f00 	cmp.w	sl, #0
 801def8:	d02a      	beq.n	801df50 <_strtod_l+0x908>
 801defa:	4aa7      	ldr	r2, [pc, #668]	; (801e198 <_strtod_l+0xb50>)
 801defc:	4293      	cmp	r3, r2
 801defe:	d12b      	bne.n	801df58 <_strtod_l+0x910>
 801df00:	9b05      	ldr	r3, [sp, #20]
 801df02:	4642      	mov	r2, r8
 801df04:	b1fb      	cbz	r3, 801df46 <_strtod_l+0x8fe>
 801df06:	4ba5      	ldr	r3, [pc, #660]	; (801e19c <_strtod_l+0xb54>)
 801df08:	ea09 0303 	and.w	r3, r9, r3
 801df0c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801df10:	f04f 31ff 	mov.w	r1, #4294967295
 801df14:	d81a      	bhi.n	801df4c <_strtod_l+0x904>
 801df16:	0d1b      	lsrs	r3, r3, #20
 801df18:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801df1c:	fa01 f303 	lsl.w	r3, r1, r3
 801df20:	429a      	cmp	r2, r3
 801df22:	d119      	bne.n	801df58 <_strtod_l+0x910>
 801df24:	4b9e      	ldr	r3, [pc, #632]	; (801e1a0 <_strtod_l+0xb58>)
 801df26:	459b      	cmp	fp, r3
 801df28:	d102      	bne.n	801df30 <_strtod_l+0x8e8>
 801df2a:	3201      	adds	r2, #1
 801df2c:	f43f adca 	beq.w	801dac4 <_strtod_l+0x47c>
 801df30:	4b9a      	ldr	r3, [pc, #616]	; (801e19c <_strtod_l+0xb54>)
 801df32:	ea0b 0303 	and.w	r3, fp, r3
 801df36:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801df3a:	f04f 0800 	mov.w	r8, #0
 801df3e:	9b05      	ldr	r3, [sp, #20]
 801df40:	2b00      	cmp	r3, #0
 801df42:	d186      	bne.n	801de52 <_strtod_l+0x80a>
 801df44:	e5c8      	b.n	801dad8 <_strtod_l+0x490>
 801df46:	f04f 33ff 	mov.w	r3, #4294967295
 801df4a:	e7e9      	b.n	801df20 <_strtod_l+0x8d8>
 801df4c:	460b      	mov	r3, r1
 801df4e:	e7e7      	b.n	801df20 <_strtod_l+0x8d8>
 801df50:	ea53 0308 	orrs.w	r3, r3, r8
 801df54:	f43f af6d 	beq.w	801de32 <_strtod_l+0x7ea>
 801df58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801df5a:	b1cb      	cbz	r3, 801df90 <_strtod_l+0x948>
 801df5c:	ea13 0f0b 	tst.w	r3, fp
 801df60:	d0ed      	beq.n	801df3e <_strtod_l+0x8f6>
 801df62:	9a05      	ldr	r2, [sp, #20]
 801df64:	4640      	mov	r0, r8
 801df66:	4649      	mov	r1, r9
 801df68:	f1ba 0f00 	cmp.w	sl, #0
 801df6c:	d014      	beq.n	801df98 <_strtod_l+0x950>
 801df6e:	f7ff fb51 	bl	801d614 <sulp>
 801df72:	ee38 7b00 	vadd.f64	d7, d8, d0
 801df76:	ec59 8b17 	vmov	r8, r9, d7
 801df7a:	e7e0      	b.n	801df3e <_strtod_l+0x8f6>
 801df7c:	4013      	ands	r3, r2
 801df7e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801df82:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801df86:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801df8a:	f04f 38ff 	mov.w	r8, #4294967295
 801df8e:	e7d6      	b.n	801df3e <_strtod_l+0x8f6>
 801df90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801df92:	ea13 0f08 	tst.w	r3, r8
 801df96:	e7e3      	b.n	801df60 <_strtod_l+0x918>
 801df98:	f7ff fb3c 	bl	801d614 <sulp>
 801df9c:	ee38 0b40 	vsub.f64	d0, d8, d0
 801dfa0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801dfa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dfa8:	ec59 8b10 	vmov	r8, r9, d0
 801dfac:	d1c7      	bne.n	801df3e <_strtod_l+0x8f6>
 801dfae:	e5f8      	b.n	801dba2 <_strtod_l+0x55a>
 801dfb0:	4631      	mov	r1, r6
 801dfb2:	4628      	mov	r0, r5
 801dfb4:	f7ff faba 	bl	801d52c <__ratio>
 801dfb8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801dfbc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801dfc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dfc4:	d85f      	bhi.n	801e086 <_strtod_l+0xa3e>
 801dfc6:	f1ba 0f00 	cmp.w	sl, #0
 801dfca:	d166      	bne.n	801e09a <_strtod_l+0xa52>
 801dfcc:	f1b8 0f00 	cmp.w	r8, #0
 801dfd0:	d14d      	bne.n	801e06e <_strtod_l+0xa26>
 801dfd2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801dfd6:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801dfda:	2b00      	cmp	r3, #0
 801dfdc:	d162      	bne.n	801e0a4 <_strtod_l+0xa5c>
 801dfde:	eeb4 0bcd 	vcmpe.f64	d0, d13
 801dfe2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801dfe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dfea:	d401      	bmi.n	801dff0 <_strtod_l+0x9a8>
 801dfec:	ee20 db0d 	vmul.f64	d13, d0, d13
 801dff0:	eeb1 cb4d 	vneg.f64	d12, d13
 801dff4:	4869      	ldr	r0, [pc, #420]	; (801e19c <_strtod_l+0xb54>)
 801dff6:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 801e1a8 <_strtod_l+0xb60>
 801dffa:	ea0b 0100 	and.w	r1, fp, r0
 801dffe:	4561      	cmp	r1, ip
 801e000:	ec53 2b1c 	vmov	r2, r3, d12
 801e004:	d17a      	bne.n	801e0fc <_strtod_l+0xab4>
 801e006:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 801e00a:	ec49 8b10 	vmov	d0, r8, r9
 801e00e:	910a      	str	r1, [sp, #40]	; 0x28
 801e010:	f7ff f9c2 	bl	801d398 <__ulp>
 801e014:	ec49 8b1e 	vmov	d14, r8, r9
 801e018:	4860      	ldr	r0, [pc, #384]	; (801e19c <_strtod_l+0xb54>)
 801e01a:	eea0 eb0c 	vfma.f64	d14, d0, d12
 801e01e:	ee1e 3a90 	vmov	r3, s29
 801e022:	4a60      	ldr	r2, [pc, #384]	; (801e1a4 <_strtod_l+0xb5c>)
 801e024:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e026:	4018      	ands	r0, r3
 801e028:	4290      	cmp	r0, r2
 801e02a:	ec59 8b1e 	vmov	r8, r9, d14
 801e02e:	d93c      	bls.n	801e0aa <_strtod_l+0xa62>
 801e030:	ee18 2a90 	vmov	r2, s17
 801e034:	4b5a      	ldr	r3, [pc, #360]	; (801e1a0 <_strtod_l+0xb58>)
 801e036:	429a      	cmp	r2, r3
 801e038:	d104      	bne.n	801e044 <_strtod_l+0x9fc>
 801e03a:	ee18 3a10 	vmov	r3, s16
 801e03e:	3301      	adds	r3, #1
 801e040:	f43f ad40 	beq.w	801dac4 <_strtod_l+0x47c>
 801e044:	f8df 9158 	ldr.w	r9, [pc, #344]	; 801e1a0 <_strtod_l+0xb58>
 801e048:	f04f 38ff 	mov.w	r8, #4294967295
 801e04c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e04e:	4620      	mov	r0, r4
 801e050:	f7fe fe76 	bl	801cd40 <_Bfree>
 801e054:	4639      	mov	r1, r7
 801e056:	4620      	mov	r0, r4
 801e058:	f7fe fe72 	bl	801cd40 <_Bfree>
 801e05c:	4631      	mov	r1, r6
 801e05e:	4620      	mov	r0, r4
 801e060:	f7fe fe6e 	bl	801cd40 <_Bfree>
 801e064:	4629      	mov	r1, r5
 801e066:	4620      	mov	r0, r4
 801e068:	f7fe fe6a 	bl	801cd40 <_Bfree>
 801e06c:	e609      	b.n	801dc82 <_strtod_l+0x63a>
 801e06e:	f1b8 0f01 	cmp.w	r8, #1
 801e072:	d103      	bne.n	801e07c <_strtod_l+0xa34>
 801e074:	f1b9 0f00 	cmp.w	r9, #0
 801e078:	f43f ad93 	beq.w	801dba2 <_strtod_l+0x55a>
 801e07c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 801e080:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801e084:	e7b6      	b.n	801dff4 <_strtod_l+0x9ac>
 801e086:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801e08a:	ee20 db0d 	vmul.f64	d13, d0, d13
 801e08e:	f1ba 0f00 	cmp.w	sl, #0
 801e092:	d0ad      	beq.n	801dff0 <_strtod_l+0x9a8>
 801e094:	eeb0 cb4d 	vmov.f64	d12, d13
 801e098:	e7ac      	b.n	801dff4 <_strtod_l+0x9ac>
 801e09a:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 801e09e:	eeb0 db4c 	vmov.f64	d13, d12
 801e0a2:	e7a7      	b.n	801dff4 <_strtod_l+0x9ac>
 801e0a4:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 801e0a8:	e7a4      	b.n	801dff4 <_strtod_l+0x9ac>
 801e0aa:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801e0ae:	9b05      	ldr	r3, [sp, #20]
 801e0b0:	46cb      	mov	fp, r9
 801e0b2:	2b00      	cmp	r3, #0
 801e0b4:	d1ca      	bne.n	801e04c <_strtod_l+0xa04>
 801e0b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801e0ba:	0d1b      	lsrs	r3, r3, #20
 801e0bc:	051b      	lsls	r3, r3, #20
 801e0be:	4299      	cmp	r1, r3
 801e0c0:	d1c4      	bne.n	801e04c <_strtod_l+0xa04>
 801e0c2:	ec51 0b1d 	vmov	r0, r1, d13
 801e0c6:	f7e2 fb5f 	bl	8000788 <__aeabi_d2lz>
 801e0ca:	f7e2 fb17 	bl	80006fc <__aeabi_l2d>
 801e0ce:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 801e0d2:	ec41 0b17 	vmov	d7, r0, r1
 801e0d6:	ea4b 0b08 	orr.w	fp, fp, r8
 801e0da:	ea5b 0b0a 	orrs.w	fp, fp, sl
 801e0de:	ee3d db47 	vsub.f64	d13, d13, d7
 801e0e2:	d03c      	beq.n	801e15e <_strtod_l+0xb16>
 801e0e4:	eeb4 dbca 	vcmpe.f64	d13, d10
 801e0e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e0ec:	f53f acf4 	bmi.w	801dad8 <_strtod_l+0x490>
 801e0f0:	eeb4 dbcb 	vcmpe.f64	d13, d11
 801e0f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e0f8:	dda8      	ble.n	801e04c <_strtod_l+0xa04>
 801e0fa:	e4ed      	b.n	801dad8 <_strtod_l+0x490>
 801e0fc:	9805      	ldr	r0, [sp, #20]
 801e0fe:	b1f0      	cbz	r0, 801e13e <_strtod_l+0xaf6>
 801e100:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 801e104:	d81b      	bhi.n	801e13e <_strtod_l+0xaf6>
 801e106:	ed9f 7b22 	vldr	d7, [pc, #136]	; 801e190 <_strtod_l+0xb48>
 801e10a:	eeb4 dbc7 	vcmpe.f64	d13, d7
 801e10e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e112:	d811      	bhi.n	801e138 <_strtod_l+0xaf0>
 801e114:	eebc dbcd 	vcvt.u32.f64	s26, d13
 801e118:	ee1d 3a10 	vmov	r3, s26
 801e11c:	2b01      	cmp	r3, #1
 801e11e:	bf38      	it	cc
 801e120:	2301      	movcc	r3, #1
 801e122:	ee0d 3a10 	vmov	s26, r3
 801e126:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 801e12a:	f1ba 0f00 	cmp.w	sl, #0
 801e12e:	d113      	bne.n	801e158 <_strtod_l+0xb10>
 801e130:	eeb1 7b4d 	vneg.f64	d7, d13
 801e134:	ec53 2b17 	vmov	r2, r3, d7
 801e138:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 801e13c:	1a43      	subs	r3, r0, r1
 801e13e:	eeb0 0b48 	vmov.f64	d0, d8
 801e142:	ec43 2b1c 	vmov	d12, r2, r3
 801e146:	910a      	str	r1, [sp, #40]	; 0x28
 801e148:	f7ff f926 	bl	801d398 <__ulp>
 801e14c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e14e:	eeac 8b00 	vfma.f64	d8, d12, d0
 801e152:	ec59 8b18 	vmov	r8, r9, d8
 801e156:	e7aa      	b.n	801e0ae <_strtod_l+0xa66>
 801e158:	eeb0 7b4d 	vmov.f64	d7, d13
 801e15c:	e7ea      	b.n	801e134 <_strtod_l+0xaec>
 801e15e:	eeb4 dbc9 	vcmpe.f64	d13, d9
 801e162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e166:	f57f af71 	bpl.w	801e04c <_strtod_l+0xa04>
 801e16a:	e4b5      	b.n	801dad8 <_strtod_l+0x490>
 801e16c:	2300      	movs	r3, #0
 801e16e:	9308      	str	r3, [sp, #32]
 801e170:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e172:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e174:	6013      	str	r3, [r2, #0]
 801e176:	f7ff baa6 	b.w	801d6c6 <_strtod_l+0x7e>
 801e17a:	2a65      	cmp	r2, #101	; 0x65
 801e17c:	f43f aba2 	beq.w	801d8c4 <_strtod_l+0x27c>
 801e180:	2a45      	cmp	r2, #69	; 0x45
 801e182:	f43f ab9f 	beq.w	801d8c4 <_strtod_l+0x27c>
 801e186:	2101      	movs	r1, #1
 801e188:	f7ff bbd8 	b.w	801d93c <_strtod_l+0x2f4>
 801e18c:	f3af 8000 	nop.w
 801e190:	ffc00000 	.word	0xffc00000
 801e194:	41dfffff 	.word	0x41dfffff
 801e198:	000fffff 	.word	0x000fffff
 801e19c:	7ff00000 	.word	0x7ff00000
 801e1a0:	7fefffff 	.word	0x7fefffff
 801e1a4:	7c9fffff 	.word	0x7c9fffff
 801e1a8:	7fe00000 	.word	0x7fe00000

0801e1ac <_strtod_r>:
 801e1ac:	4b01      	ldr	r3, [pc, #4]	; (801e1b4 <_strtod_r+0x8>)
 801e1ae:	f7ff ba4b 	b.w	801d648 <_strtod_l>
 801e1b2:	bf00      	nop
 801e1b4:	2400015c 	.word	0x2400015c

0801e1b8 <_strtol_l.constprop.0>:
 801e1b8:	2b01      	cmp	r3, #1
 801e1ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e1be:	d001      	beq.n	801e1c4 <_strtol_l.constprop.0+0xc>
 801e1c0:	2b24      	cmp	r3, #36	; 0x24
 801e1c2:	d906      	bls.n	801e1d2 <_strtol_l.constprop.0+0x1a>
 801e1c4:	f7fd fe3c 	bl	801be40 <__errno>
 801e1c8:	2316      	movs	r3, #22
 801e1ca:	6003      	str	r3, [r0, #0]
 801e1cc:	2000      	movs	r0, #0
 801e1ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e1d2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801e2b8 <_strtol_l.constprop.0+0x100>
 801e1d6:	460d      	mov	r5, r1
 801e1d8:	462e      	mov	r6, r5
 801e1da:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e1de:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801e1e2:	f017 0708 	ands.w	r7, r7, #8
 801e1e6:	d1f7      	bne.n	801e1d8 <_strtol_l.constprop.0+0x20>
 801e1e8:	2c2d      	cmp	r4, #45	; 0x2d
 801e1ea:	d132      	bne.n	801e252 <_strtol_l.constprop.0+0x9a>
 801e1ec:	782c      	ldrb	r4, [r5, #0]
 801e1ee:	2701      	movs	r7, #1
 801e1f0:	1cb5      	adds	r5, r6, #2
 801e1f2:	2b00      	cmp	r3, #0
 801e1f4:	d05b      	beq.n	801e2ae <_strtol_l.constprop.0+0xf6>
 801e1f6:	2b10      	cmp	r3, #16
 801e1f8:	d109      	bne.n	801e20e <_strtol_l.constprop.0+0x56>
 801e1fa:	2c30      	cmp	r4, #48	; 0x30
 801e1fc:	d107      	bne.n	801e20e <_strtol_l.constprop.0+0x56>
 801e1fe:	782c      	ldrb	r4, [r5, #0]
 801e200:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801e204:	2c58      	cmp	r4, #88	; 0x58
 801e206:	d14d      	bne.n	801e2a4 <_strtol_l.constprop.0+0xec>
 801e208:	786c      	ldrb	r4, [r5, #1]
 801e20a:	2310      	movs	r3, #16
 801e20c:	3502      	adds	r5, #2
 801e20e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801e212:	f108 38ff 	add.w	r8, r8, #4294967295
 801e216:	f04f 0e00 	mov.w	lr, #0
 801e21a:	fbb8 f9f3 	udiv	r9, r8, r3
 801e21e:	4676      	mov	r6, lr
 801e220:	fb03 8a19 	mls	sl, r3, r9, r8
 801e224:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801e228:	f1bc 0f09 	cmp.w	ip, #9
 801e22c:	d816      	bhi.n	801e25c <_strtol_l.constprop.0+0xa4>
 801e22e:	4664      	mov	r4, ip
 801e230:	42a3      	cmp	r3, r4
 801e232:	dd24      	ble.n	801e27e <_strtol_l.constprop.0+0xc6>
 801e234:	f1be 3fff 	cmp.w	lr, #4294967295
 801e238:	d008      	beq.n	801e24c <_strtol_l.constprop.0+0x94>
 801e23a:	45b1      	cmp	r9, r6
 801e23c:	d31c      	bcc.n	801e278 <_strtol_l.constprop.0+0xc0>
 801e23e:	d101      	bne.n	801e244 <_strtol_l.constprop.0+0x8c>
 801e240:	45a2      	cmp	sl, r4
 801e242:	db19      	blt.n	801e278 <_strtol_l.constprop.0+0xc0>
 801e244:	fb06 4603 	mla	r6, r6, r3, r4
 801e248:	f04f 0e01 	mov.w	lr, #1
 801e24c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e250:	e7e8      	b.n	801e224 <_strtol_l.constprop.0+0x6c>
 801e252:	2c2b      	cmp	r4, #43	; 0x2b
 801e254:	bf04      	itt	eq
 801e256:	782c      	ldrbeq	r4, [r5, #0]
 801e258:	1cb5      	addeq	r5, r6, #2
 801e25a:	e7ca      	b.n	801e1f2 <_strtol_l.constprop.0+0x3a>
 801e25c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801e260:	f1bc 0f19 	cmp.w	ip, #25
 801e264:	d801      	bhi.n	801e26a <_strtol_l.constprop.0+0xb2>
 801e266:	3c37      	subs	r4, #55	; 0x37
 801e268:	e7e2      	b.n	801e230 <_strtol_l.constprop.0+0x78>
 801e26a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801e26e:	f1bc 0f19 	cmp.w	ip, #25
 801e272:	d804      	bhi.n	801e27e <_strtol_l.constprop.0+0xc6>
 801e274:	3c57      	subs	r4, #87	; 0x57
 801e276:	e7db      	b.n	801e230 <_strtol_l.constprop.0+0x78>
 801e278:	f04f 3eff 	mov.w	lr, #4294967295
 801e27c:	e7e6      	b.n	801e24c <_strtol_l.constprop.0+0x94>
 801e27e:	f1be 3fff 	cmp.w	lr, #4294967295
 801e282:	d105      	bne.n	801e290 <_strtol_l.constprop.0+0xd8>
 801e284:	2322      	movs	r3, #34	; 0x22
 801e286:	6003      	str	r3, [r0, #0]
 801e288:	4646      	mov	r6, r8
 801e28a:	b942      	cbnz	r2, 801e29e <_strtol_l.constprop.0+0xe6>
 801e28c:	4630      	mov	r0, r6
 801e28e:	e79e      	b.n	801e1ce <_strtol_l.constprop.0+0x16>
 801e290:	b107      	cbz	r7, 801e294 <_strtol_l.constprop.0+0xdc>
 801e292:	4276      	negs	r6, r6
 801e294:	2a00      	cmp	r2, #0
 801e296:	d0f9      	beq.n	801e28c <_strtol_l.constprop.0+0xd4>
 801e298:	f1be 0f00 	cmp.w	lr, #0
 801e29c:	d000      	beq.n	801e2a0 <_strtol_l.constprop.0+0xe8>
 801e29e:	1e69      	subs	r1, r5, #1
 801e2a0:	6011      	str	r1, [r2, #0]
 801e2a2:	e7f3      	b.n	801e28c <_strtol_l.constprop.0+0xd4>
 801e2a4:	2430      	movs	r4, #48	; 0x30
 801e2a6:	2b00      	cmp	r3, #0
 801e2a8:	d1b1      	bne.n	801e20e <_strtol_l.constprop.0+0x56>
 801e2aa:	2308      	movs	r3, #8
 801e2ac:	e7af      	b.n	801e20e <_strtol_l.constprop.0+0x56>
 801e2ae:	2c30      	cmp	r4, #48	; 0x30
 801e2b0:	d0a5      	beq.n	801e1fe <_strtol_l.constprop.0+0x46>
 801e2b2:	230a      	movs	r3, #10
 801e2b4:	e7ab      	b.n	801e20e <_strtol_l.constprop.0+0x56>
 801e2b6:	bf00      	nop
 801e2b8:	08020679 	.word	0x08020679

0801e2bc <_strtol_r>:
 801e2bc:	f7ff bf7c 	b.w	801e1b8 <_strtol_l.constprop.0>

0801e2c0 <__ssputs_r>:
 801e2c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e2c4:	688e      	ldr	r6, [r1, #8]
 801e2c6:	461f      	mov	r7, r3
 801e2c8:	42be      	cmp	r6, r7
 801e2ca:	680b      	ldr	r3, [r1, #0]
 801e2cc:	4682      	mov	sl, r0
 801e2ce:	460c      	mov	r4, r1
 801e2d0:	4690      	mov	r8, r2
 801e2d2:	d82c      	bhi.n	801e32e <__ssputs_r+0x6e>
 801e2d4:	898a      	ldrh	r2, [r1, #12]
 801e2d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801e2da:	d026      	beq.n	801e32a <__ssputs_r+0x6a>
 801e2dc:	6965      	ldr	r5, [r4, #20]
 801e2de:	6909      	ldr	r1, [r1, #16]
 801e2e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e2e4:	eba3 0901 	sub.w	r9, r3, r1
 801e2e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e2ec:	1c7b      	adds	r3, r7, #1
 801e2ee:	444b      	add	r3, r9
 801e2f0:	106d      	asrs	r5, r5, #1
 801e2f2:	429d      	cmp	r5, r3
 801e2f4:	bf38      	it	cc
 801e2f6:	461d      	movcc	r5, r3
 801e2f8:	0553      	lsls	r3, r2, #21
 801e2fa:	d527      	bpl.n	801e34c <__ssputs_r+0x8c>
 801e2fc:	4629      	mov	r1, r5
 801e2fe:	f7fe fc53 	bl	801cba8 <_malloc_r>
 801e302:	4606      	mov	r6, r0
 801e304:	b360      	cbz	r0, 801e360 <__ssputs_r+0xa0>
 801e306:	6921      	ldr	r1, [r4, #16]
 801e308:	464a      	mov	r2, r9
 801e30a:	f7fd fdce 	bl	801beaa <memcpy>
 801e30e:	89a3      	ldrh	r3, [r4, #12]
 801e310:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801e314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e318:	81a3      	strh	r3, [r4, #12]
 801e31a:	6126      	str	r6, [r4, #16]
 801e31c:	6165      	str	r5, [r4, #20]
 801e31e:	444e      	add	r6, r9
 801e320:	eba5 0509 	sub.w	r5, r5, r9
 801e324:	6026      	str	r6, [r4, #0]
 801e326:	60a5      	str	r5, [r4, #8]
 801e328:	463e      	mov	r6, r7
 801e32a:	42be      	cmp	r6, r7
 801e32c:	d900      	bls.n	801e330 <__ssputs_r+0x70>
 801e32e:	463e      	mov	r6, r7
 801e330:	6820      	ldr	r0, [r4, #0]
 801e332:	4632      	mov	r2, r6
 801e334:	4641      	mov	r1, r8
 801e336:	f000 fd5c 	bl	801edf2 <memmove>
 801e33a:	68a3      	ldr	r3, [r4, #8]
 801e33c:	1b9b      	subs	r3, r3, r6
 801e33e:	60a3      	str	r3, [r4, #8]
 801e340:	6823      	ldr	r3, [r4, #0]
 801e342:	4433      	add	r3, r6
 801e344:	6023      	str	r3, [r4, #0]
 801e346:	2000      	movs	r0, #0
 801e348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e34c:	462a      	mov	r2, r5
 801e34e:	f001 f934 	bl	801f5ba <_realloc_r>
 801e352:	4606      	mov	r6, r0
 801e354:	2800      	cmp	r0, #0
 801e356:	d1e0      	bne.n	801e31a <__ssputs_r+0x5a>
 801e358:	6921      	ldr	r1, [r4, #16]
 801e35a:	4650      	mov	r0, sl
 801e35c:	f7fe fbb0 	bl	801cac0 <_free_r>
 801e360:	230c      	movs	r3, #12
 801e362:	f8ca 3000 	str.w	r3, [sl]
 801e366:	89a3      	ldrh	r3, [r4, #12]
 801e368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e36c:	81a3      	strh	r3, [r4, #12]
 801e36e:	f04f 30ff 	mov.w	r0, #4294967295
 801e372:	e7e9      	b.n	801e348 <__ssputs_r+0x88>

0801e374 <_svfiprintf_r>:
 801e374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e378:	4698      	mov	r8, r3
 801e37a:	898b      	ldrh	r3, [r1, #12]
 801e37c:	061b      	lsls	r3, r3, #24
 801e37e:	b09d      	sub	sp, #116	; 0x74
 801e380:	4607      	mov	r7, r0
 801e382:	460d      	mov	r5, r1
 801e384:	4614      	mov	r4, r2
 801e386:	d50e      	bpl.n	801e3a6 <_svfiprintf_r+0x32>
 801e388:	690b      	ldr	r3, [r1, #16]
 801e38a:	b963      	cbnz	r3, 801e3a6 <_svfiprintf_r+0x32>
 801e38c:	2140      	movs	r1, #64	; 0x40
 801e38e:	f7fe fc0b 	bl	801cba8 <_malloc_r>
 801e392:	6028      	str	r0, [r5, #0]
 801e394:	6128      	str	r0, [r5, #16]
 801e396:	b920      	cbnz	r0, 801e3a2 <_svfiprintf_r+0x2e>
 801e398:	230c      	movs	r3, #12
 801e39a:	603b      	str	r3, [r7, #0]
 801e39c:	f04f 30ff 	mov.w	r0, #4294967295
 801e3a0:	e0d0      	b.n	801e544 <_svfiprintf_r+0x1d0>
 801e3a2:	2340      	movs	r3, #64	; 0x40
 801e3a4:	616b      	str	r3, [r5, #20]
 801e3a6:	2300      	movs	r3, #0
 801e3a8:	9309      	str	r3, [sp, #36]	; 0x24
 801e3aa:	2320      	movs	r3, #32
 801e3ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e3b0:	f8cd 800c 	str.w	r8, [sp, #12]
 801e3b4:	2330      	movs	r3, #48	; 0x30
 801e3b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801e55c <_svfiprintf_r+0x1e8>
 801e3ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e3be:	f04f 0901 	mov.w	r9, #1
 801e3c2:	4623      	mov	r3, r4
 801e3c4:	469a      	mov	sl, r3
 801e3c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e3ca:	b10a      	cbz	r2, 801e3d0 <_svfiprintf_r+0x5c>
 801e3cc:	2a25      	cmp	r2, #37	; 0x25
 801e3ce:	d1f9      	bne.n	801e3c4 <_svfiprintf_r+0x50>
 801e3d0:	ebba 0b04 	subs.w	fp, sl, r4
 801e3d4:	d00b      	beq.n	801e3ee <_svfiprintf_r+0x7a>
 801e3d6:	465b      	mov	r3, fp
 801e3d8:	4622      	mov	r2, r4
 801e3da:	4629      	mov	r1, r5
 801e3dc:	4638      	mov	r0, r7
 801e3de:	f7ff ff6f 	bl	801e2c0 <__ssputs_r>
 801e3e2:	3001      	adds	r0, #1
 801e3e4:	f000 80a9 	beq.w	801e53a <_svfiprintf_r+0x1c6>
 801e3e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e3ea:	445a      	add	r2, fp
 801e3ec:	9209      	str	r2, [sp, #36]	; 0x24
 801e3ee:	f89a 3000 	ldrb.w	r3, [sl]
 801e3f2:	2b00      	cmp	r3, #0
 801e3f4:	f000 80a1 	beq.w	801e53a <_svfiprintf_r+0x1c6>
 801e3f8:	2300      	movs	r3, #0
 801e3fa:	f04f 32ff 	mov.w	r2, #4294967295
 801e3fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e402:	f10a 0a01 	add.w	sl, sl, #1
 801e406:	9304      	str	r3, [sp, #16]
 801e408:	9307      	str	r3, [sp, #28]
 801e40a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e40e:	931a      	str	r3, [sp, #104]	; 0x68
 801e410:	4654      	mov	r4, sl
 801e412:	2205      	movs	r2, #5
 801e414:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e418:	4850      	ldr	r0, [pc, #320]	; (801e55c <_svfiprintf_r+0x1e8>)
 801e41a:	f7e1 ff89 	bl	8000330 <memchr>
 801e41e:	9a04      	ldr	r2, [sp, #16]
 801e420:	b9d8      	cbnz	r0, 801e45a <_svfiprintf_r+0xe6>
 801e422:	06d0      	lsls	r0, r2, #27
 801e424:	bf44      	itt	mi
 801e426:	2320      	movmi	r3, #32
 801e428:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e42c:	0711      	lsls	r1, r2, #28
 801e42e:	bf44      	itt	mi
 801e430:	232b      	movmi	r3, #43	; 0x2b
 801e432:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e436:	f89a 3000 	ldrb.w	r3, [sl]
 801e43a:	2b2a      	cmp	r3, #42	; 0x2a
 801e43c:	d015      	beq.n	801e46a <_svfiprintf_r+0xf6>
 801e43e:	9a07      	ldr	r2, [sp, #28]
 801e440:	4654      	mov	r4, sl
 801e442:	2000      	movs	r0, #0
 801e444:	f04f 0c0a 	mov.w	ip, #10
 801e448:	4621      	mov	r1, r4
 801e44a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e44e:	3b30      	subs	r3, #48	; 0x30
 801e450:	2b09      	cmp	r3, #9
 801e452:	d94d      	bls.n	801e4f0 <_svfiprintf_r+0x17c>
 801e454:	b1b0      	cbz	r0, 801e484 <_svfiprintf_r+0x110>
 801e456:	9207      	str	r2, [sp, #28]
 801e458:	e014      	b.n	801e484 <_svfiprintf_r+0x110>
 801e45a:	eba0 0308 	sub.w	r3, r0, r8
 801e45e:	fa09 f303 	lsl.w	r3, r9, r3
 801e462:	4313      	orrs	r3, r2
 801e464:	9304      	str	r3, [sp, #16]
 801e466:	46a2      	mov	sl, r4
 801e468:	e7d2      	b.n	801e410 <_svfiprintf_r+0x9c>
 801e46a:	9b03      	ldr	r3, [sp, #12]
 801e46c:	1d19      	adds	r1, r3, #4
 801e46e:	681b      	ldr	r3, [r3, #0]
 801e470:	9103      	str	r1, [sp, #12]
 801e472:	2b00      	cmp	r3, #0
 801e474:	bfbb      	ittet	lt
 801e476:	425b      	neglt	r3, r3
 801e478:	f042 0202 	orrlt.w	r2, r2, #2
 801e47c:	9307      	strge	r3, [sp, #28]
 801e47e:	9307      	strlt	r3, [sp, #28]
 801e480:	bfb8      	it	lt
 801e482:	9204      	strlt	r2, [sp, #16]
 801e484:	7823      	ldrb	r3, [r4, #0]
 801e486:	2b2e      	cmp	r3, #46	; 0x2e
 801e488:	d10c      	bne.n	801e4a4 <_svfiprintf_r+0x130>
 801e48a:	7863      	ldrb	r3, [r4, #1]
 801e48c:	2b2a      	cmp	r3, #42	; 0x2a
 801e48e:	d134      	bne.n	801e4fa <_svfiprintf_r+0x186>
 801e490:	9b03      	ldr	r3, [sp, #12]
 801e492:	1d1a      	adds	r2, r3, #4
 801e494:	681b      	ldr	r3, [r3, #0]
 801e496:	9203      	str	r2, [sp, #12]
 801e498:	2b00      	cmp	r3, #0
 801e49a:	bfb8      	it	lt
 801e49c:	f04f 33ff 	movlt.w	r3, #4294967295
 801e4a0:	3402      	adds	r4, #2
 801e4a2:	9305      	str	r3, [sp, #20]
 801e4a4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801e56c <_svfiprintf_r+0x1f8>
 801e4a8:	7821      	ldrb	r1, [r4, #0]
 801e4aa:	2203      	movs	r2, #3
 801e4ac:	4650      	mov	r0, sl
 801e4ae:	f7e1 ff3f 	bl	8000330 <memchr>
 801e4b2:	b138      	cbz	r0, 801e4c4 <_svfiprintf_r+0x150>
 801e4b4:	9b04      	ldr	r3, [sp, #16]
 801e4b6:	eba0 000a 	sub.w	r0, r0, sl
 801e4ba:	2240      	movs	r2, #64	; 0x40
 801e4bc:	4082      	lsls	r2, r0
 801e4be:	4313      	orrs	r3, r2
 801e4c0:	3401      	adds	r4, #1
 801e4c2:	9304      	str	r3, [sp, #16]
 801e4c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e4c8:	4825      	ldr	r0, [pc, #148]	; (801e560 <_svfiprintf_r+0x1ec>)
 801e4ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e4ce:	2206      	movs	r2, #6
 801e4d0:	f7e1 ff2e 	bl	8000330 <memchr>
 801e4d4:	2800      	cmp	r0, #0
 801e4d6:	d038      	beq.n	801e54a <_svfiprintf_r+0x1d6>
 801e4d8:	4b22      	ldr	r3, [pc, #136]	; (801e564 <_svfiprintf_r+0x1f0>)
 801e4da:	bb1b      	cbnz	r3, 801e524 <_svfiprintf_r+0x1b0>
 801e4dc:	9b03      	ldr	r3, [sp, #12]
 801e4de:	3307      	adds	r3, #7
 801e4e0:	f023 0307 	bic.w	r3, r3, #7
 801e4e4:	3308      	adds	r3, #8
 801e4e6:	9303      	str	r3, [sp, #12]
 801e4e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e4ea:	4433      	add	r3, r6
 801e4ec:	9309      	str	r3, [sp, #36]	; 0x24
 801e4ee:	e768      	b.n	801e3c2 <_svfiprintf_r+0x4e>
 801e4f0:	fb0c 3202 	mla	r2, ip, r2, r3
 801e4f4:	460c      	mov	r4, r1
 801e4f6:	2001      	movs	r0, #1
 801e4f8:	e7a6      	b.n	801e448 <_svfiprintf_r+0xd4>
 801e4fa:	2300      	movs	r3, #0
 801e4fc:	3401      	adds	r4, #1
 801e4fe:	9305      	str	r3, [sp, #20]
 801e500:	4619      	mov	r1, r3
 801e502:	f04f 0c0a 	mov.w	ip, #10
 801e506:	4620      	mov	r0, r4
 801e508:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e50c:	3a30      	subs	r2, #48	; 0x30
 801e50e:	2a09      	cmp	r2, #9
 801e510:	d903      	bls.n	801e51a <_svfiprintf_r+0x1a6>
 801e512:	2b00      	cmp	r3, #0
 801e514:	d0c6      	beq.n	801e4a4 <_svfiprintf_r+0x130>
 801e516:	9105      	str	r1, [sp, #20]
 801e518:	e7c4      	b.n	801e4a4 <_svfiprintf_r+0x130>
 801e51a:	fb0c 2101 	mla	r1, ip, r1, r2
 801e51e:	4604      	mov	r4, r0
 801e520:	2301      	movs	r3, #1
 801e522:	e7f0      	b.n	801e506 <_svfiprintf_r+0x192>
 801e524:	ab03      	add	r3, sp, #12
 801e526:	9300      	str	r3, [sp, #0]
 801e528:	462a      	mov	r2, r5
 801e52a:	4b0f      	ldr	r3, [pc, #60]	; (801e568 <_svfiprintf_r+0x1f4>)
 801e52c:	a904      	add	r1, sp, #16
 801e52e:	4638      	mov	r0, r7
 801e530:	f7fc fd32 	bl	801af98 <_printf_float>
 801e534:	1c42      	adds	r2, r0, #1
 801e536:	4606      	mov	r6, r0
 801e538:	d1d6      	bne.n	801e4e8 <_svfiprintf_r+0x174>
 801e53a:	89ab      	ldrh	r3, [r5, #12]
 801e53c:	065b      	lsls	r3, r3, #25
 801e53e:	f53f af2d 	bmi.w	801e39c <_svfiprintf_r+0x28>
 801e542:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e544:	b01d      	add	sp, #116	; 0x74
 801e546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e54a:	ab03      	add	r3, sp, #12
 801e54c:	9300      	str	r3, [sp, #0]
 801e54e:	462a      	mov	r2, r5
 801e550:	4b05      	ldr	r3, [pc, #20]	; (801e568 <_svfiprintf_r+0x1f4>)
 801e552:	a904      	add	r1, sp, #16
 801e554:	4638      	mov	r0, r7
 801e556:	f7fc ffa7 	bl	801b4a8 <_printf_i>
 801e55a:	e7eb      	b.n	801e534 <_svfiprintf_r+0x1c0>
 801e55c:	08020779 	.word	0x08020779
 801e560:	08020783 	.word	0x08020783
 801e564:	0801af99 	.word	0x0801af99
 801e568:	0801e2c1 	.word	0x0801e2c1
 801e56c:	0802077f 	.word	0x0802077f

0801e570 <_sungetc_r>:
 801e570:	b538      	push	{r3, r4, r5, lr}
 801e572:	1c4b      	adds	r3, r1, #1
 801e574:	4614      	mov	r4, r2
 801e576:	d103      	bne.n	801e580 <_sungetc_r+0x10>
 801e578:	f04f 35ff 	mov.w	r5, #4294967295
 801e57c:	4628      	mov	r0, r5
 801e57e:	bd38      	pop	{r3, r4, r5, pc}
 801e580:	8993      	ldrh	r3, [r2, #12]
 801e582:	f023 0320 	bic.w	r3, r3, #32
 801e586:	8193      	strh	r3, [r2, #12]
 801e588:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e58a:	6852      	ldr	r2, [r2, #4]
 801e58c:	b2cd      	uxtb	r5, r1
 801e58e:	b18b      	cbz	r3, 801e5b4 <_sungetc_r+0x44>
 801e590:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801e592:	4293      	cmp	r3, r2
 801e594:	dd08      	ble.n	801e5a8 <_sungetc_r+0x38>
 801e596:	6823      	ldr	r3, [r4, #0]
 801e598:	1e5a      	subs	r2, r3, #1
 801e59a:	6022      	str	r2, [r4, #0]
 801e59c:	f803 5c01 	strb.w	r5, [r3, #-1]
 801e5a0:	6863      	ldr	r3, [r4, #4]
 801e5a2:	3301      	adds	r3, #1
 801e5a4:	6063      	str	r3, [r4, #4]
 801e5a6:	e7e9      	b.n	801e57c <_sungetc_r+0xc>
 801e5a8:	4621      	mov	r1, r4
 801e5aa:	f000 fbe8 	bl	801ed7e <__submore>
 801e5ae:	2800      	cmp	r0, #0
 801e5b0:	d0f1      	beq.n	801e596 <_sungetc_r+0x26>
 801e5b2:	e7e1      	b.n	801e578 <_sungetc_r+0x8>
 801e5b4:	6921      	ldr	r1, [r4, #16]
 801e5b6:	6823      	ldr	r3, [r4, #0]
 801e5b8:	b151      	cbz	r1, 801e5d0 <_sungetc_r+0x60>
 801e5ba:	4299      	cmp	r1, r3
 801e5bc:	d208      	bcs.n	801e5d0 <_sungetc_r+0x60>
 801e5be:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801e5c2:	42a9      	cmp	r1, r5
 801e5c4:	d104      	bne.n	801e5d0 <_sungetc_r+0x60>
 801e5c6:	3b01      	subs	r3, #1
 801e5c8:	3201      	adds	r2, #1
 801e5ca:	6023      	str	r3, [r4, #0]
 801e5cc:	6062      	str	r2, [r4, #4]
 801e5ce:	e7d5      	b.n	801e57c <_sungetc_r+0xc>
 801e5d0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801e5d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e5d8:	6363      	str	r3, [r4, #52]	; 0x34
 801e5da:	2303      	movs	r3, #3
 801e5dc:	63a3      	str	r3, [r4, #56]	; 0x38
 801e5de:	4623      	mov	r3, r4
 801e5e0:	f803 5f46 	strb.w	r5, [r3, #70]!
 801e5e4:	6023      	str	r3, [r4, #0]
 801e5e6:	2301      	movs	r3, #1
 801e5e8:	e7dc      	b.n	801e5a4 <_sungetc_r+0x34>

0801e5ea <__ssrefill_r>:
 801e5ea:	b510      	push	{r4, lr}
 801e5ec:	460c      	mov	r4, r1
 801e5ee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801e5f0:	b169      	cbz	r1, 801e60e <__ssrefill_r+0x24>
 801e5f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e5f6:	4299      	cmp	r1, r3
 801e5f8:	d001      	beq.n	801e5fe <__ssrefill_r+0x14>
 801e5fa:	f7fe fa61 	bl	801cac0 <_free_r>
 801e5fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e600:	6063      	str	r3, [r4, #4]
 801e602:	2000      	movs	r0, #0
 801e604:	6360      	str	r0, [r4, #52]	; 0x34
 801e606:	b113      	cbz	r3, 801e60e <__ssrefill_r+0x24>
 801e608:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801e60a:	6023      	str	r3, [r4, #0]
 801e60c:	bd10      	pop	{r4, pc}
 801e60e:	6923      	ldr	r3, [r4, #16]
 801e610:	6023      	str	r3, [r4, #0]
 801e612:	2300      	movs	r3, #0
 801e614:	6063      	str	r3, [r4, #4]
 801e616:	89a3      	ldrh	r3, [r4, #12]
 801e618:	f043 0320 	orr.w	r3, r3, #32
 801e61c:	81a3      	strh	r3, [r4, #12]
 801e61e:	f04f 30ff 	mov.w	r0, #4294967295
 801e622:	e7f3      	b.n	801e60c <__ssrefill_r+0x22>

0801e624 <__ssvfiscanf_r>:
 801e624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e628:	460c      	mov	r4, r1
 801e62a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801e62e:	2100      	movs	r1, #0
 801e630:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801e634:	49a6      	ldr	r1, [pc, #664]	; (801e8d0 <__ssvfiscanf_r+0x2ac>)
 801e636:	91a0      	str	r1, [sp, #640]	; 0x280
 801e638:	f10d 0804 	add.w	r8, sp, #4
 801e63c:	49a5      	ldr	r1, [pc, #660]	; (801e8d4 <__ssvfiscanf_r+0x2b0>)
 801e63e:	4fa6      	ldr	r7, [pc, #664]	; (801e8d8 <__ssvfiscanf_r+0x2b4>)
 801e640:	f8df 9298 	ldr.w	r9, [pc, #664]	; 801e8dc <__ssvfiscanf_r+0x2b8>
 801e644:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801e648:	4606      	mov	r6, r0
 801e64a:	91a1      	str	r1, [sp, #644]	; 0x284
 801e64c:	9300      	str	r3, [sp, #0]
 801e64e:	7813      	ldrb	r3, [r2, #0]
 801e650:	2b00      	cmp	r3, #0
 801e652:	f000 815a 	beq.w	801e90a <__ssvfiscanf_r+0x2e6>
 801e656:	5cf9      	ldrb	r1, [r7, r3]
 801e658:	f011 0108 	ands.w	r1, r1, #8
 801e65c:	f102 0501 	add.w	r5, r2, #1
 801e660:	d019      	beq.n	801e696 <__ssvfiscanf_r+0x72>
 801e662:	6863      	ldr	r3, [r4, #4]
 801e664:	2b00      	cmp	r3, #0
 801e666:	dd0f      	ble.n	801e688 <__ssvfiscanf_r+0x64>
 801e668:	6823      	ldr	r3, [r4, #0]
 801e66a:	781a      	ldrb	r2, [r3, #0]
 801e66c:	5cba      	ldrb	r2, [r7, r2]
 801e66e:	0712      	lsls	r2, r2, #28
 801e670:	d401      	bmi.n	801e676 <__ssvfiscanf_r+0x52>
 801e672:	462a      	mov	r2, r5
 801e674:	e7eb      	b.n	801e64e <__ssvfiscanf_r+0x2a>
 801e676:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801e678:	3201      	adds	r2, #1
 801e67a:	9245      	str	r2, [sp, #276]	; 0x114
 801e67c:	6862      	ldr	r2, [r4, #4]
 801e67e:	3301      	adds	r3, #1
 801e680:	3a01      	subs	r2, #1
 801e682:	6062      	str	r2, [r4, #4]
 801e684:	6023      	str	r3, [r4, #0]
 801e686:	e7ec      	b.n	801e662 <__ssvfiscanf_r+0x3e>
 801e688:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801e68a:	4621      	mov	r1, r4
 801e68c:	4630      	mov	r0, r6
 801e68e:	4798      	blx	r3
 801e690:	2800      	cmp	r0, #0
 801e692:	d0e9      	beq.n	801e668 <__ssvfiscanf_r+0x44>
 801e694:	e7ed      	b.n	801e672 <__ssvfiscanf_r+0x4e>
 801e696:	2b25      	cmp	r3, #37	; 0x25
 801e698:	d012      	beq.n	801e6c0 <__ssvfiscanf_r+0x9c>
 801e69a:	469a      	mov	sl, r3
 801e69c:	6863      	ldr	r3, [r4, #4]
 801e69e:	2b00      	cmp	r3, #0
 801e6a0:	f340 8091 	ble.w	801e7c6 <__ssvfiscanf_r+0x1a2>
 801e6a4:	6822      	ldr	r2, [r4, #0]
 801e6a6:	7813      	ldrb	r3, [r2, #0]
 801e6a8:	4553      	cmp	r3, sl
 801e6aa:	f040 812e 	bne.w	801e90a <__ssvfiscanf_r+0x2e6>
 801e6ae:	6863      	ldr	r3, [r4, #4]
 801e6b0:	3b01      	subs	r3, #1
 801e6b2:	6063      	str	r3, [r4, #4]
 801e6b4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801e6b6:	3201      	adds	r2, #1
 801e6b8:	3301      	adds	r3, #1
 801e6ba:	6022      	str	r2, [r4, #0]
 801e6bc:	9345      	str	r3, [sp, #276]	; 0x114
 801e6be:	e7d8      	b.n	801e672 <__ssvfiscanf_r+0x4e>
 801e6c0:	9141      	str	r1, [sp, #260]	; 0x104
 801e6c2:	9143      	str	r1, [sp, #268]	; 0x10c
 801e6c4:	7853      	ldrb	r3, [r2, #1]
 801e6c6:	2b2a      	cmp	r3, #42	; 0x2a
 801e6c8:	bf02      	ittt	eq
 801e6ca:	2310      	moveq	r3, #16
 801e6cc:	1c95      	addeq	r5, r2, #2
 801e6ce:	9341      	streq	r3, [sp, #260]	; 0x104
 801e6d0:	220a      	movs	r2, #10
 801e6d2:	46aa      	mov	sl, r5
 801e6d4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801e6d8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801e6dc:	2b09      	cmp	r3, #9
 801e6de:	d91c      	bls.n	801e71a <__ssvfiscanf_r+0xf6>
 801e6e0:	487e      	ldr	r0, [pc, #504]	; (801e8dc <__ssvfiscanf_r+0x2b8>)
 801e6e2:	2203      	movs	r2, #3
 801e6e4:	f7e1 fe24 	bl	8000330 <memchr>
 801e6e8:	b138      	cbz	r0, 801e6fa <__ssvfiscanf_r+0xd6>
 801e6ea:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801e6ec:	eba0 0009 	sub.w	r0, r0, r9
 801e6f0:	2301      	movs	r3, #1
 801e6f2:	4083      	lsls	r3, r0
 801e6f4:	4313      	orrs	r3, r2
 801e6f6:	9341      	str	r3, [sp, #260]	; 0x104
 801e6f8:	4655      	mov	r5, sl
 801e6fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 801e6fe:	2b78      	cmp	r3, #120	; 0x78
 801e700:	d806      	bhi.n	801e710 <__ssvfiscanf_r+0xec>
 801e702:	2b57      	cmp	r3, #87	; 0x57
 801e704:	d810      	bhi.n	801e728 <__ssvfiscanf_r+0x104>
 801e706:	2b25      	cmp	r3, #37	; 0x25
 801e708:	d0c7      	beq.n	801e69a <__ssvfiscanf_r+0x76>
 801e70a:	d857      	bhi.n	801e7bc <__ssvfiscanf_r+0x198>
 801e70c:	2b00      	cmp	r3, #0
 801e70e:	d065      	beq.n	801e7dc <__ssvfiscanf_r+0x1b8>
 801e710:	2303      	movs	r3, #3
 801e712:	9347      	str	r3, [sp, #284]	; 0x11c
 801e714:	230a      	movs	r3, #10
 801e716:	9342      	str	r3, [sp, #264]	; 0x108
 801e718:	e076      	b.n	801e808 <__ssvfiscanf_r+0x1e4>
 801e71a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801e71c:	fb02 1103 	mla	r1, r2, r3, r1
 801e720:	3930      	subs	r1, #48	; 0x30
 801e722:	9143      	str	r1, [sp, #268]	; 0x10c
 801e724:	4655      	mov	r5, sl
 801e726:	e7d4      	b.n	801e6d2 <__ssvfiscanf_r+0xae>
 801e728:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801e72c:	2a20      	cmp	r2, #32
 801e72e:	d8ef      	bhi.n	801e710 <__ssvfiscanf_r+0xec>
 801e730:	a101      	add	r1, pc, #4	; (adr r1, 801e738 <__ssvfiscanf_r+0x114>)
 801e732:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801e736:	bf00      	nop
 801e738:	0801e7eb 	.word	0x0801e7eb
 801e73c:	0801e711 	.word	0x0801e711
 801e740:	0801e711 	.word	0x0801e711
 801e744:	0801e849 	.word	0x0801e849
 801e748:	0801e711 	.word	0x0801e711
 801e74c:	0801e711 	.word	0x0801e711
 801e750:	0801e711 	.word	0x0801e711
 801e754:	0801e711 	.word	0x0801e711
 801e758:	0801e711 	.word	0x0801e711
 801e75c:	0801e711 	.word	0x0801e711
 801e760:	0801e711 	.word	0x0801e711
 801e764:	0801e85f 	.word	0x0801e85f
 801e768:	0801e845 	.word	0x0801e845
 801e76c:	0801e7c3 	.word	0x0801e7c3
 801e770:	0801e7c3 	.word	0x0801e7c3
 801e774:	0801e7c3 	.word	0x0801e7c3
 801e778:	0801e711 	.word	0x0801e711
 801e77c:	0801e801 	.word	0x0801e801
 801e780:	0801e711 	.word	0x0801e711
 801e784:	0801e711 	.word	0x0801e711
 801e788:	0801e711 	.word	0x0801e711
 801e78c:	0801e711 	.word	0x0801e711
 801e790:	0801e86f 	.word	0x0801e86f
 801e794:	0801e83d 	.word	0x0801e83d
 801e798:	0801e7e3 	.word	0x0801e7e3
 801e79c:	0801e711 	.word	0x0801e711
 801e7a0:	0801e711 	.word	0x0801e711
 801e7a4:	0801e86b 	.word	0x0801e86b
 801e7a8:	0801e711 	.word	0x0801e711
 801e7ac:	0801e845 	.word	0x0801e845
 801e7b0:	0801e711 	.word	0x0801e711
 801e7b4:	0801e711 	.word	0x0801e711
 801e7b8:	0801e7eb 	.word	0x0801e7eb
 801e7bc:	3b45      	subs	r3, #69	; 0x45
 801e7be:	2b02      	cmp	r3, #2
 801e7c0:	d8a6      	bhi.n	801e710 <__ssvfiscanf_r+0xec>
 801e7c2:	2305      	movs	r3, #5
 801e7c4:	e01f      	b.n	801e806 <__ssvfiscanf_r+0x1e2>
 801e7c6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801e7c8:	4621      	mov	r1, r4
 801e7ca:	4630      	mov	r0, r6
 801e7cc:	4798      	blx	r3
 801e7ce:	2800      	cmp	r0, #0
 801e7d0:	f43f af68 	beq.w	801e6a4 <__ssvfiscanf_r+0x80>
 801e7d4:	9844      	ldr	r0, [sp, #272]	; 0x110
 801e7d6:	2800      	cmp	r0, #0
 801e7d8:	f040 808d 	bne.w	801e8f6 <__ssvfiscanf_r+0x2d2>
 801e7dc:	f04f 30ff 	mov.w	r0, #4294967295
 801e7e0:	e08f      	b.n	801e902 <__ssvfiscanf_r+0x2de>
 801e7e2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801e7e4:	f042 0220 	orr.w	r2, r2, #32
 801e7e8:	9241      	str	r2, [sp, #260]	; 0x104
 801e7ea:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801e7ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e7f0:	9241      	str	r2, [sp, #260]	; 0x104
 801e7f2:	2210      	movs	r2, #16
 801e7f4:	2b6f      	cmp	r3, #111	; 0x6f
 801e7f6:	9242      	str	r2, [sp, #264]	; 0x108
 801e7f8:	bf34      	ite	cc
 801e7fa:	2303      	movcc	r3, #3
 801e7fc:	2304      	movcs	r3, #4
 801e7fe:	e002      	b.n	801e806 <__ssvfiscanf_r+0x1e2>
 801e800:	2300      	movs	r3, #0
 801e802:	9342      	str	r3, [sp, #264]	; 0x108
 801e804:	2303      	movs	r3, #3
 801e806:	9347      	str	r3, [sp, #284]	; 0x11c
 801e808:	6863      	ldr	r3, [r4, #4]
 801e80a:	2b00      	cmp	r3, #0
 801e80c:	dd3d      	ble.n	801e88a <__ssvfiscanf_r+0x266>
 801e80e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801e810:	0659      	lsls	r1, r3, #25
 801e812:	d404      	bmi.n	801e81e <__ssvfiscanf_r+0x1fa>
 801e814:	6823      	ldr	r3, [r4, #0]
 801e816:	781a      	ldrb	r2, [r3, #0]
 801e818:	5cba      	ldrb	r2, [r7, r2]
 801e81a:	0712      	lsls	r2, r2, #28
 801e81c:	d43c      	bmi.n	801e898 <__ssvfiscanf_r+0x274>
 801e81e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801e820:	2b02      	cmp	r3, #2
 801e822:	dc4b      	bgt.n	801e8bc <__ssvfiscanf_r+0x298>
 801e824:	466b      	mov	r3, sp
 801e826:	4622      	mov	r2, r4
 801e828:	a941      	add	r1, sp, #260	; 0x104
 801e82a:	4630      	mov	r0, r6
 801e82c:	f000 f872 	bl	801e914 <_scanf_chars>
 801e830:	2801      	cmp	r0, #1
 801e832:	d06a      	beq.n	801e90a <__ssvfiscanf_r+0x2e6>
 801e834:	2802      	cmp	r0, #2
 801e836:	f47f af1c 	bne.w	801e672 <__ssvfiscanf_r+0x4e>
 801e83a:	e7cb      	b.n	801e7d4 <__ssvfiscanf_r+0x1b0>
 801e83c:	2308      	movs	r3, #8
 801e83e:	9342      	str	r3, [sp, #264]	; 0x108
 801e840:	2304      	movs	r3, #4
 801e842:	e7e0      	b.n	801e806 <__ssvfiscanf_r+0x1e2>
 801e844:	220a      	movs	r2, #10
 801e846:	e7d5      	b.n	801e7f4 <__ssvfiscanf_r+0x1d0>
 801e848:	4629      	mov	r1, r5
 801e84a:	4640      	mov	r0, r8
 801e84c:	f000 fa5e 	bl	801ed0c <__sccl>
 801e850:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801e852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e856:	9341      	str	r3, [sp, #260]	; 0x104
 801e858:	4605      	mov	r5, r0
 801e85a:	2301      	movs	r3, #1
 801e85c:	e7d3      	b.n	801e806 <__ssvfiscanf_r+0x1e2>
 801e85e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801e860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e864:	9341      	str	r3, [sp, #260]	; 0x104
 801e866:	2300      	movs	r3, #0
 801e868:	e7cd      	b.n	801e806 <__ssvfiscanf_r+0x1e2>
 801e86a:	2302      	movs	r3, #2
 801e86c:	e7cb      	b.n	801e806 <__ssvfiscanf_r+0x1e2>
 801e86e:	9841      	ldr	r0, [sp, #260]	; 0x104
 801e870:	06c3      	lsls	r3, r0, #27
 801e872:	f53f aefe 	bmi.w	801e672 <__ssvfiscanf_r+0x4e>
 801e876:	9b00      	ldr	r3, [sp, #0]
 801e878:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801e87a:	1d19      	adds	r1, r3, #4
 801e87c:	9100      	str	r1, [sp, #0]
 801e87e:	681b      	ldr	r3, [r3, #0]
 801e880:	07c0      	lsls	r0, r0, #31
 801e882:	bf4c      	ite	mi
 801e884:	801a      	strhmi	r2, [r3, #0]
 801e886:	601a      	strpl	r2, [r3, #0]
 801e888:	e6f3      	b.n	801e672 <__ssvfiscanf_r+0x4e>
 801e88a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801e88c:	4621      	mov	r1, r4
 801e88e:	4630      	mov	r0, r6
 801e890:	4798      	blx	r3
 801e892:	2800      	cmp	r0, #0
 801e894:	d0bb      	beq.n	801e80e <__ssvfiscanf_r+0x1ea>
 801e896:	e79d      	b.n	801e7d4 <__ssvfiscanf_r+0x1b0>
 801e898:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801e89a:	3201      	adds	r2, #1
 801e89c:	9245      	str	r2, [sp, #276]	; 0x114
 801e89e:	6862      	ldr	r2, [r4, #4]
 801e8a0:	3a01      	subs	r2, #1
 801e8a2:	2a00      	cmp	r2, #0
 801e8a4:	6062      	str	r2, [r4, #4]
 801e8a6:	dd02      	ble.n	801e8ae <__ssvfiscanf_r+0x28a>
 801e8a8:	3301      	adds	r3, #1
 801e8aa:	6023      	str	r3, [r4, #0]
 801e8ac:	e7b2      	b.n	801e814 <__ssvfiscanf_r+0x1f0>
 801e8ae:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801e8b0:	4621      	mov	r1, r4
 801e8b2:	4630      	mov	r0, r6
 801e8b4:	4798      	blx	r3
 801e8b6:	2800      	cmp	r0, #0
 801e8b8:	d0ac      	beq.n	801e814 <__ssvfiscanf_r+0x1f0>
 801e8ba:	e78b      	b.n	801e7d4 <__ssvfiscanf_r+0x1b0>
 801e8bc:	2b04      	cmp	r3, #4
 801e8be:	dc0f      	bgt.n	801e8e0 <__ssvfiscanf_r+0x2bc>
 801e8c0:	466b      	mov	r3, sp
 801e8c2:	4622      	mov	r2, r4
 801e8c4:	a941      	add	r1, sp, #260	; 0x104
 801e8c6:	4630      	mov	r0, r6
 801e8c8:	f000 f87e 	bl	801e9c8 <_scanf_i>
 801e8cc:	e7b0      	b.n	801e830 <__ssvfiscanf_r+0x20c>
 801e8ce:	bf00      	nop
 801e8d0:	0801e571 	.word	0x0801e571
 801e8d4:	0801e5eb 	.word	0x0801e5eb
 801e8d8:	08020679 	.word	0x08020679
 801e8dc:	0802077f 	.word	0x0802077f
 801e8e0:	4b0b      	ldr	r3, [pc, #44]	; (801e910 <__ssvfiscanf_r+0x2ec>)
 801e8e2:	2b00      	cmp	r3, #0
 801e8e4:	f43f aec5 	beq.w	801e672 <__ssvfiscanf_r+0x4e>
 801e8e8:	466b      	mov	r3, sp
 801e8ea:	4622      	mov	r2, r4
 801e8ec:	a941      	add	r1, sp, #260	; 0x104
 801e8ee:	4630      	mov	r0, r6
 801e8f0:	f7fc fefc 	bl	801b6ec <_scanf_float>
 801e8f4:	e79c      	b.n	801e830 <__ssvfiscanf_r+0x20c>
 801e8f6:	89a3      	ldrh	r3, [r4, #12]
 801e8f8:	f013 0f40 	tst.w	r3, #64	; 0x40
 801e8fc:	bf18      	it	ne
 801e8fe:	f04f 30ff 	movne.w	r0, #4294967295
 801e902:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801e906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e90a:	9844      	ldr	r0, [sp, #272]	; 0x110
 801e90c:	e7f9      	b.n	801e902 <__ssvfiscanf_r+0x2de>
 801e90e:	bf00      	nop
 801e910:	0801b6ed 	.word	0x0801b6ed

0801e914 <_scanf_chars>:
 801e914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e918:	4615      	mov	r5, r2
 801e91a:	688a      	ldr	r2, [r1, #8]
 801e91c:	4680      	mov	r8, r0
 801e91e:	460c      	mov	r4, r1
 801e920:	b932      	cbnz	r2, 801e930 <_scanf_chars+0x1c>
 801e922:	698a      	ldr	r2, [r1, #24]
 801e924:	2a00      	cmp	r2, #0
 801e926:	bf0c      	ite	eq
 801e928:	2201      	moveq	r2, #1
 801e92a:	f04f 32ff 	movne.w	r2, #4294967295
 801e92e:	608a      	str	r2, [r1, #8]
 801e930:	6822      	ldr	r2, [r4, #0]
 801e932:	f8df 9090 	ldr.w	r9, [pc, #144]	; 801e9c4 <_scanf_chars+0xb0>
 801e936:	06d1      	lsls	r1, r2, #27
 801e938:	bf5f      	itttt	pl
 801e93a:	681a      	ldrpl	r2, [r3, #0]
 801e93c:	1d11      	addpl	r1, r2, #4
 801e93e:	6019      	strpl	r1, [r3, #0]
 801e940:	6816      	ldrpl	r6, [r2, #0]
 801e942:	2700      	movs	r7, #0
 801e944:	69a0      	ldr	r0, [r4, #24]
 801e946:	b188      	cbz	r0, 801e96c <_scanf_chars+0x58>
 801e948:	2801      	cmp	r0, #1
 801e94a:	d107      	bne.n	801e95c <_scanf_chars+0x48>
 801e94c:	682a      	ldr	r2, [r5, #0]
 801e94e:	7811      	ldrb	r1, [r2, #0]
 801e950:	6962      	ldr	r2, [r4, #20]
 801e952:	5c52      	ldrb	r2, [r2, r1]
 801e954:	b952      	cbnz	r2, 801e96c <_scanf_chars+0x58>
 801e956:	2f00      	cmp	r7, #0
 801e958:	d031      	beq.n	801e9be <_scanf_chars+0xaa>
 801e95a:	e022      	b.n	801e9a2 <_scanf_chars+0x8e>
 801e95c:	2802      	cmp	r0, #2
 801e95e:	d120      	bne.n	801e9a2 <_scanf_chars+0x8e>
 801e960:	682b      	ldr	r3, [r5, #0]
 801e962:	781b      	ldrb	r3, [r3, #0]
 801e964:	f819 3003 	ldrb.w	r3, [r9, r3]
 801e968:	071b      	lsls	r3, r3, #28
 801e96a:	d41a      	bmi.n	801e9a2 <_scanf_chars+0x8e>
 801e96c:	6823      	ldr	r3, [r4, #0]
 801e96e:	06da      	lsls	r2, r3, #27
 801e970:	bf5e      	ittt	pl
 801e972:	682b      	ldrpl	r3, [r5, #0]
 801e974:	781b      	ldrbpl	r3, [r3, #0]
 801e976:	f806 3b01 	strbpl.w	r3, [r6], #1
 801e97a:	682a      	ldr	r2, [r5, #0]
 801e97c:	686b      	ldr	r3, [r5, #4]
 801e97e:	3201      	adds	r2, #1
 801e980:	602a      	str	r2, [r5, #0]
 801e982:	68a2      	ldr	r2, [r4, #8]
 801e984:	3b01      	subs	r3, #1
 801e986:	3a01      	subs	r2, #1
 801e988:	606b      	str	r3, [r5, #4]
 801e98a:	3701      	adds	r7, #1
 801e98c:	60a2      	str	r2, [r4, #8]
 801e98e:	b142      	cbz	r2, 801e9a2 <_scanf_chars+0x8e>
 801e990:	2b00      	cmp	r3, #0
 801e992:	dcd7      	bgt.n	801e944 <_scanf_chars+0x30>
 801e994:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801e998:	4629      	mov	r1, r5
 801e99a:	4640      	mov	r0, r8
 801e99c:	4798      	blx	r3
 801e99e:	2800      	cmp	r0, #0
 801e9a0:	d0d0      	beq.n	801e944 <_scanf_chars+0x30>
 801e9a2:	6823      	ldr	r3, [r4, #0]
 801e9a4:	f013 0310 	ands.w	r3, r3, #16
 801e9a8:	d105      	bne.n	801e9b6 <_scanf_chars+0xa2>
 801e9aa:	68e2      	ldr	r2, [r4, #12]
 801e9ac:	3201      	adds	r2, #1
 801e9ae:	60e2      	str	r2, [r4, #12]
 801e9b0:	69a2      	ldr	r2, [r4, #24]
 801e9b2:	b102      	cbz	r2, 801e9b6 <_scanf_chars+0xa2>
 801e9b4:	7033      	strb	r3, [r6, #0]
 801e9b6:	6923      	ldr	r3, [r4, #16]
 801e9b8:	443b      	add	r3, r7
 801e9ba:	6123      	str	r3, [r4, #16]
 801e9bc:	2000      	movs	r0, #0
 801e9be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e9c2:	bf00      	nop
 801e9c4:	08020679 	.word	0x08020679

0801e9c8 <_scanf_i>:
 801e9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9cc:	4698      	mov	r8, r3
 801e9ce:	4b74      	ldr	r3, [pc, #464]	; (801eba0 <_scanf_i+0x1d8>)
 801e9d0:	460c      	mov	r4, r1
 801e9d2:	4682      	mov	sl, r0
 801e9d4:	4616      	mov	r6, r2
 801e9d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801e9da:	b087      	sub	sp, #28
 801e9dc:	ab03      	add	r3, sp, #12
 801e9de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801e9e2:	4b70      	ldr	r3, [pc, #448]	; (801eba4 <_scanf_i+0x1dc>)
 801e9e4:	69a1      	ldr	r1, [r4, #24]
 801e9e6:	4a70      	ldr	r2, [pc, #448]	; (801eba8 <_scanf_i+0x1e0>)
 801e9e8:	2903      	cmp	r1, #3
 801e9ea:	bf18      	it	ne
 801e9ec:	461a      	movne	r2, r3
 801e9ee:	68a3      	ldr	r3, [r4, #8]
 801e9f0:	9201      	str	r2, [sp, #4]
 801e9f2:	1e5a      	subs	r2, r3, #1
 801e9f4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801e9f8:	bf88      	it	hi
 801e9fa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801e9fe:	4627      	mov	r7, r4
 801ea00:	bf82      	ittt	hi
 801ea02:	eb03 0905 	addhi.w	r9, r3, r5
 801ea06:	f240 135d 	movwhi	r3, #349	; 0x15d
 801ea0a:	60a3      	strhi	r3, [r4, #8]
 801ea0c:	f857 3b1c 	ldr.w	r3, [r7], #28
 801ea10:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801ea14:	bf98      	it	ls
 801ea16:	f04f 0900 	movls.w	r9, #0
 801ea1a:	6023      	str	r3, [r4, #0]
 801ea1c:	463d      	mov	r5, r7
 801ea1e:	f04f 0b00 	mov.w	fp, #0
 801ea22:	6831      	ldr	r1, [r6, #0]
 801ea24:	ab03      	add	r3, sp, #12
 801ea26:	7809      	ldrb	r1, [r1, #0]
 801ea28:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801ea2c:	2202      	movs	r2, #2
 801ea2e:	f7e1 fc7f 	bl	8000330 <memchr>
 801ea32:	b328      	cbz	r0, 801ea80 <_scanf_i+0xb8>
 801ea34:	f1bb 0f01 	cmp.w	fp, #1
 801ea38:	d159      	bne.n	801eaee <_scanf_i+0x126>
 801ea3a:	6862      	ldr	r2, [r4, #4]
 801ea3c:	b92a      	cbnz	r2, 801ea4a <_scanf_i+0x82>
 801ea3e:	6822      	ldr	r2, [r4, #0]
 801ea40:	2308      	movs	r3, #8
 801ea42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ea46:	6063      	str	r3, [r4, #4]
 801ea48:	6022      	str	r2, [r4, #0]
 801ea4a:	6822      	ldr	r2, [r4, #0]
 801ea4c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801ea50:	6022      	str	r2, [r4, #0]
 801ea52:	68a2      	ldr	r2, [r4, #8]
 801ea54:	1e51      	subs	r1, r2, #1
 801ea56:	60a1      	str	r1, [r4, #8]
 801ea58:	b192      	cbz	r2, 801ea80 <_scanf_i+0xb8>
 801ea5a:	6832      	ldr	r2, [r6, #0]
 801ea5c:	1c51      	adds	r1, r2, #1
 801ea5e:	6031      	str	r1, [r6, #0]
 801ea60:	7812      	ldrb	r2, [r2, #0]
 801ea62:	f805 2b01 	strb.w	r2, [r5], #1
 801ea66:	6872      	ldr	r2, [r6, #4]
 801ea68:	3a01      	subs	r2, #1
 801ea6a:	2a00      	cmp	r2, #0
 801ea6c:	6072      	str	r2, [r6, #4]
 801ea6e:	dc07      	bgt.n	801ea80 <_scanf_i+0xb8>
 801ea70:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801ea74:	4631      	mov	r1, r6
 801ea76:	4650      	mov	r0, sl
 801ea78:	4790      	blx	r2
 801ea7a:	2800      	cmp	r0, #0
 801ea7c:	f040 8085 	bne.w	801eb8a <_scanf_i+0x1c2>
 801ea80:	f10b 0b01 	add.w	fp, fp, #1
 801ea84:	f1bb 0f03 	cmp.w	fp, #3
 801ea88:	d1cb      	bne.n	801ea22 <_scanf_i+0x5a>
 801ea8a:	6863      	ldr	r3, [r4, #4]
 801ea8c:	b90b      	cbnz	r3, 801ea92 <_scanf_i+0xca>
 801ea8e:	230a      	movs	r3, #10
 801ea90:	6063      	str	r3, [r4, #4]
 801ea92:	6863      	ldr	r3, [r4, #4]
 801ea94:	4945      	ldr	r1, [pc, #276]	; (801ebac <_scanf_i+0x1e4>)
 801ea96:	6960      	ldr	r0, [r4, #20]
 801ea98:	1ac9      	subs	r1, r1, r3
 801ea9a:	f000 f937 	bl	801ed0c <__sccl>
 801ea9e:	f04f 0b00 	mov.w	fp, #0
 801eaa2:	68a3      	ldr	r3, [r4, #8]
 801eaa4:	6822      	ldr	r2, [r4, #0]
 801eaa6:	2b00      	cmp	r3, #0
 801eaa8:	d03d      	beq.n	801eb26 <_scanf_i+0x15e>
 801eaaa:	6831      	ldr	r1, [r6, #0]
 801eaac:	6960      	ldr	r0, [r4, #20]
 801eaae:	f891 c000 	ldrb.w	ip, [r1]
 801eab2:	f810 000c 	ldrb.w	r0, [r0, ip]
 801eab6:	2800      	cmp	r0, #0
 801eab8:	d035      	beq.n	801eb26 <_scanf_i+0x15e>
 801eaba:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801eabe:	d124      	bne.n	801eb0a <_scanf_i+0x142>
 801eac0:	0510      	lsls	r0, r2, #20
 801eac2:	d522      	bpl.n	801eb0a <_scanf_i+0x142>
 801eac4:	f10b 0b01 	add.w	fp, fp, #1
 801eac8:	f1b9 0f00 	cmp.w	r9, #0
 801eacc:	d003      	beq.n	801ead6 <_scanf_i+0x10e>
 801eace:	3301      	adds	r3, #1
 801ead0:	f109 39ff 	add.w	r9, r9, #4294967295
 801ead4:	60a3      	str	r3, [r4, #8]
 801ead6:	6873      	ldr	r3, [r6, #4]
 801ead8:	3b01      	subs	r3, #1
 801eada:	2b00      	cmp	r3, #0
 801eadc:	6073      	str	r3, [r6, #4]
 801eade:	dd1b      	ble.n	801eb18 <_scanf_i+0x150>
 801eae0:	6833      	ldr	r3, [r6, #0]
 801eae2:	3301      	adds	r3, #1
 801eae4:	6033      	str	r3, [r6, #0]
 801eae6:	68a3      	ldr	r3, [r4, #8]
 801eae8:	3b01      	subs	r3, #1
 801eaea:	60a3      	str	r3, [r4, #8]
 801eaec:	e7d9      	b.n	801eaa2 <_scanf_i+0xda>
 801eaee:	f1bb 0f02 	cmp.w	fp, #2
 801eaf2:	d1ae      	bne.n	801ea52 <_scanf_i+0x8a>
 801eaf4:	6822      	ldr	r2, [r4, #0]
 801eaf6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801eafa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801eafe:	d1bf      	bne.n	801ea80 <_scanf_i+0xb8>
 801eb00:	2310      	movs	r3, #16
 801eb02:	6063      	str	r3, [r4, #4]
 801eb04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801eb08:	e7a2      	b.n	801ea50 <_scanf_i+0x88>
 801eb0a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801eb0e:	6022      	str	r2, [r4, #0]
 801eb10:	780b      	ldrb	r3, [r1, #0]
 801eb12:	f805 3b01 	strb.w	r3, [r5], #1
 801eb16:	e7de      	b.n	801ead6 <_scanf_i+0x10e>
 801eb18:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801eb1c:	4631      	mov	r1, r6
 801eb1e:	4650      	mov	r0, sl
 801eb20:	4798      	blx	r3
 801eb22:	2800      	cmp	r0, #0
 801eb24:	d0df      	beq.n	801eae6 <_scanf_i+0x11e>
 801eb26:	6823      	ldr	r3, [r4, #0]
 801eb28:	05d9      	lsls	r1, r3, #23
 801eb2a:	d50d      	bpl.n	801eb48 <_scanf_i+0x180>
 801eb2c:	42bd      	cmp	r5, r7
 801eb2e:	d909      	bls.n	801eb44 <_scanf_i+0x17c>
 801eb30:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801eb34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801eb38:	4632      	mov	r2, r6
 801eb3a:	4650      	mov	r0, sl
 801eb3c:	4798      	blx	r3
 801eb3e:	f105 39ff 	add.w	r9, r5, #4294967295
 801eb42:	464d      	mov	r5, r9
 801eb44:	42bd      	cmp	r5, r7
 801eb46:	d028      	beq.n	801eb9a <_scanf_i+0x1d2>
 801eb48:	6822      	ldr	r2, [r4, #0]
 801eb4a:	f012 0210 	ands.w	r2, r2, #16
 801eb4e:	d113      	bne.n	801eb78 <_scanf_i+0x1b0>
 801eb50:	702a      	strb	r2, [r5, #0]
 801eb52:	6863      	ldr	r3, [r4, #4]
 801eb54:	9e01      	ldr	r6, [sp, #4]
 801eb56:	4639      	mov	r1, r7
 801eb58:	4650      	mov	r0, sl
 801eb5a:	47b0      	blx	r6
 801eb5c:	f8d8 3000 	ldr.w	r3, [r8]
 801eb60:	6821      	ldr	r1, [r4, #0]
 801eb62:	1d1a      	adds	r2, r3, #4
 801eb64:	f8c8 2000 	str.w	r2, [r8]
 801eb68:	f011 0f20 	tst.w	r1, #32
 801eb6c:	681b      	ldr	r3, [r3, #0]
 801eb6e:	d00f      	beq.n	801eb90 <_scanf_i+0x1c8>
 801eb70:	6018      	str	r0, [r3, #0]
 801eb72:	68e3      	ldr	r3, [r4, #12]
 801eb74:	3301      	adds	r3, #1
 801eb76:	60e3      	str	r3, [r4, #12]
 801eb78:	6923      	ldr	r3, [r4, #16]
 801eb7a:	1bed      	subs	r5, r5, r7
 801eb7c:	445d      	add	r5, fp
 801eb7e:	442b      	add	r3, r5
 801eb80:	6123      	str	r3, [r4, #16]
 801eb82:	2000      	movs	r0, #0
 801eb84:	b007      	add	sp, #28
 801eb86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb8a:	f04f 0b00 	mov.w	fp, #0
 801eb8e:	e7ca      	b.n	801eb26 <_scanf_i+0x15e>
 801eb90:	07ca      	lsls	r2, r1, #31
 801eb92:	bf4c      	ite	mi
 801eb94:	8018      	strhmi	r0, [r3, #0]
 801eb96:	6018      	strpl	r0, [r3, #0]
 801eb98:	e7eb      	b.n	801eb72 <_scanf_i+0x1aa>
 801eb9a:	2001      	movs	r0, #1
 801eb9c:	e7f2      	b.n	801eb84 <_scanf_i+0x1bc>
 801eb9e:	bf00      	nop
 801eba0:	0801fef8 	.word	0x0801fef8
 801eba4:	0801f6fd 	.word	0x0801f6fd
 801eba8:	0801e2bd 	.word	0x0801e2bd
 801ebac:	0802079a 	.word	0x0802079a

0801ebb0 <__sflush_r>:
 801ebb0:	898a      	ldrh	r2, [r1, #12]
 801ebb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ebb6:	4605      	mov	r5, r0
 801ebb8:	0710      	lsls	r0, r2, #28
 801ebba:	460c      	mov	r4, r1
 801ebbc:	d458      	bmi.n	801ec70 <__sflush_r+0xc0>
 801ebbe:	684b      	ldr	r3, [r1, #4]
 801ebc0:	2b00      	cmp	r3, #0
 801ebc2:	dc05      	bgt.n	801ebd0 <__sflush_r+0x20>
 801ebc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ebc6:	2b00      	cmp	r3, #0
 801ebc8:	dc02      	bgt.n	801ebd0 <__sflush_r+0x20>
 801ebca:	2000      	movs	r0, #0
 801ebcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ebd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ebd2:	2e00      	cmp	r6, #0
 801ebd4:	d0f9      	beq.n	801ebca <__sflush_r+0x1a>
 801ebd6:	2300      	movs	r3, #0
 801ebd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ebdc:	682f      	ldr	r7, [r5, #0]
 801ebde:	6a21      	ldr	r1, [r4, #32]
 801ebe0:	602b      	str	r3, [r5, #0]
 801ebe2:	d032      	beq.n	801ec4a <__sflush_r+0x9a>
 801ebe4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ebe6:	89a3      	ldrh	r3, [r4, #12]
 801ebe8:	075a      	lsls	r2, r3, #29
 801ebea:	d505      	bpl.n	801ebf8 <__sflush_r+0x48>
 801ebec:	6863      	ldr	r3, [r4, #4]
 801ebee:	1ac0      	subs	r0, r0, r3
 801ebf0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ebf2:	b10b      	cbz	r3, 801ebf8 <__sflush_r+0x48>
 801ebf4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ebf6:	1ac0      	subs	r0, r0, r3
 801ebf8:	2300      	movs	r3, #0
 801ebfa:	4602      	mov	r2, r0
 801ebfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ebfe:	6a21      	ldr	r1, [r4, #32]
 801ec00:	4628      	mov	r0, r5
 801ec02:	47b0      	blx	r6
 801ec04:	1c43      	adds	r3, r0, #1
 801ec06:	89a3      	ldrh	r3, [r4, #12]
 801ec08:	d106      	bne.n	801ec18 <__sflush_r+0x68>
 801ec0a:	6829      	ldr	r1, [r5, #0]
 801ec0c:	291d      	cmp	r1, #29
 801ec0e:	d82b      	bhi.n	801ec68 <__sflush_r+0xb8>
 801ec10:	4a29      	ldr	r2, [pc, #164]	; (801ecb8 <__sflush_r+0x108>)
 801ec12:	410a      	asrs	r2, r1
 801ec14:	07d6      	lsls	r6, r2, #31
 801ec16:	d427      	bmi.n	801ec68 <__sflush_r+0xb8>
 801ec18:	2200      	movs	r2, #0
 801ec1a:	6062      	str	r2, [r4, #4]
 801ec1c:	04d9      	lsls	r1, r3, #19
 801ec1e:	6922      	ldr	r2, [r4, #16]
 801ec20:	6022      	str	r2, [r4, #0]
 801ec22:	d504      	bpl.n	801ec2e <__sflush_r+0x7e>
 801ec24:	1c42      	adds	r2, r0, #1
 801ec26:	d101      	bne.n	801ec2c <__sflush_r+0x7c>
 801ec28:	682b      	ldr	r3, [r5, #0]
 801ec2a:	b903      	cbnz	r3, 801ec2e <__sflush_r+0x7e>
 801ec2c:	6560      	str	r0, [r4, #84]	; 0x54
 801ec2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ec30:	602f      	str	r7, [r5, #0]
 801ec32:	2900      	cmp	r1, #0
 801ec34:	d0c9      	beq.n	801ebca <__sflush_r+0x1a>
 801ec36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ec3a:	4299      	cmp	r1, r3
 801ec3c:	d002      	beq.n	801ec44 <__sflush_r+0x94>
 801ec3e:	4628      	mov	r0, r5
 801ec40:	f7fd ff3e 	bl	801cac0 <_free_r>
 801ec44:	2000      	movs	r0, #0
 801ec46:	6360      	str	r0, [r4, #52]	; 0x34
 801ec48:	e7c0      	b.n	801ebcc <__sflush_r+0x1c>
 801ec4a:	2301      	movs	r3, #1
 801ec4c:	4628      	mov	r0, r5
 801ec4e:	47b0      	blx	r6
 801ec50:	1c41      	adds	r1, r0, #1
 801ec52:	d1c8      	bne.n	801ebe6 <__sflush_r+0x36>
 801ec54:	682b      	ldr	r3, [r5, #0]
 801ec56:	2b00      	cmp	r3, #0
 801ec58:	d0c5      	beq.n	801ebe6 <__sflush_r+0x36>
 801ec5a:	2b1d      	cmp	r3, #29
 801ec5c:	d001      	beq.n	801ec62 <__sflush_r+0xb2>
 801ec5e:	2b16      	cmp	r3, #22
 801ec60:	d101      	bne.n	801ec66 <__sflush_r+0xb6>
 801ec62:	602f      	str	r7, [r5, #0]
 801ec64:	e7b1      	b.n	801ebca <__sflush_r+0x1a>
 801ec66:	89a3      	ldrh	r3, [r4, #12]
 801ec68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ec6c:	81a3      	strh	r3, [r4, #12]
 801ec6e:	e7ad      	b.n	801ebcc <__sflush_r+0x1c>
 801ec70:	690f      	ldr	r7, [r1, #16]
 801ec72:	2f00      	cmp	r7, #0
 801ec74:	d0a9      	beq.n	801ebca <__sflush_r+0x1a>
 801ec76:	0793      	lsls	r3, r2, #30
 801ec78:	680e      	ldr	r6, [r1, #0]
 801ec7a:	bf08      	it	eq
 801ec7c:	694b      	ldreq	r3, [r1, #20]
 801ec7e:	600f      	str	r7, [r1, #0]
 801ec80:	bf18      	it	ne
 801ec82:	2300      	movne	r3, #0
 801ec84:	eba6 0807 	sub.w	r8, r6, r7
 801ec88:	608b      	str	r3, [r1, #8]
 801ec8a:	f1b8 0f00 	cmp.w	r8, #0
 801ec8e:	dd9c      	ble.n	801ebca <__sflush_r+0x1a>
 801ec90:	6a21      	ldr	r1, [r4, #32]
 801ec92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ec94:	4643      	mov	r3, r8
 801ec96:	463a      	mov	r2, r7
 801ec98:	4628      	mov	r0, r5
 801ec9a:	47b0      	blx	r6
 801ec9c:	2800      	cmp	r0, #0
 801ec9e:	dc06      	bgt.n	801ecae <__sflush_r+0xfe>
 801eca0:	89a3      	ldrh	r3, [r4, #12]
 801eca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801eca6:	81a3      	strh	r3, [r4, #12]
 801eca8:	f04f 30ff 	mov.w	r0, #4294967295
 801ecac:	e78e      	b.n	801ebcc <__sflush_r+0x1c>
 801ecae:	4407      	add	r7, r0
 801ecb0:	eba8 0800 	sub.w	r8, r8, r0
 801ecb4:	e7e9      	b.n	801ec8a <__sflush_r+0xda>
 801ecb6:	bf00      	nop
 801ecb8:	dfbffffe 	.word	0xdfbffffe

0801ecbc <_fflush_r>:
 801ecbc:	b538      	push	{r3, r4, r5, lr}
 801ecbe:	690b      	ldr	r3, [r1, #16]
 801ecc0:	4605      	mov	r5, r0
 801ecc2:	460c      	mov	r4, r1
 801ecc4:	b913      	cbnz	r3, 801eccc <_fflush_r+0x10>
 801ecc6:	2500      	movs	r5, #0
 801ecc8:	4628      	mov	r0, r5
 801ecca:	bd38      	pop	{r3, r4, r5, pc}
 801eccc:	b118      	cbz	r0, 801ecd6 <_fflush_r+0x1a>
 801ecce:	6a03      	ldr	r3, [r0, #32]
 801ecd0:	b90b      	cbnz	r3, 801ecd6 <_fflush_r+0x1a>
 801ecd2:	f7fc ff9b 	bl	801bc0c <__sinit>
 801ecd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ecda:	2b00      	cmp	r3, #0
 801ecdc:	d0f3      	beq.n	801ecc6 <_fflush_r+0xa>
 801ecde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ece0:	07d0      	lsls	r0, r2, #31
 801ece2:	d404      	bmi.n	801ecee <_fflush_r+0x32>
 801ece4:	0599      	lsls	r1, r3, #22
 801ece6:	d402      	bmi.n	801ecee <_fflush_r+0x32>
 801ece8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ecea:	f7fd f8d4 	bl	801be96 <__retarget_lock_acquire_recursive>
 801ecee:	4628      	mov	r0, r5
 801ecf0:	4621      	mov	r1, r4
 801ecf2:	f7ff ff5d 	bl	801ebb0 <__sflush_r>
 801ecf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ecf8:	07da      	lsls	r2, r3, #31
 801ecfa:	4605      	mov	r5, r0
 801ecfc:	d4e4      	bmi.n	801ecc8 <_fflush_r+0xc>
 801ecfe:	89a3      	ldrh	r3, [r4, #12]
 801ed00:	059b      	lsls	r3, r3, #22
 801ed02:	d4e1      	bmi.n	801ecc8 <_fflush_r+0xc>
 801ed04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ed06:	f7fd f8c7 	bl	801be98 <__retarget_lock_release_recursive>
 801ed0a:	e7dd      	b.n	801ecc8 <_fflush_r+0xc>

0801ed0c <__sccl>:
 801ed0c:	b570      	push	{r4, r5, r6, lr}
 801ed0e:	780b      	ldrb	r3, [r1, #0]
 801ed10:	4604      	mov	r4, r0
 801ed12:	2b5e      	cmp	r3, #94	; 0x5e
 801ed14:	bf0b      	itete	eq
 801ed16:	784b      	ldrbeq	r3, [r1, #1]
 801ed18:	1c4a      	addne	r2, r1, #1
 801ed1a:	1c8a      	addeq	r2, r1, #2
 801ed1c:	2100      	movne	r1, #0
 801ed1e:	bf08      	it	eq
 801ed20:	2101      	moveq	r1, #1
 801ed22:	3801      	subs	r0, #1
 801ed24:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801ed28:	f800 1f01 	strb.w	r1, [r0, #1]!
 801ed2c:	42a8      	cmp	r0, r5
 801ed2e:	d1fb      	bne.n	801ed28 <__sccl+0x1c>
 801ed30:	b90b      	cbnz	r3, 801ed36 <__sccl+0x2a>
 801ed32:	1e50      	subs	r0, r2, #1
 801ed34:	bd70      	pop	{r4, r5, r6, pc}
 801ed36:	f081 0101 	eor.w	r1, r1, #1
 801ed3a:	54e1      	strb	r1, [r4, r3]
 801ed3c:	4610      	mov	r0, r2
 801ed3e:	4602      	mov	r2, r0
 801ed40:	f812 5b01 	ldrb.w	r5, [r2], #1
 801ed44:	2d2d      	cmp	r5, #45	; 0x2d
 801ed46:	d005      	beq.n	801ed54 <__sccl+0x48>
 801ed48:	2d5d      	cmp	r5, #93	; 0x5d
 801ed4a:	d016      	beq.n	801ed7a <__sccl+0x6e>
 801ed4c:	2d00      	cmp	r5, #0
 801ed4e:	d0f1      	beq.n	801ed34 <__sccl+0x28>
 801ed50:	462b      	mov	r3, r5
 801ed52:	e7f2      	b.n	801ed3a <__sccl+0x2e>
 801ed54:	7846      	ldrb	r6, [r0, #1]
 801ed56:	2e5d      	cmp	r6, #93	; 0x5d
 801ed58:	d0fa      	beq.n	801ed50 <__sccl+0x44>
 801ed5a:	42b3      	cmp	r3, r6
 801ed5c:	dcf8      	bgt.n	801ed50 <__sccl+0x44>
 801ed5e:	3002      	adds	r0, #2
 801ed60:	461a      	mov	r2, r3
 801ed62:	3201      	adds	r2, #1
 801ed64:	4296      	cmp	r6, r2
 801ed66:	54a1      	strb	r1, [r4, r2]
 801ed68:	dcfb      	bgt.n	801ed62 <__sccl+0x56>
 801ed6a:	1af2      	subs	r2, r6, r3
 801ed6c:	3a01      	subs	r2, #1
 801ed6e:	1c5d      	adds	r5, r3, #1
 801ed70:	42b3      	cmp	r3, r6
 801ed72:	bfa8      	it	ge
 801ed74:	2200      	movge	r2, #0
 801ed76:	18ab      	adds	r3, r5, r2
 801ed78:	e7e1      	b.n	801ed3e <__sccl+0x32>
 801ed7a:	4610      	mov	r0, r2
 801ed7c:	e7da      	b.n	801ed34 <__sccl+0x28>

0801ed7e <__submore>:
 801ed7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ed82:	460c      	mov	r4, r1
 801ed84:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801ed86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ed8a:	4299      	cmp	r1, r3
 801ed8c:	d11d      	bne.n	801edca <__submore+0x4c>
 801ed8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801ed92:	f7fd ff09 	bl	801cba8 <_malloc_r>
 801ed96:	b918      	cbnz	r0, 801eda0 <__submore+0x22>
 801ed98:	f04f 30ff 	mov.w	r0, #4294967295
 801ed9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801eda0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801eda4:	63a3      	str	r3, [r4, #56]	; 0x38
 801eda6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801edaa:	6360      	str	r0, [r4, #52]	; 0x34
 801edac:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801edb0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801edb4:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801edb8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801edbc:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801edc0:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801edc4:	6020      	str	r0, [r4, #0]
 801edc6:	2000      	movs	r0, #0
 801edc8:	e7e8      	b.n	801ed9c <__submore+0x1e>
 801edca:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801edcc:	0077      	lsls	r7, r6, #1
 801edce:	463a      	mov	r2, r7
 801edd0:	f000 fbf3 	bl	801f5ba <_realloc_r>
 801edd4:	4605      	mov	r5, r0
 801edd6:	2800      	cmp	r0, #0
 801edd8:	d0de      	beq.n	801ed98 <__submore+0x1a>
 801edda:	eb00 0806 	add.w	r8, r0, r6
 801edde:	4601      	mov	r1, r0
 801ede0:	4632      	mov	r2, r6
 801ede2:	4640      	mov	r0, r8
 801ede4:	f7fd f861 	bl	801beaa <memcpy>
 801ede8:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801edec:	f8c4 8000 	str.w	r8, [r4]
 801edf0:	e7e9      	b.n	801edc6 <__submore+0x48>

0801edf2 <memmove>:
 801edf2:	4288      	cmp	r0, r1
 801edf4:	b510      	push	{r4, lr}
 801edf6:	eb01 0402 	add.w	r4, r1, r2
 801edfa:	d902      	bls.n	801ee02 <memmove+0x10>
 801edfc:	4284      	cmp	r4, r0
 801edfe:	4623      	mov	r3, r4
 801ee00:	d807      	bhi.n	801ee12 <memmove+0x20>
 801ee02:	1e43      	subs	r3, r0, #1
 801ee04:	42a1      	cmp	r1, r4
 801ee06:	d008      	beq.n	801ee1a <memmove+0x28>
 801ee08:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ee0c:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ee10:	e7f8      	b.n	801ee04 <memmove+0x12>
 801ee12:	4402      	add	r2, r0
 801ee14:	4601      	mov	r1, r0
 801ee16:	428a      	cmp	r2, r1
 801ee18:	d100      	bne.n	801ee1c <memmove+0x2a>
 801ee1a:	bd10      	pop	{r4, pc}
 801ee1c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ee20:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ee24:	e7f7      	b.n	801ee16 <memmove+0x24>

0801ee26 <strncmp>:
 801ee26:	b510      	push	{r4, lr}
 801ee28:	b16a      	cbz	r2, 801ee46 <strncmp+0x20>
 801ee2a:	3901      	subs	r1, #1
 801ee2c:	1884      	adds	r4, r0, r2
 801ee2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ee32:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801ee36:	429a      	cmp	r2, r3
 801ee38:	d103      	bne.n	801ee42 <strncmp+0x1c>
 801ee3a:	42a0      	cmp	r0, r4
 801ee3c:	d001      	beq.n	801ee42 <strncmp+0x1c>
 801ee3e:	2a00      	cmp	r2, #0
 801ee40:	d1f5      	bne.n	801ee2e <strncmp+0x8>
 801ee42:	1ad0      	subs	r0, r2, r3
 801ee44:	bd10      	pop	{r4, pc}
 801ee46:	4610      	mov	r0, r2
 801ee48:	e7fc      	b.n	801ee44 <strncmp+0x1e>
	...

0801ee4c <_sbrk_r>:
 801ee4c:	b538      	push	{r3, r4, r5, lr}
 801ee4e:	4d06      	ldr	r5, [pc, #24]	; (801ee68 <_sbrk_r+0x1c>)
 801ee50:	2300      	movs	r3, #0
 801ee52:	4604      	mov	r4, r0
 801ee54:	4608      	mov	r0, r1
 801ee56:	602b      	str	r3, [r5, #0]
 801ee58:	f7e4 fffe 	bl	8003e58 <_sbrk>
 801ee5c:	1c43      	adds	r3, r0, #1
 801ee5e:	d102      	bne.n	801ee66 <_sbrk_r+0x1a>
 801ee60:	682b      	ldr	r3, [r5, #0]
 801ee62:	b103      	cbz	r3, 801ee66 <_sbrk_r+0x1a>
 801ee64:	6023      	str	r3, [r4, #0]
 801ee66:	bd38      	pop	{r3, r4, r5, pc}
 801ee68:	24003620 	.word	0x24003620
 801ee6c:	00000000 	.word	0x00000000

0801ee70 <nan>:
 801ee70:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801ee78 <nan+0x8>
 801ee74:	4770      	bx	lr
 801ee76:	bf00      	nop
 801ee78:	00000000 	.word	0x00000000
 801ee7c:	7ff80000 	.word	0x7ff80000

0801ee80 <__assert_func>:
 801ee80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ee82:	4614      	mov	r4, r2
 801ee84:	461a      	mov	r2, r3
 801ee86:	4b09      	ldr	r3, [pc, #36]	; (801eeac <__assert_func+0x2c>)
 801ee88:	681b      	ldr	r3, [r3, #0]
 801ee8a:	4605      	mov	r5, r0
 801ee8c:	68d8      	ldr	r0, [r3, #12]
 801ee8e:	b14c      	cbz	r4, 801eea4 <__assert_func+0x24>
 801ee90:	4b07      	ldr	r3, [pc, #28]	; (801eeb0 <__assert_func+0x30>)
 801ee92:	9100      	str	r1, [sp, #0]
 801ee94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ee98:	4906      	ldr	r1, [pc, #24]	; (801eeb4 <__assert_func+0x34>)
 801ee9a:	462b      	mov	r3, r5
 801ee9c:	f000 fc3e 	bl	801f71c <fiprintf>
 801eea0:	f000 fc4e 	bl	801f740 <abort>
 801eea4:	4b04      	ldr	r3, [pc, #16]	; (801eeb8 <__assert_func+0x38>)
 801eea6:	461c      	mov	r4, r3
 801eea8:	e7f3      	b.n	801ee92 <__assert_func+0x12>
 801eeaa:	bf00      	nop
 801eeac:	24000158 	.word	0x24000158
 801eeb0:	080207ad 	.word	0x080207ad
 801eeb4:	080207ba 	.word	0x080207ba
 801eeb8:	080207e8 	.word	0x080207e8

0801eebc <_calloc_r>:
 801eebc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801eebe:	fba1 2402 	umull	r2, r4, r1, r2
 801eec2:	b94c      	cbnz	r4, 801eed8 <_calloc_r+0x1c>
 801eec4:	4611      	mov	r1, r2
 801eec6:	9201      	str	r2, [sp, #4]
 801eec8:	f7fd fe6e 	bl	801cba8 <_malloc_r>
 801eecc:	9a01      	ldr	r2, [sp, #4]
 801eece:	4605      	mov	r5, r0
 801eed0:	b930      	cbnz	r0, 801eee0 <_calloc_r+0x24>
 801eed2:	4628      	mov	r0, r5
 801eed4:	b003      	add	sp, #12
 801eed6:	bd30      	pop	{r4, r5, pc}
 801eed8:	220c      	movs	r2, #12
 801eeda:	6002      	str	r2, [r0, #0]
 801eedc:	2500      	movs	r5, #0
 801eede:	e7f8      	b.n	801eed2 <_calloc_r+0x16>
 801eee0:	4621      	mov	r1, r4
 801eee2:	f7fc ff5a 	bl	801bd9a <memset>
 801eee6:	e7f4      	b.n	801eed2 <_calloc_r+0x16>

0801eee8 <rshift>:
 801eee8:	6903      	ldr	r3, [r0, #16]
 801eeea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801eeee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801eef2:	ea4f 1261 	mov.w	r2, r1, asr #5
 801eef6:	f100 0414 	add.w	r4, r0, #20
 801eefa:	dd45      	ble.n	801ef88 <rshift+0xa0>
 801eefc:	f011 011f 	ands.w	r1, r1, #31
 801ef00:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801ef04:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801ef08:	d10c      	bne.n	801ef24 <rshift+0x3c>
 801ef0a:	f100 0710 	add.w	r7, r0, #16
 801ef0e:	4629      	mov	r1, r5
 801ef10:	42b1      	cmp	r1, r6
 801ef12:	d334      	bcc.n	801ef7e <rshift+0x96>
 801ef14:	1a9b      	subs	r3, r3, r2
 801ef16:	009b      	lsls	r3, r3, #2
 801ef18:	1eea      	subs	r2, r5, #3
 801ef1a:	4296      	cmp	r6, r2
 801ef1c:	bf38      	it	cc
 801ef1e:	2300      	movcc	r3, #0
 801ef20:	4423      	add	r3, r4
 801ef22:	e015      	b.n	801ef50 <rshift+0x68>
 801ef24:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801ef28:	f1c1 0820 	rsb	r8, r1, #32
 801ef2c:	40cf      	lsrs	r7, r1
 801ef2e:	f105 0e04 	add.w	lr, r5, #4
 801ef32:	46a1      	mov	r9, r4
 801ef34:	4576      	cmp	r6, lr
 801ef36:	46f4      	mov	ip, lr
 801ef38:	d815      	bhi.n	801ef66 <rshift+0x7e>
 801ef3a:	1a9a      	subs	r2, r3, r2
 801ef3c:	0092      	lsls	r2, r2, #2
 801ef3e:	3a04      	subs	r2, #4
 801ef40:	3501      	adds	r5, #1
 801ef42:	42ae      	cmp	r6, r5
 801ef44:	bf38      	it	cc
 801ef46:	2200      	movcc	r2, #0
 801ef48:	18a3      	adds	r3, r4, r2
 801ef4a:	50a7      	str	r7, [r4, r2]
 801ef4c:	b107      	cbz	r7, 801ef50 <rshift+0x68>
 801ef4e:	3304      	adds	r3, #4
 801ef50:	1b1a      	subs	r2, r3, r4
 801ef52:	42a3      	cmp	r3, r4
 801ef54:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801ef58:	bf08      	it	eq
 801ef5a:	2300      	moveq	r3, #0
 801ef5c:	6102      	str	r2, [r0, #16]
 801ef5e:	bf08      	it	eq
 801ef60:	6143      	streq	r3, [r0, #20]
 801ef62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ef66:	f8dc c000 	ldr.w	ip, [ip]
 801ef6a:	fa0c fc08 	lsl.w	ip, ip, r8
 801ef6e:	ea4c 0707 	orr.w	r7, ip, r7
 801ef72:	f849 7b04 	str.w	r7, [r9], #4
 801ef76:	f85e 7b04 	ldr.w	r7, [lr], #4
 801ef7a:	40cf      	lsrs	r7, r1
 801ef7c:	e7da      	b.n	801ef34 <rshift+0x4c>
 801ef7e:	f851 cb04 	ldr.w	ip, [r1], #4
 801ef82:	f847 cf04 	str.w	ip, [r7, #4]!
 801ef86:	e7c3      	b.n	801ef10 <rshift+0x28>
 801ef88:	4623      	mov	r3, r4
 801ef8a:	e7e1      	b.n	801ef50 <rshift+0x68>

0801ef8c <__hexdig_fun>:
 801ef8c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801ef90:	2b09      	cmp	r3, #9
 801ef92:	d802      	bhi.n	801ef9a <__hexdig_fun+0xe>
 801ef94:	3820      	subs	r0, #32
 801ef96:	b2c0      	uxtb	r0, r0
 801ef98:	4770      	bx	lr
 801ef9a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801ef9e:	2b05      	cmp	r3, #5
 801efa0:	d801      	bhi.n	801efa6 <__hexdig_fun+0x1a>
 801efa2:	3847      	subs	r0, #71	; 0x47
 801efa4:	e7f7      	b.n	801ef96 <__hexdig_fun+0xa>
 801efa6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801efaa:	2b05      	cmp	r3, #5
 801efac:	d801      	bhi.n	801efb2 <__hexdig_fun+0x26>
 801efae:	3827      	subs	r0, #39	; 0x27
 801efb0:	e7f1      	b.n	801ef96 <__hexdig_fun+0xa>
 801efb2:	2000      	movs	r0, #0
 801efb4:	4770      	bx	lr
	...

0801efb8 <__gethex>:
 801efb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efbc:	4617      	mov	r7, r2
 801efbe:	680a      	ldr	r2, [r1, #0]
 801efc0:	b085      	sub	sp, #20
 801efc2:	f102 0b02 	add.w	fp, r2, #2
 801efc6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801efca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801efce:	4681      	mov	r9, r0
 801efd0:	468a      	mov	sl, r1
 801efd2:	9302      	str	r3, [sp, #8]
 801efd4:	32fe      	adds	r2, #254	; 0xfe
 801efd6:	eb02 030b 	add.w	r3, r2, fp
 801efda:	46d8      	mov	r8, fp
 801efdc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801efe0:	9301      	str	r3, [sp, #4]
 801efe2:	2830      	cmp	r0, #48	; 0x30
 801efe4:	d0f7      	beq.n	801efd6 <__gethex+0x1e>
 801efe6:	f7ff ffd1 	bl	801ef8c <__hexdig_fun>
 801efea:	4604      	mov	r4, r0
 801efec:	2800      	cmp	r0, #0
 801efee:	d138      	bne.n	801f062 <__gethex+0xaa>
 801eff0:	49a7      	ldr	r1, [pc, #668]	; (801f290 <__gethex+0x2d8>)
 801eff2:	2201      	movs	r2, #1
 801eff4:	4640      	mov	r0, r8
 801eff6:	f7ff ff16 	bl	801ee26 <strncmp>
 801effa:	4606      	mov	r6, r0
 801effc:	2800      	cmp	r0, #0
 801effe:	d169      	bne.n	801f0d4 <__gethex+0x11c>
 801f000:	f898 0001 	ldrb.w	r0, [r8, #1]
 801f004:	465d      	mov	r5, fp
 801f006:	f7ff ffc1 	bl	801ef8c <__hexdig_fun>
 801f00a:	2800      	cmp	r0, #0
 801f00c:	d064      	beq.n	801f0d8 <__gethex+0x120>
 801f00e:	465a      	mov	r2, fp
 801f010:	7810      	ldrb	r0, [r2, #0]
 801f012:	2830      	cmp	r0, #48	; 0x30
 801f014:	4690      	mov	r8, r2
 801f016:	f102 0201 	add.w	r2, r2, #1
 801f01a:	d0f9      	beq.n	801f010 <__gethex+0x58>
 801f01c:	f7ff ffb6 	bl	801ef8c <__hexdig_fun>
 801f020:	2301      	movs	r3, #1
 801f022:	fab0 f480 	clz	r4, r0
 801f026:	0964      	lsrs	r4, r4, #5
 801f028:	465e      	mov	r6, fp
 801f02a:	9301      	str	r3, [sp, #4]
 801f02c:	4642      	mov	r2, r8
 801f02e:	4615      	mov	r5, r2
 801f030:	3201      	adds	r2, #1
 801f032:	7828      	ldrb	r0, [r5, #0]
 801f034:	f7ff ffaa 	bl	801ef8c <__hexdig_fun>
 801f038:	2800      	cmp	r0, #0
 801f03a:	d1f8      	bne.n	801f02e <__gethex+0x76>
 801f03c:	4994      	ldr	r1, [pc, #592]	; (801f290 <__gethex+0x2d8>)
 801f03e:	2201      	movs	r2, #1
 801f040:	4628      	mov	r0, r5
 801f042:	f7ff fef0 	bl	801ee26 <strncmp>
 801f046:	b978      	cbnz	r0, 801f068 <__gethex+0xb0>
 801f048:	b946      	cbnz	r6, 801f05c <__gethex+0xa4>
 801f04a:	1c6e      	adds	r6, r5, #1
 801f04c:	4632      	mov	r2, r6
 801f04e:	4615      	mov	r5, r2
 801f050:	3201      	adds	r2, #1
 801f052:	7828      	ldrb	r0, [r5, #0]
 801f054:	f7ff ff9a 	bl	801ef8c <__hexdig_fun>
 801f058:	2800      	cmp	r0, #0
 801f05a:	d1f8      	bne.n	801f04e <__gethex+0x96>
 801f05c:	1b73      	subs	r3, r6, r5
 801f05e:	009e      	lsls	r6, r3, #2
 801f060:	e004      	b.n	801f06c <__gethex+0xb4>
 801f062:	2400      	movs	r4, #0
 801f064:	4626      	mov	r6, r4
 801f066:	e7e1      	b.n	801f02c <__gethex+0x74>
 801f068:	2e00      	cmp	r6, #0
 801f06a:	d1f7      	bne.n	801f05c <__gethex+0xa4>
 801f06c:	782b      	ldrb	r3, [r5, #0]
 801f06e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801f072:	2b50      	cmp	r3, #80	; 0x50
 801f074:	d13d      	bne.n	801f0f2 <__gethex+0x13a>
 801f076:	786b      	ldrb	r3, [r5, #1]
 801f078:	2b2b      	cmp	r3, #43	; 0x2b
 801f07a:	d02f      	beq.n	801f0dc <__gethex+0x124>
 801f07c:	2b2d      	cmp	r3, #45	; 0x2d
 801f07e:	d031      	beq.n	801f0e4 <__gethex+0x12c>
 801f080:	1c69      	adds	r1, r5, #1
 801f082:	f04f 0b00 	mov.w	fp, #0
 801f086:	7808      	ldrb	r0, [r1, #0]
 801f088:	f7ff ff80 	bl	801ef8c <__hexdig_fun>
 801f08c:	1e42      	subs	r2, r0, #1
 801f08e:	b2d2      	uxtb	r2, r2
 801f090:	2a18      	cmp	r2, #24
 801f092:	d82e      	bhi.n	801f0f2 <__gethex+0x13a>
 801f094:	f1a0 0210 	sub.w	r2, r0, #16
 801f098:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801f09c:	f7ff ff76 	bl	801ef8c <__hexdig_fun>
 801f0a0:	f100 3cff 	add.w	ip, r0, #4294967295
 801f0a4:	fa5f fc8c 	uxtb.w	ip, ip
 801f0a8:	f1bc 0f18 	cmp.w	ip, #24
 801f0ac:	d91d      	bls.n	801f0ea <__gethex+0x132>
 801f0ae:	f1bb 0f00 	cmp.w	fp, #0
 801f0b2:	d000      	beq.n	801f0b6 <__gethex+0xfe>
 801f0b4:	4252      	negs	r2, r2
 801f0b6:	4416      	add	r6, r2
 801f0b8:	f8ca 1000 	str.w	r1, [sl]
 801f0bc:	b1dc      	cbz	r4, 801f0f6 <__gethex+0x13e>
 801f0be:	9b01      	ldr	r3, [sp, #4]
 801f0c0:	2b00      	cmp	r3, #0
 801f0c2:	bf14      	ite	ne
 801f0c4:	f04f 0800 	movne.w	r8, #0
 801f0c8:	f04f 0806 	moveq.w	r8, #6
 801f0cc:	4640      	mov	r0, r8
 801f0ce:	b005      	add	sp, #20
 801f0d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0d4:	4645      	mov	r5, r8
 801f0d6:	4626      	mov	r6, r4
 801f0d8:	2401      	movs	r4, #1
 801f0da:	e7c7      	b.n	801f06c <__gethex+0xb4>
 801f0dc:	f04f 0b00 	mov.w	fp, #0
 801f0e0:	1ca9      	adds	r1, r5, #2
 801f0e2:	e7d0      	b.n	801f086 <__gethex+0xce>
 801f0e4:	f04f 0b01 	mov.w	fp, #1
 801f0e8:	e7fa      	b.n	801f0e0 <__gethex+0x128>
 801f0ea:	230a      	movs	r3, #10
 801f0ec:	fb03 0002 	mla	r0, r3, r2, r0
 801f0f0:	e7d0      	b.n	801f094 <__gethex+0xdc>
 801f0f2:	4629      	mov	r1, r5
 801f0f4:	e7e0      	b.n	801f0b8 <__gethex+0x100>
 801f0f6:	eba5 0308 	sub.w	r3, r5, r8
 801f0fa:	3b01      	subs	r3, #1
 801f0fc:	4621      	mov	r1, r4
 801f0fe:	2b07      	cmp	r3, #7
 801f100:	dc0a      	bgt.n	801f118 <__gethex+0x160>
 801f102:	4648      	mov	r0, r9
 801f104:	f7fd fddc 	bl	801ccc0 <_Balloc>
 801f108:	4604      	mov	r4, r0
 801f10a:	b940      	cbnz	r0, 801f11e <__gethex+0x166>
 801f10c:	4b61      	ldr	r3, [pc, #388]	; (801f294 <__gethex+0x2dc>)
 801f10e:	4602      	mov	r2, r0
 801f110:	21e4      	movs	r1, #228	; 0xe4
 801f112:	4861      	ldr	r0, [pc, #388]	; (801f298 <__gethex+0x2e0>)
 801f114:	f7ff feb4 	bl	801ee80 <__assert_func>
 801f118:	3101      	adds	r1, #1
 801f11a:	105b      	asrs	r3, r3, #1
 801f11c:	e7ef      	b.n	801f0fe <__gethex+0x146>
 801f11e:	f100 0a14 	add.w	sl, r0, #20
 801f122:	2300      	movs	r3, #0
 801f124:	495a      	ldr	r1, [pc, #360]	; (801f290 <__gethex+0x2d8>)
 801f126:	f8cd a004 	str.w	sl, [sp, #4]
 801f12a:	469b      	mov	fp, r3
 801f12c:	45a8      	cmp	r8, r5
 801f12e:	d342      	bcc.n	801f1b6 <__gethex+0x1fe>
 801f130:	9801      	ldr	r0, [sp, #4]
 801f132:	f840 bb04 	str.w	fp, [r0], #4
 801f136:	eba0 000a 	sub.w	r0, r0, sl
 801f13a:	1080      	asrs	r0, r0, #2
 801f13c:	6120      	str	r0, [r4, #16]
 801f13e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801f142:	4658      	mov	r0, fp
 801f144:	f7fd feae 	bl	801cea4 <__hi0bits>
 801f148:	683d      	ldr	r5, [r7, #0]
 801f14a:	eba8 0000 	sub.w	r0, r8, r0
 801f14e:	42a8      	cmp	r0, r5
 801f150:	dd59      	ble.n	801f206 <__gethex+0x24e>
 801f152:	eba0 0805 	sub.w	r8, r0, r5
 801f156:	4641      	mov	r1, r8
 801f158:	4620      	mov	r0, r4
 801f15a:	f7fe fa3a 	bl	801d5d2 <__any_on>
 801f15e:	4683      	mov	fp, r0
 801f160:	b1b8      	cbz	r0, 801f192 <__gethex+0x1da>
 801f162:	f108 33ff 	add.w	r3, r8, #4294967295
 801f166:	1159      	asrs	r1, r3, #5
 801f168:	f003 021f 	and.w	r2, r3, #31
 801f16c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801f170:	f04f 0b01 	mov.w	fp, #1
 801f174:	fa0b f202 	lsl.w	r2, fp, r2
 801f178:	420a      	tst	r2, r1
 801f17a:	d00a      	beq.n	801f192 <__gethex+0x1da>
 801f17c:	455b      	cmp	r3, fp
 801f17e:	dd06      	ble.n	801f18e <__gethex+0x1d6>
 801f180:	f1a8 0102 	sub.w	r1, r8, #2
 801f184:	4620      	mov	r0, r4
 801f186:	f7fe fa24 	bl	801d5d2 <__any_on>
 801f18a:	2800      	cmp	r0, #0
 801f18c:	d138      	bne.n	801f200 <__gethex+0x248>
 801f18e:	f04f 0b02 	mov.w	fp, #2
 801f192:	4641      	mov	r1, r8
 801f194:	4620      	mov	r0, r4
 801f196:	f7ff fea7 	bl	801eee8 <rshift>
 801f19a:	4446      	add	r6, r8
 801f19c:	68bb      	ldr	r3, [r7, #8]
 801f19e:	42b3      	cmp	r3, r6
 801f1a0:	da41      	bge.n	801f226 <__gethex+0x26e>
 801f1a2:	4621      	mov	r1, r4
 801f1a4:	4648      	mov	r0, r9
 801f1a6:	f7fd fdcb 	bl	801cd40 <_Bfree>
 801f1aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f1ac:	2300      	movs	r3, #0
 801f1ae:	6013      	str	r3, [r2, #0]
 801f1b0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801f1b4:	e78a      	b.n	801f0cc <__gethex+0x114>
 801f1b6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801f1ba:	2a2e      	cmp	r2, #46	; 0x2e
 801f1bc:	d014      	beq.n	801f1e8 <__gethex+0x230>
 801f1be:	2b20      	cmp	r3, #32
 801f1c0:	d106      	bne.n	801f1d0 <__gethex+0x218>
 801f1c2:	9b01      	ldr	r3, [sp, #4]
 801f1c4:	f843 bb04 	str.w	fp, [r3], #4
 801f1c8:	f04f 0b00 	mov.w	fp, #0
 801f1cc:	9301      	str	r3, [sp, #4]
 801f1ce:	465b      	mov	r3, fp
 801f1d0:	7828      	ldrb	r0, [r5, #0]
 801f1d2:	9303      	str	r3, [sp, #12]
 801f1d4:	f7ff feda 	bl	801ef8c <__hexdig_fun>
 801f1d8:	9b03      	ldr	r3, [sp, #12]
 801f1da:	f000 000f 	and.w	r0, r0, #15
 801f1de:	4098      	lsls	r0, r3
 801f1e0:	ea4b 0b00 	orr.w	fp, fp, r0
 801f1e4:	3304      	adds	r3, #4
 801f1e6:	e7a1      	b.n	801f12c <__gethex+0x174>
 801f1e8:	45a8      	cmp	r8, r5
 801f1ea:	d8e8      	bhi.n	801f1be <__gethex+0x206>
 801f1ec:	2201      	movs	r2, #1
 801f1ee:	4628      	mov	r0, r5
 801f1f0:	9303      	str	r3, [sp, #12]
 801f1f2:	f7ff fe18 	bl	801ee26 <strncmp>
 801f1f6:	4926      	ldr	r1, [pc, #152]	; (801f290 <__gethex+0x2d8>)
 801f1f8:	9b03      	ldr	r3, [sp, #12]
 801f1fa:	2800      	cmp	r0, #0
 801f1fc:	d1df      	bne.n	801f1be <__gethex+0x206>
 801f1fe:	e795      	b.n	801f12c <__gethex+0x174>
 801f200:	f04f 0b03 	mov.w	fp, #3
 801f204:	e7c5      	b.n	801f192 <__gethex+0x1da>
 801f206:	da0b      	bge.n	801f220 <__gethex+0x268>
 801f208:	eba5 0800 	sub.w	r8, r5, r0
 801f20c:	4621      	mov	r1, r4
 801f20e:	4642      	mov	r2, r8
 801f210:	4648      	mov	r0, r9
 801f212:	f7fd ffaf 	bl	801d174 <__lshift>
 801f216:	eba6 0608 	sub.w	r6, r6, r8
 801f21a:	4604      	mov	r4, r0
 801f21c:	f100 0a14 	add.w	sl, r0, #20
 801f220:	f04f 0b00 	mov.w	fp, #0
 801f224:	e7ba      	b.n	801f19c <__gethex+0x1e4>
 801f226:	687b      	ldr	r3, [r7, #4]
 801f228:	42b3      	cmp	r3, r6
 801f22a:	dd73      	ble.n	801f314 <__gethex+0x35c>
 801f22c:	1b9e      	subs	r6, r3, r6
 801f22e:	42b5      	cmp	r5, r6
 801f230:	dc34      	bgt.n	801f29c <__gethex+0x2e4>
 801f232:	68fb      	ldr	r3, [r7, #12]
 801f234:	2b02      	cmp	r3, #2
 801f236:	d023      	beq.n	801f280 <__gethex+0x2c8>
 801f238:	2b03      	cmp	r3, #3
 801f23a:	d025      	beq.n	801f288 <__gethex+0x2d0>
 801f23c:	2b01      	cmp	r3, #1
 801f23e:	d115      	bne.n	801f26c <__gethex+0x2b4>
 801f240:	42b5      	cmp	r5, r6
 801f242:	d113      	bne.n	801f26c <__gethex+0x2b4>
 801f244:	2d01      	cmp	r5, #1
 801f246:	d10b      	bne.n	801f260 <__gethex+0x2a8>
 801f248:	9a02      	ldr	r2, [sp, #8]
 801f24a:	687b      	ldr	r3, [r7, #4]
 801f24c:	6013      	str	r3, [r2, #0]
 801f24e:	2301      	movs	r3, #1
 801f250:	6123      	str	r3, [r4, #16]
 801f252:	f8ca 3000 	str.w	r3, [sl]
 801f256:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f258:	f04f 0862 	mov.w	r8, #98	; 0x62
 801f25c:	601c      	str	r4, [r3, #0]
 801f25e:	e735      	b.n	801f0cc <__gethex+0x114>
 801f260:	1e69      	subs	r1, r5, #1
 801f262:	4620      	mov	r0, r4
 801f264:	f7fe f9b5 	bl	801d5d2 <__any_on>
 801f268:	2800      	cmp	r0, #0
 801f26a:	d1ed      	bne.n	801f248 <__gethex+0x290>
 801f26c:	4621      	mov	r1, r4
 801f26e:	4648      	mov	r0, r9
 801f270:	f7fd fd66 	bl	801cd40 <_Bfree>
 801f274:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f276:	2300      	movs	r3, #0
 801f278:	6013      	str	r3, [r2, #0]
 801f27a:	f04f 0850 	mov.w	r8, #80	; 0x50
 801f27e:	e725      	b.n	801f0cc <__gethex+0x114>
 801f280:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f282:	2b00      	cmp	r3, #0
 801f284:	d1f2      	bne.n	801f26c <__gethex+0x2b4>
 801f286:	e7df      	b.n	801f248 <__gethex+0x290>
 801f288:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f28a:	2b00      	cmp	r3, #0
 801f28c:	d1dc      	bne.n	801f248 <__gethex+0x290>
 801f28e:	e7ed      	b.n	801f26c <__gethex+0x2b4>
 801f290:	08020624 	.word	0x08020624
 801f294:	080204bb 	.word	0x080204bb
 801f298:	080207e9 	.word	0x080207e9
 801f29c:	f106 38ff 	add.w	r8, r6, #4294967295
 801f2a0:	f1bb 0f00 	cmp.w	fp, #0
 801f2a4:	d133      	bne.n	801f30e <__gethex+0x356>
 801f2a6:	f1b8 0f00 	cmp.w	r8, #0
 801f2aa:	d004      	beq.n	801f2b6 <__gethex+0x2fe>
 801f2ac:	4641      	mov	r1, r8
 801f2ae:	4620      	mov	r0, r4
 801f2b0:	f7fe f98f 	bl	801d5d2 <__any_on>
 801f2b4:	4683      	mov	fp, r0
 801f2b6:	ea4f 1268 	mov.w	r2, r8, asr #5
 801f2ba:	2301      	movs	r3, #1
 801f2bc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801f2c0:	f008 081f 	and.w	r8, r8, #31
 801f2c4:	fa03 f308 	lsl.w	r3, r3, r8
 801f2c8:	4213      	tst	r3, r2
 801f2ca:	4631      	mov	r1, r6
 801f2cc:	4620      	mov	r0, r4
 801f2ce:	bf18      	it	ne
 801f2d0:	f04b 0b02 	orrne.w	fp, fp, #2
 801f2d4:	1bad      	subs	r5, r5, r6
 801f2d6:	f7ff fe07 	bl	801eee8 <rshift>
 801f2da:	687e      	ldr	r6, [r7, #4]
 801f2dc:	f04f 0802 	mov.w	r8, #2
 801f2e0:	f1bb 0f00 	cmp.w	fp, #0
 801f2e4:	d04a      	beq.n	801f37c <__gethex+0x3c4>
 801f2e6:	68fb      	ldr	r3, [r7, #12]
 801f2e8:	2b02      	cmp	r3, #2
 801f2ea:	d016      	beq.n	801f31a <__gethex+0x362>
 801f2ec:	2b03      	cmp	r3, #3
 801f2ee:	d018      	beq.n	801f322 <__gethex+0x36a>
 801f2f0:	2b01      	cmp	r3, #1
 801f2f2:	d109      	bne.n	801f308 <__gethex+0x350>
 801f2f4:	f01b 0f02 	tst.w	fp, #2
 801f2f8:	d006      	beq.n	801f308 <__gethex+0x350>
 801f2fa:	f8da 3000 	ldr.w	r3, [sl]
 801f2fe:	ea4b 0b03 	orr.w	fp, fp, r3
 801f302:	f01b 0f01 	tst.w	fp, #1
 801f306:	d10f      	bne.n	801f328 <__gethex+0x370>
 801f308:	f048 0810 	orr.w	r8, r8, #16
 801f30c:	e036      	b.n	801f37c <__gethex+0x3c4>
 801f30e:	f04f 0b01 	mov.w	fp, #1
 801f312:	e7d0      	b.n	801f2b6 <__gethex+0x2fe>
 801f314:	f04f 0801 	mov.w	r8, #1
 801f318:	e7e2      	b.n	801f2e0 <__gethex+0x328>
 801f31a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f31c:	f1c3 0301 	rsb	r3, r3, #1
 801f320:	930f      	str	r3, [sp, #60]	; 0x3c
 801f322:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f324:	2b00      	cmp	r3, #0
 801f326:	d0ef      	beq.n	801f308 <__gethex+0x350>
 801f328:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801f32c:	f104 0214 	add.w	r2, r4, #20
 801f330:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801f334:	9301      	str	r3, [sp, #4]
 801f336:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801f33a:	2300      	movs	r3, #0
 801f33c:	4694      	mov	ip, r2
 801f33e:	f852 1b04 	ldr.w	r1, [r2], #4
 801f342:	f1b1 3fff 	cmp.w	r1, #4294967295
 801f346:	d01e      	beq.n	801f386 <__gethex+0x3ce>
 801f348:	3101      	adds	r1, #1
 801f34a:	f8cc 1000 	str.w	r1, [ip]
 801f34e:	f1b8 0f02 	cmp.w	r8, #2
 801f352:	f104 0214 	add.w	r2, r4, #20
 801f356:	d13d      	bne.n	801f3d4 <__gethex+0x41c>
 801f358:	683b      	ldr	r3, [r7, #0]
 801f35a:	3b01      	subs	r3, #1
 801f35c:	42ab      	cmp	r3, r5
 801f35e:	d10b      	bne.n	801f378 <__gethex+0x3c0>
 801f360:	1169      	asrs	r1, r5, #5
 801f362:	2301      	movs	r3, #1
 801f364:	f005 051f 	and.w	r5, r5, #31
 801f368:	fa03 f505 	lsl.w	r5, r3, r5
 801f36c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f370:	421d      	tst	r5, r3
 801f372:	bf18      	it	ne
 801f374:	f04f 0801 	movne.w	r8, #1
 801f378:	f048 0820 	orr.w	r8, r8, #32
 801f37c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f37e:	601c      	str	r4, [r3, #0]
 801f380:	9b02      	ldr	r3, [sp, #8]
 801f382:	601e      	str	r6, [r3, #0]
 801f384:	e6a2      	b.n	801f0cc <__gethex+0x114>
 801f386:	4290      	cmp	r0, r2
 801f388:	f842 3c04 	str.w	r3, [r2, #-4]
 801f38c:	d8d6      	bhi.n	801f33c <__gethex+0x384>
 801f38e:	68a2      	ldr	r2, [r4, #8]
 801f390:	4593      	cmp	fp, r2
 801f392:	db17      	blt.n	801f3c4 <__gethex+0x40c>
 801f394:	6861      	ldr	r1, [r4, #4]
 801f396:	4648      	mov	r0, r9
 801f398:	3101      	adds	r1, #1
 801f39a:	f7fd fc91 	bl	801ccc0 <_Balloc>
 801f39e:	4682      	mov	sl, r0
 801f3a0:	b918      	cbnz	r0, 801f3aa <__gethex+0x3f2>
 801f3a2:	4b1b      	ldr	r3, [pc, #108]	; (801f410 <__gethex+0x458>)
 801f3a4:	4602      	mov	r2, r0
 801f3a6:	2184      	movs	r1, #132	; 0x84
 801f3a8:	e6b3      	b.n	801f112 <__gethex+0x15a>
 801f3aa:	6922      	ldr	r2, [r4, #16]
 801f3ac:	3202      	adds	r2, #2
 801f3ae:	f104 010c 	add.w	r1, r4, #12
 801f3b2:	0092      	lsls	r2, r2, #2
 801f3b4:	300c      	adds	r0, #12
 801f3b6:	f7fc fd78 	bl	801beaa <memcpy>
 801f3ba:	4621      	mov	r1, r4
 801f3bc:	4648      	mov	r0, r9
 801f3be:	f7fd fcbf 	bl	801cd40 <_Bfree>
 801f3c2:	4654      	mov	r4, sl
 801f3c4:	6922      	ldr	r2, [r4, #16]
 801f3c6:	1c51      	adds	r1, r2, #1
 801f3c8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801f3cc:	6121      	str	r1, [r4, #16]
 801f3ce:	2101      	movs	r1, #1
 801f3d0:	6151      	str	r1, [r2, #20]
 801f3d2:	e7bc      	b.n	801f34e <__gethex+0x396>
 801f3d4:	6921      	ldr	r1, [r4, #16]
 801f3d6:	4559      	cmp	r1, fp
 801f3d8:	dd0b      	ble.n	801f3f2 <__gethex+0x43a>
 801f3da:	2101      	movs	r1, #1
 801f3dc:	4620      	mov	r0, r4
 801f3de:	f7ff fd83 	bl	801eee8 <rshift>
 801f3e2:	68bb      	ldr	r3, [r7, #8]
 801f3e4:	3601      	adds	r6, #1
 801f3e6:	42b3      	cmp	r3, r6
 801f3e8:	f6ff aedb 	blt.w	801f1a2 <__gethex+0x1ea>
 801f3ec:	f04f 0801 	mov.w	r8, #1
 801f3f0:	e7c2      	b.n	801f378 <__gethex+0x3c0>
 801f3f2:	f015 051f 	ands.w	r5, r5, #31
 801f3f6:	d0f9      	beq.n	801f3ec <__gethex+0x434>
 801f3f8:	9b01      	ldr	r3, [sp, #4]
 801f3fa:	441a      	add	r2, r3
 801f3fc:	f1c5 0520 	rsb	r5, r5, #32
 801f400:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801f404:	f7fd fd4e 	bl	801cea4 <__hi0bits>
 801f408:	42a8      	cmp	r0, r5
 801f40a:	dbe6      	blt.n	801f3da <__gethex+0x422>
 801f40c:	e7ee      	b.n	801f3ec <__gethex+0x434>
 801f40e:	bf00      	nop
 801f410:	080204bb 	.word	0x080204bb

0801f414 <L_shift>:
 801f414:	f1c2 0208 	rsb	r2, r2, #8
 801f418:	0092      	lsls	r2, r2, #2
 801f41a:	b570      	push	{r4, r5, r6, lr}
 801f41c:	f1c2 0620 	rsb	r6, r2, #32
 801f420:	6843      	ldr	r3, [r0, #4]
 801f422:	6804      	ldr	r4, [r0, #0]
 801f424:	fa03 f506 	lsl.w	r5, r3, r6
 801f428:	432c      	orrs	r4, r5
 801f42a:	40d3      	lsrs	r3, r2
 801f42c:	6004      	str	r4, [r0, #0]
 801f42e:	f840 3f04 	str.w	r3, [r0, #4]!
 801f432:	4288      	cmp	r0, r1
 801f434:	d3f4      	bcc.n	801f420 <L_shift+0xc>
 801f436:	bd70      	pop	{r4, r5, r6, pc}

0801f438 <__match>:
 801f438:	b530      	push	{r4, r5, lr}
 801f43a:	6803      	ldr	r3, [r0, #0]
 801f43c:	3301      	adds	r3, #1
 801f43e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f442:	b914      	cbnz	r4, 801f44a <__match+0x12>
 801f444:	6003      	str	r3, [r0, #0]
 801f446:	2001      	movs	r0, #1
 801f448:	bd30      	pop	{r4, r5, pc}
 801f44a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f44e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801f452:	2d19      	cmp	r5, #25
 801f454:	bf98      	it	ls
 801f456:	3220      	addls	r2, #32
 801f458:	42a2      	cmp	r2, r4
 801f45a:	d0f0      	beq.n	801f43e <__match+0x6>
 801f45c:	2000      	movs	r0, #0
 801f45e:	e7f3      	b.n	801f448 <__match+0x10>

0801f460 <__hexnan>:
 801f460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f464:	680b      	ldr	r3, [r1, #0]
 801f466:	6801      	ldr	r1, [r0, #0]
 801f468:	115e      	asrs	r6, r3, #5
 801f46a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801f46e:	f013 031f 	ands.w	r3, r3, #31
 801f472:	b087      	sub	sp, #28
 801f474:	bf18      	it	ne
 801f476:	3604      	addne	r6, #4
 801f478:	2500      	movs	r5, #0
 801f47a:	1f37      	subs	r7, r6, #4
 801f47c:	4682      	mov	sl, r0
 801f47e:	4690      	mov	r8, r2
 801f480:	9301      	str	r3, [sp, #4]
 801f482:	f846 5c04 	str.w	r5, [r6, #-4]
 801f486:	46b9      	mov	r9, r7
 801f488:	463c      	mov	r4, r7
 801f48a:	9502      	str	r5, [sp, #8]
 801f48c:	46ab      	mov	fp, r5
 801f48e:	784a      	ldrb	r2, [r1, #1]
 801f490:	1c4b      	adds	r3, r1, #1
 801f492:	9303      	str	r3, [sp, #12]
 801f494:	b342      	cbz	r2, 801f4e8 <__hexnan+0x88>
 801f496:	4610      	mov	r0, r2
 801f498:	9105      	str	r1, [sp, #20]
 801f49a:	9204      	str	r2, [sp, #16]
 801f49c:	f7ff fd76 	bl	801ef8c <__hexdig_fun>
 801f4a0:	2800      	cmp	r0, #0
 801f4a2:	d14f      	bne.n	801f544 <__hexnan+0xe4>
 801f4a4:	9a04      	ldr	r2, [sp, #16]
 801f4a6:	9905      	ldr	r1, [sp, #20]
 801f4a8:	2a20      	cmp	r2, #32
 801f4aa:	d818      	bhi.n	801f4de <__hexnan+0x7e>
 801f4ac:	9b02      	ldr	r3, [sp, #8]
 801f4ae:	459b      	cmp	fp, r3
 801f4b0:	dd13      	ble.n	801f4da <__hexnan+0x7a>
 801f4b2:	454c      	cmp	r4, r9
 801f4b4:	d206      	bcs.n	801f4c4 <__hexnan+0x64>
 801f4b6:	2d07      	cmp	r5, #7
 801f4b8:	dc04      	bgt.n	801f4c4 <__hexnan+0x64>
 801f4ba:	462a      	mov	r2, r5
 801f4bc:	4649      	mov	r1, r9
 801f4be:	4620      	mov	r0, r4
 801f4c0:	f7ff ffa8 	bl	801f414 <L_shift>
 801f4c4:	4544      	cmp	r4, r8
 801f4c6:	d950      	bls.n	801f56a <__hexnan+0x10a>
 801f4c8:	2300      	movs	r3, #0
 801f4ca:	f1a4 0904 	sub.w	r9, r4, #4
 801f4ce:	f844 3c04 	str.w	r3, [r4, #-4]
 801f4d2:	f8cd b008 	str.w	fp, [sp, #8]
 801f4d6:	464c      	mov	r4, r9
 801f4d8:	461d      	mov	r5, r3
 801f4da:	9903      	ldr	r1, [sp, #12]
 801f4dc:	e7d7      	b.n	801f48e <__hexnan+0x2e>
 801f4de:	2a29      	cmp	r2, #41	; 0x29
 801f4e0:	d155      	bne.n	801f58e <__hexnan+0x12e>
 801f4e2:	3102      	adds	r1, #2
 801f4e4:	f8ca 1000 	str.w	r1, [sl]
 801f4e8:	f1bb 0f00 	cmp.w	fp, #0
 801f4ec:	d04f      	beq.n	801f58e <__hexnan+0x12e>
 801f4ee:	454c      	cmp	r4, r9
 801f4f0:	d206      	bcs.n	801f500 <__hexnan+0xa0>
 801f4f2:	2d07      	cmp	r5, #7
 801f4f4:	dc04      	bgt.n	801f500 <__hexnan+0xa0>
 801f4f6:	462a      	mov	r2, r5
 801f4f8:	4649      	mov	r1, r9
 801f4fa:	4620      	mov	r0, r4
 801f4fc:	f7ff ff8a 	bl	801f414 <L_shift>
 801f500:	4544      	cmp	r4, r8
 801f502:	d934      	bls.n	801f56e <__hexnan+0x10e>
 801f504:	f1a8 0204 	sub.w	r2, r8, #4
 801f508:	4623      	mov	r3, r4
 801f50a:	f853 1b04 	ldr.w	r1, [r3], #4
 801f50e:	f842 1f04 	str.w	r1, [r2, #4]!
 801f512:	429f      	cmp	r7, r3
 801f514:	d2f9      	bcs.n	801f50a <__hexnan+0xaa>
 801f516:	1b3b      	subs	r3, r7, r4
 801f518:	f023 0303 	bic.w	r3, r3, #3
 801f51c:	3304      	adds	r3, #4
 801f51e:	3e03      	subs	r6, #3
 801f520:	3401      	adds	r4, #1
 801f522:	42a6      	cmp	r6, r4
 801f524:	bf38      	it	cc
 801f526:	2304      	movcc	r3, #4
 801f528:	4443      	add	r3, r8
 801f52a:	2200      	movs	r2, #0
 801f52c:	f843 2b04 	str.w	r2, [r3], #4
 801f530:	429f      	cmp	r7, r3
 801f532:	d2fb      	bcs.n	801f52c <__hexnan+0xcc>
 801f534:	683b      	ldr	r3, [r7, #0]
 801f536:	b91b      	cbnz	r3, 801f540 <__hexnan+0xe0>
 801f538:	4547      	cmp	r7, r8
 801f53a:	d126      	bne.n	801f58a <__hexnan+0x12a>
 801f53c:	2301      	movs	r3, #1
 801f53e:	603b      	str	r3, [r7, #0]
 801f540:	2005      	movs	r0, #5
 801f542:	e025      	b.n	801f590 <__hexnan+0x130>
 801f544:	3501      	adds	r5, #1
 801f546:	2d08      	cmp	r5, #8
 801f548:	f10b 0b01 	add.w	fp, fp, #1
 801f54c:	dd06      	ble.n	801f55c <__hexnan+0xfc>
 801f54e:	4544      	cmp	r4, r8
 801f550:	d9c3      	bls.n	801f4da <__hexnan+0x7a>
 801f552:	2300      	movs	r3, #0
 801f554:	f844 3c04 	str.w	r3, [r4, #-4]
 801f558:	2501      	movs	r5, #1
 801f55a:	3c04      	subs	r4, #4
 801f55c:	6822      	ldr	r2, [r4, #0]
 801f55e:	f000 000f 	and.w	r0, r0, #15
 801f562:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801f566:	6020      	str	r0, [r4, #0]
 801f568:	e7b7      	b.n	801f4da <__hexnan+0x7a>
 801f56a:	2508      	movs	r5, #8
 801f56c:	e7b5      	b.n	801f4da <__hexnan+0x7a>
 801f56e:	9b01      	ldr	r3, [sp, #4]
 801f570:	2b00      	cmp	r3, #0
 801f572:	d0df      	beq.n	801f534 <__hexnan+0xd4>
 801f574:	f1c3 0320 	rsb	r3, r3, #32
 801f578:	f04f 32ff 	mov.w	r2, #4294967295
 801f57c:	40da      	lsrs	r2, r3
 801f57e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801f582:	4013      	ands	r3, r2
 801f584:	f846 3c04 	str.w	r3, [r6, #-4]
 801f588:	e7d4      	b.n	801f534 <__hexnan+0xd4>
 801f58a:	3f04      	subs	r7, #4
 801f58c:	e7d2      	b.n	801f534 <__hexnan+0xd4>
 801f58e:	2004      	movs	r0, #4
 801f590:	b007      	add	sp, #28
 801f592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f596 <__ascii_mbtowc>:
 801f596:	b082      	sub	sp, #8
 801f598:	b901      	cbnz	r1, 801f59c <__ascii_mbtowc+0x6>
 801f59a:	a901      	add	r1, sp, #4
 801f59c:	b142      	cbz	r2, 801f5b0 <__ascii_mbtowc+0x1a>
 801f59e:	b14b      	cbz	r3, 801f5b4 <__ascii_mbtowc+0x1e>
 801f5a0:	7813      	ldrb	r3, [r2, #0]
 801f5a2:	600b      	str	r3, [r1, #0]
 801f5a4:	7812      	ldrb	r2, [r2, #0]
 801f5a6:	1e10      	subs	r0, r2, #0
 801f5a8:	bf18      	it	ne
 801f5aa:	2001      	movne	r0, #1
 801f5ac:	b002      	add	sp, #8
 801f5ae:	4770      	bx	lr
 801f5b0:	4610      	mov	r0, r2
 801f5b2:	e7fb      	b.n	801f5ac <__ascii_mbtowc+0x16>
 801f5b4:	f06f 0001 	mvn.w	r0, #1
 801f5b8:	e7f8      	b.n	801f5ac <__ascii_mbtowc+0x16>

0801f5ba <_realloc_r>:
 801f5ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f5be:	4680      	mov	r8, r0
 801f5c0:	4614      	mov	r4, r2
 801f5c2:	460e      	mov	r6, r1
 801f5c4:	b921      	cbnz	r1, 801f5d0 <_realloc_r+0x16>
 801f5c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f5ca:	4611      	mov	r1, r2
 801f5cc:	f7fd baec 	b.w	801cba8 <_malloc_r>
 801f5d0:	b92a      	cbnz	r2, 801f5de <_realloc_r+0x24>
 801f5d2:	f7fd fa75 	bl	801cac0 <_free_r>
 801f5d6:	4625      	mov	r5, r4
 801f5d8:	4628      	mov	r0, r5
 801f5da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f5de:	f000 f8b6 	bl	801f74e <_malloc_usable_size_r>
 801f5e2:	4284      	cmp	r4, r0
 801f5e4:	4607      	mov	r7, r0
 801f5e6:	d802      	bhi.n	801f5ee <_realloc_r+0x34>
 801f5e8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801f5ec:	d812      	bhi.n	801f614 <_realloc_r+0x5a>
 801f5ee:	4621      	mov	r1, r4
 801f5f0:	4640      	mov	r0, r8
 801f5f2:	f7fd fad9 	bl	801cba8 <_malloc_r>
 801f5f6:	4605      	mov	r5, r0
 801f5f8:	2800      	cmp	r0, #0
 801f5fa:	d0ed      	beq.n	801f5d8 <_realloc_r+0x1e>
 801f5fc:	42bc      	cmp	r4, r7
 801f5fe:	4622      	mov	r2, r4
 801f600:	4631      	mov	r1, r6
 801f602:	bf28      	it	cs
 801f604:	463a      	movcs	r2, r7
 801f606:	f7fc fc50 	bl	801beaa <memcpy>
 801f60a:	4631      	mov	r1, r6
 801f60c:	4640      	mov	r0, r8
 801f60e:	f7fd fa57 	bl	801cac0 <_free_r>
 801f612:	e7e1      	b.n	801f5d8 <_realloc_r+0x1e>
 801f614:	4635      	mov	r5, r6
 801f616:	e7df      	b.n	801f5d8 <_realloc_r+0x1e>

0801f618 <_strtoul_l.constprop.0>:
 801f618:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f61c:	4f36      	ldr	r7, [pc, #216]	; (801f6f8 <_strtoul_l.constprop.0+0xe0>)
 801f61e:	4686      	mov	lr, r0
 801f620:	460d      	mov	r5, r1
 801f622:	4628      	mov	r0, r5
 801f624:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f628:	5d3e      	ldrb	r6, [r7, r4]
 801f62a:	f016 0608 	ands.w	r6, r6, #8
 801f62e:	d1f8      	bne.n	801f622 <_strtoul_l.constprop.0+0xa>
 801f630:	2c2d      	cmp	r4, #45	; 0x2d
 801f632:	d130      	bne.n	801f696 <_strtoul_l.constprop.0+0x7e>
 801f634:	782c      	ldrb	r4, [r5, #0]
 801f636:	2601      	movs	r6, #1
 801f638:	1c85      	adds	r5, r0, #2
 801f63a:	2b00      	cmp	r3, #0
 801f63c:	d057      	beq.n	801f6ee <_strtoul_l.constprop.0+0xd6>
 801f63e:	2b10      	cmp	r3, #16
 801f640:	d109      	bne.n	801f656 <_strtoul_l.constprop.0+0x3e>
 801f642:	2c30      	cmp	r4, #48	; 0x30
 801f644:	d107      	bne.n	801f656 <_strtoul_l.constprop.0+0x3e>
 801f646:	7828      	ldrb	r0, [r5, #0]
 801f648:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801f64c:	2858      	cmp	r0, #88	; 0x58
 801f64e:	d149      	bne.n	801f6e4 <_strtoul_l.constprop.0+0xcc>
 801f650:	786c      	ldrb	r4, [r5, #1]
 801f652:	2310      	movs	r3, #16
 801f654:	3502      	adds	r5, #2
 801f656:	f04f 38ff 	mov.w	r8, #4294967295
 801f65a:	2700      	movs	r7, #0
 801f65c:	fbb8 f8f3 	udiv	r8, r8, r3
 801f660:	fb03 f908 	mul.w	r9, r3, r8
 801f664:	ea6f 0909 	mvn.w	r9, r9
 801f668:	4638      	mov	r0, r7
 801f66a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801f66e:	f1bc 0f09 	cmp.w	ip, #9
 801f672:	d815      	bhi.n	801f6a0 <_strtoul_l.constprop.0+0x88>
 801f674:	4664      	mov	r4, ip
 801f676:	42a3      	cmp	r3, r4
 801f678:	dd23      	ble.n	801f6c2 <_strtoul_l.constprop.0+0xaa>
 801f67a:	f1b7 3fff 	cmp.w	r7, #4294967295
 801f67e:	d007      	beq.n	801f690 <_strtoul_l.constprop.0+0x78>
 801f680:	4580      	cmp	r8, r0
 801f682:	d31b      	bcc.n	801f6bc <_strtoul_l.constprop.0+0xa4>
 801f684:	d101      	bne.n	801f68a <_strtoul_l.constprop.0+0x72>
 801f686:	45a1      	cmp	r9, r4
 801f688:	db18      	blt.n	801f6bc <_strtoul_l.constprop.0+0xa4>
 801f68a:	fb00 4003 	mla	r0, r0, r3, r4
 801f68e:	2701      	movs	r7, #1
 801f690:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f694:	e7e9      	b.n	801f66a <_strtoul_l.constprop.0+0x52>
 801f696:	2c2b      	cmp	r4, #43	; 0x2b
 801f698:	bf04      	itt	eq
 801f69a:	782c      	ldrbeq	r4, [r5, #0]
 801f69c:	1c85      	addeq	r5, r0, #2
 801f69e:	e7cc      	b.n	801f63a <_strtoul_l.constprop.0+0x22>
 801f6a0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801f6a4:	f1bc 0f19 	cmp.w	ip, #25
 801f6a8:	d801      	bhi.n	801f6ae <_strtoul_l.constprop.0+0x96>
 801f6aa:	3c37      	subs	r4, #55	; 0x37
 801f6ac:	e7e3      	b.n	801f676 <_strtoul_l.constprop.0+0x5e>
 801f6ae:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801f6b2:	f1bc 0f19 	cmp.w	ip, #25
 801f6b6:	d804      	bhi.n	801f6c2 <_strtoul_l.constprop.0+0xaa>
 801f6b8:	3c57      	subs	r4, #87	; 0x57
 801f6ba:	e7dc      	b.n	801f676 <_strtoul_l.constprop.0+0x5e>
 801f6bc:	f04f 37ff 	mov.w	r7, #4294967295
 801f6c0:	e7e6      	b.n	801f690 <_strtoul_l.constprop.0+0x78>
 801f6c2:	1c7b      	adds	r3, r7, #1
 801f6c4:	d106      	bne.n	801f6d4 <_strtoul_l.constprop.0+0xbc>
 801f6c6:	2322      	movs	r3, #34	; 0x22
 801f6c8:	f8ce 3000 	str.w	r3, [lr]
 801f6cc:	4638      	mov	r0, r7
 801f6ce:	b932      	cbnz	r2, 801f6de <_strtoul_l.constprop.0+0xc6>
 801f6d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f6d4:	b106      	cbz	r6, 801f6d8 <_strtoul_l.constprop.0+0xc0>
 801f6d6:	4240      	negs	r0, r0
 801f6d8:	2a00      	cmp	r2, #0
 801f6da:	d0f9      	beq.n	801f6d0 <_strtoul_l.constprop.0+0xb8>
 801f6dc:	b107      	cbz	r7, 801f6e0 <_strtoul_l.constprop.0+0xc8>
 801f6de:	1e69      	subs	r1, r5, #1
 801f6e0:	6011      	str	r1, [r2, #0]
 801f6e2:	e7f5      	b.n	801f6d0 <_strtoul_l.constprop.0+0xb8>
 801f6e4:	2430      	movs	r4, #48	; 0x30
 801f6e6:	2b00      	cmp	r3, #0
 801f6e8:	d1b5      	bne.n	801f656 <_strtoul_l.constprop.0+0x3e>
 801f6ea:	2308      	movs	r3, #8
 801f6ec:	e7b3      	b.n	801f656 <_strtoul_l.constprop.0+0x3e>
 801f6ee:	2c30      	cmp	r4, #48	; 0x30
 801f6f0:	d0a9      	beq.n	801f646 <_strtoul_l.constprop.0+0x2e>
 801f6f2:	230a      	movs	r3, #10
 801f6f4:	e7af      	b.n	801f656 <_strtoul_l.constprop.0+0x3e>
 801f6f6:	bf00      	nop
 801f6f8:	08020679 	.word	0x08020679

0801f6fc <_strtoul_r>:
 801f6fc:	f7ff bf8c 	b.w	801f618 <_strtoul_l.constprop.0>

0801f700 <__ascii_wctomb>:
 801f700:	b149      	cbz	r1, 801f716 <__ascii_wctomb+0x16>
 801f702:	2aff      	cmp	r2, #255	; 0xff
 801f704:	bf85      	ittet	hi
 801f706:	238a      	movhi	r3, #138	; 0x8a
 801f708:	6003      	strhi	r3, [r0, #0]
 801f70a:	700a      	strbls	r2, [r1, #0]
 801f70c:	f04f 30ff 	movhi.w	r0, #4294967295
 801f710:	bf98      	it	ls
 801f712:	2001      	movls	r0, #1
 801f714:	4770      	bx	lr
 801f716:	4608      	mov	r0, r1
 801f718:	4770      	bx	lr
	...

0801f71c <fiprintf>:
 801f71c:	b40e      	push	{r1, r2, r3}
 801f71e:	b503      	push	{r0, r1, lr}
 801f720:	4601      	mov	r1, r0
 801f722:	ab03      	add	r3, sp, #12
 801f724:	4805      	ldr	r0, [pc, #20]	; (801f73c <fiprintf+0x20>)
 801f726:	f853 2b04 	ldr.w	r2, [r3], #4
 801f72a:	6800      	ldr	r0, [r0, #0]
 801f72c:	9301      	str	r3, [sp, #4]
 801f72e:	f000 f83f 	bl	801f7b0 <_vfiprintf_r>
 801f732:	b002      	add	sp, #8
 801f734:	f85d eb04 	ldr.w	lr, [sp], #4
 801f738:	b003      	add	sp, #12
 801f73a:	4770      	bx	lr
 801f73c:	24000158 	.word	0x24000158

0801f740 <abort>:
 801f740:	b508      	push	{r3, lr}
 801f742:	2006      	movs	r0, #6
 801f744:	f000 fa0c 	bl	801fb60 <raise>
 801f748:	2001      	movs	r0, #1
 801f74a:	f7e4 fb0d 	bl	8003d68 <_exit>

0801f74e <_malloc_usable_size_r>:
 801f74e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f752:	1f18      	subs	r0, r3, #4
 801f754:	2b00      	cmp	r3, #0
 801f756:	bfbc      	itt	lt
 801f758:	580b      	ldrlt	r3, [r1, r0]
 801f75a:	18c0      	addlt	r0, r0, r3
 801f75c:	4770      	bx	lr

0801f75e <__sfputc_r>:
 801f75e:	6893      	ldr	r3, [r2, #8]
 801f760:	3b01      	subs	r3, #1
 801f762:	2b00      	cmp	r3, #0
 801f764:	b410      	push	{r4}
 801f766:	6093      	str	r3, [r2, #8]
 801f768:	da08      	bge.n	801f77c <__sfputc_r+0x1e>
 801f76a:	6994      	ldr	r4, [r2, #24]
 801f76c:	42a3      	cmp	r3, r4
 801f76e:	db01      	blt.n	801f774 <__sfputc_r+0x16>
 801f770:	290a      	cmp	r1, #10
 801f772:	d103      	bne.n	801f77c <__sfputc_r+0x1e>
 801f774:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f778:	f000 b934 	b.w	801f9e4 <__swbuf_r>
 801f77c:	6813      	ldr	r3, [r2, #0]
 801f77e:	1c58      	adds	r0, r3, #1
 801f780:	6010      	str	r0, [r2, #0]
 801f782:	7019      	strb	r1, [r3, #0]
 801f784:	4608      	mov	r0, r1
 801f786:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f78a:	4770      	bx	lr

0801f78c <__sfputs_r>:
 801f78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f78e:	4606      	mov	r6, r0
 801f790:	460f      	mov	r7, r1
 801f792:	4614      	mov	r4, r2
 801f794:	18d5      	adds	r5, r2, r3
 801f796:	42ac      	cmp	r4, r5
 801f798:	d101      	bne.n	801f79e <__sfputs_r+0x12>
 801f79a:	2000      	movs	r0, #0
 801f79c:	e007      	b.n	801f7ae <__sfputs_r+0x22>
 801f79e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f7a2:	463a      	mov	r2, r7
 801f7a4:	4630      	mov	r0, r6
 801f7a6:	f7ff ffda 	bl	801f75e <__sfputc_r>
 801f7aa:	1c43      	adds	r3, r0, #1
 801f7ac:	d1f3      	bne.n	801f796 <__sfputs_r+0xa>
 801f7ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801f7b0 <_vfiprintf_r>:
 801f7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7b4:	460d      	mov	r5, r1
 801f7b6:	b09d      	sub	sp, #116	; 0x74
 801f7b8:	4614      	mov	r4, r2
 801f7ba:	4698      	mov	r8, r3
 801f7bc:	4606      	mov	r6, r0
 801f7be:	b118      	cbz	r0, 801f7c8 <_vfiprintf_r+0x18>
 801f7c0:	6a03      	ldr	r3, [r0, #32]
 801f7c2:	b90b      	cbnz	r3, 801f7c8 <_vfiprintf_r+0x18>
 801f7c4:	f7fc fa22 	bl	801bc0c <__sinit>
 801f7c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f7ca:	07d9      	lsls	r1, r3, #31
 801f7cc:	d405      	bmi.n	801f7da <_vfiprintf_r+0x2a>
 801f7ce:	89ab      	ldrh	r3, [r5, #12]
 801f7d0:	059a      	lsls	r2, r3, #22
 801f7d2:	d402      	bmi.n	801f7da <_vfiprintf_r+0x2a>
 801f7d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f7d6:	f7fc fb5e 	bl	801be96 <__retarget_lock_acquire_recursive>
 801f7da:	89ab      	ldrh	r3, [r5, #12]
 801f7dc:	071b      	lsls	r3, r3, #28
 801f7de:	d501      	bpl.n	801f7e4 <_vfiprintf_r+0x34>
 801f7e0:	692b      	ldr	r3, [r5, #16]
 801f7e2:	b99b      	cbnz	r3, 801f80c <_vfiprintf_r+0x5c>
 801f7e4:	4629      	mov	r1, r5
 801f7e6:	4630      	mov	r0, r6
 801f7e8:	f000 f93a 	bl	801fa60 <__swsetup_r>
 801f7ec:	b170      	cbz	r0, 801f80c <_vfiprintf_r+0x5c>
 801f7ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f7f0:	07dc      	lsls	r4, r3, #31
 801f7f2:	d504      	bpl.n	801f7fe <_vfiprintf_r+0x4e>
 801f7f4:	f04f 30ff 	mov.w	r0, #4294967295
 801f7f8:	b01d      	add	sp, #116	; 0x74
 801f7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f7fe:	89ab      	ldrh	r3, [r5, #12]
 801f800:	0598      	lsls	r0, r3, #22
 801f802:	d4f7      	bmi.n	801f7f4 <_vfiprintf_r+0x44>
 801f804:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f806:	f7fc fb47 	bl	801be98 <__retarget_lock_release_recursive>
 801f80a:	e7f3      	b.n	801f7f4 <_vfiprintf_r+0x44>
 801f80c:	2300      	movs	r3, #0
 801f80e:	9309      	str	r3, [sp, #36]	; 0x24
 801f810:	2320      	movs	r3, #32
 801f812:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f816:	f8cd 800c 	str.w	r8, [sp, #12]
 801f81a:	2330      	movs	r3, #48	; 0x30
 801f81c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801f9d0 <_vfiprintf_r+0x220>
 801f820:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f824:	f04f 0901 	mov.w	r9, #1
 801f828:	4623      	mov	r3, r4
 801f82a:	469a      	mov	sl, r3
 801f82c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f830:	b10a      	cbz	r2, 801f836 <_vfiprintf_r+0x86>
 801f832:	2a25      	cmp	r2, #37	; 0x25
 801f834:	d1f9      	bne.n	801f82a <_vfiprintf_r+0x7a>
 801f836:	ebba 0b04 	subs.w	fp, sl, r4
 801f83a:	d00b      	beq.n	801f854 <_vfiprintf_r+0xa4>
 801f83c:	465b      	mov	r3, fp
 801f83e:	4622      	mov	r2, r4
 801f840:	4629      	mov	r1, r5
 801f842:	4630      	mov	r0, r6
 801f844:	f7ff ffa2 	bl	801f78c <__sfputs_r>
 801f848:	3001      	adds	r0, #1
 801f84a:	f000 80a9 	beq.w	801f9a0 <_vfiprintf_r+0x1f0>
 801f84e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f850:	445a      	add	r2, fp
 801f852:	9209      	str	r2, [sp, #36]	; 0x24
 801f854:	f89a 3000 	ldrb.w	r3, [sl]
 801f858:	2b00      	cmp	r3, #0
 801f85a:	f000 80a1 	beq.w	801f9a0 <_vfiprintf_r+0x1f0>
 801f85e:	2300      	movs	r3, #0
 801f860:	f04f 32ff 	mov.w	r2, #4294967295
 801f864:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f868:	f10a 0a01 	add.w	sl, sl, #1
 801f86c:	9304      	str	r3, [sp, #16]
 801f86e:	9307      	str	r3, [sp, #28]
 801f870:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f874:	931a      	str	r3, [sp, #104]	; 0x68
 801f876:	4654      	mov	r4, sl
 801f878:	2205      	movs	r2, #5
 801f87a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f87e:	4854      	ldr	r0, [pc, #336]	; (801f9d0 <_vfiprintf_r+0x220>)
 801f880:	f7e0 fd56 	bl	8000330 <memchr>
 801f884:	9a04      	ldr	r2, [sp, #16]
 801f886:	b9d8      	cbnz	r0, 801f8c0 <_vfiprintf_r+0x110>
 801f888:	06d1      	lsls	r1, r2, #27
 801f88a:	bf44      	itt	mi
 801f88c:	2320      	movmi	r3, #32
 801f88e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f892:	0713      	lsls	r3, r2, #28
 801f894:	bf44      	itt	mi
 801f896:	232b      	movmi	r3, #43	; 0x2b
 801f898:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f89c:	f89a 3000 	ldrb.w	r3, [sl]
 801f8a0:	2b2a      	cmp	r3, #42	; 0x2a
 801f8a2:	d015      	beq.n	801f8d0 <_vfiprintf_r+0x120>
 801f8a4:	9a07      	ldr	r2, [sp, #28]
 801f8a6:	4654      	mov	r4, sl
 801f8a8:	2000      	movs	r0, #0
 801f8aa:	f04f 0c0a 	mov.w	ip, #10
 801f8ae:	4621      	mov	r1, r4
 801f8b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f8b4:	3b30      	subs	r3, #48	; 0x30
 801f8b6:	2b09      	cmp	r3, #9
 801f8b8:	d94d      	bls.n	801f956 <_vfiprintf_r+0x1a6>
 801f8ba:	b1b0      	cbz	r0, 801f8ea <_vfiprintf_r+0x13a>
 801f8bc:	9207      	str	r2, [sp, #28]
 801f8be:	e014      	b.n	801f8ea <_vfiprintf_r+0x13a>
 801f8c0:	eba0 0308 	sub.w	r3, r0, r8
 801f8c4:	fa09 f303 	lsl.w	r3, r9, r3
 801f8c8:	4313      	orrs	r3, r2
 801f8ca:	9304      	str	r3, [sp, #16]
 801f8cc:	46a2      	mov	sl, r4
 801f8ce:	e7d2      	b.n	801f876 <_vfiprintf_r+0xc6>
 801f8d0:	9b03      	ldr	r3, [sp, #12]
 801f8d2:	1d19      	adds	r1, r3, #4
 801f8d4:	681b      	ldr	r3, [r3, #0]
 801f8d6:	9103      	str	r1, [sp, #12]
 801f8d8:	2b00      	cmp	r3, #0
 801f8da:	bfbb      	ittet	lt
 801f8dc:	425b      	neglt	r3, r3
 801f8de:	f042 0202 	orrlt.w	r2, r2, #2
 801f8e2:	9307      	strge	r3, [sp, #28]
 801f8e4:	9307      	strlt	r3, [sp, #28]
 801f8e6:	bfb8      	it	lt
 801f8e8:	9204      	strlt	r2, [sp, #16]
 801f8ea:	7823      	ldrb	r3, [r4, #0]
 801f8ec:	2b2e      	cmp	r3, #46	; 0x2e
 801f8ee:	d10c      	bne.n	801f90a <_vfiprintf_r+0x15a>
 801f8f0:	7863      	ldrb	r3, [r4, #1]
 801f8f2:	2b2a      	cmp	r3, #42	; 0x2a
 801f8f4:	d134      	bne.n	801f960 <_vfiprintf_r+0x1b0>
 801f8f6:	9b03      	ldr	r3, [sp, #12]
 801f8f8:	1d1a      	adds	r2, r3, #4
 801f8fa:	681b      	ldr	r3, [r3, #0]
 801f8fc:	9203      	str	r2, [sp, #12]
 801f8fe:	2b00      	cmp	r3, #0
 801f900:	bfb8      	it	lt
 801f902:	f04f 33ff 	movlt.w	r3, #4294967295
 801f906:	3402      	adds	r4, #2
 801f908:	9305      	str	r3, [sp, #20]
 801f90a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801f9e0 <_vfiprintf_r+0x230>
 801f90e:	7821      	ldrb	r1, [r4, #0]
 801f910:	2203      	movs	r2, #3
 801f912:	4650      	mov	r0, sl
 801f914:	f7e0 fd0c 	bl	8000330 <memchr>
 801f918:	b138      	cbz	r0, 801f92a <_vfiprintf_r+0x17a>
 801f91a:	9b04      	ldr	r3, [sp, #16]
 801f91c:	eba0 000a 	sub.w	r0, r0, sl
 801f920:	2240      	movs	r2, #64	; 0x40
 801f922:	4082      	lsls	r2, r0
 801f924:	4313      	orrs	r3, r2
 801f926:	3401      	adds	r4, #1
 801f928:	9304      	str	r3, [sp, #16]
 801f92a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f92e:	4829      	ldr	r0, [pc, #164]	; (801f9d4 <_vfiprintf_r+0x224>)
 801f930:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f934:	2206      	movs	r2, #6
 801f936:	f7e0 fcfb 	bl	8000330 <memchr>
 801f93a:	2800      	cmp	r0, #0
 801f93c:	d03f      	beq.n	801f9be <_vfiprintf_r+0x20e>
 801f93e:	4b26      	ldr	r3, [pc, #152]	; (801f9d8 <_vfiprintf_r+0x228>)
 801f940:	bb1b      	cbnz	r3, 801f98a <_vfiprintf_r+0x1da>
 801f942:	9b03      	ldr	r3, [sp, #12]
 801f944:	3307      	adds	r3, #7
 801f946:	f023 0307 	bic.w	r3, r3, #7
 801f94a:	3308      	adds	r3, #8
 801f94c:	9303      	str	r3, [sp, #12]
 801f94e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f950:	443b      	add	r3, r7
 801f952:	9309      	str	r3, [sp, #36]	; 0x24
 801f954:	e768      	b.n	801f828 <_vfiprintf_r+0x78>
 801f956:	fb0c 3202 	mla	r2, ip, r2, r3
 801f95a:	460c      	mov	r4, r1
 801f95c:	2001      	movs	r0, #1
 801f95e:	e7a6      	b.n	801f8ae <_vfiprintf_r+0xfe>
 801f960:	2300      	movs	r3, #0
 801f962:	3401      	adds	r4, #1
 801f964:	9305      	str	r3, [sp, #20]
 801f966:	4619      	mov	r1, r3
 801f968:	f04f 0c0a 	mov.w	ip, #10
 801f96c:	4620      	mov	r0, r4
 801f96e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f972:	3a30      	subs	r2, #48	; 0x30
 801f974:	2a09      	cmp	r2, #9
 801f976:	d903      	bls.n	801f980 <_vfiprintf_r+0x1d0>
 801f978:	2b00      	cmp	r3, #0
 801f97a:	d0c6      	beq.n	801f90a <_vfiprintf_r+0x15a>
 801f97c:	9105      	str	r1, [sp, #20]
 801f97e:	e7c4      	b.n	801f90a <_vfiprintf_r+0x15a>
 801f980:	fb0c 2101 	mla	r1, ip, r1, r2
 801f984:	4604      	mov	r4, r0
 801f986:	2301      	movs	r3, #1
 801f988:	e7f0      	b.n	801f96c <_vfiprintf_r+0x1bc>
 801f98a:	ab03      	add	r3, sp, #12
 801f98c:	9300      	str	r3, [sp, #0]
 801f98e:	462a      	mov	r2, r5
 801f990:	4b12      	ldr	r3, [pc, #72]	; (801f9dc <_vfiprintf_r+0x22c>)
 801f992:	a904      	add	r1, sp, #16
 801f994:	4630      	mov	r0, r6
 801f996:	f7fb faff 	bl	801af98 <_printf_float>
 801f99a:	4607      	mov	r7, r0
 801f99c:	1c78      	adds	r0, r7, #1
 801f99e:	d1d6      	bne.n	801f94e <_vfiprintf_r+0x19e>
 801f9a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f9a2:	07d9      	lsls	r1, r3, #31
 801f9a4:	d405      	bmi.n	801f9b2 <_vfiprintf_r+0x202>
 801f9a6:	89ab      	ldrh	r3, [r5, #12]
 801f9a8:	059a      	lsls	r2, r3, #22
 801f9aa:	d402      	bmi.n	801f9b2 <_vfiprintf_r+0x202>
 801f9ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f9ae:	f7fc fa73 	bl	801be98 <__retarget_lock_release_recursive>
 801f9b2:	89ab      	ldrh	r3, [r5, #12]
 801f9b4:	065b      	lsls	r3, r3, #25
 801f9b6:	f53f af1d 	bmi.w	801f7f4 <_vfiprintf_r+0x44>
 801f9ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f9bc:	e71c      	b.n	801f7f8 <_vfiprintf_r+0x48>
 801f9be:	ab03      	add	r3, sp, #12
 801f9c0:	9300      	str	r3, [sp, #0]
 801f9c2:	462a      	mov	r2, r5
 801f9c4:	4b05      	ldr	r3, [pc, #20]	; (801f9dc <_vfiprintf_r+0x22c>)
 801f9c6:	a904      	add	r1, sp, #16
 801f9c8:	4630      	mov	r0, r6
 801f9ca:	f7fb fd6d 	bl	801b4a8 <_printf_i>
 801f9ce:	e7e4      	b.n	801f99a <_vfiprintf_r+0x1ea>
 801f9d0:	08020779 	.word	0x08020779
 801f9d4:	08020783 	.word	0x08020783
 801f9d8:	0801af99 	.word	0x0801af99
 801f9dc:	0801f78d 	.word	0x0801f78d
 801f9e0:	0802077f 	.word	0x0802077f

0801f9e4 <__swbuf_r>:
 801f9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f9e6:	460e      	mov	r6, r1
 801f9e8:	4614      	mov	r4, r2
 801f9ea:	4605      	mov	r5, r0
 801f9ec:	b118      	cbz	r0, 801f9f6 <__swbuf_r+0x12>
 801f9ee:	6a03      	ldr	r3, [r0, #32]
 801f9f0:	b90b      	cbnz	r3, 801f9f6 <__swbuf_r+0x12>
 801f9f2:	f7fc f90b 	bl	801bc0c <__sinit>
 801f9f6:	69a3      	ldr	r3, [r4, #24]
 801f9f8:	60a3      	str	r3, [r4, #8]
 801f9fa:	89a3      	ldrh	r3, [r4, #12]
 801f9fc:	071a      	lsls	r2, r3, #28
 801f9fe:	d525      	bpl.n	801fa4c <__swbuf_r+0x68>
 801fa00:	6923      	ldr	r3, [r4, #16]
 801fa02:	b31b      	cbz	r3, 801fa4c <__swbuf_r+0x68>
 801fa04:	6823      	ldr	r3, [r4, #0]
 801fa06:	6922      	ldr	r2, [r4, #16]
 801fa08:	1a98      	subs	r0, r3, r2
 801fa0a:	6963      	ldr	r3, [r4, #20]
 801fa0c:	b2f6      	uxtb	r6, r6
 801fa0e:	4283      	cmp	r3, r0
 801fa10:	4637      	mov	r7, r6
 801fa12:	dc04      	bgt.n	801fa1e <__swbuf_r+0x3a>
 801fa14:	4621      	mov	r1, r4
 801fa16:	4628      	mov	r0, r5
 801fa18:	f7ff f950 	bl	801ecbc <_fflush_r>
 801fa1c:	b9e0      	cbnz	r0, 801fa58 <__swbuf_r+0x74>
 801fa1e:	68a3      	ldr	r3, [r4, #8]
 801fa20:	3b01      	subs	r3, #1
 801fa22:	60a3      	str	r3, [r4, #8]
 801fa24:	6823      	ldr	r3, [r4, #0]
 801fa26:	1c5a      	adds	r2, r3, #1
 801fa28:	6022      	str	r2, [r4, #0]
 801fa2a:	701e      	strb	r6, [r3, #0]
 801fa2c:	6962      	ldr	r2, [r4, #20]
 801fa2e:	1c43      	adds	r3, r0, #1
 801fa30:	429a      	cmp	r2, r3
 801fa32:	d004      	beq.n	801fa3e <__swbuf_r+0x5a>
 801fa34:	89a3      	ldrh	r3, [r4, #12]
 801fa36:	07db      	lsls	r3, r3, #31
 801fa38:	d506      	bpl.n	801fa48 <__swbuf_r+0x64>
 801fa3a:	2e0a      	cmp	r6, #10
 801fa3c:	d104      	bne.n	801fa48 <__swbuf_r+0x64>
 801fa3e:	4621      	mov	r1, r4
 801fa40:	4628      	mov	r0, r5
 801fa42:	f7ff f93b 	bl	801ecbc <_fflush_r>
 801fa46:	b938      	cbnz	r0, 801fa58 <__swbuf_r+0x74>
 801fa48:	4638      	mov	r0, r7
 801fa4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fa4c:	4621      	mov	r1, r4
 801fa4e:	4628      	mov	r0, r5
 801fa50:	f000 f806 	bl	801fa60 <__swsetup_r>
 801fa54:	2800      	cmp	r0, #0
 801fa56:	d0d5      	beq.n	801fa04 <__swbuf_r+0x20>
 801fa58:	f04f 37ff 	mov.w	r7, #4294967295
 801fa5c:	e7f4      	b.n	801fa48 <__swbuf_r+0x64>
	...

0801fa60 <__swsetup_r>:
 801fa60:	b538      	push	{r3, r4, r5, lr}
 801fa62:	4b2a      	ldr	r3, [pc, #168]	; (801fb0c <__swsetup_r+0xac>)
 801fa64:	4605      	mov	r5, r0
 801fa66:	6818      	ldr	r0, [r3, #0]
 801fa68:	460c      	mov	r4, r1
 801fa6a:	b118      	cbz	r0, 801fa74 <__swsetup_r+0x14>
 801fa6c:	6a03      	ldr	r3, [r0, #32]
 801fa6e:	b90b      	cbnz	r3, 801fa74 <__swsetup_r+0x14>
 801fa70:	f7fc f8cc 	bl	801bc0c <__sinit>
 801fa74:	89a3      	ldrh	r3, [r4, #12]
 801fa76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fa7a:	0718      	lsls	r0, r3, #28
 801fa7c:	d422      	bmi.n	801fac4 <__swsetup_r+0x64>
 801fa7e:	06d9      	lsls	r1, r3, #27
 801fa80:	d407      	bmi.n	801fa92 <__swsetup_r+0x32>
 801fa82:	2309      	movs	r3, #9
 801fa84:	602b      	str	r3, [r5, #0]
 801fa86:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801fa8a:	81a3      	strh	r3, [r4, #12]
 801fa8c:	f04f 30ff 	mov.w	r0, #4294967295
 801fa90:	e034      	b.n	801fafc <__swsetup_r+0x9c>
 801fa92:	0758      	lsls	r0, r3, #29
 801fa94:	d512      	bpl.n	801fabc <__swsetup_r+0x5c>
 801fa96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fa98:	b141      	cbz	r1, 801faac <__swsetup_r+0x4c>
 801fa9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fa9e:	4299      	cmp	r1, r3
 801faa0:	d002      	beq.n	801faa8 <__swsetup_r+0x48>
 801faa2:	4628      	mov	r0, r5
 801faa4:	f7fd f80c 	bl	801cac0 <_free_r>
 801faa8:	2300      	movs	r3, #0
 801faaa:	6363      	str	r3, [r4, #52]	; 0x34
 801faac:	89a3      	ldrh	r3, [r4, #12]
 801faae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801fab2:	81a3      	strh	r3, [r4, #12]
 801fab4:	2300      	movs	r3, #0
 801fab6:	6063      	str	r3, [r4, #4]
 801fab8:	6923      	ldr	r3, [r4, #16]
 801faba:	6023      	str	r3, [r4, #0]
 801fabc:	89a3      	ldrh	r3, [r4, #12]
 801fabe:	f043 0308 	orr.w	r3, r3, #8
 801fac2:	81a3      	strh	r3, [r4, #12]
 801fac4:	6923      	ldr	r3, [r4, #16]
 801fac6:	b94b      	cbnz	r3, 801fadc <__swsetup_r+0x7c>
 801fac8:	89a3      	ldrh	r3, [r4, #12]
 801faca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801face:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801fad2:	d003      	beq.n	801fadc <__swsetup_r+0x7c>
 801fad4:	4621      	mov	r1, r4
 801fad6:	4628      	mov	r0, r5
 801fad8:	f000 f884 	bl	801fbe4 <__smakebuf_r>
 801fadc:	89a0      	ldrh	r0, [r4, #12]
 801fade:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fae2:	f010 0301 	ands.w	r3, r0, #1
 801fae6:	d00a      	beq.n	801fafe <__swsetup_r+0x9e>
 801fae8:	2300      	movs	r3, #0
 801faea:	60a3      	str	r3, [r4, #8]
 801faec:	6963      	ldr	r3, [r4, #20]
 801faee:	425b      	negs	r3, r3
 801faf0:	61a3      	str	r3, [r4, #24]
 801faf2:	6923      	ldr	r3, [r4, #16]
 801faf4:	b943      	cbnz	r3, 801fb08 <__swsetup_r+0xa8>
 801faf6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801fafa:	d1c4      	bne.n	801fa86 <__swsetup_r+0x26>
 801fafc:	bd38      	pop	{r3, r4, r5, pc}
 801fafe:	0781      	lsls	r1, r0, #30
 801fb00:	bf58      	it	pl
 801fb02:	6963      	ldrpl	r3, [r4, #20]
 801fb04:	60a3      	str	r3, [r4, #8]
 801fb06:	e7f4      	b.n	801faf2 <__swsetup_r+0x92>
 801fb08:	2000      	movs	r0, #0
 801fb0a:	e7f7      	b.n	801fafc <__swsetup_r+0x9c>
 801fb0c:	24000158 	.word	0x24000158

0801fb10 <_raise_r>:
 801fb10:	291f      	cmp	r1, #31
 801fb12:	b538      	push	{r3, r4, r5, lr}
 801fb14:	4604      	mov	r4, r0
 801fb16:	460d      	mov	r5, r1
 801fb18:	d904      	bls.n	801fb24 <_raise_r+0x14>
 801fb1a:	2316      	movs	r3, #22
 801fb1c:	6003      	str	r3, [r0, #0]
 801fb1e:	f04f 30ff 	mov.w	r0, #4294967295
 801fb22:	bd38      	pop	{r3, r4, r5, pc}
 801fb24:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801fb26:	b112      	cbz	r2, 801fb2e <_raise_r+0x1e>
 801fb28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801fb2c:	b94b      	cbnz	r3, 801fb42 <_raise_r+0x32>
 801fb2e:	4620      	mov	r0, r4
 801fb30:	f000 f830 	bl	801fb94 <_getpid_r>
 801fb34:	462a      	mov	r2, r5
 801fb36:	4601      	mov	r1, r0
 801fb38:	4620      	mov	r0, r4
 801fb3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fb3e:	f000 b817 	b.w	801fb70 <_kill_r>
 801fb42:	2b01      	cmp	r3, #1
 801fb44:	d00a      	beq.n	801fb5c <_raise_r+0x4c>
 801fb46:	1c59      	adds	r1, r3, #1
 801fb48:	d103      	bne.n	801fb52 <_raise_r+0x42>
 801fb4a:	2316      	movs	r3, #22
 801fb4c:	6003      	str	r3, [r0, #0]
 801fb4e:	2001      	movs	r0, #1
 801fb50:	e7e7      	b.n	801fb22 <_raise_r+0x12>
 801fb52:	2400      	movs	r4, #0
 801fb54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801fb58:	4628      	mov	r0, r5
 801fb5a:	4798      	blx	r3
 801fb5c:	2000      	movs	r0, #0
 801fb5e:	e7e0      	b.n	801fb22 <_raise_r+0x12>

0801fb60 <raise>:
 801fb60:	4b02      	ldr	r3, [pc, #8]	; (801fb6c <raise+0xc>)
 801fb62:	4601      	mov	r1, r0
 801fb64:	6818      	ldr	r0, [r3, #0]
 801fb66:	f7ff bfd3 	b.w	801fb10 <_raise_r>
 801fb6a:	bf00      	nop
 801fb6c:	24000158 	.word	0x24000158

0801fb70 <_kill_r>:
 801fb70:	b538      	push	{r3, r4, r5, lr}
 801fb72:	4d07      	ldr	r5, [pc, #28]	; (801fb90 <_kill_r+0x20>)
 801fb74:	2300      	movs	r3, #0
 801fb76:	4604      	mov	r4, r0
 801fb78:	4608      	mov	r0, r1
 801fb7a:	4611      	mov	r1, r2
 801fb7c:	602b      	str	r3, [r5, #0]
 801fb7e:	f7e4 f8e3 	bl	8003d48 <_kill>
 801fb82:	1c43      	adds	r3, r0, #1
 801fb84:	d102      	bne.n	801fb8c <_kill_r+0x1c>
 801fb86:	682b      	ldr	r3, [r5, #0]
 801fb88:	b103      	cbz	r3, 801fb8c <_kill_r+0x1c>
 801fb8a:	6023      	str	r3, [r4, #0]
 801fb8c:	bd38      	pop	{r3, r4, r5, pc}
 801fb8e:	bf00      	nop
 801fb90:	24003620 	.word	0x24003620

0801fb94 <_getpid_r>:
 801fb94:	f7e4 b8d0 	b.w	8003d38 <_getpid>

0801fb98 <__swhatbuf_r>:
 801fb98:	b570      	push	{r4, r5, r6, lr}
 801fb9a:	460c      	mov	r4, r1
 801fb9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fba0:	2900      	cmp	r1, #0
 801fba2:	b096      	sub	sp, #88	; 0x58
 801fba4:	4615      	mov	r5, r2
 801fba6:	461e      	mov	r6, r3
 801fba8:	da0d      	bge.n	801fbc6 <__swhatbuf_r+0x2e>
 801fbaa:	89a3      	ldrh	r3, [r4, #12]
 801fbac:	f013 0f80 	tst.w	r3, #128	; 0x80
 801fbb0:	f04f 0100 	mov.w	r1, #0
 801fbb4:	bf0c      	ite	eq
 801fbb6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801fbba:	2340      	movne	r3, #64	; 0x40
 801fbbc:	2000      	movs	r0, #0
 801fbbe:	6031      	str	r1, [r6, #0]
 801fbc0:	602b      	str	r3, [r5, #0]
 801fbc2:	b016      	add	sp, #88	; 0x58
 801fbc4:	bd70      	pop	{r4, r5, r6, pc}
 801fbc6:	466a      	mov	r2, sp
 801fbc8:	f000 f848 	bl	801fc5c <_fstat_r>
 801fbcc:	2800      	cmp	r0, #0
 801fbce:	dbec      	blt.n	801fbaa <__swhatbuf_r+0x12>
 801fbd0:	9901      	ldr	r1, [sp, #4]
 801fbd2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801fbd6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801fbda:	4259      	negs	r1, r3
 801fbdc:	4159      	adcs	r1, r3
 801fbde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801fbe2:	e7eb      	b.n	801fbbc <__swhatbuf_r+0x24>

0801fbe4 <__smakebuf_r>:
 801fbe4:	898b      	ldrh	r3, [r1, #12]
 801fbe6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801fbe8:	079d      	lsls	r5, r3, #30
 801fbea:	4606      	mov	r6, r0
 801fbec:	460c      	mov	r4, r1
 801fbee:	d507      	bpl.n	801fc00 <__smakebuf_r+0x1c>
 801fbf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801fbf4:	6023      	str	r3, [r4, #0]
 801fbf6:	6123      	str	r3, [r4, #16]
 801fbf8:	2301      	movs	r3, #1
 801fbfa:	6163      	str	r3, [r4, #20]
 801fbfc:	b002      	add	sp, #8
 801fbfe:	bd70      	pop	{r4, r5, r6, pc}
 801fc00:	ab01      	add	r3, sp, #4
 801fc02:	466a      	mov	r2, sp
 801fc04:	f7ff ffc8 	bl	801fb98 <__swhatbuf_r>
 801fc08:	9900      	ldr	r1, [sp, #0]
 801fc0a:	4605      	mov	r5, r0
 801fc0c:	4630      	mov	r0, r6
 801fc0e:	f7fc ffcb 	bl	801cba8 <_malloc_r>
 801fc12:	b948      	cbnz	r0, 801fc28 <__smakebuf_r+0x44>
 801fc14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fc18:	059a      	lsls	r2, r3, #22
 801fc1a:	d4ef      	bmi.n	801fbfc <__smakebuf_r+0x18>
 801fc1c:	f023 0303 	bic.w	r3, r3, #3
 801fc20:	f043 0302 	orr.w	r3, r3, #2
 801fc24:	81a3      	strh	r3, [r4, #12]
 801fc26:	e7e3      	b.n	801fbf0 <__smakebuf_r+0xc>
 801fc28:	89a3      	ldrh	r3, [r4, #12]
 801fc2a:	6020      	str	r0, [r4, #0]
 801fc2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fc30:	81a3      	strh	r3, [r4, #12]
 801fc32:	9b00      	ldr	r3, [sp, #0]
 801fc34:	6163      	str	r3, [r4, #20]
 801fc36:	9b01      	ldr	r3, [sp, #4]
 801fc38:	6120      	str	r0, [r4, #16]
 801fc3a:	b15b      	cbz	r3, 801fc54 <__smakebuf_r+0x70>
 801fc3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fc40:	4630      	mov	r0, r6
 801fc42:	f000 f81d 	bl	801fc80 <_isatty_r>
 801fc46:	b128      	cbz	r0, 801fc54 <__smakebuf_r+0x70>
 801fc48:	89a3      	ldrh	r3, [r4, #12]
 801fc4a:	f023 0303 	bic.w	r3, r3, #3
 801fc4e:	f043 0301 	orr.w	r3, r3, #1
 801fc52:	81a3      	strh	r3, [r4, #12]
 801fc54:	89a3      	ldrh	r3, [r4, #12]
 801fc56:	431d      	orrs	r5, r3
 801fc58:	81a5      	strh	r5, [r4, #12]
 801fc5a:	e7cf      	b.n	801fbfc <__smakebuf_r+0x18>

0801fc5c <_fstat_r>:
 801fc5c:	b538      	push	{r3, r4, r5, lr}
 801fc5e:	4d07      	ldr	r5, [pc, #28]	; (801fc7c <_fstat_r+0x20>)
 801fc60:	2300      	movs	r3, #0
 801fc62:	4604      	mov	r4, r0
 801fc64:	4608      	mov	r0, r1
 801fc66:	4611      	mov	r1, r2
 801fc68:	602b      	str	r3, [r5, #0]
 801fc6a:	f7e4 f8cc 	bl	8003e06 <_fstat>
 801fc6e:	1c43      	adds	r3, r0, #1
 801fc70:	d102      	bne.n	801fc78 <_fstat_r+0x1c>
 801fc72:	682b      	ldr	r3, [r5, #0]
 801fc74:	b103      	cbz	r3, 801fc78 <_fstat_r+0x1c>
 801fc76:	6023      	str	r3, [r4, #0]
 801fc78:	bd38      	pop	{r3, r4, r5, pc}
 801fc7a:	bf00      	nop
 801fc7c:	24003620 	.word	0x24003620

0801fc80 <_isatty_r>:
 801fc80:	b538      	push	{r3, r4, r5, lr}
 801fc82:	4d06      	ldr	r5, [pc, #24]	; (801fc9c <_isatty_r+0x1c>)
 801fc84:	2300      	movs	r3, #0
 801fc86:	4604      	mov	r4, r0
 801fc88:	4608      	mov	r0, r1
 801fc8a:	602b      	str	r3, [r5, #0]
 801fc8c:	f7e4 f8cb 	bl	8003e26 <_isatty>
 801fc90:	1c43      	adds	r3, r0, #1
 801fc92:	d102      	bne.n	801fc9a <_isatty_r+0x1a>
 801fc94:	682b      	ldr	r3, [r5, #0]
 801fc96:	b103      	cbz	r3, 801fc9a <_isatty_r+0x1a>
 801fc98:	6023      	str	r3, [r4, #0]
 801fc9a:	bd38      	pop	{r3, r4, r5, pc}
 801fc9c:	24003620 	.word	0x24003620

0801fca0 <_init>:
 801fca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fca2:	bf00      	nop
 801fca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fca6:	bc08      	pop	{r3}
 801fca8:	469e      	mov	lr, r3
 801fcaa:	4770      	bx	lr

0801fcac <_fini>:
 801fcac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fcae:	bf00      	nop
 801fcb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fcb2:	bc08      	pop	{r3}
 801fcb4:	469e      	mov	lr, r3
 801fcb6:	4770      	bx	lr
